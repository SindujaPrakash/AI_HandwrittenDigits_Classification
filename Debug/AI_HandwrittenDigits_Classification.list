
AI_HandwrittenDigits_Classification.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ddc  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000e7ac0  08009f64  08009f64  00019f64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080f1a24  080f1a24  00110618  2**0
                  CONTENTS
  4 .ARM          00000008  080f1a24  080f1a24  00101a24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080f1a2c  080f1a2c  00110618  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080f1a2c  080f1a2c  00101a2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080f1a30  080f1a30  00101a30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000618  20000000  080f1a34  00110000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000dc8  20000618  080f204c  00110618  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200013e0  080f204c  001113e0  2**0
                  ALLOC
 11 .ARM.attributes 00000034  00000000  00000000  00110618  2**0
                  CONTENTS, READONLY
 12 .debug_info   000106d4  00000000  00000000  0011064c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002b5d  00000000  00000000  00120d20  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d88  00000000  00000000  00123880  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c20  00000000  00000000  00124608  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023243  00000000  00000000  00125228  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c7e1  00000000  00000000  0014846b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cfba1  00000000  00000000  00154c4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      00001b20  00000000  00000000  002247ed  2**0
                  CONTENTS, READONLY
 20 .iar.rtmodel  0000017e  00000000  00000000  0022630d  2**0
                  CONTENTS, READONLY
 21 .iar_vfe_header 0000001c  00000000  00000000  0022648c  2**2
                  CONTENTS, READONLY
 22 .debug_frame  00006b30  00000000  00000000  002264a8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000618 	.word	0x20000618
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009f4c 	.word	0x08009f4c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000061c 	.word	0x2000061c
 80001c4:	08009f4c 	.word	0x08009f4c

080001c8 <_ai_platform_get_io_buffers>:
 80001c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80001cc:	b081      	sub	sp, #4
 80001ce:	468b      	mov	fp, r1
 80001d0:	6801      	ldr	r1, [r0, #0]
 80001d2:	680f      	ldr	r7, [r1, #0]
 80001d4:	8901      	ldrh	r1, [r0, #8]
 80001d6:	2600      	movs	r6, #0
 80001d8:	46b0      	mov	r8, r6
 80001da:	f04f 0904 	mov.w	r9, #4
 80001de:	46b2      	mov	sl, r6
 80001e0:	b339      	cbz	r1, 8000232 <_ai_platform_get_io_buffers+0x6a>
 80001e2:	4604      	mov	r4, r0
 80001e4:	6860      	ldr	r0, [r4, #4]
 80001e6:	683a      	ldr	r2, [r7, #0]
 80001e8:	6841      	ldr	r1, [r0, #4]
 80001ea:	6810      	ldr	r0, [r2, #0]
 80001ec:	eb01 050a 	add.w	r5, r1, sl
 80001f0:	f003 f9ae 	bl	8003550 <ai_array_to_buffer_fmt>
 80001f4:	6028      	str	r0, [r5, #0]
 80001f6:	2101      	movs	r1, #1
 80001f8:	80a9      	strh	r1, [r5, #4]
 80001fa:	1c76      	adds	r6, r6, #1
 80001fc:	6938      	ldr	r0, [r7, #16]
 80001fe:	80e8      	strh	r0, [r5, #6]
 8000200:	f108 0801 	add.w	r8, r8, #1
 8000204:	68f9      	ldr	r1, [r7, #12]
 8000206:	8129      	strh	r1, [r5, #8]
 8000208:	f10a 0a14 	add.w	sl, sl, #20
 800020c:	68b8      	ldr	r0, [r7, #8]
 800020e:	60e8      	str	r0, [r5, #12]
 8000210:	6839      	ldr	r1, [r7, #0]
 8000212:	6888      	ldr	r0, [r1, #8]
 8000214:	6128      	str	r0, [r5, #16]
 8000216:	6820      	ldr	r0, [r4, #0]
 8000218:	f850 7009 	ldr.w	r7, [r0, r9]
 800021c:	8920      	ldrh	r0, [r4, #8]
 800021e:	4580      	cmp	r8, r0
 8000220:	f109 0904 	add.w	r9, r9, #4
 8000224:	d3de      	bcc.n	80001e4 <_ai_platform_get_io_buffers+0x1c>
 8000226:	b2b0      	uxth	r0, r6
 8000228:	b118      	cbz	r0, 8000232 <_ai_platform_get_io_buffers+0x6a>
 800022a:	6860      	ldr	r0, [r4, #4]
 800022c:	6841      	ldr	r1, [r0, #4]
 800022e:	f8cb 1000 	str.w	r1, [fp]
 8000232:	b2b0      	uxth	r0, r6
 8000234:	b001      	add	sp, #4
 8000236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800023a <_platform_network_state_setup>:
 800023a:	b430      	push	{r4, r5}
 800023c:	6914      	ldr	r4, [r2, #16]
 800023e:	6a13      	ldr	r3, [r2, #32]
 8000240:	435c      	muls	r4, r3
 8000242:	6084      	str	r4, [r0, #8]
 8000244:	888d      	ldrh	r5, [r1, #4]
 8000246:	436c      	muls	r4, r5
 8000248:	60c4      	str	r4, [r0, #12]
 800024a:	6909      	ldr	r1, [r1, #16]
 800024c:	68c3      	ldr	r3, [r0, #12]
 800024e:	6041      	str	r1, [r0, #4]
 8000250:	4419      	add	r1, r3
 8000252:	6001      	str	r1, [r0, #0]
 8000254:	6812      	ldr	r2, [r2, #0]
 8000256:	6814      	ldr	r4, [r2, #0]
 8000258:	00a1      	lsls	r1, r4, #2
 800025a:	d407      	bmi.n	800026c <_platform_network_state_setup+0x32>
 800025c:	6894      	ldr	r4, [r2, #8]
 800025e:	68d1      	ldr	r1, [r2, #12]
 8000260:	6843      	ldr	r3, [r0, #4]
 8000262:	1a64      	subs	r4, r4, r1
 8000264:	1919      	adds	r1, r3, r4
 8000266:	6091      	str	r1, [r2, #8]
 8000268:	6840      	ldr	r0, [r0, #4]
 800026a:	60d0      	str	r0, [r2, #12]
 800026c:	bc30      	pop	{r4, r5}
 800026e:	4770      	bx	lr

08000270 <_platform_network_state_update_input>:
 8000270:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000274:	4605      	mov	r5, r0
 8000276:	2600      	movs	r6, #0
 8000278:	6828      	ldr	r0, [r5, #0]
 800027a:	6801      	ldr	r1, [r0, #0]
 800027c:	8928      	ldrh	r0, [r5, #8]
 800027e:	2704      	movs	r7, #4
 8000280:	46b0      	mov	r8, r6
 8000282:	b338      	cbz	r0, 80002d4 <_platform_network_state_update_input+0x64>
 8000284:	6868      	ldr	r0, [r5, #4]
 8000286:	6802      	ldr	r2, [r0, #0]
 8000288:	eb02 0408 	add.w	r4, r2, r8
 800028c:	680a      	ldr	r2, [r1, #0]
 800028e:	6813      	ldr	r3, [r2, #0]
 8000290:	6890      	ldr	r0, [r2, #8]
 8000292:	6861      	ldr	r1, [r4, #4]
 8000294:	009b      	lsls	r3, r3, #2
 8000296:	d503      	bpl.n	80002a0 <_platform_network_state_update_input+0x30>
 8000298:	68a2      	ldr	r2, [r4, #8]
 800029a:	f008 fcc7 	bl	8008c2c <__aeabi_memcpy>
 800029e:	e005      	b.n	80002ac <_platform_network_state_update_input+0x3c>
 80002a0:	68d3      	ldr	r3, [r2, #12]
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	180b      	adds	r3, r1, r0
 80002a6:	6093      	str	r3, [r2, #8]
 80002a8:	6860      	ldr	r0, [r4, #4]
 80002aa:	60d0      	str	r0, [r2, #12]
 80002ac:	6860      	ldr	r0, [r4, #4]
 80002ae:	68a1      	ldr	r1, [r4, #8]
 80002b0:	4408      	add	r0, r1
 80002b2:	6821      	ldr	r1, [r4, #0]
 80002b4:	6060      	str	r0, [r4, #4]
 80002b6:	4288      	cmp	r0, r1
 80002b8:	d302      	bcc.n	80002c0 <_platform_network_state_update_input+0x50>
 80002ba:	68e0      	ldr	r0, [r4, #12]
 80002bc:	4240      	negs	r0, r0
 80002be:	4408      	add	r0, r1
 80002c0:	6060      	str	r0, [r4, #4]
 80002c2:	1c76      	adds	r6, r6, #1
 80002c4:	6828      	ldr	r0, [r5, #0]
 80002c6:	59c1      	ldr	r1, [r0, r7]
 80002c8:	8928      	ldrh	r0, [r5, #8]
 80002ca:	1d3f      	adds	r7, r7, #4
 80002cc:	4286      	cmp	r6, r0
 80002ce:	f108 0810 	add.w	r8, r8, #16
 80002d2:	d3d7      	bcc.n	8000284 <_platform_network_state_update_input+0x14>
 80002d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080002d8 <_platform_network_state_update_output>:
 80002d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80002dc:	4605      	mov	r5, r0
 80002de:	2600      	movs	r6, #0
 80002e0:	6828      	ldr	r0, [r5, #0]
 80002e2:	6801      	ldr	r1, [r0, #0]
 80002e4:	8928      	ldrh	r0, [r5, #8]
 80002e6:	2704      	movs	r7, #4
 80002e8:	46b0      	mov	r8, r6
 80002ea:	b388      	cbz	r0, 8000350 <_platform_network_state_update_output+0x78>
 80002ec:	6868      	ldr	r0, [r5, #4]
 80002ee:	6809      	ldr	r1, [r1, #0]
 80002f0:	6802      	ldr	r2, [r0, #0]
 80002f2:	680b      	ldr	r3, [r1, #0]
 80002f4:	eb02 0408 	add.w	r4, r2, r8
 80002f8:	009b      	lsls	r3, r3, #2
 80002fa:	6860      	ldr	r0, [r4, #4]
 80002fc:	68a2      	ldr	r2, [r4, #8]
 80002fe:	d50e      	bpl.n	800031e <_platform_network_state_update_output+0x46>
 8000300:	6889      	ldr	r1, [r1, #8]
 8000302:	f008 fc93 	bl	8008c2c <__aeabi_memcpy>
 8000306:	6862      	ldr	r2, [r4, #4]
 8000308:	68a0      	ldr	r0, [r4, #8]
 800030a:	6821      	ldr	r1, [r4, #0]
 800030c:	4410      	add	r0, r2
 800030e:	4288      	cmp	r0, r1
 8000310:	6060      	str	r0, [r4, #4]
 8000312:	d302      	bcc.n	800031a <_platform_network_state_update_output+0x42>
 8000314:	68e0      	ldr	r0, [r4, #12]
 8000316:	4240      	negs	r0, r0
 8000318:	4408      	add	r0, r1
 800031a:	6060      	str	r0, [r4, #4]
 800031c:	e00f      	b.n	800033e <_platform_network_state_update_output+0x66>
 800031e:	4410      	add	r0, r2
 8000320:	6822      	ldr	r2, [r4, #0]
 8000322:	6060      	str	r0, [r4, #4]
 8000324:	4290      	cmp	r0, r2
 8000326:	d302      	bcc.n	800032e <_platform_network_state_update_output+0x56>
 8000328:	68e0      	ldr	r0, [r4, #12]
 800032a:	4240      	negs	r0, r0
 800032c:	4410      	add	r0, r2
 800032e:	6060      	str	r0, [r4, #4]
 8000330:	688a      	ldr	r2, [r1, #8]
 8000332:	68cb      	ldr	r3, [r1, #12]
 8000334:	1ad2      	subs	r2, r2, r3
 8000336:	4410      	add	r0, r2
 8000338:	6088      	str	r0, [r1, #8]
 800033a:	6862      	ldr	r2, [r4, #4]
 800033c:	60ca      	str	r2, [r1, #12]
 800033e:	1c76      	adds	r6, r6, #1
 8000340:	6828      	ldr	r0, [r5, #0]
 8000342:	59c1      	ldr	r1, [r0, r7]
 8000344:	8928      	ldrh	r0, [r5, #8]
 8000346:	1d3f      	adds	r7, r7, #4
 8000348:	4286      	cmp	r6, r0
 800034a:	f108 0810 	add.w	r8, r8, #16
 800034e:	d3cd      	bcc.n	80002ec <_platform_network_state_update_output+0x14>
 8000350:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000354 <_platform_network_io_bind>:
 8000354:	2800      	cmp	r0, #0
 8000356:	d100      	bne.n	800035a <_platform_network_io_bind+0x6>
 8000358:	4770      	bx	lr
 800035a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800035e:	b081      	sub	sp, #4
 8000360:	2300      	movs	r3, #0
 8000362:	b405      	push	{r0, r2}
 8000364:	b081      	sub	sp, #4
 8000366:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8000368:	8243      	strh	r3, [r0, #18]
 800036a:	9801      	ldr	r0, [sp, #4]
 800036c:	8203      	strh	r3, [r0, #16]
 800036e:	9b01      	ldr	r3, [sp, #4]
 8000370:	7a18      	ldrb	r0, [r3, #8]
 8000372:	f000 0003 	and.w	r0, r0, #3
 8000376:	2803      	cmp	r0, #3
 8000378:	d004      	beq.n	8000384 <_platform_network_io_bind+0x30>
 800037a:	2230      	movs	r2, #48	; 0x30
 800037c:	2111      	movs	r1, #17
 800037e:	f103 000c 	add.w	r0, r3, #12
 8000382:	e0ce      	b.n	8000522 <_platform_network_io_bind+0x1ce>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf1c      	itt	ne
 8000388:	8910      	ldrhne	r0, [r2, #8]
 800038a:	2800      	cmpne	r0, #0
 800038c:	f000 80c3 	beq.w	8000516 <_platform_network_io_bind+0x1c2>
 8000390:	6810      	ldr	r0, [r2, #0]
 8000392:	f8b1 a004 	ldrh.w	sl, [r1, #4]
 8000396:	6804      	ldr	r4, [r0, #0]
 8000398:	9200      	str	r2, [sp, #0]
 800039a:	2700      	movs	r7, #0
 800039c:	2504      	movs	r5, #4
 800039e:	46b9      	mov	r9, r7
 80003a0:	1d0e      	adds	r6, r1, #4
 80003a2:	9800      	ldr	r0, [sp, #0]
 80003a4:	8901      	ldrh	r1, [r0, #8]
 80003a6:	428f      	cmp	r7, r1
 80003a8:	f080 80b1 	bcs.w	800050e <_platform_network_io_bind+0x1ba>
 80003ac:	6841      	ldr	r1, [r0, #4]
 80003ae:	680a      	ldr	r2, [r1, #0]
 80003b0:	eb02 0809 	add.w	r8, r2, r9
 80003b4:	2c00      	cmp	r4, #0
 80003b6:	bf18      	it	ne
 80003b8:	f1b8 0f00 	cmpne.w	r8, #0
 80003bc:	f000 80ab 	beq.w	8000516 <_platform_network_io_bind+0x1c2>
 80003c0:	6820      	ldr	r0, [r4, #0]
 80003c2:	8873      	ldrh	r3, [r6, #2]
 80003c4:	f8b6 c004 	ldrh.w	ip, [r6, #4]
 80003c8:	68b2      	ldr	r2, [r6, #8]
 80003ca:	6841      	ldr	r1, [r0, #4]
 80003cc:	fb03 fe0c 	mul.w	lr, r3, ip
 80003d0:	fb02 fe0e 	mul.w	lr, r2, lr
 80003d4:	4571      	cmp	r1, lr
 80003d6:	f0c0 80a0 	bcc.w	800051a <_platform_network_io_bind+0x1c6>
 80003da:	f8d4 e010 	ldr.w	lr, [r4, #16]
 80003de:	459e      	cmp	lr, r3
 80003e0:	bf04      	itt	eq
 80003e2:	68e3      	ldreq	r3, [r4, #12]
 80003e4:	4563      	cmpeq	r3, ip
 80003e6:	bf04      	itt	eq
 80003e8:	68a3      	ldreq	r3, [r4, #8]
 80003ea:	4293      	cmpeq	r3, r2
 80003ec:	f040 8095 	bne.w	800051a <_platform_network_io_bind+0x1c6>
 80003f0:	6800      	ldr	r0, [r0, #0]
 80003f2:	f003 f985 	bl	8003700 <ai_array_get_byte_size>
 80003f6:	6921      	ldr	r1, [r4, #16]
 80003f8:	6a22      	ldr	r2, [r4, #32]
 80003fa:	4351      	muls	r1, r2
 80003fc:	4288      	cmp	r0, r1
 80003fe:	f0c0 808c 	bcc.w	800051a <_platform_network_io_bind+0x1c6>
 8000402:	6820      	ldr	r0, [r4, #0]
 8000404:	6800      	ldr	r0, [r0, #0]
 8000406:	f003 f8a3 	bl	8003550 <ai_array_to_buffer_fmt>
 800040a:	f856 1c04 	ldr.w	r1, [r6, #-4]
 800040e:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 8000412:	f021 417e 	bic.w	r1, r1, #4261412864	; 0xfe000000
 8000416:	4288      	cmp	r0, r1
 8000418:	d115      	bne.n	8000446 <_platform_network_io_bind+0xf2>
 800041a:	68f0      	ldr	r0, [r6, #12]
 800041c:	2800      	cmp	r0, #0
 800041e:	d07a      	beq.n	8000516 <_platform_network_io_bind+0x1c2>
 8000420:	8830      	ldrh	r0, [r6, #0]
 8000422:	b190      	cbz	r0, 800044a <_platform_network_io_bind+0xf6>
 8000424:	4550      	cmp	r0, sl
 8000426:	bf28      	it	cs
 8000428:	4682      	movcs	sl, r0
 800042a:	4622      	mov	r2, r4
 800042c:	1f31      	subs	r1, r6, #4
 800042e:	4640      	mov	r0, r8
 8000430:	f7ff ff03 	bl	800023a <_platform_network_state_setup>
 8000434:	9800      	ldr	r0, [sp, #0]
 8000436:	6801      	ldr	r1, [r0, #0]
 8000438:	594c      	ldr	r4, [r1, r5]
 800043a:	1c7f      	adds	r7, r7, #1
 800043c:	3614      	adds	r6, #20
 800043e:	f109 0910 	add.w	r9, r9, #16
 8000442:	1d2d      	adds	r5, r5, #4
 8000444:	e7ad      	b.n	80003a2 <_platform_network_io_bind+0x4e>
 8000446:	2219      	movs	r2, #25
 8000448:	e068      	b.n	800051c <_platform_network_io_bind+0x1c8>
 800044a:	2221      	movs	r2, #33	; 0x21
 800044c:	e066      	b.n	800051c <_platform_network_io_bind+0x1c8>
 800044e:	9901      	ldr	r1, [sp, #4]
 8000450:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 8000452:	320c      	adds	r2, #12
 8000454:	8911      	ldrh	r1, [r2, #8]
 8000456:	2900      	cmp	r1, #0
 8000458:	d073      	beq.n	8000542 <_platform_network_io_bind+0x1ee>
 800045a:	6813      	ldr	r3, [r2, #0]
 800045c:	681c      	ldr	r4, [r3, #0]
 800045e:	9200      	str	r2, [sp, #0]
 8000460:	2700      	movs	r7, #0
 8000462:	2504      	movs	r5, #4
 8000464:	46b9      	mov	r9, r7
 8000466:	1d06      	adds	r6, r0, #4
 8000468:	9800      	ldr	r0, [sp, #0]
 800046a:	8901      	ldrh	r1, [r0, #8]
 800046c:	428f      	cmp	r7, r1
 800046e:	d25e      	bcs.n	800052e <_platform_network_io_bind+0x1da>
 8000470:	6841      	ldr	r1, [r0, #4]
 8000472:	680a      	ldr	r2, [r1, #0]
 8000474:	eb02 0809 	add.w	r8, r2, r9
 8000478:	2c00      	cmp	r4, #0
 800047a:	bf18      	it	ne
 800047c:	f1b8 0f00 	cmpne.w	r8, #0
 8000480:	d05c      	beq.n	800053c <_platform_network_io_bind+0x1e8>
 8000482:	6820      	ldr	r0, [r4, #0]
 8000484:	8873      	ldrh	r3, [r6, #2]
 8000486:	f8b6 c004 	ldrh.w	ip, [r6, #4]
 800048a:	68b2      	ldr	r2, [r6, #8]
 800048c:	6841      	ldr	r1, [r0, #4]
 800048e:	fb03 fe0c 	mul.w	lr, r3, ip
 8000492:	fb02 fe0e 	mul.w	lr, r2, lr
 8000496:	4571      	cmp	r1, lr
 8000498:	d353      	bcc.n	8000542 <_platform_network_io_bind+0x1ee>
 800049a:	f8d4 e010 	ldr.w	lr, [r4, #16]
 800049e:	459e      	cmp	lr, r3
 80004a0:	bf04      	itt	eq
 80004a2:	68e3      	ldreq	r3, [r4, #12]
 80004a4:	4563      	cmpeq	r3, ip
 80004a6:	bf04      	itt	eq
 80004a8:	68a3      	ldreq	r3, [r4, #8]
 80004aa:	4293      	cmpeq	r3, r2
 80004ac:	d149      	bne.n	8000542 <_platform_network_io_bind+0x1ee>
 80004ae:	6800      	ldr	r0, [r0, #0]
 80004b0:	f003 f926 	bl	8003700 <ai_array_get_byte_size>
 80004b4:	6921      	ldr	r1, [r4, #16]
 80004b6:	6a22      	ldr	r2, [r4, #32]
 80004b8:	4351      	muls	r1, r2
 80004ba:	4288      	cmp	r0, r1
 80004bc:	d341      	bcc.n	8000542 <_platform_network_io_bind+0x1ee>
 80004be:	6820      	ldr	r0, [r4, #0]
 80004c0:	6800      	ldr	r0, [r0, #0]
 80004c2:	f003 f845 	bl	8003550 <ai_array_to_buffer_fmt>
 80004c6:	f856 1c04 	ldr.w	r1, [r6, #-4]
 80004ca:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 80004ce:	f021 417e 	bic.w	r1, r1, #4261412864	; 0xfe000000
 80004d2:	4288      	cmp	r0, r1
 80004d4:	d115      	bne.n	8000502 <_platform_network_io_bind+0x1ae>
 80004d6:	68f0      	ldr	r0, [r6, #12]
 80004d8:	2800      	cmp	r0, #0
 80004da:	d02f      	beq.n	800053c <_platform_network_io_bind+0x1e8>
 80004dc:	8830      	ldrh	r0, [r6, #0]
 80004de:	b198      	cbz	r0, 8000508 <_platform_network_io_bind+0x1b4>
 80004e0:	4550      	cmp	r0, sl
 80004e2:	bf28      	it	cs
 80004e4:	4682      	movcs	sl, r0
 80004e6:	4622      	mov	r2, r4
 80004e8:	1f31      	subs	r1, r6, #4
 80004ea:	4640      	mov	r0, r8
 80004ec:	f7ff fea5 	bl	800023a <_platform_network_state_setup>
 80004f0:	9800      	ldr	r0, [sp, #0]
 80004f2:	6801      	ldr	r1, [r0, #0]
 80004f4:	594c      	ldr	r4, [r1, r5]
 80004f6:	1c7f      	adds	r7, r7, #1
 80004f8:	3614      	adds	r6, #20
 80004fa:	f109 0910 	add.w	r9, r9, #16
 80004fe:	1d2d      	adds	r5, r5, #4
 8000500:	e7b2      	b.n	8000468 <_platform_network_io_bind+0x114>
 8000502:	2219      	movs	r2, #25
 8000504:	2113      	movs	r1, #19
 8000506:	e00a      	b.n	800051e <_platform_network_io_bind+0x1ca>
 8000508:	2221      	movs	r2, #33	; 0x21
 800050a:	2113      	movs	r1, #19
 800050c:	e007      	b.n	800051e <_platform_network_io_bind+0x1ca>
 800050e:	9802      	ldr	r0, [sp, #8]
 8000510:	2800      	cmp	r0, #0
 8000512:	d19c      	bne.n	800044e <_platform_network_io_bind+0xfa>
 8000514:	e00e      	b.n	8000534 <_platform_network_io_bind+0x1e0>
 8000516:	2217      	movs	r2, #23
 8000518:	e000      	b.n	800051c <_platform_network_io_bind+0x1c8>
 800051a:	2218      	movs	r2, #24
 800051c:	2112      	movs	r1, #18
 800051e:	9801      	ldr	r0, [sp, #4]
 8000520:	300c      	adds	r0, #12
 8000522:	f000 fa8e 	bl	8000a42 <core_set_error>
 8000526:	2000      	movs	r0, #0
 8000528:	b004      	add	sp, #16
 800052a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052e:	9801      	ldr	r0, [sp, #4]
 8000530:	f8a0 a010 	strh.w	sl, [r0, #16]
 8000534:	2001      	movs	r0, #1
 8000536:	b004      	add	sp, #16
 8000538:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053c:	2217      	movs	r2, #23
 800053e:	2113      	movs	r1, #19
 8000540:	e7ed      	b.n	800051e <_platform_network_io_bind+0x1ca>
 8000542:	2218      	movs	r2, #24
 8000544:	2113      	movs	r1, #19
 8000546:	e7ea      	b.n	800051e <_platform_network_io_bind+0x1ca>

08000548 <ai_platform_runtime_get_revision>:
 8000548:	f8df 04a8 	ldr.w	r0, [pc, #1192]	; 80009f4 <.text_21>
 800054c:	6801      	ldr	r1, [r0, #0]
 800054e:	0849      	lsrs	r1, r1, #1
 8000550:	0049      	lsls	r1, r1, #1
 8000552:	6001      	str	r1, [r0, #0]
 8000554:	2001      	movs	r0, #1
 8000556:	f8df 14a0 	ldr.w	r1, [pc, #1184]	; 80009f8 <.text_22>
 800055a:	6088      	str	r0, [r1, #8]
 800055c:	6888      	ldr	r0, [r1, #8]
 800055e:	2800      	cmp	r0, #0
 8000560:	d1fc      	bne.n	800055c <ai_platform_runtime_get_revision+0x14>
 8000562:	f8df 2498 	ldr.w	r2, [pc, #1176]	; 80009fc <.text_23>
 8000566:	600a      	str	r2, [r1, #0]
 8000568:	6808      	ldr	r0, [r1, #0]
 800056a:	f8df 1494 	ldr.w	r1, [pc, #1172]	; 8000a00 <.text_24>
 800056e:	4288      	cmp	r0, r1
 8000570:	d000      	beq.n	8000574 <ai_platform_runtime_get_revision+0x2c>
 8000572:	e7fe      	b.n	8000572 <ai_platform_runtime_get_revision+0x2a>
 8000574:	a0aa      	add	r0, pc, #680	; (adr r0, 8000820 <.text_16>)
 8000576:	4770      	bx	lr

08000578 <ai_platform_runtime_get_version>:
 8000578:	f8df 0478 	ldr.w	r0, [pc, #1144]	; 80009f4 <.text_21>
 800057c:	6801      	ldr	r1, [r0, #0]
 800057e:	0849      	lsrs	r1, r1, #1
 8000580:	0049      	lsls	r1, r1, #1
 8000582:	6001      	str	r1, [r0, #0]
 8000584:	2001      	movs	r0, #1
 8000586:	f8df 1470 	ldr.w	r1, [pc, #1136]	; 80009f8 <.text_22>
 800058a:	6088      	str	r0, [r1, #8]
 800058c:	6888      	ldr	r0, [r1, #8]
 800058e:	2800      	cmp	r0, #0
 8000590:	d1fc      	bne.n	800058c <ai_platform_runtime_get_version+0x14>
 8000592:	f8df 2468 	ldr.w	r2, [pc, #1128]	; 80009fc <.text_23>
 8000596:	600a      	str	r2, [r1, #0]
 8000598:	6808      	ldr	r0, [r1, #0]
 800059a:	f8df 1464 	ldr.w	r1, [pc, #1124]	; 8000a00 <.text_24>
 800059e:	4288      	cmp	r0, r1
 80005a0:	d000      	beq.n	80005a4 <ai_platform_runtime_get_version+0x2c>
 80005a2:	e7fe      	b.n	80005a2 <ai_platform_runtime_get_version+0x2a>
 80005a4:	f20f 4264 	addw	r2, pc, #1124	; 0x464
 80005a8:	6810      	ldr	r0, [r2, #0]
 80005aa:	4770      	bx	lr

080005ac <ai_platform_api_get_version>:
 80005ac:	f8df 0444 	ldr.w	r0, [pc, #1092]	; 80009f4 <.text_21>
 80005b0:	6801      	ldr	r1, [r0, #0]
 80005b2:	0849      	lsrs	r1, r1, #1
 80005b4:	0049      	lsls	r1, r1, #1
 80005b6:	6001      	str	r1, [r0, #0]
 80005b8:	2001      	movs	r0, #1
 80005ba:	f8df 143c 	ldr.w	r1, [pc, #1084]	; 80009f8 <.text_22>
 80005be:	6088      	str	r0, [r1, #8]
 80005c0:	6888      	ldr	r0, [r1, #8]
 80005c2:	2800      	cmp	r0, #0
 80005c4:	d1fc      	bne.n	80005c0 <ai_platform_api_get_version+0x14>
 80005c6:	f8df 2434 	ldr.w	r2, [pc, #1076]	; 80009fc <.text_23>
 80005ca:	600a      	str	r2, [r1, #0]
 80005cc:	6808      	ldr	r0, [r1, #0]
 80005ce:	f8df 1430 	ldr.w	r1, [pc, #1072]	; 8000a00 <.text_24>
 80005d2:	4288      	cmp	r0, r1
 80005d4:	d000      	beq.n	80005d8 <ai_platform_api_get_version+0x2c>
 80005d6:	e7fe      	b.n	80005d6 <ai_platform_api_get_version+0x2a>
 80005d8:	f20f 4234 	addw	r2, pc, #1076	; 0x434
 80005dc:	6810      	ldr	r0, [r2, #0]
 80005de:	4770      	bx	lr

080005e0 <ai_platform_interface_api_get_version>:
 80005e0:	f8df 0410 	ldr.w	r0, [pc, #1040]	; 80009f4 <.text_21>
 80005e4:	6801      	ldr	r1, [r0, #0]
 80005e6:	0849      	lsrs	r1, r1, #1
 80005e8:	0049      	lsls	r1, r1, #1
 80005ea:	6001      	str	r1, [r0, #0]
 80005ec:	2001      	movs	r0, #1
 80005ee:	f8df 1408 	ldr.w	r1, [pc, #1032]	; 80009f8 <.text_22>
 80005f2:	6088      	str	r0, [r1, #8]
 80005f4:	6888      	ldr	r0, [r1, #8]
 80005f6:	2800      	cmp	r0, #0
 80005f8:	d1fc      	bne.n	80005f4 <ai_platform_interface_api_get_version+0x14>
 80005fa:	f8df 2400 	ldr.w	r2, [pc, #1024]	; 80009fc <.text_23>
 80005fe:	600a      	str	r2, [r1, #0]
 8000600:	6808      	ldr	r0, [r1, #0]
 8000602:	f8df 13fc 	ldr.w	r1, [pc, #1020]	; 8000a00 <.text_24>
 8000606:	4288      	cmp	r0, r1
 8000608:	d000      	beq.n	800060c <ai_platform_interface_api_get_version+0x2c>
 800060a:	e7fe      	b.n	800060a <ai_platform_interface_api_get_version+0x2a>
 800060c:	f20f 4204 	addw	r2, pc, #1028	; 0x404
 8000610:	6810      	ldr	r0, [r2, #0]
 8000612:	4770      	bx	lr

08000614 <ai_platform_context_acquire>:
 8000614:	b120      	cbz	r0, 8000620 <ai_platform_context_acquire+0xc>
 8000616:	6801      	ldr	r1, [r0, #0]
 8000618:	f8df 23e8 	ldr.w	r2, [pc, #1000]	; 8000a04 <.text_25>
 800061c:	4291      	cmp	r1, r2
 800061e:	d000      	beq.n	8000622 <ai_platform_context_acquire+0xe>
 8000620:	2000      	movs	r0, #0
 8000622:	f8df 13d0 	ldr.w	r1, [pc, #976]	; 80009f4 <.text_21>
 8000626:	680a      	ldr	r2, [r1, #0]
 8000628:	0852      	lsrs	r2, r2, #1
 800062a:	0052      	lsls	r2, r2, #1
 800062c:	600a      	str	r2, [r1, #0]
 800062e:	2101      	movs	r1, #1
 8000630:	f8df 23c4 	ldr.w	r2, [pc, #964]	; 80009f8 <.text_22>
 8000634:	6091      	str	r1, [r2, #8]
 8000636:	6891      	ldr	r1, [r2, #8]
 8000638:	2900      	cmp	r1, #0
 800063a:	d1fc      	bne.n	8000636 <ai_platform_context_acquire+0x22>
 800063c:	f8df 33bc 	ldr.w	r3, [pc, #956]	; 80009fc <.text_23>
 8000640:	6013      	str	r3, [r2, #0]
 8000642:	6811      	ldr	r1, [r2, #0]
 8000644:	f8df 23b8 	ldr.w	r2, [pc, #952]	; 8000a00 <.text_24>
 8000648:	4291      	cmp	r1, r2
 800064a:	d000      	beq.n	800064e <ai_platform_context_acquire+0x3a>
 800064c:	e7fe      	b.n	800064c <ai_platform_context_acquire+0x38>
 800064e:	4770      	bx	lr

08000650 <ai_platform_context_release>:
 8000650:	f8df 13b0 	ldr.w	r1, [pc, #944]	; 8000a04 <.text_25>
 8000654:	6001      	str	r1, [r0, #0]
 8000656:	4770      	bx	lr

08000658 <ai_platform_network_get_error>:
 8000658:	b120      	cbz	r0, 8000664 <ai_platform_network_get_error+0xc>
 800065a:	6801      	ldr	r1, [r0, #0]
 800065c:	f8df 23a4 	ldr.w	r2, [pc, #932]	; 8000a04 <.text_25>
 8000660:	4291      	cmp	r1, r2
 8000662:	d000      	beq.n	8000666 <ai_platform_network_get_error+0xe>
 8000664:	2000      	movs	r0, #0
 8000666:	f8df 138c 	ldr.w	r1, [pc, #908]	; 80009f4 <.text_21>
 800066a:	680a      	ldr	r2, [r1, #0]
 800066c:	0852      	lsrs	r2, r2, #1
 800066e:	0052      	lsls	r2, r2, #1
 8000670:	600a      	str	r2, [r1, #0]
 8000672:	2101      	movs	r1, #1
 8000674:	f8df 2380 	ldr.w	r2, [pc, #896]	; 80009f8 <.text_22>
 8000678:	6091      	str	r1, [r2, #8]
 800067a:	6891      	ldr	r1, [r2, #8]
 800067c:	2900      	cmp	r1, #0
 800067e:	d1fc      	bne.n	800067a <ai_platform_network_get_error+0x22>
 8000680:	f8df 3378 	ldr.w	r3, [pc, #888]	; 80009fc <.text_23>
 8000684:	6013      	str	r3, [r2, #0]
 8000686:	6811      	ldr	r1, [r2, #0]
 8000688:	f8df 2374 	ldr.w	r2, [pc, #884]	; 8000a00 <.text_24>
 800068c:	4291      	cmp	r1, r2
 800068e:	d000      	beq.n	8000692 <ai_platform_network_get_error+0x3a>
 8000690:	e7fe      	b.n	8000690 <ai_platform_network_get_error+0x38>
 8000692:	2800      	cmp	r0, #0
 8000694:	bf1c      	itt	ne
 8000696:	300c      	addne	r0, #12
 8000698:	f000 b9ce 	bne.w	8000a38 <core_get_error>
 800069c:	f20f 3088 	addw	r0, pc, #904	; 0x388
 80006a0:	6800      	ldr	r0, [r0, #0]
 80006a2:	4770      	bx	lr

080006a4 <ai_platform_network_set_error>:
 80006a4:	2800      	cmp	r0, #0
 80006a6:	bf1c      	itt	ne
 80006a8:	300c      	addne	r0, #12
 80006aa:	f000 b9ca 	bne.w	8000a42 <core_set_error>
 80006ae:	4770      	bx	lr

080006b0 <ai_platform_api_get_network_report>:
 80006b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80006b4:	ea5f 0900 	movs.w	r9, r0
 80006b8:	b081      	sub	sp, #4
 80006ba:	460c      	mov	r4, r1
 80006bc:	d005      	beq.n	80006ca <ai_platform_api_get_network_report+0x1a>
 80006be:	f8d9 0000 	ldr.w	r0, [r9]
 80006c2:	f8df 1340 	ldr.w	r1, [pc, #832]	; 8000a04 <.text_25>
 80006c6:	4288      	cmp	r0, r1
 80006c8:	d001      	beq.n	80006ce <ai_platform_api_get_network_report+0x1e>
 80006ca:	f04f 0900 	mov.w	r9, #0
 80006ce:	f8df 5324 	ldr.w	r5, [pc, #804]	; 80009f4 <.text_21>
 80006d2:	f8df 6324 	ldr.w	r6, [pc, #804]	; 80009f8 <.text_22>
 80006d6:	6828      	ldr	r0, [r5, #0]
 80006d8:	0840      	lsrs	r0, r0, #1
 80006da:	0040      	lsls	r0, r0, #1
 80006dc:	6028      	str	r0, [r5, #0]
 80006de:	2101      	movs	r1, #1
 80006e0:	60b1      	str	r1, [r6, #8]
 80006e2:	68b0      	ldr	r0, [r6, #8]
 80006e4:	2800      	cmp	r0, #0
 80006e6:	d1fc      	bne.n	80006e2 <ai_platform_api_get_network_report+0x32>
 80006e8:	f8df 7310 	ldr.w	r7, [pc, #784]	; 80009fc <.text_23>
 80006ec:	f8df 8310 	ldr.w	r8, [pc, #784]	; 8000a00 <.text_24>
 80006f0:	6037      	str	r7, [r6, #0]
 80006f2:	6830      	ldr	r0, [r6, #0]
 80006f4:	4540      	cmp	r0, r8
 80006f6:	d000      	beq.n	80006fa <ai_platform_api_get_network_report+0x4a>
 80006f8:	e7fe      	b.n	80006f8 <ai_platform_api_get_network_report+0x48>
 80006fa:	f1b9 0f00 	cmp.w	r9, #0
 80006fe:	bf18      	it	ne
 8000700:	2c00      	cmpne	r4, #0
 8000702:	f000 8088 	beq.w	8000816 <ai_platform_api_get_network_report+0x166>
 8000706:	2000      	movs	r0, #0
 8000708:	6660      	str	r0, [r4, #100]	; 0x64
 800070a:	f8d9 2044 	ldr.w	r2, [r9, #68]	; 0x44
 800070e:	2a00      	cmp	r2, #0
 8000710:	f000 807b 	beq.w	800080a <ai_platform_api_get_network_report+0x15a>
 8000714:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8000716:	1c49      	adds	r1, r1, #1
 8000718:	6661      	str	r1, [r4, #100]	; 0x64
 800071a:	6890      	ldr	r0, [r2, #8]
 800071c:	4282      	cmp	r2, r0
 800071e:	bf1c      	itt	ne
 8000720:	2800      	cmpne	r0, #0
 8000722:	4602      	movne	r2, r0
 8000724:	d1f6      	bne.n	8000714 <ai_platform_api_get_network_report+0x64>
 8000726:	e06e      	b.n	8000806 <ai_platform_api_get_network_report+0x156>
 8000728:	f8d9 003c 	ldr.w	r0, [r9, #60]	; 0x3c
 800072c:	f104 0134 	add.w	r1, r4, #52	; 0x34
 8000730:	f7ff fd4a 	bl	80001c8 <_ai_platform_get_io_buffers>
 8000734:	8620      	strh	r0, [r4, #48]	; 0x30
 8000736:	b910      	cbnz	r0, 800073e <ai_platform_api_get_network_report+0x8e>
 8000738:	2218      	movs	r2, #24
 800073a:	2112      	movs	r1, #18
 800073c:	e067      	b.n	800080e <ai_platform_api_get_network_report+0x15e>
 800073e:	f8d9 003c 	ldr.w	r0, [r9, #60]	; 0x3c
 8000742:	f104 0138 	add.w	r1, r4, #56	; 0x38
 8000746:	300c      	adds	r0, #12
 8000748:	f7ff fd3e 	bl	80001c8 <_ai_platform_get_io_buffers>
 800074c:	8660      	strh	r0, [r4, #50]	; 0x32
 800074e:	b910      	cbnz	r0, 8000756 <ai_platform_api_get_network_report+0xa6>
 8000750:	2218      	movs	r2, #24
 8000752:	2113      	movs	r1, #19
 8000754:	e05b      	b.n	800080e <ai_platform_api_get_network_report+0x15e>
 8000756:	f8d9 0004 	ldr.w	r0, [r9, #4]
 800075a:	66a0      	str	r0, [r4, #104]	; 0x68
 800075c:	f109 0228 	add.w	r2, r9, #40	; 0x28
 8000760:	e892 5c08 	ldmia.w	r2, {r3, sl, fp, ip, lr}
 8000764:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 8000768:	f109 0914 	add.w	r9, r9, #20
 800076c:	e881 5c08 	stmia.w	r1, {r3, sl, fp, ip, lr}
 8000770:	e899 500e 	ldmia.w	r9, {r1, r2, r3, ip, lr}
 8000774:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8000778:	e880 500e 	stmia.w	r0, {r1, r2, r3, ip, lr}
 800077c:	6828      	ldr	r0, [r5, #0]
 800077e:	0840      	lsrs	r0, r0, #1
 8000780:	0040      	lsls	r0, r0, #1
 8000782:	6028      	str	r0, [r5, #0]
 8000784:	2301      	movs	r3, #1
 8000786:	60b3      	str	r3, [r6, #8]
 8000788:	68b0      	ldr	r0, [r6, #8]
 800078a:	2800      	cmp	r0, #0
 800078c:	d1fc      	bne.n	8000788 <ai_platform_api_get_network_report+0xd8>
 800078e:	6037      	str	r7, [r6, #0]
 8000790:	6831      	ldr	r1, [r6, #0]
 8000792:	4541      	cmp	r1, r8
 8000794:	d000      	beq.n	8000798 <ai_platform_api_get_network_report+0xe8>
 8000796:	e7fe      	b.n	8000796 <ai_platform_api_get_network_report+0xe6>
 8000798:	a021      	add	r0, pc, #132	; (adr r0, 8000820 <.text_16>)
 800079a:	6120      	str	r0, [r4, #16]
 800079c:	6829      	ldr	r1, [r5, #0]
 800079e:	0849      	lsrs	r1, r1, #1
 80007a0:	0049      	lsls	r1, r1, #1
 80007a2:	6029      	str	r1, [r5, #0]
 80007a4:	60b3      	str	r3, [r6, #8]
 80007a6:	68b0      	ldr	r0, [r6, #8]
 80007a8:	2800      	cmp	r0, #0
 80007aa:	d1fc      	bne.n	80007a6 <ai_platform_api_get_network_report+0xf6>
 80007ac:	6037      	str	r7, [r6, #0]
 80007ae:	6831      	ldr	r1, [r6, #0]
 80007b0:	4541      	cmp	r1, r8
 80007b2:	d000      	beq.n	80007b6 <ai_platform_api_get_network_report+0x106>
 80007b4:	e7fe      	b.n	80007b4 <ai_platform_api_get_network_report+0x104>
 80007b6:	f20f 2054 	addw	r0, pc, #596	; 0x254
 80007ba:	6802      	ldr	r2, [r0, #0]
 80007bc:	6162      	str	r2, [r4, #20]
 80007be:	6829      	ldr	r1, [r5, #0]
 80007c0:	0849      	lsrs	r1, r1, #1
 80007c2:	0049      	lsls	r1, r1, #1
 80007c4:	6029      	str	r1, [r5, #0]
 80007c6:	60b3      	str	r3, [r6, #8]
 80007c8:	68b0      	ldr	r0, [r6, #8]
 80007ca:	2800      	cmp	r0, #0
 80007cc:	d1fc      	bne.n	80007c8 <ai_platform_api_get_network_report+0x118>
 80007ce:	6037      	str	r7, [r6, #0]
 80007d0:	6831      	ldr	r1, [r6, #0]
 80007d2:	4541      	cmp	r1, r8
 80007d4:	d000      	beq.n	80007d8 <ai_platform_api_get_network_report+0x128>
 80007d6:	e7fe      	b.n	80007d6 <ai_platform_api_get_network_report+0x126>
 80007d8:	a08d      	add	r0, pc, #564	; (adr r0, 8000a10 <.text_28>)
 80007da:	6802      	ldr	r2, [r0, #0]
 80007dc:	6262      	str	r2, [r4, #36]	; 0x24
 80007de:	6829      	ldr	r1, [r5, #0]
 80007e0:	0849      	lsrs	r1, r1, #1
 80007e2:	0049      	lsls	r1, r1, #1
 80007e4:	6029      	str	r1, [r5, #0]
 80007e6:	60b3      	str	r3, [r6, #8]
 80007e8:	68b0      	ldr	r0, [r6, #8]
 80007ea:	2800      	cmp	r0, #0
 80007ec:	d1fc      	bne.n	80007e8 <ai_platform_api_get_network_report+0x138>
 80007ee:	6037      	str	r7, [r6, #0]
 80007f0:	6831      	ldr	r1, [r6, #0]
 80007f2:	4541      	cmp	r1, r8
 80007f4:	d000      	beq.n	80007f8 <ai_platform_api_get_network_report+0x148>
 80007f6:	e7fe      	b.n	80007f6 <ai_platform_api_get_network_report+0x146>
 80007f8:	a086      	add	r0, pc, #536	; (adr r0, 8000a14 <.text_29>)
 80007fa:	6802      	ldr	r2, [r0, #0]
 80007fc:	62a2      	str	r2, [r4, #40]	; 0x28
 80007fe:	2001      	movs	r0, #1
 8000800:	b001      	add	sp, #4
 8000802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000806:	2900      	cmp	r1, #0
 8000808:	d18e      	bne.n	8000728 <ai_platform_api_get_network_report+0x78>
 800080a:	2218      	movs	r2, #24
 800080c:	2111      	movs	r1, #17
 800080e:	f109 000c 	add.w	r0, r9, #12
 8000812:	f000 f916 	bl	8000a42 <core_set_error>
 8000816:	2000      	movs	r0, #0
 8000818:	b001      	add	sp, #4
 800081a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08000820 <.text_16>:
 8000820:	00000000 	.word	0x00000000

08000824 <ai_platform_network_create>:
 8000824:	b570      	push	{r4, r5, r6, lr}
 8000826:	9d04      	ldr	r5, [sp, #16]
 8000828:	4604      	mov	r4, r0
 800082a:	9805      	ldr	r0, [sp, #20]
 800082c:	b2db      	uxtb	r3, r3
 800082e:	042d      	lsls	r5, r5, #16
 8000830:	ea45 6503 	orr.w	r5, r5, r3, lsl #24
 8000834:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
 8000838:	a07c      	add	r0, pc, #496	; (adr r0, 8000a2c <.text_35>)
 800083a:	6806      	ldr	r6, [r0, #0]
 800083c:	486d      	ldr	r0, [pc, #436]	; (80009f4 <.text_21>)
 800083e:	6801      	ldr	r1, [r0, #0]
 8000840:	0849      	lsrs	r1, r1, #1
 8000842:	0049      	lsls	r1, r1, #1
 8000844:	6001      	str	r1, [r0, #0]
 8000846:	2001      	movs	r0, #1
 8000848:	496b      	ldr	r1, [pc, #428]	; (80009f8 <.text_22>)
 800084a:	6088      	str	r0, [r1, #8]
 800084c:	6888      	ldr	r0, [r1, #8]
 800084e:	2800      	cmp	r0, #0
 8000850:	d1fc      	bne.n	800084c <ai_platform_network_create+0x28>
 8000852:	4b6a      	ldr	r3, [pc, #424]	; (80009fc <.text_23>)
 8000854:	600b      	str	r3, [r1, #0]
 8000856:	6808      	ldr	r0, [r1, #0]
 8000858:	4969      	ldr	r1, [pc, #420]	; (8000a00 <.text_24>)
 800085a:	4288      	cmp	r0, r1
 800085c:	d000      	beq.n	8000860 <ai_platform_network_create+0x3c>
 800085e:	e7fe      	b.n	800085e <ai_platform_network_create+0x3a>
 8000860:	b91c      	cbnz	r4, 800086a <ai_platform_network_create+0x46>
 8000862:	bf00      	nop
 8000864:	a072      	add	r0, pc, #456	; (adr r0, 8000a30 <.text_36>)
 8000866:	6800      	ldr	r0, [r0, #0]
 8000868:	bd70      	pop	{r4, r5, r6, pc}
 800086a:	4966      	ldr	r1, [pc, #408]	; (8000a04 <.text_25>)
 800086c:	6011      	str	r1, [r2, #0]
 800086e:	f8c4 2000 	str.w	r2, [r4]
 8000872:	f000 f8df 	bl	8000a34 <core_init>
 8000876:	b908      	cbnz	r0, 800087c <ai_platform_network_create+0x58>
 8000878:	a067      	add	r0, pc, #412	; (adr r0, 8000a18 <.text_30>)
 800087a:	e00a      	b.n	8000892 <ai_platform_network_create+0x6e>
 800087c:	4962      	ldr	r1, [pc, #392]	; (8000a08 <.text_26>)
 800087e:	428d      	cmp	r5, r1
 8000880:	bf28      	it	cs
 8000882:	f20f 1098 	addwcs	r0, pc, #408	; 0x198
 8000886:	d204      	bcs.n	8000892 <ai_platform_network_create+0x6e>
 8000888:	a065      	add	r0, pc, #404	; (adr r0, 8000a20 <_platform_network_sanity_check{5}::signatures>)
 800088a:	f000 f8ef 	bl	8000a6c <ai_check_custom_types>
 800088e:	b918      	cbnz	r0, 8000898 <ai_platform_network_create+0x74>
 8000890:	a064      	add	r0, pc, #400	; (adr r0, 8000a24 <.text_33>)
 8000892:	6806      	ldr	r6, [r0, #0]
 8000894:	2100      	movs	r1, #0
 8000896:	6021      	str	r1, [r4, #0]
 8000898:	4630      	mov	r0, r6
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <ai_platform_network_destroy>:
 800089c:	b128      	cbz	r0, 80008aa <ai_platform_network_destroy+0xe>
 800089e:	6801      	ldr	r1, [r0, #0]
 80008a0:	4a58      	ldr	r2, [pc, #352]	; (8000a04 <.text_25>)
 80008a2:	4291      	cmp	r1, r2
 80008a4:	bf08      	it	eq
 80008a6:	4602      	moveq	r2, r0
 80008a8:	d000      	beq.n	80008ac <ai_platform_network_destroy+0x10>
 80008aa:	2200      	movs	r2, #0
 80008ac:	4951      	ldr	r1, [pc, #324]	; (80009f4 <.text_21>)
 80008ae:	680b      	ldr	r3, [r1, #0]
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	005b      	lsls	r3, r3, #1
 80008b4:	600b      	str	r3, [r1, #0]
 80008b6:	2101      	movs	r1, #1
 80008b8:	4b4f      	ldr	r3, [pc, #316]	; (80009f8 <.text_22>)
 80008ba:	6099      	str	r1, [r3, #8]
 80008bc:	6899      	ldr	r1, [r3, #8]
 80008be:	2900      	cmp	r1, #0
 80008c0:	d1fc      	bne.n	80008bc <ai_platform_network_destroy+0x20>
 80008c2:	f8df c138 	ldr.w	ip, [pc, #312]	; 80009fc <.text_23>
 80008c6:	f8c3 c000 	str.w	ip, [r3]
 80008ca:	6819      	ldr	r1, [r3, #0]
 80008cc:	4b4c      	ldr	r3, [pc, #304]	; (8000a00 <.text_24>)
 80008ce:	4299      	cmp	r1, r3
 80008d0:	d000      	beq.n	80008d4 <ai_platform_network_destroy+0x38>
 80008d2:	e7fe      	b.n	80008d2 <ai_platform_network_destroy+0x36>
 80008d4:	b102      	cbz	r2, 80008d8 <ai_platform_network_destroy+0x3c>
 80008d6:	2000      	movs	r0, #0
 80008d8:	4770      	bx	lr

080008da <ai_platform_network_init>:
 80008da:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80008de:	b081      	sub	sp, #4
 80008e0:	460a      	mov	r2, r1
 80008e2:	b118      	cbz	r0, 80008ec <ai_platform_network_init+0x12>
 80008e4:	6801      	ldr	r1, [r0, #0]
 80008e6:	4b47      	ldr	r3, [pc, #284]	; (8000a04 <.text_25>)
 80008e8:	4299      	cmp	r1, r3
 80008ea:	d000      	beq.n	80008ee <ai_platform_network_init+0x14>
 80008ec:	2000      	movs	r0, #0
 80008ee:	4941      	ldr	r1, [pc, #260]	; (80009f4 <.text_21>)
 80008f0:	680b      	ldr	r3, [r1, #0]
 80008f2:	085b      	lsrs	r3, r3, #1
 80008f4:	005b      	lsls	r3, r3, #1
 80008f6:	600b      	str	r3, [r1, #0]
 80008f8:	2101      	movs	r1, #1
 80008fa:	4b3f      	ldr	r3, [pc, #252]	; (80009f8 <.text_22>)
 80008fc:	6099      	str	r1, [r3, #8]
 80008fe:	6899      	ldr	r1, [r3, #8]
 8000900:	2900      	cmp	r1, #0
 8000902:	d1fc      	bne.n	80008fe <ai_platform_network_init+0x24>
 8000904:	4c3d      	ldr	r4, [pc, #244]	; (80009fc <.text_23>)
 8000906:	601c      	str	r4, [r3, #0]
 8000908:	6819      	ldr	r1, [r3, #0]
 800090a:	4b3d      	ldr	r3, [pc, #244]	; (8000a00 <.text_24>)
 800090c:	4299      	cmp	r1, r3
 800090e:	d000      	beq.n	8000912 <ai_platform_network_init+0x38>
 8000910:	e7fe      	b.n	8000910 <ai_platform_network_init+0x36>
 8000912:	2800      	cmp	r0, #0
 8000914:	d034      	beq.n	8000980 <ai_platform_network_init+0xa6>
 8000916:	b90a      	cbnz	r2, 800091c <ai_platform_network_init+0x42>
 8000918:	2211      	movs	r2, #17
 800091a:	e012      	b.n	8000942 <ai_platform_network_init+0x68>
 800091c:	6913      	ldr	r3, [r2, #16]
 800091e:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8000920:	b939      	cbnz	r1, 8000932 <ai_platform_network_init+0x58>
 8000922:	8b91      	ldrh	r1, [r2, #28]
 8000924:	8b55      	ldrh	r5, [r2, #26]
 8000926:	6a14      	ldr	r4, [r2, #32]
 8000928:	4369      	muls	r1, r5
 800092a:	4361      	muls	r1, r4
 800092c:	bf18      	it	ne
 800092e:	2213      	movne	r2, #19
 8000930:	d107      	bne.n	8000942 <ai_platform_network_init+0x68>
 8000932:	b973      	cbnz	r3, 8000952 <ai_platform_network_init+0x78>
 8000934:	8911      	ldrh	r1, [r2, #8]
 8000936:	88d4      	ldrh	r4, [r2, #6]
 8000938:	68d3      	ldr	r3, [r2, #12]
 800093a:	4361      	muls	r1, r4
 800093c:	4359      	muls	r1, r3
 800093e:	d008      	beq.n	8000952 <ai_platform_network_init+0x78>
 8000940:	2212      	movs	r2, #18
 8000942:	2110      	movs	r1, #16
 8000944:	300c      	adds	r0, #12
 8000946:	f000 f87c 	bl	8000a42 <core_set_error>
 800094a:	2000      	movs	r0, #0
 800094c:	b001      	add	sp, #4
 800094e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000952:	caf8      	ldmia	r2!, {r3, r4, r5, r6, r7}
 8000954:	f100 0114 	add.w	r1, r0, #20
 8000958:	f100 0c28 	add.w	ip, r0, #40	; 0x28
 800095c:	e881 00f8 	stmia.w	r1, {r3, r4, r5, r6, r7}
 8000960:	e892 4f00 	ldmia.w	r2, {r8, r9, sl, fp, lr}
 8000964:	e88c 4f00 	stmia.w	ip, {r8, r9, sl, fp, lr}
 8000968:	2103      	movs	r1, #3
 800096a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800096c:	6081      	str	r1, [r0, #8]
 800096e:	b13a      	cbz	r2, 8000980 <ai_platform_network_init+0xa6>
 8000970:	6891      	ldr	r1, [r2, #8]
 8000972:	6050      	str	r0, [r2, #4]
 8000974:	428a      	cmp	r2, r1
 8000976:	bf18      	it	ne
 8000978:	2900      	cmpne	r1, #0
 800097a:	bf18      	it	ne
 800097c:	460a      	movne	r2, r1
 800097e:	d1f7      	bne.n	8000970 <ai_platform_network_init+0x96>
 8000980:	b001      	add	sp, #4
 8000982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000986 <ai_platform_network_process>:
 8000986:	b570      	push	{r4, r5, r6, lr}
 8000988:	0004      	movs	r4, r0
 800098a:	d003      	beq.n	8000994 <ai_platform_network_process+0xe>
 800098c:	6820      	ldr	r0, [r4, #0]
 800098e:	4b1d      	ldr	r3, [pc, #116]	; (8000a04 <.text_25>)
 8000990:	4298      	cmp	r0, r3
 8000992:	d000      	beq.n	8000996 <ai_platform_network_process+0x10>
 8000994:	2400      	movs	r4, #0
 8000996:	4817      	ldr	r0, [pc, #92]	; (80009f4 <.text_21>)
 8000998:	6803      	ldr	r3, [r0, #0]
 800099a:	085b      	lsrs	r3, r3, #1
 800099c:	005b      	lsls	r3, r3, #1
 800099e:	6003      	str	r3, [r0, #0]
 80009a0:	2001      	movs	r0, #1
 80009a2:	4b15      	ldr	r3, [pc, #84]	; (80009f8 <.text_22>)
 80009a4:	6098      	str	r0, [r3, #8]
 80009a6:	6898      	ldr	r0, [r3, #8]
 80009a8:	2800      	cmp	r0, #0
 80009aa:	d1fc      	bne.n	80009a6 <ai_platform_network_process+0x20>
 80009ac:	4d13      	ldr	r5, [pc, #76]	; (80009fc <.text_23>)
 80009ae:	601d      	str	r5, [r3, #0]
 80009b0:	6818      	ldr	r0, [r3, #0]
 80009b2:	4b13      	ldr	r3, [pc, #76]	; (8000a00 <.text_24>)
 80009b4:	4298      	cmp	r0, r3
 80009b6:	d000      	beq.n	80009ba <ai_platform_network_process+0x34>
 80009b8:	e7fe      	b.n	80009b8 <ai_platform_network_process+0x32>
 80009ba:	4620      	mov	r0, r4
 80009bc:	f7ff fcca 	bl	8000354 <_platform_network_io_bind>
 80009c0:	b1b8      	cbz	r0, 80009f2 <ai_platform_network_process+0x6c>
 80009c2:	8a60      	ldrh	r0, [r4, #18]
 80009c4:	8a21      	ldrh	r1, [r4, #16]
 80009c6:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 80009c8:	4288      	cmp	r0, r1
 80009ca:	f105 060c 	add.w	r6, r5, #12
 80009ce:	d20f      	bcs.n	80009f0 <ai_platform_network_process+0x6a>
 80009d0:	4628      	mov	r0, r5
 80009d2:	f7ff fc4d 	bl	8000270 <_platform_network_state_update_input>
 80009d6:	4620      	mov	r0, r4
 80009d8:	f000 f8f2 	bl	8000bc0 <ai_layers_forward_all>
 80009dc:	4630      	mov	r0, r6
 80009de:	f7ff fc7b 	bl	80002d8 <_platform_network_state_update_output>
 80009e2:	8a60      	ldrh	r0, [r4, #18]
 80009e4:	8a21      	ldrh	r1, [r4, #16]
 80009e6:	1c40      	adds	r0, r0, #1
 80009e8:	8260      	strh	r0, [r4, #18]
 80009ea:	b280      	uxth	r0, r0
 80009ec:	4288      	cmp	r0, r1
 80009ee:	d3ef      	bcc.n	80009d0 <ai_platform_network_process+0x4a>
 80009f0:	8a60      	ldrh	r0, [r4, #18]
 80009f2:	bd70      	pop	{r4, r5, r6, pc}

080009f4 <.text_21>:
 80009f4:	e0002000 	.word	0xe0002000

080009f8 <.text_22>:
 80009f8:	40023000 	.word	0x40023000

080009fc <.text_23>:
 80009fc:	f407a5c2 	.word	0xf407a5c2

08000a00 <.text_24>:
 8000a00:	b5e8b5cd 	.word	0xb5e8b5cd

08000a04 <.text_25>:
 8000a04:	a1c00100 	.word	0xa1c00100

08000a08 <.text_26>:
 8000a08:	01030001 	.word	0x01030001

08000a0c <.text_27>:
 8000a0c:	00000004 	.word	0x00000004

08000a10 <.text_28>:
 8000a10:	00000101 	.word	0x00000101

08000a14 <.text_29>:
 8000a14:	00000301 	.word	0x00000301

08000a18 <.text_30>:
 8000a18:	00001030 	.word	0x00001030

08000a1c <.text_31>:
 8000a1c:	00001001 	.word	0x00001001

08000a20 <_platform_network_sanity_check{5}::signatures>:
 8000a20:	84048403                                ....

08000a24 <.text_33>:
 8000a24:	00001002 	.word	0x00001002

08000a28 <.text_34>:
 8000a28:	00001010 	.word	0x00001010

08000a2c <.text_35>:
 8000a2c:	00000000 	.word	0x00000000

08000a30 <.text_36>:
 8000a30:	00001010 	.word	0x00001010

08000a34 <core_init>:
 8000a34:	2001      	movs	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <core_get_error>:
 8000a38:	4601      	mov	r1, r0
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	6808      	ldr	r0, [r1, #0]
 8000a3e:	600a      	str	r2, [r1, #0]
 8000a40:	4770      	bx	lr

08000a42 <core_set_error>:
 8000a42:	7803      	ldrb	r3, [r0, #0]
 8000a44:	ea5f 6c03 	movs.w	ip, r3, lsl #24
 8000a48:	d104      	bne.n	8000a54 <core_set_error+0x12>
 8000a4a:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 8000a4e:	6001      	str	r1, [r0, #0]
 8000a50:	2001      	movs	r0, #1
 8000a52:	4770      	bx	lr
 8000a54:	2000      	movs	r0, #0
 8000a56:	4770      	bx	lr

08000a58 <ai_layers_forward_layer>:
 8000a58:	b510      	push	{r4, lr}
 8000a5a:	4604      	mov	r4, r0
 8000a5c:	68e1      	ldr	r1, [r4, #12]
 8000a5e:	4788      	blx	r1
 8000a60:	68a0      	ldr	r0, [r4, #8]
 8000a62:	42a0      	cmp	r0, r4
 8000a64:	bf08      	it	eq
 8000a66:	2000      	moveq	r0, #0
 8000a68:	bd10      	pop	{r4, pc}
	...

08000a6c <ai_check_custom_types>:
 8000a6c:	b500      	push	{lr}
 8000a6e:	b081      	sub	sp, #4
 8000a70:	b160      	cbz	r0, 8000a8c <ai_check_custom_types+0x20>
 8000a72:	7801      	ldrb	r1, [r0, #0]
 8000a74:	2903      	cmp	r1, #3
 8000a76:	d109      	bne.n	8000a8c <ai_check_custom_types+0x20>
 8000a78:	f05f 0204 	movs.w	r2, #4
 8000a7c:	a18c      	add	r1, pc, #560	; (adr r1, 8000cb0 <ai_check_custom_types::ref_signatures>)
 8000a7e:	f008 f901 	bl	8008c84 <memcmp>
 8000a82:	1e40      	subs	r0, r0, #1
 8000a84:	4180      	sbcs	r0, r0
 8000a86:	0fc0      	lsrs	r0, r0, #31
 8000a88:	b001      	add	sp, #4
 8000a8a:	bd00      	pop	{pc}
 8000a8c:	2000      	movs	r0, #0
 8000a8e:	b001      	add	sp, #4
 8000a90:	bd00      	pop	{pc}
	...

08000a94 <ai_layer_type_name>:
 8000a94:	f242 7211 	movw	r2, #10001	; 0x2711
 8000a98:	1a81      	subs	r1, r0, r2
 8000a9a:	2901      	cmp	r1, #1
 8000a9c:	bf81      	itttt	hi
 8000a9e:	1ec9      	subhi	r1, r1, #3
 8000aa0:	290d      	cmphi	r1, #13
 8000aa2:	390f      	subhi	r1, #15
 8000aa4:	2909      	cmphi	r1, #9
 8000aa6:	f200 806b 	bhi.w	8000b80 <ai_layer_type_name+0xec>
 8000aaa:	1a80      	subs	r0, r0, r2
 8000aac:	d033      	beq.n	8000b16 <ai_layer_type_name+0x82>
 8000aae:	1e40      	subs	r0, r0, #1
 8000ab0:	d033      	beq.n	8000b1a <ai_layer_type_name+0x86>
 8000ab2:	1e80      	subs	r0, r0, #2
 8000ab4:	d033      	beq.n	8000b1e <ai_layer_type_name+0x8a>
 8000ab6:	1e40      	subs	r0, r0, #1
 8000ab8:	d034      	beq.n	8000b24 <ai_layer_type_name+0x90>
 8000aba:	1e40      	subs	r0, r0, #1
 8000abc:	d034      	beq.n	8000b28 <ai_layer_type_name+0x94>
 8000abe:	1e40      	subs	r0, r0, #1
 8000ac0:	d034      	beq.n	8000b2c <ai_layer_type_name+0x98>
 8000ac2:	1e40      	subs	r0, r0, #1
 8000ac4:	d034      	beq.n	8000b30 <ai_layer_type_name+0x9c>
 8000ac6:	1e40      	subs	r0, r0, #1
 8000ac8:	d034      	beq.n	8000b34 <ai_layer_type_name+0xa0>
 8000aca:	1e40      	subs	r0, r0, #1
 8000acc:	d034      	beq.n	8000b38 <ai_layer_type_name+0xa4>
 8000ace:	1e40      	subs	r0, r0, #1
 8000ad0:	d034      	beq.n	8000b3c <ai_layer_type_name+0xa8>
 8000ad2:	1e40      	subs	r0, r0, #1
 8000ad4:	d034      	beq.n	8000b40 <ai_layer_type_name+0xac>
 8000ad6:	1e40      	subs	r0, r0, #1
 8000ad8:	d034      	beq.n	8000b44 <ai_layer_type_name+0xb0>
 8000ada:	1e40      	subs	r0, r0, #1
 8000adc:	d034      	beq.n	8000b48 <ai_layer_type_name+0xb4>
 8000ade:	1e40      	subs	r0, r0, #1
 8000ae0:	d034      	beq.n	8000b4c <ai_layer_type_name+0xb8>
 8000ae2:	1e40      	subs	r0, r0, #1
 8000ae4:	d034      	beq.n	8000b50 <ai_layer_type_name+0xbc>
 8000ae6:	1e40      	subs	r0, r0, #1
 8000ae8:	d034      	beq.n	8000b54 <ai_layer_type_name+0xc0>
 8000aea:	1e80      	subs	r0, r0, #2
 8000aec:	d034      	beq.n	8000b58 <ai_layer_type_name+0xc4>
 8000aee:	1e40      	subs	r0, r0, #1
 8000af0:	d034      	beq.n	8000b5c <ai_layer_type_name+0xc8>
 8000af2:	1e40      	subs	r0, r0, #1
 8000af4:	d034      	beq.n	8000b60 <ai_layer_type_name+0xcc>
 8000af6:	1e40      	subs	r0, r0, #1
 8000af8:	d034      	beq.n	8000b64 <ai_layer_type_name+0xd0>
 8000afa:	1e40      	subs	r0, r0, #1
 8000afc:	d034      	beq.n	8000b68 <ai_layer_type_name+0xd4>
 8000afe:	1e40      	subs	r0, r0, #1
 8000b00:	d034      	beq.n	8000b6c <ai_layer_type_name+0xd8>
 8000b02:	1e40      	subs	r0, r0, #1
 8000b04:	d034      	beq.n	8000b70 <ai_layer_type_name+0xdc>
 8000b06:	1e40      	subs	r0, r0, #1
 8000b08:	d034      	beq.n	8000b74 <ai_layer_type_name+0xe0>
 8000b0a:	1e40      	subs	r0, r0, #1
 8000b0c:	d034      	beq.n	8000b78 <ai_layer_type_name+0xe4>
 8000b0e:	1e40      	subs	r0, r0, #1
 8000b10:	d034      	beq.n	8000b7c <ai_layer_type_name+0xe8>
 8000b12:	a01c      	add	r0, pc, #112	; (adr r0, 8000b84 <.text_5>)
 8000b14:	4770      	bx	lr
 8000b16:	a01c      	add	r0, pc, #112	; (adr r0, 8000b88 <.text_6>)
 8000b18:	4770      	bx	lr
 8000b1a:	a01c      	add	r0, pc, #112	; (adr r0, 8000b8c <.text_7>)
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	a031      	add	r0, pc, #196	; (adr r0, 8000be8 <.text_15>)
 8000b22:	4770      	bx	lr
 8000b24:	a032      	add	r0, pc, #200	; (adr r0, 8000bf0 <.text_16>)
 8000b26:	4770      	bx	lr
 8000b28:	a019      	add	r0, pc, #100	; (adr r0, 8000b90 <.text_8>)
 8000b2a:	4770      	bx	lr
 8000b2c:	a019      	add	r0, pc, #100	; (adr r0, 8000b94 <.text_9>)
 8000b2e:	4770      	bx	lr
 8000b30:	a031      	add	r0, pc, #196	; (adr r0, 8000bf8 <.text_17>)
 8000b32:	4770      	bx	lr
 8000b34:	a018      	add	r0, pc, #96	; (adr r0, 8000b98 <.text_10>)
 8000b36:	4770      	bx	lr
 8000b38:	a031      	add	r0, pc, #196	; (adr r0, 8000c00 <.text_18>)
 8000b3a:	4770      	bx	lr
 8000b3c:	a032      	add	r0, pc, #200	; (adr r0, 8000c08 <.text_19>)
 8000b3e:	4770      	bx	lr
 8000b40:	a036      	add	r0, pc, #216	; (adr r0, 8000c1c <.text_20>)
 8000b42:	4770      	bx	lr
 8000b44:	a037      	add	r0, pc, #220	; (adr r0, 8000c24 <.text_21>)
 8000b46:	4770      	bx	lr
 8000b48:	a014      	add	r0, pc, #80	; (adr r0, 8000b9c <.text_11>)
 8000b4a:	4770      	bx	lr
 8000b4c:	a037      	add	r0, pc, #220	; (adr r0, 8000c2c <.text_22>)
 8000b4e:	4770      	bx	lr
 8000b50:	a038      	add	r0, pc, #224	; (adr r0, 8000c34 <.text_23>)
 8000b52:	4770      	bx	lr
 8000b54:	a03a      	add	r0, pc, #232	; (adr r0, 8000c40 <.text_24>)
 8000b56:	4770      	bx	lr
 8000b58:	a03e      	add	r0, pc, #248	; (adr r0, 8000c54 <.text_25>)
 8000b5a:	4770      	bx	lr
 8000b5c:	a03f      	add	r0, pc, #252	; (adr r0, 8000c5c <.text_26>)
 8000b5e:	4770      	bx	lr
 8000b60:	a040      	add	r0, pc, #256	; (adr r0, 8000c64 <.text_27>)
 8000b62:	4770      	bx	lr
 8000b64:	a042      	add	r0, pc, #264	; (adr r0, 8000c70 <.text_28>)
 8000b66:	4770      	bx	lr
 8000b68:	a043      	add	r0, pc, #268	; (adr r0, 8000c78 <.text_29>)
 8000b6a:	4770      	bx	lr
 8000b6c:	a044      	add	r0, pc, #272	; (adr r0, 8000c80 <.text_30>)
 8000b6e:	4770      	bx	lr
 8000b70:	a00b      	add	r0, pc, #44	; (adr r0, 8000ba0 <.text_12>)
 8000b72:	4770      	bx	lr
 8000b74:	a048      	add	r0, pc, #288	; (adr r0, 8000c98 <.text_31>)
 8000b76:	4770      	bx	lr
 8000b78:	a049      	add	r0, pc, #292	; (adr r0, 8000ca0 <.text_32>)
 8000b7a:	4770      	bx	lr
 8000b7c:	a04a      	add	r0, pc, #296	; (adr r0, 8000ca8 <.text_33>)
 8000b7e:	4770      	bx	lr
 8000b80:	a000      	add	r0, pc, #0	; (adr r0, 8000b84 <.text_5>)
 8000b82:	4770      	bx	lr

08000b84 <.text_5>:
 8000b84:	00000000 	.word	0x00000000

08000b88 <.text_6>:
 8000b88:	00444441 	.word	0x00444441

08000b8c <.text_7>:
 8000b8c:	00004e42 	.word	0x00004e42

08000b90 <.text_8>:
 8000b90:	00555247 	.word	0x00555247

08000b94 <.text_9>:
 8000b94:	004e524c 	.word	0x004e524c

08000b98 <.text_10>:
 8000b98:	00004c4e 	.word	0x00004c4e

08000b9c <.text_11>:
 8000b9c:	00004d53 	.word	0x00004d53

08000ba0 <.text_12>:
 8000ba0:	00444150 	.word	0x00444150

08000ba4 <ai_layer_type_is_valid>:
 8000ba4:	f242 7111 	movw	r1, #10001	; 0x2711
 8000ba8:	1a40      	subs	r0, r0, r1
 8000baa:	2801      	cmp	r0, #1
 8000bac:	bf81      	itttt	hi
 8000bae:	1ec0      	subhi	r0, r0, #3
 8000bb0:	280d      	cmphi	r0, #13
 8000bb2:	380f      	subhi	r0, #15
 8000bb4:	2809      	cmphi	r0, #9
 8000bb6:	d801      	bhi.n	8000bbc <ai_layer_type_is_valid+0x18>
 8000bb8:	2001      	movs	r0, #1
 8000bba:	4770      	bx	lr
 8000bbc:	2000      	movs	r0, #0
 8000bbe:	4770      	bx	lr

08000bc0 <ai_layers_forward_all>:
 8000bc0:	b530      	push	{r4, r5, lr}
 8000bc2:	4604      	mov	r4, r0
 8000bc4:	b081      	sub	sp, #4
 8000bc6:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8000bc8:	b158      	cbz	r0, 8000be2 <ai_layers_forward_all+0x22>
 8000bca:	64a0      	str	r0, [r4, #72]	; 0x48
 8000bcc:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8000bce:	68e9      	ldr	r1, [r5, #12]
 8000bd0:	4628      	mov	r0, r5
 8000bd2:	4788      	blx	r1
 8000bd4:	68a8      	ldr	r0, [r5, #8]
 8000bd6:	42a8      	cmp	r0, r5
 8000bd8:	bf08      	it	eq
 8000bda:	2000      	moveq	r0, #0
 8000bdc:	2800      	cmp	r0, #0
 8000bde:	64a0      	str	r0, [r4, #72]	; 0x48
 8000be0:	d1f4      	bne.n	8000bcc <ai_layers_forward_all+0xc>
 8000be2:	b001      	add	sp, #4
 8000be4:	bd30      	pop	{r4, r5, pc}
	...

08000be8 <.text_15>:
 8000be8:	564e4f43 	.word	0x564e4f43
 8000bec:	4432      	.short	0x4432
	...

08000bf0 <.text_16>:
 8000bf0:	534e4544 	.word	0x534e4544
 8000bf4:	0045      	.short	0x0045
	...

08000bf8 <.text_17>:
 8000bf8:	4d54534c 	.word	0x4d54534c
 8000bfc:	00000000 	.word	0x00000000

08000c00 <.text_18>:
 8000c00:	4d524f4e 	.word	0x4d524f4e
 8000c04:	00000000 	.word	0x00000000

08000c08 <.text_19>:
 8000c08:	4954504f 	.word	0x4954504f
 8000c0c:	455a494d 	.word	0x455a494d
 8000c10:	4f435f44 	.word	0x4f435f44
 8000c14:	4432564e 	.word	0x4432564e
 8000c18:	00000000 	.word	0x00000000

08000c1c <.text_20>:
 8000c1c:	4d524550 	.word	0x4d524550
 8000c20:	00455455 	.word	0x00455455

08000c24 <.text_21>:
 8000c24:	4c4f4f50 	.word	0x4c4f4f50
 8000c28:	00000000 	.word	0x00000000

08000c2c <.text_22>:
 8000c2c:	494c5053 	.word	0x494c5053
 8000c30:	0054      	.short	0x0054
	...

08000c34 <.text_23>:
 8000c34:	454d4954 	.word	0x454d4954
 8000c38:	4c45445f 	.word	0x4c45445f
 8000c3c:	5941      	.short	0x5941
	...

08000c40 <.text_24>:
 8000c40:	454d4954 	.word	0x454d4954
 8000c44:	5349445f 	.word	0x5349445f
 8000c48:	42495254 	.word	0x42495254
 8000c4c:	44455455 	.word	0x44455455
 8000c50:	00000000 	.word	0x00000000

08000c54 <.text_25>:
 8000c54:	434e4f43 	.word	0x434e4f43
 8000c58:	5441      	.short	0x5441
	...

08000c5c <.text_26>:
 8000c5c:	4d4d4547 	.word	0x4d4d4547
 8000c60:	00000000 	.word	0x00000000

08000c64 <.text_27>:
 8000c64:	41535055 	.word	0x41535055
 8000c68:	454c504d 	.word	0x454c504d
 8000c6c:	00000000 	.word	0x00000000

08000c70 <.text_28>:
 8000c70:	57544c45 	.word	0x57544c45
 8000c74:	00455349 	.word	0x00455349

08000c78 <.text_29>:
 8000c78:	454e4547 	.word	0x454e4547
 8000c7c:	00434952 	.word	0x00434952

08000c80 <.text_30>:
 8000c80:	54534e49 	.word	0x54534e49
 8000c84:	45434e41 	.word	0x45434e41
 8000c88:	4d524f4e 	.word	0x4d524f4e
 8000c8c:	5a494c41 	.word	0x5a494c41
 8000c90:	4f495441 	.word	0x4f495441
 8000c94:	004e      	.short	0x004e
	...

08000c98 <.text_31>:
 8000c98:	43494c53 	.word	0x43494c53
 8000c9c:	0045      	.short	0x0045
	...

08000ca0 <.text_32>:
 8000ca0:	454c4954 	.word	0x454c4954
 8000ca4:	00000000 	.word	0x00000000

08000ca8 <.text_33>:
 8000ca8:	55444552 	.word	0x55444552
 8000cac:	4543      	.short	0x4543
	...

08000cb0 <ai_check_custom_types::ref_signatures>:
 8000cb0:	8403 8404                                   ....

08000cb4 <ai_conv2d_kernel_simple_f32>:
 8000cb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000cb8:	b081      	sub	sp, #4
 8000cba:	468b      	mov	fp, r1
 8000cbc:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8000cbe:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8000cc2:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8000cc4:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000cc8:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8000cca:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
 8000cce:	f8dd 904c 	ldr.w	r9, [sp, #76]	; 0x4c
 8000cd2:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8000cda:	eba5 0709 	sub.w	r7, r5, r9
 8000cde:	fb07 f708 	mul.w	r7, r7, r8
 8000ce2:	9700      	str	r7, [sp, #0]
 8000ce4:	1ae4      	subs	r4, r4, r3
 8000ce6:	fb05 f708 	mul.w	r7, r5, r8
 8000cea:	fb05 650e 	mla	r5, r5, lr, r6
 8000cee:	fb08 f505 	mul.w	r5, r8, r5
 8000cf2:	437c      	muls	r4, r7
 8000cf4:	eb01 0685 	add.w	r6, r1, r5, lsl #2
 8000cf8:	45da      	cmp	sl, fp
 8000cfa:	990c      	ldr	r1, [sp, #48]	; 0x30
 8000cfc:	ebac 0009 	sub.w	r0, ip, r9
 8000d00:	bf0c      	ite	eq
 8000d02:	ed9f 0aab 	vldreq	s0, [pc, #684]	; 8000fb0 <.text_4>
 8000d06:	eeb7 0a00 	vmovne.f32	s0, #112	; 0x3f800000  1.0
 8000d0a:	fb0c f50e 	mul.w	r5, ip, lr
 8000d0e:	fb00 f008 	mul.w	r0, r0, r8
 8000d12:	fb09 f908 	mul.w	r9, r9, r8
 8000d16:	fb08 f505 	mul.w	r5, r8, r5
 8000d1a:	2900      	cmp	r1, #0
 8000d1c:	eb02 0885 	add.w	r8, r2, r5, lsl #2
 8000d20:	f000 8070 	beq.w	8000e04 <ai_conv2d_kernel_simple_f32+0x150>
 8000d24:	f029 0203 	bic.w	r2, r9, #3
 8000d28:	edda 0a00 	vldr	s1, [sl]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	ee60 0a80 	vmul.f32	s1, s1, s0
 8000d32:	46c4      	mov	ip, r8
 8000d34:	dd5c      	ble.n	8000df0 <ai_conv2d_kernel_simple_f32+0x13c>
 8000d36:	9d00      	ldr	r5, [sp, #0]
 8000d38:	469e      	mov	lr, r3
 8000d3a:	2700      	movs	r7, #0
 8000d3c:	2a00      	cmp	r2, #0
 8000d3e:	dd1d      	ble.n	8000d7c <ai_conv2d_kernel_simple_f32+0xc8>
 8000d40:	ed96 4a00 	vldr	s8, [r6]
 8000d44:	eddc 4a00 	vldr	s9, [ip]
 8000d48:	ed96 3a01 	vldr	s6, [r6, #4]
 8000d4c:	eddc 3a01 	vldr	s7, [ip, #4]
 8000d50:	ed96 2a02 	vldr	s4, [r6, #8]
 8000d54:	eddc 2a02 	vldr	s5, [ip, #8]
 8000d58:	ed96 1a03 	vldr	s2, [r6, #12]
 8000d5c:	eddc 1a03 	vldr	s3, [ip, #12]
 8000d60:	ee44 0a24 	vmla.f32	s1, s8, s9
 8000d64:	ee43 0a23 	vmla.f32	s1, s6, s7
 8000d68:	3610      	adds	r6, #16
 8000d6a:	1d3f      	adds	r7, r7, #4
 8000d6c:	ee42 0a22 	vmla.f32	s1, s4, s5
 8000d70:	4297      	cmp	r7, r2
 8000d72:	ee41 0a21 	vmla.f32	s1, s2, s3
 8000d76:	f10c 0c10 	add.w	ip, ip, #16
 8000d7a:	dbe1      	blt.n	8000d40 <ai_conv2d_kernel_simple_f32+0x8c>
 8000d7c:	454f      	cmp	r7, r9
 8000d7e:	da2f      	bge.n	8000de0 <ai_conv2d_kernel_simple_f32+0x12c>
 8000d80:	1c7f      	adds	r7, r7, #1
 8000d82:	ed96 1a00 	vldr	s2, [r6]
 8000d86:	eddc 1a00 	vldr	s3, [ip]
 8000d8a:	1d36      	adds	r6, r6, #4
 8000d8c:	454f      	cmp	r7, r9
 8000d8e:	ee41 0a21 	vmla.f32	s1, s2, s3
 8000d92:	f10c 0c04 	add.w	ip, ip, #4
 8000d96:	da23      	bge.n	8000de0 <ai_conv2d_kernel_simple_f32+0x12c>
 8000d98:	1c7f      	adds	r7, r7, #1
 8000d9a:	ed96 1a00 	vldr	s2, [r6]
 8000d9e:	eddc 1a00 	vldr	s3, [ip]
 8000da2:	1d36      	adds	r6, r6, #4
 8000da4:	454f      	cmp	r7, r9
 8000da6:	ee41 0a21 	vmla.f32	s1, s2, s3
 8000daa:	f10c 0c04 	add.w	ip, ip, #4
 8000dae:	da17      	bge.n	8000de0 <ai_conv2d_kernel_simple_f32+0x12c>
 8000db0:	1c7f      	adds	r7, r7, #1
 8000db2:	ed96 1a00 	vldr	s2, [r6]
 8000db6:	eddc 1a00 	vldr	s3, [ip]
 8000dba:	1d36      	adds	r6, r6, #4
 8000dbc:	454f      	cmp	r7, r9
 8000dbe:	ee41 0a21 	vmla.f32	s1, s2, s3
 8000dc2:	f10c 0c04 	add.w	ip, ip, #4
 8000dc6:	da0b      	bge.n	8000de0 <ai_conv2d_kernel_simple_f32+0x12c>
 8000dc8:	1c7f      	adds	r7, r7, #1
 8000dca:	ed96 1a00 	vldr	s2, [r6]
 8000dce:	eddc 1a00 	vldr	s3, [ip]
 8000dd2:	1d36      	adds	r6, r6, #4
 8000dd4:	454f      	cmp	r7, r9
 8000dd6:	ee41 0a21 	vmla.f32	s1, s2, s3
 8000dda:	f10c 0c04 	add.w	ip, ip, #4
 8000dde:	dbcf      	blt.n	8000d80 <ai_conv2d_kernel_simple_f32+0xcc>
 8000de0:	f1be 0e01 	subs.w	lr, lr, #1
 8000de4:	eb0c 0c80 	add.w	ip, ip, r0, lsl #2
 8000de8:	eb06 0685 	add.w	r6, r6, r5, lsl #2
 8000dec:	d1a5      	bne.n	8000d3a <ai_conv2d_kernel_simple_f32+0x86>
 8000dee:	9500      	str	r5, [sp, #0]
 8000df0:	edcb 0a00 	vstr	s1, [fp]
 8000df4:	1e49      	subs	r1, r1, #1
 8000df6:	eb06 0684 	add.w	r6, r6, r4, lsl #2
 8000dfa:	f10b 0b04 	add.w	fp, fp, #4
 8000dfe:	f10a 0a04 	add.w	sl, sl, #4
 8000e02:	d191      	bne.n	8000d28 <ai_conv2d_kernel_simple_f32+0x74>
 8000e04:	b001      	add	sp, #4
 8000e06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08000e0c <ai_conv2d_kernel_depthwise_f32>:
 8000e0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e10:	b081      	sub	sp, #4
 8000e12:	b402      	push	{r1}
 8000e14:	b084      	sub	sp, #16
 8000e16:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8000e18:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
 8000e1c:	f8dd 8044 	ldr.w	r8, [sp, #68]	; 0x44
 8000e20:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8000e22:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8000e24:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8000e26:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
 8000e2a:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8000e2c:	f8dd e050 	ldr.w	lr, [sp, #80]	; 0x50
 8000e30:	9f16      	ldr	r7, [sp, #88]	; 0x58
 8000e32:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8000e36:	fbb6 f6fa 	udiv	r6, r6, sl
 8000e3a:	eba8 0a00 	sub.w	sl, r8, r0
 8000e3e:	fb0c fa0a 	mul.w	sl, ip, sl
 8000e42:	1b09      	subs	r1, r1, r4
 8000e44:	eba5 0c00 	sub.w	ip, r5, r0
 8000e48:	4369      	muls	r1, r5
 8000e4a:	fb05 750e 	mla	r5, r5, lr, r7
 8000e4e:	eb03 0785 	add.w	r7, r3, r5, lsl #2
 8000e52:	9b04      	ldr	r3, [sp, #16]
 8000e54:	4599      	cmp	r9, r3
 8000e56:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8000e58:	bf0c      	ite	eq
 8000e5a:	ed9f 0a55 	vldreq	s0, [pc, #340]	; 8000fb0 <.text_4>
 8000e5e:	eeb7 0a00 	vmovne.f32	s0, #112	; 0x3f800000  1.0
 8000e62:	fb08 f50e 	mul.w	r5, r8, lr
 8000e66:	435d      	muls	r5, r3
 8000e68:	eb02 0e85 	add.w	lr, r2, r5, lsl #2
 8000e6c:	eb0e 0583 	add.w	r5, lr, r3, lsl #2
 8000e70:	45ae      	cmp	lr, r5
 8000e72:	f04f 0800 	mov.w	r8, #0
 8000e76:	9500      	str	r5, [sp, #0]
 8000e78:	f080 8097 	bcs.w	8000faa <ai_conv2d_kernel_depthwise_f32+0x19e>
 8000e7c:	f020 0303 	bic.w	r3, r0, #3
 8000e80:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8000e84:	9603      	str	r6, [sp, #12]
 8000e86:	9a03      	ldr	r2, [sp, #12]
 8000e88:	2a00      	cmp	r2, #0
 8000e8a:	f000 8088 	beq.w	8000f9e <ai_conv2d_kernel_depthwise_f32+0x192>
 8000e8e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8000e90:	9e04      	ldr	r6, [sp, #16]
 8000e92:	eb02 0988 	add.w	r9, r2, r8, lsl #2
 8000e96:	9a03      	ldr	r2, [sp, #12]
 8000e98:	9415      	str	r4, [sp, #84]	; 0x54
 8000e9a:	eb06 0688 	add.w	r6, r6, r8, lsl #2
 8000e9e:	9102      	str	r1, [sp, #8]
 8000ea0:	f8cd e004 	str.w	lr, [sp, #4]
 8000ea4:	9915      	ldr	r1, [sp, #84]	; 0x54
 8000ea6:	edd9 0a00 	vldr	s1, [r9]
 8000eaa:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000eae:	2900      	cmp	r1, #0
 8000eb0:	ee60 0a80 	vmul.f32	s1, s1, s0
 8000eb4:	dd63      	ble.n	8000f7e <ai_conv2d_kernel_depthwise_f32+0x172>
 8000eb6:	2400      	movs	r4, #0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	dd26      	ble.n	8000f0a <ai_conv2d_kernel_depthwise_f32+0xfe>
 8000ebc:	f8dd 503c 	ldr.w	r5, [sp, #60]	; 0x3c
 8000ec0:	ed97 1a00 	vldr	s2, [r7]
 8000ec4:	edde 1a00 	vldr	s3, [lr]
 8000ec8:	eb0e 0e85 	add.w	lr, lr, r5, lsl #2
 8000ecc:	ee41 0a21 	vmla.f32	s1, s2, s3
 8000ed0:	ed97 1a01 	vldr	s2, [r7, #4]
 8000ed4:	edde 1a00 	vldr	s3, [lr]
 8000ed8:	eb0e 0e85 	add.w	lr, lr, r5, lsl #2
 8000edc:	ee41 0a21 	vmla.f32	s1, s2, s3
 8000ee0:	ed97 1a02 	vldr	s2, [r7, #8]
 8000ee4:	edde 1a00 	vldr	s3, [lr]
 8000ee8:	eb0e 0e85 	add.w	lr, lr, r5, lsl #2
 8000eec:	ee41 0a21 	vmla.f32	s1, s2, s3
 8000ef0:	1d24      	adds	r4, r4, #4
 8000ef2:	ed97 1a03 	vldr	s2, [r7, #12]
 8000ef6:	edde 1a00 	vldr	s3, [lr]
 8000efa:	3710      	adds	r7, #16
 8000efc:	429c      	cmp	r4, r3
 8000efe:	ee41 0a21 	vmla.f32	s1, s2, s3
 8000f02:	eb0e 0e85 	add.w	lr, lr, r5, lsl #2
 8000f06:	dbdb      	blt.n	8000ec0 <ai_conv2d_kernel_depthwise_f32+0xb4>
 8000f08:	950f      	str	r5, [sp, #60]	; 0x3c
 8000f0a:	4284      	cmp	r4, r0
 8000f0c:	da31      	bge.n	8000f72 <ai_conv2d_kernel_depthwise_f32+0x166>
 8000f0e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8000f10:	1c64      	adds	r4, r4, #1
 8000f12:	ed97 1a00 	vldr	s2, [r7]
 8000f16:	edde 1a00 	vldr	s3, [lr]
 8000f1a:	1d3f      	adds	r7, r7, #4
 8000f1c:	4284      	cmp	r4, r0
 8000f1e:	ee41 0a21 	vmla.f32	s1, s2, s3
 8000f22:	eb0e 0e85 	add.w	lr, lr, r5, lsl #2
 8000f26:	da23      	bge.n	8000f70 <ai_conv2d_kernel_depthwise_f32+0x164>
 8000f28:	1c64      	adds	r4, r4, #1
 8000f2a:	ed97 1a00 	vldr	s2, [r7]
 8000f2e:	edde 1a00 	vldr	s3, [lr]
 8000f32:	1d3f      	adds	r7, r7, #4
 8000f34:	4284      	cmp	r4, r0
 8000f36:	ee41 0a21 	vmla.f32	s1, s2, s3
 8000f3a:	eb0e 0e85 	add.w	lr, lr, r5, lsl #2
 8000f3e:	da17      	bge.n	8000f70 <ai_conv2d_kernel_depthwise_f32+0x164>
 8000f40:	1c64      	adds	r4, r4, #1
 8000f42:	ed97 1a00 	vldr	s2, [r7]
 8000f46:	edde 1a00 	vldr	s3, [lr]
 8000f4a:	1d3f      	adds	r7, r7, #4
 8000f4c:	4284      	cmp	r4, r0
 8000f4e:	ee41 0a21 	vmla.f32	s1, s2, s3
 8000f52:	eb0e 0e85 	add.w	lr, lr, r5, lsl #2
 8000f56:	da0b      	bge.n	8000f70 <ai_conv2d_kernel_depthwise_f32+0x164>
 8000f58:	1c64      	adds	r4, r4, #1
 8000f5a:	ed97 1a00 	vldr	s2, [r7]
 8000f5e:	edde 1a00 	vldr	s3, [lr]
 8000f62:	1d3f      	adds	r7, r7, #4
 8000f64:	4284      	cmp	r4, r0
 8000f66:	ee41 0a21 	vmla.f32	s1, s2, s3
 8000f6a:	eb0e 0e85 	add.w	lr, lr, r5, lsl #2
 8000f6e:	dbcf      	blt.n	8000f10 <ai_conv2d_kernel_depthwise_f32+0x104>
 8000f70:	950f      	str	r5, [sp, #60]	; 0x3c
 8000f72:	1e49      	subs	r1, r1, #1
 8000f74:	eb0e 0e8a 	add.w	lr, lr, sl, lsl #2
 8000f78:	eb07 078c 	add.w	r7, r7, ip, lsl #2
 8000f7c:	d19b      	bne.n	8000eb6 <ai_conv2d_kernel_depthwise_f32+0xaa>
 8000f7e:	9902      	ldr	r1, [sp, #8]
 8000f80:	edc6 0a00 	vstr	s1, [r6]
 8000f84:	1d36      	adds	r6, r6, #4
 8000f86:	1e52      	subs	r2, r2, #1
 8000f88:	eb07 0781 	add.w	r7, r7, r1, lsl #2
 8000f8c:	f108 0801 	add.w	r8, r8, #1
 8000f90:	f109 0904 	add.w	r9, r9, #4
 8000f94:	d186      	bne.n	8000ea4 <ai_conv2d_kernel_depthwise_f32+0x98>
 8000f96:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8000f98:	9902      	ldr	r1, [sp, #8]
 8000f9a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f9e:	9a00      	ldr	r2, [sp, #0]
 8000fa0:	f10e 0e04 	add.w	lr, lr, #4
 8000fa4:	4596      	cmp	lr, r2
 8000fa6:	f4ff af6e 	bcc.w	8000e86 <ai_conv2d_kernel_depthwise_f32+0x7a>
 8000faa:	b006      	add	sp, #24
 8000fac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08000fb0 <.text_4>:
 8000fb0:	00000000 	.word	0x00000000

08000fb4 <ai_conv2d_kernel_group_f32>:
 8000fb4:	e92d 4ffa 	stmdb	sp!, {r1, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000fb8:	b085      	sub	sp, #20
 8000fba:	4693      	mov	fp, r2
 8000fbc:	f9bd 9050 	ldrsh.w	r9, [sp, #80]	; 0x50
 8000fc0:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 8000fc2:	9912      	ldr	r1, [sp, #72]	; 0x48
 8000fc4:	f9bd 8054 	ldrsh.w	r8, [sp, #84]	; 0x54
 8000fc8:	f8dd e05c 	ldr.w	lr, [sp, #92]	; 0x5c
 8000fcc:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8000fce:	9f19      	ldr	r7, [sp, #100]	; 0x64
 8000fd0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8000fd2:	981c      	ldr	r0, [sp, #112]	; 0x70
 8000fd4:	46ca      	mov	sl, r9
 8000fd6:	4655      	mov	r5, sl
 8000fd8:	ebaa 0c04 	sub.w	ip, sl, r4
 8000fdc:	fb94 f6f5 	sdiv	r6, r4, r5
 8000fe0:	fb05 c506 	mla	r5, r5, r6, ip
 8000fe4:	fb95 fcfa 	sdiv	ip, r5, sl
 8000fe8:	fb0a 551c 	mls	r5, sl, ip, r5
 8000fec:	9501      	str	r5, [sp, #4]
 8000fee:	4454      	add	r4, sl
 8000ff0:	4645      	mov	r5, r8
 8000ff2:	1bee      	subs	r6, r5, r7
 8000ff4:	fb97 fcf5 	sdiv	ip, r7, r5
 8000ff8:	fb05 6c0c 	mla	ip, r5, ip, r6
 8000ffc:	fb9c f6f5 	sdiv	r6, ip, r5
 8001000:	fb05 cc16 	mls	ip, r5, r6, ip
 8001004:	f8cd c000 	str.w	ip, [sp]
 8001008:	1e64      	subs	r4, r4, #1
 800100a:	9e01      	ldr	r6, [sp, #4]
 800100c:	1b80      	subs	r0, r0, r6
 800100e:	4450      	add	r0, sl
 8001010:	1e40      	subs	r0, r0, #1
 8001012:	fb90 f0fa 	sdiv	r0, r0, sl
 8001016:	9e00      	ldr	r6, [sp, #0]
 8001018:	1b9b      	subs	r3, r3, r6
 800101a:	fbb1 f6f2 	udiv	r6, r1, r2
 800101e:	18eb      	adds	r3, r5, r3
 8001020:	1e5b      	subs	r3, r3, #1
 8001022:	fb93 fcf5 	sdiv	ip, r3, r5
 8001026:	ebae 0e0c 	sub.w	lr, lr, ip
 800102a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800102c:	9604      	str	r6, [sp, #16]
 800102e:	fbb3 f3f2 	udiv	r3, r3, r2
 8001032:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8001034:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8001036:	fb01 f808 	mul.w	r8, r1, r8
 800103a:	fb00 881a 	mls	r8, r0, sl, r8
 800103e:	fb06 f808 	mul.w	r8, r6, r8
 8001042:	fb06 f109 	mul.w	r1, r6, r9
 8001046:	9e16      	ldr	r6, [sp, #88]	; 0x58
 8001048:	435e      	muls	r6, r3
 800104a:	fb0e fe06 	mul.w	lr, lr, r6
 800104e:	19ee      	adds	r6, r5, r7
 8001050:	1e76      	subs	r6, r6, #1
 8001052:	fb96 f5f5 	sdiv	r5, r6, r5
 8001056:	9e16      	ldr	r6, [sp, #88]	; 0x58
 8001058:	fb94 f4fa 	sdiv	r4, r4, sl
 800105c:	eba1 0903 	sub.w	r9, r1, r3
 8001060:	fb06 4405 	mla	r4, r6, r5, r4
 8001064:	9e06      	ldr	r6, [sp, #24]
 8001066:	9916      	ldr	r1, [sp, #88]	; 0x58
 8001068:	9d05      	ldr	r5, [sp, #20]
 800106a:	435c      	muls	r4, r3
 800106c:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8001070:	1a09      	subs	r1, r1, r0
 8001072:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8001074:	4359      	muls	r1, r3
 8001076:	42ae      	cmp	r6, r5
 8001078:	9d00      	ldr	r5, [sp, #0]
 800107a:	9e01      	ldr	r6, [sp, #4]
 800107c:	442f      	add	r7, r5
 800107e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8001080:	fb05 6507 	mla	r5, r5, r7, r6
 8001084:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8001086:	bf0c      	ite	eq
 8001088:	ed9f 0a3d 	vldreq	s0, [pc, #244]	; 8001180 <.text_6>
 800108c:	eeb7 0a00 	vmovne.f32	s0, #112	; 0x3f800000  1.0
 8001090:	437d      	muls	r5, r7
 8001092:	2a00      	cmp	r2, #0
 8001094:	eb0b 0585 	add.w	r5, fp, r5, lsl #2
 8001098:	f04f 0a00 	mov.w	sl, #0
 800109c:	d06d      	beq.n	800117a <ai_conv2d_kernel_group_f32+0x1c6>
 800109e:	9200      	str	r2, [sp, #0]
 80010a0:	9a04      	ldr	r2, [sp, #16]
 80010a2:	2a00      	cmp	r2, #0
 80010a4:	d063      	beq.n	800116e <ai_conv2d_kernel_group_f32+0x1ba>
 80010a6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80010a8:	9f05      	ldr	r7, [sp, #20]
 80010aa:	f8cd c004 	str.w	ip, [sp, #4]
 80010ae:	eb02 0b8a 	add.w	fp, r2, sl, lsl #2
 80010b2:	9a04      	ldr	r2, [sp, #16]
 80010b4:	f8cd e00c 	str.w	lr, [sp, #12]
 80010b8:	eb07 078a 	add.w	r7, r7, sl, lsl #2
 80010bc:	f8cd 5008 	str.w	r5, [sp, #8]
 80010c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80010c4:	eddb 0a00 	vldr	s1, [fp]
 80010c8:	9d02      	ldr	r5, [sp, #8]
 80010ca:	f1be 0f01 	cmp.w	lr, #1
 80010ce:	ee60 0a80 	vmul.f32	s1, s1, s0
 80010d2:	db3b      	blt.n	800114c <ai_conv2d_kernel_group_f32+0x198>
 80010d4:	2801      	cmp	r0, #1
 80010d6:	db32      	blt.n	800113e <ai_conv2d_kernel_group_f32+0x18a>
 80010d8:	ea4f 0c00 	mov.w	ip, r0
 80010dc:	eb05 0683 	add.w	r6, r5, r3, lsl #2
 80010e0:	42b5      	cmp	r5, r6
 80010e2:	d227      	bcs.n	8001134 <ai_conv2d_kernel_group_f32+0x180>
 80010e4:	ed94 1a00 	vldr	s2, [r4]
 80010e8:	edd5 1a00 	vldr	s3, [r5]
 80010ec:	1d24      	adds	r4, r4, #4
 80010ee:	1d2d      	adds	r5, r5, #4
 80010f0:	42b5      	cmp	r5, r6
 80010f2:	ee41 0a21 	vmla.f32	s1, s2, s3
 80010f6:	d21d      	bcs.n	8001134 <ai_conv2d_kernel_group_f32+0x180>
 80010f8:	ed94 1a00 	vldr	s2, [r4]
 80010fc:	edd5 1a00 	vldr	s3, [r5]
 8001100:	1d24      	adds	r4, r4, #4
 8001102:	1d2d      	adds	r5, r5, #4
 8001104:	42b5      	cmp	r5, r6
 8001106:	ee41 0a21 	vmla.f32	s1, s2, s3
 800110a:	d213      	bcs.n	8001134 <ai_conv2d_kernel_group_f32+0x180>
 800110c:	ed94 1a00 	vldr	s2, [r4]
 8001110:	edd5 1a00 	vldr	s3, [r5]
 8001114:	1d24      	adds	r4, r4, #4
 8001116:	1d2d      	adds	r5, r5, #4
 8001118:	42b5      	cmp	r5, r6
 800111a:	ee41 0a21 	vmla.f32	s1, s2, s3
 800111e:	d209      	bcs.n	8001134 <ai_conv2d_kernel_group_f32+0x180>
 8001120:	ed94 1a00 	vldr	s2, [r4]
 8001124:	edd5 1a00 	vldr	s3, [r5]
 8001128:	1d24      	adds	r4, r4, #4
 800112a:	1d2d      	adds	r5, r5, #4
 800112c:	42b5      	cmp	r5, r6
 800112e:	ee41 0a21 	vmla.f32	s1, s2, s3
 8001132:	d3d7      	bcc.n	80010e4 <ai_conv2d_kernel_group_f32+0x130>
 8001134:	f1bc 0c01 	subs.w	ip, ip, #1
 8001138:	eb05 0589 	add.w	r5, r5, r9, lsl #2
 800113c:	d1ce      	bne.n	80010dc <ai_conv2d_kernel_group_f32+0x128>
 800113e:	f1be 0e01 	subs.w	lr, lr, #1
 8001142:	eb05 0588 	add.w	r5, r5, r8, lsl #2
 8001146:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 800114a:	d1c3      	bne.n	80010d4 <ai_conv2d_kernel_group_f32+0x120>
 800114c:	9d03      	ldr	r5, [sp, #12]
 800114e:	edc7 0a00 	vstr	s1, [r7]
 8001152:	1d3f      	adds	r7, r7, #4
 8001154:	1e52      	subs	r2, r2, #1
 8001156:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 800115a:	f10a 0a01 	add.w	sl, sl, #1
 800115e:	f10b 0b04 	add.w	fp, fp, #4
 8001162:	d1ad      	bne.n	80010c0 <ai_conv2d_kernel_group_f32+0x10c>
 8001164:	f8dd c004 	ldr.w	ip, [sp, #4]
 8001168:	f8dd e00c 	ldr.w	lr, [sp, #12]
 800116c:	9d02      	ldr	r5, [sp, #8]
 800116e:	9a00      	ldr	r2, [sp, #0]
 8001170:	1e52      	subs	r2, r2, #1
 8001172:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 8001176:	9200      	str	r2, [sp, #0]
 8001178:	d192      	bne.n	80010a0 <ai_conv2d_kernel_group_f32+0xec>
 800117a:	b007      	add	sp, #28
 800117c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001180 <.text_6>:
 8001180:	00000000 	.word	0x00000000

08001184 <ai_conv2d_kernel_f32>:
 8001184:	e92d 4ff2 	stmdb	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001188:	b090      	sub	sp, #64	; 0x40
 800118a:	991a      	ldr	r1, [sp, #104]	; 0x68
 800118c:	b901      	cbnz	r1, 8001190 <ai_conv2d_kernel_f32+0xc>
 800118e:	9910      	ldr	r1, [sp, #64]	; 0x40
 8001190:	9c26      	ldr	r4, [sp, #152]	; 0x98
 8001192:	9e25      	ldr	r6, [sp, #148]	; 0x94
 8001194:	9d24      	ldr	r5, [sp, #144]	; 0x90
 8001196:	9f23      	ldr	r7, [sp, #140]	; 0x8c
 8001198:	f8dd e088 	ldr.w	lr, [sp, #136]	; 0x88
 800119c:	f9bd c078 	ldrsh.w	ip, [sp, #120]	; 0x78
 80011a0:	f9bd 807c 	ldrsh.w	r8, [sp, #124]	; 0x7c
 80011a4:	900f      	str	r0, [sp, #60]	; 0x3c
 80011a6:	1bed      	subs	r5, r5, r7
 80011a8:	1ba4      	subs	r4, r4, r6
 80011aa:	920e      	str	r2, [sp, #56]	; 0x38
 80011ac:	930d      	str	r3, [sp, #52]	; 0x34
 80011ae:	f1be 0f01 	cmp.w	lr, #1
 80011b2:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80011b4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80011b6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80011b8:	f8dd 9080 	ldr.w	r9, [sp, #128]	; 0x80
 80011bc:	f8dd a084 	ldr.w	sl, [sp, #132]	; 0x84
 80011c0:	bf04      	itt	eq
 80011c2:	fb1c fb08 	smulbbeq	fp, ip, r8
 80011c6:	f1bb 0f01 	cmpeq.w	fp, #1
 80011ca:	d114      	bne.n	80011f6 <ai_conv2d_kernel_f32+0x72>
 80011cc:	9303      	str	r3, [sp, #12]
 80011ce:	9202      	str	r2, [sp, #8]
 80011d0:	9001      	str	r0, [sp, #4]
 80011d2:	9100      	str	r1, [sp, #0]
 80011d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80011d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80011d8:	9910      	ldr	r1, [sp, #64]	; 0x40
 80011da:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80011dc:	9409      	str	r4, [sp, #36]	; 0x24
 80011de:	9608      	str	r6, [sp, #32]
 80011e0:	9507      	str	r5, [sp, #28]
 80011e2:	9706      	str	r7, [sp, #24]
 80011e4:	f8cd a014 	str.w	sl, [sp, #20]
 80011e8:	f8cd 9010 	str.w	r9, [sp, #16]
 80011ec:	f7ff fd62 	bl	8000cb4 <ai_conv2d_kernel_simple_f32>
 80011f0:	b011      	add	sp, #68	; 0x44
 80011f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80011f6:	4586      	cmp	lr, r0
 80011f8:	bf04      	itt	eq
 80011fa:	fb1c fb08 	smulbbeq	fp, ip, r8
 80011fe:	f1bb 0f01 	cmpeq.w	fp, #1
 8001202:	d114      	bne.n	800122e <ai_conv2d_kernel_f32+0xaa>
 8001204:	9303      	str	r3, [sp, #12]
 8001206:	9202      	str	r2, [sp, #8]
 8001208:	9001      	str	r0, [sp, #4]
 800120a:	9100      	str	r1, [sp, #0]
 800120c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800120e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8001210:	9910      	ldr	r1, [sp, #64]	; 0x40
 8001212:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8001214:	9409      	str	r4, [sp, #36]	; 0x24
 8001216:	9608      	str	r6, [sp, #32]
 8001218:	9507      	str	r5, [sp, #28]
 800121a:	9706      	str	r7, [sp, #24]
 800121c:	f8cd a014 	str.w	sl, [sp, #20]
 8001220:	f8cd 9010 	str.w	r9, [sp, #16]
 8001224:	f7ff fdf2 	bl	8000e0c <ai_conv2d_kernel_depthwise_f32>
 8001228:	b011      	add	sp, #68	; 0x44
 800122a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800122e:	9303      	str	r3, [sp, #12]
 8001230:	9202      	str	r2, [sp, #8]
 8001232:	9001      	str	r0, [sp, #4]
 8001234:	9100      	str	r1, [sp, #0]
 8001236:	f8cd e020 	str.w	lr, [sp, #32]
 800123a:	f8cd c010 	str.w	ip, [sp, #16]
 800123e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001240:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8001242:	9910      	ldr	r1, [sp, #64]	; 0x40
 8001244:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8001246:	940c      	str	r4, [sp, #48]	; 0x30
 8001248:	960b      	str	r6, [sp, #44]	; 0x2c
 800124a:	950a      	str	r5, [sp, #40]	; 0x28
 800124c:	9709      	str	r7, [sp, #36]	; 0x24
 800124e:	f8cd a01c 	str.w	sl, [sp, #28]
 8001252:	f8cd 9018 	str.w	r9, [sp, #24]
 8001256:	f8cd 8014 	str.w	r8, [sp, #20]
 800125a:	f7ff feab 	bl	8000fb4 <ai_conv2d_kernel_group_f32>
 800125e:	b011      	add	sp, #68	; 0x44
 8001260:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001264 <ai_conv2d_stripe_f32>:
 8001264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001268:	b091      	sub	sp, #68	; 0x44
 800126a:	4604      	mov	r4, r0
 800126c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8001270:	9d1e      	ldr	r5, [sp, #120]	; 0x78
 8001272:	f8dd b094 	ldr.w	fp, [sp, #148]	; 0x94
 8001276:	9826      	ldr	r0, [sp, #152]	; 0x98
 8001278:	fb08 b000 	mla	r0, r8, r0, fp
 800127c:	2d00      	cmp	r5, #0
 800127e:	9001      	str	r0, [sp, #4]
 8001280:	d05d      	beq.n	800133e <ai_conv2d_stripe_f32+0xda>
 8001282:	9102      	str	r1, [sp, #8]
 8001284:	920e      	str	r2, [sp, #56]	; 0x38
 8001286:	9500      	str	r5, [sp, #0]
 8001288:	930d      	str	r3, [sp, #52]	; 0x34
 800128a:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800128c:	9e24      	ldr	r6, [sp, #144]	; 0x90
 800128e:	971a      	str	r7, [sp, #104]	; 0x68
 8001290:	4625      	mov	r5, r4
 8001292:	950f      	str	r5, [sp, #60]	; 0x3c
 8001294:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8001296:	9c20      	ldr	r4, [sp, #128]	; 0x80
 8001298:	f8dd c088 	ldr.w	ip, [sp, #136]	; 0x88
 800129c:	f8dd e08c 	ldr.w	lr, [sp, #140]	; 0x8c
 80012a0:	9821      	ldr	r0, [sp, #132]	; 0x84
 80012a2:	f8dd 906c 	ldr.w	r9, [sp, #108]	; 0x6c
 80012a6:	f9bd 10a0 	ldrsh.w	r1, [sp, #160]	; 0xa0
 80012aa:	f9bd 20a4 	ldrsh.w	r2, [sp, #164]	; 0xa4
 80012ae:	9d02      	ldr	r5, [sp, #8]
 80012b0:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 80012b2:	931f      	str	r3, [sp, #124]	; 0x7c
 80012b4:	9420      	str	r4, [sp, #128]	; 0x80
 80012b6:	f8cd c088 	str.w	ip, [sp, #136]	; 0x88
 80012ba:	f8cd e08c 	str.w	lr, [sp, #140]	; 0x8c
 80012be:	9624      	str	r6, [sp, #144]	; 0x90
 80012c0:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 80012c2:	f8dd a004 	ldr.w	sl, [sp, #4]
 80012c6:	9c00      	ldr	r4, [sp, #0]
 80012c8:	f8ad 10a0 	strh.w	r1, [sp, #160]	; 0xa0
 80012cc:	f8ad 20a4 	strh.w	r2, [sp, #164]	; 0xa4
 80012d0:	f8ad 0084 	strh.w	r0, [sp, #132]	; 0x84
 80012d4:	f1db 0000 	rsbs	r0, fp, #0
 80012d8:	bfd8      	it	le
 80012da:	2000      	movle	r0, #0
 80012dc:	eba8 010b 	sub.w	r1, r8, fp
 80012e0:	42b1      	cmp	r1, r6
 80012e2:	bf28      	it	cs
 80012e4:	4631      	movcs	r1, r6
 80012e6:	910c      	str	r1, [sp, #48]	; 0x30
 80012e8:	900b      	str	r0, [sp, #44]	; 0x2c
 80012ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80012ee:	9702      	str	r7, [sp, #8]
 80012f0:	f8cd 9004 	str.w	r9, [sp, #4]
 80012f4:	4450      	add	r0, sl
 80012f6:	9924      	ldr	r1, [sp, #144]	; 0x90
 80012f8:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80012fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80012fc:	910a      	str	r1, [sp, #40]	; 0x28
 80012fe:	9209      	str	r2, [sp, #36]	; 0x24
 8001300:	fb00 f009 	mul.w	r0, r0, r9
 8001304:	9922      	ldr	r1, [sp, #136]	; 0x88
 8001306:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8001308:	9108      	str	r1, [sp, #32]
 800130a:	9207      	str	r2, [sp, #28]
 800130c:	991f      	ldr	r1, [sp, #124]	; 0x7c
 800130e:	f9bd 20a4 	ldrsh.w	r2, [sp, #164]	; 0xa4
 8001312:	9106      	str	r1, [sp, #24]
 8001314:	9205      	str	r2, [sp, #20]
 8001316:	f9bd 10a0 	ldrsh.w	r1, [sp, #160]	; 0xa0
 800131a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800131c:	9104      	str	r1, [sp, #16]
 800131e:	9200      	str	r2, [sp, #0]
 8001320:	990e      	ldr	r1, [sp, #56]	; 0x38
 8001322:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 8001326:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8001328:	4629      	mov	r1, r5
 800132a:	f7ff ff2b 	bl	8001184 <ai_conv2d_kernel_f32>
 800132e:	f8bd 0084 	ldrh.w	r0, [sp, #132]	; 0x84
 8001332:	1e64      	subs	r4, r4, #1
 8001334:	eb05 0587 	add.w	r5, r5, r7, lsl #2
 8001338:	4483      	add	fp, r0
 800133a:	4482      	add	sl, r0
 800133c:	d1ca      	bne.n	80012d4 <ai_conv2d_stripe_f32+0x70>
 800133e:	b011      	add	sp, #68	; 0x44
 8001340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001344 <func_dummy>:
 8001344:	4770      	bx	lr
	...

08001348 <ai_dict8_dot_array_f32>:
 8001348:	b4f0      	push	{r4, r5, r6, r7}
 800134a:	4604      	mov	r4, r0
 800134c:	9804      	ldr	r0, [sp, #16]
 800134e:	eb03 0580 	add.w	r5, r3, r0, lsl #2
 8001352:	3d20      	subs	r5, #32
 8001354:	2808      	cmp	r0, #8
 8001356:	ed9f 0ad9 	vldr	s0, [pc, #868]	; 80016bc <.text_12>
 800135a:	d22f      	bcs.n	80013bc <ai_dict8_dot_array_f32+0x74>
 800135c:	3520      	adds	r5, #32
 800135e:	42ab      	cmp	r3, r5
 8001360:	d224      	bcs.n	80013ac <ai_dict8_dot_array_f32+0x64>
 8001362:	7808      	ldrb	r0, [r1, #0]
 8001364:	ed93 1a00 	vldr	s2, [r3]
 8001368:	eb02 0680 	add.w	r6, r2, r0, lsl #2
 800136c:	1d18      	adds	r0, r3, #4
 800136e:	edd6 0a00 	vldr	s1, [r6]
 8001372:	42a8      	cmp	r0, r5
 8001374:	ee00 0a81 	vmla.f32	s0, s1, s2
 8001378:	d218      	bcs.n	80013ac <ai_dict8_dot_array_f32+0x64>
 800137a:	784b      	ldrb	r3, [r1, #1]
 800137c:	ed90 1a00 	vldr	s2, [r0]
 8001380:	eb02 0683 	add.w	r6, r2, r3, lsl #2
 8001384:	1d00      	adds	r0, r0, #4
 8001386:	edd6 0a00 	vldr	s1, [r6]
 800138a:	42a8      	cmp	r0, r5
 800138c:	ee00 0a81 	vmla.f32	s0, s1, s2
 8001390:	d20c      	bcs.n	80013ac <ai_dict8_dot_array_f32+0x64>
 8001392:	788b      	ldrb	r3, [r1, #2]
 8001394:	ed90 1a00 	vldr	s2, [r0]
 8001398:	eb02 0683 	add.w	r6, r2, r3, lsl #2
 800139c:	1d03      	adds	r3, r0, #4
 800139e:	1cc9      	adds	r1, r1, #3
 80013a0:	edd6 0a00 	vldr	s1, [r6]
 80013a4:	42ab      	cmp	r3, r5
 80013a6:	ee00 0a81 	vmla.f32	s0, s1, s2
 80013aa:	d3da      	bcc.n	8001362 <ai_dict8_dot_array_f32+0x1a>
 80013ac:	edd4 0a00 	vldr	s1, [r4]
 80013b0:	ee30 0a80 	vadd.f32	s0, s1, s0
 80013b4:	ed84 0a00 	vstr	s0, [r4]
 80013b8:	bcf0      	pop	{r4, r5, r6, r7}
 80013ba:	4770      	bx	lr
 80013bc:	f001 0003 	and.w	r0, r1, #3
 80013c0:	2803      	cmp	r0, #3
 80013c2:	d8f3      	bhi.n	80013ac <ai_dict8_dot_array_f32+0x64>
 80013c4:	e8df f000 	tbb	[pc, r0]
 80013c8:	4c413603 	.word	0x4c413603
 80013cc:	e7ee      	b.n	80013ac <ai_dict8_dot_array_f32+0x64>
 80013ce:	429d      	cmp	r5, r3
 80013d0:	f080 80d5 	bcs.w	800157e <ai_dict8_dot_array_f32+0x236>
 80013d4:	3520      	adds	r5, #32
 80013d6:	42ab      	cmp	r3, r5
 80013d8:	d2e8      	bcs.n	80013ac <ai_dict8_dot_array_f32+0x64>
 80013da:	7808      	ldrb	r0, [r1, #0]
 80013dc:	ed93 1a00 	vldr	s2, [r3]
 80013e0:	eb02 0680 	add.w	r6, r2, r0, lsl #2
 80013e4:	1d18      	adds	r0, r3, #4
 80013e6:	edd6 0a00 	vldr	s1, [r6]
 80013ea:	42a8      	cmp	r0, r5
 80013ec:	ee00 0a81 	vmla.f32	s0, s1, s2
 80013f0:	d2dc      	bcs.n	80013ac <ai_dict8_dot_array_f32+0x64>
 80013f2:	784b      	ldrb	r3, [r1, #1]
 80013f4:	ed90 1a00 	vldr	s2, [r0]
 80013f8:	eb02 0683 	add.w	r6, r2, r3, lsl #2
 80013fc:	1d00      	adds	r0, r0, #4
 80013fe:	edd6 0a00 	vldr	s1, [r6]
 8001402:	42a8      	cmp	r0, r5
 8001404:	ee00 0a81 	vmla.f32	s0, s1, s2
 8001408:	d2d0      	bcs.n	80013ac <ai_dict8_dot_array_f32+0x64>
 800140a:	788b      	ldrb	r3, [r1, #2]
 800140c:	ed90 1a00 	vldr	s2, [r0]
 8001410:	eb02 0683 	add.w	r6, r2, r3, lsl #2
 8001414:	1d03      	adds	r3, r0, #4
 8001416:	1cc9      	adds	r1, r1, #3
 8001418:	edd6 0a00 	vldr	s1, [r6]
 800141c:	42ab      	cmp	r3, r5
 800141e:	ee00 0a81 	vmla.f32	s0, s1, s2
 8001422:	d3da      	bcc.n	80013da <ai_dict8_dot_array_f32+0x92>
 8001424:	edd4 0a00 	vldr	s1, [r4]
 8001428:	ee30 0a80 	vadd.f32	s0, s1, s0
 800142c:	ed84 0a00 	vstr	s0, [r4]
 8001430:	bcf0      	pop	{r4, r5, r6, r7}
 8001432:	4770      	bx	lr
 8001434:	f811 0b01 	ldrb.w	r0, [r1], #1
 8001438:	ed93 1a00 	vldr	s2, [r3]
 800143c:	eb02 0680 	add.w	r6, r2, r0, lsl #2
 8001440:	1d1b      	adds	r3, r3, #4
 8001442:	edd6 0a00 	vldr	s1, [r6]
 8001446:	ee00 0a81 	vmla.f32	s0, s1, s2
 800144a:	f811 0b01 	ldrb.w	r0, [r1], #1
 800144e:	ed93 1a00 	vldr	s2, [r3]
 8001452:	eb02 0680 	add.w	r6, r2, r0, lsl #2
 8001456:	1d1b      	adds	r3, r3, #4
 8001458:	edd6 0a00 	vldr	s1, [r6]
 800145c:	ee00 0a81 	vmla.f32	s0, s1, s2
 8001460:	f811 0b01 	ldrb.w	r0, [r1], #1
 8001464:	ed93 1a00 	vldr	s2, [r3]
 8001468:	eb02 0680 	add.w	r6, r2, r0, lsl #2
 800146c:	1d1b      	adds	r3, r3, #4
 800146e:	edd6 0a00 	vldr	s1, [r6]
 8001472:	429d      	cmp	r5, r3
 8001474:	ee00 0a81 	vmla.f32	s0, s1, s2
 8001478:	d34e      	bcc.n	8001518 <ai_dict8_dot_array_f32+0x1d0>
 800147a:	78cf      	ldrb	r7, [r1, #3]
 800147c:	ed93 4a00 	vldr	s8, [r3]
 8001480:	ed93 3a01 	vldr	s6, [r3, #4]
 8001484:	ed93 2a02 	vldr	s4, [r3, #8]
 8001488:	ed93 1a03 	vldr	s2, [r3, #12]
 800148c:	eb02 0687 	add.w	r6, r2, r7, lsl #2
 8001490:	788f      	ldrb	r7, [r1, #2]
 8001492:	edd6 0a00 	vldr	s1, [r6]
 8001496:	eb02 0687 	add.w	r6, r2, r7, lsl #2
 800149a:	784f      	ldrb	r7, [r1, #1]
 800149c:	edd6 1a00 	vldr	s3, [r6]
 80014a0:	eb02 0687 	add.w	r6, r2, r7, lsl #2
 80014a4:	780f      	ldrb	r7, [r1, #0]
 80014a6:	edd6 2a00 	vldr	s5, [r6]
 80014aa:	eb02 0687 	add.w	r6, r2, r7, lsl #2
 80014ae:	f103 0010 	add.w	r0, r3, #16
 80014b2:	edd6 3a00 	vldr	s7, [r6]
 80014b6:	790b      	ldrb	r3, [r1, #4]
 80014b8:	ee03 0a84 	vmla.f32	s0, s7, s8
 80014bc:	ee02 0a83 	vmla.f32	s0, s5, s6
 80014c0:	ee01 0a82 	vmla.f32	s0, s3, s4
 80014c4:	eb02 0783 	add.w	r7, r2, r3, lsl #2
 80014c8:	ee00 0a81 	vmla.f32	s0, s1, s2
 80014cc:	794b      	ldrb	r3, [r1, #5]
 80014ce:	edd7 0a00 	vldr	s1, [r7]
 80014d2:	ed90 4a00 	vldr	s8, [r0]
 80014d6:	edd0 3a01 	vldr	s7, [r0, #4]
 80014da:	ed90 3a02 	vldr	s6, [r0, #8]
 80014de:	edd0 2a03 	vldr	s5, [r0, #12]
 80014e2:	eb02 0783 	add.w	r7, r2, r3, lsl #2
 80014e6:	798b      	ldrb	r3, [r1, #6]
 80014e8:	ed97 1a00 	vldr	s2, [r7]
 80014ec:	eb02 0783 	add.w	r7, r2, r3, lsl #2
 80014f0:	79cb      	ldrb	r3, [r1, #7]
 80014f2:	edd7 1a00 	vldr	s3, [r7]
 80014f6:	eb02 0783 	add.w	r7, r2, r3, lsl #2
 80014fa:	ee00 0a84 	vmla.f32	s0, s1, s8
 80014fe:	3108      	adds	r1, #8
 8001500:	f100 0310 	add.w	r3, r0, #16
 8001504:	ee01 0a23 	vmla.f32	s0, s2, s7
 8001508:	ed97 2a00 	vldr	s4, [r7]
 800150c:	ee01 0a83 	vmla.f32	s0, s3, s6
 8001510:	429d      	cmp	r5, r3
 8001512:	ee02 0a22 	vmla.f32	s0, s4, s5
 8001516:	d2b0      	bcs.n	800147a <ai_dict8_dot_array_f32+0x132>
 8001518:	3520      	adds	r5, #32
 800151a:	42ab      	cmp	r3, r5
 800151c:	f4bf af46 	bcs.w	80013ac <ai_dict8_dot_array_f32+0x64>
 8001520:	7808      	ldrb	r0, [r1, #0]
 8001522:	ed93 1a00 	vldr	s2, [r3]
 8001526:	eb02 0680 	add.w	r6, r2, r0, lsl #2
 800152a:	1d18      	adds	r0, r3, #4
 800152c:	edd6 0a00 	vldr	s1, [r6]
 8001530:	42a8      	cmp	r0, r5
 8001532:	ee00 0a81 	vmla.f32	s0, s1, s2
 8001536:	f4bf af39 	bcs.w	80013ac <ai_dict8_dot_array_f32+0x64>
 800153a:	784b      	ldrb	r3, [r1, #1]
 800153c:	ed90 1a00 	vldr	s2, [r0]
 8001540:	eb02 0683 	add.w	r6, r2, r3, lsl #2
 8001544:	1d00      	adds	r0, r0, #4
 8001546:	edd6 0a00 	vldr	s1, [r6]
 800154a:	42a8      	cmp	r0, r5
 800154c:	ee00 0a81 	vmla.f32	s0, s1, s2
 8001550:	f4bf af2c 	bcs.w	80013ac <ai_dict8_dot_array_f32+0x64>
 8001554:	788b      	ldrb	r3, [r1, #2]
 8001556:	ed90 1a00 	vldr	s2, [r0]
 800155a:	eb02 0683 	add.w	r6, r2, r3, lsl #2
 800155e:	1d03      	adds	r3, r0, #4
 8001560:	1cc9      	adds	r1, r1, #3
 8001562:	edd6 0a00 	vldr	s1, [r6]
 8001566:	42ab      	cmp	r3, r5
 8001568:	ee00 0a81 	vmla.f32	s0, s1, s2
 800156c:	d3d8      	bcc.n	8001520 <ai_dict8_dot_array_f32+0x1d8>
 800156e:	edd4 0a00 	vldr	s1, [r4]
 8001572:	ee30 0a80 	vadd.f32	s0, s1, s0
 8001576:	ed84 0a00 	vstr	s0, [r4]
 800157a:	bcf0      	pop	{r4, r5, r6, r7}
 800157c:	4770      	bx	lr
 800157e:	78cf      	ldrb	r7, [r1, #3]
 8001580:	ed93 4a00 	vldr	s8, [r3]
 8001584:	ed93 3a01 	vldr	s6, [r3, #4]
 8001588:	ed93 2a02 	vldr	s4, [r3, #8]
 800158c:	ed93 1a03 	vldr	s2, [r3, #12]
 8001590:	eb02 0687 	add.w	r6, r2, r7, lsl #2
 8001594:	788f      	ldrb	r7, [r1, #2]
 8001596:	edd6 0a00 	vldr	s1, [r6]
 800159a:	eb02 0687 	add.w	r6, r2, r7, lsl #2
 800159e:	784f      	ldrb	r7, [r1, #1]
 80015a0:	edd6 1a00 	vldr	s3, [r6]
 80015a4:	eb02 0687 	add.w	r6, r2, r7, lsl #2
 80015a8:	780f      	ldrb	r7, [r1, #0]
 80015aa:	edd6 2a00 	vldr	s5, [r6]
 80015ae:	eb02 0687 	add.w	r6, r2, r7, lsl #2
 80015b2:	f103 0010 	add.w	r0, r3, #16
 80015b6:	edd6 3a00 	vldr	s7, [r6]
 80015ba:	790b      	ldrb	r3, [r1, #4]
 80015bc:	ee03 0a84 	vmla.f32	s0, s7, s8
 80015c0:	ee02 0a83 	vmla.f32	s0, s5, s6
 80015c4:	ee01 0a82 	vmla.f32	s0, s3, s4
 80015c8:	eb02 0783 	add.w	r7, r2, r3, lsl #2
 80015cc:	ee00 0a81 	vmla.f32	s0, s1, s2
 80015d0:	794b      	ldrb	r3, [r1, #5]
 80015d2:	edd7 0a00 	vldr	s1, [r7]
 80015d6:	ed90 4a00 	vldr	s8, [r0]
 80015da:	edd0 3a01 	vldr	s7, [r0, #4]
 80015de:	ed90 3a02 	vldr	s6, [r0, #8]
 80015e2:	edd0 2a03 	vldr	s5, [r0, #12]
 80015e6:	eb02 0783 	add.w	r7, r2, r3, lsl #2
 80015ea:	798b      	ldrb	r3, [r1, #6]
 80015ec:	ed97 1a00 	vldr	s2, [r7]
 80015f0:	eb02 0783 	add.w	r7, r2, r3, lsl #2
 80015f4:	79cb      	ldrb	r3, [r1, #7]
 80015f6:	edd7 1a00 	vldr	s3, [r7]
 80015fa:	eb02 0783 	add.w	r7, r2, r3, lsl #2
 80015fe:	ee00 0a84 	vmla.f32	s0, s1, s8
 8001602:	3108      	adds	r1, #8
 8001604:	f100 0310 	add.w	r3, r0, #16
 8001608:	ee01 0a23 	vmla.f32	s0, s2, s7
 800160c:	ed97 2a00 	vldr	s4, [r7]
 8001610:	ee01 0a83 	vmla.f32	s0, s3, s6
 8001614:	429d      	cmp	r5, r3
 8001616:	ee02 0a22 	vmla.f32	s0, s4, s5
 800161a:	d2b0      	bcs.n	800157e <ai_dict8_dot_array_f32+0x236>
 800161c:	e6da      	b.n	80013d4 <ai_dict8_dot_array_f32+0x8c>
	...

08001620 <ai_dict4_dot_array_f32>:
 8001620:	b4f0      	push	{r4, r5, r6, r7}
 8001622:	9c04      	ldr	r4, [sp, #16]
 8001624:	0865      	lsrs	r5, r4, #1
 8001626:	006d      	lsls	r5, r5, #1
 8001628:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800162c:	42ab      	cmp	r3, r5
 800162e:	ed9f 0a23 	vldr	s0, [pc, #140]	; 80016bc <.text_12>
 8001632:	d22f      	bcs.n	8001694 <ai_dict4_dot_array_f32+0x74>
 8001634:	f811 6b01 	ldrb.w	r6, [r1], #1
 8001638:	ed93 2a00 	vldr	s4, [r3]
 800163c:	ed93 1a01 	vldr	s2, [r3, #4]
 8001640:	f006 070f 	and.w	r7, r6, #15
 8001644:	0936      	lsrs	r6, r6, #4
 8001646:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800164a:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800164e:	edd6 1a00 	vldr	s3, [r6]
 8001652:	edd7 0a00 	vldr	s1, [r7]
 8001656:	3308      	adds	r3, #8
 8001658:	ee01 0a82 	vmla.f32	s0, s3, s4
 800165c:	42ab      	cmp	r3, r5
 800165e:	ee00 0a81 	vmla.f32	s0, s1, s2
 8001662:	d217      	bcs.n	8001694 <ai_dict4_dot_array_f32+0x74>
 8001664:	f811 6b01 	ldrb.w	r6, [r1], #1
 8001668:	ed93 2a00 	vldr	s4, [r3]
 800166c:	ed93 1a01 	vldr	s2, [r3, #4]
 8001670:	f006 070f 	and.w	r7, r6, #15
 8001674:	0936      	lsrs	r6, r6, #4
 8001676:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800167a:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800167e:	edd6 1a00 	vldr	s3, [r6]
 8001682:	edd7 0a00 	vldr	s1, [r7]
 8001686:	3308      	adds	r3, #8
 8001688:	ee01 0a82 	vmla.f32	s0, s3, s4
 800168c:	42ab      	cmp	r3, r5
 800168e:	ee00 0a81 	vmla.f32	s0, s1, s2
 8001692:	d3cf      	bcc.n	8001634 <ai_dict4_dot_array_f32+0x14>
 8001694:	07e4      	lsls	r4, r4, #31
 8001696:	d509      	bpl.n	80016ac <ai_dict4_dot_array_f32+0x8c>
 8001698:	7809      	ldrb	r1, [r1, #0]
 800169a:	ed93 1a00 	vldr	s2, [r3]
 800169e:	0909      	lsrs	r1, r1, #4
 80016a0:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80016a4:	edd2 0a00 	vldr	s1, [r2]
 80016a8:	ee00 0a81 	vmla.f32	s0, s1, s2
 80016ac:	edd0 1a00 	vldr	s3, [r0]
 80016b0:	ee31 0a80 	vadd.f32	s0, s3, s0
 80016b4:	ed80 0a00 	vstr	s0, [r0]
 80016b8:	bcf0      	pop	{r4, r5, r6, r7}
 80016ba:	4770      	bx	lr

080016bc <.text_12>:
 80016bc:	00000000 	.word	0x00000000

080016c0 <ai_dict_decompress_f32>:
 80016c0:	b4f0      	push	{r4, r5, r6, r7}
 80016c2:	4604      	mov	r4, r0
 80016c4:	9805      	ldr	r0, [sp, #20]
 80016c6:	9e04      	ldr	r6, [sp, #16]
 80016c8:	2b04      	cmp	r3, #4
 80016ca:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 80016ce:	d003      	beq.n	80016d8 <ai_dict_decompress_f32+0x18>
 80016d0:	2b08      	cmp	r3, #8
 80016d2:	d03e      	beq.n	8001752 <ai_dict_decompress_f32+0x92>
 80016d4:	bcf0      	pop	{r4, r5, r6, r7}
 80016d6:	4770      	bx	lr
 80016d8:	42ac      	cmp	r4, r5
 80016da:	d259      	bcs.n	8001790 <ai_dict_decompress_f32+0xd0>
 80016dc:	0870      	lsrs	r0, r6, #1
 80016de:	d02e      	beq.n	800173e <ai_dict_decompress_f32+0x7e>
 80016e0:	07c3      	lsls	r3, r0, #31
 80016e2:	d50c      	bpl.n	80016fe <ai_dict_decompress_f32+0x3e>
 80016e4:	780f      	ldrb	r7, [r1, #0]
 80016e6:	093f      	lsrs	r7, r7, #4
 80016e8:	f852 3027 	ldr.w	r3, [r2, r7, lsl #2]
 80016ec:	6023      	str	r3, [r4, #0]
 80016ee:	f811 7b01 	ldrb.w	r7, [r1], #1
 80016f2:	f007 070f 	and.w	r7, r7, #15
 80016f6:	f852 3027 	ldr.w	r3, [r2, r7, lsl #2]
 80016fa:	6063      	str	r3, [r4, #4]
 80016fc:	3408      	adds	r4, #8
 80016fe:	0840      	lsrs	r0, r0, #1
 8001700:	d01d      	beq.n	800173e <ai_dict_decompress_f32+0x7e>
 8001702:	780b      	ldrb	r3, [r1, #0]
 8001704:	091b      	lsrs	r3, r3, #4
 8001706:	f852 7023 	ldr.w	r7, [r2, r3, lsl #2]
 800170a:	6027      	str	r7, [r4, #0]
 800170c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001710:	f003 030f 	and.w	r3, r3, #15
 8001714:	f852 7023 	ldr.w	r7, [r2, r3, lsl #2]
 8001718:	6067      	str	r7, [r4, #4]
 800171a:	f104 0308 	add.w	r3, r4, #8
 800171e:	780c      	ldrb	r4, [r1, #0]
 8001720:	0924      	lsrs	r4, r4, #4
 8001722:	f852 7024 	ldr.w	r7, [r2, r4, lsl #2]
 8001726:	601f      	str	r7, [r3, #0]
 8001728:	1e40      	subs	r0, r0, #1
 800172a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800172e:	f004 040f 	and.w	r4, r4, #15
 8001732:	f852 7024 	ldr.w	r7, [r2, r4, lsl #2]
 8001736:	605f      	str	r7, [r3, #4]
 8001738:	f103 0408 	add.w	r4, r3, #8
 800173c:	d1e1      	bne.n	8001702 <ai_dict_decompress_f32+0x42>
 800173e:	07f0      	lsls	r0, r6, #31
 8001740:	d5ca      	bpl.n	80016d8 <ai_dict_decompress_f32+0x18>
 8001742:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001746:	091b      	lsrs	r3, r3, #4
 8001748:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800174c:	f844 0b04 	str.w	r0, [r4], #4
 8001750:	e7c2      	b.n	80016d8 <ai_dict_decompress_f32+0x18>
 8001752:	42ac      	cmp	r4, r5
 8001754:	d21c      	bcs.n	8001790 <ai_dict_decompress_f32+0xd0>
 8001756:	780b      	ldrb	r3, [r1, #0]
 8001758:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800175c:	6020      	str	r0, [r4, #0]
 800175e:	1d20      	adds	r0, r4, #4
 8001760:	42a8      	cmp	r0, r5
 8001762:	bf3f      	itttt	cc
 8001764:	784b      	ldrbcc	r3, [r1, #1]
 8001766:	f852 4023 	ldrcc.w	r4, [r2, r3, lsl #2]
 800176a:	f840 4b04 	strcc.w	r4, [r0], #4
 800176e:	42a8      	cmpcc	r0, r5
 8001770:	d20e      	bcs.n	8001790 <ai_dict_decompress_f32+0xd0>
 8001772:	788b      	ldrb	r3, [r1, #2]
 8001774:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8001778:	f840 4b04 	str.w	r4, [r0], #4
 800177c:	42a8      	cmp	r0, r5
 800177e:	d207      	bcs.n	8001790 <ai_dict_decompress_f32+0xd0>
 8001780:	78cb      	ldrb	r3, [r1, #3]
 8001782:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8001786:	6004      	str	r4, [r0, #0]
 8001788:	1d09      	adds	r1, r1, #4
 800178a:	1d04      	adds	r4, r0, #4
 800178c:	42ac      	cmp	r4, r5
 800178e:	d3e2      	bcc.n	8001756 <ai_dict_decompress_f32+0x96>
 8001790:	bcf0      	pop	{r4, r5, r6, r7}
 8001792:	4770      	bx	lr

08001794 <forward_conv2d>:
 8001794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001798:	4605      	mov	r5, r0
 800179a:	b0a7      	sub	sp, #156	; 0x9c
 800179c:	6968      	ldr	r0, [r5, #20]
 800179e:	6800      	ldr	r0, [r0, #0]
 80017a0:	68c2      	ldr	r2, [r0, #12]
 80017a2:	6813      	ldr	r3, [r2, #0]
 80017a4:	6801      	ldr	r1, [r0, #0]
 80017a6:	6982      	ldr	r2, [r0, #24]
 80017a8:	8c00      	ldrh	r0, [r0, #32]
 80017aa:	680c      	ldr	r4, [r1, #0]
 80017ac:	f8d2 b000 	ldr.w	fp, [r2]
 80017b0:	2801      	cmp	r0, #1
 80017b2:	6890      	ldr	r0, [r2, #8]
 80017b4:	bfcc      	ite	gt
 80017b6:	6851      	ldrgt	r1, [r2, #4]
 80017b8:	2100      	movle	r1, #0
 80017ba:	68a2      	ldr	r2, [r4, #8]
 80017bc:	921b      	str	r2, [sp, #108]	; 0x6c
 80017be:	689e      	ldr	r6, [r3, #8]
 80017c0:	9603      	str	r6, [sp, #12]
 80017c2:	f8d3 a010 	ldr.w	sl, [r3, #16]
 80017c6:	68da      	ldr	r2, [r3, #12]
 80017c8:	9215      	str	r2, [sp, #84]	; 0x54
 80017ca:	6926      	ldr	r6, [r4, #16]
 80017cc:	961a      	str	r6, [sp, #104]	; 0x68
 80017ce:	68e7      	ldr	r7, [r4, #12]
 80017d0:	9721      	str	r7, [sp, #132]	; 0x84
 80017d2:	6a6e      	ldr	r6, [r5, #36]	; 0x24
 80017d4:	f8ad 6040 	strh.w	r6, [sp, #64]	; 0x40
 80017d8:	8d2f      	ldrh	r7, [r5, #40]	; 0x28
 80017da:	9720      	str	r7, [sp, #128]	; 0x80
 80017dc:	6baa      	ldr	r2, [r5, #56]	; 0x38
 80017de:	6817      	ldr	r7, [r2, #0]
 80017e0:	f8b2 8004 	ldrh.w	r8, [r2, #4]
 80017e4:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80017e6:	9219      	str	r2, [sp, #100]	; 0x64
 80017e8:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 80017ea:	9618      	str	r6, [sp, #96]	; 0x60
 80017ec:	f8db 200c 	ldr.w	r2, [fp, #12]
 80017f0:	9214      	str	r2, [sp, #80]	; 0x50
 80017f2:	f8db 6008 	ldr.w	r6, [fp, #8]
 80017f6:	9613      	str	r6, [sp, #76]	; 0x4c
 80017f8:	69aa      	ldr	r2, [r5, #24]
 80017fa:	921f      	str	r2, [sp, #124]	; 0x7c
 80017fc:	6822      	ldr	r2, [r4, #0]
 80017fe:	6894      	ldr	r4, [r2, #8]
 8001800:	941e      	str	r4, [sp, #120]	; 0x78
 8001802:	f8db 2000 	ldr.w	r2, [fp]
 8001806:	f8d2 9008 	ldr.w	r9, [r2, #8]
 800180a:	b119      	cbz	r1, 8001814 <forward_conv2d+0x80>
 800180c:	680a      	ldr	r2, [r1, #0]
 800180e:	6894      	ldr	r4, [r2, #8]
 8001810:	9417      	str	r4, [sp, #92]	; 0x5c
 8001812:	e001      	b.n	8001818 <forward_conv2d+0x84>
 8001814:	2200      	movs	r2, #0
 8001816:	9217      	str	r2, [sp, #92]	; 0x5c
 8001818:	6819      	ldr	r1, [r3, #0]
 800181a:	688a      	ldr	r2, [r1, #8]
 800181c:	9202      	str	r2, [sp, #8]
 800181e:	69e9      	ldr	r1, [r5, #28]
 8001820:	b158      	cbz	r0, 800183a <forward_conv2d+0xa6>
 8001822:	6803      	ldr	r3, [r0, #0]
 8001824:	689a      	ldr	r2, [r3, #8]
 8001826:	9212      	str	r2, [sp, #72]	; 0x48
 8001828:	921c      	str	r2, [sp, #112]	; 0x70
 800182a:	69c0      	ldr	r0, [r0, #28]
 800182c:	9024      	str	r0, [sp, #144]	; 0x90
 800182e:	6859      	ldr	r1, [r3, #4]
 8001830:	6818      	ldr	r0, [r3, #0]
 8001832:	f001 ff65 	bl	8003700 <ai_array_get_byte_size>
 8001836:	4604      	mov	r4, r0
 8001838:	e00a      	b.n	8001850 <forward_conv2d+0xbc>
 800183a:	b119      	cbz	r1, 8001844 <forward_conv2d+0xb0>
 800183c:	6888      	ldr	r0, [r1, #8]
 800183e:	9012      	str	r0, [sp, #72]	; 0x48
 8001840:	901c      	str	r0, [sp, #112]	; 0x70
 8001842:	e002      	b.n	800184a <forward_conv2d+0xb6>
 8001844:	2200      	movs	r2, #0
 8001846:	9212      	str	r2, [sp, #72]	; 0x48
 8001848:	911c      	str	r1, [sp, #112]	; 0x70
 800184a:	2200      	movs	r2, #0
 800184c:	9224      	str	r2, [sp, #144]	; 0x90
 800184e:	2401      	movs	r4, #1
 8001850:	6a28      	ldr	r0, [r5, #32]
 8001852:	2800      	cmp	r0, #0
 8001854:	aa18      	add	r2, sp, #96	; 0x60
 8001856:	bf12      	itee	ne
 8001858:	9023      	strne	r0, [sp, #140]	; 0x8c
 800185a:	f8df 1b88 	ldreq.w	r1, [pc, #2952]	; 80023e4 <.text_22>
 800185e:	9123      	streq	r1, [sp, #140]	; 0x8c
 8001860:	9914      	ldr	r1, [sp, #80]	; 0x50
 8001862:	8813      	ldrh	r3, [r2, #0]
 8001864:	1e48      	subs	r0, r1, #1
 8001866:	1e5b      	subs	r3, r3, #1
 8001868:	aa19      	add	r2, sp, #100	; 0x64
 800186a:	fb03 1100 	mla	r1, r3, r0, r1
 800186e:	9116      	str	r1, [sp, #88]	; 0x58
 8001870:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8001872:	8813      	ldrh	r3, [r2, #0]
 8001874:	1e41      	subs	r1, r0, #1
 8001876:	1e5b      	subs	r3, r3, #1
 8001878:	fb03 0001 	mla	r0, r3, r1, r0
 800187c:	901d      	str	r0, [sp, #116]	; 0x74
 800187e:	2600      	movs	r6, #0
 8001880:	f8db 1000 	ldr.w	r1, [fp]
 8001884:	6808      	ldr	r0, [r1, #0]
 8001886:	2200      	movs	r2, #0
 8001888:	11c3      	asrs	r3, r0, #7
 800188a:	ea4f 5c60 	mov.w	ip, r0, asr #21
 800188e:	1440      	asrs	r0, r0, #17
 8001890:	f000 000f 	and.w	r0, r0, #15
 8001894:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001898:	f00c 0c03 	and.w	ip, ip, #3
 800189c:	2804      	cmp	r0, #4
 800189e:	fa23 f30c 	lsr.w	r3, r3, ip
 80018a2:	bf14      	ite	ne
 80018a4:	2808      	cmpne	r0, #8
 80018a6:	68ca      	ldreq	r2, [r1, #12]
 80018a8:	b182      	cbz	r2, 80018cc <forward_conv2d+0x138>
 80018aa:	6968      	ldr	r0, [r5, #20]
 80018ac:	6800      	ldr	r0, [r0, #0]
 80018ae:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80018b0:	6828      	ldr	r0, [r5, #0]
 80018b2:	b108      	cbz	r0, 80018b8 <forward_conv2d+0x124>
 80018b4:	6806      	ldr	r6, [r0, #0]
 80018b6:	68b6      	ldr	r6, [r6, #8]
 80018b8:	6800      	ldr	r0, [r0, #0]
 80018ba:	6840      	ldr	r0, [r0, #4]
 80018bc:	9001      	str	r0, [sp, #4]
 80018be:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80018c0:	9000      	str	r0, [sp, #0]
 80018c2:	4630      	mov	r0, r6
 80018c4:	6889      	ldr	r1, [r1, #8]
 80018c6:	f7ff fefb 	bl	80016c0 <ai_dict_decompress_f32>
 80018ca:	b906      	cbnz	r6, 80018ce <forward_conv2d+0x13a>
 80018cc:	464e      	mov	r6, r9
 80018ce:	b2bf      	uxth	r7, r7
 80018d0:	427f      	negs	r7, r7
 80018d2:	f1ba 0f00 	cmp.w	sl, #0
 80018d6:	d065      	beq.n	80019a4 <forward_conv2d+0x210>
 80018d8:	f1c8 0800 	rsb	r8, r8, #0
 80018dc:	f8cd 8094 	str.w	r8, [sp, #148]	; 0x94
 80018e0:	4652      	mov	r2, sl
 80018e2:	9d02      	ldr	r5, [sp, #8]
 80018e4:	f8dd a00c 	ldr.w	sl, [sp, #12]
 80018e8:	9626      	str	r6, [sp, #152]	; 0x98
 80018ea:	9711      	str	r7, [sp, #68]	; 0x44
 80018ec:	9222      	str	r2, [sp, #136]	; 0x88
 80018ee:	9825      	ldr	r0, [sp, #148]	; 0x94
 80018f0:	9911      	ldr	r1, [sp, #68]	; 0x44
 80018f2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80018f4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80018f6:	9e16      	ldr	r6, [sp, #88]	; 0x58
 80018f8:	4249      	negs	r1, r1
 80018fa:	bfd8      	it	le
 80018fc:	2100      	movle	r1, #0
 80018fe:	1ad2      	subs	r2, r2, r3
 8001900:	42b2      	cmp	r2, r6
 8001902:	bf3d      	ittte	cc
 8001904:	9b1a      	ldrcc	r3, [sp, #104]	; 0x68
 8001906:	9a11      	ldrcc	r2, [sp, #68]	; 0x44
 8001908:	1a9a      	subcc	r2, r3, r2
 800190a:	4632      	movcs	r2, r6
 800190c:	900b      	str	r0, [sp, #44]	; 0x2c
 800190e:	9109      	str	r1, [sp, #36]	; 0x24
 8001910:	920a      	str	r2, [sp, #40]	; 0x28
 8001912:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8001914:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
 8001918:	9008      	str	r0, [sp, #32]
 800191a:	9107      	str	r1, [sp, #28]
 800191c:	f8cd a008 	str.w	sl, [sp, #8]
 8001920:	9814      	ldr	r0, [sp, #80]	; 0x50
 8001922:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8001924:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8001926:	9006      	str	r0, [sp, #24]
 8001928:	9105      	str	r1, [sp, #20]
 800192a:	b21b      	sxth	r3, r3
 800192c:	9815      	ldr	r0, [sp, #84]	; 0x54
 800192e:	9921      	ldr	r1, [sp, #132]	; 0x84
 8001930:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8001932:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8001934:	930f      	str	r3, [sp, #60]	; 0x3c
 8001936:	9004      	str	r0, [sp, #16]
 8001938:	9103      	str	r1, [sp, #12]
 800193a:	b236      	sxth	r6, r6
 800193c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800193e:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8001940:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8001942:	960e      	str	r6, [sp, #56]	; 0x38
 8001944:	930d      	str	r3, [sp, #52]	; 0x34
 8001946:	9001      	str	r0, [sp, #4]
 8001948:	9100      	str	r1, [sp, #0]
 800194a:	4629      	mov	r1, r5
 800194c:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800194e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8001950:	960c      	str	r6, [sp, #48]	; 0x30
 8001952:	2000      	movs	r0, #0
 8001954:	f7ff fc86 	bl	8001264 <ai_conv2d_stripe_f32>
 8001958:	9815      	ldr	r0, [sp, #84]	; 0x54
 800195a:	b1d8      	cbz	r0, 8001994 <forward_conv2d+0x200>
 800195c:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800195e:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 8001960:	f8dd 8090 	ldr.w	r8, [sp, #144]	; 0x90
 8001964:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8001968:	4683      	mov	fp, r0
 800196a:	4633      	mov	r3, r6
 800196c:	4652      	mov	r2, sl
 800196e:	4629      	mov	r1, r5
 8001970:	4628      	mov	r0, r5
 8001972:	47c8      	blx	r9
 8001974:	4446      	add	r6, r8
 8001976:	1bf0      	subs	r0, r6, r7
 8001978:	42a0      	cmp	r0, r4
 800197a:	bfa8      	it	ge
 800197c:	463e      	movge	r6, r7
 800197e:	f1bb 0b01 	subs.w	fp, fp, #1
 8001982:	eb05 058a 	add.w	r5, r5, sl, lsl #2
 8001986:	d1f0      	bne.n	800196a <forward_conv2d+0x1d6>
 8001988:	9612      	str	r6, [sp, #72]	; 0x48
 800198a:	971c      	str	r7, [sp, #112]	; 0x70
 800198c:	f8cd 8090 	str.w	r8, [sp, #144]	; 0x90
 8001990:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8001994:	9811      	ldr	r0, [sp, #68]	; 0x44
 8001996:	9920      	ldr	r1, [sp, #128]	; 0x80
 8001998:	1808      	adds	r0, r1, r0
 800199a:	9011      	str	r0, [sp, #68]	; 0x44
 800199c:	9822      	ldr	r0, [sp, #136]	; 0x88
 800199e:	1e40      	subs	r0, r0, #1
 80019a0:	9022      	str	r0, [sp, #136]	; 0x88
 80019a2:	d1a4      	bne.n	80018ee <forward_conv2d+0x15a>
 80019a4:	b027      	add	sp, #156	; 0x9c
 80019a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080019ac <forward_conv2d_nl_pool>:
 80019ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80019b0:	4607      	mov	r7, r0
 80019b2:	b0b9      	sub	sp, #228	; 0xe4
 80019b4:	6978      	ldr	r0, [r7, #20]
 80019b6:	6800      	ldr	r0, [r0, #0]
 80019b8:	68c2      	ldr	r2, [r0, #12]
 80019ba:	6816      	ldr	r6, [r2, #0]
 80019bc:	6801      	ldr	r1, [r0, #0]
 80019be:	6982      	ldr	r2, [r0, #24]
 80019c0:	8c00      	ldrh	r0, [r0, #32]
 80019c2:	680b      	ldr	r3, [r1, #0]
 80019c4:	f8d2 b000 	ldr.w	fp, [r2]
 80019c8:	689c      	ldr	r4, [r3, #8]
 80019ca:	2801      	cmp	r0, #1
 80019cc:	6890      	ldr	r0, [r2, #8]
 80019ce:	bfcc      	ite	gt
 80019d0:	6851      	ldrgt	r1, [r2, #4]
 80019d2:	2100      	movle	r1, #0
 80019d4:	9424      	str	r4, [sp, #144]	; 0x90
 80019d6:	68b5      	ldr	r5, [r6, #8]
 80019d8:	9502      	str	r5, [sp, #8]
 80019da:	6934      	ldr	r4, [r6, #16]
 80019dc:	9423      	str	r4, [sp, #140]	; 0x8c
 80019de:	68f5      	ldr	r5, [r6, #12]
 80019e0:	9522      	str	r5, [sp, #136]	; 0x88
 80019e2:	691c      	ldr	r4, [r3, #16]
 80019e4:	941c      	str	r4, [sp, #112]	; 0x70
 80019e6:	68dd      	ldr	r5, [r3, #12]
 80019e8:	952e      	str	r5, [sp, #184]	; 0xb8
 80019ea:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 80019ec:	f8ad 404c 	strh.w	r4, [sp, #76]	; 0x4c
 80019f0:	8d3d      	ldrh	r5, [r7, #40]	; 0x28
 80019f2:	9521      	str	r5, [sp, #132]	; 0x84
 80019f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80019f6:	69bd      	ldr	r5, [r7, #24]
 80019f8:	f8b2 8000 	ldrh.w	r8, [r2]
 80019fc:	f8b2 9004 	ldrh.w	r9, [r2, #4]
 8001a00:	6894      	ldr	r4, [r2, #8]
 8001a02:	952d      	str	r5, [sp, #180]	; 0xb4
 8001a04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a06:	9220      	str	r2, [sp, #128]	; 0x80
 8001a08:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 8001a0a:	951f      	str	r5, [sp, #124]	; 0x7c
 8001a0c:	f8db 2008 	ldr.w	r2, [fp, #8]
 8001a10:	921b      	str	r2, [sp, #108]	; 0x6c
 8001a12:	f8db 500c 	ldr.w	r5, [fp, #12]
 8001a16:	951a      	str	r5, [sp, #104]	; 0x68
 8001a18:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001a1a:	922c      	str	r2, [sp, #176]	; 0xb0
 8001a1c:	6c7d      	ldr	r5, [r7, #68]	; 0x44
 8001a1e:	952b      	str	r5, [sp, #172]	; 0xac
 8001a20:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001a22:	9216      	str	r2, [sp, #88]	; 0x58
 8001a24:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001a26:	6815      	ldr	r5, [r2, #0]
 8001a28:	f8d2 e004 	ldr.w	lr, [r2, #4]
 8001a2c:	f8cd e0a8 	str.w	lr, [sp, #168]	; 0xa8
 8001a30:	6892      	ldr	r2, [r2, #8]
 8001a32:	921e      	str	r2, [sp, #120]	; 0x78
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	6893      	ldr	r3, [r2, #8]
 8001a38:	9329      	str	r3, [sp, #164]	; 0xa4
 8001a3a:	f8db 2000 	ldr.w	r2, [fp]
 8001a3e:	f8d2 a008 	ldr.w	sl, [r2, #8]
 8001a42:	b119      	cbz	r1, 8001a4c <forward_conv2d_nl_pool+0xa0>
 8001a44:	680a      	ldr	r2, [r1, #0]
 8001a46:	6893      	ldr	r3, [r2, #8]
 8001a48:	931d      	str	r3, [sp, #116]	; 0x74
 8001a4a:	e001      	b.n	8001a50 <forward_conv2d_nl_pool+0xa4>
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	921d      	str	r2, [sp, #116]	; 0x74
 8001a50:	69f9      	ldr	r1, [r7, #28]
 8001a52:	b158      	cbz	r0, 8001a6c <forward_conv2d_nl_pool+0xc0>
 8001a54:	6803      	ldr	r3, [r0, #0]
 8001a56:	689a      	ldr	r2, [r3, #8]
 8001a58:	9218      	str	r2, [sp, #96]	; 0x60
 8001a5a:	9210      	str	r2, [sp, #64]	; 0x40
 8001a5c:	69c0      	ldr	r0, [r0, #28]
 8001a5e:	9015      	str	r0, [sp, #84]	; 0x54
 8001a60:	6859      	ldr	r1, [r3, #4]
 8001a62:	6818      	ldr	r0, [r3, #0]
 8001a64:	f001 fe4c 	bl	8003700 <ai_array_get_byte_size>
 8001a68:	9014      	str	r0, [sp, #80]	; 0x50
 8001a6a:	e00b      	b.n	8001a84 <forward_conv2d_nl_pool+0xd8>
 8001a6c:	b119      	cbz	r1, 8001a76 <forward_conv2d_nl_pool+0xca>
 8001a6e:	6889      	ldr	r1, [r1, #8]
 8001a70:	9118      	str	r1, [sp, #96]	; 0x60
 8001a72:	9110      	str	r1, [sp, #64]	; 0x40
 8001a74:	e002      	b.n	8001a7c <forward_conv2d_nl_pool+0xd0>
 8001a76:	2200      	movs	r2, #0
 8001a78:	9118      	str	r1, [sp, #96]	; 0x60
 8001a7a:	9210      	str	r2, [sp, #64]	; 0x40
 8001a7c:	2100      	movs	r1, #0
 8001a7e:	2201      	movs	r2, #1
 8001a80:	9115      	str	r1, [sp, #84]	; 0x54
 8001a82:	9214      	str	r2, [sp, #80]	; 0x50
 8001a84:	aa1f      	add	r2, sp, #124	; 0x7c
 8001a86:	6a38      	ldr	r0, [r7, #32]
 8001a88:	2800      	cmp	r0, #0
 8001a8a:	bf12      	itee	ne
 8001a8c:	9030      	strne	r0, [sp, #192]	; 0xc0
 8001a8e:	f8df 1954 	ldreq.w	r1, [pc, #2388]	; 80023e4 <.text_22>
 8001a92:	9130      	streq	r1, [sp, #192]	; 0xc0
 8001a94:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001a96:	981a      	ldr	r0, [sp, #104]	; 0x68
 8001a98:	8813      	ldrh	r3, [r2, #0]
 8001a9a:	9128      	str	r1, [sp, #160]	; 0xa0
 8001a9c:	1e5b      	subs	r3, r3, #1
 8001a9e:	1e41      	subs	r1, r0, #1
 8001aa0:	aa20      	add	r2, sp, #128	; 0x80
 8001aa2:	fb03 0001 	mla	r0, r3, r1, r0
 8001aa6:	9019      	str	r0, [sp, #100]	; 0x64
 8001aa8:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8001aaa:	8813      	ldrh	r3, [r2, #0]
 8001aac:	1e48      	subs	r0, r1, #1
 8001aae:	1e5b      	subs	r3, r3, #1
 8001ab0:	fb03 1100 	mla	r1, r3, r0, r1
 8001ab4:	9127      	str	r1, [sp, #156]	; 0x9c
 8001ab6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001ab8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8001aba:	9819      	ldr	r0, [sp, #100]	; 0x64
 8001abc:	9112      	str	r1, [sp, #72]	; 0x48
 8001abe:	1a12      	subs	r2, r2, r0
 8001ac0:	4442      	add	r2, r8
 8001ac2:	9921      	ldr	r1, [sp, #132]	; 0x84
 8001ac4:	fa12 f084 	uxtah	r0, r2, r4
 8001ac8:	fbb0 f1f1 	udiv	r1, r0, r1
 8001acc:	1c49      	adds	r1, r1, #1
 8001ace:	9111      	str	r1, [sp, #68]	; 0x44
 8001ad0:	2400      	movs	r4, #0
 8001ad2:	f8db 1000 	ldr.w	r1, [fp]
 8001ad6:	6808      	ldr	r0, [r1, #0]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	11c3      	asrs	r3, r0, #7
 8001adc:	ea4f 5c60 	mov.w	ip, r0, asr #21
 8001ae0:	1440      	asrs	r0, r0, #17
 8001ae2:	f000 000f 	and.w	r0, r0, #15
 8001ae6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001aea:	f00c 0c03 	and.w	ip, ip, #3
 8001aee:	2804      	cmp	r0, #4
 8001af0:	fa23 f30c 	lsr.w	r3, r3, ip
 8001af4:	bf14      	ite	ne
 8001af6:	2808      	cmpne	r0, #8
 8001af8:	68ca      	ldreq	r2, [r1, #12]
 8001afa:	b1a2      	cbz	r2, 8001b26 <forward_conv2d_nl_pool+0x17a>
 8001afc:	6978      	ldr	r0, [r7, #20]
 8001afe:	6800      	ldr	r0, [r0, #0]
 8001b00:	f8d0 e024 	ldr.w	lr, [r0, #36]	; 0x24
 8001b04:	f8de 0004 	ldr.w	r0, [lr, #4]
 8001b08:	b108      	cbz	r0, 8001b0e <forward_conv2d_nl_pool+0x162>
 8001b0a:	6804      	ldr	r4, [r0, #0]
 8001b0c:	68a4      	ldr	r4, [r4, #8]
 8001b0e:	6800      	ldr	r0, [r0, #0]
 8001b10:	6840      	ldr	r0, [r0, #4]
 8001b12:	9001      	str	r0, [sp, #4]
 8001b14:	9824      	ldr	r0, [sp, #144]	; 0x90
 8001b16:	9000      	str	r0, [sp, #0]
 8001b18:	4620      	mov	r0, r4
 8001b1a:	6889      	ldr	r1, [r1, #8]
 8001b1c:	f7ff fdd0 	bl	80016c0 <ai_dict_decompress_f32>
 8001b20:	b10c      	cbz	r4, 8001b26 <forward_conv2d_nl_pool+0x17a>
 8001b22:	4623      	mov	r3, r4
 8001b24:	e000      	b.n	8001b28 <forward_conv2d_nl_pool+0x17c>
 8001b26:	4653      	mov	r3, sl
 8001b28:	697a      	ldr	r2, [r7, #20]
 8001b2a:	6814      	ldr	r4, [r2, #0]
 8001b2c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001b2e:	6814      	ldr	r4, [r2, #0]
 8001b30:	6827      	ldr	r7, [r4, #0]
 8001b32:	f8d7 a008 	ldr.w	sl, [r7, #8]
 8001b36:	68e2      	ldr	r2, [r4, #12]
 8001b38:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 8001b3a:	f8dd c008 	ldr.w	ip, [sp, #8]
 8001b3e:	6830      	ldr	r0, [r6, #0]
 8001b40:	4357      	muls	r7, r2
 8001b42:	fb0c f707 	mul.w	r7, ip, r7
 8001b46:	00bf      	lsls	r7, r7, #2
 8001b48:	9736      	str	r7, [sp, #216]	; 0xd8
 8001b4a:	2100      	movs	r1, #0
 8001b4c:	af16      	add	r7, sp, #88	; 0x58
 8001b4e:	f1c9 0900 	rsb	r9, r9, #0
 8001b52:	5e7f      	ldrsh	r7, [r7, r1]
 8001b54:	9735      	str	r7, [sp, #212]	; 0xd4
 8001b56:	b22d      	sxth	r5, r5
 8001b58:	9f02      	ldr	r7, [sp, #8]
 8001b5a:	f8dd e088 	ldr.w	lr, [sp, #136]	; 0x88
 8001b5e:	fb0e f707 	mul.w	r7, lr, r7
 8001b62:	9734      	str	r7, [sp, #208]	; 0xd0
 8001b64:	462e      	mov	r6, r5
 8001b66:	9f02      	ldr	r7, [sp, #8]
 8001b68:	4357      	muls	r7, r2
 8001b6a:	9733      	str	r7, [sp, #204]	; 0xcc
 8001b6c:	f8cd 90c8 	str.w	r9, [sp, #200]	; 0xc8
 8001b70:	f1c8 0800 	rsb	r8, r8, #0
 8001b74:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8001b76:	9731      	str	r7, [sp, #196]	; 0xc4
 8001b78:	9f23      	ldr	r7, [sp, #140]	; 0x8c
 8001b7a:	2f00      	cmp	r7, #0
 8001b7c:	f000 8100 	beq.w	8001d80 <forward_conv2d_nl_pool+0x3d4>
 8001b80:	46e1      	mov	r9, ip
 8001b82:	9337      	str	r3, [sp, #220]	; 0xdc
 8001b84:	9026      	str	r0, [sp, #152]	; 0x98
 8001b86:	912f      	str	r1, [sp, #188]	; 0xbc
 8001b88:	9225      	str	r2, [sp, #148]	; 0x94
 8001b8a:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8001b8e:	9811      	ldr	r0, [sp, #68]	; 0x44
 8001b90:	2800      	cmp	r0, #0
 8001b92:	dd5d      	ble.n	8001c50 <forward_conv2d_nl_pool+0x2a4>
 8001b94:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8001b96:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8001b98:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8001b9a:	9832      	ldr	r0, [sp, #200]	; 0xc8
 8001b9c:	4249      	negs	r1, r1
 8001b9e:	bfd8      	it	le
 8001ba0:	2100      	movle	r1, #0
 8001ba2:	1ad2      	subs	r2, r2, r3
 8001ba4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8001ba6:	429a      	cmp	r2, r3
 8001ba8:	bf3d      	ittte	cc
 8001baa:	9b1c      	ldrcc	r3, [sp, #112]	; 0x70
 8001bac:	9a17      	ldrcc	r2, [sp, #92]	; 0x5c
 8001bae:	1a9a      	subcc	r2, r3, r2
 8001bb0:	461a      	movcs	r2, r3
 8001bb2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8001bb4:	b21b      	sxth	r3, r3
 8001bb6:	930f      	str	r3, [sp, #60]	; 0x3c
 8001bb8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8001bba:	b21b      	sxth	r3, r3
 8001bbc:	930e      	str	r3, [sp, #56]	; 0x38
 8001bbe:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8001bc0:	930d      	str	r3, [sp, #52]	; 0x34
 8001bc2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8001bc4:	930c      	str	r3, [sp, #48]	; 0x30
 8001bc6:	900b      	str	r0, [sp, #44]	; 0x2c
 8001bc8:	9109      	str	r1, [sp, #36]	; 0x24
 8001bca:	920a      	str	r2, [sp, #40]	; 0x28
 8001bcc:	982d      	ldr	r0, [sp, #180]	; 0xb4
 8001bce:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
 8001bd2:	9008      	str	r0, [sp, #32]
 8001bd4:	9107      	str	r1, [sp, #28]
 8001bd6:	f8cd 9008 	str.w	r9, [sp, #8]
 8001bda:	981a      	ldr	r0, [sp, #104]	; 0x68
 8001bdc:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8001bde:	9006      	str	r0, [sp, #24]
 8001be0:	9105      	str	r1, [sp, #20]
 8001be2:	9825      	ldr	r0, [sp, #148]	; 0x94
 8001be4:	992e      	ldr	r1, [sp, #184]	; 0xb8
 8001be6:	9004      	str	r0, [sp, #16]
 8001be8:	9103      	str	r1, [sp, #12]
 8001bea:	9824      	ldr	r0, [sp, #144]	; 0x90
 8001bec:	991d      	ldr	r1, [sp, #116]	; 0x74
 8001bee:	9001      	str	r0, [sp, #4]
 8001bf0:	9100      	str	r1, [sp, #0]
 8001bf2:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 8001bf4:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8001bf6:	4651      	mov	r1, sl
 8001bf8:	2000      	movs	r0, #0
 8001bfa:	f7ff fb33 	bl	8001264 <ai_conv2d_stripe_f32>
 8001bfe:	9825      	ldr	r0, [sp, #148]	; 0x94
 8001c00:	b320      	cbz	r0, 8001c4c <forward_conv2d_nl_pool+0x2a0>
 8001c02:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8001c06:	9f30      	ldr	r7, [sp, #192]	; 0xc0
 8001c08:	4683      	mov	fp, r0
 8001c0a:	4643      	mov	r3, r8
 8001c0c:	464a      	mov	r2, r9
 8001c0e:	4651      	mov	r1, sl
 8001c10:	4650      	mov	r0, sl
 8001c12:	47b8      	blx	r7
 8001c14:	9815      	ldr	r0, [sp, #84]	; 0x54
 8001c16:	9931      	ldr	r1, [sp, #196]	; 0xc4
 8001c18:	4480      	add	r8, r0
 8001c1a:	9814      	ldr	r0, [sp, #80]	; 0x50
 8001c1c:	eba8 0101 	sub.w	r1, r8, r1
 8001c20:	4281      	cmp	r1, r0
 8001c22:	6820      	ldr	r0, [r4, #0]
 8001c24:	6841      	ldr	r1, [r0, #4]
 8001c26:	68c0      	ldr	r0, [r0, #12]
 8001c28:	bfa8      	it	ge
 8001c2a:	f8dd 8040 	ldrge.w	r8, [sp, #64]	; 0x40
 8001c2e:	eb0a 0a89 	add.w	sl, sl, r9, lsl #2
 8001c32:	eb00 0281 	add.w	r2, r0, r1, lsl #2
 8001c36:	4592      	cmp	sl, r2
 8001c38:	d302      	bcc.n	8001c40 <forward_conv2d_nl_pool+0x294>
 8001c3a:	0089      	lsls	r1, r1, #2
 8001c3c:	4249      	negs	r1, r1
 8001c3e:	448a      	add	sl, r1
 8001c40:	f1bb 0b01 	subs.w	fp, fp, #1
 8001c44:	d1e1      	bne.n	8001c0a <forward_conv2d_nl_pool+0x25e>
 8001c46:	f8cd 8060 	str.w	r8, [sp, #96]	; 0x60
 8001c4a:	9730      	str	r7, [sp, #192]	; 0xc0
 8001c4c:	1c76      	adds	r6, r6, #1
 8001c4e:	b236      	sxth	r6, r6
 8001c50:	9811      	ldr	r0, [sp, #68]	; 0x44
 8001c52:	1e40      	subs	r0, r0, #1
 8001c54:	2800      	cmp	r0, #0
 8001c56:	9011      	str	r0, [sp, #68]	; 0x44
 8001c58:	dc4e      	bgt.n	8001cf8 <forward_conv2d_nl_pool+0x34c>
 8001c5a:	9833      	ldr	r0, [sp, #204]	; 0xcc
 8001c5c:	4370      	muls	r0, r6
 8001c5e:	0080      	lsls	r0, r0, #2
 8001c60:	4240      	negs	r0, r0
 8001c62:	eb0a 0100 	add.w	r1, sl, r0
 8001c66:	6820      	ldr	r0, [r4, #0]
 8001c68:	68c2      	ldr	r2, [r0, #12]
 8001c6a:	4291      	cmp	r1, r2
 8001c6c:	bf3c      	itt	cc
 8001c6e:	6843      	ldrcc	r3, [r0, #4]
 8001c70:	eb01 0183 	addcc.w	r1, r1, r3, lsl #2
 8001c74:	428a      	cmp	r2, r1
 8001c76:	4657      	mov	r7, sl
 8001c78:	d232      	bcs.n	8001ce0 <forward_conv2d_nl_pool+0x334>
 8001c7a:	ab12      	add	r3, sp, #72	; 0x48
 8001c7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c80:	429e      	cmp	r6, r3
 8001c82:	d02d      	beq.n	8001ce0 <forward_conv2d_nl_pool+0x334>
 8001c84:	6843      	ldr	r3, [r0, #4]
 8001c86:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8001c8a:	4291      	cmp	r1, r2
 8001c8c:	f080 8028 	bcs.w	8001ce0 <forward_conv2d_nl_pool+0x334>
 8001c90:	f851 3b04 	ldr.w	r3, [r1], #4
 8001c94:	f84a 3b04 	str.w	r3, [sl], #4
 8001c98:	68c2      	ldr	r2, [r0, #12]
 8001c9a:	6843      	ldr	r3, [r0, #4]
 8001c9c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8001ca0:	4291      	cmp	r1, r2
 8001ca2:	d21d      	bcs.n	8001ce0 <forward_conv2d_nl_pool+0x334>
 8001ca4:	f851 2b04 	ldr.w	r2, [r1], #4
 8001ca8:	f84a 2b04 	str.w	r2, [sl], #4
 8001cac:	6843      	ldr	r3, [r0, #4]
 8001cae:	68c2      	ldr	r2, [r0, #12]
 8001cb0:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8001cb4:	4291      	cmp	r1, r2
 8001cb6:	d213      	bcs.n	8001ce0 <forward_conv2d_nl_pool+0x334>
 8001cb8:	f851 2b04 	ldr.w	r2, [r1], #4
 8001cbc:	f84a 2b04 	str.w	r2, [sl], #4
 8001cc0:	6843      	ldr	r3, [r0, #4]
 8001cc2:	68c2      	ldr	r2, [r0, #12]
 8001cc4:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8001cc8:	4291      	cmp	r1, r2
 8001cca:	d209      	bcs.n	8001ce0 <forward_conv2d_nl_pool+0x334>
 8001ccc:	f851 2b04 	ldr.w	r2, [r1], #4
 8001cd0:	f84a 2b04 	str.w	r2, [sl], #4
 8001cd4:	6843      	ldr	r3, [r0, #4]
 8001cd6:	68c2      	ldr	r2, [r0, #12]
 8001cd8:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8001cdc:	4291      	cmp	r1, r2
 8001cde:	d3d7      	bcc.n	8001c90 <forward_conv2d_nl_pool+0x2e4>
 8001ce0:	9811      	ldr	r0, [sp, #68]	; 0x44
 8001ce2:	2800      	cmp	r0, #0
 8001ce4:	d506      	bpl.n	8001cf4 <forward_conv2d_nl_pool+0x348>
 8001ce6:	9936      	ldr	r1, [sp, #216]	; 0xd8
 8001ce8:	4650      	mov	r0, sl
 8001cea:	f006 ff9c 	bl	8008c26 <__aeabi_memclr>
 8001cee:	981e      	ldr	r0, [sp, #120]	; 0x78
 8001cf0:	1986      	adds	r6, r0, r6
 8001cf2:	b236      	sxth	r6, r6
 8001cf4:	9612      	str	r6, [sp, #72]	; 0x48
 8001cf6:	46ba      	mov	sl, r7
 8001cf8:	9812      	ldr	r0, [sp, #72]	; 0x48
 8001cfa:	4286      	cmp	r6, r0
 8001cfc:	d136      	bne.n	8001d6c <forward_conv2d_nl_pool+0x3c0>
 8001cfe:	982f      	ldr	r0, [sp, #188]	; 0xbc
 8001d00:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8001d02:	f8dd c0a0 	ldr.w	ip, [sp, #160]	; 0xa0
 8001d06:	9916      	ldr	r1, [sp, #88]	; 0x58
 8001d08:	1c40      	adds	r0, r0, #1
 8001d0a:	902f      	str	r0, [sp, #188]	; 0xbc
 8001d0c:	b292      	uxth	r2, r2
 8001d0e:	9826      	ldr	r0, [sp, #152]	; 0x98
 8001d10:	9008      	str	r0, [sp, #32]
 8001d12:	9206      	str	r2, [sp, #24]
 8001d14:	fa1f f389 	uxth.w	r3, r9
 8001d18:	9816      	ldr	r0, [sp, #88]	; 0x58
 8001d1a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8001d1c:	b280      	uxth	r0, r0
 8001d1e:	9005      	str	r0, [sp, #20]
 8001d20:	b292      	uxth	r2, r2
 8001d22:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8001d24:	b280      	uxth	r0, r0
 8001d26:	9002      	str	r0, [sp, #8]
 8001d28:	1a76      	subs	r6, r6, r1
 8001d2a:	2101      	movs	r1, #1
 8001d2c:	9107      	str	r1, [sp, #28]
 8001d2e:	b236      	sxth	r6, r6
 8001d30:	992b      	ldr	r1, [sp, #172]	; 0xac
 8001d32:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8001d34:	b289      	uxth	r1, r1
 8001d36:	9104      	str	r1, [sp, #16]
 8001d38:	b280      	uxth	r0, r0
 8001d3a:	b2a9      	uxth	r1, r5
 8001d3c:	9103      	str	r1, [sp, #12]
 8001d3e:	9000      	str	r0, [sp, #0]
 8001d40:	9912      	ldr	r1, [sp, #72]	; 0x48
 8001d42:	b289      	uxth	r1, r1
 8001d44:	9101      	str	r1, [sp, #4]
 8001d46:	9925      	ldr	r1, [sp, #148]	; 0x94
 8001d48:	6820      	ldr	r0, [r4, #0]
 8001d4a:	b289      	uxth	r1, r1
 8001d4c:	47e0      	blx	ip
 8001d4e:	9826      	ldr	r0, [sp, #152]	; 0x98
 8001d50:	6881      	ldr	r1, [r0, #8]
 8001d52:	9834      	ldr	r0, [sp, #208]	; 0xd0
 8001d54:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 8001d58:	9926      	ldr	r1, [sp, #152]	; 0x98
 8001d5a:	608a      	str	r2, [r1, #8]
 8001d5c:	9835      	ldr	r0, [sp, #212]	; 0xd4
 8001d5e:	1a28      	subs	r0, r5, r0
 8001d60:	2800      	cmp	r0, #0
 8001d62:	bfc3      	ittte	gt
 8001d64:	9816      	ldrgt	r0, [sp, #88]	; 0x58
 8001d66:	1a2d      	subgt	r5, r5, r0
 8001d68:	b22d      	sxthgt	r5, r5
 8001d6a:	2500      	movle	r5, #0
 8001d6c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8001d6e:	9921      	ldr	r1, [sp, #132]	; 0x84
 8001d70:	1808      	adds	r0, r1, r0
 8001d72:	9017      	str	r0, [sp, #92]	; 0x5c
 8001d74:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8001d76:	982f      	ldr	r0, [sp, #188]	; 0xbc
 8001d78:	4288      	cmp	r0, r1
 8001d7a:	f4ff af08 	bcc.w	8001b8e <forward_conv2d_nl_pool+0x1e2>
 8001d7e:	9826      	ldr	r0, [sp, #152]	; 0x98
 8001d80:	6821      	ldr	r1, [r4, #0]
 8001d82:	68ca      	ldr	r2, [r1, #12]
 8001d84:	608a      	str	r2, [r1, #8]
 8001d86:	68c1      	ldr	r1, [r0, #12]
 8001d88:	6081      	str	r1, [r0, #8]
 8001d8a:	b039      	add	sp, #228	; 0xe4
 8001d8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001d90 <forward_dense>:
 8001d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d94:	b081      	sub	sp, #4
 8001d96:	ed2d 8b02 	vpush	{d8}
 8001d9a:	b088      	sub	sp, #32
 8001d9c:	6940      	ldr	r0, [r0, #20]
 8001d9e:	6800      	ldr	r0, [r0, #0]
 8001da0:	6801      	ldr	r1, [r0, #0]
 8001da2:	680a      	ldr	r2, [r1, #0]
 8001da4:	68c3      	ldr	r3, [r0, #12]
 8001da6:	6981      	ldr	r1, [r0, #24]
 8001da8:	8c00      	ldrh	r0, [r0, #32]
 8001daa:	681f      	ldr	r7, [r3, #0]
 8001dac:	f8d1 e000 	ldr.w	lr, [r1]
 8001db0:	6894      	ldr	r4, [r2, #8]
 8001db2:	f8de 9000 	ldr.w	r9, [lr]
 8001db6:	f8d7 c008 	ldr.w	ip, [r7, #8]
 8001dba:	f8d9 5000 	ldr.w	r5, [r9]
 8001dbe:	6812      	ldr	r2, [r2, #0]
 8001dc0:	2802      	cmp	r0, #2
 8001dc2:	bfac      	ite	ge
 8001dc4:	684b      	ldrge	r3, [r1, #4]
 8001dc6:	2300      	movlt	r3, #0
 8001dc8:	68f9      	ldr	r1, [r7, #12]
 8001dca:	6938      	ldr	r0, [r7, #16]
 8001dcc:	683f      	ldr	r7, [r7, #0]
 8001dce:	68bf      	ldr	r7, [r7, #8]
 8001dd0:	4341      	muls	r1, r0
 8001dd2:	2000      	movs	r0, #0
 8001dd4:	11ee      	asrs	r6, r5, #7
 8001dd6:	f006 087f 	and.w	r8, r6, #127	; 0x7f
 8001dda:	156e      	asrs	r6, r5, #21
 8001ddc:	146d      	asrs	r5, r5, #17
 8001dde:	f005 050f 	and.w	r5, r5, #15
 8001de2:	2d04      	cmp	r5, #4
 8001de4:	bf14      	ite	ne
 8001de6:	2d08      	cmpne	r5, #8
 8001de8:	f8d9 000c 	ldreq.w	r0, [r9, #12]
 8001dec:	6895      	ldr	r5, [r2, #8]
 8001dee:	f8de 9018 	ldr.w	r9, [lr, #24]
 8001df2:	f006 0603 	and.w	r6, r6, #3
 8001df6:	2900      	cmp	r1, #0
 8001df8:	fa28 f806 	lsr.w	r8, r8, r6
 8001dfc:	eb07 028c 	add.w	r2, r7, ip, lsl #2
 8001e00:	f000 80eb 	beq.w	8001fda <forward_dense+0x24a>
 8001e04:	f8cd e01c 	str.w	lr, [sp, #28]
 8001e08:	9305      	str	r3, [sp, #20]
 8001e0a:	f8cd c018 	str.w	ip, [sp, #24]
 8001e0e:	9201      	str	r2, [sp, #4]
 8001e10:	9104      	str	r1, [sp, #16]
 8001e12:	9907      	ldr	r1, [sp, #28]
 8001e14:	680a      	ldr	r2, [r1, #0]
 8001e16:	9905      	ldr	r1, [sp, #20]
 8001e18:	f8d2 b008 	ldr.w	fp, [r2, #8]
 8001e1c:	9b01      	ldr	r3, [sp, #4]
 8001e1e:	2900      	cmp	r1, #0
 8001e20:	bf1a      	itte	ne
 8001e22:	680a      	ldrne	r2, [r1, #0]
 8001e24:	6892      	ldrne	r2, [r2, #8]
 8001e26:	2200      	moveq	r2, #0
 8001e28:	2800      	cmp	r0, #0
 8001e2a:	f040 80ab 	bne.w	8001f84 <forward_dense+0x1f4>
 8001e2e:	429f      	cmp	r7, r3
 8001e30:	f080 80c7 	bcs.w	8001fc2 <forward_dense+0x232>
 8001e34:	9003      	str	r0, [sp, #12]
 8001e36:	2a00      	cmp	r2, #0
 8001e38:	bf0e      	itee	eq
 8001e3a:	ed9f 0a6b 	vldreq	s0, [pc, #428]	; 8001fe8 <.text_17>
 8001e3e:	ed92 0a00 	vldrne	s0, [r2]
 8001e42:	1d12      	addne	r2, r2, #4
 8001e44:	2c04      	cmp	r4, #4
 8001e46:	4620      	mov	r0, r4
 8001e48:	46ae      	mov	lr, r5
 8001e4a:	46dc      	mov	ip, fp
 8001e4c:	eddf 0a66 	vldr	s1, [pc, #408]	; 8001fe8 <.text_17>
 8001e50:	d35d      	bcc.n	8001f0e <forward_dense+0x17e>
 8001e52:	08a1      	lsrs	r1, r4, #2
 8001e54:	07ce      	lsls	r6, r1, #31
 8001e56:	d51c      	bpl.n	8001e92 <forward_dense+0x102>
 8001e58:	ed9c 4a00 	vldr	s8, [ip]
 8001e5c:	edde 4a00 	vldr	s9, [lr]
 8001e60:	ed9c 3a01 	vldr	s6, [ip, #4]
 8001e64:	edde 3a01 	vldr	s7, [lr, #4]
 8001e68:	ed9c 2a02 	vldr	s4, [ip, #8]
 8001e6c:	edde 2a02 	vldr	s5, [lr, #8]
 8001e70:	ed9c 1a03 	vldr	s2, [ip, #12]
 8001e74:	edde 1a03 	vldr	s3, [lr, #12]
 8001e78:	ee44 0a24 	vmla.f32	s1, s8, s9
 8001e7c:	ee43 0a23 	vmla.f32	s1, s6, s7
 8001e80:	ee42 0a22 	vmla.f32	s1, s4, s5
 8001e84:	ee41 0a21 	vmla.f32	s1, s2, s3
 8001e88:	f10e 0e10 	add.w	lr, lr, #16
 8001e8c:	f10c 0c10 	add.w	ip, ip, #16
 8001e90:	1f00      	subs	r0, r0, #4
 8001e92:	0849      	lsrs	r1, r1, #1
 8001e94:	f000 803b 	beq.w	8001f0e <forward_dense+0x17e>
 8001e98:	edde 4a00 	vldr	s9, [lr]
 8001e9c:	edde 3a01 	vldr	s7, [lr, #4]
 8001ea0:	edde 2a02 	vldr	s5, [lr, #8]
 8001ea4:	edde 1a03 	vldr	s3, [lr, #12]
 8001ea8:	ed9c 1a03 	vldr	s2, [ip, #12]
 8001eac:	ed9c 2a02 	vldr	s4, [ip, #8]
 8001eb0:	ed9c 3a01 	vldr	s6, [ip, #4]
 8001eb4:	ed9c 4a00 	vldr	s8, [ip]
 8001eb8:	ee44 0a24 	vmla.f32	s1, s8, s9
 8001ebc:	ee43 0a23 	vmla.f32	s1, s6, s7
 8001ec0:	ee42 0a22 	vmla.f32	s1, s4, s5
 8001ec4:	ee41 0a21 	vmla.f32	s1, s2, s3
 8001ec8:	f10e 0610 	add.w	r6, lr, #16
 8001ecc:	f10c 0c10 	add.w	ip, ip, #16
 8001ed0:	edd6 8a00 	vldr	s17, [r6]
 8001ed4:	ed9c 8a00 	vldr	s16, [ip]
 8001ed8:	ed9c 7a01 	vldr	s14, [ip, #4]
 8001edc:	edd6 7a01 	vldr	s15, [r6, #4]
 8001ee0:	ed9c 6a02 	vldr	s12, [ip, #8]
 8001ee4:	edd6 6a02 	vldr	s13, [r6, #8]
 8001ee8:	ed9c 5a03 	vldr	s10, [ip, #12]
 8001eec:	edd6 5a03 	vldr	s11, [r6, #12]
 8001ef0:	ee48 0a28 	vmla.f32	s1, s16, s17
 8001ef4:	ee47 0a27 	vmla.f32	s1, s14, s15
 8001ef8:	3808      	subs	r0, #8
 8001efa:	ee46 0a26 	vmla.f32	s1, s12, s13
 8001efe:	1e49      	subs	r1, r1, #1
 8001f00:	ee45 0a25 	vmla.f32	s1, s10, s11
 8001f04:	f106 0e10 	add.w	lr, r6, #16
 8001f08:	f10c 0c10 	add.w	ip, ip, #16
 8001f0c:	d1c4      	bne.n	8001e98 <forward_dense+0x108>
 8001f0e:	b378      	cbz	r0, 8001f70 <forward_dense+0x1e0>
 8001f10:	f010 0103 	ands.w	r1, r0, #3
 8001f14:	f000 800c 	beq.w	8001f30 <forward_dense+0x1a0>
 8001f18:	ed9c 1a00 	vldr	s2, [ip]
 8001f1c:	edde 1a00 	vldr	s3, [lr]
 8001f20:	1e49      	subs	r1, r1, #1
 8001f22:	ee41 0a21 	vmla.f32	s1, s2, s3
 8001f26:	f10e 0e04 	add.w	lr, lr, #4
 8001f2a:	f10c 0c04 	add.w	ip, ip, #4
 8001f2e:	d1f3      	bne.n	8001f18 <forward_dense+0x188>
 8001f30:	0880      	lsrs	r0, r0, #2
 8001f32:	d01d      	beq.n	8001f70 <forward_dense+0x1e0>
 8001f34:	ed9c 2a00 	vldr	s4, [ip]
 8001f38:	ed9e 1a00 	vldr	s2, [lr]
 8001f3c:	eddc 1a01 	vldr	s3, [ip, #4]
 8001f40:	edde 2a01 	vldr	s5, [lr, #4]
 8001f44:	ee42 0a01 	vmla.f32	s1, s4, s2
 8001f48:	ee41 0aa2 	vmla.f32	s1, s3, s5
 8001f4c:	ed9c 2a02 	vldr	s4, [ip, #8]
 8001f50:	ed9e 1a02 	vldr	s2, [lr, #8]
 8001f54:	eddc 1a03 	vldr	s3, [ip, #12]
 8001f58:	edde 2a03 	vldr	s5, [lr, #12]
 8001f5c:	ee42 0a01 	vmla.f32	s1, s4, s2
 8001f60:	1e40      	subs	r0, r0, #1
 8001f62:	ee41 0aa2 	vmla.f32	s1, s3, s5
 8001f66:	f10e 0e10 	add.w	lr, lr, #16
 8001f6a:	f10c 0c10 	add.w	ip, ip, #16
 8001f6e:	d1e1      	bne.n	8001f34 <forward_dense+0x1a4>
 8001f70:	ee30 0a20 	vadd.f32	s0, s0, s1
 8001f74:	ed87 0a00 	vstr	s0, [r7]
 8001f78:	1d3f      	adds	r7, r7, #4
 8001f7a:	429f      	cmp	r7, r3
 8001f7c:	44cb      	add	fp, r9
 8001f7e:	f4ff af5a 	bcc.w	8001e36 <forward_dense+0xa6>
 8001f82:	e01d      	b.n	8001fc0 <forward_dense+0x230>
 8001f84:	429f      	cmp	r7, r3
 8001f86:	d21c      	bcs.n	8001fc2 <forward_dense+0x232>
 8001f88:	469a      	mov	sl, r3
 8001f8a:	9003      	str	r0, [sp, #12]
 8001f8c:	4616      	mov	r6, r2
 8001f8e:	2e00      	cmp	r6, #0
 8001f90:	bf14      	ite	ne
 8001f92:	f856 0b04 	ldrne.w	r0, [r6], #4
 8001f96:	2000      	moveq	r0, #0
 8001f98:	9002      	str	r0, [sp, #8]
 8001f9a:	f1b8 0f04 	cmp.w	r8, #4
 8001f9e:	9a03      	ldr	r2, [sp, #12]
 8001fa0:	9400      	str	r4, [sp, #0]
 8001fa2:	462b      	mov	r3, r5
 8001fa4:	4659      	mov	r1, fp
 8001fa6:	a802      	add	r0, sp, #8
 8001fa8:	d102      	bne.n	8001fb0 <forward_dense+0x220>
 8001faa:	f7ff fb39 	bl	8001620 <ai_dict4_dot_array_f32>
 8001fae:	e001      	b.n	8001fb4 <forward_dense+0x224>
 8001fb0:	f7ff f9ca 	bl	8001348 <ai_dict8_dot_array_f32>
 8001fb4:	9802      	ldr	r0, [sp, #8]
 8001fb6:	f847 0b04 	str.w	r0, [r7], #4
 8001fba:	4557      	cmp	r7, sl
 8001fbc:	44cb      	add	fp, r9
 8001fbe:	d3e6      	bcc.n	8001f8e <forward_dense+0x1fe>
 8001fc0:	9803      	ldr	r0, [sp, #12]
 8001fc2:	9901      	ldr	r1, [sp, #4]
 8001fc4:	9a06      	ldr	r2, [sp, #24]
 8001fc6:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8001fca:	9904      	ldr	r1, [sp, #16]
 8001fcc:	9301      	str	r3, [sp, #4]
 8001fce:	1e49      	subs	r1, r1, #1
 8001fd0:	eb05 0584 	add.w	r5, r5, r4, lsl #2
 8001fd4:	9104      	str	r1, [sp, #16]
 8001fd6:	f47f af1c 	bne.w	8001e12 <forward_dense+0x82>
 8001fda:	b008      	add	sp, #32
 8001fdc:	ecbd 8b02 	vpop	{d8}
 8001fe0:	b001      	add	sp, #4
 8001fe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08001fe8 <.text_17>:
 8001fe8:	00000000 	.word	0x00000000

08001fec <arm_mat_gemm_f32>:
 8001fec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ff0:	4615      	mov	r5, r2
 8001ff2:	b08a      	sub	sp, #40	; 0x28
 8001ff4:	6842      	ldr	r2, [r0, #4]
 8001ff6:	9203      	str	r2, [sp, #12]
 8001ff8:	4699      	mov	r9, r3
 8001ffa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8001ffc:	686c      	ldr	r4, [r5, #4]
 8001ffe:	9400      	str	r4, [sp, #0]
 8002000:	468b      	mov	fp, r1
 8002002:	685e      	ldr	r6, [r3, #4]
 8002004:	8804      	ldrh	r4, [r0, #0]
 8002006:	f8b3 c000 	ldrh.w	ip, [r3]
 800200a:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800200e:	8840      	ldrh	r0, [r0, #2]
 8002010:	f8bb 1000 	ldrh.w	r1, [fp]
 8002014:	f8bb 2002 	ldrh.w	r2, [fp, #2]
 8002018:	f8b5 e000 	ldrh.w	lr, [r5]
 800201c:	886f      	ldrh	r7, [r5, #2]
 800201e:	f8db 3004 	ldr.w	r3, [fp, #4]
 8002022:	9306      	str	r3, [sp, #24]
 8002024:	9305      	str	r3, [sp, #20]
 8002026:	2500      	movs	r5, #0
 8002028:	fa4f f389 	sxtb.w	r3, r9
 800202c:	2b00      	cmp	r3, #0
 800202e:	bf0c      	ite	eq
 8002030:	46a0      	moveq	r8, r4
 8002032:	4680      	movne	r8, r0
 8002034:	2f01      	cmp	r7, #1
 8002036:	bf0c      	ite	eq
 8002038:	2300      	moveq	r3, #0
 800203a:	2304      	movne	r3, #4
 800203c:	f1be 0f01 	cmp.w	lr, #1
 8002040:	d104      	bne.n	800204c <arm_mat_gemm_f32+0x60>
 8002042:	2f01      	cmp	r7, #1
 8002044:	d007      	beq.n	8002056 <arm_mat_gemm_f32+0x6a>
 8002046:	f1ca 0e00 	rsb	lr, sl, #0
 800204a:	e005      	b.n	8002058 <arm_mat_gemm_f32+0x6c>
 800204c:	2f01      	cmp	r7, #1
 800204e:	bf08      	it	eq
 8002050:	f04f 0e01 	moveq.w	lr, #1
 8002054:	d000      	beq.n	8002058 <arm_mat_gemm_f32+0x6c>
 8002056:	46ae      	mov	lr, r5
 8002058:	fa0f f78e 	sxth.w	r7, lr
 800205c:	9704      	str	r7, [sp, #16]
 800205e:	fa4f f789 	sxtb.w	r7, r9
 8002062:	2f00      	cmp	r7, #0
 8002064:	bf0c      	ite	eq
 8002066:	46a3      	moveq	fp, r4
 8002068:	4683      	movne	fp, r0
 800206a:	45e3      	cmp	fp, ip
 800206c:	d117      	bne.n	800209e <arm_mat_gemm_f32+0xb2>
 800206e:	f99d e04c 	ldrsb.w	lr, [sp, #76]	; 0x4c
 8002072:	f1be 0f00 	cmp.w	lr, #0
 8002076:	bf0c      	ite	eq
 8002078:	9201      	streq	r2, [sp, #4]
 800207a:	9101      	strne	r1, [sp, #4]
 800207c:	9f01      	ldr	r7, [sp, #4]
 800207e:	4557      	cmp	r7, sl
 8002080:	d10d      	bne.n	800209e <arm_mat_gemm_f32+0xb2>
 8002082:	fa4f f789 	sxtb.w	r7, r9
 8002086:	2f00      	cmp	r7, #0
 8002088:	bf0c      	ite	eq
 800208a:	4683      	moveq	fp, r0
 800208c:	46a3      	movne	fp, r4
 800208e:	f1be 0f00 	cmp.w	lr, #0
 8002092:	bf0c      	ite	eq
 8002094:	460f      	moveq	r7, r1
 8002096:	4617      	movne	r7, r2
 8002098:	45bb      	cmp	fp, r7
 800209a:	f000 808d 	beq.w	80021b8 <arm_mat_gemm_f32+0x1cc>
 800209e:	fb0a f30c 	mul.w	r3, sl, ip
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	f06f 0002 	mvn.w	r0, #2
 80020a8:	f340 8083 	ble.w	80021b2 <arm_mat_gemm_f32+0x1c6>
 80020ac:	1c6d      	adds	r5, r5, #1
 80020ae:	2100      	movs	r1, #0
 80020b0:	b2aa      	uxth	r2, r5
 80020b2:	6031      	str	r1, [r6, #0]
 80020b4:	429a      	cmp	r2, r3
 80020b6:	bfbf      	itttt	lt
 80020b8:	6071      	strlt	r1, [r6, #4]
 80020ba:	1c6d      	addlt	r5, r5, #1
 80020bc:	b2aa      	uxthlt	r2, r5
 80020be:	429a      	cmplt	r2, r3
 80020c0:	da77      	bge.n	80021b2 <arm_mat_gemm_f32+0x1c6>
 80020c2:	1c6d      	adds	r5, r5, #1
 80020c4:	b2aa      	uxth	r2, r5
 80020c6:	429a      	cmp	r2, r3
 80020c8:	60b1      	str	r1, [r6, #8]
 80020ca:	da72      	bge.n	80021b2 <arm_mat_gemm_f32+0x1c6>
 80020cc:	60f1      	str	r1, [r6, #12]
 80020ce:	1c6d      	adds	r5, r5, #1
 80020d0:	3610      	adds	r6, #16
 80020d2:	b2aa      	uxth	r2, r5
 80020d4:	429a      	cmp	r2, r3
 80020d6:	dbe9      	blt.n	80020ac <arm_mat_gemm_f32+0xc0>
 80020d8:	b00a      	add	sp, #40	; 0x28
 80020da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80020de:	9d06      	ldr	r5, [sp, #24]
 80020e0:	0097      	lsls	r7, r2, #2
 80020e2:	9708      	str	r7, [sp, #32]
 80020e4:	0087      	lsls	r7, r0, #2
 80020e6:	9707      	str	r7, [sp, #28]
 80020e8:	f8cd c00c 	str.w	ip, [sp, #12]
 80020ec:	f8ad 4008 	strh.w	r4, [sp, #8]
 80020f0:	ea4f 0408 	mov.w	r4, r8
 80020f4:	f8dd c014 	ldr.w	ip, [sp, #20]
 80020f8:	fa4f f789 	sxtb.w	r7, r9
 80020fc:	2f00      	cmp	r7, #0
 80020fe:	bf0c      	ite	eq
 8002100:	4682      	moveq	sl, r0
 8002102:	f8bd a008 	ldrhne.w	sl, [sp, #8]
 8002106:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800210a:	f1ba 0f00 	cmp.w	sl, #0
 800210e:	ed9f 1ab4 	vldr	s2, [pc, #720]	; 80023e0 <.text_21>
 8002112:	d018      	beq.n	8002146 <arm_mat_gemm_f32+0x15a>
 8002114:	fa4f f789 	sxtb.w	r7, r9
 8002118:	2f00      	cmp	r7, #0
 800211a:	bf0c      	ite	eq
 800211c:	2704      	moveq	r7, #4
 800211e:	9f07      	ldrne	r7, [sp, #28]
 8002120:	f1be 0f00 	cmp.w	lr, #0
 8002124:	f1aa 0a01 	sub.w	sl, sl, #1
 8002128:	edd8 1a00 	vldr	s3, [r8]
 800212c:	ed95 2a00 	vldr	s4, [r5]
 8002130:	44b8      	add	r8, r7
 8002132:	bf0c      	ite	eq
 8002134:	9f08      	ldreq	r7, [sp, #32]
 8002136:	2704      	movne	r7, #4
 8002138:	19ed      	adds	r5, r5, r7
 800213a:	fa1f f78a 	uxth.w	r7, sl
 800213e:	2f00      	cmp	r7, #0
 8002140:	ee01 1a82 	vmla.f32	s2, s3, s4
 8002144:	d1e6      	bne.n	8002114 <arm_mat_gemm_f32+0x128>
 8002146:	ee20 1a01 	vmul.f32	s2, s0, s2
 800214a:	eddb 1a00 	vldr	s3, [fp]
 800214e:	ee00 1aa1 	vmla.f32	s2, s1, s3
 8002152:	ed86 1a00 	vstr	s2, [r6]
 8002156:	1d36      	adds	r6, r6, #4
 8002158:	1e64      	subs	r4, r4, #1
 800215a:	b2a4      	uxth	r4, r4
 800215c:	f1be 0f00 	cmp.w	lr, #0
 8002160:	bf0e      	itee	eq
 8002162:	1b15      	subeq	r5, r2, r4
 8002164:	1b0d      	subne	r5, r1, r4
 8002166:	4355      	mulne	r5, r2
 8002168:	2c00      	cmp	r4, #0
 800216a:	449b      	add	fp, r3
 800216c:	eb0c 0585 	add.w	r5, ip, r5, lsl #2
 8002170:	d1c2      	bne.n	80020f8 <arm_mat_gemm_f32+0x10c>
 8002172:	f8bd 6002 	ldrh.w	r6, [sp, #2]
 8002176:	9d03      	ldr	r5, [sp, #12]
 8002178:	f8bd 4008 	ldrh.w	r4, [sp, #8]
 800217c:	f8cd c014 	str.w	ip, [sp, #20]
 8002180:	9f01      	ldr	r7, [sp, #4]
 8002182:	443e      	add	r6, r7
 8002184:	f8ad 6002 	strh.w	r6, [sp, #2]
 8002188:	fa4f f689 	sxtb.w	r6, r9
 800218c:	2e00      	cmp	r6, #0
 800218e:	bf0c      	ite	eq
 8002190:	ea4f 0c80 	moveq.w	ip, r0, lsl #2
 8002194:	f04f 0c04 	movne.w	ip, #4
 8002198:	44ac      	add	ip, r5
 800219a:	9d04      	ldr	r5, [sp, #16]
 800219c:	f8bd 6000 	ldrh.w	r6, [sp]
 80021a0:	eb0b 0b85 	add.w	fp, fp, r5, lsl #2
 80021a4:	1e75      	subs	r5, r6, #1
 80021a6:	f8ad 5000 	strh.w	r5, [sp]
 80021aa:	f8bd 5000 	ldrh.w	r5, [sp]
 80021ae:	b965      	cbnz	r5, 80021ca <arm_mat_gemm_f32+0x1de>
 80021b0:	2000      	movs	r0, #0
 80021b2:	b00a      	add	sp, #40	; 0x28
 80021b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80021b8:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80021bc:	f8dd b000 	ldr.w	fp, [sp]
 80021c0:	9609      	str	r6, [sp, #36]	; 0x24
 80021c2:	f8ad 5002 	strh.w	r5, [sp, #2]
 80021c6:	f8ad 8000 	strh.w	r8, [sp]
 80021ca:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80021cc:	f8bd 5002 	ldrh.w	r5, [sp, #2]
 80021d0:	f1be 0f00 	cmp.w	lr, #0
 80021d4:	eb07 0685 	add.w	r6, r7, r5, lsl #2
 80021d8:	bf0c      	ite	eq
 80021da:	4690      	moveq	r8, r2
 80021dc:	4688      	movne	r8, r1
 80021de:	e77e      	b.n	80020de <arm_mat_gemm_f32+0xf2>

080021e0 <forward_gemm>:
 80021e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021e2:	4604      	mov	r4, r0
 80021e4:	b08b      	sub	sp, #44	; 0x2c
 80021e6:	6960      	ldr	r0, [r4, #20]
 80021e8:	6800      	ldr	r0, [r0, #0]
 80021ea:	6801      	ldr	r1, [r0, #0]
 80021ec:	68c3      	ldr	r3, [r0, #12]
 80021ee:	8902      	ldrh	r2, [r0, #8]
 80021f0:	2600      	movs	r6, #0
 80021f2:	2700      	movs	r7, #0
 80021f4:	680d      	ldr	r5, [r1, #0]
 80021f6:	f8d3 c000 	ldr.w	ip, [r3]
 80021fa:	2a03      	cmp	r2, #3
 80021fc:	d102      	bne.n	8002204 <forward_gemm+0x24>
 80021fe:	684e      	ldr	r6, [r1, #4]
 8002200:	688f      	ldr	r7, [r1, #8]
 8002202:	e00a      	b.n	800221a <forward_gemm+0x3a>
 8002204:	2a02      	cmp	r2, #2
 8002206:	d103      	bne.n	8002210 <forward_gemm+0x30>
 8002208:	6980      	ldr	r0, [r0, #24]
 800220a:	684e      	ldr	r6, [r1, #4]
 800220c:	6807      	ldr	r7, [r0, #0]
 800220e:	e004      	b.n	800221a <forward_gemm+0x3a>
 8002210:	2a01      	cmp	r2, #1
 8002212:	d102      	bne.n	800221a <forward_gemm+0x3a>
 8002214:	6980      	ldr	r0, [r0, #24]
 8002216:	6806      	ldr	r6, [r0, #0]
 8002218:	6847      	ldr	r7, [r0, #4]
 800221a:	f8dc 0000 	ldr.w	r0, [ip]
 800221e:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8002222:	6883      	ldr	r3, [r0, #8]
 8002224:	f8dc 1010 	ldr.w	r1, [ip, #16]
 8002228:	b292      	uxth	r2, r2
 800222a:	b289      	uxth	r1, r1
 800222c:	a808      	add	r0, sp, #32
 800222e:	f002 f91f 	bl	8004470 <arm_mat_init_f32>
 8002232:	6829      	ldr	r1, [r5, #0]
 8002234:	688b      	ldr	r3, [r1, #8]
 8002236:	68aa      	ldr	r2, [r5, #8]
 8002238:	6929      	ldr	r1, [r5, #16]
 800223a:	b292      	uxth	r2, r2
 800223c:	b289      	uxth	r1, r1
 800223e:	a806      	add	r0, sp, #24
 8002240:	f002 f916 	bl	8004470 <arm_mat_init_f32>
 8002244:	6830      	ldr	r0, [r6, #0]
 8002246:	68b2      	ldr	r2, [r6, #8]
 8002248:	6883      	ldr	r3, [r0, #8]
 800224a:	6931      	ldr	r1, [r6, #16]
 800224c:	b292      	uxth	r2, r2
 800224e:	b289      	uxth	r1, r1
 8002250:	a804      	add	r0, sp, #16
 8002252:	f002 f90d 	bl	8004470 <arm_mat_init_f32>
 8002256:	6838      	ldr	r0, [r7, #0]
 8002258:	68ba      	ldr	r2, [r7, #8]
 800225a:	6883      	ldr	r3, [r0, #8]
 800225c:	6939      	ldr	r1, [r7, #16]
 800225e:	b292      	uxth	r2, r2
 8002260:	b289      	uxth	r1, r1
 8002262:	a802      	add	r0, sp, #8
 8002264:	f002 f904 	bl	8004470 <arm_mat_init_f32>
 8002268:	a808      	add	r0, sp, #32
 800226a:	9001      	str	r0, [sp, #4]
 800226c:	aa02      	add	r2, sp, #8
 800226e:	f994 1021 	ldrsb.w	r1, [r4, #33]	; 0x21
 8002272:	9100      	str	r1, [sp, #0]
 8002274:	a904      	add	r1, sp, #16
 8002276:	f994 3020 	ldrsb.w	r3, [r4, #32]
 800227a:	edd4 0a07 	vldr	s1, [r4, #28]
 800227e:	ed94 0a06 	vldr	s0, [r4, #24]
 8002282:	a806      	add	r0, sp, #24
 8002284:	f7ff feb2 	bl	8001fec <arm_mat_gemm_f32>
 8002288:	b00b      	add	sp, #44	; 0x2c
 800228a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800228c <forward_matmul>:
 800228c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002290:	b08b      	sub	sp, #44	; 0x2c
 8002292:	6940      	ldr	r0, [r0, #20]
 8002294:	6801      	ldr	r1, [r0, #0]
 8002296:	680a      	ldr	r2, [r1, #0]
 8002298:	6810      	ldr	r0, [r2, #0]
 800229a:	6857      	ldr	r7, [r2, #4]
 800229c:	68ca      	ldr	r2, [r1, #12]
 800229e:	6814      	ldr	r4, [r2, #0]
 80022a0:	b90f      	cbnz	r7, 80022a6 <forward_matmul+0x1a>
 80022a2:	6989      	ldr	r1, [r1, #24]
 80022a4:	680f      	ldr	r7, [r1, #0]
 80022a6:	68a2      	ldr	r2, [r4, #8]
 80022a8:	f8d0 e004 	ldr.w	lr, [r0, #4]
 80022ac:	687d      	ldr	r5, [r7, #4]
 80022ae:	f8d4 c004 	ldr.w	ip, [r4, #4]
 80022b2:	68c1      	ldr	r1, [r0, #12]
 80022b4:	f8d7 800c 	ldr.w	r8, [r7, #12]
 80022b8:	f8d4 b00c 	ldr.w	fp, [r4, #12]
 80022bc:	6923      	ldr	r3, [r4, #16]
 80022be:	9306      	str	r3, [sp, #24]
 80022c0:	fb01 fa0e 	mul.w	sl, r1, lr
 80022c4:	6824      	ldr	r4, [r4, #0]
 80022c6:	68a3      	ldr	r3, [r4, #8]
 80022c8:	6904      	ldr	r4, [r0, #16]
 80022ca:	434c      	muls	r4, r1
 80022cc:	fb0e f404 	mul.w	r4, lr, r4
 80022d0:	940a      	str	r4, [sp, #40]	; 0x28
 80022d2:	693e      	ldr	r6, [r7, #16]
 80022d4:	fb08 f606 	mul.w	r6, r8, r6
 80022d8:	436e      	muls	r6, r5
 80022da:	2a00      	cmp	r2, #0
 80022dc:	9609      	str	r6, [sp, #36]	; 0x24
 80022de:	fb08 f805 	mul.w	r8, r8, r5
 80022e2:	d079      	beq.n	80023d8 <forward_matmul+0x14c>
 80022e4:	2400      	movs	r4, #0
 80022e6:	46a1      	mov	r9, r4
 80022e8:	9202      	str	r2, [sp, #8]
 80022ea:	9a06      	ldr	r2, [sp, #24]
 80022ec:	2a00      	cmp	r2, #0
 80022ee:	d069      	beq.n	80023c4 <forward_matmul+0x138>
 80022f0:	2600      	movs	r6, #0
 80022f2:	9600      	str	r6, [sp, #0]
 80022f4:	f8cd a014 	str.w	sl, [sp, #20]
 80022f8:	f8cd b00c 	str.w	fp, [sp, #12]
 80022fc:	9a06      	ldr	r2, [sp, #24]
 80022fe:	f8dd a000 	ldr.w	sl, [sp]
 8002302:	9201      	str	r2, [sp, #4]
 8002304:	9a03      	ldr	r2, [sp, #12]
 8002306:	2a00      	cmp	r2, #0
 8002308:	d052      	beq.n	80023b0 <forward_matmul+0x124>
 800230a:	9507      	str	r5, [sp, #28]
 800230c:	f04f 0b00 	mov.w	fp, #0
 8002310:	f8cd c010 	str.w	ip, [sp, #16]
 8002314:	9200      	str	r2, [sp, #0]
 8002316:	9a04      	ldr	r2, [sp, #16]
 8002318:	2a00      	cmp	r2, #0
 800231a:	d03f      	beq.n	800239c <forward_matmul+0x110>
 800231c:	f04f 0c00 	mov.w	ip, #0
 8002320:	9008      	str	r0, [sp, #32]
 8002322:	9808      	ldr	r0, [sp, #32]
 8002324:	6805      	ldr	r5, [r0, #0]
 8002326:	6838      	ldr	r0, [r7, #0]
 8002328:	68ae      	ldr	r6, [r5, #8]
 800232a:	6880      	ldr	r0, [r0, #8]
 800232c:	1936      	adds	r6, r6, r4
 800232e:	4456      	add	r6, sl
 8002330:	4448      	add	r0, r9
 8002332:	eb06 050c 	add.w	r5, r6, ip
 8002336:	4458      	add	r0, fp
 8002338:	eb00 060c 	add.w	r6, r0, ip
 800233c:	ed9f 0a28 	vldr	s0, [pc, #160]	; 80023e0 <.text_21>
 8002340:	b321      	cbz	r1, 800238c <forward_matmul+0x100>
 8002342:	07c8      	lsls	r0, r1, #31
 8002344:	d509      	bpl.n	800235a <forward_matmul+0xce>
 8002346:	edd5 0a00 	vldr	s1, [r5]
 800234a:	ed96 1a00 	vldr	s2, [r6]
 800234e:	ee00 0a81 	vmla.f32	s0, s1, s2
 8002352:	eb05 058e 	add.w	r5, r5, lr, lsl #2
 8002356:	eb06 0688 	add.w	r6, r6, r8, lsl #2
 800235a:	0848      	lsrs	r0, r1, #1
 800235c:	f000 8016 	beq.w	800238c <forward_matmul+0x100>
 8002360:	edd5 0a00 	vldr	s1, [r5]
 8002364:	ed96 1a00 	vldr	s2, [r6]
 8002368:	eb05 058e 	add.w	r5, r5, lr, lsl #2
 800236c:	eb06 0688 	add.w	r6, r6, r8, lsl #2
 8002370:	ee00 0a81 	vmla.f32	s0, s1, s2
 8002374:	edd5 0a00 	vldr	s1, [r5]
 8002378:	ed96 1a00 	vldr	s2, [r6]
 800237c:	1e40      	subs	r0, r0, #1
 800237e:	ee00 0a81 	vmla.f32	s0, s1, s2
 8002382:	eb05 058e 	add.w	r5, r5, lr, lsl #2
 8002386:	eb06 0688 	add.w	r6, r6, r8, lsl #2
 800238a:	d1e9      	bne.n	8002360 <forward_matmul+0xd4>
 800238c:	ed83 0a00 	vstr	s0, [r3]
 8002390:	1d1b      	adds	r3, r3, #4
 8002392:	1e52      	subs	r2, r2, #1
 8002394:	f10c 0c04 	add.w	ip, ip, #4
 8002398:	d1c3      	bne.n	8002322 <forward_matmul+0x96>
 800239a:	9808      	ldr	r0, [sp, #32]
 800239c:	9d00      	ldr	r5, [sp, #0]
 800239e:	9a07      	ldr	r2, [sp, #28]
 80023a0:	1e6d      	subs	r5, r5, #1
 80023a2:	eb0b 0b82 	add.w	fp, fp, r2, lsl #2
 80023a6:	9500      	str	r5, [sp, #0]
 80023a8:	d1b5      	bne.n	8002316 <forward_matmul+0x8a>
 80023aa:	4615      	mov	r5, r2
 80023ac:	f8dd c010 	ldr.w	ip, [sp, #16]
 80023b0:	9e01      	ldr	r6, [sp, #4]
 80023b2:	9a05      	ldr	r2, [sp, #20]
 80023b4:	1e76      	subs	r6, r6, #1
 80023b6:	eb0a 0a82 	add.w	sl, sl, r2, lsl #2
 80023ba:	9601      	str	r6, [sp, #4]
 80023bc:	d1a2      	bne.n	8002304 <forward_matmul+0x78>
 80023be:	4692      	mov	sl, r2
 80023c0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80023c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80023c6:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80023c8:	eb09 0982 	add.w	r9, r9, r2, lsl #2
 80023cc:	9a02      	ldr	r2, [sp, #8]
 80023ce:	1e52      	subs	r2, r2, #1
 80023d0:	eb04 0486 	add.w	r4, r4, r6, lsl #2
 80023d4:	9202      	str	r2, [sp, #8]
 80023d6:	d188      	bne.n	80022ea <forward_matmul+0x5e>
 80023d8:	b00b      	add	sp, #44	; 0x2c
 80023da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080023e0 <.text_21>:
 80023e0:	00000000 	.word	0x00000000

080023e4 <.text_22>:
 80023e4:	08001345 	.word	0x08001345

080023e8 <nl_func_sm_channel_f32>:
 80023e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80023ec:	460f      	mov	r7, r1
 80023ee:	4614      	mov	r4, r2
 80023f0:	ed2d 8b02 	vpush	{d8}
 80023f4:	2c02      	cmp	r4, #2
 80023f6:	4606      	mov	r6, r0
 80023f8:	ed97 8a00 	vldr	s16, [r7]
 80023fc:	eddf 8ac5 	vldr	s17, [pc, #788]	; 8002714 <.text_12>
 8002400:	d33d      	bcc.n	800247e <nl_func_sm_channel_f32+0x96>
 8002402:	1e61      	subs	r1, r4, #1
 8002404:	1d3a      	adds	r2, r7, #4
 8002406:	f011 0003 	ands.w	r0, r1, #3
 800240a:	d00c      	beq.n	8002426 <nl_func_sm_channel_f32+0x3e>
 800240c:	ed92 0a00 	vldr	s0, [r2]
 8002410:	eeb4 0a48 	vcmp.f32	s0, s16
 8002414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002418:	bf58      	it	pl
 800241a:	eeb0 8a40 	vmovpl.f32	s16, s0
 800241e:	1e40      	subs	r0, r0, #1
 8002420:	f102 0204 	add.w	r2, r2, #4
 8002424:	d1f2      	bne.n	800240c <nl_func_sm_channel_f32+0x24>
 8002426:	0889      	lsrs	r1, r1, #2
 8002428:	f000 802b 	beq.w	8002482 <nl_func_sm_channel_f32+0x9a>
 800242c:	ed92 0a00 	vldr	s0, [r2]
 8002430:	eeb4 0a48 	vcmp.f32	s0, s16
 8002434:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002438:	bf58      	it	pl
 800243a:	eeb0 8a40 	vmovpl.f32	s16, s0
 800243e:	ed92 0a01 	vldr	s0, [r2, #4]
 8002442:	eeb4 0a48 	vcmp.f32	s0, s16
 8002446:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800244a:	bf58      	it	pl
 800244c:	eeb0 8a40 	vmovpl.f32	s16, s0
 8002450:	ed92 0a02 	vldr	s0, [r2, #8]
 8002454:	eeb4 0a48 	vcmp.f32	s0, s16
 8002458:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800245c:	bf58      	it	pl
 800245e:	eeb0 8a40 	vmovpl.f32	s16, s0
 8002462:	ed92 0a03 	vldr	s0, [r2, #12]
 8002466:	eeb4 0a48 	vcmp.f32	s0, s16
 800246a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800246e:	bf58      	it	pl
 8002470:	eeb0 8a40 	vmovpl.f32	s16, s0
 8002474:	1e49      	subs	r1, r1, #1
 8002476:	f102 0210 	add.w	r2, r2, #16
 800247a:	d1d7      	bne.n	800242c <nl_func_sm_channel_f32+0x44>
 800247c:	e001      	b.n	8002482 <nl_func_sm_channel_f32+0x9a>
 800247e:	2c00      	cmp	r4, #0
 8002480:	d040      	beq.n	8002504 <nl_func_sm_channel_f32+0x11c>
 8002482:	46b0      	mov	r8, r6
 8002484:	ea4f 0504 	mov.w	r5, r4
 8002488:	ed97 0a00 	vldr	s0, [r7]
 800248c:	ee30 0a48 	vsub.f32	s0, s0, s16
 8002490:	f006 fc6c 	bl	8008d6c <expf>
 8002494:	1d3f      	adds	r7, r7, #4
 8002496:	ed88 0a00 	vstr	s0, [r8]
 800249a:	1e6d      	subs	r5, r5, #1
 800249c:	ee78 8a80 	vadd.f32	s17, s17, s0
 80024a0:	f108 0804 	add.w	r8, r8, #4
 80024a4:	d1f0      	bne.n	8002488 <nl_func_sm_channel_f32+0xa0>
 80024a6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80024aa:	f014 0003 	ands.w	r0, r4, #3
 80024ae:	ee80 0a28 	vdiv.f32	s0, s0, s17
 80024b2:	d009      	beq.n	80024c8 <nl_func_sm_channel_f32+0xe0>
 80024b4:	edd6 0a00 	vldr	s1, [r6]
 80024b8:	ee60 0a80 	vmul.f32	s1, s1, s0
 80024bc:	edc6 0a00 	vstr	s1, [r6]
 80024c0:	1e40      	subs	r0, r0, #1
 80024c2:	f106 0604 	add.w	r6, r6, #4
 80024c6:	d1f5      	bne.n	80024b4 <nl_func_sm_channel_f32+0xcc>
 80024c8:	08a4      	lsrs	r4, r4, #2
 80024ca:	d01b      	beq.n	8002504 <nl_func_sm_channel_f32+0x11c>
 80024cc:	edd6 0a00 	vldr	s1, [r6]
 80024d0:	ee60 0a80 	vmul.f32	s1, s1, s0
 80024d4:	edc6 0a00 	vstr	s1, [r6]
 80024d8:	1e64      	subs	r4, r4, #1
 80024da:	ed96 1a01 	vldr	s2, [r6, #4]
 80024de:	edd6 0a02 	vldr	s1, [r6, #8]
 80024e2:	ee21 1a00 	vmul.f32	s2, s2, s0
 80024e6:	ed86 1a01 	vstr	s2, [r6, #4]
 80024ea:	ee60 0a80 	vmul.f32	s1, s1, s0
 80024ee:	ed96 1a03 	vldr	s2, [r6, #12]
 80024f2:	edc6 0a02 	vstr	s1, [r6, #8]
 80024f6:	ee21 1a00 	vmul.f32	s2, s2, s0
 80024fa:	ed86 1a03 	vstr	s2, [r6, #12]
 80024fe:	f106 0610 	add.w	r6, r6, #16
 8002502:	d1e3      	bne.n	80024cc <nl_func_sm_channel_f32+0xe4>
 8002504:	ecbd 8b02 	vpop	{d8}
 8002508:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800250c <nl_func_sm_array_f32>:
 800250c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002510:	b081      	sub	sp, #4
 8002512:	460c      	mov	r4, r1
 8002514:	9f08      	ldr	r7, [sp, #32]
 8002516:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8002518:	00bf      	lsls	r7, r7, #2
 800251a:	427f      	negs	r7, r7
 800251c:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8002520:	19cd      	adds	r5, r1, r7
 8002522:	00b6      	lsls	r6, r6, #2
 8002524:	4276      	negs	r6, r6
 8002526:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 800252a:	42a5      	cmp	r5, r4
 800252c:	4698      	mov	r8, r3
 800252e:	eb00 0906 	add.w	r9, r0, r6
 8002532:	d309      	bcc.n	8002548 <nl_func_sm_array_f32+0x3c>
 8002534:	2300      	movs	r3, #0
 8002536:	4642      	mov	r2, r8
 8002538:	4629      	mov	r1, r5
 800253a:	4648      	mov	r0, r9
 800253c:	f7ff ff54 	bl	80023e8 <nl_func_sm_channel_f32>
 8002540:	19ed      	adds	r5, r5, r7
 8002542:	42a5      	cmp	r5, r4
 8002544:	44b1      	add	r9, r6
 8002546:	d2f5      	bcs.n	8002534 <nl_func_sm_array_f32+0x28>
 8002548:	b001      	add	sp, #4
 800254a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08002550 <nl_func_tanh_array_f32>:
 8002550:	b570      	push	{r4, r5, r6, lr}
 8002552:	460c      	mov	r4, r1
 8002554:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8002558:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 800255c:	1f0d      	subs	r5, r1, #4
 800255e:	1f06      	subs	r6, r0, #4
 8002560:	42a5      	cmp	r5, r4
 8002562:	d309      	bcc.n	8002578 <nl_func_tanh_array_f32+0x28>
 8002564:	ed95 0a00 	vldr	s0, [r5]
 8002568:	f006 fbae 	bl	8008cc8 <tanhf>
 800256c:	ed86 0a00 	vstr	s0, [r6]
 8002570:	1f2d      	subs	r5, r5, #4
 8002572:	1f36      	subs	r6, r6, #4
 8002574:	42a5      	cmp	r5, r4
 8002576:	d2f5      	bcs.n	8002564 <nl_func_tanh_array_f32+0x14>
 8002578:	bd70      	pop	{r4, r5, r6, pc}
	...

0800257c <nl_func_sigmoid_array_f32>:
 800257c:	b570      	push	{r4, r5, r6, lr}
 800257e:	460c      	mov	r4, r1
 8002580:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8002584:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8002588:	1f0d      	subs	r5, r1, #4
 800258a:	1f06      	subs	r6, r0, #4
 800258c:	42a5      	cmp	r5, r4
 800258e:	d313      	bcc.n	80025b8 <nl_func_sigmoid_array_f32+0x3c>
 8002590:	ed95 0a00 	vldr	s0, [r5]
 8002594:	eeb1 0a40 	vneg.f32	s0, s0
 8002598:	f006 fbe8 	bl	8008d6c <expf>
 800259c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80025a0:	ee70 0a20 	vadd.f32	s1, s0, s1
 80025a4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80025a8:	ee80 0a20 	vdiv.f32	s0, s0, s1
 80025ac:	ed86 0a00 	vstr	s0, [r6]
 80025b0:	1f2d      	subs	r5, r5, #4
 80025b2:	1f36      	subs	r6, r6, #4
 80025b4:	42a5      	cmp	r5, r4
 80025b6:	d2eb      	bcs.n	8002590 <nl_func_sigmoid_array_f32+0x14>
 80025b8:	bd70      	pop	{r4, r5, r6, pc}
	...

080025bc <nl_func_hard_sigmoid_array_f32>:
 80025bc:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 80025c0:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 80025c4:	1f1b      	subs	r3, r3, #4
 80025c6:	1f00      	subs	r0, r0, #4
 80025c8:	428b      	cmp	r3, r1
 80025ca:	d321      	bcc.n	8002610 <nl_func_hard_sigmoid_array_f32+0x54>
 80025cc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80025d0:	eddf 0aa6 	vldr	s1, [pc, #664]	; 800286c <.text_16>
 80025d4:	edd3 1a00 	vldr	s3, [r3]
 80025d8:	ed9f 2aa5 	vldr	s4, [pc, #660]	; 8002870 <.text_17>
 80025dc:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 80025e0:	ee01 1a82 	vmla.f32	s2, s3, s4
 80025e4:	eeb4 1a60 	vcmp.f32	s2, s1
 80025e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025ec:	da08      	bge.n	8002600 <nl_func_hard_sigmoid_array_f32+0x44>
 80025ee:	eeb5 1a40 	vcmp.f32	s2, #0.0
 80025f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025f6:	d505      	bpl.n	8002604 <nl_func_hard_sigmoid_array_f32+0x48>
 80025f8:	ed9f 1a46 	vldr	s2, [pc, #280]	; 8002714 <.text_12>
 80025fc:	e002      	b.n	8002604 <nl_func_hard_sigmoid_array_f32+0x48>
 80025fe:	bf00      	nop
 8002600:	eeb0 1a40 	vmov.f32	s2, s0
 8002604:	ed80 1a00 	vstr	s2, [r0]
 8002608:	1f1b      	subs	r3, r3, #4
 800260a:	1f00      	subs	r0, r0, #4
 800260c:	428b      	cmp	r3, r1
 800260e:	d2e1      	bcs.n	80025d4 <nl_func_hard_sigmoid_array_f32+0x18>
 8002610:	4770      	bx	lr
	...

08002614 <nl_func_exp_array_f32>:
 8002614:	b570      	push	{r4, r5, r6, lr}
 8002616:	460c      	mov	r4, r1
 8002618:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 800261c:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8002620:	1f0d      	subs	r5, r1, #4
 8002622:	1f06      	subs	r6, r0, #4
 8002624:	42a5      	cmp	r5, r4
 8002626:	d309      	bcc.n	800263c <nl_func_exp_array_f32+0x28>
 8002628:	ed95 0a00 	vldr	s0, [r5]
 800262c:	f006 fb9e 	bl	8008d6c <expf>
 8002630:	ed86 0a00 	vstr	s0, [r6]
 8002634:	1f2d      	subs	r5, r5, #4
 8002636:	1f36      	subs	r6, r6, #4
 8002638:	42a5      	cmp	r5, r4
 800263a:	d2f5      	bcs.n	8002628 <nl_func_exp_array_f32+0x14>
 800263c:	bd70      	pop	{r4, r5, r6, pc}
	...

08002640 <nl_func_sqrt_array_f32>:
 8002640:	b570      	push	{r4, r5, r6, lr}
 8002642:	460c      	mov	r4, r1
 8002644:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8002648:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 800264c:	1f0d      	subs	r5, r1, #4
 800264e:	1f06      	subs	r6, r0, #4
 8002650:	42a5      	cmp	r5, r4
 8002652:	d309      	bcc.n	8002668 <nl_func_sqrt_array_f32+0x28>
 8002654:	ed95 0a00 	vldr	s0, [r5]
 8002658:	f001 f9a8 	bl	80039ac <ai_math_sqrt>
 800265c:	ed86 0a00 	vstr	s0, [r6]
 8002660:	1f2d      	subs	r5, r5, #4
 8002662:	1f36      	subs	r6, r6, #4
 8002664:	42a5      	cmp	r5, r4
 8002666:	d2f5      	bcs.n	8002654 <nl_func_sqrt_array_f32+0x14>
 8002668:	bd70      	pop	{r4, r5, r6, pc}
	...

0800266c <nl_func_soft_plus_array_f32>:
 800266c:	b570      	push	{r4, r5, r6, lr}
 800266e:	460c      	mov	r4, r1
 8002670:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8002674:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8002678:	1f0d      	subs	r5, r1, #4
 800267a:	1f06      	subs	r6, r0, #4
 800267c:	42a5      	cmp	r5, r4
 800267e:	d30f      	bcc.n	80026a0 <nl_func_soft_plus_array_f32+0x34>
 8002680:	ed95 0a00 	vldr	s0, [r5]
 8002684:	f006 fb72 	bl	8008d6c <expf>
 8002688:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800268c:	ee30 0a20 	vadd.f32	s0, s0, s1
 8002690:	f006 fbe6 	bl	8008e60 <logf>
 8002694:	ed86 0a00 	vstr	s0, [r6]
 8002698:	1f2d      	subs	r5, r5, #4
 800269a:	1f36      	subs	r6, r6, #4
 800269c:	42a5      	cmp	r5, r4
 800269e:	d2ef      	bcs.n	8002680 <nl_func_soft_plus_array_f32+0x14>
 80026a0:	bd70      	pop	{r4, r5, r6, pc}
	...

080026a4 <nl_func_soft_sign_array_f32>:
 80026a4:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 80026a8:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 80026ac:	1f1b      	subs	r3, r3, #4
 80026ae:	1f00      	subs	r0, r0, #4
 80026b0:	428b      	cmp	r3, r1
 80026b2:	d30f      	bcc.n	80026d4 <nl_func_soft_sign_array_f32+0x30>
 80026b4:	ed93 0a00 	vldr	s0, [r3]
 80026b8:	eef0 0ac0 	vabs.f32	s1, s0
 80026bc:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80026c0:	ee70 0a81 	vadd.f32	s1, s1, s2
 80026c4:	ee80 0a20 	vdiv.f32	s0, s0, s1
 80026c8:	ed80 0a00 	vstr	s0, [r0]
 80026cc:	1f1b      	subs	r3, r3, #4
 80026ce:	1f00      	subs	r0, r0, #4
 80026d0:	428b      	cmp	r3, r1
 80026d2:	d2ef      	bcs.n	80026b4 <nl_func_soft_sign_array_f32+0x10>
 80026d4:	4770      	bx	lr
	...

080026d8 <nl_func_sign_array_f32>:
 80026d8:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 80026dc:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 80026e0:	1f1b      	subs	r3, r3, #4
 80026e2:	1f00      	subs	r0, r0, #4
 80026e4:	428b      	cmp	r3, r1
 80026e6:	d314      	bcc.n	8002712 <nl_func_sign_array_f32+0x3a>
 80026e8:	f04f 32ff 	mov.w	r2, #4294967295
 80026ec:	ed93 0a00 	vldr	s0, [r3]
 80026f0:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80026f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026f8:	bfcc      	ite	gt
 80026fa:	ed9f 0ab9 	vldrgt	s0, [pc, #740]	; 80029e0 <.text_21>
 80026fe:	ee00 2a10 	vmovle	s0, r2
 8002702:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8002706:	ed80 0a00 	vstr	s0, [r0]
 800270a:	1f1b      	subs	r3, r3, #4
 800270c:	1f00      	subs	r0, r0, #4
 800270e:	428b      	cmp	r3, r1
 8002710:	d2ec      	bcs.n	80026ec <nl_func_sign_array_f32+0x14>
 8002712:	4770      	bx	lr

08002714 <.text_12>:
 8002714:	00000000 	.word	0x00000000

08002718 <nl_func_clip_array_f32>:
 8002718:	ed93 0a00 	vldr	s0, [r3]
 800271c:	edd3 0a01 	vldr	s1, [r3, #4]
 8002720:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8002724:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8002728:	1f1b      	subs	r3, r3, #4
 800272a:	1f00      	subs	r0, r0, #4
 800272c:	428b      	cmp	r3, r1
 800272e:	d315      	bcc.n	800275c <nl_func_clip_array_f32+0x44>
 8002730:	ed93 1a00 	vldr	s2, [r3]
 8002734:	eeb4 0a41 	vcmp.f32	s0, s2
 8002738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800273c:	bf58      	it	pl
 800273e:	eeb0 1a40 	vmovpl.f32	s2, s0
 8002742:	eeb4 1a60 	vcmp.f32	s2, s1
 8002746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800274a:	bf58      	it	pl
 800274c:	eeb0 1a60 	vmovpl.f32	s2, s1
 8002750:	ed80 1a00 	vstr	s2, [r0]
 8002754:	1f1b      	subs	r3, r3, #4
 8002756:	1f00      	subs	r0, r0, #4
 8002758:	428b      	cmp	r3, r1
 800275a:	d2e9      	bcs.n	8002730 <nl_func_clip_array_f32+0x18>
 800275c:	4770      	bx	lr
	...

08002760 <nl_func_hardmax_array_f32>:
 8002760:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002764:	6856      	ldr	r6, [r2, #4]
 8002766:	68d4      	ldr	r4, [r2, #12]
 8002768:	4688      	mov	r8, r1
 800276a:	4374      	muls	r4, r6
 800276c:	4605      	mov	r5, r0
 800276e:	00a1      	lsls	r1, r4, #2
 8002770:	f006 fa59 	bl	8008c26 <__aeabi_memclr>
 8002774:	2200      	movs	r2, #0
 8002776:	2c00      	cmp	r4, #0
 8002778:	4643      	mov	r3, r8
 800277a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800277e:	d05a      	beq.n	8002836 <nl_func_hardmax_array_f32+0xd6>
 8002780:	f102 0c01 	add.w	ip, r2, #1
 8002784:	eb06 0e02 	add.w	lr, r6, r2
 8002788:	45f4      	cmp	ip, lr
 800278a:	edd3 0a00 	vldr	s1, [r3]
 800278e:	d249      	bcs.n	8002824 <nl_func_hardmax_array_f32+0xc4>
 8002790:	1e71      	subs	r1, r6, #1
 8002792:	f011 0003 	ands.w	r0, r1, #3
 8002796:	eb08 078c 	add.w	r7, r8, ip, lsl #2
 800279a:	d00f      	beq.n	80027bc <nl_func_hardmax_array_f32+0x5c>
 800279c:	ed97 1a00 	vldr	s2, [r7]
 80027a0:	eef4 0a41 	vcmp.f32	s1, s2
 80027a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027a8:	bf44      	itt	mi
 80027aa:	eef0 0a41 	vmovmi.f32	s1, s2
 80027ae:	4662      	movmi	r2, ip
 80027b0:	1e40      	subs	r0, r0, #1
 80027b2:	f10c 0c01 	add.w	ip, ip, #1
 80027b6:	f107 0704 	add.w	r7, r7, #4
 80027ba:	d1ef      	bne.n	800279c <nl_func_hardmax_array_f32+0x3c>
 80027bc:	0889      	lsrs	r1, r1, #2
 80027be:	d031      	beq.n	8002824 <nl_func_hardmax_array_f32+0xc4>
 80027c0:	ed97 1a00 	vldr	s2, [r7]
 80027c4:	eef4 0a41 	vcmp.f32	s1, s2
 80027c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027cc:	bf44      	itt	mi
 80027ce:	eef0 0a41 	vmovmi.f32	s1, s2
 80027d2:	4662      	movmi	r2, ip
 80027d4:	ed97 1a01 	vldr	s2, [r7, #4]
 80027d8:	eef4 0a41 	vcmp.f32	s1, s2
 80027dc:	f10c 0001 	add.w	r0, ip, #1
 80027e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027e4:	bf44      	itt	mi
 80027e6:	eef0 0a41 	vmovmi.f32	s1, s2
 80027ea:	4602      	movmi	r2, r0
 80027ec:	ed97 1a02 	vldr	s2, [r7, #8]
 80027f0:	1c40      	adds	r0, r0, #1
 80027f2:	eef4 0a41 	vcmp.f32	s1, s2
 80027f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027fa:	bf44      	itt	mi
 80027fc:	eef0 0a41 	vmovmi.f32	s1, s2
 8002800:	4602      	movmi	r2, r0
 8002802:	ed97 1a03 	vldr	s2, [r7, #12]
 8002806:	1c40      	adds	r0, r0, #1
 8002808:	eef4 0a41 	vcmp.f32	s1, s2
 800280c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002810:	bf44      	itt	mi
 8002812:	eef0 0a41 	vmovmi.f32	s1, s2
 8002816:	4602      	movmi	r2, r0
 8002818:	1e49      	subs	r1, r1, #1
 800281a:	f100 0c01 	add.w	ip, r0, #1
 800281e:	f107 0710 	add.w	r7, r7, #16
 8002822:	d1cd      	bne.n	80027c0 <nl_func_hardmax_array_f32+0x60>
 8002824:	eb05 0082 	add.w	r0, r5, r2, lsl #2
 8002828:	4672      	mov	r2, lr
 800282a:	42a2      	cmp	r2, r4
 800282c:	ed80 0a00 	vstr	s0, [r0]
 8002830:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8002834:	d3a4      	bcc.n	8002780 <nl_func_hardmax_array_f32+0x20>
 8002836:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800283c <nl_func_relu_array_f32>:
 800283c:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8002840:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8002844:	1f1b      	subs	r3, r3, #4
 8002846:	1f00      	subs	r0, r0, #4
 8002848:	428b      	cmp	r3, r1
 800284a:	d30e      	bcc.n	800286a <nl_func_relu_array_f32+0x2e>
 800284c:	ed93 0a00 	vldr	s0, [r3]
 8002850:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8002854:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002858:	bf48      	it	mi
 800285a:	ed9f 0ab9 	vldrmi	s0, [pc, #740]	; 8002b40 <.text_25>
 800285e:	ed80 0a00 	vstr	s0, [r0]
 8002862:	1f1b      	subs	r3, r3, #4
 8002864:	1f00      	subs	r0, r0, #4
 8002866:	428b      	cmp	r3, r1
 8002868:	d2f0      	bcs.n	800284c <nl_func_relu_array_f32+0x10>
 800286a:	4770      	bx	lr

0800286c <.text_16>:
 800286c:	3f800001 	.word	0x3f800001

08002870 <.text_17>:
 8002870:	3e4ccccd 	.word	0x3e4ccccd

08002874 <nl_func_relu_generic_array_f32>:
 8002874:	ed93 0a00 	vldr	s0, [r3]
 8002878:	edd3 0a01 	vldr	s1, [r3, #4]
 800287c:	ed93 1a02 	vldr	s2, [r3, #8]
 8002880:	1f00      	subs	r0, r0, #4
 8002882:	eeb5 1a40 	vcmp.f32	s2, #0.0
 8002886:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 800288a:	1f0b      	subs	r3, r1, #4
 800288c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002890:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8002894:	d52a      	bpl.n	80028ec <nl_func_relu_generic_array_f32+0x78>
 8002896:	eef5 0a40 	vcmp.f32	s1, #0.0
 800289a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800289e:	d013      	beq.n	80028c8 <nl_func_relu_generic_array_f32+0x54>
 80028a0:	428a      	cmp	r2, r1
 80028a2:	d310      	bcc.n	80028c6 <nl_func_relu_generic_array_f32+0x52>
 80028a4:	ed92 1a00 	vldr	s2, [r2]
 80028a8:	eeb4 1a40 	vcmp.f32	s2, s0
 80028ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028b0:	bf44      	itt	mi
 80028b2:	ee31 1a40 	vsubmi.f32	s2, s2, s0
 80028b6:	ee21 1a20 	vmulmi.f32	s2, s2, s1
 80028ba:	ed80 1a00 	vstr	s2, [r0]
 80028be:	1f12      	subs	r2, r2, #4
 80028c0:	1f00      	subs	r0, r0, #4
 80028c2:	428a      	cmp	r2, r1
 80028c4:	d2ee      	bcs.n	80028a4 <nl_func_relu_generic_array_f32+0x30>
 80028c6:	4770      	bx	lr
 80028c8:	428a      	cmp	r2, r1
 80028ca:	d3fc      	bcc.n	80028c6 <nl_func_relu_generic_array_f32+0x52>
 80028cc:	edd2 0a00 	vldr	s1, [r2]
 80028d0:	eef4 0a40 	vcmp.f32	s1, s0
 80028d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028d8:	bf48      	it	mi
 80028da:	eddf 0a99 	vldrmi	s1, [pc, #612]	; 8002b40 <.text_25>
 80028de:	edc0 0a00 	vstr	s1, [r0]
 80028e2:	1f12      	subs	r2, r2, #4
 80028e4:	1f00      	subs	r0, r0, #4
 80028e6:	428a      	cmp	r2, r1
 80028e8:	d2f0      	bcs.n	80028cc <nl_func_relu_generic_array_f32+0x58>
 80028ea:	4770      	bx	lr
 80028ec:	428a      	cmp	r2, r1
 80028ee:	d3ea      	bcc.n	80028c6 <nl_func_relu_generic_array_f32+0x52>
 80028f0:	edd2 1a00 	vldr	s3, [r2]
 80028f4:	eef4 1a41 	vcmp.f32	s3, s2
 80028f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028fc:	d50a      	bpl.n	8002914 <nl_func_relu_generic_array_f32+0xa0>
 80028fe:	eef4 1a40 	vcmp.f32	s3, s0
 8002902:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002906:	d507      	bpl.n	8002918 <nl_func_relu_generic_array_f32+0xa4>
 8002908:	ee71 1ac0 	vsub.f32	s3, s3, s0
 800290c:	ee61 1aa0 	vmul.f32	s3, s3, s1
 8002910:	e002      	b.n	8002918 <nl_func_relu_generic_array_f32+0xa4>
 8002912:	bf00      	nop
 8002914:	eef0 1a41 	vmov.f32	s3, s2
 8002918:	edc0 1a00 	vstr	s3, [r0]
 800291c:	1f12      	subs	r2, r2, #4
 800291e:	1f00      	subs	r0, r0, #4
 8002920:	428a      	cmp	r2, r1
 8002922:	d2e5      	bcs.n	80028f0 <nl_func_relu_generic_array_f32+0x7c>
 8002924:	4770      	bx	lr
	...

08002928 <nl_func_relu_thresholded_array_f32>:
 8002928:	ed93 0a00 	vldr	s0, [r3]
 800292c:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8002930:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8002934:	1f1b      	subs	r3, r3, #4
 8002936:	1f00      	subs	r0, r0, #4
 8002938:	428b      	cmp	r3, r1
 800293a:	d30e      	bcc.n	800295a <nl_func_relu_thresholded_array_f32+0x32>
 800293c:	edd3 0a00 	vldr	s1, [r3]
 8002940:	eef4 0a40 	vcmp.f32	s1, s0
 8002944:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002948:	bf48      	it	mi
 800294a:	eddf 0a7d 	vldrmi	s1, [pc, #500]	; 8002b40 <.text_25>
 800294e:	edc0 0a00 	vstr	s1, [r0]
 8002952:	1f1b      	subs	r3, r3, #4
 8002954:	1f00      	subs	r0, r0, #4
 8002956:	428b      	cmp	r3, r1
 8002958:	d2f0      	bcs.n	800293c <nl_func_relu_thresholded_array_f32+0x14>
 800295a:	4770      	bx	lr

0800295c <nl_func_elu_array_f32>:
 800295c:	b570      	push	{r4, r5, r6, lr}
 800295e:	460c      	mov	r4, r1
 8002960:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8002964:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8002968:	1f0d      	subs	r5, r1, #4
 800296a:	1f06      	subs	r6, r0, #4
 800296c:	ed2d 8b04 	vpush	{d8-d9}
 8002970:	42a5      	cmp	r5, r4
 8002972:	ed93 8a00 	vldr	s16, [r3]
 8002976:	d32f      	bcc.n	80029d8 <nl_func_elu_array_f32+0x7c>
 8002978:	edd5 8a00 	vldr	s17, [r5]
 800297c:	eef5 8a40 	vcmp.f32	s17, #0.0
 8002980:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002984:	bf4c      	ite	mi
 8002986:	ed9f 9a6e 	vldrmi	s18, [pc, #440]	; 8002b40 <.text_25>
 800298a:	eeb0 9a68 	vmovpl.f32	s18, s17
 800298e:	eeb0 0a68 	vmov.f32	s0, s17
 8002992:	f006 f9eb 	bl	8008d6c <expf>
 8002996:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 800299a:	ee30 0a20 	vadd.f32	s0, s0, s1
 800299e:	ee20 0a08 	vmul.f32	s0, s0, s16
 80029a2:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80029a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029aa:	dd05      	ble.n	80029b8 <nl_func_elu_array_f32+0x5c>
 80029ac:	ed9f 1a64 	vldr	s2, [pc, #400]	; 8002b40 <.text_25>
 80029b0:	ee39 9a01 	vadd.f32	s18, s18, s2
 80029b4:	e00a      	b.n	80029cc <nl_func_elu_array_f32+0x70>
 80029b6:	bf00      	nop
 80029b8:	eeb0 0a68 	vmov.f32	s0, s17
 80029bc:	f006 f9d6 	bl	8008d6c <expf>
 80029c0:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 80029c4:	ee30 0a20 	vadd.f32	s0, s0, s1
 80029c8:	ee00 9a08 	vmla.f32	s18, s0, s16
 80029cc:	ed86 9a00 	vstr	s18, [r6]
 80029d0:	1f2d      	subs	r5, r5, #4
 80029d2:	1f36      	subs	r6, r6, #4
 80029d4:	42a5      	cmp	r5, r4
 80029d6:	d2cf      	bcs.n	8002978 <nl_func_elu_array_f32+0x1c>
 80029d8:	ecbd 8b04 	vpop	{d8-d9}
 80029dc:	bd70      	pop	{r4, r5, r6, pc}
	...

080029e0 <.text_21>:
 80029e0:	00000001 	.word	0x00000001

080029e4 <nl_func_selu_array_f32>:
 80029e4:	b570      	push	{r4, r5, r6, lr}
 80029e6:	460c      	mov	r4, r1
 80029e8:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 80029ec:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 80029f0:	1f0d      	subs	r5, r1, #4
 80029f2:	1f06      	subs	r6, r0, #4
 80029f4:	ed2d 8b04 	vpush	{d8-d9}
 80029f8:	42a5      	cmp	r5, r4
 80029fa:	ed93 8a00 	vldr	s16, [r3]
 80029fe:	edd3 8a01 	vldr	s17, [r3, #4]
 8002a02:	d331      	bcc.n	8002a68 <nl_func_selu_array_f32+0x84>
 8002a04:	ed95 9a00 	vldr	s18, [r5]
 8002a08:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8002a0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a10:	bf4c      	ite	mi
 8002a12:	eddf 9a4b 	vldrmi	s19, [pc, #300]	; 8002b40 <.text_25>
 8002a16:	eef0 9a49 	vmovpl.f32	s19, s18
 8002a1a:	eeb0 0a49 	vmov.f32	s0, s18
 8002a1e:	f006 f9a5 	bl	8008d6c <expf>
 8002a22:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8002a26:	ee30 0a20 	vadd.f32	s0, s0, s1
 8002a2a:	ee20 0a08 	vmul.f32	s0, s0, s16
 8002a2e:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8002a32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a36:	dd05      	ble.n	8002a44 <nl_func_selu_array_f32+0x60>
 8002a38:	ed9f 1a41 	vldr	s2, [pc, #260]	; 8002b40 <.text_25>
 8002a3c:	ee79 9a81 	vadd.f32	s19, s19, s2
 8002a40:	e00a      	b.n	8002a58 <nl_func_selu_array_f32+0x74>
 8002a42:	bf00      	nop
 8002a44:	eeb0 0a49 	vmov.f32	s0, s18
 8002a48:	f006 f990 	bl	8008d6c <expf>
 8002a4c:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8002a50:	ee30 0a20 	vadd.f32	s0, s0, s1
 8002a54:	ee40 9a08 	vmla.f32	s19, s0, s16
 8002a58:	ee28 0aa9 	vmul.f32	s0, s17, s19
 8002a5c:	ed86 0a00 	vstr	s0, [r6]
 8002a60:	1f2d      	subs	r5, r5, #4
 8002a62:	1f36      	subs	r6, r6, #4
 8002a64:	42a5      	cmp	r5, r4
 8002a66:	d2cd      	bcs.n	8002a04 <nl_func_selu_array_f32+0x20>
 8002a68:	ecbd 8b04 	vpop	{d8-d9}
 8002a6c:	bd70      	pop	{r4, r5, r6, pc}
	...

08002a70 <nl_func_prelu_array_f32>:
 8002a70:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8002a74:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 8002a78:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8002a7c:	1f1b      	subs	r3, r3, #4
 8002a7e:	f1ac 0c04 	sub.w	ip, ip, #4
 8002a82:	1f00      	subs	r0, r0, #4
 8002a84:	458c      	cmp	ip, r1
 8002a86:	d320      	bcc.n	8002aca <nl_func_prelu_array_f32+0x5a>
 8002a88:	ed9c 0a00 	vldr	s0, [ip]
 8002a8c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8002a90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a94:	bf4c      	ite	mi
 8002a96:	eddf 0a2a 	vldrmi	s1, [pc, #168]	; 8002b40 <.text_25>
 8002a9a:	eef0 0a40 	vmovpl.f32	s1, s0
 8002a9e:	461a      	mov	r2, r3
 8002aa0:	eeb1 0a40 	vneg.f32	s0, s0
 8002aa4:	1f13      	subs	r3, r2, #4
 8002aa6:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8002aaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002aae:	bf48      	it	mi
 8002ab0:	ed9f 0a23 	vldrmi	s0, [pc, #140]	; 8002b40 <.text_25>
 8002ab4:	ed92 1a00 	vldr	s2, [r2]
 8002ab8:	ee41 0a40 	vmls.f32	s1, s2, s0
 8002abc:	edc0 0a00 	vstr	s1, [r0]
 8002ac0:	f1ac 0c04 	sub.w	ip, ip, #4
 8002ac4:	1f00      	subs	r0, r0, #4
 8002ac6:	458c      	cmp	ip, r1
 8002ac8:	d2de      	bcs.n	8002a88 <nl_func_prelu_array_f32+0x18>
 8002aca:	4770      	bx	lr

08002acc <forward_relu>:
 8002acc:	b430      	push	{r4, r5}
 8002ace:	4602      	mov	r2, r0
 8002ad0:	6950      	ldr	r0, [r2, #20]
 8002ad2:	6800      	ldr	r0, [r0, #0]
 8002ad4:	6801      	ldr	r1, [r0, #0]
 8002ad6:	68c0      	ldr	r0, [r0, #12]
 8002ad8:	680b      	ldr	r3, [r1, #0]
 8002ada:	6805      	ldr	r5, [r0, #0]
 8002adc:	685c      	ldr	r4, [r3, #4]
 8002ade:	6898      	ldr	r0, [r3, #8]
 8002ae0:	68d9      	ldr	r1, [r3, #12]
 8002ae2:	682d      	ldr	r5, [r5, #0]
 8002ae4:	6992      	ldr	r2, [r2, #24]
 8002ae6:	4344      	muls	r4, r0
 8002ae8:	6918      	ldr	r0, [r3, #16]
 8002aea:	434c      	muls	r4, r1
 8002aec:	6819      	ldr	r1, [r3, #0]
 8002aee:	6889      	ldr	r1, [r1, #8]
 8002af0:	4344      	muls	r4, r0
 8002af2:	68a8      	ldr	r0, [r5, #8]
 8002af4:	b9ca      	cbnz	r2, 8002b2a <forward_relu+0x5e>
 8002af6:	eb01 0284 	add.w	r2, r1, r4, lsl #2
 8002afa:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 8002afe:	1f12      	subs	r2, r2, #4
 8002b00:	1f00      	subs	r0, r0, #4
 8002b02:	428a      	cmp	r2, r1
 8002b04:	f0c0 801a 	bcc.w	8002b3c <forward_relu+0x70>
 8002b08:	ed92 0a00 	vldr	s0, [r2]
 8002b0c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8002b10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b14:	bf48      	it	mi
 8002b16:	ed9f 0a0a 	vldrmi	s0, [pc, #40]	; 8002b40 <.text_25>
 8002b1a:	ed80 0a00 	vstr	s0, [r0]
 8002b1e:	1f12      	subs	r2, r2, #4
 8002b20:	1f00      	subs	r0, r0, #4
 8002b22:	428a      	cmp	r2, r1
 8002b24:	d2f0      	bcs.n	8002b08 <forward_relu+0x3c>
 8002b26:	bc30      	pop	{r4, r5}
 8002b28:	4770      	bx	lr
 8002b2a:	6893      	ldr	r3, [r2, #8]
 8002b2c:	6852      	ldr	r2, [r2, #4]
 8002b2e:	2a01      	cmp	r2, #1
 8002b30:	4622      	mov	r2, r4
 8002b32:	d101      	bne.n	8002b38 <forward_relu+0x6c>
 8002b34:	bc30      	pop	{r4, r5}
 8002b36:	e6f7      	b.n	8002928 <nl_func_relu_thresholded_array_f32>
 8002b38:	bc30      	pop	{r4, r5}
 8002b3a:	e69b      	b.n	8002874 <nl_func_relu_generic_array_f32>
 8002b3c:	bc30      	pop	{r4, r5}
 8002b3e:	4770      	bx	lr

08002b40 <.text_25>:
 8002b40:	00000000 	.word	0x00000000

08002b44 <forward_relu_thresholded>:
 8002b44:	b430      	push	{r4, r5}
 8002b46:	6941      	ldr	r1, [r0, #20]
 8002b48:	6980      	ldr	r0, [r0, #24]
 8002b4a:	680c      	ldr	r4, [r1, #0]
 8002b4c:	6822      	ldr	r2, [r4, #0]
 8002b4e:	6815      	ldr	r5, [r2, #0]
 8002b50:	686b      	ldr	r3, [r5, #4]
 8002b52:	68a9      	ldr	r1, [r5, #8]
 8002b54:	68ea      	ldr	r2, [r5, #12]
 8002b56:	434b      	muls	r3, r1
 8002b58:	6929      	ldr	r1, [r5, #16]
 8002b5a:	682d      	ldr	r5, [r5, #0]
 8002b5c:	4353      	muls	r3, r2
 8002b5e:	6882      	ldr	r2, [r0, #8]
 8002b60:	ed92 0a00 	vldr	s0, [r2]
 8002b64:	68e2      	ldr	r2, [r4, #12]
 8002b66:	6814      	ldr	r4, [r2, #0]
 8002b68:	434b      	muls	r3, r1
 8002b6a:	68a9      	ldr	r1, [r5, #8]
 8002b6c:	6825      	ldr	r5, [r4, #0]
 8002b6e:	68aa      	ldr	r2, [r5, #8]
 8002b70:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8002b74:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8002b78:	1f00      	subs	r0, r0, #4
 8002b7a:	1f1a      	subs	r2, r3, #4
 8002b7c:	4288      	cmp	r0, r1
 8002b7e:	d30e      	bcc.n	8002b9e <forward_relu_thresholded+0x5a>
 8002b80:	edd0 0a00 	vldr	s1, [r0]
 8002b84:	eef4 0a40 	vcmp.f32	s1, s0
 8002b88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b8c:	bf48      	it	mi
 8002b8e:	eddf 0ac1 	vldrmi	s1, [pc, #772]	; 8002e94 <.text_34>
 8002b92:	edc2 0a00 	vstr	s1, [r2]
 8002b96:	1f00      	subs	r0, r0, #4
 8002b98:	1f12      	subs	r2, r2, #4
 8002b9a:	4288      	cmp	r0, r1
 8002b9c:	d2f0      	bcs.n	8002b80 <forward_relu_thresholded+0x3c>
 8002b9e:	bc30      	pop	{r4, r5}
 8002ba0:	4770      	bx	lr
	...

08002ba4 <forward_elu>:
 8002ba4:	b570      	push	{r4, r5, r6, lr}
 8002ba6:	ed2d 8b04 	vpush	{d8-d9}
 8002baa:	6941      	ldr	r1, [r0, #20]
 8002bac:	680e      	ldr	r6, [r1, #0]
 8002bae:	6832      	ldr	r2, [r6, #0]
 8002bb0:	6814      	ldr	r4, [r2, #0]
 8002bb2:	6863      	ldr	r3, [r4, #4]
 8002bb4:	68a1      	ldr	r1, [r4, #8]
 8002bb6:	68e2      	ldr	r2, [r4, #12]
 8002bb8:	6980      	ldr	r0, [r0, #24]
 8002bba:	434b      	muls	r3, r1
 8002bbc:	6921      	ldr	r1, [r4, #16]
 8002bbe:	6824      	ldr	r4, [r4, #0]
 8002bc0:	68a4      	ldr	r4, [r4, #8]
 8002bc2:	4353      	muls	r3, r2
 8002bc4:	434b      	muls	r3, r1
 8002bc6:	6881      	ldr	r1, [r0, #8]
 8002bc8:	ed91 8a00 	vldr	s16, [r1]
 8002bcc:	68f1      	ldr	r1, [r6, #12]
 8002bce:	eb04 0083 	add.w	r0, r4, r3, lsl #2
 8002bd2:	1f05      	subs	r5, r0, #4
 8002bd4:	6808      	ldr	r0, [r1, #0]
 8002bd6:	6802      	ldr	r2, [r0, #0]
 8002bd8:	6891      	ldr	r1, [r2, #8]
 8002bda:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8002bde:	1f06      	subs	r6, r0, #4
 8002be0:	42a5      	cmp	r5, r4
 8002be2:	d32f      	bcc.n	8002c44 <forward_elu+0xa0>
 8002be4:	edd5 8a00 	vldr	s17, [r5]
 8002be8:	eef5 8a40 	vcmp.f32	s17, #0.0
 8002bec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bf0:	bf4c      	ite	mi
 8002bf2:	ed9f 9aa8 	vldrmi	s18, [pc, #672]	; 8002e94 <.text_34>
 8002bf6:	eeb0 9a68 	vmovpl.f32	s18, s17
 8002bfa:	eeb0 0a68 	vmov.f32	s0, s17
 8002bfe:	f006 f8b5 	bl	8008d6c <expf>
 8002c02:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8002c06:	ee30 0a20 	vadd.f32	s0, s0, s1
 8002c0a:	ee20 0a08 	vmul.f32	s0, s0, s16
 8002c0e:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8002c12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c16:	dd05      	ble.n	8002c24 <forward_elu+0x80>
 8002c18:	ed9f 1a9e 	vldr	s2, [pc, #632]	; 8002e94 <.text_34>
 8002c1c:	ee39 9a01 	vadd.f32	s18, s18, s2
 8002c20:	e00a      	b.n	8002c38 <forward_elu+0x94>
 8002c22:	bf00      	nop
 8002c24:	eeb0 0a68 	vmov.f32	s0, s17
 8002c28:	f006 f8a0 	bl	8008d6c <expf>
 8002c2c:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8002c30:	ee30 0a20 	vadd.f32	s0, s0, s1
 8002c34:	ee00 9a08 	vmla.f32	s18, s0, s16
 8002c38:	ed86 9a00 	vstr	s18, [r6]
 8002c3c:	1f2d      	subs	r5, r5, #4
 8002c3e:	1f36      	subs	r6, r6, #4
 8002c40:	42a5      	cmp	r5, r4
 8002c42:	d2cf      	bcs.n	8002be4 <forward_elu+0x40>
 8002c44:	ecbd 8b04 	vpop	{d8-d9}
 8002c48:	bd70      	pop	{r4, r5, r6, pc}

08002c4a <forward_selu>:
 8002c4a:	b430      	push	{r4, r5}
 8002c4c:	6941      	ldr	r1, [r0, #20]
 8002c4e:	680c      	ldr	r4, [r1, #0]
 8002c50:	6822      	ldr	r2, [r4, #0]
 8002c52:	6980      	ldr	r0, [r0, #24]
 8002c54:	6815      	ldr	r5, [r2, #0]
 8002c56:	6883      	ldr	r3, [r0, #8]
 8002c58:	686a      	ldr	r2, [r5, #4]
 8002c5a:	68a8      	ldr	r0, [r5, #8]
 8002c5c:	68e9      	ldr	r1, [r5, #12]
 8002c5e:	4342      	muls	r2, r0
 8002c60:	6928      	ldr	r0, [r5, #16]
 8002c62:	682d      	ldr	r5, [r5, #0]
 8002c64:	434a      	muls	r2, r1
 8002c66:	4342      	muls	r2, r0
 8002c68:	68e0      	ldr	r0, [r4, #12]
 8002c6a:	6804      	ldr	r4, [r0, #0]
 8002c6c:	68a9      	ldr	r1, [r5, #8]
 8002c6e:	6825      	ldr	r5, [r4, #0]
 8002c70:	68a8      	ldr	r0, [r5, #8]
 8002c72:	bc30      	pop	{r4, r5}
 8002c74:	e6b6      	b.n	80029e4 <nl_func_selu_array_f32>

08002c76 <forward_prelu>:
 8002c76:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002c7a:	b081      	sub	sp, #4
 8002c7c:	6940      	ldr	r0, [r0, #20]
 8002c7e:	6800      	ldr	r0, [r0, #0]
 8002c80:	6801      	ldr	r1, [r0, #0]
 8002c82:	68c2      	ldr	r2, [r0, #12]
 8002c84:	6980      	ldr	r0, [r0, #24]
 8002c86:	6804      	ldr	r4, [r0, #0]
 8002c88:	6820      	ldr	r0, [r4, #0]
 8002c8a:	680d      	ldr	r5, [r1, #0]
 8002c8c:	6817      	ldr	r7, [r2, #0]
 8002c8e:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8002c92:	b12c      	cbz	r4, 8002ca0 <forward_prelu+0x2a>
 8002c94:	6841      	ldr	r1, [r0, #4]
 8002c96:	6800      	ldr	r0, [r0, #0]
 8002c98:	f000 fd32 	bl	8003700 <ai_array_get_byte_size>
 8002c9c:	4681      	mov	r9, r0
 8002c9e:	e001      	b.n	8002ca4 <forward_prelu+0x2e>
 8002ca0:	f04f 0901 	mov.w	r9, #1
 8002ca4:	6828      	ldr	r0, [r5, #0]
 8002ca6:	6841      	ldr	r1, [r0, #4]
 8002ca8:	6800      	ldr	r0, [r0, #0]
 8002caa:	f000 fd29 	bl	8003700 <ai_array_get_byte_size>
 8002cae:	6829      	ldr	r1, [r5, #0]
 8002cb0:	683a      	ldr	r2, [r7, #0]
 8002cb2:	688e      	ldr	r6, [r1, #8]
 8002cb4:	6895      	ldr	r5, [r2, #8]
 8002cb6:	1837      	adds	r7, r6, r0
 8002cb8:	42be      	cmp	r6, r7
 8002cba:	d20f      	bcs.n	8002cdc <forward_prelu+0x66>
 8002cbc:	6862      	ldr	r2, [r4, #4]
 8002cbe:	68a0      	ldr	r0, [r4, #8]
 8002cc0:	68e1      	ldr	r1, [r4, #12]
 8002cc2:	4342      	muls	r2, r0
 8002cc4:	6920      	ldr	r0, [r4, #16]
 8002cc6:	434a      	muls	r2, r1
 8002cc8:	4342      	muls	r2, r0
 8002cca:	4643      	mov	r3, r8
 8002ccc:	4631      	mov	r1, r6
 8002cce:	4628      	mov	r0, r5
 8002cd0:	f7ff fece 	bl	8002a70 <nl_func_prelu_array_f32>
 8002cd4:	444e      	add	r6, r9
 8002cd6:	42be      	cmp	r6, r7
 8002cd8:	444d      	add	r5, r9
 8002cda:	d3ef      	bcc.n	8002cbc <forward_prelu+0x46>
 8002cdc:	b001      	add	sp, #4
 8002cde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08002ce4 <forward_sign>:
 8002ce4:	b430      	push	{r4, r5}
 8002ce6:	6940      	ldr	r0, [r0, #20]
 8002ce8:	6802      	ldr	r2, [r0, #0]
 8002cea:	6811      	ldr	r1, [r2, #0]
 8002cec:	68d2      	ldr	r2, [r2, #12]
 8002cee:	680b      	ldr	r3, [r1, #0]
 8002cf0:	685c      	ldr	r4, [r3, #4]
 8002cf2:	6898      	ldr	r0, [r3, #8]
 8002cf4:	68d9      	ldr	r1, [r3, #12]
 8002cf6:	4344      	muls	r4, r0
 8002cf8:	6918      	ldr	r0, [r3, #16]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	434c      	muls	r4, r1
 8002cfe:	4344      	muls	r4, r0
 8002d00:	6898      	ldr	r0, [r3, #8]
 8002d02:	6813      	ldr	r3, [r2, #0]
 8002d04:	681d      	ldr	r5, [r3, #0]
 8002d06:	68aa      	ldr	r2, [r5, #8]
 8002d08:	eb00 0184 	add.w	r1, r0, r4, lsl #2
 8002d0c:	eb02 0384 	add.w	r3, r2, r4, lsl #2
 8002d10:	1f09      	subs	r1, r1, #4
 8002d12:	1f1a      	subs	r2, r3, #4
 8002d14:	4281      	cmp	r1, r0
 8002d16:	d314      	bcc.n	8002d42 <forward_sign+0x5e>
 8002d18:	f04f 33ff 	mov.w	r3, #4294967295
 8002d1c:	ed91 0a00 	vldr	s0, [r1]
 8002d20:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8002d24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d28:	bfcc      	ite	gt
 8002d2a:	ed9f 0a5b 	vldrgt	s0, [pc, #364]	; 8002e98 <.text_35>
 8002d2e:	ee00 3a10 	vmovle	s0, r3
 8002d32:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8002d36:	ed82 0a00 	vstr	s0, [r2]
 8002d3a:	1f09      	subs	r1, r1, #4
 8002d3c:	1f12      	subs	r2, r2, #4
 8002d3e:	4281      	cmp	r1, r0
 8002d40:	d2ec      	bcs.n	8002d1c <forward_sign+0x38>
 8002d42:	bc30      	pop	{r4, r5}
 8002d44:	4770      	bx	lr
	...

08002d48 <forward_clip>:
 8002d48:	b430      	push	{r4, r5}
 8002d4a:	6941      	ldr	r1, [r0, #20]
 8002d4c:	680c      	ldr	r4, [r1, #0]
 8002d4e:	6822      	ldr	r2, [r4, #0]
 8002d50:	6815      	ldr	r5, [r2, #0]
 8002d52:	686b      	ldr	r3, [r5, #4]
 8002d54:	68a9      	ldr	r1, [r5, #8]
 8002d56:	68ea      	ldr	r2, [r5, #12]
 8002d58:	6980      	ldr	r0, [r0, #24]
 8002d5a:	434b      	muls	r3, r1
 8002d5c:	6929      	ldr	r1, [r5, #16]
 8002d5e:	4353      	muls	r3, r2
 8002d60:	434b      	muls	r3, r1
 8002d62:	682a      	ldr	r2, [r5, #0]
 8002d64:	6881      	ldr	r1, [r0, #8]
 8002d66:	6890      	ldr	r0, [r2, #8]
 8002d68:	68e2      	ldr	r2, [r4, #12]
 8002d6a:	ed91 0a00 	vldr	s0, [r1]
 8002d6e:	6814      	ldr	r4, [r2, #0]
 8002d70:	edd1 0a01 	vldr	s1, [r1, #4]
 8002d74:	6825      	ldr	r5, [r4, #0]
 8002d76:	68aa      	ldr	r2, [r5, #8]
 8002d78:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8002d7c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8002d80:	1f09      	subs	r1, r1, #4
 8002d82:	1f1a      	subs	r2, r3, #4
 8002d84:	4281      	cmp	r1, r0
 8002d86:	d315      	bcc.n	8002db4 <forward_clip+0x6c>
 8002d88:	ed91 1a00 	vldr	s2, [r1]
 8002d8c:	eeb4 0a41 	vcmp.f32	s0, s2
 8002d90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d94:	bf58      	it	pl
 8002d96:	eeb0 1a40 	vmovpl.f32	s2, s0
 8002d9a:	eeb4 1a60 	vcmp.f32	s2, s1
 8002d9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002da2:	bf58      	it	pl
 8002da4:	eeb0 1a60 	vmovpl.f32	s2, s1
 8002da8:	ed82 1a00 	vstr	s2, [r2]
 8002dac:	1f09      	subs	r1, r1, #4
 8002dae:	1f12      	subs	r2, r2, #4
 8002db0:	4281      	cmp	r1, r0
 8002db2:	d2e9      	bcs.n	8002d88 <forward_clip+0x40>
 8002db4:	bc30      	pop	{r4, r5}
 8002db6:	4770      	bx	lr

08002db8 <forward_sigmoid>:
 8002db8:	b570      	push	{r4, r5, r6, lr}
 8002dba:	6940      	ldr	r0, [r0, #20]
 8002dbc:	6802      	ldr	r2, [r0, #0]
 8002dbe:	6811      	ldr	r1, [r2, #0]
 8002dc0:	680b      	ldr	r3, [r1, #0]
 8002dc2:	685e      	ldr	r6, [r3, #4]
 8002dc4:	6898      	ldr	r0, [r3, #8]
 8002dc6:	68d9      	ldr	r1, [r3, #12]
 8002dc8:	4346      	muls	r6, r0
 8002dca:	6918      	ldr	r0, [r3, #16]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	689c      	ldr	r4, [r3, #8]
 8002dd0:	434e      	muls	r6, r1
 8002dd2:	4346      	muls	r6, r0
 8002dd4:	68d1      	ldr	r1, [r2, #12]
 8002dd6:	eb04 0086 	add.w	r0, r4, r6, lsl #2
 8002dda:	1f05      	subs	r5, r0, #4
 8002ddc:	6808      	ldr	r0, [r1, #0]
 8002dde:	6802      	ldr	r2, [r0, #0]
 8002de0:	6891      	ldr	r1, [r2, #8]
 8002de2:	eb01 0086 	add.w	r0, r1, r6, lsl #2
 8002de6:	1f06      	subs	r6, r0, #4
 8002de8:	42a5      	cmp	r5, r4
 8002dea:	d313      	bcc.n	8002e14 <forward_sigmoid+0x5c>
 8002dec:	ed95 0a00 	vldr	s0, [r5]
 8002df0:	eeb1 0a40 	vneg.f32	s0, s0
 8002df4:	f005 ffba 	bl	8008d6c <expf>
 8002df8:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8002dfc:	ee70 0a20 	vadd.f32	s1, s0, s1
 8002e00:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002e04:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8002e08:	ed86 0a00 	vstr	s0, [r6]
 8002e0c:	1f2d      	subs	r5, r5, #4
 8002e0e:	1f36      	subs	r6, r6, #4
 8002e10:	42a5      	cmp	r5, r4
 8002e12:	d2eb      	bcs.n	8002dec <forward_sigmoid+0x34>
 8002e14:	bd70      	pop	{r4, r5, r6, pc}
	...

08002e18 <forward_hard_sigmoid>:
 8002e18:	b430      	push	{r4, r5}
 8002e1a:	6940      	ldr	r0, [r0, #20]
 8002e1c:	6802      	ldr	r2, [r0, #0]
 8002e1e:	6811      	ldr	r1, [r2, #0]
 8002e20:	68d2      	ldr	r2, [r2, #12]
 8002e22:	680b      	ldr	r3, [r1, #0]
 8002e24:	685c      	ldr	r4, [r3, #4]
 8002e26:	6898      	ldr	r0, [r3, #8]
 8002e28:	68d9      	ldr	r1, [r3, #12]
 8002e2a:	4344      	muls	r4, r0
 8002e2c:	6918      	ldr	r0, [r3, #16]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	434c      	muls	r4, r1
 8002e32:	4344      	muls	r4, r0
 8002e34:	6898      	ldr	r0, [r3, #8]
 8002e36:	6813      	ldr	r3, [r2, #0]
 8002e38:	681d      	ldr	r5, [r3, #0]
 8002e3a:	68aa      	ldr	r2, [r5, #8]
 8002e3c:	eb00 0184 	add.w	r1, r0, r4, lsl #2
 8002e40:	eb02 0384 	add.w	r3, r2, r4, lsl #2
 8002e44:	1f09      	subs	r1, r1, #4
 8002e46:	1f1a      	subs	r2, r3, #4
 8002e48:	4281      	cmp	r1, r0
 8002e4a:	d321      	bcc.n	8002e90 <forward_hard_sigmoid+0x78>
 8002e4c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002e50:	eddf 0a12 	vldr	s1, [pc, #72]	; 8002e9c <.text_36>
 8002e54:	edd1 1a00 	vldr	s3, [r1]
 8002e58:	ed9f 2a11 	vldr	s4, [pc, #68]	; 8002ea0 <.text_37>
 8002e5c:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 8002e60:	ee01 1a82 	vmla.f32	s2, s3, s4
 8002e64:	eeb4 1a60 	vcmp.f32	s2, s1
 8002e68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e6c:	da08      	bge.n	8002e80 <forward_hard_sigmoid+0x68>
 8002e6e:	eeb5 1a40 	vcmp.f32	s2, #0.0
 8002e72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e76:	d505      	bpl.n	8002e84 <forward_hard_sigmoid+0x6c>
 8002e78:	ed9f 1a06 	vldr	s2, [pc, #24]	; 8002e94 <.text_34>
 8002e7c:	e002      	b.n	8002e84 <forward_hard_sigmoid+0x6c>
 8002e7e:	bf00      	nop
 8002e80:	eeb0 1a40 	vmov.f32	s2, s0
 8002e84:	ed82 1a00 	vstr	s2, [r2]
 8002e88:	1f09      	subs	r1, r1, #4
 8002e8a:	1f12      	subs	r2, r2, #4
 8002e8c:	4281      	cmp	r1, r0
 8002e8e:	d2e1      	bcs.n	8002e54 <forward_hard_sigmoid+0x3c>
 8002e90:	bc30      	pop	{r4, r5}
 8002e92:	4770      	bx	lr

08002e94 <.text_34>:
 8002e94:	00000000 	.word	0x00000000

08002e98 <.text_35>:
 8002e98:	00000001 	.word	0x00000001

08002e9c <.text_36>:
 8002e9c:	3f800001 	.word	0x3f800001

08002ea0 <.text_37>:
 8002ea0:	3e4ccccd 	.word	0x3e4ccccd

08002ea4 <forward_exp>:
 8002ea4:	b570      	push	{r4, r5, r6, lr}
 8002ea6:	6940      	ldr	r0, [r0, #20]
 8002ea8:	6802      	ldr	r2, [r0, #0]
 8002eaa:	6811      	ldr	r1, [r2, #0]
 8002eac:	680b      	ldr	r3, [r1, #0]
 8002eae:	685e      	ldr	r6, [r3, #4]
 8002eb0:	6898      	ldr	r0, [r3, #8]
 8002eb2:	68d9      	ldr	r1, [r3, #12]
 8002eb4:	4346      	muls	r6, r0
 8002eb6:	6918      	ldr	r0, [r3, #16]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	689c      	ldr	r4, [r3, #8]
 8002ebc:	434e      	muls	r6, r1
 8002ebe:	4346      	muls	r6, r0
 8002ec0:	68d1      	ldr	r1, [r2, #12]
 8002ec2:	eb04 0086 	add.w	r0, r4, r6, lsl #2
 8002ec6:	1f05      	subs	r5, r0, #4
 8002ec8:	6808      	ldr	r0, [r1, #0]
 8002eca:	6802      	ldr	r2, [r0, #0]
 8002ecc:	6891      	ldr	r1, [r2, #8]
 8002ece:	eb01 0086 	add.w	r0, r1, r6, lsl #2
 8002ed2:	1f06      	subs	r6, r0, #4
 8002ed4:	42a5      	cmp	r5, r4
 8002ed6:	d309      	bcc.n	8002eec <forward_exp+0x48>
 8002ed8:	ed95 0a00 	vldr	s0, [r5]
 8002edc:	f005 ff46 	bl	8008d6c <expf>
 8002ee0:	ed86 0a00 	vstr	s0, [r6]
 8002ee4:	1f2d      	subs	r5, r5, #4
 8002ee6:	1f36      	subs	r6, r6, #4
 8002ee8:	42a5      	cmp	r5, r4
 8002eea:	d2f5      	bcs.n	8002ed8 <forward_exp+0x34>
 8002eec:	bd70      	pop	{r4, r5, r6, pc}
	...

08002ef0 <forward_sqrt>:
 8002ef0:	b570      	push	{r4, r5, r6, lr}
 8002ef2:	6940      	ldr	r0, [r0, #20]
 8002ef4:	6802      	ldr	r2, [r0, #0]
 8002ef6:	6811      	ldr	r1, [r2, #0]
 8002ef8:	680b      	ldr	r3, [r1, #0]
 8002efa:	685e      	ldr	r6, [r3, #4]
 8002efc:	6898      	ldr	r0, [r3, #8]
 8002efe:	68d9      	ldr	r1, [r3, #12]
 8002f00:	4346      	muls	r6, r0
 8002f02:	6918      	ldr	r0, [r3, #16]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	689c      	ldr	r4, [r3, #8]
 8002f08:	434e      	muls	r6, r1
 8002f0a:	4346      	muls	r6, r0
 8002f0c:	68d1      	ldr	r1, [r2, #12]
 8002f0e:	eb04 0086 	add.w	r0, r4, r6, lsl #2
 8002f12:	1f05      	subs	r5, r0, #4
 8002f14:	6808      	ldr	r0, [r1, #0]
 8002f16:	6802      	ldr	r2, [r0, #0]
 8002f18:	6891      	ldr	r1, [r2, #8]
 8002f1a:	eb01 0086 	add.w	r0, r1, r6, lsl #2
 8002f1e:	1f06      	subs	r6, r0, #4
 8002f20:	42a5      	cmp	r5, r4
 8002f22:	d309      	bcc.n	8002f38 <forward_sqrt+0x48>
 8002f24:	ed95 0a00 	vldr	s0, [r5]
 8002f28:	f000 fd40 	bl	80039ac <ai_math_sqrt>
 8002f2c:	ed86 0a00 	vstr	s0, [r6]
 8002f30:	1f2d      	subs	r5, r5, #4
 8002f32:	1f36      	subs	r6, r6, #4
 8002f34:	42a5      	cmp	r5, r4
 8002f36:	d2f5      	bcs.n	8002f24 <forward_sqrt+0x34>
 8002f38:	bd70      	pop	{r4, r5, r6, pc}
	...

08002f3c <forward_soft_plus>:
 8002f3c:	b570      	push	{r4, r5, r6, lr}
 8002f3e:	6940      	ldr	r0, [r0, #20]
 8002f40:	6802      	ldr	r2, [r0, #0]
 8002f42:	6811      	ldr	r1, [r2, #0]
 8002f44:	680b      	ldr	r3, [r1, #0]
 8002f46:	685e      	ldr	r6, [r3, #4]
 8002f48:	6898      	ldr	r0, [r3, #8]
 8002f4a:	68d9      	ldr	r1, [r3, #12]
 8002f4c:	4346      	muls	r6, r0
 8002f4e:	6918      	ldr	r0, [r3, #16]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	689c      	ldr	r4, [r3, #8]
 8002f54:	434e      	muls	r6, r1
 8002f56:	4346      	muls	r6, r0
 8002f58:	68d1      	ldr	r1, [r2, #12]
 8002f5a:	eb04 0086 	add.w	r0, r4, r6, lsl #2
 8002f5e:	1f05      	subs	r5, r0, #4
 8002f60:	6808      	ldr	r0, [r1, #0]
 8002f62:	6802      	ldr	r2, [r0, #0]
 8002f64:	6891      	ldr	r1, [r2, #8]
 8002f66:	eb01 0086 	add.w	r0, r1, r6, lsl #2
 8002f6a:	1f06      	subs	r6, r0, #4
 8002f6c:	42a5      	cmp	r5, r4
 8002f6e:	d30f      	bcc.n	8002f90 <forward_soft_plus+0x54>
 8002f70:	ed95 0a00 	vldr	s0, [r5]
 8002f74:	f005 fefa 	bl	8008d6c <expf>
 8002f78:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8002f7c:	ee30 0a20 	vadd.f32	s0, s0, s1
 8002f80:	f005 ff6e 	bl	8008e60 <logf>
 8002f84:	ed86 0a00 	vstr	s0, [r6]
 8002f88:	1f2d      	subs	r5, r5, #4
 8002f8a:	1f36      	subs	r6, r6, #4
 8002f8c:	42a5      	cmp	r5, r4
 8002f8e:	d2ef      	bcs.n	8002f70 <forward_soft_plus+0x34>
 8002f90:	bd70      	pop	{r4, r5, r6, pc}
	...

08002f94 <forward_soft_sign>:
 8002f94:	b430      	push	{r4, r5}
 8002f96:	6940      	ldr	r0, [r0, #20]
 8002f98:	6802      	ldr	r2, [r0, #0]
 8002f9a:	6811      	ldr	r1, [r2, #0]
 8002f9c:	68d2      	ldr	r2, [r2, #12]
 8002f9e:	680b      	ldr	r3, [r1, #0]
 8002fa0:	685c      	ldr	r4, [r3, #4]
 8002fa2:	6898      	ldr	r0, [r3, #8]
 8002fa4:	68d9      	ldr	r1, [r3, #12]
 8002fa6:	4344      	muls	r4, r0
 8002fa8:	6918      	ldr	r0, [r3, #16]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	434c      	muls	r4, r1
 8002fae:	4344      	muls	r4, r0
 8002fb0:	6898      	ldr	r0, [r3, #8]
 8002fb2:	6813      	ldr	r3, [r2, #0]
 8002fb4:	681d      	ldr	r5, [r3, #0]
 8002fb6:	68aa      	ldr	r2, [r5, #8]
 8002fb8:	eb00 0184 	add.w	r1, r0, r4, lsl #2
 8002fbc:	eb02 0384 	add.w	r3, r2, r4, lsl #2
 8002fc0:	1f09      	subs	r1, r1, #4
 8002fc2:	1f1a      	subs	r2, r3, #4
 8002fc4:	4281      	cmp	r1, r0
 8002fc6:	d30f      	bcc.n	8002fe8 <forward_soft_sign+0x54>
 8002fc8:	ed91 0a00 	vldr	s0, [r1]
 8002fcc:	eef0 0ac0 	vabs.f32	s1, s0
 8002fd0:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8002fd4:	ee70 0a81 	vadd.f32	s1, s1, s2
 8002fd8:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8002fdc:	ed82 0a00 	vstr	s0, [r2]
 8002fe0:	1f09      	subs	r1, r1, #4
 8002fe2:	1f12      	subs	r2, r2, #4
 8002fe4:	4281      	cmp	r1, r0
 8002fe6:	d2ef      	bcs.n	8002fc8 <forward_soft_sign+0x34>
 8002fe8:	bc30      	pop	{r4, r5}
 8002fea:	4770      	bx	lr

08002fec <forward_tanh>:
 8002fec:	b570      	push	{r4, r5, r6, lr}
 8002fee:	6940      	ldr	r0, [r0, #20]
 8002ff0:	6802      	ldr	r2, [r0, #0]
 8002ff2:	6811      	ldr	r1, [r2, #0]
 8002ff4:	680b      	ldr	r3, [r1, #0]
 8002ff6:	685e      	ldr	r6, [r3, #4]
 8002ff8:	6898      	ldr	r0, [r3, #8]
 8002ffa:	68d9      	ldr	r1, [r3, #12]
 8002ffc:	4346      	muls	r6, r0
 8002ffe:	6918      	ldr	r0, [r3, #16]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	689c      	ldr	r4, [r3, #8]
 8003004:	434e      	muls	r6, r1
 8003006:	4346      	muls	r6, r0
 8003008:	68d1      	ldr	r1, [r2, #12]
 800300a:	eb04 0086 	add.w	r0, r4, r6, lsl #2
 800300e:	1f05      	subs	r5, r0, #4
 8003010:	6808      	ldr	r0, [r1, #0]
 8003012:	6802      	ldr	r2, [r0, #0]
 8003014:	6891      	ldr	r1, [r2, #8]
 8003016:	eb01 0086 	add.w	r0, r1, r6, lsl #2
 800301a:	1f06      	subs	r6, r0, #4
 800301c:	42a5      	cmp	r5, r4
 800301e:	d309      	bcc.n	8003034 <forward_tanh+0x48>
 8003020:	ed95 0a00 	vldr	s0, [r5]
 8003024:	f005 fe50 	bl	8008cc8 <tanhf>
 8003028:	ed86 0a00 	vstr	s0, [r6]
 800302c:	1f2d      	subs	r5, r5, #4
 800302e:	1f36      	subs	r6, r6, #4
 8003030:	42a5      	cmp	r5, r4
 8003032:	d2f5      	bcs.n	8003020 <forward_tanh+0x34>
 8003034:	bd70      	pop	{r4, r5, r6, pc}

08003036 <forward_sm>:
 8003036:	b570      	push	{r4, r5, r6, lr}
 8003038:	b082      	sub	sp, #8
 800303a:	6940      	ldr	r0, [r0, #20]
 800303c:	6800      	ldr	r0, [r0, #0]
 800303e:	6801      	ldr	r1, [r0, #0]
 8003040:	68c0      	ldr	r0, [r0, #12]
 8003042:	680c      	ldr	r4, [r1, #0]
 8003044:	6805      	ldr	r5, [r0, #0]
 8003046:	68a2      	ldr	r2, [r4, #8]
 8003048:	68a8      	ldr	r0, [r5, #8]
 800304a:	9001      	str	r0, [sp, #4]
 800304c:	9200      	str	r2, [sp, #0]
 800304e:	4613      	mov	r3, r2
 8003050:	6866      	ldr	r6, [r4, #4]
 8003052:	68e1      	ldr	r1, [r4, #12]
 8003054:	6920      	ldr	r0, [r4, #16]
 8003056:	6824      	ldr	r4, [r4, #0]
 8003058:	4372      	muls	r2, r6
 800305a:	434a      	muls	r2, r1
 800305c:	4342      	muls	r2, r0
 800305e:	6828      	ldr	r0, [r5, #0]
 8003060:	68a1      	ldr	r1, [r4, #8]
 8003062:	6880      	ldr	r0, [r0, #8]
 8003064:	f7ff fa52 	bl	800250c <nl_func_sm_array_f32>
 8003068:	b002      	add	sp, #8
 800306a:	bd70      	pop	{r4, r5, r6, pc}

0800306c <forward_hardmax>:
 800306c:	b430      	push	{r4, r5}
 800306e:	6941      	ldr	r1, [r0, #20]
 8003070:	680c      	ldr	r4, [r1, #0]
 8003072:	6980      	ldr	r0, [r0, #24]
 8003074:	6822      	ldr	r2, [r4, #0]
 8003076:	6883      	ldr	r3, [r0, #8]
 8003078:	6811      	ldr	r1, [r2, #0]
 800307a:	6808      	ldr	r0, [r1, #0]
 800307c:	1d0a      	adds	r2, r1, #4
 800307e:	6881      	ldr	r1, [r0, #8]
 8003080:	68e0      	ldr	r0, [r4, #12]
 8003082:	6804      	ldr	r4, [r0, #0]
 8003084:	6825      	ldr	r5, [r4, #0]
 8003086:	68a8      	ldr	r0, [r5, #8]
 8003088:	bc30      	pop	{r4, r5}
 800308a:	f7ff bb69 	b.w	8002760 <nl_func_hardmax_array_f32>
	...

08003090 <ai_array_fmt_name>:
 8003090:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 8003094:	f1b0 0140 	subs.w	r1, r0, #64	; 0x40
 8003098:	d062      	beq.n	8003160 <ai_array_fmt_name+0xd0>
 800309a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800309e:	1a89      	subs	r1, r1, r2
 80030a0:	f000 8094 	beq.w	80031cc <ai_array_fmt_name+0x13c>
 80030a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030a8:	1a89      	subs	r1, r1, r2
 80030aa:	d071      	beq.n	8003190 <ai_array_fmt_name+0x100>
 80030ac:	1a89      	subs	r1, r1, r2
 80030ae:	d063      	beq.n	8003178 <ai_array_fmt_name+0xe8>
 80030b0:	1fc9      	subs	r1, r1, #7
 80030b2:	f000 808e 	beq.w	80031d2 <ai_array_fmt_name+0x142>
 80030b6:	f240 32f9 	movw	r2, #1017	; 0x3f9
 80030ba:	1a89      	subs	r1, r1, r2
 80030bc:	d05f      	beq.n	800317e <ai_array_fmt_name+0xee>
 80030be:	390f      	subs	r1, #15
 80030c0:	f000 808a 	beq.w	80031d8 <ai_array_fmt_name+0x148>
 80030c4:	f240 72f1 	movw	r2, #2033	; 0x7f1
 80030c8:	1a89      	subs	r1, r1, r2
 80030ca:	d05b      	beq.n	8003184 <ai_array_fmt_name+0xf4>
 80030cc:	391f      	subs	r1, #31
 80030ce:	f000 8086 	beq.w	80031de <ai_array_fmt_name+0x14e>
 80030d2:	f640 72e1 	movw	r2, #4065	; 0xfe1
 80030d6:	1a89      	subs	r1, r1, r2
 80030d8:	d057      	beq.n	800318a <ai_array_fmt_name+0xfa>
 80030da:	f8df 25d4 	ldr.w	r2, [pc, #1492]	; 80036b0 <.text_15>
 80030de:	1a89      	subs	r1, r1, r2
 80030e0:	f000 808f 	beq.w	8003202 <ai_array_fmt_name+0x172>
 80030e4:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 80030e8:	1a89      	subs	r1, r1, r2
 80030ea:	f000 8087 	beq.w	80031fc <ai_array_fmt_name+0x16c>
 80030ee:	f8df 25c4 	ldr.w	r2, [pc, #1476]	; 80036b4 <.text_16>
 80030f2:	1a89      	subs	r1, r1, r2
 80030f4:	d05e      	beq.n	80031b4 <ai_array_fmt_name+0x124>
 80030f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030fa:	1a89      	subs	r1, r1, r2
 80030fc:	d057      	beq.n	80031ae <ai_array_fmt_name+0x11e>
 80030fe:	1a89      	subs	r1, r1, r2
 8003100:	d049      	beq.n	8003196 <ai_array_fmt_name+0x106>
 8003102:	1fc9      	subs	r1, r1, #7
 8003104:	d059      	beq.n	80031ba <ai_array_fmt_name+0x12a>
 8003106:	f240 32f9 	movw	r2, #1017	; 0x3f9
 800310a:	1a89      	subs	r1, r1, r2
 800310c:	d046      	beq.n	800319c <ai_array_fmt_name+0x10c>
 800310e:	390f      	subs	r1, #15
 8003110:	d056      	beq.n	80031c0 <ai_array_fmt_name+0x130>
 8003112:	f240 72f1 	movw	r2, #2033	; 0x7f1
 8003116:	1a89      	subs	r1, r1, r2
 8003118:	d043      	beq.n	80031a2 <ai_array_fmt_name+0x112>
 800311a:	391f      	subs	r1, #31
 800311c:	d053      	beq.n	80031c6 <ai_array_fmt_name+0x136>
 800311e:	f640 72e1 	movw	r2, #4065	; 0xfe1
 8003122:	1a89      	subs	r1, r1, r2
 8003124:	d040      	beq.n	80031a8 <ai_array_fmt_name+0x118>
 8003126:	f8df 2588 	ldr.w	r2, [pc, #1416]	; 80036b0 <.text_15>
 800312a:	1a89      	subs	r1, r1, r2
 800312c:	d063      	beq.n	80031f6 <ai_array_fmt_name+0x166>
 800312e:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8003132:	1a89      	subs	r1, r1, r2
 8003134:	d05c      	beq.n	80031f0 <ai_array_fmt_name+0x160>
 8003136:	f8df 2580 	ldr.w	r2, [pc, #1408]	; 80036b8 <.text_17>
 800313a:	1a89      	subs	r1, r1, r2
 800313c:	d019      	beq.n	8003172 <ai_array_fmt_name+0xe2>
 800313e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003142:	1a89      	subs	r1, r1, r2
 8003144:	d00f      	beq.n	8003166 <ai_array_fmt_name+0xd6>
 8003146:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800314a:	1a89      	subs	r1, r1, r2
 800314c:	d00e      	beq.n	800316c <ai_array_fmt_name+0xdc>
 800314e:	f8df 256c 	ldr.w	r2, [pc, #1388]	; 80036bc <.text_18>
 8003152:	1a89      	subs	r1, r1, r2
 8003154:	d049      	beq.n	80031ea <ai_array_fmt_name+0x15a>
 8003156:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 800315a:	1a89      	subs	r1, r1, r2
 800315c:	d042      	beq.n	80031e4 <ai_array_fmt_name+0x154>
 800315e:	e053      	b.n	8003208 <ai_array_fmt_name+0x178>
 8003160:	f20f 6074 	addw	r0, pc, #1652	; 0x674
 8003164:	4770      	bx	lr
 8003166:	f20f 607c 	addw	r0, pc, #1660	; 0x67c
 800316a:	4770      	bx	lr
 800316c:	f20f 6080 	addw	r0, pc, #1664	; 0x680
 8003170:	4770      	bx	lr
 8003172:	f20f 6088 	addw	r0, pc, #1672	; 0x688
 8003176:	4770      	bx	lr
 8003178:	f20f 608c 	addw	r0, pc, #1676	; 0x68c
 800317c:	4770      	bx	lr
 800317e:	f20f 6090 	addw	r0, pc, #1680	; 0x690
 8003182:	4770      	bx	lr
 8003184:	f20f 6090 	addw	r0, pc, #1680	; 0x690
 8003188:	4770      	bx	lr
 800318a:	f20f 6094 	addw	r0, pc, #1684	; 0x694
 800318e:	4770      	bx	lr
 8003190:	f20f 6094 	addw	r0, pc, #1684	; 0x694
 8003194:	4770      	bx	lr
 8003196:	f20f 6098 	addw	r0, pc, #1688	; 0x698
 800319a:	4770      	bx	lr
 800319c:	f20f 6098 	addw	r0, pc, #1688	; 0x698
 80031a0:	4770      	bx	lr
 80031a2:	f20f 609c 	addw	r0, pc, #1692	; 0x69c
 80031a6:	4770      	bx	lr
 80031a8:	f20f 609c 	addw	r0, pc, #1692	; 0x69c
 80031ac:	4770      	bx	lr
 80031ae:	f20f 60a0 	addw	r0, pc, #1696	; 0x6a0
 80031b2:	4770      	bx	lr
 80031b4:	f20f 60a0 	addw	r0, pc, #1696	; 0x6a0
 80031b8:	4770      	bx	lr
 80031ba:	f20f 60a4 	addw	r0, pc, #1700	; 0x6a4
 80031be:	4770      	bx	lr
 80031c0:	f20f 60a4 	addw	r0, pc, #1700	; 0x6a4
 80031c4:	4770      	bx	lr
 80031c6:	f20f 60a8 	addw	r0, pc, #1704	; 0x6a8
 80031ca:	4770      	bx	lr
 80031cc:	f20f 60a8 	addw	r0, pc, #1704	; 0x6a8
 80031d0:	4770      	bx	lr
 80031d2:	f20f 60ac 	addw	r0, pc, #1708	; 0x6ac
 80031d6:	4770      	bx	lr
 80031d8:	f20f 60ac 	addw	r0, pc, #1708	; 0x6ac
 80031dc:	4770      	bx	lr
 80031de:	f20f 60b4 	addw	r0, pc, #1716	; 0x6b4
 80031e2:	4770      	bx	lr
 80031e4:	f20f 60b8 	addw	r0, pc, #1720	; 0x6b8
 80031e8:	4770      	bx	lr
 80031ea:	f20f 60c4 	addw	r0, pc, #1732	; 0x6c4
 80031ee:	4770      	bx	lr
 80031f0:	f20f 60cc 	addw	r0, pc, #1740	; 0x6cc
 80031f4:	4770      	bx	lr
 80031f6:	f20f 60d8 	addw	r0, pc, #1752	; 0x6d8
 80031fa:	4770      	bx	lr
 80031fc:	f20f 60e0 	addw	r0, pc, #1760	; 0x6e0
 8003200:	4770      	bx	lr
 8003202:	f20f 60ec 	addw	r0, pc, #1772	; 0x6ec
 8003206:	4770      	bx	lr
 8003208:	f36f 000d 	bfc	r0, #0, #14
 800320c:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 8003210:	2840      	cmp	r0, #64	; 0x40
 8003212:	d009      	beq.n	8003228 <ai_array_fmt_name+0x198>
 8003214:	f8df 14a8 	ldr.w	r1, [pc, #1192]	; 80036c0 <.text_19>
 8003218:	4288      	cmp	r0, r1
 800321a:	d00b      	beq.n	8003234 <ai_array_fmt_name+0x1a4>
 800321c:	f8df 14a4 	ldr.w	r1, [pc, #1188]	; 80036c4 <.text_20>
 8003220:	4288      	cmp	r0, r1
 8003222:	d004      	beq.n	800322e <ai_array_fmt_name+0x19e>
 8003224:	a07a      	add	r0, pc, #488	; (adr r0, 8003410 <.text_8>)
 8003226:	4770      	bx	lr
 8003228:	f20f 60d4 	addw	r0, pc, #1748	; 0x6d4
 800322c:	4770      	bx	lr
 800322e:	f20f 60e8 	addw	r0, pc, #1768	; 0x6e8
 8003232:	4770      	bx	lr
 8003234:	f20f 60f4 	addw	r0, pc, #1780	; 0x6f4
 8003238:	4770      	bx	lr

0800323a <ai_array_fmt_exported>:
 800323a:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 800323e:	f1b0 0140 	subs.w	r1, r0, #64	; 0x40
 8003242:	d068      	beq.n	8003316 <ai_array_fmt_exported+0xdc>
 8003244:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8003248:	1a89      	subs	r1, r1, r2
 800324a:	d064      	beq.n	8003316 <ai_array_fmt_exported+0xdc>
 800324c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003250:	1a89      	subs	r1, r1, r2
 8003252:	d062      	beq.n	800331a <ai_array_fmt_exported+0xe0>
 8003254:	1a89      	subs	r1, r1, r2
 8003256:	d05e      	beq.n	8003316 <ai_array_fmt_exported+0xdc>
 8003258:	1fc9      	subs	r1, r1, #7
 800325a:	d05c      	beq.n	8003316 <ai_array_fmt_exported+0xdc>
 800325c:	f240 32f9 	movw	r2, #1017	; 0x3f9
 8003260:	1a89      	subs	r1, r1, r2
 8003262:	d058      	beq.n	8003316 <ai_array_fmt_exported+0xdc>
 8003264:	390f      	subs	r1, #15
 8003266:	d056      	beq.n	8003316 <ai_array_fmt_exported+0xdc>
 8003268:	f240 72f1 	movw	r2, #2033	; 0x7f1
 800326c:	1a89      	subs	r1, r1, r2
 800326e:	d054      	beq.n	800331a <ai_array_fmt_exported+0xe0>
 8003270:	391f      	subs	r1, #31
 8003272:	d052      	beq.n	800331a <ai_array_fmt_exported+0xe0>
 8003274:	f640 72e1 	movw	r2, #4065	; 0xfe1
 8003278:	1a89      	subs	r1, r1, r2
 800327a:	d04e      	beq.n	800331a <ai_array_fmt_exported+0xe0>
 800327c:	f8df 2430 	ldr.w	r2, [pc, #1072]	; 80036b0 <.text_15>
 8003280:	1a89      	subs	r1, r1, r2
 8003282:	d04a      	beq.n	800331a <ai_array_fmt_exported+0xe0>
 8003284:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8003288:	1a89      	subs	r1, r1, r2
 800328a:	d046      	beq.n	800331a <ai_array_fmt_exported+0xe0>
 800328c:	f8df 2424 	ldr.w	r2, [pc, #1060]	; 80036b4 <.text_16>
 8003290:	1a89      	subs	r1, r1, r2
 8003292:	d040      	beq.n	8003316 <ai_array_fmt_exported+0xdc>
 8003294:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003298:	1a89      	subs	r1, r1, r2
 800329a:	d03e      	beq.n	800331a <ai_array_fmt_exported+0xe0>
 800329c:	1a89      	subs	r1, r1, r2
 800329e:	d03a      	beq.n	8003316 <ai_array_fmt_exported+0xdc>
 80032a0:	1fc9      	subs	r1, r1, #7
 80032a2:	d038      	beq.n	8003316 <ai_array_fmt_exported+0xdc>
 80032a4:	f240 32f9 	movw	r2, #1017	; 0x3f9
 80032a8:	1a89      	subs	r1, r1, r2
 80032aa:	d034      	beq.n	8003316 <ai_array_fmt_exported+0xdc>
 80032ac:	390f      	subs	r1, #15
 80032ae:	d032      	beq.n	8003316 <ai_array_fmt_exported+0xdc>
 80032b0:	f240 72f1 	movw	r2, #2033	; 0x7f1
 80032b4:	1a89      	subs	r1, r1, r2
 80032b6:	d030      	beq.n	800331a <ai_array_fmt_exported+0xe0>
 80032b8:	391f      	subs	r1, #31
 80032ba:	d02e      	beq.n	800331a <ai_array_fmt_exported+0xe0>
 80032bc:	f640 72e1 	movw	r2, #4065	; 0xfe1
 80032c0:	1a89      	subs	r1, r1, r2
 80032c2:	d02a      	beq.n	800331a <ai_array_fmt_exported+0xe0>
 80032c4:	f8df 23e8 	ldr.w	r2, [pc, #1000]	; 80036b0 <.text_15>
 80032c8:	1a89      	subs	r1, r1, r2
 80032ca:	d026      	beq.n	800331a <ai_array_fmt_exported+0xe0>
 80032cc:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 80032d0:	1a89      	subs	r1, r1, r2
 80032d2:	d022      	beq.n	800331a <ai_array_fmt_exported+0xe0>
 80032d4:	f8df 23e0 	ldr.w	r2, [pc, #992]	; 80036b8 <.text_17>
 80032d8:	1a89      	subs	r1, r1, r2
 80032da:	d01e      	beq.n	800331a <ai_array_fmt_exported+0xe0>
 80032dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80032e0:	1a89      	subs	r1, r1, r2
 80032e2:	d018      	beq.n	8003316 <ai_array_fmt_exported+0xdc>
 80032e4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80032e8:	1a89      	subs	r1, r1, r2
 80032ea:	d016      	beq.n	800331a <ai_array_fmt_exported+0xe0>
 80032ec:	f8df 23cc 	ldr.w	r2, [pc, #972]	; 80036bc <.text_18>
 80032f0:	1a89      	subs	r1, r1, r2
 80032f2:	d012      	beq.n	800331a <ai_array_fmt_exported+0xe0>
 80032f4:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 80032f8:	1a89      	subs	r1, r1, r2
 80032fa:	d00e      	beq.n	800331a <ai_array_fmt_exported+0xe0>
 80032fc:	f36f 000d 	bfc	r0, #0, #14
 8003300:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 8003304:	2840      	cmp	r0, #64	; 0x40
 8003306:	bf1f      	itttt	ne
 8003308:	f8df 33b4 	ldrne.w	r3, [pc, #948]	; 80036c0 <.text_19>
 800330c:	4298      	cmpne	r0, r3
 800330e:	f8df 33b4 	ldrne.w	r3, [pc, #948]	; 80036c4 <.text_20>
 8003312:	4298      	cmpne	r0, r3
 8003314:	d101      	bne.n	800331a <ai_array_fmt_exported+0xe0>
 8003316:	2001      	movs	r0, #1
 8003318:	4770      	bx	lr
 800331a:	2000      	movs	r0, #0
 800331c:	4770      	bx	lr

0800331e <ai_array_fmt_valid>:
 800331e:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 8003322:	f1b0 0140 	subs.w	r1, r0, #64	; 0x40
 8003326:	d069      	beq.n	80033fc <ai_array_fmt_valid+0xde>
 8003328:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800332c:	1a89      	subs	r1, r1, r2
 800332e:	d065      	beq.n	80033fc <ai_array_fmt_valid+0xde>
 8003330:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003334:	1a89      	subs	r1, r1, r2
 8003336:	d061      	beq.n	80033fc <ai_array_fmt_valid+0xde>
 8003338:	1a89      	subs	r1, r1, r2
 800333a:	d05f      	beq.n	80033fc <ai_array_fmt_valid+0xde>
 800333c:	1fc9      	subs	r1, r1, #7
 800333e:	d05d      	beq.n	80033fc <ai_array_fmt_valid+0xde>
 8003340:	f240 32f9 	movw	r2, #1017	; 0x3f9
 8003344:	1a89      	subs	r1, r1, r2
 8003346:	d059      	beq.n	80033fc <ai_array_fmt_valid+0xde>
 8003348:	390f      	subs	r1, #15
 800334a:	d057      	beq.n	80033fc <ai_array_fmt_valid+0xde>
 800334c:	f240 72f1 	movw	r2, #2033	; 0x7f1
 8003350:	1a89      	subs	r1, r1, r2
 8003352:	d053      	beq.n	80033fc <ai_array_fmt_valid+0xde>
 8003354:	391f      	subs	r1, #31
 8003356:	d051      	beq.n	80033fc <ai_array_fmt_valid+0xde>
 8003358:	f640 72e1 	movw	r2, #4065	; 0xfe1
 800335c:	1a89      	subs	r1, r1, r2
 800335e:	d04d      	beq.n	80033fc <ai_array_fmt_valid+0xde>
 8003360:	f8df 234c 	ldr.w	r2, [pc, #844]	; 80036b0 <.text_15>
 8003364:	1a89      	subs	r1, r1, r2
 8003366:	d049      	beq.n	80033fc <ai_array_fmt_valid+0xde>
 8003368:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 800336c:	1a89      	subs	r1, r1, r2
 800336e:	d045      	beq.n	80033fc <ai_array_fmt_valid+0xde>
 8003370:	f8df 2340 	ldr.w	r2, [pc, #832]	; 80036b4 <.text_16>
 8003374:	1a89      	subs	r1, r1, r2
 8003376:	d041      	beq.n	80033fc <ai_array_fmt_valid+0xde>
 8003378:	f44f 7200 	mov.w	r2, #512	; 0x200
 800337c:	1a89      	subs	r1, r1, r2
 800337e:	d03d      	beq.n	80033fc <ai_array_fmt_valid+0xde>
 8003380:	1a89      	subs	r1, r1, r2
 8003382:	d03b      	beq.n	80033fc <ai_array_fmt_valid+0xde>
 8003384:	1fc9      	subs	r1, r1, #7
 8003386:	d039      	beq.n	80033fc <ai_array_fmt_valid+0xde>
 8003388:	f240 32f9 	movw	r2, #1017	; 0x3f9
 800338c:	1a89      	subs	r1, r1, r2
 800338e:	d035      	beq.n	80033fc <ai_array_fmt_valid+0xde>
 8003390:	390f      	subs	r1, #15
 8003392:	d033      	beq.n	80033fc <ai_array_fmt_valid+0xde>
 8003394:	f240 72f1 	movw	r2, #2033	; 0x7f1
 8003398:	1a89      	subs	r1, r1, r2
 800339a:	d02f      	beq.n	80033fc <ai_array_fmt_valid+0xde>
 800339c:	391f      	subs	r1, #31
 800339e:	d02d      	beq.n	80033fc <ai_array_fmt_valid+0xde>
 80033a0:	f640 72e1 	movw	r2, #4065	; 0xfe1
 80033a4:	1a89      	subs	r1, r1, r2
 80033a6:	d029      	beq.n	80033fc <ai_array_fmt_valid+0xde>
 80033a8:	f8df 2304 	ldr.w	r2, [pc, #772]	; 80036b0 <.text_15>
 80033ac:	1a89      	subs	r1, r1, r2
 80033ae:	d025      	beq.n	80033fc <ai_array_fmt_valid+0xde>
 80033b0:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 80033b4:	1a89      	subs	r1, r1, r2
 80033b6:	d021      	beq.n	80033fc <ai_array_fmt_valid+0xde>
 80033b8:	f8df 22fc 	ldr.w	r2, [pc, #764]	; 80036b8 <.text_17>
 80033bc:	1a89      	subs	r1, r1, r2
 80033be:	d01d      	beq.n	80033fc <ai_array_fmt_valid+0xde>
 80033c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80033c4:	1a89      	subs	r1, r1, r2
 80033c6:	d019      	beq.n	80033fc <ai_array_fmt_valid+0xde>
 80033c8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80033cc:	1a89      	subs	r1, r1, r2
 80033ce:	d015      	beq.n	80033fc <ai_array_fmt_valid+0xde>
 80033d0:	f8df 22e8 	ldr.w	r2, [pc, #744]	; 80036bc <.text_18>
 80033d4:	1a89      	subs	r1, r1, r2
 80033d6:	d011      	beq.n	80033fc <ai_array_fmt_valid+0xde>
 80033d8:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 80033dc:	1a89      	subs	r1, r1, r2
 80033de:	bf1e      	ittt	ne
 80033e0:	f36f 000d 	bfcne	r0, #0, #14
 80033e4:	f040 0040 	orrne.w	r0, r0, #64	; 0x40
 80033e8:	2840      	cmpne	r0, #64	; 0x40
 80033ea:	d007      	beq.n	80033fc <ai_array_fmt_valid+0xde>
 80033ec:	f8df 32d0 	ldr.w	r3, [pc, #720]	; 80036c0 <.text_19>
 80033f0:	4298      	cmp	r0, r3
 80033f2:	bf1c      	itt	ne
 80033f4:	f8df 32cc 	ldrne.w	r3, [pc, #716]	; 80036c4 <.text_20>
 80033f8:	4298      	cmpne	r0, r3
 80033fa:	d101      	bne.n	8003400 <ai_array_fmt_valid+0xe2>
 80033fc:	2001      	movs	r0, #1
 80033fe:	4770      	bx	lr
 8003400:	2000      	movs	r0, #0
 8003402:	4770      	bx	lr

08003404 <ai_array_fmt_get_formats>:
 8003404:	f8df 12c0 	ldr.w	r1, [pc, #704]	; 80036c8 <.text_21>
 8003408:	6001      	str	r1, [r0, #0]
 800340a:	201c      	movs	r0, #28
 800340c:	4770      	bx	lr
	...

08003410 <.text_8>:
 8003410:	00000000 	.word	0x00000000

08003414 <ai_buffer_fmt_name>:
 8003414:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 8003418:	f1b0 0140 	subs.w	r1, r0, #64	; 0x40
 800341c:	d022      	beq.n	8003464 <ai_buffer_fmt_name+0x50>
 800341e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8003422:	1a89      	subs	r1, r1, r2
 8003424:	d039      	beq.n	800349a <ai_buffer_fmt_name+0x86>
 8003426:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800342a:	1a89      	subs	r1, r1, r2
 800342c:	d020      	beq.n	8003470 <ai_buffer_fmt_name+0x5c>
 800342e:	1fc9      	subs	r1, r1, #7
 8003430:	d036      	beq.n	80034a0 <ai_buffer_fmt_name+0x8c>
 8003432:	f240 32f9 	movw	r2, #1017	; 0x3f9
 8003436:	1a89      	subs	r1, r1, r2
 8003438:	d01d      	beq.n	8003476 <ai_buffer_fmt_name+0x62>
 800343a:	390f      	subs	r1, #15
 800343c:	d033      	beq.n	80034a6 <ai_buffer_fmt_name+0x92>
 800343e:	4aa3      	ldr	r2, [pc, #652]	; (80036cc <.text_22>)
 8003440:	1a89      	subs	r1, r1, r2
 8003442:	d021      	beq.n	8003488 <ai_buffer_fmt_name+0x74>
 8003444:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003448:	1a89      	subs	r1, r1, r2
 800344a:	d017      	beq.n	800347c <ai_buffer_fmt_name+0x68>
 800344c:	1fc9      	subs	r1, r1, #7
 800344e:	d01e      	beq.n	800348e <ai_buffer_fmt_name+0x7a>
 8003450:	f240 32f9 	movw	r2, #1017	; 0x3f9
 8003454:	1a89      	subs	r1, r1, r2
 8003456:	d014      	beq.n	8003482 <ai_buffer_fmt_name+0x6e>
 8003458:	390f      	subs	r1, #15
 800345a:	d01b      	beq.n	8003494 <ai_buffer_fmt_name+0x80>
 800345c:	4a9c      	ldr	r2, [pc, #624]	; (80036d0 <.text_23>)
 800345e:	1a89      	subs	r1, r1, r2
 8003460:	d003      	beq.n	800346a <ai_buffer_fmt_name+0x56>
 8003462:	e023      	b.n	80034ac <ai_buffer_fmt_name+0x98>
 8003464:	f20f 3070 	addw	r0, pc, #880	; 0x370
 8003468:	4770      	bx	lr
 800346a:	f20f 3078 	addw	r0, pc, #888	; 0x378
 800346e:	4770      	bx	lr
 8003470:	f20f 3094 	addw	r0, pc, #916	; 0x394
 8003474:	4770      	bx	lr
 8003476:	f20f 3098 	addw	r0, pc, #920	; 0x398
 800347a:	4770      	bx	lr
 800347c:	f20f 30b0 	addw	r0, pc, #944	; 0x3b0
 8003480:	4770      	bx	lr
 8003482:	f20f 30b4 	addw	r0, pc, #948	; 0x3b4
 8003486:	4770      	bx	lr
 8003488:	f20f 30cc 	addw	r0, pc, #972	; 0x3cc
 800348c:	4770      	bx	lr
 800348e:	f20f 30d0 	addw	r0, pc, #976	; 0x3d0
 8003492:	4770      	bx	lr
 8003494:	f20f 30d0 	addw	r0, pc, #976	; 0x3d0
 8003498:	4770      	bx	lr
 800349a:	f20f 30dc 	addw	r0, pc, #988	; 0x3dc
 800349e:	4770      	bx	lr
 80034a0:	f20f 30dc 	addw	r0, pc, #988	; 0x3dc
 80034a4:	4770      	bx	lr
 80034a6:	f20f 30e0 	addw	r0, pc, #992	; 0x3e0
 80034aa:	4770      	bx	lr
 80034ac:	0b80      	lsrs	r0, r0, #14
 80034ae:	0380      	lsls	r0, r0, #14
 80034b0:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 80034b4:	2840      	cmp	r0, #64	; 0x40
 80034b6:	d007      	beq.n	80034c8 <ai_buffer_fmt_name+0xb4>
 80034b8:	4981      	ldr	r1, [pc, #516]	; (80036c0 <.text_19>)
 80034ba:	4288      	cmp	r0, r1
 80034bc:	d00a      	beq.n	80034d4 <ai_buffer_fmt_name+0xc0>
 80034be:	4981      	ldr	r1, [pc, #516]	; (80036c4 <.text_20>)
 80034c0:	4288      	cmp	r0, r1
 80034c2:	d004      	beq.n	80034ce <ai_buffer_fmt_name+0xba>
 80034c4:	a079      	add	r0, pc, #484	; (adr r0, 80036ac <.text_14>)
 80034c6:	4770      	bx	lr
 80034c8:	f20f 4074 	addw	r0, pc, #1140	; 0x474
 80034cc:	4770      	bx	lr
 80034ce:	f20f 4088 	addw	r0, pc, #1160	; 0x488
 80034d2:	4770      	bx	lr
 80034d4:	f20f 4094 	addw	r0, pc, #1172	; 0x494
 80034d8:	4770      	bx	lr

080034da <ai_buffer_fmt_valid>:
 80034da:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 80034de:	f1b0 0140 	subs.w	r1, r0, #64	; 0x40
 80034e2:	d02d      	beq.n	8003540 <ai_buffer_fmt_valid+0x66>
 80034e4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80034e8:	1a89      	subs	r1, r1, r2
 80034ea:	d029      	beq.n	8003540 <ai_buffer_fmt_valid+0x66>
 80034ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80034f0:	1a89      	subs	r1, r1, r2
 80034f2:	d025      	beq.n	8003540 <ai_buffer_fmt_valid+0x66>
 80034f4:	1fc9      	subs	r1, r1, #7
 80034f6:	d023      	beq.n	8003540 <ai_buffer_fmt_valid+0x66>
 80034f8:	f240 32f9 	movw	r2, #1017	; 0x3f9
 80034fc:	1a89      	subs	r1, r1, r2
 80034fe:	d01f      	beq.n	8003540 <ai_buffer_fmt_valid+0x66>
 8003500:	390f      	subs	r1, #15
 8003502:	d01d      	beq.n	8003540 <ai_buffer_fmt_valid+0x66>
 8003504:	4a71      	ldr	r2, [pc, #452]	; (80036cc <.text_22>)
 8003506:	1a89      	subs	r1, r1, r2
 8003508:	d01a      	beq.n	8003540 <ai_buffer_fmt_valid+0x66>
 800350a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800350e:	1a89      	subs	r1, r1, r2
 8003510:	d016      	beq.n	8003540 <ai_buffer_fmt_valid+0x66>
 8003512:	1fc9      	subs	r1, r1, #7
 8003514:	d014      	beq.n	8003540 <ai_buffer_fmt_valid+0x66>
 8003516:	f240 32f9 	movw	r2, #1017	; 0x3f9
 800351a:	1a89      	subs	r1, r1, r2
 800351c:	d010      	beq.n	8003540 <ai_buffer_fmt_valid+0x66>
 800351e:	390f      	subs	r1, #15
 8003520:	d00e      	beq.n	8003540 <ai_buffer_fmt_valid+0x66>
 8003522:	4a6b      	ldr	r2, [pc, #428]	; (80036d0 <.text_23>)
 8003524:	1a89      	subs	r1, r1, r2
 8003526:	bf1f      	itttt	ne
 8003528:	0b80      	lsrne	r0, r0, #14
 800352a:	0380      	lslne	r0, r0, #14
 800352c:	f040 0040 	orrne.w	r0, r0, #64	; 0x40
 8003530:	2840      	cmpne	r0, #64	; 0x40
 8003532:	d005      	beq.n	8003540 <ai_buffer_fmt_valid+0x66>
 8003534:	4b62      	ldr	r3, [pc, #392]	; (80036c0 <.text_19>)
 8003536:	4298      	cmp	r0, r3
 8003538:	bf1c      	itt	ne
 800353a:	4b62      	ldrne	r3, [pc, #392]	; (80036c4 <.text_20>)
 800353c:	4298      	cmpne	r0, r3
 800353e:	d101      	bne.n	8003544 <ai_buffer_fmt_valid+0x6a>
 8003540:	2001      	movs	r0, #1
 8003542:	4770      	bx	lr
 8003544:	2000      	movs	r0, #0
 8003546:	4770      	bx	lr

08003548 <ai_buffer_fmt_get_formats>:
 8003548:	4962      	ldr	r1, [pc, #392]	; (80036d4 <.text_24>)
 800354a:	6001      	str	r1, [r0, #0]
 800354c:	200c      	movs	r0, #12
 800354e:	4770      	bx	lr

08003550 <ai_array_to_buffer_fmt>:
 8003550:	4601      	mov	r1, r0
 8003552:	2040      	movs	r0, #64	; 0x40
 8003554:	f3c1 4243 	ubfx	r2, r1, #17, #4
 8003558:	2a02      	cmp	r2, #2
 800355a:	d104      	bne.n	8003566 <ai_array_to_buffer_fmt+0x16>
 800355c:	485e      	ldr	r0, [pc, #376]	; (80036d8 <.text_25>)
 800355e:	4008      	ands	r0, r1
 8003560:	f440 2080 	orr.w	r0, r0, #262144	; 0x40000
 8003564:	e037      	b.n	80035d6 <ai_array_to_buffer_fmt+0x86>
 8003566:	f021 427e 	bic.w	r2, r1, #4261412864	; 0xfe000000
 800356a:	4b55      	ldr	r3, [pc, #340]	; (80036c0 <.text_19>)
 800356c:	1ad2      	subs	r2, r2, r3
 800356e:	d02d      	beq.n	80035cc <ai_array_to_buffer_fmt+0x7c>
 8003570:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003574:	1ad2      	subs	r2, r2, r3
 8003576:	d01b      	beq.n	80035b0 <ai_array_to_buffer_fmt+0x60>
 8003578:	1fd2      	subs	r2, r2, #7
 800357a:	d029      	beq.n	80035d0 <ai_array_to_buffer_fmt+0x80>
 800357c:	f240 33f9 	movw	r3, #1017	; 0x3f9
 8003580:	1ad2      	subs	r2, r2, r3
 8003582:	d017      	beq.n	80035b4 <ai_array_to_buffer_fmt+0x64>
 8003584:	3a0f      	subs	r2, #15
 8003586:	d025      	beq.n	80035d4 <ai_array_to_buffer_fmt+0x84>
 8003588:	4b50      	ldr	r3, [pc, #320]	; (80036cc <.text_22>)
 800358a:	1ad2      	subs	r2, r2, r3
 800358c:	d018      	beq.n	80035c0 <ai_array_to_buffer_fmt+0x70>
 800358e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003592:	1ad2      	subs	r2, r2, r3
 8003594:	d010      	beq.n	80035b8 <ai_array_to_buffer_fmt+0x68>
 8003596:	1fd2      	subs	r2, r2, #7
 8003598:	d014      	beq.n	80035c4 <ai_array_to_buffer_fmt+0x74>
 800359a:	f240 33f9 	movw	r3, #1017	; 0x3f9
 800359e:	1ad2      	subs	r2, r2, r3
 80035a0:	d00c      	beq.n	80035bc <ai_array_to_buffer_fmt+0x6c>
 80035a2:	3a0f      	subs	r2, #15
 80035a4:	d010      	beq.n	80035c8 <ai_array_to_buffer_fmt+0x78>
 80035a6:	4b4a      	ldr	r3, [pc, #296]	; (80036d0 <.text_23>)
 80035a8:	1ad2      	subs	r2, r2, r3
 80035aa:	d114      	bne.n	80035d6 <ai_array_to_buffer_fmt+0x86>
 80035ac:	484b      	ldr	r0, [pc, #300]	; (80036dc <.text_26>)
 80035ae:	e012      	b.n	80035d6 <ai_array_to_buffer_fmt+0x86>
 80035b0:	484b      	ldr	r0, [pc, #300]	; (80036e0 <.text_27>)
 80035b2:	e010      	b.n	80035d6 <ai_array_to_buffer_fmt+0x86>
 80035b4:	484b      	ldr	r0, [pc, #300]	; (80036e4 <.text_28>)
 80035b6:	e00e      	b.n	80035d6 <ai_array_to_buffer_fmt+0x86>
 80035b8:	484b      	ldr	r0, [pc, #300]	; (80036e8 <.text_29>)
 80035ba:	e00c      	b.n	80035d6 <ai_array_to_buffer_fmt+0x86>
 80035bc:	484b      	ldr	r0, [pc, #300]	; (80036ec <.text_30>)
 80035be:	e00a      	b.n	80035d6 <ai_array_to_buffer_fmt+0x86>
 80035c0:	4840      	ldr	r0, [pc, #256]	; (80036c4 <.text_20>)
 80035c2:	e008      	b.n	80035d6 <ai_array_to_buffer_fmt+0x86>
 80035c4:	484a      	ldr	r0, [pc, #296]	; (80036f0 <.text_31>)
 80035c6:	e006      	b.n	80035d6 <ai_array_to_buffer_fmt+0x86>
 80035c8:	484a      	ldr	r0, [pc, #296]	; (80036f4 <.text_32>)
 80035ca:	e004      	b.n	80035d6 <ai_array_to_buffer_fmt+0x86>
 80035cc:	4618      	mov	r0, r3
 80035ce:	e002      	b.n	80035d6 <ai_array_to_buffer_fmt+0x86>
 80035d0:	4849      	ldr	r0, [pc, #292]	; (80036f8 <.text_33>)
 80035d2:	e000      	b.n	80035d6 <ai_array_to_buffer_fmt+0x86>
 80035d4:	4849      	ldr	r0, [pc, #292]	; (80036fc <.text_34>)
 80035d6:	004a      	lsls	r2, r1, #1
 80035d8:	bf4c      	ite	mi
 80035da:	f04f 4280 	movmi.w	r2, #1073741824	; 0x40000000
 80035de:	2200      	movpl	r2, #0
 80035e0:	4310      	orrs	r0, r2
 80035e2:	008a      	lsls	r2, r1, #2
 80035e4:	bf4c      	ite	mi
 80035e6:	f04f 5200 	movmi.w	r2, #536870912	; 0x20000000
 80035ea:	2200      	movpl	r2, #0
 80035ec:	4310      	orrs	r0, r2
 80035ee:	0109      	lsls	r1, r1, #4
 80035f0:	bf4c      	ite	mi
 80035f2:	f04f 6100 	movmi.w	r1, #134217728	; 0x8000000
 80035f6:	2100      	movpl	r1, #0
 80035f8:	4308      	orrs	r0, r1
 80035fa:	4770      	bx	lr

080035fc <ai_buffer_to_array_fmt>:
 80035fc:	4602      	mov	r2, r0
 80035fe:	f022 407e 	bic.w	r0, r2, #4261412864	; 0xfe000000
 8003602:	3840      	subs	r0, #64	; 0x40
 8003604:	d022      	beq.n	800364c <ai_buffer_to_array_fmt+0x50>
 8003606:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 800360a:	1a40      	subs	r0, r0, r1
 800360c:	d030      	beq.n	8003670 <ai_buffer_to_array_fmt+0x74>
 800360e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003612:	1a40      	subs	r0, r0, r1
 8003614:	d01e      	beq.n	8003654 <ai_buffer_to_array_fmt+0x58>
 8003616:	1fc0      	subs	r0, r0, #7
 8003618:	d02c      	beq.n	8003674 <ai_buffer_to_array_fmt+0x78>
 800361a:	f240 31f9 	movw	r1, #1017	; 0x3f9
 800361e:	1a40      	subs	r0, r0, r1
 8003620:	d01a      	beq.n	8003658 <ai_buffer_to_array_fmt+0x5c>
 8003622:	380f      	subs	r0, #15
 8003624:	d028      	beq.n	8003678 <ai_buffer_to_array_fmt+0x7c>
 8003626:	4929      	ldr	r1, [pc, #164]	; (80036cc <.text_22>)
 8003628:	1a40      	subs	r0, r0, r1
 800362a:	d01b      	beq.n	8003664 <ai_buffer_to_array_fmt+0x68>
 800362c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003630:	1a40      	subs	r0, r0, r1
 8003632:	d013      	beq.n	800365c <ai_buffer_to_array_fmt+0x60>
 8003634:	1fc0      	subs	r0, r0, #7
 8003636:	d017      	beq.n	8003668 <ai_buffer_to_array_fmt+0x6c>
 8003638:	f240 31f9 	movw	r1, #1017	; 0x3f9
 800363c:	1a40      	subs	r0, r0, r1
 800363e:	d00f      	beq.n	8003660 <ai_buffer_to_array_fmt+0x64>
 8003640:	380f      	subs	r0, #15
 8003642:	d013      	beq.n	800366c <ai_buffer_to_array_fmt+0x70>
 8003644:	4922      	ldr	r1, [pc, #136]	; (80036d0 <.text_23>)
 8003646:	1a40      	subs	r0, r0, r1
 8003648:	d002      	beq.n	8003650 <ai_buffer_to_array_fmt+0x54>
 800364a:	e017      	b.n	800367c <ai_buffer_to_array_fmt+0x80>
 800364c:	2040      	movs	r0, #64	; 0x40
 800364e:	e01f      	b.n	8003690 <ai_buffer_to_array_fmt+0x94>
 8003650:	4822      	ldr	r0, [pc, #136]	; (80036dc <.text_26>)
 8003652:	e01d      	b.n	8003690 <ai_buffer_to_array_fmt+0x94>
 8003654:	4822      	ldr	r0, [pc, #136]	; (80036e0 <.text_27>)
 8003656:	e01b      	b.n	8003690 <ai_buffer_to_array_fmt+0x94>
 8003658:	4822      	ldr	r0, [pc, #136]	; (80036e4 <.text_28>)
 800365a:	e019      	b.n	8003690 <ai_buffer_to_array_fmt+0x94>
 800365c:	4822      	ldr	r0, [pc, #136]	; (80036e8 <.text_29>)
 800365e:	e017      	b.n	8003690 <ai_buffer_to_array_fmt+0x94>
 8003660:	4822      	ldr	r0, [pc, #136]	; (80036ec <.text_30>)
 8003662:	e015      	b.n	8003690 <ai_buffer_to_array_fmt+0x94>
 8003664:	4817      	ldr	r0, [pc, #92]	; (80036c4 <.text_20>)
 8003666:	e013      	b.n	8003690 <ai_buffer_to_array_fmt+0x94>
 8003668:	4821      	ldr	r0, [pc, #132]	; (80036f0 <.text_31>)
 800366a:	e011      	b.n	8003690 <ai_buffer_to_array_fmt+0x94>
 800366c:	4821      	ldr	r0, [pc, #132]	; (80036f4 <.text_32>)
 800366e:	e00f      	b.n	8003690 <ai_buffer_to_array_fmt+0x94>
 8003670:	4813      	ldr	r0, [pc, #76]	; (80036c0 <.text_19>)
 8003672:	e00d      	b.n	8003690 <ai_buffer_to_array_fmt+0x94>
 8003674:	4820      	ldr	r0, [pc, #128]	; (80036f8 <.text_33>)
 8003676:	e00b      	b.n	8003690 <ai_buffer_to_array_fmt+0x94>
 8003678:	4820      	ldr	r0, [pc, #128]	; (80036fc <.text_34>)
 800367a:	e009      	b.n	8003690 <ai_buffer_to_array_fmt+0x94>
 800367c:	f3c2 51c0 	ubfx	r1, r2, #23, #1
 8003680:	f3c2 000d 	ubfx	r0, r2, #0, #14
 8003684:	2900      	cmp	r1, #0
 8003686:	bf14      	ite	ne
 8003688:	f440 0004 	orrne.w	r0, r0, #8650752	; 0x840000
 800368c:	f440 2080 	orreq.w	r0, r0, #262144	; 0x40000
 8003690:	0051      	lsls	r1, r2, #1
 8003692:	bf48      	it	mi
 8003694:	f040 4080 	orrmi.w	r0, r0, #1073741824	; 0x40000000
 8003698:	0091      	lsls	r1, r2, #2
 800369a:	bf48      	it	mi
 800369c:	f040 5000 	orrmi.w	r0, r0, #536870912	; 0x20000000
 80036a0:	0111      	lsls	r1, r2, #4
 80036a2:	bf48      	it	mi
 80036a4:	f040 6000 	orrmi.w	r0, r0, #134217728	; 0x8000000
 80036a8:	4770      	bx	lr
	...

080036ac <.text_14>:
 80036ac:	00000000 	.word	0x00000000

080036b0 <.text_15>:
 80036b0:	002be80f 	.word	0x002be80f

080036b4 <.text_16>:
 80036b4:	003bf7f1 	.word	0x003bf7f1

080036b8 <.text_17>:
 80036b8:	00b9fff1 	.word	0x00b9fff1

080036bc <.text_18>:
 80036bc:	004df000 	.word	0x004df000

080036c0 <.text_19>:
 80036c0:	00040040 	.word	0x00040040

080036c4 <.text_20>:
 80036c4:	00840040 	.word	0x00840040

080036c8 <.text_21>:
 80036c8:	08009fa0 	.word	0x08009fa0

080036cc <.text_22>:
 80036cc:	007ff7f1 	.word	0x007ff7f1

080036d0 <.text_23>:
 80036d0:	00fe07f1 	.word	0x00fe07f1

080036d4 <.text_24>:
 80036d4:	0800a010 	.word	0x0800a010

080036d8 <.text_25>:
 80036d8:	00803fff 	.word	0x00803fff

080036dc <.text_26>:
 80036dc:	01821040 	.word	0x01821040

080036e0 <.text_27>:
 80036e0:	00040440 	.word	0x00040440

080036e4 <.text_28>:
 80036e4:	00040840 	.word	0x00040840

080036e8 <.text_29>:
 80036e8:	00840440 	.word	0x00840440

080036ec <.text_30>:
 80036ec:	00840840 	.word	0x00840840

080036f0 <.text_31>:
 80036f0:	00840447 	.word	0x00840447

080036f4 <.text_32>:
 80036f4:	0084084f 	.word	0x0084084f

080036f8 <.text_33>:
 80036f8:	00040447 	.word	0x00040447

080036fc <.text_34>:
 80036fc:	0004084f 	.word	0x0004084f

08003700 <ai_array_get_byte_size>:
 8003700:	b909      	cbnz	r1, 8003706 <ai_array_get_byte_size+0x6>
 8003702:	2000      	movs	r0, #0
 8003704:	4770      	bx	lr
 8003706:	11c2      	asrs	r2, r0, #7
 8003708:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800370c:	f3c0 3382 	ubfx	r3, r0, #14, #3
 8003710:	189b      	adds	r3, r3, r2
 8003712:	4359      	muls	r1, r3
 8003714:	1dc9      	adds	r1, r1, #7
 8003716:	08c9      	lsrs	r1, r1, #3
 8003718:	1543      	asrs	r3, r0, #21
 800371a:	00c9      	lsls	r1, r1, #3
 800371c:	f003 0303 	and.w	r3, r3, #3
 8003720:	ea4f 4c60 	mov.w	ip, r0, asr #17
 8003724:	40d9      	lsrs	r1, r3
 8003726:	f00c 0c0f 	and.w	ip, ip, #15
 800372a:	f1bc 0f04 	cmp.w	ip, #4
 800372e:	d00a      	beq.n	8003746 <ai_array_get_byte_size+0x46>
 8003730:	f1bc 0f08 	cmp.w	ip, #8
 8003734:	bf02      	ittt	eq
 8003736:	f3c0 3082 	ubfxeq	r0, r0, #14, #3
 800373a:	1882      	addeq	r2, r0, r2
 800373c:	eb01 2102 	addeq.w	r1, r1, r2, lsl #8
 8003740:	1dc9      	adds	r1, r1, #7
 8003742:	08c8      	lsrs	r0, r1, #3
 8003744:	4770      	bx	lr
 8003746:	f3c0 3082 	ubfx	r0, r0, #14, #3
 800374a:	1882      	adds	r2, r0, r2
 800374c:	eb01 1102 	add.w	r1, r1, r2, lsl #4
 8003750:	1dc9      	adds	r1, r1, #7
 8003752:	08c8      	lsrs	r0, r1, #3
 8003754:	4770      	bx	lr

08003756 <ai_array_get_data_byte_size>:
 8003756:	b909      	cbnz	r1, 800375c <ai_array_get_data_byte_size+0x6>
 8003758:	2000      	movs	r0, #0
 800375a:	4770      	bx	lr
 800375c:	11c2      	asrs	r2, r0, #7
 800375e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003762:	f3c0 3382 	ubfx	r3, r0, #14, #3
 8003766:	189a      	adds	r2, r3, r2
 8003768:	4351      	muls	r1, r2
 800376a:	1dc9      	adds	r1, r1, #7
 800376c:	08c9      	lsrs	r1, r1, #3
 800376e:	1540      	asrs	r0, r0, #21
 8003770:	00c9      	lsls	r1, r1, #3
 8003772:	f000 0003 	and.w	r0, r0, #3
 8003776:	40c1      	lsrs	r1, r0
 8003778:	1dc9      	adds	r1, r1, #7
 800377a:	08c8      	lsrs	r0, r1, #3
 800377c:	4770      	bx	lr

0800377e <ai_array_get_elems_from_size>:
 800377e:	b909      	cbnz	r1, 8003784 <ai_array_get_elems_from_size+0x6>
 8003780:	2000      	movs	r0, #0
 8003782:	4770      	bx	lr
 8003784:	1442      	asrs	r2, r0, #17
 8003786:	00c9      	lsls	r1, r1, #3
 8003788:	f002 020f 	and.w	r2, r2, #15
 800378c:	2a04      	cmp	r2, #4
 800378e:	d002      	beq.n	8003796 <ai_array_get_elems_from_size+0x18>
 8003790:	2a08      	cmp	r2, #8
 8003792:	d009      	beq.n	80037a8 <ai_array_get_elems_from_size+0x2a>
 8003794:	e010      	b.n	80037b8 <ai_array_get_elems_from_size+0x3a>
 8003796:	11c3      	asrs	r3, r0, #7
 8003798:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800379c:	f3c0 3282 	ubfx	r2, r0, #14, #3
 80037a0:	18d2      	adds	r2, r2, r3
 80037a2:	eba1 1102 	sub.w	r1, r1, r2, lsl #4
 80037a6:	e007      	b.n	80037b8 <ai_array_get_elems_from_size+0x3a>
 80037a8:	11c2      	asrs	r2, r0, #7
 80037aa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80037ae:	f3c0 3382 	ubfx	r3, r0, #14, #3
 80037b2:	189a      	adds	r2, r3, r2
 80037b4:	eba1 2102 	sub.w	r1, r1, r2, lsl #8
 80037b8:	1542      	asrs	r2, r0, #21
 80037ba:	f002 0203 	and.w	r2, r2, #3
 80037be:	4091      	lsls	r1, r2
 80037c0:	1dc9      	adds	r1, r1, #7
 80037c2:	11c2      	asrs	r2, r0, #7
 80037c4:	08c9      	lsrs	r1, r1, #3
 80037c6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80037ca:	f3c0 3082 	ubfx	r0, r0, #14, #3
 80037ce:	00c9      	lsls	r1, r1, #3
 80037d0:	1880      	adds	r0, r0, r2
 80037d2:	fbb1 f0f0 	udiv	r0, r1, r0
 80037d6:	4770      	bx	lr

080037d8 <.text_38>:
 80037d8:	5f544d46 	.word	0x5f544d46
 80037dc:	454e4f4e 	.word	0x454e4f4e
 80037e0:	00000000 	.word	0x00000000

080037e4 <.text_39>:
 80037e4:	5f544d46 	.word	0x5f544d46
 80037e8:	414f4c46 	.word	0x414f4c46
 80037ec:	0054      	.short	0x0054
	...

080037f0 <.text_40>:
 80037f0:	5f544d46 	.word	0x5f544d46
 80037f4:	414f4c46 	.word	0x414f4c46
 80037f8:	00343654 	.word	0x00343654

080037fc <.text_41>:
 80037fc:	5f544d46 	.word	0x5f544d46
 8003800:	414f4c46 	.word	0x414f4c46
 8003804:	00363154 	.word	0x00363154

08003808 <.text_42>:
 8003808:	5f544d46 	.word	0x5f544d46
 800380c:	3855      	.short	0x3855
	...

08003810 <.text_43>:
 8003810:	5f544d46 	.word	0x5f544d46
 8003814:	00363155 	.word	0x00363155

08003818 <.text_44>:
 8003818:	5f544d46 	.word	0x5f544d46
 800381c:	00323355 	.word	0x00323355

08003820 <.text_45>:
 8003820:	5f544d46 	.word	0x5f544d46
 8003824:	00343655 	.word	0x00343655

08003828 <.text_46>:
 8003828:	5f544d46 	.word	0x5f544d46
 800382c:	3455      	.short	0x3455
	...

08003830 <.text_47>:
 8003830:	5f544d46 	.word	0x5f544d46
 8003834:	3853      	.short	0x3853
	...

08003838 <.text_48>:
 8003838:	5f544d46 	.word	0x5f544d46
 800383c:	00363153 	.word	0x00363153

08003840 <.text_49>:
 8003840:	5f544d46 	.word	0x5f544d46
 8003844:	00323353 	.word	0x00323353

08003848 <.text_50>:
 8003848:	5f544d46 	.word	0x5f544d46
 800384c:	00343653 	.word	0x00343653

08003850 <.text_51>:
 8003850:	5f544d46 	.word	0x5f544d46
 8003854:	3453      	.short	0x3453
	...

08003858 <.text_52>:
 8003858:	5f544d46 	.word	0x5f544d46
 800385c:	0051      	.short	0x0051
	...

08003860 <.text_53>:
 8003860:	5f544d46 	.word	0x5f544d46
 8003864:	3751      	.short	0x3751
	...

08003868 <.text_54>:
 8003868:	5f544d46 	.word	0x5f544d46
 800386c:	00353151 	.word	0x00353151

08003870 <.text_55>:
 8003870:	5f544d46 	.word	0x5f544d46
 8003874:	00313351 	.word	0x00313351

08003878 <.text_56>:
 8003878:	5f544d46 	.word	0x5f544d46
 800387c:	5155      	.short	0x5155
	...

08003880 <.text_57>:
 8003880:	5f544d46 	.word	0x5f544d46
 8003884:	00375155 	.word	0x00375155

08003888 <.text_58>:
 8003888:	5f544d46 	.word	0x5f544d46
 800388c:	35315155 	.word	0x35315155
 8003890:	00000000 	.word	0x00000000

08003894 <.text_59>:
 8003894:	5f544d46 	.word	0x5f544d46
 8003898:	31335155 	.word	0x31335155
 800389c:	00000000 	.word	0x00000000

080038a0 <.text_60>:
 80038a0:	5f544d46 	.word	0x5f544d46
 80038a4:	3454554c 	.word	0x3454554c
 80038a8:	4f4c465f 	.word	0x4f4c465f
 80038ac:	5441      	.short	0x5441
	...

080038b0 <.text_61>:
 80038b0:	5f544d46 	.word	0x5f544d46
 80038b4:	3854554c 	.word	0x3854554c
 80038b8:	4f4c465f 	.word	0x4f4c465f
 80038bc:	5441      	.short	0x5441
	...

080038c0 <.text_62>:
 80038c0:	5f544d46 	.word	0x5f544d46
 80038c4:	3454554c 	.word	0x3454554c
 80038c8:	3531515f 	.word	0x3531515f
 80038cc:	00000000 	.word	0x00000000

080038d0 <.text_63>:
 80038d0:	5f544d46 	.word	0x5f544d46
 80038d4:	3854554c 	.word	0x3854554c
 80038d8:	3531515f 	.word	0x3531515f
 80038dc:	00000000 	.word	0x00000000

080038e0 <.text_64>:
 80038e0:	5f544d46 	.word	0x5f544d46
 80038e4:	3454554c 	.word	0x3454554c
 80038e8:	3151555f 	.word	0x3151555f
 80038ec:	0035      	.short	0x0035
	...

080038f0 <.text_65>:
 80038f0:	5f544d46 	.word	0x5f544d46
 80038f4:	3854554c 	.word	0x3854554c
 80038f8:	3151555f 	.word	0x3151555f
 80038fc:	0035      	.short	0x0035
	...

08003900 <.text_66>:
 8003900:	415f4941 	.word	0x415f4941
 8003904:	59415252 	.word	0x59415252
 8003908:	524f465f 	.word	0x524f465f
 800390c:	5f54414d 	.word	0x5f54414d
 8003910:	454e4f4e 	.word	0x454e4f4e
 8003914:	00000000 	.word	0x00000000

08003918 <.text_67>:
 8003918:	415f4941 	.word	0x415f4941
 800391c:	59415252 	.word	0x59415252
 8003920:	524f465f 	.word	0x524f465f
 8003924:	5f54414d 	.word	0x5f54414d
 8003928:	0051      	.short	0x0051
	...

0800392c <.text_68>:
 800392c:	415f4941 	.word	0x415f4941
 8003930:	59415252 	.word	0x59415252
 8003934:	524f465f 	.word	0x524f465f
 8003938:	5f54414d 	.word	0x5f54414d
 800393c:	5155      	.short	0x5155
	...

08003940 <.text_69>:
 8003940:	425f4941 	.word	0x425f4941
 8003944:	45464655 	.word	0x45464655
 8003948:	4f465f52 	.word	0x4f465f52
 800394c:	54414d52 	.word	0x54414d52
 8003950:	4e4f4e5f 	.word	0x4e4f4e5f
 8003954:	0045      	.short	0x0045
	...

08003958 <.text_70>:
 8003958:	425f4941 	.word	0x425f4941
 800395c:	45464655 	.word	0x45464655
 8003960:	4f465f52 	.word	0x4f465f52
 8003964:	54414d52 	.word	0x54414d52
 8003968:	515f      	.short	0x515f
	...

0800396c <.text_71>:
 800396c:	425f4941 	.word	0x425f4941
 8003970:	45464655 	.word	0x45464655
 8003974:	4f465f52 	.word	0x4f465f52
 8003978:	54414d52 	.word	0x54414d52
 800397c:	0051555f 	.word	0x0051555f

08003980 <ai_math_dot_array>:
 8003980:	b530      	push	{r4, r5, lr}
 8003982:	4604      	mov	r4, r0
 8003984:	4608      	mov	r0, r1
 8003986:	b081      	sub	sp, #4
 8003988:	4611      	mov	r1, r2
 800398a:	461a      	mov	r2, r3
 800398c:	2500      	movs	r5, #0
 800398e:	9500      	str	r5, [sp, #0]
 8003990:	466b      	mov	r3, sp
 8003992:	f000 fceb 	bl	800436c <arm_dot_prod_f32>
 8003996:	ed94 0a00 	vldr	s0, [r4]
 800399a:	eddd 0a00 	vldr	s1, [sp]
 800399e:	ee70 0a20 	vadd.f32	s1, s0, s1
 80039a2:	edc4 0a00 	vstr	s1, [r4]
 80039a6:	b001      	add	sp, #4
 80039a8:	bd30      	pop	{r4, r5, pc}
	...

080039ac <ai_math_sqrt>:
 80039ac:	eef0 0a40 	vmov.f32	s1, s0
 80039b0:	eef5 0a40 	vcmp.f32	s1, #0.0
 80039b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039b8:	ed9f 0a28 	vldr	s0, [pc, #160]	; 8003a5c <.text_12>
 80039bc:	db01      	blt.n	80039c2 <ai_math_sqrt+0x16>
 80039be:	eeb1 0ae0 	vsqrt.f32	s0, s1
 80039c2:	4770      	bx	lr

080039c4 <ai_math_exp>:
 80039c4:	f005 b9d2 	b.w	8008d6c <expf>

080039c8 <ai_math_pow>:
 80039c8:	f005 bac0 	b.w	8008f4c <powf>

080039cc <ai_math_tanh>:
 80039cc:	f005 b97c 	b.w	8008cc8 <tanhf>

080039d0 <ai_math_relu>:
 80039d0:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80039d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039d8:	bf48      	it	mi
 80039da:	ed9f 0a20 	vldrmi	s0, [pc, #128]	; 8003a5c <.text_12>
 80039de:	4770      	bx	lr

080039e0 <ai_math_prelu>:
 80039e0:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80039e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039e8:	bf48      	it	mi
 80039ea:	ee20 0a20 	vmulmi.f32	s0, s0, s1
 80039ee:	4770      	bx	lr

080039f0 <ai_math_sigmoid>:
 80039f0:	b500      	push	{lr}
 80039f2:	b081      	sub	sp, #4
 80039f4:	eeb1 0a40 	vneg.f32	s0, s0
 80039f8:	f005 f9b8 	bl	8008d6c <expf>
 80039fc:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003a00:	ee30 0a20 	vadd.f32	s0, s0, s1
 8003a04:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8003a08:	ee81 0a00 	vdiv.f32	s0, s2, s0
 8003a0c:	b001      	add	sp, #4
 8003a0e:	bd00      	pop	{pc}

08003a10 <ai_math_hard_sigmoid>:
 8003a10:	eef0 0a40 	vmov.f32	s1, s0
 8003a14:	ed9f 1a12 	vldr	s2, [pc, #72]	; 8003a60 <.text_13>
 8003a18:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8003a1c:	ee00 0a81 	vmla.f32	s0, s1, s2
 8003a20:	eddf 0a10 	vldr	s1, [pc, #64]	; 8003a64 <.text_14>
 8003a24:	eeb4 0a60 	vcmp.f32	s0, s1
 8003a28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a2c:	da07      	bge.n	8003a3e <ai_math_hard_sigmoid+0x2e>
 8003a2e:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8003a32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a36:	d504      	bpl.n	8003a42 <ai_math_hard_sigmoid+0x32>
 8003a38:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8003a5c <.text_12>
 8003a3c:	4770      	bx	lr
 8003a3e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003a42:	4770      	bx	lr

08003a44 <ai_math_sign>:
 8003a44:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8003a48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a4c:	bfcc      	ite	gt
 8003a4e:	ed9f 0a06 	vldrgt	s0, [pc, #24]	; 8003a68 <.text_15>
 8003a52:	ed9f 0a06 	vldrle	s0, [pc, #24]	; 8003a6c <.text_16>
 8003a56:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8003a5a:	4770      	bx	lr

08003a5c <.text_12>:
 8003a5c:	00000000 	.word	0x00000000

08003a60 <.text_13>:
 8003a60:	3e4ccccd 	.word	0x3e4ccccd

08003a64 <.text_14>:
 8003a64:	3f800001 	.word	0x3f800001

08003a68 <.text_15>:
 8003a68:	00000001 	.word	0x00000001

08003a6c <.text_16>:
 8003a6c:	ffffffff 	.word	0xffffffff

08003a70 <ai_sum>:
 8003a70:	ee30 0a20 	vadd.f32	s0, s0, s1
 8003a74:	4770      	bx	lr

08003a76 <ai_sub>:
 8003a76:	ee30 0a60 	vsub.f32	s0, s0, s1
 8003a7a:	4770      	bx	lr

08003a7c <ai_mul>:
 8003a7c:	ee20 0a20 	vmul.f32	s0, s0, s1
 8003a80:	4770      	bx	lr

08003a82 <ai_div>:
 8003a82:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8003a86:	4770      	bx	lr

08003a88 <ai_max>:
 8003a88:	eef4 0a40 	vcmp.f32	s1, s0
 8003a8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a90:	bf58      	it	pl
 8003a92:	eeb0 0a60 	vmovpl.f32	s0, s1
 8003a96:	4770      	bx	lr

08003a98 <ai_min>:
 8003a98:	eeb4 0a60 	vcmp.f32	s0, s1
 8003a9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003aa0:	bf58      	it	pl
 8003aa2:	eeb0 0a60 	vmovpl.f32	s0, s1
 8003aa6:	4770      	bx	lr

08003aa8 <__aeabi_memset>:
 8003aa8:	b470      	push	{r4, r5, r6}
 8003aaa:	0784      	lsls	r4, r0, #30
 8003aac:	d046      	beq.n	8003b3c <__aeabi_memset+0x94>
 8003aae:	1e4c      	subs	r4, r1, #1
 8003ab0:	2900      	cmp	r1, #0
 8003ab2:	d041      	beq.n	8003b38 <__aeabi_memset+0x90>
 8003ab4:	b2d5      	uxtb	r5, r2
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	e002      	b.n	8003ac0 <__aeabi_memset+0x18>
 8003aba:	1e61      	subs	r1, r4, #1
 8003abc:	b3e4      	cbz	r4, 8003b38 <__aeabi_memset+0x90>
 8003abe:	460c      	mov	r4, r1
 8003ac0:	f803 5b01 	strb.w	r5, [r3], #1
 8003ac4:	0799      	lsls	r1, r3, #30
 8003ac6:	d1f8      	bne.n	8003aba <__aeabi_memset+0x12>
 8003ac8:	2c03      	cmp	r4, #3
 8003aca:	d92e      	bls.n	8003b2a <__aeabi_memset+0x82>
 8003acc:	b2d5      	uxtb	r5, r2
 8003ace:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8003ad2:	2c0f      	cmp	r4, #15
 8003ad4:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8003ad8:	d919      	bls.n	8003b0e <__aeabi_memset+0x66>
 8003ada:	4626      	mov	r6, r4
 8003adc:	f103 0110 	add.w	r1, r3, #16
 8003ae0:	3e10      	subs	r6, #16
 8003ae2:	2e0f      	cmp	r6, #15
 8003ae4:	f841 5c10 	str.w	r5, [r1, #-16]
 8003ae8:	f841 5c0c 	str.w	r5, [r1, #-12]
 8003aec:	f841 5c08 	str.w	r5, [r1, #-8]
 8003af0:	f841 5c04 	str.w	r5, [r1, #-4]
 8003af4:	f101 0110 	add.w	r1, r1, #16
 8003af8:	d8f2      	bhi.n	8003ae0 <__aeabi_memset+0x38>
 8003afa:	f1a4 0110 	sub.w	r1, r4, #16
 8003afe:	f021 010f 	bic.w	r1, r1, #15
 8003b02:	f004 040f 	and.w	r4, r4, #15
 8003b06:	3110      	adds	r1, #16
 8003b08:	2c03      	cmp	r4, #3
 8003b0a:	440b      	add	r3, r1
 8003b0c:	d90d      	bls.n	8003b2a <__aeabi_memset+0x82>
 8003b0e:	461e      	mov	r6, r3
 8003b10:	4621      	mov	r1, r4
 8003b12:	3904      	subs	r1, #4
 8003b14:	2903      	cmp	r1, #3
 8003b16:	f846 5b04 	str.w	r5, [r6], #4
 8003b1a:	d8fa      	bhi.n	8003b12 <__aeabi_memset+0x6a>
 8003b1c:	1f21      	subs	r1, r4, #4
 8003b1e:	f021 0103 	bic.w	r1, r1, #3
 8003b22:	3104      	adds	r1, #4
 8003b24:	440b      	add	r3, r1
 8003b26:	f004 0403 	and.w	r4, r4, #3
 8003b2a:	b12c      	cbz	r4, 8003b38 <__aeabi_memset+0x90>
 8003b2c:	b2d2      	uxtb	r2, r2
 8003b2e:	441c      	add	r4, r3
 8003b30:	f803 2b01 	strb.w	r2, [r3], #1
 8003b34:	42a3      	cmp	r3, r4
 8003b36:	d1fb      	bne.n	8003b30 <__aeabi_memset+0x88>
 8003b38:	bc70      	pop	{r4, r5, r6}
 8003b3a:	4770      	bx	lr
 8003b3c:	460c      	mov	r4, r1
 8003b3e:	4603      	mov	r3, r0
 8003b40:	e7c2      	b.n	8003ac8 <__aeabi_memset+0x20>
	...

08003b44 <__aeabi_drsub>:
 8003b44:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8003b48:	e002      	b.n	8003b50 <__adddf3>
 8003b4a:	bf00      	nop

08003b4c <__aeabi_dsub>:
 8003b4c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08003b50 <__adddf3>:
 8003b50:	b530      	push	{r4, r5, lr}
 8003b52:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8003b56:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8003b5a:	ea94 0f05 	teq	r4, r5
 8003b5e:	bf08      	it	eq
 8003b60:	ea90 0f02 	teqeq	r0, r2
 8003b64:	bf1f      	itttt	ne
 8003b66:	ea54 0c00 	orrsne.w	ip, r4, r0
 8003b6a:	ea55 0c02 	orrsne.w	ip, r5, r2
 8003b6e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8003b72:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8003b76:	f000 80e2 	beq.w	8003d3e <__adddf3+0x1ee>
 8003b7a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8003b7e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8003b82:	bfb8      	it	lt
 8003b84:	426d      	neglt	r5, r5
 8003b86:	dd0c      	ble.n	8003ba2 <__adddf3+0x52>
 8003b88:	442c      	add	r4, r5
 8003b8a:	ea80 0202 	eor.w	r2, r0, r2
 8003b8e:	ea81 0303 	eor.w	r3, r1, r3
 8003b92:	ea82 0000 	eor.w	r0, r2, r0
 8003b96:	ea83 0101 	eor.w	r1, r3, r1
 8003b9a:	ea80 0202 	eor.w	r2, r0, r2
 8003b9e:	ea81 0303 	eor.w	r3, r1, r3
 8003ba2:	2d36      	cmp	r5, #54	; 0x36
 8003ba4:	bf88      	it	hi
 8003ba6:	bd30      	pophi	{r4, r5, pc}
 8003ba8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8003bac:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8003bb0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8003bb4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8003bb8:	d002      	beq.n	8003bc0 <__adddf3+0x70>
 8003bba:	4240      	negs	r0, r0
 8003bbc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8003bc0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8003bc4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8003bc8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8003bcc:	d002      	beq.n	8003bd4 <__adddf3+0x84>
 8003bce:	4252      	negs	r2, r2
 8003bd0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8003bd4:	ea94 0f05 	teq	r4, r5
 8003bd8:	f000 80a7 	beq.w	8003d2a <__adddf3+0x1da>
 8003bdc:	f1a4 0401 	sub.w	r4, r4, #1
 8003be0:	f1d5 0e20 	rsbs	lr, r5, #32
 8003be4:	db0d      	blt.n	8003c02 <__adddf3+0xb2>
 8003be6:	fa02 fc0e 	lsl.w	ip, r2, lr
 8003bea:	fa22 f205 	lsr.w	r2, r2, r5
 8003bee:	1880      	adds	r0, r0, r2
 8003bf0:	f141 0100 	adc.w	r1, r1, #0
 8003bf4:	fa03 f20e 	lsl.w	r2, r3, lr
 8003bf8:	1880      	adds	r0, r0, r2
 8003bfa:	fa43 f305 	asr.w	r3, r3, r5
 8003bfe:	4159      	adcs	r1, r3
 8003c00:	e00e      	b.n	8003c20 <__adddf3+0xd0>
 8003c02:	f1a5 0520 	sub.w	r5, r5, #32
 8003c06:	f10e 0e20 	add.w	lr, lr, #32
 8003c0a:	2a01      	cmp	r2, #1
 8003c0c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8003c10:	bf28      	it	cs
 8003c12:	f04c 0c02 	orrcs.w	ip, ip, #2
 8003c16:	fa43 f305 	asr.w	r3, r3, r5
 8003c1a:	18c0      	adds	r0, r0, r3
 8003c1c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8003c20:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8003c24:	d507      	bpl.n	8003c36 <__adddf3+0xe6>
 8003c26:	f04f 0e00 	mov.w	lr, #0
 8003c2a:	f1dc 0c00 	rsbs	ip, ip, #0
 8003c2e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8003c32:	eb6e 0101 	sbc.w	r1, lr, r1
 8003c36:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8003c3a:	d31b      	bcc.n	8003c74 <__adddf3+0x124>
 8003c3c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8003c40:	d30c      	bcc.n	8003c5c <__adddf3+0x10c>
 8003c42:	0849      	lsrs	r1, r1, #1
 8003c44:	ea5f 0030 	movs.w	r0, r0, rrx
 8003c48:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8003c4c:	f104 0401 	add.w	r4, r4, #1
 8003c50:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8003c54:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8003c58:	f080 809a 	bcs.w	8003d90 <__adddf3+0x240>
 8003c5c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8003c60:	bf08      	it	eq
 8003c62:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8003c66:	f150 0000 	adcs.w	r0, r0, #0
 8003c6a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8003c6e:	ea41 0105 	orr.w	r1, r1, r5
 8003c72:	bd30      	pop	{r4, r5, pc}
 8003c74:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8003c78:	4140      	adcs	r0, r0
 8003c7a:	eb41 0101 	adc.w	r1, r1, r1
 8003c7e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8003c82:	f1a4 0401 	sub.w	r4, r4, #1
 8003c86:	d1e9      	bne.n	8003c5c <__adddf3+0x10c>
 8003c88:	f091 0f00 	teq	r1, #0
 8003c8c:	bf04      	itt	eq
 8003c8e:	4601      	moveq	r1, r0
 8003c90:	2000      	moveq	r0, #0
 8003c92:	fab1 f381 	clz	r3, r1
 8003c96:	bf08      	it	eq
 8003c98:	3320      	addeq	r3, #32
 8003c9a:	f1a3 030b 	sub.w	r3, r3, #11
 8003c9e:	f1b3 0220 	subs.w	r2, r3, #32
 8003ca2:	da0c      	bge.n	8003cbe <__adddf3+0x16e>
 8003ca4:	320c      	adds	r2, #12
 8003ca6:	dd08      	ble.n	8003cba <__adddf3+0x16a>
 8003ca8:	f102 0c14 	add.w	ip, r2, #20
 8003cac:	f1c2 020c 	rsb	r2, r2, #12
 8003cb0:	fa01 f00c 	lsl.w	r0, r1, ip
 8003cb4:	fa21 f102 	lsr.w	r1, r1, r2
 8003cb8:	e00c      	b.n	8003cd4 <__adddf3+0x184>
 8003cba:	f102 0214 	add.w	r2, r2, #20
 8003cbe:	bfd8      	it	le
 8003cc0:	f1c2 0c20 	rsble	ip, r2, #32
 8003cc4:	fa01 f102 	lsl.w	r1, r1, r2
 8003cc8:	fa20 fc0c 	lsr.w	ip, r0, ip
 8003ccc:	bfdc      	itt	le
 8003cce:	ea41 010c 	orrle.w	r1, r1, ip
 8003cd2:	4090      	lslle	r0, r2
 8003cd4:	1ae4      	subs	r4, r4, r3
 8003cd6:	bfa2      	ittt	ge
 8003cd8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8003cdc:	4329      	orrge	r1, r5
 8003cde:	bd30      	popge	{r4, r5, pc}
 8003ce0:	ea6f 0404 	mvn.w	r4, r4
 8003ce4:	3c1f      	subs	r4, #31
 8003ce6:	da1c      	bge.n	8003d22 <__adddf3+0x1d2>
 8003ce8:	340c      	adds	r4, #12
 8003cea:	dc0e      	bgt.n	8003d0a <__adddf3+0x1ba>
 8003cec:	f104 0414 	add.w	r4, r4, #20
 8003cf0:	f1c4 0220 	rsb	r2, r4, #32
 8003cf4:	fa20 f004 	lsr.w	r0, r0, r4
 8003cf8:	fa01 f302 	lsl.w	r3, r1, r2
 8003cfc:	ea40 0003 	orr.w	r0, r0, r3
 8003d00:	fa21 f304 	lsr.w	r3, r1, r4
 8003d04:	ea45 0103 	orr.w	r1, r5, r3
 8003d08:	bd30      	pop	{r4, r5, pc}
 8003d0a:	f1c4 040c 	rsb	r4, r4, #12
 8003d0e:	f1c4 0220 	rsb	r2, r4, #32
 8003d12:	fa20 f002 	lsr.w	r0, r0, r2
 8003d16:	fa01 f304 	lsl.w	r3, r1, r4
 8003d1a:	ea40 0003 	orr.w	r0, r0, r3
 8003d1e:	4629      	mov	r1, r5
 8003d20:	bd30      	pop	{r4, r5, pc}
 8003d22:	fa21 f004 	lsr.w	r0, r1, r4
 8003d26:	4629      	mov	r1, r5
 8003d28:	bd30      	pop	{r4, r5, pc}
 8003d2a:	f094 0f00 	teq	r4, #0
 8003d2e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8003d32:	bf06      	itte	eq
 8003d34:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8003d38:	3401      	addeq	r4, #1
 8003d3a:	3d01      	subne	r5, #1
 8003d3c:	e74e      	b.n	8003bdc <__adddf3+0x8c>
 8003d3e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8003d42:	bf18      	it	ne
 8003d44:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8003d48:	d029      	beq.n	8003d9e <__adddf3+0x24e>
 8003d4a:	ea94 0f05 	teq	r4, r5
 8003d4e:	bf08      	it	eq
 8003d50:	ea90 0f02 	teqeq	r0, r2
 8003d54:	d005      	beq.n	8003d62 <__adddf3+0x212>
 8003d56:	ea54 0c00 	orrs.w	ip, r4, r0
 8003d5a:	bf04      	itt	eq
 8003d5c:	4619      	moveq	r1, r3
 8003d5e:	4610      	moveq	r0, r2
 8003d60:	bd30      	pop	{r4, r5, pc}
 8003d62:	ea91 0f03 	teq	r1, r3
 8003d66:	bf1e      	ittt	ne
 8003d68:	2100      	movne	r1, #0
 8003d6a:	2000      	movne	r0, #0
 8003d6c:	bd30      	popne	{r4, r5, pc}
 8003d6e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8003d72:	d105      	bne.n	8003d80 <__adddf3+0x230>
 8003d74:	0040      	lsls	r0, r0, #1
 8003d76:	4149      	adcs	r1, r1
 8003d78:	bf28      	it	cs
 8003d7a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8003d7e:	bd30      	pop	{r4, r5, pc}
 8003d80:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8003d84:	bf3c      	itt	cc
 8003d86:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8003d8a:	bd30      	popcc	{r4, r5, pc}
 8003d8c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8003d90:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8003d94:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003d98:	f04f 0000 	mov.w	r0, #0
 8003d9c:	bd30      	pop	{r4, r5, pc}
 8003d9e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8003da2:	bf1a      	itte	ne
 8003da4:	4619      	movne	r1, r3
 8003da6:	4610      	movne	r0, r2
 8003da8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8003dac:	bf1c      	itt	ne
 8003dae:	460b      	movne	r3, r1
 8003db0:	4602      	movne	r2, r0
 8003db2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8003db6:	bf06      	itte	eq
 8003db8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8003dbc:	ea91 0f03 	teqeq	r1, r3
 8003dc0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8003dc4:	bd30      	pop	{r4, r5, pc}
 8003dc6:	bf00      	nop

08003dc8 <__aeabi_ui2d>:
 8003dc8:	f090 0f00 	teq	r0, #0
 8003dcc:	bf04      	itt	eq
 8003dce:	2100      	moveq	r1, #0
 8003dd0:	4770      	bxeq	lr
 8003dd2:	b530      	push	{r4, r5, lr}
 8003dd4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8003dd8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8003ddc:	f04f 0500 	mov.w	r5, #0
 8003de0:	f04f 0100 	mov.w	r1, #0
 8003de4:	e750      	b.n	8003c88 <__adddf3+0x138>
 8003de6:	bf00      	nop

08003de8 <__aeabi_i2d>:
 8003de8:	f090 0f00 	teq	r0, #0
 8003dec:	bf04      	itt	eq
 8003dee:	2100      	moveq	r1, #0
 8003df0:	4770      	bxeq	lr
 8003df2:	b530      	push	{r4, r5, lr}
 8003df4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8003df8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8003dfc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8003e00:	bf48      	it	mi
 8003e02:	4240      	negmi	r0, r0
 8003e04:	f04f 0100 	mov.w	r1, #0
 8003e08:	e73e      	b.n	8003c88 <__adddf3+0x138>
 8003e0a:	bf00      	nop

08003e0c <__aeabi_f2d>:
 8003e0c:	0042      	lsls	r2, r0, #1
 8003e0e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8003e12:	ea4f 0131 	mov.w	r1, r1, rrx
 8003e16:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8003e1a:	bf1f      	itttt	ne
 8003e1c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8003e20:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8003e24:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8003e28:	4770      	bxne	lr
 8003e2a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8003e2e:	bf08      	it	eq
 8003e30:	4770      	bxeq	lr
 8003e32:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8003e36:	bf04      	itt	eq
 8003e38:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8003e3c:	4770      	bxeq	lr
 8003e3e:	b530      	push	{r4, r5, lr}
 8003e40:	f44f 7460 	mov.w	r4, #896	; 0x380
 8003e44:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8003e48:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8003e4c:	e71c      	b.n	8003c88 <__adddf3+0x138>
 8003e4e:	bf00      	nop

08003e50 <__aeabi_ul2d>:
 8003e50:	ea50 0201 	orrs.w	r2, r0, r1
 8003e54:	bf08      	it	eq
 8003e56:	4770      	bxeq	lr
 8003e58:	b530      	push	{r4, r5, lr}
 8003e5a:	f04f 0500 	mov.w	r5, #0
 8003e5e:	e00a      	b.n	8003e76 <__aeabi_l2d+0x16>

08003e60 <__aeabi_l2d>:
 8003e60:	ea50 0201 	orrs.w	r2, r0, r1
 8003e64:	bf08      	it	eq
 8003e66:	4770      	bxeq	lr
 8003e68:	b530      	push	{r4, r5, lr}
 8003e6a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8003e6e:	d502      	bpl.n	8003e76 <__aeabi_l2d+0x16>
 8003e70:	4240      	negs	r0, r0
 8003e72:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8003e76:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8003e7a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8003e7e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8003e82:	f43f aed8 	beq.w	8003c36 <__adddf3+0xe6>
 8003e86:	f04f 0203 	mov.w	r2, #3
 8003e8a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8003e8e:	bf18      	it	ne
 8003e90:	3203      	addne	r2, #3
 8003e92:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8003e96:	bf18      	it	ne
 8003e98:	3203      	addne	r2, #3
 8003e9a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8003e9e:	f1c2 0320 	rsb	r3, r2, #32
 8003ea2:	fa00 fc03 	lsl.w	ip, r0, r3
 8003ea6:	fa20 f002 	lsr.w	r0, r0, r2
 8003eaa:	fa01 fe03 	lsl.w	lr, r1, r3
 8003eae:	ea40 000e 	orr.w	r0, r0, lr
 8003eb2:	fa21 f102 	lsr.w	r1, r1, r2
 8003eb6:	4414      	add	r4, r2
 8003eb8:	e6bd      	b.n	8003c36 <__adddf3+0xe6>
 8003eba:	bf00      	nop

08003ebc <__gedf2>:
 8003ebc:	f04f 3cff 	mov.w	ip, #4294967295
 8003ec0:	e006      	b.n	8003ed0 <__cmpdf2+0x4>
 8003ec2:	bf00      	nop

08003ec4 <__ledf2>:
 8003ec4:	f04f 0c01 	mov.w	ip, #1
 8003ec8:	e002      	b.n	8003ed0 <__cmpdf2+0x4>
 8003eca:	bf00      	nop

08003ecc <__cmpdf2>:
 8003ecc:	f04f 0c01 	mov.w	ip, #1
 8003ed0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8003ed4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8003ed8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8003edc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8003ee0:	bf18      	it	ne
 8003ee2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8003ee6:	d01b      	beq.n	8003f20 <__cmpdf2+0x54>
 8003ee8:	b001      	add	sp, #4
 8003eea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8003eee:	bf0c      	ite	eq
 8003ef0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8003ef4:	ea91 0f03 	teqne	r1, r3
 8003ef8:	bf02      	ittt	eq
 8003efa:	ea90 0f02 	teqeq	r0, r2
 8003efe:	2000      	moveq	r0, #0
 8003f00:	4770      	bxeq	lr
 8003f02:	f110 0f00 	cmn.w	r0, #0
 8003f06:	ea91 0f03 	teq	r1, r3
 8003f0a:	bf58      	it	pl
 8003f0c:	4299      	cmppl	r1, r3
 8003f0e:	bf08      	it	eq
 8003f10:	4290      	cmpeq	r0, r2
 8003f12:	bf2c      	ite	cs
 8003f14:	17d8      	asrcs	r0, r3, #31
 8003f16:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8003f1a:	f040 0001 	orr.w	r0, r0, #1
 8003f1e:	4770      	bx	lr
 8003f20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8003f24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8003f28:	d102      	bne.n	8003f30 <__cmpdf2+0x64>
 8003f2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8003f2e:	d107      	bne.n	8003f40 <__cmpdf2+0x74>
 8003f30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8003f34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8003f38:	d1d6      	bne.n	8003ee8 <__cmpdf2+0x1c>
 8003f3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8003f3e:	d0d3      	beq.n	8003ee8 <__cmpdf2+0x1c>
 8003f40:	f85d 0b04 	ldr.w	r0, [sp], #4
 8003f44:	4770      	bx	lr
 8003f46:	bf00      	nop

08003f48 <__aeabi_cdrcmple>:
 8003f48:	4684      	mov	ip, r0
 8003f4a:	4610      	mov	r0, r2
 8003f4c:	4662      	mov	r2, ip
 8003f4e:	468c      	mov	ip, r1
 8003f50:	4619      	mov	r1, r3
 8003f52:	4663      	mov	r3, ip
 8003f54:	e000      	b.n	8003f58 <__aeabi_cdcmpeq>
 8003f56:	bf00      	nop

08003f58 <__aeabi_cdcmpeq>:
 8003f58:	b501      	push	{r0, lr}
 8003f5a:	f7ff ffb7 	bl	8003ecc <__cmpdf2>
 8003f5e:	2800      	cmp	r0, #0
 8003f60:	bf48      	it	mi
 8003f62:	f110 0f00 	cmnmi.w	r0, #0
 8003f66:	bd01      	pop	{r0, pc}

08003f68 <__aeabi_dcmpeq>:
 8003f68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8003f6c:	f7ff fff4 	bl	8003f58 <__aeabi_cdcmpeq>
 8003f70:	bf0c      	ite	eq
 8003f72:	2001      	moveq	r0, #1
 8003f74:	2000      	movne	r0, #0
 8003f76:	f85d fb08 	ldr.w	pc, [sp], #8
 8003f7a:	bf00      	nop

08003f7c <__aeabi_dcmplt>:
 8003f7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8003f80:	f7ff ffea 	bl	8003f58 <__aeabi_cdcmpeq>
 8003f84:	bf34      	ite	cc
 8003f86:	2001      	movcc	r0, #1
 8003f88:	2000      	movcs	r0, #0
 8003f8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8003f8e:	bf00      	nop

08003f90 <__aeabi_dcmple>:
 8003f90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8003f94:	f7ff ffe0 	bl	8003f58 <__aeabi_cdcmpeq>
 8003f98:	bf94      	ite	ls
 8003f9a:	2001      	movls	r0, #1
 8003f9c:	2000      	movhi	r0, #0
 8003f9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8003fa2:	bf00      	nop

08003fa4 <__aeabi_dcmpge>:
 8003fa4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8003fa8:	f7ff ffce 	bl	8003f48 <__aeabi_cdrcmple>
 8003fac:	bf94      	ite	ls
 8003fae:	2001      	movls	r0, #1
 8003fb0:	2000      	movhi	r0, #0
 8003fb2:	f85d fb08 	ldr.w	pc, [sp], #8
 8003fb6:	bf00      	nop

08003fb8 <__aeabi_dcmpgt>:
 8003fb8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8003fbc:	f7ff ffc4 	bl	8003f48 <__aeabi_cdrcmple>
 8003fc0:	bf34      	ite	cc
 8003fc2:	2001      	movcc	r0, #1
 8003fc4:	2000      	movcs	r0, #0
 8003fc6:	f85d fb08 	ldr.w	pc, [sp], #8
 8003fca:	bf00      	nop

08003fcc <__aeabi_d2f>:
 8003fcc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8003fd0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8003fd4:	bf24      	itt	cs
 8003fd6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8003fda:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8003fde:	d90d      	bls.n	8003ffc <__aeabi_d2f+0x30>
 8003fe0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8003fe4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8003fe8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8003fec:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8003ff0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8003ff4:	bf08      	it	eq
 8003ff6:	f020 0001 	biceq.w	r0, r0, #1
 8003ffa:	4770      	bx	lr
 8003ffc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8004000:	d121      	bne.n	8004046 <__aeabi_d2f+0x7a>
 8004002:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8004006:	bfbc      	itt	lt
 8004008:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800400c:	4770      	bxlt	lr
 800400e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8004012:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8004016:	f1c2 0218 	rsb	r2, r2, #24
 800401a:	f1c2 0c20 	rsb	ip, r2, #32
 800401e:	fa10 f30c 	lsls.w	r3, r0, ip
 8004022:	fa20 f002 	lsr.w	r0, r0, r2
 8004026:	bf18      	it	ne
 8004028:	f040 0001 	orrne.w	r0, r0, #1
 800402c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8004030:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8004034:	fa03 fc0c 	lsl.w	ip, r3, ip
 8004038:	ea40 000c 	orr.w	r0, r0, ip
 800403c:	fa23 f302 	lsr.w	r3, r3, r2
 8004040:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004044:	e7cc      	b.n	8003fe0 <__aeabi_d2f+0x14>
 8004046:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800404a:	d107      	bne.n	800405c <__aeabi_d2f+0x90>
 800404c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8004050:	bf1e      	ittt	ne
 8004052:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8004056:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800405a:	4770      	bxne	lr
 800405c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8004060:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8004064:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8004068:	4770      	bx	lr
 800406a:	bf00      	nop

0800406c <__aeabi_uldivmod>:
 800406c:	b953      	cbnz	r3, 8004084 <__aeabi_uldivmod+0x18>
 800406e:	b94a      	cbnz	r2, 8004084 <__aeabi_uldivmod+0x18>
 8004070:	2900      	cmp	r1, #0
 8004072:	bf08      	it	eq
 8004074:	2800      	cmpeq	r0, #0
 8004076:	bf1c      	itt	ne
 8004078:	f04f 31ff 	movne.w	r1, #4294967295
 800407c:	f04f 30ff 	movne.w	r0, #4294967295
 8004080:	f000 b972 	b.w	8004368 <__aeabi_idiv0>
 8004084:	f1ad 0c08 	sub.w	ip, sp, #8
 8004088:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800408c:	f000 f806 	bl	800409c <__udivmoddi4>
 8004090:	f8dd e004 	ldr.w	lr, [sp, #4]
 8004094:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004098:	b004      	add	sp, #16
 800409a:	4770      	bx	lr

0800409c <__udivmoddi4>:
 800409c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040a0:	9e08      	ldr	r6, [sp, #32]
 80040a2:	4604      	mov	r4, r0
 80040a4:	4688      	mov	r8, r1
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d14b      	bne.n	8004142 <__udivmoddi4+0xa6>
 80040aa:	428a      	cmp	r2, r1
 80040ac:	4615      	mov	r5, r2
 80040ae:	d967      	bls.n	8004180 <__udivmoddi4+0xe4>
 80040b0:	fab2 f282 	clz	r2, r2
 80040b4:	b14a      	cbz	r2, 80040ca <__udivmoddi4+0x2e>
 80040b6:	f1c2 0720 	rsb	r7, r2, #32
 80040ba:	fa01 f302 	lsl.w	r3, r1, r2
 80040be:	fa20 f707 	lsr.w	r7, r0, r7
 80040c2:	4095      	lsls	r5, r2
 80040c4:	ea47 0803 	orr.w	r8, r7, r3
 80040c8:	4094      	lsls	r4, r2
 80040ca:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80040ce:	0c23      	lsrs	r3, r4, #16
 80040d0:	fbb8 f7fe 	udiv	r7, r8, lr
 80040d4:	fa1f fc85 	uxth.w	ip, r5
 80040d8:	fb0e 8817 	mls	r8, lr, r7, r8
 80040dc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80040e0:	fb07 f10c 	mul.w	r1, r7, ip
 80040e4:	4299      	cmp	r1, r3
 80040e6:	d909      	bls.n	80040fc <__udivmoddi4+0x60>
 80040e8:	18eb      	adds	r3, r5, r3
 80040ea:	f107 30ff 	add.w	r0, r7, #4294967295
 80040ee:	f080 811b 	bcs.w	8004328 <__udivmoddi4+0x28c>
 80040f2:	4299      	cmp	r1, r3
 80040f4:	f240 8118 	bls.w	8004328 <__udivmoddi4+0x28c>
 80040f8:	3f02      	subs	r7, #2
 80040fa:	442b      	add	r3, r5
 80040fc:	1a5b      	subs	r3, r3, r1
 80040fe:	b2a4      	uxth	r4, r4
 8004100:	fbb3 f0fe 	udiv	r0, r3, lr
 8004104:	fb0e 3310 	mls	r3, lr, r0, r3
 8004108:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800410c:	fb00 fc0c 	mul.w	ip, r0, ip
 8004110:	45a4      	cmp	ip, r4
 8004112:	d909      	bls.n	8004128 <__udivmoddi4+0x8c>
 8004114:	192c      	adds	r4, r5, r4
 8004116:	f100 33ff 	add.w	r3, r0, #4294967295
 800411a:	f080 8107 	bcs.w	800432c <__udivmoddi4+0x290>
 800411e:	45a4      	cmp	ip, r4
 8004120:	f240 8104 	bls.w	800432c <__udivmoddi4+0x290>
 8004124:	3802      	subs	r0, #2
 8004126:	442c      	add	r4, r5
 8004128:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800412c:	eba4 040c 	sub.w	r4, r4, ip
 8004130:	2700      	movs	r7, #0
 8004132:	b11e      	cbz	r6, 800413c <__udivmoddi4+0xa0>
 8004134:	40d4      	lsrs	r4, r2
 8004136:	2300      	movs	r3, #0
 8004138:	e9c6 4300 	strd	r4, r3, [r6]
 800413c:	4639      	mov	r1, r7
 800413e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004142:	428b      	cmp	r3, r1
 8004144:	d909      	bls.n	800415a <__udivmoddi4+0xbe>
 8004146:	2e00      	cmp	r6, #0
 8004148:	f000 80eb 	beq.w	8004322 <__udivmoddi4+0x286>
 800414c:	2700      	movs	r7, #0
 800414e:	e9c6 0100 	strd	r0, r1, [r6]
 8004152:	4638      	mov	r0, r7
 8004154:	4639      	mov	r1, r7
 8004156:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800415a:	fab3 f783 	clz	r7, r3
 800415e:	2f00      	cmp	r7, #0
 8004160:	d147      	bne.n	80041f2 <__udivmoddi4+0x156>
 8004162:	428b      	cmp	r3, r1
 8004164:	d302      	bcc.n	800416c <__udivmoddi4+0xd0>
 8004166:	4282      	cmp	r2, r0
 8004168:	f200 80fa 	bhi.w	8004360 <__udivmoddi4+0x2c4>
 800416c:	1a84      	subs	r4, r0, r2
 800416e:	eb61 0303 	sbc.w	r3, r1, r3
 8004172:	2001      	movs	r0, #1
 8004174:	4698      	mov	r8, r3
 8004176:	2e00      	cmp	r6, #0
 8004178:	d0e0      	beq.n	800413c <__udivmoddi4+0xa0>
 800417a:	e9c6 4800 	strd	r4, r8, [r6]
 800417e:	e7dd      	b.n	800413c <__udivmoddi4+0xa0>
 8004180:	b902      	cbnz	r2, 8004184 <__udivmoddi4+0xe8>
 8004182:	deff      	udf	#255	; 0xff
 8004184:	fab2 f282 	clz	r2, r2
 8004188:	2a00      	cmp	r2, #0
 800418a:	f040 808f 	bne.w	80042ac <__udivmoddi4+0x210>
 800418e:	1b49      	subs	r1, r1, r5
 8004190:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8004194:	fa1f f885 	uxth.w	r8, r5
 8004198:	2701      	movs	r7, #1
 800419a:	fbb1 fcfe 	udiv	ip, r1, lr
 800419e:	0c23      	lsrs	r3, r4, #16
 80041a0:	fb0e 111c 	mls	r1, lr, ip, r1
 80041a4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80041a8:	fb08 f10c 	mul.w	r1, r8, ip
 80041ac:	4299      	cmp	r1, r3
 80041ae:	d907      	bls.n	80041c0 <__udivmoddi4+0x124>
 80041b0:	18eb      	adds	r3, r5, r3
 80041b2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80041b6:	d202      	bcs.n	80041be <__udivmoddi4+0x122>
 80041b8:	4299      	cmp	r1, r3
 80041ba:	f200 80cd 	bhi.w	8004358 <__udivmoddi4+0x2bc>
 80041be:	4684      	mov	ip, r0
 80041c0:	1a59      	subs	r1, r3, r1
 80041c2:	b2a3      	uxth	r3, r4
 80041c4:	fbb1 f0fe 	udiv	r0, r1, lr
 80041c8:	fb0e 1410 	mls	r4, lr, r0, r1
 80041cc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80041d0:	fb08 f800 	mul.w	r8, r8, r0
 80041d4:	45a0      	cmp	r8, r4
 80041d6:	d907      	bls.n	80041e8 <__udivmoddi4+0x14c>
 80041d8:	192c      	adds	r4, r5, r4
 80041da:	f100 33ff 	add.w	r3, r0, #4294967295
 80041de:	d202      	bcs.n	80041e6 <__udivmoddi4+0x14a>
 80041e0:	45a0      	cmp	r8, r4
 80041e2:	f200 80b6 	bhi.w	8004352 <__udivmoddi4+0x2b6>
 80041e6:	4618      	mov	r0, r3
 80041e8:	eba4 0408 	sub.w	r4, r4, r8
 80041ec:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80041f0:	e79f      	b.n	8004132 <__udivmoddi4+0x96>
 80041f2:	f1c7 0c20 	rsb	ip, r7, #32
 80041f6:	40bb      	lsls	r3, r7
 80041f8:	fa22 fe0c 	lsr.w	lr, r2, ip
 80041fc:	ea4e 0e03 	orr.w	lr, lr, r3
 8004200:	fa01 f407 	lsl.w	r4, r1, r7
 8004204:	fa20 f50c 	lsr.w	r5, r0, ip
 8004208:	fa21 f30c 	lsr.w	r3, r1, ip
 800420c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8004210:	4325      	orrs	r5, r4
 8004212:	fbb3 f9f8 	udiv	r9, r3, r8
 8004216:	0c2c      	lsrs	r4, r5, #16
 8004218:	fb08 3319 	mls	r3, r8, r9, r3
 800421c:	fa1f fa8e 	uxth.w	sl, lr
 8004220:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8004224:	fb09 f40a 	mul.w	r4, r9, sl
 8004228:	429c      	cmp	r4, r3
 800422a:	fa02 f207 	lsl.w	r2, r2, r7
 800422e:	fa00 f107 	lsl.w	r1, r0, r7
 8004232:	d90b      	bls.n	800424c <__udivmoddi4+0x1b0>
 8004234:	eb1e 0303 	adds.w	r3, lr, r3
 8004238:	f109 30ff 	add.w	r0, r9, #4294967295
 800423c:	f080 8087 	bcs.w	800434e <__udivmoddi4+0x2b2>
 8004240:	429c      	cmp	r4, r3
 8004242:	f240 8084 	bls.w	800434e <__udivmoddi4+0x2b2>
 8004246:	f1a9 0902 	sub.w	r9, r9, #2
 800424a:	4473      	add	r3, lr
 800424c:	1b1b      	subs	r3, r3, r4
 800424e:	b2ad      	uxth	r5, r5
 8004250:	fbb3 f0f8 	udiv	r0, r3, r8
 8004254:	fb08 3310 	mls	r3, r8, r0, r3
 8004258:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 800425c:	fb00 fa0a 	mul.w	sl, r0, sl
 8004260:	45a2      	cmp	sl, r4
 8004262:	d908      	bls.n	8004276 <__udivmoddi4+0x1da>
 8004264:	eb1e 0404 	adds.w	r4, lr, r4
 8004268:	f100 33ff 	add.w	r3, r0, #4294967295
 800426c:	d26b      	bcs.n	8004346 <__udivmoddi4+0x2aa>
 800426e:	45a2      	cmp	sl, r4
 8004270:	d969      	bls.n	8004346 <__udivmoddi4+0x2aa>
 8004272:	3802      	subs	r0, #2
 8004274:	4474      	add	r4, lr
 8004276:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800427a:	fba0 8902 	umull	r8, r9, r0, r2
 800427e:	eba4 040a 	sub.w	r4, r4, sl
 8004282:	454c      	cmp	r4, r9
 8004284:	46c2      	mov	sl, r8
 8004286:	464b      	mov	r3, r9
 8004288:	d354      	bcc.n	8004334 <__udivmoddi4+0x298>
 800428a:	d051      	beq.n	8004330 <__udivmoddi4+0x294>
 800428c:	2e00      	cmp	r6, #0
 800428e:	d069      	beq.n	8004364 <__udivmoddi4+0x2c8>
 8004290:	ebb1 050a 	subs.w	r5, r1, sl
 8004294:	eb64 0403 	sbc.w	r4, r4, r3
 8004298:	fa04 fc0c 	lsl.w	ip, r4, ip
 800429c:	40fd      	lsrs	r5, r7
 800429e:	40fc      	lsrs	r4, r7
 80042a0:	ea4c 0505 	orr.w	r5, ip, r5
 80042a4:	e9c6 5400 	strd	r5, r4, [r6]
 80042a8:	2700      	movs	r7, #0
 80042aa:	e747      	b.n	800413c <__udivmoddi4+0xa0>
 80042ac:	f1c2 0320 	rsb	r3, r2, #32
 80042b0:	fa20 f703 	lsr.w	r7, r0, r3
 80042b4:	4095      	lsls	r5, r2
 80042b6:	fa01 f002 	lsl.w	r0, r1, r2
 80042ba:	fa21 f303 	lsr.w	r3, r1, r3
 80042be:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80042c2:	4338      	orrs	r0, r7
 80042c4:	0c01      	lsrs	r1, r0, #16
 80042c6:	fbb3 f7fe 	udiv	r7, r3, lr
 80042ca:	fa1f f885 	uxth.w	r8, r5
 80042ce:	fb0e 3317 	mls	r3, lr, r7, r3
 80042d2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80042d6:	fb07 f308 	mul.w	r3, r7, r8
 80042da:	428b      	cmp	r3, r1
 80042dc:	fa04 f402 	lsl.w	r4, r4, r2
 80042e0:	d907      	bls.n	80042f2 <__udivmoddi4+0x256>
 80042e2:	1869      	adds	r1, r5, r1
 80042e4:	f107 3cff 	add.w	ip, r7, #4294967295
 80042e8:	d22f      	bcs.n	800434a <__udivmoddi4+0x2ae>
 80042ea:	428b      	cmp	r3, r1
 80042ec:	d92d      	bls.n	800434a <__udivmoddi4+0x2ae>
 80042ee:	3f02      	subs	r7, #2
 80042f0:	4429      	add	r1, r5
 80042f2:	1acb      	subs	r3, r1, r3
 80042f4:	b281      	uxth	r1, r0
 80042f6:	fbb3 f0fe 	udiv	r0, r3, lr
 80042fa:	fb0e 3310 	mls	r3, lr, r0, r3
 80042fe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8004302:	fb00 f308 	mul.w	r3, r0, r8
 8004306:	428b      	cmp	r3, r1
 8004308:	d907      	bls.n	800431a <__udivmoddi4+0x27e>
 800430a:	1869      	adds	r1, r5, r1
 800430c:	f100 3cff 	add.w	ip, r0, #4294967295
 8004310:	d217      	bcs.n	8004342 <__udivmoddi4+0x2a6>
 8004312:	428b      	cmp	r3, r1
 8004314:	d915      	bls.n	8004342 <__udivmoddi4+0x2a6>
 8004316:	3802      	subs	r0, #2
 8004318:	4429      	add	r1, r5
 800431a:	1ac9      	subs	r1, r1, r3
 800431c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8004320:	e73b      	b.n	800419a <__udivmoddi4+0xfe>
 8004322:	4637      	mov	r7, r6
 8004324:	4630      	mov	r0, r6
 8004326:	e709      	b.n	800413c <__udivmoddi4+0xa0>
 8004328:	4607      	mov	r7, r0
 800432a:	e6e7      	b.n	80040fc <__udivmoddi4+0x60>
 800432c:	4618      	mov	r0, r3
 800432e:	e6fb      	b.n	8004128 <__udivmoddi4+0x8c>
 8004330:	4541      	cmp	r1, r8
 8004332:	d2ab      	bcs.n	800428c <__udivmoddi4+0x1f0>
 8004334:	ebb8 0a02 	subs.w	sl, r8, r2
 8004338:	eb69 020e 	sbc.w	r2, r9, lr
 800433c:	3801      	subs	r0, #1
 800433e:	4613      	mov	r3, r2
 8004340:	e7a4      	b.n	800428c <__udivmoddi4+0x1f0>
 8004342:	4660      	mov	r0, ip
 8004344:	e7e9      	b.n	800431a <__udivmoddi4+0x27e>
 8004346:	4618      	mov	r0, r3
 8004348:	e795      	b.n	8004276 <__udivmoddi4+0x1da>
 800434a:	4667      	mov	r7, ip
 800434c:	e7d1      	b.n	80042f2 <__udivmoddi4+0x256>
 800434e:	4681      	mov	r9, r0
 8004350:	e77c      	b.n	800424c <__udivmoddi4+0x1b0>
 8004352:	3802      	subs	r0, #2
 8004354:	442c      	add	r4, r5
 8004356:	e747      	b.n	80041e8 <__udivmoddi4+0x14c>
 8004358:	f1ac 0c02 	sub.w	ip, ip, #2
 800435c:	442b      	add	r3, r5
 800435e:	e72f      	b.n	80041c0 <__udivmoddi4+0x124>
 8004360:	4638      	mov	r0, r7
 8004362:	e708      	b.n	8004176 <__udivmoddi4+0xda>
 8004364:	4637      	mov	r7, r6
 8004366:	e6e9      	b.n	800413c <__udivmoddi4+0xa0>

08004368 <__aeabi_idiv0>:
 8004368:	4770      	bx	lr
 800436a:	bf00      	nop

0800436c <arm_dot_prod_f32>:
void arm_dot_prod_f32(
  float32_t * pSrcA,
  float32_t * pSrcB,
  uint32_t blockSize,
  float32_t * result)
{
 800436c:	b480      	push	{r7}
 800436e:	b087      	sub	sp, #28
 8004370:	af00      	add	r7, sp, #0
 8004372:	60f8      	str	r0, [r7, #12]
 8004374:	60b9      	str	r1, [r7, #8]
 8004376:	607a      	str	r2, [r7, #4]
 8004378:	603b      	str	r3, [r7, #0]
  float32_t sum = 0.0f;                          /* Temporary result storage */
 800437a:	f04f 0300 	mov.w	r3, #0
 800437e:	617b      	str	r3, [r7, #20]

#if defined (ARM_MATH_DSP)

/* Run the below code for Cortex-M4 and Cortex-M3 */
  /*loop Unrolling */
  blkCnt = blockSize >> 2U;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	089b      	lsrs	r3, r3, #2
 8004384:	613b      	str	r3, [r7, #16]

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
   ** a second loop below computes the remaining 1 to 3 samples. */
  while (blkCnt > 0U)
 8004386:	e04a      	b.n	800441e <arm_dot_prod_f32+0xb2>
  {
    /* C = A[0]* B[0] + A[1]* B[1] + A[2]* B[2] + .....+ A[blockSize-1]* B[blockSize-1] */
    /* Calculate dot product and then store the result in a temporary buffer */
    sum += (*pSrcA++) * (*pSrcB++);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	1d1a      	adds	r2, r3, #4
 800438c:	60fa      	str	r2, [r7, #12]
 800438e:	ed93 7a00 	vldr	s14, [r3]
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	1d1a      	adds	r2, r3, #4
 8004396:	60ba      	str	r2, [r7, #8]
 8004398:	edd3 7a00 	vldr	s15, [r3]
 800439c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043a0:	ed97 7a05 	vldr	s14, [r7, #20]
 80043a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80043a8:	edc7 7a05 	vstr	s15, [r7, #20]
    sum += (*pSrcA++) * (*pSrcB++);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	1d1a      	adds	r2, r3, #4
 80043b0:	60fa      	str	r2, [r7, #12]
 80043b2:	ed93 7a00 	vldr	s14, [r3]
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	1d1a      	adds	r2, r3, #4
 80043ba:	60ba      	str	r2, [r7, #8]
 80043bc:	edd3 7a00 	vldr	s15, [r3]
 80043c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043c4:	ed97 7a05 	vldr	s14, [r7, #20]
 80043c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80043cc:	edc7 7a05 	vstr	s15, [r7, #20]
    sum += (*pSrcA++) * (*pSrcB++);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	1d1a      	adds	r2, r3, #4
 80043d4:	60fa      	str	r2, [r7, #12]
 80043d6:	ed93 7a00 	vldr	s14, [r3]
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	1d1a      	adds	r2, r3, #4
 80043de:	60ba      	str	r2, [r7, #8]
 80043e0:	edd3 7a00 	vldr	s15, [r3]
 80043e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043e8:	ed97 7a05 	vldr	s14, [r7, #20]
 80043ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80043f0:	edc7 7a05 	vstr	s15, [r7, #20]
    sum += (*pSrcA++) * (*pSrcB++);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	1d1a      	adds	r2, r3, #4
 80043f8:	60fa      	str	r2, [r7, #12]
 80043fa:	ed93 7a00 	vldr	s14, [r3]
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	1d1a      	adds	r2, r3, #4
 8004402:	60ba      	str	r2, [r7, #8]
 8004404:	edd3 7a00 	vldr	s15, [r3]
 8004408:	ee67 7a27 	vmul.f32	s15, s14, s15
 800440c:	ed97 7a05 	vldr	s14, [r7, #20]
 8004410:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004414:	edc7 7a05 	vstr	s15, [r7, #20]

    /* Decrement the loop counter */
    blkCnt--;
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	3b01      	subs	r3, #1
 800441c:	613b      	str	r3, [r7, #16]
  while (blkCnt > 0U)
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d1b1      	bne.n	8004388 <arm_dot_prod_f32+0x1c>
  }

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.
   ** No loop unrolling is used. */
  blkCnt = blockSize % 0x4U;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	f003 0303 	and.w	r3, r3, #3
 800442a:	613b      	str	r3, [r7, #16]
  blkCnt = blockSize;

#endif /* #if defined (ARM_MATH_DSP) */


  while (blkCnt > 0U)
 800442c:	e014      	b.n	8004458 <arm_dot_prod_f32+0xec>
  {
    /* C = A[0]* B[0] + A[1]* B[1] + A[2]* B[2] + .....+ A[blockSize-1]* B[blockSize-1] */
    /* Calculate dot product and then store the result in a temporary buffer. */
    sum += (*pSrcA++) * (*pSrcB++);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	1d1a      	adds	r2, r3, #4
 8004432:	60fa      	str	r2, [r7, #12]
 8004434:	ed93 7a00 	vldr	s14, [r3]
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	1d1a      	adds	r2, r3, #4
 800443c:	60ba      	str	r2, [r7, #8]
 800443e:	edd3 7a00 	vldr	s15, [r3]
 8004442:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004446:	ed97 7a05 	vldr	s14, [r7, #20]
 800444a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800444e:	edc7 7a05 	vstr	s15, [r7, #20]

    /* Decrement the loop counter */
    blkCnt--;
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	3b01      	subs	r3, #1
 8004456:	613b      	str	r3, [r7, #16]
  while (blkCnt > 0U)
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d1e7      	bne.n	800442e <arm_dot_prod_f32+0xc2>
  }
  /* Store the result back in the destination buffer */
  *result = sum;
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	697a      	ldr	r2, [r7, #20]
 8004462:	601a      	str	r2, [r3, #0]
}
 8004464:	bf00      	nop
 8004466:	371c      	adds	r7, #28
 8004468:	46bd      	mov	sp, r7
 800446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446e:	4770      	bx	lr

08004470 <arm_mat_init_f32>:
void arm_mat_init_f32(
  arm_matrix_instance_f32 * S,
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData)
{
 8004470:	b480      	push	{r7}
 8004472:	b085      	sub	sp, #20
 8004474:	af00      	add	r7, sp, #0
 8004476:	60f8      	str	r0, [r7, #12]
 8004478:	607b      	str	r3, [r7, #4]
 800447a:	460b      	mov	r3, r1
 800447c:	817b      	strh	r3, [r7, #10]
 800447e:	4613      	mov	r3, r2
 8004480:	813b      	strh	r3, [r7, #8]
  /* Assign Number of Rows */
  S->numRows = nRows;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	897a      	ldrh	r2, [r7, #10]
 8004486:	801a      	strh	r2, [r3, #0]

  /* Assign Number of Columns */
  S->numCols = nColumns;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	893a      	ldrh	r2, [r7, #8]
 800448c:	805a      	strh	r2, [r3, #2]

  /* Assign Data pointer */
  S->pData = pData;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	687a      	ldr	r2, [r7, #4]
 8004492:	605a      	str	r2, [r3, #4]
}
 8004494:	bf00      	nop
 8004496:	3714      	adds	r7, #20
 8004498:	46bd      	mov	sp, r7
 800449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449e:	4770      	bx	lr

080044a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80044a4:	4b0e      	ldr	r3, [pc, #56]	; (80044e0 <HAL_Init+0x40>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a0d      	ldr	r2, [pc, #52]	; (80044e0 <HAL_Init+0x40>)
 80044aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80044ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80044b0:	4b0b      	ldr	r3, [pc, #44]	; (80044e0 <HAL_Init+0x40>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a0a      	ldr	r2, [pc, #40]	; (80044e0 <HAL_Init+0x40>)
 80044b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80044ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80044bc:	4b08      	ldr	r3, [pc, #32]	; (80044e0 <HAL_Init+0x40>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a07      	ldr	r2, [pc, #28]	; (80044e0 <HAL_Init+0x40>)
 80044c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80044c8:	2003      	movs	r0, #3
 80044ca:	f000 f92f 	bl	800472c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80044ce:	2000      	movs	r0, #0
 80044d0:	f000 f808 	bl	80044e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80044d4:	f003 fdba 	bl	800804c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80044d8:	2300      	movs	r3, #0
}
 80044da:	4618      	mov	r0, r3
 80044dc:	bd80      	pop	{r7, pc}
 80044de:	bf00      	nop
 80044e0:	40023c00 	.word	0x40023c00

080044e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b082      	sub	sp, #8
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80044ec:	4b12      	ldr	r3, [pc, #72]	; (8004538 <HAL_InitTick+0x54>)
 80044ee:	681a      	ldr	r2, [r3, #0]
 80044f0:	4b12      	ldr	r3, [pc, #72]	; (800453c <HAL_InitTick+0x58>)
 80044f2:	781b      	ldrb	r3, [r3, #0]
 80044f4:	4619      	mov	r1, r3
 80044f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80044fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80044fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004502:	4618      	mov	r0, r3
 8004504:	f000 f939 	bl	800477a <HAL_SYSTICK_Config>
 8004508:	4603      	mov	r3, r0
 800450a:	2b00      	cmp	r3, #0
 800450c:	d001      	beq.n	8004512 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	e00e      	b.n	8004530 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2b0f      	cmp	r3, #15
 8004516:	d80a      	bhi.n	800452e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004518:	2200      	movs	r2, #0
 800451a:	6879      	ldr	r1, [r7, #4]
 800451c:	f04f 30ff 	mov.w	r0, #4294967295
 8004520:	f000 f90f 	bl	8004742 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004524:	4a06      	ldr	r2, [pc, #24]	; (8004540 <HAL_InitTick+0x5c>)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800452a:	2300      	movs	r3, #0
 800452c:	e000      	b.n	8004530 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800452e:	2301      	movs	r3, #1
}
 8004530:	4618      	mov	r0, r3
 8004532:	3708      	adds	r7, #8
 8004534:	46bd      	mov	sp, r7
 8004536:	bd80      	pop	{r7, pc}
 8004538:	200005a0 	.word	0x200005a0
 800453c:	20000004 	.word	0x20000004
 8004540:	20000000 	.word	0x20000000

08004544 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004544:	b480      	push	{r7}
 8004546:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004548:	4b06      	ldr	r3, [pc, #24]	; (8004564 <HAL_IncTick+0x20>)
 800454a:	781b      	ldrb	r3, [r3, #0]
 800454c:	461a      	mov	r2, r3
 800454e:	4b06      	ldr	r3, [pc, #24]	; (8004568 <HAL_IncTick+0x24>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4413      	add	r3, r2
 8004554:	4a04      	ldr	r2, [pc, #16]	; (8004568 <HAL_IncTick+0x24>)
 8004556:	6013      	str	r3, [r2, #0]
}
 8004558:	bf00      	nop
 800455a:	46bd      	mov	sp, r7
 800455c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004560:	4770      	bx	lr
 8004562:	bf00      	nop
 8004564:	20000004 	.word	0x20000004
 8004568:	20001298 	.word	0x20001298

0800456c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800456c:	b480      	push	{r7}
 800456e:	af00      	add	r7, sp, #0
  return uwTick;
 8004570:	4b03      	ldr	r3, [pc, #12]	; (8004580 <HAL_GetTick+0x14>)
 8004572:	681b      	ldr	r3, [r3, #0]
}
 8004574:	4618      	mov	r0, r3
 8004576:	46bd      	mov	sp, r7
 8004578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457c:	4770      	bx	lr
 800457e:	bf00      	nop
 8004580:	20001298 	.word	0x20001298

08004584 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b084      	sub	sp, #16
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800458c:	f7ff ffee 	bl	800456c <HAL_GetTick>
 8004590:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	f1b3 3fff 	cmp.w	r3, #4294967295
 800459c:	d005      	beq.n	80045aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800459e:	4b09      	ldr	r3, [pc, #36]	; (80045c4 <HAL_Delay+0x40>)
 80045a0:	781b      	ldrb	r3, [r3, #0]
 80045a2:	461a      	mov	r2, r3
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	4413      	add	r3, r2
 80045a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80045aa:	bf00      	nop
 80045ac:	f7ff ffde 	bl	800456c <HAL_GetTick>
 80045b0:	4602      	mov	r2, r0
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	1ad3      	subs	r3, r2, r3
 80045b6:	68fa      	ldr	r2, [r7, #12]
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d8f7      	bhi.n	80045ac <HAL_Delay+0x28>
  {
  }
}
 80045bc:	bf00      	nop
 80045be:	3710      	adds	r7, #16
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}
 80045c4:	20000004 	.word	0x20000004

080045c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b085      	sub	sp, #20
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	f003 0307 	and.w	r3, r3, #7
 80045d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80045d8:	4b0c      	ldr	r3, [pc, #48]	; (800460c <__NVIC_SetPriorityGrouping+0x44>)
 80045da:	68db      	ldr	r3, [r3, #12]
 80045dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80045de:	68ba      	ldr	r2, [r7, #8]
 80045e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80045e4:	4013      	ands	r3, r2
 80045e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80045f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80045f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80045fa:	4a04      	ldr	r2, [pc, #16]	; (800460c <__NVIC_SetPriorityGrouping+0x44>)
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	60d3      	str	r3, [r2, #12]
}
 8004600:	bf00      	nop
 8004602:	3714      	adds	r7, #20
 8004604:	46bd      	mov	sp, r7
 8004606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460a:	4770      	bx	lr
 800460c:	e000ed00 	.word	0xe000ed00

08004610 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004610:	b480      	push	{r7}
 8004612:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004614:	4b04      	ldr	r3, [pc, #16]	; (8004628 <__NVIC_GetPriorityGrouping+0x18>)
 8004616:	68db      	ldr	r3, [r3, #12]
 8004618:	0a1b      	lsrs	r3, r3, #8
 800461a:	f003 0307 	and.w	r3, r3, #7
}
 800461e:	4618      	mov	r0, r3
 8004620:	46bd      	mov	sp, r7
 8004622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004626:	4770      	bx	lr
 8004628:	e000ed00 	.word	0xe000ed00

0800462c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800462c:	b480      	push	{r7}
 800462e:	b083      	sub	sp, #12
 8004630:	af00      	add	r7, sp, #0
 8004632:	4603      	mov	r3, r0
 8004634:	6039      	str	r1, [r7, #0]
 8004636:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004638:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800463c:	2b00      	cmp	r3, #0
 800463e:	db0a      	blt.n	8004656 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	b2da      	uxtb	r2, r3
 8004644:	490c      	ldr	r1, [pc, #48]	; (8004678 <__NVIC_SetPriority+0x4c>)
 8004646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800464a:	0112      	lsls	r2, r2, #4
 800464c:	b2d2      	uxtb	r2, r2
 800464e:	440b      	add	r3, r1
 8004650:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004654:	e00a      	b.n	800466c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	b2da      	uxtb	r2, r3
 800465a:	4908      	ldr	r1, [pc, #32]	; (800467c <__NVIC_SetPriority+0x50>)
 800465c:	79fb      	ldrb	r3, [r7, #7]
 800465e:	f003 030f 	and.w	r3, r3, #15
 8004662:	3b04      	subs	r3, #4
 8004664:	0112      	lsls	r2, r2, #4
 8004666:	b2d2      	uxtb	r2, r2
 8004668:	440b      	add	r3, r1
 800466a:	761a      	strb	r2, [r3, #24]
}
 800466c:	bf00      	nop
 800466e:	370c      	adds	r7, #12
 8004670:	46bd      	mov	sp, r7
 8004672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004676:	4770      	bx	lr
 8004678:	e000e100 	.word	0xe000e100
 800467c:	e000ed00 	.word	0xe000ed00

08004680 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004680:	b480      	push	{r7}
 8004682:	b089      	sub	sp, #36	; 0x24
 8004684:	af00      	add	r7, sp, #0
 8004686:	60f8      	str	r0, [r7, #12]
 8004688:	60b9      	str	r1, [r7, #8]
 800468a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	f003 0307 	and.w	r3, r3, #7
 8004692:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004694:	69fb      	ldr	r3, [r7, #28]
 8004696:	f1c3 0307 	rsb	r3, r3, #7
 800469a:	2b04      	cmp	r3, #4
 800469c:	bf28      	it	cs
 800469e:	2304      	movcs	r3, #4
 80046a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80046a2:	69fb      	ldr	r3, [r7, #28]
 80046a4:	3304      	adds	r3, #4
 80046a6:	2b06      	cmp	r3, #6
 80046a8:	d902      	bls.n	80046b0 <NVIC_EncodePriority+0x30>
 80046aa:	69fb      	ldr	r3, [r7, #28]
 80046ac:	3b03      	subs	r3, #3
 80046ae:	e000      	b.n	80046b2 <NVIC_EncodePriority+0x32>
 80046b0:	2300      	movs	r3, #0
 80046b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046b4:	f04f 32ff 	mov.w	r2, #4294967295
 80046b8:	69bb      	ldr	r3, [r7, #24]
 80046ba:	fa02 f303 	lsl.w	r3, r2, r3
 80046be:	43da      	mvns	r2, r3
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	401a      	ands	r2, r3
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80046c8:	f04f 31ff 	mov.w	r1, #4294967295
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	fa01 f303 	lsl.w	r3, r1, r3
 80046d2:	43d9      	mvns	r1, r3
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046d8:	4313      	orrs	r3, r2
         );
}
 80046da:	4618      	mov	r0, r3
 80046dc:	3724      	adds	r7, #36	; 0x24
 80046de:	46bd      	mov	sp, r7
 80046e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e4:	4770      	bx	lr
	...

080046e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b082      	sub	sp, #8
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	3b01      	subs	r3, #1
 80046f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80046f8:	d301      	bcc.n	80046fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80046fa:	2301      	movs	r3, #1
 80046fc:	e00f      	b.n	800471e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80046fe:	4a0a      	ldr	r2, [pc, #40]	; (8004728 <SysTick_Config+0x40>)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	3b01      	subs	r3, #1
 8004704:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004706:	210f      	movs	r1, #15
 8004708:	f04f 30ff 	mov.w	r0, #4294967295
 800470c:	f7ff ff8e 	bl	800462c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004710:	4b05      	ldr	r3, [pc, #20]	; (8004728 <SysTick_Config+0x40>)
 8004712:	2200      	movs	r2, #0
 8004714:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004716:	4b04      	ldr	r3, [pc, #16]	; (8004728 <SysTick_Config+0x40>)
 8004718:	2207      	movs	r2, #7
 800471a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800471c:	2300      	movs	r3, #0
}
 800471e:	4618      	mov	r0, r3
 8004720:	3708      	adds	r7, #8
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}
 8004726:	bf00      	nop
 8004728:	e000e010 	.word	0xe000e010

0800472c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b082      	sub	sp, #8
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004734:	6878      	ldr	r0, [r7, #4]
 8004736:	f7ff ff47 	bl	80045c8 <__NVIC_SetPriorityGrouping>
}
 800473a:	bf00      	nop
 800473c:	3708      	adds	r7, #8
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}

08004742 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004742:	b580      	push	{r7, lr}
 8004744:	b086      	sub	sp, #24
 8004746:	af00      	add	r7, sp, #0
 8004748:	4603      	mov	r3, r0
 800474a:	60b9      	str	r1, [r7, #8]
 800474c:	607a      	str	r2, [r7, #4]
 800474e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004750:	2300      	movs	r3, #0
 8004752:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004754:	f7ff ff5c 	bl	8004610 <__NVIC_GetPriorityGrouping>
 8004758:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800475a:	687a      	ldr	r2, [r7, #4]
 800475c:	68b9      	ldr	r1, [r7, #8]
 800475e:	6978      	ldr	r0, [r7, #20]
 8004760:	f7ff ff8e 	bl	8004680 <NVIC_EncodePriority>
 8004764:	4602      	mov	r2, r0
 8004766:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800476a:	4611      	mov	r1, r2
 800476c:	4618      	mov	r0, r3
 800476e:	f7ff ff5d 	bl	800462c <__NVIC_SetPriority>
}
 8004772:	bf00      	nop
 8004774:	3718      	adds	r7, #24
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}

0800477a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800477a:	b580      	push	{r7, lr}
 800477c:	b082      	sub	sp, #8
 800477e:	af00      	add	r7, sp, #0
 8004780:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f7ff ffb0 	bl	80046e8 <SysTick_Config>
 8004788:	4603      	mov	r3, r0
}
 800478a:	4618      	mov	r0, r3
 800478c:	3708      	adds	r7, #8
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}

08004792 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004792:	b580      	push	{r7, lr}
 8004794:	b082      	sub	sp, #8
 8004796:	af00      	add	r7, sp, #0
 8004798:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d101      	bne.n	80047a4 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80047a0:	2301      	movs	r3, #1
 80047a2:	e011      	b.n	80047c8 <HAL_CRC_Init+0x36>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	795b      	ldrb	r3, [r3, #5]
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d105      	bne.n	80047ba <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2200      	movs	r2, #0
 80047b2:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80047b4:	6878      	ldr	r0, [r7, #4]
 80047b6:	f003 fc71 	bl	800809c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2202      	movs	r2, #2
 80047be:	715a      	strb	r2, [r3, #5]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2201      	movs	r2, #1
 80047c4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80047c6:	2300      	movs	r3, #0
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	3708      	adds	r7, #8
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}

080047d0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b083      	sub	sp, #12
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80047de:	b2db      	uxtb	r3, r3
 80047e0:	2b02      	cmp	r3, #2
 80047e2:	d004      	beq.n	80047ee <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2280      	movs	r2, #128	; 0x80
 80047e8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	e00c      	b.n	8004808 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2205      	movs	r2, #5
 80047f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f022 0201 	bic.w	r2, r2, #1
 8004804:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004806:	2300      	movs	r3, #0
}
 8004808:	4618      	mov	r0, r3
 800480a:	370c      	adds	r7, #12
 800480c:	46bd      	mov	sp, r7
 800480e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004812:	4770      	bx	lr

08004814 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004814:	b480      	push	{r7}
 8004816:	b089      	sub	sp, #36	; 0x24
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
 800481c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800481e:	2300      	movs	r3, #0
 8004820:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004822:	2300      	movs	r3, #0
 8004824:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004826:	2300      	movs	r3, #0
 8004828:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800482a:	2300      	movs	r3, #0
 800482c:	61fb      	str	r3, [r7, #28]
 800482e:	e16b      	b.n	8004b08 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004830:	2201      	movs	r2, #1
 8004832:	69fb      	ldr	r3, [r7, #28]
 8004834:	fa02 f303 	lsl.w	r3, r2, r3
 8004838:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	697a      	ldr	r2, [r7, #20]
 8004840:	4013      	ands	r3, r2
 8004842:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004844:	693a      	ldr	r2, [r7, #16]
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	429a      	cmp	r2, r3
 800484a:	f040 815a 	bne.w	8004b02 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	2b02      	cmp	r3, #2
 8004854:	d003      	beq.n	800485e <HAL_GPIO_Init+0x4a>
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	2b12      	cmp	r3, #18
 800485c:	d123      	bne.n	80048a6 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800485e:	69fb      	ldr	r3, [r7, #28]
 8004860:	08da      	lsrs	r2, r3, #3
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	3208      	adds	r2, #8
 8004866:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800486a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800486c:	69fb      	ldr	r3, [r7, #28]
 800486e:	f003 0307 	and.w	r3, r3, #7
 8004872:	009b      	lsls	r3, r3, #2
 8004874:	220f      	movs	r2, #15
 8004876:	fa02 f303 	lsl.w	r3, r2, r3
 800487a:	43db      	mvns	r3, r3
 800487c:	69ba      	ldr	r2, [r7, #24]
 800487e:	4013      	ands	r3, r2
 8004880:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	691a      	ldr	r2, [r3, #16]
 8004886:	69fb      	ldr	r3, [r7, #28]
 8004888:	f003 0307 	and.w	r3, r3, #7
 800488c:	009b      	lsls	r3, r3, #2
 800488e:	fa02 f303 	lsl.w	r3, r2, r3
 8004892:	69ba      	ldr	r2, [r7, #24]
 8004894:	4313      	orrs	r3, r2
 8004896:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004898:	69fb      	ldr	r3, [r7, #28]
 800489a:	08da      	lsrs	r2, r3, #3
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	3208      	adds	r2, #8
 80048a0:	69b9      	ldr	r1, [r7, #24]
 80048a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80048ac:	69fb      	ldr	r3, [r7, #28]
 80048ae:	005b      	lsls	r3, r3, #1
 80048b0:	2203      	movs	r2, #3
 80048b2:	fa02 f303 	lsl.w	r3, r2, r3
 80048b6:	43db      	mvns	r3, r3
 80048b8:	69ba      	ldr	r2, [r7, #24]
 80048ba:	4013      	ands	r3, r2
 80048bc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	f003 0203 	and.w	r2, r3, #3
 80048c6:	69fb      	ldr	r3, [r7, #28]
 80048c8:	005b      	lsls	r3, r3, #1
 80048ca:	fa02 f303 	lsl.w	r3, r2, r3
 80048ce:	69ba      	ldr	r2, [r7, #24]
 80048d0:	4313      	orrs	r3, r2
 80048d2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	69ba      	ldr	r2, [r7, #24]
 80048d8:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	2b01      	cmp	r3, #1
 80048e0:	d00b      	beq.n	80048fa <HAL_GPIO_Init+0xe6>
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	2b02      	cmp	r3, #2
 80048e8:	d007      	beq.n	80048fa <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80048ee:	2b11      	cmp	r3, #17
 80048f0:	d003      	beq.n	80048fa <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	2b12      	cmp	r3, #18
 80048f8:	d130      	bne.n	800495c <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004900:	69fb      	ldr	r3, [r7, #28]
 8004902:	005b      	lsls	r3, r3, #1
 8004904:	2203      	movs	r2, #3
 8004906:	fa02 f303 	lsl.w	r3, r2, r3
 800490a:	43db      	mvns	r3, r3
 800490c:	69ba      	ldr	r2, [r7, #24]
 800490e:	4013      	ands	r3, r2
 8004910:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	68da      	ldr	r2, [r3, #12]
 8004916:	69fb      	ldr	r3, [r7, #28]
 8004918:	005b      	lsls	r3, r3, #1
 800491a:	fa02 f303 	lsl.w	r3, r2, r3
 800491e:	69ba      	ldr	r2, [r7, #24]
 8004920:	4313      	orrs	r3, r2
 8004922:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	69ba      	ldr	r2, [r7, #24]
 8004928:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004930:	2201      	movs	r2, #1
 8004932:	69fb      	ldr	r3, [r7, #28]
 8004934:	fa02 f303 	lsl.w	r3, r2, r3
 8004938:	43db      	mvns	r3, r3
 800493a:	69ba      	ldr	r2, [r7, #24]
 800493c:	4013      	ands	r3, r2
 800493e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	091b      	lsrs	r3, r3, #4
 8004946:	f003 0201 	and.w	r2, r3, #1
 800494a:	69fb      	ldr	r3, [r7, #28]
 800494c:	fa02 f303 	lsl.w	r3, r2, r3
 8004950:	69ba      	ldr	r2, [r7, #24]
 8004952:	4313      	orrs	r3, r2
 8004954:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	69ba      	ldr	r2, [r7, #24]
 800495a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	68db      	ldr	r3, [r3, #12]
 8004960:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004962:	69fb      	ldr	r3, [r7, #28]
 8004964:	005b      	lsls	r3, r3, #1
 8004966:	2203      	movs	r2, #3
 8004968:	fa02 f303 	lsl.w	r3, r2, r3
 800496c:	43db      	mvns	r3, r3
 800496e:	69ba      	ldr	r2, [r7, #24]
 8004970:	4013      	ands	r3, r2
 8004972:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	689a      	ldr	r2, [r3, #8]
 8004978:	69fb      	ldr	r3, [r7, #28]
 800497a:	005b      	lsls	r3, r3, #1
 800497c:	fa02 f303 	lsl.w	r3, r2, r3
 8004980:	69ba      	ldr	r2, [r7, #24]
 8004982:	4313      	orrs	r3, r2
 8004984:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	69ba      	ldr	r2, [r7, #24]
 800498a:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004994:	2b00      	cmp	r3, #0
 8004996:	f000 80b4 	beq.w	8004b02 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800499a:	2300      	movs	r3, #0
 800499c:	60fb      	str	r3, [r7, #12]
 800499e:	4b5f      	ldr	r3, [pc, #380]	; (8004b1c <HAL_GPIO_Init+0x308>)
 80049a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049a2:	4a5e      	ldr	r2, [pc, #376]	; (8004b1c <HAL_GPIO_Init+0x308>)
 80049a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80049a8:	6453      	str	r3, [r2, #68]	; 0x44
 80049aa:	4b5c      	ldr	r3, [pc, #368]	; (8004b1c <HAL_GPIO_Init+0x308>)
 80049ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049b2:	60fb      	str	r3, [r7, #12]
 80049b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80049b6:	4a5a      	ldr	r2, [pc, #360]	; (8004b20 <HAL_GPIO_Init+0x30c>)
 80049b8:	69fb      	ldr	r3, [r7, #28]
 80049ba:	089b      	lsrs	r3, r3, #2
 80049bc:	3302      	adds	r3, #2
 80049be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80049c4:	69fb      	ldr	r3, [r7, #28]
 80049c6:	f003 0303 	and.w	r3, r3, #3
 80049ca:	009b      	lsls	r3, r3, #2
 80049cc:	220f      	movs	r2, #15
 80049ce:	fa02 f303 	lsl.w	r3, r2, r3
 80049d2:	43db      	mvns	r3, r3
 80049d4:	69ba      	ldr	r2, [r7, #24]
 80049d6:	4013      	ands	r3, r2
 80049d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	4a51      	ldr	r2, [pc, #324]	; (8004b24 <HAL_GPIO_Init+0x310>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d02b      	beq.n	8004a3a <HAL_GPIO_Init+0x226>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	4a50      	ldr	r2, [pc, #320]	; (8004b28 <HAL_GPIO_Init+0x314>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d025      	beq.n	8004a36 <HAL_GPIO_Init+0x222>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	4a4f      	ldr	r2, [pc, #316]	; (8004b2c <HAL_GPIO_Init+0x318>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d01f      	beq.n	8004a32 <HAL_GPIO_Init+0x21e>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	4a4e      	ldr	r2, [pc, #312]	; (8004b30 <HAL_GPIO_Init+0x31c>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d019      	beq.n	8004a2e <HAL_GPIO_Init+0x21a>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	4a4d      	ldr	r2, [pc, #308]	; (8004b34 <HAL_GPIO_Init+0x320>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d013      	beq.n	8004a2a <HAL_GPIO_Init+0x216>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	4a4c      	ldr	r2, [pc, #304]	; (8004b38 <HAL_GPIO_Init+0x324>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d00d      	beq.n	8004a26 <HAL_GPIO_Init+0x212>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	4a4b      	ldr	r2, [pc, #300]	; (8004b3c <HAL_GPIO_Init+0x328>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d007      	beq.n	8004a22 <HAL_GPIO_Init+0x20e>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	4a4a      	ldr	r2, [pc, #296]	; (8004b40 <HAL_GPIO_Init+0x32c>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d101      	bne.n	8004a1e <HAL_GPIO_Init+0x20a>
 8004a1a:	2307      	movs	r3, #7
 8004a1c:	e00e      	b.n	8004a3c <HAL_GPIO_Init+0x228>
 8004a1e:	2308      	movs	r3, #8
 8004a20:	e00c      	b.n	8004a3c <HAL_GPIO_Init+0x228>
 8004a22:	2306      	movs	r3, #6
 8004a24:	e00a      	b.n	8004a3c <HAL_GPIO_Init+0x228>
 8004a26:	2305      	movs	r3, #5
 8004a28:	e008      	b.n	8004a3c <HAL_GPIO_Init+0x228>
 8004a2a:	2304      	movs	r3, #4
 8004a2c:	e006      	b.n	8004a3c <HAL_GPIO_Init+0x228>
 8004a2e:	2303      	movs	r3, #3
 8004a30:	e004      	b.n	8004a3c <HAL_GPIO_Init+0x228>
 8004a32:	2302      	movs	r3, #2
 8004a34:	e002      	b.n	8004a3c <HAL_GPIO_Init+0x228>
 8004a36:	2301      	movs	r3, #1
 8004a38:	e000      	b.n	8004a3c <HAL_GPIO_Init+0x228>
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	69fa      	ldr	r2, [r7, #28]
 8004a3e:	f002 0203 	and.w	r2, r2, #3
 8004a42:	0092      	lsls	r2, r2, #2
 8004a44:	4093      	lsls	r3, r2
 8004a46:	69ba      	ldr	r2, [r7, #24]
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004a4c:	4934      	ldr	r1, [pc, #208]	; (8004b20 <HAL_GPIO_Init+0x30c>)
 8004a4e:	69fb      	ldr	r3, [r7, #28]
 8004a50:	089b      	lsrs	r3, r3, #2
 8004a52:	3302      	adds	r3, #2
 8004a54:	69ba      	ldr	r2, [r7, #24]
 8004a56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004a5a:	4b3a      	ldr	r3, [pc, #232]	; (8004b44 <HAL_GPIO_Init+0x330>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a60:	693b      	ldr	r3, [r7, #16]
 8004a62:	43db      	mvns	r3, r3
 8004a64:	69ba      	ldr	r2, [r7, #24]
 8004a66:	4013      	ands	r3, r2
 8004a68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d003      	beq.n	8004a7e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004a76:	69ba      	ldr	r2, [r7, #24]
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004a7e:	4a31      	ldr	r2, [pc, #196]	; (8004b44 <HAL_GPIO_Init+0x330>)
 8004a80:	69bb      	ldr	r3, [r7, #24]
 8004a82:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004a84:	4b2f      	ldr	r3, [pc, #188]	; (8004b44 <HAL_GPIO_Init+0x330>)
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	43db      	mvns	r3, r3
 8004a8e:	69ba      	ldr	r2, [r7, #24]
 8004a90:	4013      	ands	r3, r2
 8004a92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d003      	beq.n	8004aa8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004aa0:	69ba      	ldr	r2, [r7, #24]
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004aa8:	4a26      	ldr	r2, [pc, #152]	; (8004b44 <HAL_GPIO_Init+0x330>)
 8004aaa:	69bb      	ldr	r3, [r7, #24]
 8004aac:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004aae:	4b25      	ldr	r3, [pc, #148]	; (8004b44 <HAL_GPIO_Init+0x330>)
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	43db      	mvns	r3, r3
 8004ab8:	69ba      	ldr	r2, [r7, #24]
 8004aba:	4013      	ands	r3, r2
 8004abc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d003      	beq.n	8004ad2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004aca:	69ba      	ldr	r2, [r7, #24]
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004ad2:	4a1c      	ldr	r2, [pc, #112]	; (8004b44 <HAL_GPIO_Init+0x330>)
 8004ad4:	69bb      	ldr	r3, [r7, #24]
 8004ad6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004ad8:	4b1a      	ldr	r3, [pc, #104]	; (8004b44 <HAL_GPIO_Init+0x330>)
 8004ada:	68db      	ldr	r3, [r3, #12]
 8004adc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	43db      	mvns	r3, r3
 8004ae2:	69ba      	ldr	r2, [r7, #24]
 8004ae4:	4013      	ands	r3, r2
 8004ae6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d003      	beq.n	8004afc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004af4:	69ba      	ldr	r2, [r7, #24]
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	4313      	orrs	r3, r2
 8004afa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004afc:	4a11      	ldr	r2, [pc, #68]	; (8004b44 <HAL_GPIO_Init+0x330>)
 8004afe:	69bb      	ldr	r3, [r7, #24]
 8004b00:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004b02:	69fb      	ldr	r3, [r7, #28]
 8004b04:	3301      	adds	r3, #1
 8004b06:	61fb      	str	r3, [r7, #28]
 8004b08:	69fb      	ldr	r3, [r7, #28]
 8004b0a:	2b0f      	cmp	r3, #15
 8004b0c:	f67f ae90 	bls.w	8004830 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004b10:	bf00      	nop
 8004b12:	3724      	adds	r7, #36	; 0x24
 8004b14:	46bd      	mov	sp, r7
 8004b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1a:	4770      	bx	lr
 8004b1c:	40023800 	.word	0x40023800
 8004b20:	40013800 	.word	0x40013800
 8004b24:	40020000 	.word	0x40020000
 8004b28:	40020400 	.word	0x40020400
 8004b2c:	40020800 	.word	0x40020800
 8004b30:	40020c00 	.word	0x40020c00
 8004b34:	40021000 	.word	0x40021000
 8004b38:	40021400 	.word	0x40021400
 8004b3c:	40021800 	.word	0x40021800
 8004b40:	40021c00 	.word	0x40021c00
 8004b44:	40013c00 	.word	0x40013c00

08004b48 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b085      	sub	sp, #20
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
 8004b50:	460b      	mov	r3, r1
 8004b52:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	691a      	ldr	r2, [r3, #16]
 8004b58:	887b      	ldrh	r3, [r7, #2]
 8004b5a:	4013      	ands	r3, r2
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d002      	beq.n	8004b66 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004b60:	2301      	movs	r3, #1
 8004b62:	73fb      	strb	r3, [r7, #15]
 8004b64:	e001      	b.n	8004b6a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004b66:	2300      	movs	r3, #0
 8004b68:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004b6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	3714      	adds	r7, #20
 8004b70:	46bd      	mov	sp, r7
 8004b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b76:	4770      	bx	lr

08004b78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b083      	sub	sp, #12
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
 8004b80:	460b      	mov	r3, r1
 8004b82:	807b      	strh	r3, [r7, #2]
 8004b84:	4613      	mov	r3, r2
 8004b86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004b88:	787b      	ldrb	r3, [r7, #1]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d003      	beq.n	8004b96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004b8e:	887a      	ldrh	r2, [r7, #2]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004b94:	e003      	b.n	8004b9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004b96:	887b      	ldrh	r3, [r7, #2]
 8004b98:	041a      	lsls	r2, r3, #16
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	619a      	str	r2, [r3, #24]
}
 8004b9e:	bf00      	nop
 8004ba0:	370c      	adds	r7, #12
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba8:	4770      	bx	lr
	...

08004bac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b086      	sub	sp, #24
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d101      	bne.n	8004bbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e22d      	b.n	800501a <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f003 0301 	and.w	r3, r3, #1
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d075      	beq.n	8004cb6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004bca:	4ba3      	ldr	r3, [pc, #652]	; (8004e58 <HAL_RCC_OscConfig+0x2ac>)
 8004bcc:	689b      	ldr	r3, [r3, #8]
 8004bce:	f003 030c 	and.w	r3, r3, #12
 8004bd2:	2b04      	cmp	r3, #4
 8004bd4:	d00c      	beq.n	8004bf0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004bd6:	4ba0      	ldr	r3, [pc, #640]	; (8004e58 <HAL_RCC_OscConfig+0x2ac>)
 8004bd8:	689b      	ldr	r3, [r3, #8]
 8004bda:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004bde:	2b08      	cmp	r3, #8
 8004be0:	d112      	bne.n	8004c08 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004be2:	4b9d      	ldr	r3, [pc, #628]	; (8004e58 <HAL_RCC_OscConfig+0x2ac>)
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004bee:	d10b      	bne.n	8004c08 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bf0:	4b99      	ldr	r3, [pc, #612]	; (8004e58 <HAL_RCC_OscConfig+0x2ac>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d05b      	beq.n	8004cb4 <HAL_RCC_OscConfig+0x108>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d157      	bne.n	8004cb4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004c04:	2301      	movs	r3, #1
 8004c06:	e208      	b.n	800501a <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c10:	d106      	bne.n	8004c20 <HAL_RCC_OscConfig+0x74>
 8004c12:	4b91      	ldr	r3, [pc, #580]	; (8004e58 <HAL_RCC_OscConfig+0x2ac>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a90      	ldr	r2, [pc, #576]	; (8004e58 <HAL_RCC_OscConfig+0x2ac>)
 8004c18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c1c:	6013      	str	r3, [r2, #0]
 8004c1e:	e01d      	b.n	8004c5c <HAL_RCC_OscConfig+0xb0>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c28:	d10c      	bne.n	8004c44 <HAL_RCC_OscConfig+0x98>
 8004c2a:	4b8b      	ldr	r3, [pc, #556]	; (8004e58 <HAL_RCC_OscConfig+0x2ac>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a8a      	ldr	r2, [pc, #552]	; (8004e58 <HAL_RCC_OscConfig+0x2ac>)
 8004c30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c34:	6013      	str	r3, [r2, #0]
 8004c36:	4b88      	ldr	r3, [pc, #544]	; (8004e58 <HAL_RCC_OscConfig+0x2ac>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a87      	ldr	r2, [pc, #540]	; (8004e58 <HAL_RCC_OscConfig+0x2ac>)
 8004c3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c40:	6013      	str	r3, [r2, #0]
 8004c42:	e00b      	b.n	8004c5c <HAL_RCC_OscConfig+0xb0>
 8004c44:	4b84      	ldr	r3, [pc, #528]	; (8004e58 <HAL_RCC_OscConfig+0x2ac>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a83      	ldr	r2, [pc, #524]	; (8004e58 <HAL_RCC_OscConfig+0x2ac>)
 8004c4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c4e:	6013      	str	r3, [r2, #0]
 8004c50:	4b81      	ldr	r3, [pc, #516]	; (8004e58 <HAL_RCC_OscConfig+0x2ac>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a80      	ldr	r2, [pc, #512]	; (8004e58 <HAL_RCC_OscConfig+0x2ac>)
 8004c56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d013      	beq.n	8004c8c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c64:	f7ff fc82 	bl	800456c <HAL_GetTick>
 8004c68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c6a:	e008      	b.n	8004c7e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c6c:	f7ff fc7e 	bl	800456c <HAL_GetTick>
 8004c70:	4602      	mov	r2, r0
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	1ad3      	subs	r3, r2, r3
 8004c76:	2b64      	cmp	r3, #100	; 0x64
 8004c78:	d901      	bls.n	8004c7e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004c7a:	2303      	movs	r3, #3
 8004c7c:	e1cd      	b.n	800501a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c7e:	4b76      	ldr	r3, [pc, #472]	; (8004e58 <HAL_RCC_OscConfig+0x2ac>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d0f0      	beq.n	8004c6c <HAL_RCC_OscConfig+0xc0>
 8004c8a:	e014      	b.n	8004cb6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c8c:	f7ff fc6e 	bl	800456c <HAL_GetTick>
 8004c90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c92:	e008      	b.n	8004ca6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c94:	f7ff fc6a 	bl	800456c <HAL_GetTick>
 8004c98:	4602      	mov	r2, r0
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	1ad3      	subs	r3, r2, r3
 8004c9e:	2b64      	cmp	r3, #100	; 0x64
 8004ca0:	d901      	bls.n	8004ca6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004ca2:	2303      	movs	r3, #3
 8004ca4:	e1b9      	b.n	800501a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ca6:	4b6c      	ldr	r3, [pc, #432]	; (8004e58 <HAL_RCC_OscConfig+0x2ac>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d1f0      	bne.n	8004c94 <HAL_RCC_OscConfig+0xe8>
 8004cb2:	e000      	b.n	8004cb6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f003 0302 	and.w	r3, r3, #2
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d063      	beq.n	8004d8a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004cc2:	4b65      	ldr	r3, [pc, #404]	; (8004e58 <HAL_RCC_OscConfig+0x2ac>)
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	f003 030c 	and.w	r3, r3, #12
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d00b      	beq.n	8004ce6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004cce:	4b62      	ldr	r3, [pc, #392]	; (8004e58 <HAL_RCC_OscConfig+0x2ac>)
 8004cd0:	689b      	ldr	r3, [r3, #8]
 8004cd2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004cd6:	2b08      	cmp	r3, #8
 8004cd8:	d11c      	bne.n	8004d14 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004cda:	4b5f      	ldr	r3, [pc, #380]	; (8004e58 <HAL_RCC_OscConfig+0x2ac>)
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d116      	bne.n	8004d14 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ce6:	4b5c      	ldr	r3, [pc, #368]	; (8004e58 <HAL_RCC_OscConfig+0x2ac>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f003 0302 	and.w	r3, r3, #2
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d005      	beq.n	8004cfe <HAL_RCC_OscConfig+0x152>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	68db      	ldr	r3, [r3, #12]
 8004cf6:	2b01      	cmp	r3, #1
 8004cf8:	d001      	beq.n	8004cfe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	e18d      	b.n	800501a <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cfe:	4b56      	ldr	r3, [pc, #344]	; (8004e58 <HAL_RCC_OscConfig+0x2ac>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	691b      	ldr	r3, [r3, #16]
 8004d0a:	00db      	lsls	r3, r3, #3
 8004d0c:	4952      	ldr	r1, [pc, #328]	; (8004e58 <HAL_RCC_OscConfig+0x2ac>)
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d12:	e03a      	b.n	8004d8a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	68db      	ldr	r3, [r3, #12]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d020      	beq.n	8004d5e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d1c:	4b4f      	ldr	r3, [pc, #316]	; (8004e5c <HAL_RCC_OscConfig+0x2b0>)
 8004d1e:	2201      	movs	r2, #1
 8004d20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d22:	f7ff fc23 	bl	800456c <HAL_GetTick>
 8004d26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d28:	e008      	b.n	8004d3c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d2a:	f7ff fc1f 	bl	800456c <HAL_GetTick>
 8004d2e:	4602      	mov	r2, r0
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	1ad3      	subs	r3, r2, r3
 8004d34:	2b02      	cmp	r3, #2
 8004d36:	d901      	bls.n	8004d3c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004d38:	2303      	movs	r3, #3
 8004d3a:	e16e      	b.n	800501a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d3c:	4b46      	ldr	r3, [pc, #280]	; (8004e58 <HAL_RCC_OscConfig+0x2ac>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f003 0302 	and.w	r3, r3, #2
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d0f0      	beq.n	8004d2a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d48:	4b43      	ldr	r3, [pc, #268]	; (8004e58 <HAL_RCC_OscConfig+0x2ac>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	691b      	ldr	r3, [r3, #16]
 8004d54:	00db      	lsls	r3, r3, #3
 8004d56:	4940      	ldr	r1, [pc, #256]	; (8004e58 <HAL_RCC_OscConfig+0x2ac>)
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	600b      	str	r3, [r1, #0]
 8004d5c:	e015      	b.n	8004d8a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d5e:	4b3f      	ldr	r3, [pc, #252]	; (8004e5c <HAL_RCC_OscConfig+0x2b0>)
 8004d60:	2200      	movs	r2, #0
 8004d62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d64:	f7ff fc02 	bl	800456c <HAL_GetTick>
 8004d68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d6a:	e008      	b.n	8004d7e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d6c:	f7ff fbfe 	bl	800456c <HAL_GetTick>
 8004d70:	4602      	mov	r2, r0
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	1ad3      	subs	r3, r2, r3
 8004d76:	2b02      	cmp	r3, #2
 8004d78:	d901      	bls.n	8004d7e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004d7a:	2303      	movs	r3, #3
 8004d7c:	e14d      	b.n	800501a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d7e:	4b36      	ldr	r3, [pc, #216]	; (8004e58 <HAL_RCC_OscConfig+0x2ac>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f003 0302 	and.w	r3, r3, #2
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d1f0      	bne.n	8004d6c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f003 0308 	and.w	r3, r3, #8
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d030      	beq.n	8004df8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	695b      	ldr	r3, [r3, #20]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d016      	beq.n	8004dcc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d9e:	4b30      	ldr	r3, [pc, #192]	; (8004e60 <HAL_RCC_OscConfig+0x2b4>)
 8004da0:	2201      	movs	r2, #1
 8004da2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004da4:	f7ff fbe2 	bl	800456c <HAL_GetTick>
 8004da8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004daa:	e008      	b.n	8004dbe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004dac:	f7ff fbde 	bl	800456c <HAL_GetTick>
 8004db0:	4602      	mov	r2, r0
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	1ad3      	subs	r3, r2, r3
 8004db6:	2b02      	cmp	r3, #2
 8004db8:	d901      	bls.n	8004dbe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004dba:	2303      	movs	r3, #3
 8004dbc:	e12d      	b.n	800501a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004dbe:	4b26      	ldr	r3, [pc, #152]	; (8004e58 <HAL_RCC_OscConfig+0x2ac>)
 8004dc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004dc2:	f003 0302 	and.w	r3, r3, #2
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d0f0      	beq.n	8004dac <HAL_RCC_OscConfig+0x200>
 8004dca:	e015      	b.n	8004df8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004dcc:	4b24      	ldr	r3, [pc, #144]	; (8004e60 <HAL_RCC_OscConfig+0x2b4>)
 8004dce:	2200      	movs	r2, #0
 8004dd0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004dd2:	f7ff fbcb 	bl	800456c <HAL_GetTick>
 8004dd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004dd8:	e008      	b.n	8004dec <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004dda:	f7ff fbc7 	bl	800456c <HAL_GetTick>
 8004dde:	4602      	mov	r2, r0
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	1ad3      	subs	r3, r2, r3
 8004de4:	2b02      	cmp	r3, #2
 8004de6:	d901      	bls.n	8004dec <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004de8:	2303      	movs	r3, #3
 8004dea:	e116      	b.n	800501a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004dec:	4b1a      	ldr	r3, [pc, #104]	; (8004e58 <HAL_RCC_OscConfig+0x2ac>)
 8004dee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004df0:	f003 0302 	and.w	r3, r3, #2
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d1f0      	bne.n	8004dda <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f003 0304 	and.w	r3, r3, #4
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	f000 80a0 	beq.w	8004f46 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e06:	2300      	movs	r3, #0
 8004e08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e0a:	4b13      	ldr	r3, [pc, #76]	; (8004e58 <HAL_RCC_OscConfig+0x2ac>)
 8004e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d10f      	bne.n	8004e36 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e16:	2300      	movs	r3, #0
 8004e18:	60fb      	str	r3, [r7, #12]
 8004e1a:	4b0f      	ldr	r3, [pc, #60]	; (8004e58 <HAL_RCC_OscConfig+0x2ac>)
 8004e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e1e:	4a0e      	ldr	r2, [pc, #56]	; (8004e58 <HAL_RCC_OscConfig+0x2ac>)
 8004e20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e24:	6413      	str	r3, [r2, #64]	; 0x40
 8004e26:	4b0c      	ldr	r3, [pc, #48]	; (8004e58 <HAL_RCC_OscConfig+0x2ac>)
 8004e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e2e:	60fb      	str	r3, [r7, #12]
 8004e30:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004e32:	2301      	movs	r3, #1
 8004e34:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e36:	4b0b      	ldr	r3, [pc, #44]	; (8004e64 <HAL_RCC_OscConfig+0x2b8>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d121      	bne.n	8004e86 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e42:	4b08      	ldr	r3, [pc, #32]	; (8004e64 <HAL_RCC_OscConfig+0x2b8>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a07      	ldr	r2, [pc, #28]	; (8004e64 <HAL_RCC_OscConfig+0x2b8>)
 8004e48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e4e:	f7ff fb8d 	bl	800456c <HAL_GetTick>
 8004e52:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e54:	e011      	b.n	8004e7a <HAL_RCC_OscConfig+0x2ce>
 8004e56:	bf00      	nop
 8004e58:	40023800 	.word	0x40023800
 8004e5c:	42470000 	.word	0x42470000
 8004e60:	42470e80 	.word	0x42470e80
 8004e64:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e68:	f7ff fb80 	bl	800456c <HAL_GetTick>
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	1ad3      	subs	r3, r2, r3
 8004e72:	2b02      	cmp	r3, #2
 8004e74:	d901      	bls.n	8004e7a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004e76:	2303      	movs	r3, #3
 8004e78:	e0cf      	b.n	800501a <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e7a:	4b6a      	ldr	r3, [pc, #424]	; (8005024 <HAL_RCC_OscConfig+0x478>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d0f0      	beq.n	8004e68 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	2b01      	cmp	r3, #1
 8004e8c:	d106      	bne.n	8004e9c <HAL_RCC_OscConfig+0x2f0>
 8004e8e:	4b66      	ldr	r3, [pc, #408]	; (8005028 <HAL_RCC_OscConfig+0x47c>)
 8004e90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e92:	4a65      	ldr	r2, [pc, #404]	; (8005028 <HAL_RCC_OscConfig+0x47c>)
 8004e94:	f043 0301 	orr.w	r3, r3, #1
 8004e98:	6713      	str	r3, [r2, #112]	; 0x70
 8004e9a:	e01c      	b.n	8004ed6 <HAL_RCC_OscConfig+0x32a>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	689b      	ldr	r3, [r3, #8]
 8004ea0:	2b05      	cmp	r3, #5
 8004ea2:	d10c      	bne.n	8004ebe <HAL_RCC_OscConfig+0x312>
 8004ea4:	4b60      	ldr	r3, [pc, #384]	; (8005028 <HAL_RCC_OscConfig+0x47c>)
 8004ea6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ea8:	4a5f      	ldr	r2, [pc, #380]	; (8005028 <HAL_RCC_OscConfig+0x47c>)
 8004eaa:	f043 0304 	orr.w	r3, r3, #4
 8004eae:	6713      	str	r3, [r2, #112]	; 0x70
 8004eb0:	4b5d      	ldr	r3, [pc, #372]	; (8005028 <HAL_RCC_OscConfig+0x47c>)
 8004eb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eb4:	4a5c      	ldr	r2, [pc, #368]	; (8005028 <HAL_RCC_OscConfig+0x47c>)
 8004eb6:	f043 0301 	orr.w	r3, r3, #1
 8004eba:	6713      	str	r3, [r2, #112]	; 0x70
 8004ebc:	e00b      	b.n	8004ed6 <HAL_RCC_OscConfig+0x32a>
 8004ebe:	4b5a      	ldr	r3, [pc, #360]	; (8005028 <HAL_RCC_OscConfig+0x47c>)
 8004ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ec2:	4a59      	ldr	r2, [pc, #356]	; (8005028 <HAL_RCC_OscConfig+0x47c>)
 8004ec4:	f023 0301 	bic.w	r3, r3, #1
 8004ec8:	6713      	str	r3, [r2, #112]	; 0x70
 8004eca:	4b57      	ldr	r3, [pc, #348]	; (8005028 <HAL_RCC_OscConfig+0x47c>)
 8004ecc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ece:	4a56      	ldr	r2, [pc, #344]	; (8005028 <HAL_RCC_OscConfig+0x47c>)
 8004ed0:	f023 0304 	bic.w	r3, r3, #4
 8004ed4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	689b      	ldr	r3, [r3, #8]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d015      	beq.n	8004f0a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ede:	f7ff fb45 	bl	800456c <HAL_GetTick>
 8004ee2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ee4:	e00a      	b.n	8004efc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ee6:	f7ff fb41 	bl	800456c <HAL_GetTick>
 8004eea:	4602      	mov	r2, r0
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	1ad3      	subs	r3, r2, r3
 8004ef0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d901      	bls.n	8004efc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004ef8:	2303      	movs	r3, #3
 8004efa:	e08e      	b.n	800501a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004efc:	4b4a      	ldr	r3, [pc, #296]	; (8005028 <HAL_RCC_OscConfig+0x47c>)
 8004efe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f00:	f003 0302 	and.w	r3, r3, #2
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d0ee      	beq.n	8004ee6 <HAL_RCC_OscConfig+0x33a>
 8004f08:	e014      	b.n	8004f34 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f0a:	f7ff fb2f 	bl	800456c <HAL_GetTick>
 8004f0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f10:	e00a      	b.n	8004f28 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f12:	f7ff fb2b 	bl	800456c <HAL_GetTick>
 8004f16:	4602      	mov	r2, r0
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	1ad3      	subs	r3, r2, r3
 8004f1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d901      	bls.n	8004f28 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004f24:	2303      	movs	r3, #3
 8004f26:	e078      	b.n	800501a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f28:	4b3f      	ldr	r3, [pc, #252]	; (8005028 <HAL_RCC_OscConfig+0x47c>)
 8004f2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f2c:	f003 0302 	and.w	r3, r3, #2
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d1ee      	bne.n	8004f12 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f34:	7dfb      	ldrb	r3, [r7, #23]
 8004f36:	2b01      	cmp	r3, #1
 8004f38:	d105      	bne.n	8004f46 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f3a:	4b3b      	ldr	r3, [pc, #236]	; (8005028 <HAL_RCC_OscConfig+0x47c>)
 8004f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f3e:	4a3a      	ldr	r2, [pc, #232]	; (8005028 <HAL_RCC_OscConfig+0x47c>)
 8004f40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f44:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	699b      	ldr	r3, [r3, #24]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d064      	beq.n	8005018 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004f4e:	4b36      	ldr	r3, [pc, #216]	; (8005028 <HAL_RCC_OscConfig+0x47c>)
 8004f50:	689b      	ldr	r3, [r3, #8]
 8004f52:	f003 030c 	and.w	r3, r3, #12
 8004f56:	2b08      	cmp	r3, #8
 8004f58:	d05c      	beq.n	8005014 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	699b      	ldr	r3, [r3, #24]
 8004f5e:	2b02      	cmp	r3, #2
 8004f60:	d141      	bne.n	8004fe6 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f62:	4b32      	ldr	r3, [pc, #200]	; (800502c <HAL_RCC_OscConfig+0x480>)
 8004f64:	2200      	movs	r2, #0
 8004f66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f68:	f7ff fb00 	bl	800456c <HAL_GetTick>
 8004f6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f6e:	e008      	b.n	8004f82 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f70:	f7ff fafc 	bl	800456c <HAL_GetTick>
 8004f74:	4602      	mov	r2, r0
 8004f76:	693b      	ldr	r3, [r7, #16]
 8004f78:	1ad3      	subs	r3, r2, r3
 8004f7a:	2b02      	cmp	r3, #2
 8004f7c:	d901      	bls.n	8004f82 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8004f7e:	2303      	movs	r3, #3
 8004f80:	e04b      	b.n	800501a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f82:	4b29      	ldr	r3, [pc, #164]	; (8005028 <HAL_RCC_OscConfig+0x47c>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d1f0      	bne.n	8004f70 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	69da      	ldr	r2, [r3, #28]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6a1b      	ldr	r3, [r3, #32]
 8004f96:	431a      	orrs	r2, r3
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f9c:	019b      	lsls	r3, r3, #6
 8004f9e:	431a      	orrs	r2, r3
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fa4:	085b      	lsrs	r3, r3, #1
 8004fa6:	3b01      	subs	r3, #1
 8004fa8:	041b      	lsls	r3, r3, #16
 8004faa:	431a      	orrs	r2, r3
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fb0:	061b      	lsls	r3, r3, #24
 8004fb2:	491d      	ldr	r1, [pc, #116]	; (8005028 <HAL_RCC_OscConfig+0x47c>)
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004fb8:	4b1c      	ldr	r3, [pc, #112]	; (800502c <HAL_RCC_OscConfig+0x480>)
 8004fba:	2201      	movs	r2, #1
 8004fbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fbe:	f7ff fad5 	bl	800456c <HAL_GetTick>
 8004fc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fc4:	e008      	b.n	8004fd8 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fc6:	f7ff fad1 	bl	800456c <HAL_GetTick>
 8004fca:	4602      	mov	r2, r0
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	1ad3      	subs	r3, r2, r3
 8004fd0:	2b02      	cmp	r3, #2
 8004fd2:	d901      	bls.n	8004fd8 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8004fd4:	2303      	movs	r3, #3
 8004fd6:	e020      	b.n	800501a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fd8:	4b13      	ldr	r3, [pc, #76]	; (8005028 <HAL_RCC_OscConfig+0x47c>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d0f0      	beq.n	8004fc6 <HAL_RCC_OscConfig+0x41a>
 8004fe4:	e018      	b.n	8005018 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fe6:	4b11      	ldr	r3, [pc, #68]	; (800502c <HAL_RCC_OscConfig+0x480>)
 8004fe8:	2200      	movs	r2, #0
 8004fea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fec:	f7ff fabe 	bl	800456c <HAL_GetTick>
 8004ff0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ff2:	e008      	b.n	8005006 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ff4:	f7ff faba 	bl	800456c <HAL_GetTick>
 8004ff8:	4602      	mov	r2, r0
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	1ad3      	subs	r3, r2, r3
 8004ffe:	2b02      	cmp	r3, #2
 8005000:	d901      	bls.n	8005006 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8005002:	2303      	movs	r3, #3
 8005004:	e009      	b.n	800501a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005006:	4b08      	ldr	r3, [pc, #32]	; (8005028 <HAL_RCC_OscConfig+0x47c>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800500e:	2b00      	cmp	r3, #0
 8005010:	d1f0      	bne.n	8004ff4 <HAL_RCC_OscConfig+0x448>
 8005012:	e001      	b.n	8005018 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8005014:	2301      	movs	r3, #1
 8005016:	e000      	b.n	800501a <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8005018:	2300      	movs	r3, #0
}
 800501a:	4618      	mov	r0, r3
 800501c:	3718      	adds	r7, #24
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}
 8005022:	bf00      	nop
 8005024:	40007000 	.word	0x40007000
 8005028:	40023800 	.word	0x40023800
 800502c:	42470060 	.word	0x42470060

08005030 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b084      	sub	sp, #16
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
 8005038:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d101      	bne.n	8005044 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005040:	2301      	movs	r3, #1
 8005042:	e0ca      	b.n	80051da <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005044:	4b67      	ldr	r3, [pc, #412]	; (80051e4 <HAL_RCC_ClockConfig+0x1b4>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f003 030f 	and.w	r3, r3, #15
 800504c:	683a      	ldr	r2, [r7, #0]
 800504e:	429a      	cmp	r2, r3
 8005050:	d90c      	bls.n	800506c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005052:	4b64      	ldr	r3, [pc, #400]	; (80051e4 <HAL_RCC_ClockConfig+0x1b4>)
 8005054:	683a      	ldr	r2, [r7, #0]
 8005056:	b2d2      	uxtb	r2, r2
 8005058:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800505a:	4b62      	ldr	r3, [pc, #392]	; (80051e4 <HAL_RCC_ClockConfig+0x1b4>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f003 030f 	and.w	r3, r3, #15
 8005062:	683a      	ldr	r2, [r7, #0]
 8005064:	429a      	cmp	r2, r3
 8005066:	d001      	beq.n	800506c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005068:	2301      	movs	r3, #1
 800506a:	e0b6      	b.n	80051da <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f003 0302 	and.w	r3, r3, #2
 8005074:	2b00      	cmp	r3, #0
 8005076:	d020      	beq.n	80050ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f003 0304 	and.w	r3, r3, #4
 8005080:	2b00      	cmp	r3, #0
 8005082:	d005      	beq.n	8005090 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005084:	4b58      	ldr	r3, [pc, #352]	; (80051e8 <HAL_RCC_ClockConfig+0x1b8>)
 8005086:	689b      	ldr	r3, [r3, #8]
 8005088:	4a57      	ldr	r2, [pc, #348]	; (80051e8 <HAL_RCC_ClockConfig+0x1b8>)
 800508a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800508e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f003 0308 	and.w	r3, r3, #8
 8005098:	2b00      	cmp	r3, #0
 800509a:	d005      	beq.n	80050a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800509c:	4b52      	ldr	r3, [pc, #328]	; (80051e8 <HAL_RCC_ClockConfig+0x1b8>)
 800509e:	689b      	ldr	r3, [r3, #8]
 80050a0:	4a51      	ldr	r2, [pc, #324]	; (80051e8 <HAL_RCC_ClockConfig+0x1b8>)
 80050a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80050a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050a8:	4b4f      	ldr	r3, [pc, #316]	; (80051e8 <HAL_RCC_ClockConfig+0x1b8>)
 80050aa:	689b      	ldr	r3, [r3, #8]
 80050ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	494c      	ldr	r1, [pc, #304]	; (80051e8 <HAL_RCC_ClockConfig+0x1b8>)
 80050b6:	4313      	orrs	r3, r2
 80050b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f003 0301 	and.w	r3, r3, #1
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d044      	beq.n	8005150 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	2b01      	cmp	r3, #1
 80050cc:	d107      	bne.n	80050de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050ce:	4b46      	ldr	r3, [pc, #280]	; (80051e8 <HAL_RCC_ClockConfig+0x1b8>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d119      	bne.n	800510e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	e07d      	b.n	80051da <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	2b02      	cmp	r3, #2
 80050e4:	d003      	beq.n	80050ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80050ea:	2b03      	cmp	r3, #3
 80050ec:	d107      	bne.n	80050fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050ee:	4b3e      	ldr	r3, [pc, #248]	; (80051e8 <HAL_RCC_ClockConfig+0x1b8>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d109      	bne.n	800510e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	e06d      	b.n	80051da <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050fe:	4b3a      	ldr	r3, [pc, #232]	; (80051e8 <HAL_RCC_ClockConfig+0x1b8>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f003 0302 	and.w	r3, r3, #2
 8005106:	2b00      	cmp	r3, #0
 8005108:	d101      	bne.n	800510e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800510a:	2301      	movs	r3, #1
 800510c:	e065      	b.n	80051da <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800510e:	4b36      	ldr	r3, [pc, #216]	; (80051e8 <HAL_RCC_ClockConfig+0x1b8>)
 8005110:	689b      	ldr	r3, [r3, #8]
 8005112:	f023 0203 	bic.w	r2, r3, #3
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	4933      	ldr	r1, [pc, #204]	; (80051e8 <HAL_RCC_ClockConfig+0x1b8>)
 800511c:	4313      	orrs	r3, r2
 800511e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005120:	f7ff fa24 	bl	800456c <HAL_GetTick>
 8005124:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005126:	e00a      	b.n	800513e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005128:	f7ff fa20 	bl	800456c <HAL_GetTick>
 800512c:	4602      	mov	r2, r0
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	1ad3      	subs	r3, r2, r3
 8005132:	f241 3288 	movw	r2, #5000	; 0x1388
 8005136:	4293      	cmp	r3, r2
 8005138:	d901      	bls.n	800513e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800513a:	2303      	movs	r3, #3
 800513c:	e04d      	b.n	80051da <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800513e:	4b2a      	ldr	r3, [pc, #168]	; (80051e8 <HAL_RCC_ClockConfig+0x1b8>)
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	f003 020c 	and.w	r2, r3, #12
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	009b      	lsls	r3, r3, #2
 800514c:	429a      	cmp	r2, r3
 800514e:	d1eb      	bne.n	8005128 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005150:	4b24      	ldr	r3, [pc, #144]	; (80051e4 <HAL_RCC_ClockConfig+0x1b4>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f003 030f 	and.w	r3, r3, #15
 8005158:	683a      	ldr	r2, [r7, #0]
 800515a:	429a      	cmp	r2, r3
 800515c:	d20c      	bcs.n	8005178 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800515e:	4b21      	ldr	r3, [pc, #132]	; (80051e4 <HAL_RCC_ClockConfig+0x1b4>)
 8005160:	683a      	ldr	r2, [r7, #0]
 8005162:	b2d2      	uxtb	r2, r2
 8005164:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005166:	4b1f      	ldr	r3, [pc, #124]	; (80051e4 <HAL_RCC_ClockConfig+0x1b4>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f003 030f 	and.w	r3, r3, #15
 800516e:	683a      	ldr	r2, [r7, #0]
 8005170:	429a      	cmp	r2, r3
 8005172:	d001      	beq.n	8005178 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005174:	2301      	movs	r3, #1
 8005176:	e030      	b.n	80051da <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f003 0304 	and.w	r3, r3, #4
 8005180:	2b00      	cmp	r3, #0
 8005182:	d008      	beq.n	8005196 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005184:	4b18      	ldr	r3, [pc, #96]	; (80051e8 <HAL_RCC_ClockConfig+0x1b8>)
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	68db      	ldr	r3, [r3, #12]
 8005190:	4915      	ldr	r1, [pc, #84]	; (80051e8 <HAL_RCC_ClockConfig+0x1b8>)
 8005192:	4313      	orrs	r3, r2
 8005194:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f003 0308 	and.w	r3, r3, #8
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d009      	beq.n	80051b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80051a2:	4b11      	ldr	r3, [pc, #68]	; (80051e8 <HAL_RCC_ClockConfig+0x1b8>)
 80051a4:	689b      	ldr	r3, [r3, #8]
 80051a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	691b      	ldr	r3, [r3, #16]
 80051ae:	00db      	lsls	r3, r3, #3
 80051b0:	490d      	ldr	r1, [pc, #52]	; (80051e8 <HAL_RCC_ClockConfig+0x1b8>)
 80051b2:	4313      	orrs	r3, r2
 80051b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80051b6:	f000 f885 	bl	80052c4 <HAL_RCC_GetSysClockFreq>
 80051ba:	4601      	mov	r1, r0
 80051bc:	4b0a      	ldr	r3, [pc, #40]	; (80051e8 <HAL_RCC_ClockConfig+0x1b8>)
 80051be:	689b      	ldr	r3, [r3, #8]
 80051c0:	091b      	lsrs	r3, r3, #4
 80051c2:	f003 030f 	and.w	r3, r3, #15
 80051c6:	4a09      	ldr	r2, [pc, #36]	; (80051ec <HAL_RCC_ClockConfig+0x1bc>)
 80051c8:	5cd3      	ldrb	r3, [r2, r3]
 80051ca:	fa21 f303 	lsr.w	r3, r1, r3
 80051ce:	4a08      	ldr	r2, [pc, #32]	; (80051f0 <HAL_RCC_ClockConfig+0x1c0>)
 80051d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 80051d2:	2000      	movs	r0, #0
 80051d4:	f7ff f986 	bl	80044e4 <HAL_InitTick>

  return HAL_OK;
 80051d8:	2300      	movs	r3, #0
}
 80051da:	4618      	mov	r0, r3
 80051dc:	3710      	adds	r7, #16
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}
 80051e2:	bf00      	nop
 80051e4:	40023c00 	.word	0x40023c00
 80051e8:	40023800 	.word	0x40023800
 80051ec:	080f19c4 	.word	0x080f19c4
 80051f0:	200005a0 	.word	0x200005a0

080051f4 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b08c      	sub	sp, #48	; 0x30
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	60f8      	str	r0, [r7, #12]
 80051fc:	60b9      	str	r1, [r7, #8]
 80051fe:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d129      	bne.n	800525a <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 8005206:	2300      	movs	r3, #0
 8005208:	61bb      	str	r3, [r7, #24]
 800520a:	4b2b      	ldr	r3, [pc, #172]	; (80052b8 <HAL_RCC_MCOConfig+0xc4>)
 800520c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800520e:	4a2a      	ldr	r2, [pc, #168]	; (80052b8 <HAL_RCC_MCOConfig+0xc4>)
 8005210:	f043 0301 	orr.w	r3, r3, #1
 8005214:	6313      	str	r3, [r2, #48]	; 0x30
 8005216:	4b28      	ldr	r3, [pc, #160]	; (80052b8 <HAL_RCC_MCOConfig+0xc4>)
 8005218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800521a:	f003 0301 	and.w	r3, r3, #1
 800521e:	61bb      	str	r3, [r7, #24]
 8005220:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8005222:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005226:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005228:	2302      	movs	r3, #2
 800522a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800522c:	2303      	movs	r3, #3
 800522e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005230:	2300      	movs	r3, #0
 8005232:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8005234:	2300      	movs	r3, #0
 8005236:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8005238:	f107 031c 	add.w	r3, r7, #28
 800523c:	4619      	mov	r1, r3
 800523e:	481f      	ldr	r0, [pc, #124]	; (80052bc <HAL_RCC_MCOConfig+0xc8>)
 8005240:	f7ff fae8 	bl	8004814 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8005244:	4b1c      	ldr	r3, [pc, #112]	; (80052b8 <HAL_RCC_MCOConfig+0xc4>)
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 800524c:	68b9      	ldr	r1, [r7, #8]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	430b      	orrs	r3, r1
 8005252:	4919      	ldr	r1, [pc, #100]	; (80052b8 <HAL_RCC_MCOConfig+0xc4>)
 8005254:	4313      	orrs	r3, r2
 8005256:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8005258:	e029      	b.n	80052ae <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 800525a:	2300      	movs	r3, #0
 800525c:	617b      	str	r3, [r7, #20]
 800525e:	4b16      	ldr	r3, [pc, #88]	; (80052b8 <HAL_RCC_MCOConfig+0xc4>)
 8005260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005262:	4a15      	ldr	r2, [pc, #84]	; (80052b8 <HAL_RCC_MCOConfig+0xc4>)
 8005264:	f043 0304 	orr.w	r3, r3, #4
 8005268:	6313      	str	r3, [r2, #48]	; 0x30
 800526a:	4b13      	ldr	r3, [pc, #76]	; (80052b8 <HAL_RCC_MCOConfig+0xc4>)
 800526c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800526e:	f003 0304 	and.w	r3, r3, #4
 8005272:	617b      	str	r3, [r7, #20]
 8005274:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8005276:	f44f 7300 	mov.w	r3, #512	; 0x200
 800527a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800527c:	2302      	movs	r3, #2
 800527e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005280:	2303      	movs	r3, #3
 8005282:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005284:	2300      	movs	r3, #0
 8005286:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8005288:	2300      	movs	r3, #0
 800528a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800528c:	f107 031c 	add.w	r3, r7, #28
 8005290:	4619      	mov	r1, r3
 8005292:	480b      	ldr	r0, [pc, #44]	; (80052c0 <HAL_RCC_MCOConfig+0xcc>)
 8005294:	f7ff fabe 	bl	8004814 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8005298:	4b07      	ldr	r3, [pc, #28]	; (80052b8 <HAL_RCC_MCOConfig+0xc4>)
 800529a:	689b      	ldr	r3, [r3, #8]
 800529c:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	00d9      	lsls	r1, r3, #3
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	430b      	orrs	r3, r1
 80052a8:	4903      	ldr	r1, [pc, #12]	; (80052b8 <HAL_RCC_MCOConfig+0xc4>)
 80052aa:	4313      	orrs	r3, r2
 80052ac:	608b      	str	r3, [r1, #8]
}
 80052ae:	bf00      	nop
 80052b0:	3730      	adds	r7, #48	; 0x30
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}
 80052b6:	bf00      	nop
 80052b8:	40023800 	.word	0x40023800
 80052bc:	40020000 	.word	0x40020000
 80052c0:	40020800 	.word	0x40020800

080052c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80052c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052c6:	b085      	sub	sp, #20
 80052c8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80052ca:	2300      	movs	r3, #0
 80052cc:	607b      	str	r3, [r7, #4]
 80052ce:	2300      	movs	r3, #0
 80052d0:	60fb      	str	r3, [r7, #12]
 80052d2:	2300      	movs	r3, #0
 80052d4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80052d6:	2300      	movs	r3, #0
 80052d8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80052da:	4b50      	ldr	r3, [pc, #320]	; (800541c <HAL_RCC_GetSysClockFreq+0x158>)
 80052dc:	689b      	ldr	r3, [r3, #8]
 80052de:	f003 030c 	and.w	r3, r3, #12
 80052e2:	2b04      	cmp	r3, #4
 80052e4:	d007      	beq.n	80052f6 <HAL_RCC_GetSysClockFreq+0x32>
 80052e6:	2b08      	cmp	r3, #8
 80052e8:	d008      	beq.n	80052fc <HAL_RCC_GetSysClockFreq+0x38>
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	f040 808d 	bne.w	800540a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80052f0:	4b4b      	ldr	r3, [pc, #300]	; (8005420 <HAL_RCC_GetSysClockFreq+0x15c>)
 80052f2:	60bb      	str	r3, [r7, #8]
       break;
 80052f4:	e08c      	b.n	8005410 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80052f6:	4b4b      	ldr	r3, [pc, #300]	; (8005424 <HAL_RCC_GetSysClockFreq+0x160>)
 80052f8:	60bb      	str	r3, [r7, #8]
      break;
 80052fa:	e089      	b.n	8005410 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80052fc:	4b47      	ldr	r3, [pc, #284]	; (800541c <HAL_RCC_GetSysClockFreq+0x158>)
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005304:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005306:	4b45      	ldr	r3, [pc, #276]	; (800541c <HAL_RCC_GetSysClockFreq+0x158>)
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800530e:	2b00      	cmp	r3, #0
 8005310:	d023      	beq.n	800535a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005312:	4b42      	ldr	r3, [pc, #264]	; (800541c <HAL_RCC_GetSysClockFreq+0x158>)
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	099b      	lsrs	r3, r3, #6
 8005318:	f04f 0400 	mov.w	r4, #0
 800531c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005320:	f04f 0200 	mov.w	r2, #0
 8005324:	ea03 0501 	and.w	r5, r3, r1
 8005328:	ea04 0602 	and.w	r6, r4, r2
 800532c:	4a3d      	ldr	r2, [pc, #244]	; (8005424 <HAL_RCC_GetSysClockFreq+0x160>)
 800532e:	fb02 f106 	mul.w	r1, r2, r6
 8005332:	2200      	movs	r2, #0
 8005334:	fb02 f205 	mul.w	r2, r2, r5
 8005338:	440a      	add	r2, r1
 800533a:	493a      	ldr	r1, [pc, #232]	; (8005424 <HAL_RCC_GetSysClockFreq+0x160>)
 800533c:	fba5 0101 	umull	r0, r1, r5, r1
 8005340:	1853      	adds	r3, r2, r1
 8005342:	4619      	mov	r1, r3
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	f04f 0400 	mov.w	r4, #0
 800534a:	461a      	mov	r2, r3
 800534c:	4623      	mov	r3, r4
 800534e:	f7fe fe8d 	bl	800406c <__aeabi_uldivmod>
 8005352:	4603      	mov	r3, r0
 8005354:	460c      	mov	r4, r1
 8005356:	60fb      	str	r3, [r7, #12]
 8005358:	e049      	b.n	80053ee <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800535a:	4b30      	ldr	r3, [pc, #192]	; (800541c <HAL_RCC_GetSysClockFreq+0x158>)
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	099b      	lsrs	r3, r3, #6
 8005360:	f04f 0400 	mov.w	r4, #0
 8005364:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005368:	f04f 0200 	mov.w	r2, #0
 800536c:	ea03 0501 	and.w	r5, r3, r1
 8005370:	ea04 0602 	and.w	r6, r4, r2
 8005374:	4629      	mov	r1, r5
 8005376:	4632      	mov	r2, r6
 8005378:	f04f 0300 	mov.w	r3, #0
 800537c:	f04f 0400 	mov.w	r4, #0
 8005380:	0154      	lsls	r4, r2, #5
 8005382:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005386:	014b      	lsls	r3, r1, #5
 8005388:	4619      	mov	r1, r3
 800538a:	4622      	mov	r2, r4
 800538c:	1b49      	subs	r1, r1, r5
 800538e:	eb62 0206 	sbc.w	r2, r2, r6
 8005392:	f04f 0300 	mov.w	r3, #0
 8005396:	f04f 0400 	mov.w	r4, #0
 800539a:	0194      	lsls	r4, r2, #6
 800539c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80053a0:	018b      	lsls	r3, r1, #6
 80053a2:	1a5b      	subs	r3, r3, r1
 80053a4:	eb64 0402 	sbc.w	r4, r4, r2
 80053a8:	f04f 0100 	mov.w	r1, #0
 80053ac:	f04f 0200 	mov.w	r2, #0
 80053b0:	00e2      	lsls	r2, r4, #3
 80053b2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80053b6:	00d9      	lsls	r1, r3, #3
 80053b8:	460b      	mov	r3, r1
 80053ba:	4614      	mov	r4, r2
 80053bc:	195b      	adds	r3, r3, r5
 80053be:	eb44 0406 	adc.w	r4, r4, r6
 80053c2:	f04f 0100 	mov.w	r1, #0
 80053c6:	f04f 0200 	mov.w	r2, #0
 80053ca:	02a2      	lsls	r2, r4, #10
 80053cc:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80053d0:	0299      	lsls	r1, r3, #10
 80053d2:	460b      	mov	r3, r1
 80053d4:	4614      	mov	r4, r2
 80053d6:	4618      	mov	r0, r3
 80053d8:	4621      	mov	r1, r4
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	f04f 0400 	mov.w	r4, #0
 80053e0:	461a      	mov	r2, r3
 80053e2:	4623      	mov	r3, r4
 80053e4:	f7fe fe42 	bl	800406c <__aeabi_uldivmod>
 80053e8:	4603      	mov	r3, r0
 80053ea:	460c      	mov	r4, r1
 80053ec:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80053ee:	4b0b      	ldr	r3, [pc, #44]	; (800541c <HAL_RCC_GetSysClockFreq+0x158>)
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	0c1b      	lsrs	r3, r3, #16
 80053f4:	f003 0303 	and.w	r3, r3, #3
 80053f8:	3301      	adds	r3, #1
 80053fa:	005b      	lsls	r3, r3, #1
 80053fc:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80053fe:	68fa      	ldr	r2, [r7, #12]
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	fbb2 f3f3 	udiv	r3, r2, r3
 8005406:	60bb      	str	r3, [r7, #8]
      break;
 8005408:	e002      	b.n	8005410 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800540a:	4b05      	ldr	r3, [pc, #20]	; (8005420 <HAL_RCC_GetSysClockFreq+0x15c>)
 800540c:	60bb      	str	r3, [r7, #8]
      break;
 800540e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005410:	68bb      	ldr	r3, [r7, #8]
}
 8005412:	4618      	mov	r0, r3
 8005414:	3714      	adds	r7, #20
 8005416:	46bd      	mov	sp, r7
 8005418:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800541a:	bf00      	nop
 800541c:	40023800 	.word	0x40023800
 8005420:	00f42400 	.word	0x00f42400
 8005424:	017d7840 	.word	0x017d7840

08005428 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005428:	b480      	push	{r7}
 800542a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800542c:	4b03      	ldr	r3, [pc, #12]	; (800543c <HAL_RCC_GetHCLKFreq+0x14>)
 800542e:	681b      	ldr	r3, [r3, #0]
}
 8005430:	4618      	mov	r0, r3
 8005432:	46bd      	mov	sp, r7
 8005434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005438:	4770      	bx	lr
 800543a:	bf00      	nop
 800543c:	200005a0 	.word	0x200005a0

08005440 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005444:	f7ff fff0 	bl	8005428 <HAL_RCC_GetHCLKFreq>
 8005448:	4601      	mov	r1, r0
 800544a:	4b05      	ldr	r3, [pc, #20]	; (8005460 <HAL_RCC_GetPCLK1Freq+0x20>)
 800544c:	689b      	ldr	r3, [r3, #8]
 800544e:	0a9b      	lsrs	r3, r3, #10
 8005450:	f003 0307 	and.w	r3, r3, #7
 8005454:	4a03      	ldr	r2, [pc, #12]	; (8005464 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005456:	5cd3      	ldrb	r3, [r2, r3]
 8005458:	fa21 f303 	lsr.w	r3, r1, r3
}
 800545c:	4618      	mov	r0, r3
 800545e:	bd80      	pop	{r7, pc}
 8005460:	40023800 	.word	0x40023800
 8005464:	080f19d4 	.word	0x080f19d4

08005468 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800546c:	f7ff ffdc 	bl	8005428 <HAL_RCC_GetHCLKFreq>
 8005470:	4601      	mov	r1, r0
 8005472:	4b05      	ldr	r3, [pc, #20]	; (8005488 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	0b5b      	lsrs	r3, r3, #13
 8005478:	f003 0307 	and.w	r3, r3, #7
 800547c:	4a03      	ldr	r2, [pc, #12]	; (800548c <HAL_RCC_GetPCLK2Freq+0x24>)
 800547e:	5cd3      	ldrb	r3, [r2, r3]
 8005480:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005484:	4618      	mov	r0, r3
 8005486:	bd80      	pop	{r7, pc}
 8005488:	40023800 	.word	0x40023800
 800548c:	080f19d4 	.word	0x080f19d4

08005490 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b082      	sub	sp, #8
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d101      	bne.n	80054a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800549e:	2301      	movs	r3, #1
 80054a0:	e056      	b.n	8005550 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2200      	movs	r2, #0
 80054a6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80054ae:	b2db      	uxtb	r3, r3
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d106      	bne.n	80054c2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2200      	movs	r2, #0
 80054b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80054bc:	6878      	ldr	r0, [r7, #4]
 80054be:	f002 fe0f 	bl	80080e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2202      	movs	r2, #2
 80054c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	681a      	ldr	r2, [r3, #0]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054d8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	685a      	ldr	r2, [r3, #4]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	689b      	ldr	r3, [r3, #8]
 80054e2:	431a      	orrs	r2, r3
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	68db      	ldr	r3, [r3, #12]
 80054e8:	431a      	orrs	r2, r3
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	691b      	ldr	r3, [r3, #16]
 80054ee:	431a      	orrs	r2, r3
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	695b      	ldr	r3, [r3, #20]
 80054f4:	431a      	orrs	r2, r3
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	699b      	ldr	r3, [r3, #24]
 80054fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054fe:	431a      	orrs	r2, r3
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	69db      	ldr	r3, [r3, #28]
 8005504:	431a      	orrs	r2, r3
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6a1b      	ldr	r3, [r3, #32]
 800550a:	ea42 0103 	orr.w	r1, r2, r3
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	430a      	orrs	r2, r1
 8005518:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	699b      	ldr	r3, [r3, #24]
 800551e:	0c1b      	lsrs	r3, r3, #16
 8005520:	f003 0104 	and.w	r1, r3, #4
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	430a      	orrs	r2, r1
 800552e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	69da      	ldr	r2, [r3, #28]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800553e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2200      	movs	r2, #0
 8005544:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2201      	movs	r2, #1
 800554a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800554e:	2300      	movs	r3, #0
}
 8005550:	4618      	mov	r0, r3
 8005552:	3708      	adds	r7, #8
 8005554:	46bd      	mov	sp, r7
 8005556:	bd80      	pop	{r7, pc}

08005558 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b088      	sub	sp, #32
 800555c:	af00      	add	r7, sp, #0
 800555e:	60f8      	str	r0, [r7, #12]
 8005560:	60b9      	str	r1, [r7, #8]
 8005562:	603b      	str	r3, [r7, #0]
 8005564:	4613      	mov	r3, r2
 8005566:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005568:	2300      	movs	r3, #0
 800556a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005572:	2b01      	cmp	r3, #1
 8005574:	d101      	bne.n	800557a <HAL_SPI_Transmit+0x22>
 8005576:	2302      	movs	r3, #2
 8005578:	e11e      	b.n	80057b8 <HAL_SPI_Transmit+0x260>
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2201      	movs	r2, #1
 800557e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005582:	f7fe fff3 	bl	800456c <HAL_GetTick>
 8005586:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005588:	88fb      	ldrh	r3, [r7, #6]
 800558a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005592:	b2db      	uxtb	r3, r3
 8005594:	2b01      	cmp	r3, #1
 8005596:	d002      	beq.n	800559e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005598:	2302      	movs	r3, #2
 800559a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800559c:	e103      	b.n	80057a6 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d002      	beq.n	80055aa <HAL_SPI_Transmit+0x52>
 80055a4:	88fb      	ldrh	r3, [r7, #6]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d102      	bne.n	80055b0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80055aa:	2301      	movs	r3, #1
 80055ac:	77fb      	strb	r3, [r7, #31]
    goto error;
 80055ae:	e0fa      	b.n	80057a6 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	2203      	movs	r2, #3
 80055b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	2200      	movs	r2, #0
 80055bc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	68ba      	ldr	r2, [r7, #8]
 80055c2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	88fa      	ldrh	r2, [r7, #6]
 80055c8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	88fa      	ldrh	r2, [r7, #6]
 80055ce:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	2200      	movs	r2, #0
 80055d4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2200      	movs	r2, #0
 80055da:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	2200      	movs	r2, #0
 80055e0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	2200      	movs	r2, #0
 80055e6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2200      	movs	r2, #0
 80055ec:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	689b      	ldr	r3, [r3, #8]
 80055f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055f6:	d107      	bne.n	8005608 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	681a      	ldr	r2, [r3, #0]
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005606:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005612:	2b40      	cmp	r3, #64	; 0x40
 8005614:	d007      	beq.n	8005626 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	681a      	ldr	r2, [r3, #0]
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005624:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	68db      	ldr	r3, [r3, #12]
 800562a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800562e:	d14b      	bne.n	80056c8 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d002      	beq.n	800563e <HAL_SPI_Transmit+0xe6>
 8005638:	8afb      	ldrh	r3, [r7, #22]
 800563a:	2b01      	cmp	r3, #1
 800563c:	d13e      	bne.n	80056bc <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005642:	881a      	ldrh	r2, [r3, #0]
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800564e:	1c9a      	adds	r2, r3, #2
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005658:	b29b      	uxth	r3, r3
 800565a:	3b01      	subs	r3, #1
 800565c:	b29a      	uxth	r2, r3
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005662:	e02b      	b.n	80056bc <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	689b      	ldr	r3, [r3, #8]
 800566a:	f003 0302 	and.w	r3, r3, #2
 800566e:	2b02      	cmp	r3, #2
 8005670:	d112      	bne.n	8005698 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005676:	881a      	ldrh	r2, [r3, #0]
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005682:	1c9a      	adds	r2, r3, #2
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800568c:	b29b      	uxth	r3, r3
 800568e:	3b01      	subs	r3, #1
 8005690:	b29a      	uxth	r2, r3
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	86da      	strh	r2, [r3, #54]	; 0x36
 8005696:	e011      	b.n	80056bc <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005698:	f7fe ff68 	bl	800456c <HAL_GetTick>
 800569c:	4602      	mov	r2, r0
 800569e:	69bb      	ldr	r3, [r7, #24]
 80056a0:	1ad3      	subs	r3, r2, r3
 80056a2:	683a      	ldr	r2, [r7, #0]
 80056a4:	429a      	cmp	r2, r3
 80056a6:	d803      	bhi.n	80056b0 <HAL_SPI_Transmit+0x158>
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056ae:	d102      	bne.n	80056b6 <HAL_SPI_Transmit+0x15e>
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d102      	bne.n	80056bc <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80056b6:	2303      	movs	r3, #3
 80056b8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80056ba:	e074      	b.n	80057a6 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056c0:	b29b      	uxth	r3, r3
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d1ce      	bne.n	8005664 <HAL_SPI_Transmit+0x10c>
 80056c6:	e04c      	b.n	8005762 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d002      	beq.n	80056d6 <HAL_SPI_Transmit+0x17e>
 80056d0:	8afb      	ldrh	r3, [r7, #22]
 80056d2:	2b01      	cmp	r3, #1
 80056d4:	d140      	bne.n	8005758 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	330c      	adds	r3, #12
 80056e0:	7812      	ldrb	r2, [r2, #0]
 80056e2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056e8:	1c5a      	adds	r2, r3, #1
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056f2:	b29b      	uxth	r3, r3
 80056f4:	3b01      	subs	r3, #1
 80056f6:	b29a      	uxth	r2, r3
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80056fc:	e02c      	b.n	8005758 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	f003 0302 	and.w	r3, r3, #2
 8005708:	2b02      	cmp	r3, #2
 800570a:	d113      	bne.n	8005734 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	330c      	adds	r3, #12
 8005716:	7812      	ldrb	r2, [r2, #0]
 8005718:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800571e:	1c5a      	adds	r2, r3, #1
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005728:	b29b      	uxth	r3, r3
 800572a:	3b01      	subs	r3, #1
 800572c:	b29a      	uxth	r2, r3
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	86da      	strh	r2, [r3, #54]	; 0x36
 8005732:	e011      	b.n	8005758 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005734:	f7fe ff1a 	bl	800456c <HAL_GetTick>
 8005738:	4602      	mov	r2, r0
 800573a:	69bb      	ldr	r3, [r7, #24]
 800573c:	1ad3      	subs	r3, r2, r3
 800573e:	683a      	ldr	r2, [r7, #0]
 8005740:	429a      	cmp	r2, r3
 8005742:	d803      	bhi.n	800574c <HAL_SPI_Transmit+0x1f4>
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	f1b3 3fff 	cmp.w	r3, #4294967295
 800574a:	d102      	bne.n	8005752 <HAL_SPI_Transmit+0x1fa>
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d102      	bne.n	8005758 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8005752:	2303      	movs	r3, #3
 8005754:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005756:	e026      	b.n	80057a6 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800575c:	b29b      	uxth	r3, r3
 800575e:	2b00      	cmp	r3, #0
 8005760:	d1cd      	bne.n	80056fe <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005762:	69ba      	ldr	r2, [r7, #24]
 8005764:	6839      	ldr	r1, [r7, #0]
 8005766:	68f8      	ldr	r0, [r7, #12]
 8005768:	f000 fba4 	bl	8005eb4 <SPI_EndRxTxTransaction>
 800576c:	4603      	mov	r3, r0
 800576e:	2b00      	cmp	r3, #0
 8005770:	d002      	beq.n	8005778 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	2220      	movs	r2, #32
 8005776:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	689b      	ldr	r3, [r3, #8]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d10a      	bne.n	8005796 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005780:	2300      	movs	r3, #0
 8005782:	613b      	str	r3, [r7, #16]
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	68db      	ldr	r3, [r3, #12]
 800578a:	613b      	str	r3, [r7, #16]
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	613b      	str	r3, [r7, #16]
 8005794:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800579a:	2b00      	cmp	r3, #0
 800579c:	d002      	beq.n	80057a4 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800579e:	2301      	movs	r3, #1
 80057a0:	77fb      	strb	r3, [r7, #31]
 80057a2:	e000      	b.n	80057a6 <HAL_SPI_Transmit+0x24e>
  }

error:
 80057a4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2201      	movs	r2, #1
 80057aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	2200      	movs	r2, #0
 80057b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80057b6:	7ffb      	ldrb	r3, [r7, #31]
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	3720      	adds	r7, #32
 80057bc:	46bd      	mov	sp, r7
 80057be:	bd80      	pop	{r7, pc}

080057c0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b088      	sub	sp, #32
 80057c4:	af02      	add	r7, sp, #8
 80057c6:	60f8      	str	r0, [r7, #12]
 80057c8:	60b9      	str	r1, [r7, #8]
 80057ca:	603b      	str	r3, [r7, #0]
 80057cc:	4613      	mov	r3, r2
 80057ce:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80057d0:	2300      	movs	r3, #0
 80057d2:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80057dc:	d112      	bne.n	8005804 <HAL_SPI_Receive+0x44>
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	689b      	ldr	r3, [r3, #8]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d10e      	bne.n	8005804 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	2204      	movs	r2, #4
 80057ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80057ee:	88fa      	ldrh	r2, [r7, #6]
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	9300      	str	r3, [sp, #0]
 80057f4:	4613      	mov	r3, r2
 80057f6:	68ba      	ldr	r2, [r7, #8]
 80057f8:	68b9      	ldr	r1, [r7, #8]
 80057fa:	68f8      	ldr	r0, [r7, #12]
 80057fc:	f000 f8e9 	bl	80059d2 <HAL_SPI_TransmitReceive>
 8005800:	4603      	mov	r3, r0
 8005802:	e0e2      	b.n	80059ca <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800580a:	2b01      	cmp	r3, #1
 800580c:	d101      	bne.n	8005812 <HAL_SPI_Receive+0x52>
 800580e:	2302      	movs	r3, #2
 8005810:	e0db      	b.n	80059ca <HAL_SPI_Receive+0x20a>
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	2201      	movs	r2, #1
 8005816:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800581a:	f7fe fea7 	bl	800456c <HAL_GetTick>
 800581e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005826:	b2db      	uxtb	r3, r3
 8005828:	2b01      	cmp	r3, #1
 800582a:	d002      	beq.n	8005832 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800582c:	2302      	movs	r3, #2
 800582e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005830:	e0c2      	b.n	80059b8 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d002      	beq.n	800583e <HAL_SPI_Receive+0x7e>
 8005838:	88fb      	ldrh	r3, [r7, #6]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d102      	bne.n	8005844 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800583e:	2301      	movs	r3, #1
 8005840:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005842:	e0b9      	b.n	80059b8 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2204      	movs	r2, #4
 8005848:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	2200      	movs	r2, #0
 8005850:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	68ba      	ldr	r2, [r7, #8]
 8005856:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	88fa      	ldrh	r2, [r7, #6]
 800585c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	88fa      	ldrh	r2, [r7, #6]
 8005862:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	2200      	movs	r2, #0
 8005868:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	2200      	movs	r2, #0
 800586e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2200      	movs	r2, #0
 8005874:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	2200      	movs	r2, #0
 800587a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2200      	movs	r2, #0
 8005880:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	689b      	ldr	r3, [r3, #8]
 8005886:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800588a:	d107      	bne.n	800589c <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	681a      	ldr	r2, [r3, #0]
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800589a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058a6:	2b40      	cmp	r3, #64	; 0x40
 80058a8:	d007      	beq.n	80058ba <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	681a      	ldr	r2, [r3, #0]
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80058b8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	68db      	ldr	r3, [r3, #12]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d162      	bne.n	8005988 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80058c2:	e02e      	b.n	8005922 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	689b      	ldr	r3, [r3, #8]
 80058ca:	f003 0301 	and.w	r3, r3, #1
 80058ce:	2b01      	cmp	r3, #1
 80058d0:	d115      	bne.n	80058fe <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f103 020c 	add.w	r2, r3, #12
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058de:	7812      	ldrb	r2, [r2, #0]
 80058e0:	b2d2      	uxtb	r2, r2
 80058e2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058e8:	1c5a      	adds	r2, r3, #1
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058f2:	b29b      	uxth	r3, r3
 80058f4:	3b01      	subs	r3, #1
 80058f6:	b29a      	uxth	r2, r3
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	87da      	strh	r2, [r3, #62]	; 0x3e
 80058fc:	e011      	b.n	8005922 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80058fe:	f7fe fe35 	bl	800456c <HAL_GetTick>
 8005902:	4602      	mov	r2, r0
 8005904:	693b      	ldr	r3, [r7, #16]
 8005906:	1ad3      	subs	r3, r2, r3
 8005908:	683a      	ldr	r2, [r7, #0]
 800590a:	429a      	cmp	r2, r3
 800590c:	d803      	bhi.n	8005916 <HAL_SPI_Receive+0x156>
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005914:	d102      	bne.n	800591c <HAL_SPI_Receive+0x15c>
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d102      	bne.n	8005922 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800591c:	2303      	movs	r3, #3
 800591e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005920:	e04a      	b.n	80059b8 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005926:	b29b      	uxth	r3, r3
 8005928:	2b00      	cmp	r3, #0
 800592a:	d1cb      	bne.n	80058c4 <HAL_SPI_Receive+0x104>
 800592c:	e031      	b.n	8005992 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	689b      	ldr	r3, [r3, #8]
 8005934:	f003 0301 	and.w	r3, r3, #1
 8005938:	2b01      	cmp	r3, #1
 800593a:	d113      	bne.n	8005964 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	68da      	ldr	r2, [r3, #12]
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005946:	b292      	uxth	r2, r2
 8005948:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800594e:	1c9a      	adds	r2, r3, #2
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005958:	b29b      	uxth	r3, r3
 800595a:	3b01      	subs	r3, #1
 800595c:	b29a      	uxth	r2, r3
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005962:	e011      	b.n	8005988 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005964:	f7fe fe02 	bl	800456c <HAL_GetTick>
 8005968:	4602      	mov	r2, r0
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	1ad3      	subs	r3, r2, r3
 800596e:	683a      	ldr	r2, [r7, #0]
 8005970:	429a      	cmp	r2, r3
 8005972:	d803      	bhi.n	800597c <HAL_SPI_Receive+0x1bc>
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	f1b3 3fff 	cmp.w	r3, #4294967295
 800597a:	d102      	bne.n	8005982 <HAL_SPI_Receive+0x1c2>
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d102      	bne.n	8005988 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8005982:	2303      	movs	r3, #3
 8005984:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005986:	e017      	b.n	80059b8 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800598c:	b29b      	uxth	r3, r3
 800598e:	2b00      	cmp	r3, #0
 8005990:	d1cd      	bne.n	800592e <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005992:	693a      	ldr	r2, [r7, #16]
 8005994:	6839      	ldr	r1, [r7, #0]
 8005996:	68f8      	ldr	r0, [r7, #12]
 8005998:	f000 fa27 	bl	8005dea <SPI_EndRxTransaction>
 800599c:	4603      	mov	r3, r0
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d002      	beq.n	80059a8 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2220      	movs	r2, #32
 80059a6:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d002      	beq.n	80059b6 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 80059b0:	2301      	movs	r3, #1
 80059b2:	75fb      	strb	r3, [r7, #23]
 80059b4:	e000      	b.n	80059b8 <HAL_SPI_Receive+0x1f8>
  }

error :
 80059b6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2201      	movs	r2, #1
 80059bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2200      	movs	r2, #0
 80059c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80059c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	3718      	adds	r7, #24
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}

080059d2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80059d2:	b580      	push	{r7, lr}
 80059d4:	b08c      	sub	sp, #48	; 0x30
 80059d6:	af00      	add	r7, sp, #0
 80059d8:	60f8      	str	r0, [r7, #12]
 80059da:	60b9      	str	r1, [r7, #8]
 80059dc:	607a      	str	r2, [r7, #4]
 80059de:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80059e0:	2301      	movs	r3, #1
 80059e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80059e4:	2300      	movs	r3, #0
 80059e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80059f0:	2b01      	cmp	r3, #1
 80059f2:	d101      	bne.n	80059f8 <HAL_SPI_TransmitReceive+0x26>
 80059f4:	2302      	movs	r3, #2
 80059f6:	e18a      	b.n	8005d0e <HAL_SPI_TransmitReceive+0x33c>
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2201      	movs	r2, #1
 80059fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005a00:	f7fe fdb4 	bl	800456c <HAL_GetTick>
 8005a04:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005a0c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005a16:	887b      	ldrh	r3, [r7, #2]
 8005a18:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005a1a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005a1e:	2b01      	cmp	r3, #1
 8005a20:	d00f      	beq.n	8005a42 <HAL_SPI_TransmitReceive+0x70>
 8005a22:	69fb      	ldr	r3, [r7, #28]
 8005a24:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a28:	d107      	bne.n	8005a3a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	689b      	ldr	r3, [r3, #8]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d103      	bne.n	8005a3a <HAL_SPI_TransmitReceive+0x68>
 8005a32:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005a36:	2b04      	cmp	r3, #4
 8005a38:	d003      	beq.n	8005a42 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005a3a:	2302      	movs	r3, #2
 8005a3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005a40:	e15b      	b.n	8005cfa <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d005      	beq.n	8005a54 <HAL_SPI_TransmitReceive+0x82>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d002      	beq.n	8005a54 <HAL_SPI_TransmitReceive+0x82>
 8005a4e:	887b      	ldrh	r3, [r7, #2]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d103      	bne.n	8005a5c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005a54:	2301      	movs	r3, #1
 8005a56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005a5a:	e14e      	b.n	8005cfa <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005a62:	b2db      	uxtb	r3, r3
 8005a64:	2b04      	cmp	r3, #4
 8005a66:	d003      	beq.n	8005a70 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2205      	movs	r2, #5
 8005a6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2200      	movs	r2, #0
 8005a74:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	687a      	ldr	r2, [r7, #4]
 8005a7a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	887a      	ldrh	r2, [r7, #2]
 8005a80:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	887a      	ldrh	r2, [r7, #2]
 8005a86:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	68ba      	ldr	r2, [r7, #8]
 8005a8c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	887a      	ldrh	r2, [r7, #2]
 8005a92:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	887a      	ldrh	r2, [r7, #2]
 8005a98:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ab0:	2b40      	cmp	r3, #64	; 0x40
 8005ab2:	d007      	beq.n	8005ac4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	681a      	ldr	r2, [r3, #0]
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ac2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	68db      	ldr	r3, [r3, #12]
 8005ac8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005acc:	d178      	bne.n	8005bc0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d002      	beq.n	8005adc <HAL_SPI_TransmitReceive+0x10a>
 8005ad6:	8b7b      	ldrh	r3, [r7, #26]
 8005ad8:	2b01      	cmp	r3, #1
 8005ada:	d166      	bne.n	8005baa <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ae0:	881a      	ldrh	r2, [r3, #0]
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aec:	1c9a      	adds	r2, r3, #2
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005af6:	b29b      	uxth	r3, r3
 8005af8:	3b01      	subs	r3, #1
 8005afa:	b29a      	uxth	r2, r3
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b00:	e053      	b.n	8005baa <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	689b      	ldr	r3, [r3, #8]
 8005b08:	f003 0302 	and.w	r3, r3, #2
 8005b0c:	2b02      	cmp	r3, #2
 8005b0e:	d11b      	bne.n	8005b48 <HAL_SPI_TransmitReceive+0x176>
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b14:	b29b      	uxth	r3, r3
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d016      	beq.n	8005b48 <HAL_SPI_TransmitReceive+0x176>
 8005b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	d113      	bne.n	8005b48 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b24:	881a      	ldrh	r2, [r3, #0]
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b30:	1c9a      	adds	r2, r3, #2
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b3a:	b29b      	uxth	r3, r3
 8005b3c:	3b01      	subs	r3, #1
 8005b3e:	b29a      	uxth	r2, r3
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005b44:	2300      	movs	r3, #0
 8005b46:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	689b      	ldr	r3, [r3, #8]
 8005b4e:	f003 0301 	and.w	r3, r3, #1
 8005b52:	2b01      	cmp	r3, #1
 8005b54:	d119      	bne.n	8005b8a <HAL_SPI_TransmitReceive+0x1b8>
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b5a:	b29b      	uxth	r3, r3
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d014      	beq.n	8005b8a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	68da      	ldr	r2, [r3, #12]
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b6a:	b292      	uxth	r2, r2
 8005b6c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b72:	1c9a      	adds	r2, r3, #2
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b7c:	b29b      	uxth	r3, r3
 8005b7e:	3b01      	subs	r3, #1
 8005b80:	b29a      	uxth	r2, r3
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005b86:	2301      	movs	r3, #1
 8005b88:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005b8a:	f7fe fcef 	bl	800456c <HAL_GetTick>
 8005b8e:	4602      	mov	r2, r0
 8005b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b92:	1ad3      	subs	r3, r2, r3
 8005b94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b96:	429a      	cmp	r2, r3
 8005b98:	d807      	bhi.n	8005baa <HAL_SPI_TransmitReceive+0x1d8>
 8005b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ba0:	d003      	beq.n	8005baa <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005ba2:	2303      	movs	r3, #3
 8005ba4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005ba8:	e0a7      	b.n	8005cfa <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005bae:	b29b      	uxth	r3, r3
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d1a6      	bne.n	8005b02 <HAL_SPI_TransmitReceive+0x130>
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bb8:	b29b      	uxth	r3, r3
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d1a1      	bne.n	8005b02 <HAL_SPI_TransmitReceive+0x130>
 8005bbe:	e07c      	b.n	8005cba <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d002      	beq.n	8005bce <HAL_SPI_TransmitReceive+0x1fc>
 8005bc8:	8b7b      	ldrh	r3, [r7, #26]
 8005bca:	2b01      	cmp	r3, #1
 8005bcc:	d16b      	bne.n	8005ca6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	330c      	adds	r3, #12
 8005bd8:	7812      	ldrb	r2, [r2, #0]
 8005bda:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005be0:	1c5a      	adds	r2, r3, #1
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005bea:	b29b      	uxth	r3, r3
 8005bec:	3b01      	subs	r3, #1
 8005bee:	b29a      	uxth	r2, r3
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005bf4:	e057      	b.n	8005ca6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	689b      	ldr	r3, [r3, #8]
 8005bfc:	f003 0302 	and.w	r3, r3, #2
 8005c00:	2b02      	cmp	r3, #2
 8005c02:	d11c      	bne.n	8005c3e <HAL_SPI_TransmitReceive+0x26c>
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c08:	b29b      	uxth	r3, r3
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d017      	beq.n	8005c3e <HAL_SPI_TransmitReceive+0x26c>
 8005c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c10:	2b01      	cmp	r3, #1
 8005c12:	d114      	bne.n	8005c3e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	330c      	adds	r3, #12
 8005c1e:	7812      	ldrb	r2, [r2, #0]
 8005c20:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c26:	1c5a      	adds	r2, r3, #1
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c30:	b29b      	uxth	r3, r3
 8005c32:	3b01      	subs	r3, #1
 8005c34:	b29a      	uxth	r2, r3
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	689b      	ldr	r3, [r3, #8]
 8005c44:	f003 0301 	and.w	r3, r3, #1
 8005c48:	2b01      	cmp	r3, #1
 8005c4a:	d119      	bne.n	8005c80 <HAL_SPI_TransmitReceive+0x2ae>
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c50:	b29b      	uxth	r3, r3
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d014      	beq.n	8005c80 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	68da      	ldr	r2, [r3, #12]
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c60:	b2d2      	uxtb	r2, r2
 8005c62:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c68:	1c5a      	adds	r2, r3, #1
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c72:	b29b      	uxth	r3, r3
 8005c74:	3b01      	subs	r3, #1
 8005c76:	b29a      	uxth	r2, r3
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005c80:	f7fe fc74 	bl	800456c <HAL_GetTick>
 8005c84:	4602      	mov	r2, r0
 8005c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c88:	1ad3      	subs	r3, r2, r3
 8005c8a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c8c:	429a      	cmp	r2, r3
 8005c8e:	d803      	bhi.n	8005c98 <HAL_SPI_TransmitReceive+0x2c6>
 8005c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c96:	d102      	bne.n	8005c9e <HAL_SPI_TransmitReceive+0x2cc>
 8005c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d103      	bne.n	8005ca6 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005c9e:	2303      	movs	r3, #3
 8005ca0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005ca4:	e029      	b.n	8005cfa <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005caa:	b29b      	uxth	r3, r3
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d1a2      	bne.n	8005bf6 <HAL_SPI_TransmitReceive+0x224>
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cb4:	b29b      	uxth	r3, r3
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d19d      	bne.n	8005bf6 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005cba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cbc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005cbe:	68f8      	ldr	r0, [r7, #12]
 8005cc0:	f000 f8f8 	bl	8005eb4 <SPI_EndRxTxTransaction>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d006      	beq.n	8005cd8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005cca:	2301      	movs	r3, #1
 8005ccc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2220      	movs	r2, #32
 8005cd4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005cd6:	e010      	b.n	8005cfa <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	689b      	ldr	r3, [r3, #8]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d10b      	bne.n	8005cf8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	617b      	str	r3, [r7, #20]
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	68db      	ldr	r3, [r3, #12]
 8005cea:	617b      	str	r3, [r7, #20]
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	689b      	ldr	r3, [r3, #8]
 8005cf2:	617b      	str	r3, [r7, #20]
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	e000      	b.n	8005cfa <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005cf8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	2201      	movs	r2, #1
 8005cfe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	2200      	movs	r2, #0
 8005d06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005d0a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	3730      	adds	r7, #48	; 0x30
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bd80      	pop	{r7, pc}

08005d16 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005d16:	b580      	push	{r7, lr}
 8005d18:	b084      	sub	sp, #16
 8005d1a:	af00      	add	r7, sp, #0
 8005d1c:	60f8      	str	r0, [r7, #12]
 8005d1e:	60b9      	str	r1, [r7, #8]
 8005d20:	603b      	str	r3, [r7, #0]
 8005d22:	4613      	mov	r3, r2
 8005d24:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005d26:	e04c      	b.n	8005dc2 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d2e:	d048      	beq.n	8005dc2 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005d30:	f7fe fc1c 	bl	800456c <HAL_GetTick>
 8005d34:	4602      	mov	r2, r0
 8005d36:	69bb      	ldr	r3, [r7, #24]
 8005d38:	1ad3      	subs	r3, r2, r3
 8005d3a:	683a      	ldr	r2, [r7, #0]
 8005d3c:	429a      	cmp	r2, r3
 8005d3e:	d902      	bls.n	8005d46 <SPI_WaitFlagStateUntilTimeout+0x30>
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d13d      	bne.n	8005dc2 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	685a      	ldr	r2, [r3, #4]
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005d54:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	685b      	ldr	r3, [r3, #4]
 8005d5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d5e:	d111      	bne.n	8005d84 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	689b      	ldr	r3, [r3, #8]
 8005d64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d68:	d004      	beq.n	8005d74 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	689b      	ldr	r3, [r3, #8]
 8005d6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d72:	d107      	bne.n	8005d84 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	681a      	ldr	r2, [r3, #0]
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d82:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d8c:	d10f      	bne.n	8005dae <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	681a      	ldr	r2, [r3, #0]
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005d9c:	601a      	str	r2, [r3, #0]
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	681a      	ldr	r2, [r3, #0]
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005dac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	2201      	movs	r2, #1
 8005db2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	2200      	movs	r2, #0
 8005dba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005dbe:	2303      	movs	r3, #3
 8005dc0:	e00f      	b.n	8005de2 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	689a      	ldr	r2, [r3, #8]
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	4013      	ands	r3, r2
 8005dcc:	68ba      	ldr	r2, [r7, #8]
 8005dce:	429a      	cmp	r2, r3
 8005dd0:	bf0c      	ite	eq
 8005dd2:	2301      	moveq	r3, #1
 8005dd4:	2300      	movne	r3, #0
 8005dd6:	b2db      	uxtb	r3, r3
 8005dd8:	461a      	mov	r2, r3
 8005dda:	79fb      	ldrb	r3, [r7, #7]
 8005ddc:	429a      	cmp	r2, r3
 8005dde:	d1a3      	bne.n	8005d28 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8005de0:	2300      	movs	r3, #0
}
 8005de2:	4618      	mov	r0, r3
 8005de4:	3710      	adds	r7, #16
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bd80      	pop	{r7, pc}

08005dea <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005dea:	b580      	push	{r7, lr}
 8005dec:	b086      	sub	sp, #24
 8005dee:	af02      	add	r7, sp, #8
 8005df0:	60f8      	str	r0, [r7, #12]
 8005df2:	60b9      	str	r1, [r7, #8]
 8005df4:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	685b      	ldr	r3, [r3, #4]
 8005dfa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005dfe:	d111      	bne.n	8005e24 <SPI_EndRxTransaction+0x3a>
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	689b      	ldr	r3, [r3, #8]
 8005e04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e08:	d004      	beq.n	8005e14 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	689b      	ldr	r3, [r3, #8]
 8005e0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e12:	d107      	bne.n	8005e24 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	681a      	ldr	r2, [r3, #0]
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e22:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e2c:	d12a      	bne.n	8005e84 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	689b      	ldr	r3, [r3, #8]
 8005e32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e36:	d012      	beq.n	8005e5e <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	9300      	str	r3, [sp, #0]
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	2180      	movs	r1, #128	; 0x80
 8005e42:	68f8      	ldr	r0, [r7, #12]
 8005e44:	f7ff ff67 	bl	8005d16 <SPI_WaitFlagStateUntilTimeout>
 8005e48:	4603      	mov	r3, r0
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d02d      	beq.n	8005eaa <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e52:	f043 0220 	orr.w	r2, r3, #32
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005e5a:	2303      	movs	r3, #3
 8005e5c:	e026      	b.n	8005eac <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	9300      	str	r3, [sp, #0]
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	2200      	movs	r2, #0
 8005e66:	2101      	movs	r1, #1
 8005e68:	68f8      	ldr	r0, [r7, #12]
 8005e6a:	f7ff ff54 	bl	8005d16 <SPI_WaitFlagStateUntilTimeout>
 8005e6e:	4603      	mov	r3, r0
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d01a      	beq.n	8005eaa <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e78:	f043 0220 	orr.w	r2, r3, #32
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005e80:	2303      	movs	r3, #3
 8005e82:	e013      	b.n	8005eac <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	9300      	str	r3, [sp, #0]
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	2101      	movs	r1, #1
 8005e8e:	68f8      	ldr	r0, [r7, #12]
 8005e90:	f7ff ff41 	bl	8005d16 <SPI_WaitFlagStateUntilTimeout>
 8005e94:	4603      	mov	r3, r0
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d007      	beq.n	8005eaa <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e9e:	f043 0220 	orr.w	r2, r3, #32
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005ea6:	2303      	movs	r3, #3
 8005ea8:	e000      	b.n	8005eac <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005eaa:	2300      	movs	r3, #0
}
 8005eac:	4618      	mov	r0, r3
 8005eae:	3710      	adds	r7, #16
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bd80      	pop	{r7, pc}

08005eb4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b088      	sub	sp, #32
 8005eb8:	af02      	add	r7, sp, #8
 8005eba:	60f8      	str	r0, [r7, #12]
 8005ebc:	60b9      	str	r1, [r7, #8]
 8005ebe:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005ec0:	4b1b      	ldr	r3, [pc, #108]	; (8005f30 <SPI_EndRxTxTransaction+0x7c>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a1b      	ldr	r2, [pc, #108]	; (8005f34 <SPI_EndRxTxTransaction+0x80>)
 8005ec6:	fba2 2303 	umull	r2, r3, r2, r3
 8005eca:	0d5b      	lsrs	r3, r3, #21
 8005ecc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005ed0:	fb02 f303 	mul.w	r3, r2, r3
 8005ed4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ede:	d112      	bne.n	8005f06 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	9300      	str	r3, [sp, #0]
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	2180      	movs	r1, #128	; 0x80
 8005eea:	68f8      	ldr	r0, [r7, #12]
 8005eec:	f7ff ff13 	bl	8005d16 <SPI_WaitFlagStateUntilTimeout>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d016      	beq.n	8005f24 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005efa:	f043 0220 	orr.w	r2, r3, #32
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005f02:	2303      	movs	r3, #3
 8005f04:	e00f      	b.n	8005f26 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d00a      	beq.n	8005f22 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005f0c:	697b      	ldr	r3, [r7, #20]
 8005f0e:	3b01      	subs	r3, #1
 8005f10:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	689b      	ldr	r3, [r3, #8]
 8005f18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f1c:	2b80      	cmp	r3, #128	; 0x80
 8005f1e:	d0f2      	beq.n	8005f06 <SPI_EndRxTxTransaction+0x52>
 8005f20:	e000      	b.n	8005f24 <SPI_EndRxTxTransaction+0x70>
        break;
 8005f22:	bf00      	nop
  }

  return HAL_OK;
 8005f24:	2300      	movs	r3, #0
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	3718      	adds	r7, #24
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd80      	pop	{r7, pc}
 8005f2e:	bf00      	nop
 8005f30:	200005a0 	.word	0x200005a0
 8005f34:	165e9f81 	.word	0x165e9f81

08005f38 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b084      	sub	sp, #16
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	60f8      	str	r0, [r7, #12]
 8005f40:	60b9      	str	r1, [r7, #8]
 8005f42:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d101      	bne.n	8005f4e <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	e034      	b.n	8005fb8 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8005f54:	b2db      	uxtb	r3, r3
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d106      	bne.n	8005f68 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8005f62:	68f8      	ldr	r0, [r7, #12]
 8005f64:	f002 f9ca 	bl	80082fc <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681a      	ldr	r2, [r3, #0]
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	3308      	adds	r3, #8
 8005f70:	4619      	mov	r1, r3
 8005f72:	4610      	mov	r0, r2
 8005f74:	f000 fcb8 	bl	80068e8 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	6818      	ldr	r0, [r3, #0]
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	689b      	ldr	r3, [r3, #8]
 8005f80:	461a      	mov	r2, r3
 8005f82:	68b9      	ldr	r1, [r7, #8]
 8005f84:	f000 fd02 	bl	800698c <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	6858      	ldr	r0, [r3, #4]
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	689a      	ldr	r2, [r3, #8]
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f94:	6879      	ldr	r1, [r7, #4]
 8005f96:	f000 fd37 	bl	8006a08 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	68fa      	ldr	r2, [r7, #12]
 8005fa0:	6892      	ldr	r2, [r2, #8]
 8005fa2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	68fa      	ldr	r2, [r7, #12]
 8005fac:	6892      	ldr	r2, [r2, #8]
 8005fae:	f041 0101 	orr.w	r1, r1, #1
 8005fb2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8005fb6:	2300      	movs	r3, #0
}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	3710      	adds	r7, #16
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bd80      	pop	{r7, pc}

08005fc0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b082      	sub	sp, #8
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d101      	bne.n	8005fd2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005fce:	2301      	movs	r3, #1
 8005fd0:	e03f      	b.n	8006052 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005fd8:	b2db      	uxtb	r3, r3
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d106      	bne.n	8005fec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f002 f8e2 	bl	80081b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2224      	movs	r2, #36	; 0x24
 8005ff0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	68da      	ldr	r2, [r3, #12]
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006002:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f000 fa65 	bl	80064d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	691a      	ldr	r2, [r3, #16]
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006018:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	695a      	ldr	r2, [r3, #20]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006028:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	68da      	ldr	r2, [r3, #12]
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006038:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2200      	movs	r2, #0
 800603e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2220      	movs	r2, #32
 8006044:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2220      	movs	r2, #32
 800604c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8006050:	2300      	movs	r3, #0
}
 8006052:	4618      	mov	r0, r3
 8006054:	3708      	adds	r7, #8
 8006056:	46bd      	mov	sp, r7
 8006058:	bd80      	pop	{r7, pc}
	...

0800605c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b088      	sub	sp, #32
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	68db      	ldr	r3, [r3, #12]
 8006072:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	695b      	ldr	r3, [r3, #20]
 800607a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800607c:	2300      	movs	r3, #0
 800607e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8006080:	2300      	movs	r3, #0
 8006082:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006084:	69fb      	ldr	r3, [r7, #28]
 8006086:	f003 030f 	and.w	r3, r3, #15
 800608a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800608c:	693b      	ldr	r3, [r7, #16]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d10d      	bne.n	80060ae <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006092:	69fb      	ldr	r3, [r7, #28]
 8006094:	f003 0320 	and.w	r3, r3, #32
 8006098:	2b00      	cmp	r3, #0
 800609a:	d008      	beq.n	80060ae <HAL_UART_IRQHandler+0x52>
 800609c:	69bb      	ldr	r3, [r7, #24]
 800609e:	f003 0320 	and.w	r3, r3, #32
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d003      	beq.n	80060ae <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	f000 f992 	bl	80063d0 <UART_Receive_IT>
      return;
 80060ac:	e0cc      	b.n	8006248 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	f000 80ab 	beq.w	800620c <HAL_UART_IRQHandler+0x1b0>
 80060b6:	697b      	ldr	r3, [r7, #20]
 80060b8:	f003 0301 	and.w	r3, r3, #1
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d105      	bne.n	80060cc <HAL_UART_IRQHandler+0x70>
 80060c0:	69bb      	ldr	r3, [r7, #24]
 80060c2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	f000 80a0 	beq.w	800620c <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80060cc:	69fb      	ldr	r3, [r7, #28]
 80060ce:	f003 0301 	and.w	r3, r3, #1
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d00a      	beq.n	80060ec <HAL_UART_IRQHandler+0x90>
 80060d6:	69bb      	ldr	r3, [r7, #24]
 80060d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d005      	beq.n	80060ec <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060e4:	f043 0201 	orr.w	r2, r3, #1
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80060ec:	69fb      	ldr	r3, [r7, #28]
 80060ee:	f003 0304 	and.w	r3, r3, #4
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d00a      	beq.n	800610c <HAL_UART_IRQHandler+0xb0>
 80060f6:	697b      	ldr	r3, [r7, #20]
 80060f8:	f003 0301 	and.w	r3, r3, #1
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d005      	beq.n	800610c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006104:	f043 0202 	orr.w	r2, r3, #2
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800610c:	69fb      	ldr	r3, [r7, #28]
 800610e:	f003 0302 	and.w	r3, r3, #2
 8006112:	2b00      	cmp	r3, #0
 8006114:	d00a      	beq.n	800612c <HAL_UART_IRQHandler+0xd0>
 8006116:	697b      	ldr	r3, [r7, #20]
 8006118:	f003 0301 	and.w	r3, r3, #1
 800611c:	2b00      	cmp	r3, #0
 800611e:	d005      	beq.n	800612c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006124:	f043 0204 	orr.w	r2, r3, #4
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800612c:	69fb      	ldr	r3, [r7, #28]
 800612e:	f003 0308 	and.w	r3, r3, #8
 8006132:	2b00      	cmp	r3, #0
 8006134:	d00a      	beq.n	800614c <HAL_UART_IRQHandler+0xf0>
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	f003 0301 	and.w	r3, r3, #1
 800613c:	2b00      	cmp	r3, #0
 800613e:	d005      	beq.n	800614c <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006144:	f043 0208 	orr.w	r2, r3, #8
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006150:	2b00      	cmp	r3, #0
 8006152:	d078      	beq.n	8006246 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006154:	69fb      	ldr	r3, [r7, #28]
 8006156:	f003 0320 	and.w	r3, r3, #32
 800615a:	2b00      	cmp	r3, #0
 800615c:	d007      	beq.n	800616e <HAL_UART_IRQHandler+0x112>
 800615e:	69bb      	ldr	r3, [r7, #24]
 8006160:	f003 0320 	and.w	r3, r3, #32
 8006164:	2b00      	cmp	r3, #0
 8006166:	d002      	beq.n	800616e <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8006168:	6878      	ldr	r0, [r7, #4]
 800616a:	f000 f931 	bl	80063d0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	695b      	ldr	r3, [r3, #20]
 8006174:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006178:	2b40      	cmp	r3, #64	; 0x40
 800617a:	bf0c      	ite	eq
 800617c:	2301      	moveq	r3, #1
 800617e:	2300      	movne	r3, #0
 8006180:	b2db      	uxtb	r3, r3
 8006182:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006188:	f003 0308 	and.w	r3, r3, #8
 800618c:	2b00      	cmp	r3, #0
 800618e:	d102      	bne.n	8006196 <HAL_UART_IRQHandler+0x13a>
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d031      	beq.n	80061fa <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f000 f87a 	bl	8006290 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	695b      	ldr	r3, [r3, #20]
 80061a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061a6:	2b40      	cmp	r3, #64	; 0x40
 80061a8:	d123      	bne.n	80061f2 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	695a      	ldr	r2, [r3, #20]
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80061b8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d013      	beq.n	80061ea <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061c6:	4a22      	ldr	r2, [pc, #136]	; (8006250 <HAL_UART_IRQHandler+0x1f4>)
 80061c8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061ce:	4618      	mov	r0, r3
 80061d0:	f7fe fafe 	bl	80047d0 <HAL_DMA_Abort_IT>
 80061d4:	4603      	mov	r3, r0
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d016      	beq.n	8006208 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061e0:	687a      	ldr	r2, [r7, #4]
 80061e2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80061e4:	4610      	mov	r0, r2
 80061e6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061e8:	e00e      	b.n	8006208 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f000 f846 	bl	800627c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061f0:	e00a      	b.n	8006208 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	f000 f842 	bl	800627c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061f8:	e006      	b.n	8006208 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80061fa:	6878      	ldr	r0, [r7, #4]
 80061fc:	f000 f83e 	bl	800627c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2200      	movs	r2, #0
 8006204:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8006206:	e01e      	b.n	8006246 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006208:	bf00      	nop
    return;
 800620a:	e01c      	b.n	8006246 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800620c:	69fb      	ldr	r3, [r7, #28]
 800620e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006212:	2b00      	cmp	r3, #0
 8006214:	d008      	beq.n	8006228 <HAL_UART_IRQHandler+0x1cc>
 8006216:	69bb      	ldr	r3, [r7, #24]
 8006218:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800621c:	2b00      	cmp	r3, #0
 800621e:	d003      	beq.n	8006228 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	f000 f867 	bl	80062f4 <UART_Transmit_IT>
    return;
 8006226:	e00f      	b.n	8006248 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006228:	69fb      	ldr	r3, [r7, #28]
 800622a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800622e:	2b00      	cmp	r3, #0
 8006230:	d00a      	beq.n	8006248 <HAL_UART_IRQHandler+0x1ec>
 8006232:	69bb      	ldr	r3, [r7, #24]
 8006234:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006238:	2b00      	cmp	r3, #0
 800623a:	d005      	beq.n	8006248 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 800623c:	6878      	ldr	r0, [r7, #4]
 800623e:	f000 f8af 	bl	80063a0 <UART_EndTransmit_IT>
    return;
 8006242:	bf00      	nop
 8006244:	e000      	b.n	8006248 <HAL_UART_IRQHandler+0x1ec>
    return;
 8006246:	bf00      	nop
  }
}
 8006248:	3720      	adds	r7, #32
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}
 800624e:	bf00      	nop
 8006250:	080062cd 	.word	0x080062cd

08006254 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006254:	b480      	push	{r7}
 8006256:	b083      	sub	sp, #12
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800625c:	bf00      	nop
 800625e:	370c      	adds	r7, #12
 8006260:	46bd      	mov	sp, r7
 8006262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006266:	4770      	bx	lr

08006268 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006268:	b480      	push	{r7}
 800626a:	b083      	sub	sp, #12
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006270:	bf00      	nop
 8006272:	370c      	adds	r7, #12
 8006274:	46bd      	mov	sp, r7
 8006276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627a:	4770      	bx	lr

0800627c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800627c:	b480      	push	{r7}
 800627e:	b083      	sub	sp, #12
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006284:	bf00      	nop
 8006286:	370c      	adds	r7, #12
 8006288:	46bd      	mov	sp, r7
 800628a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628e:	4770      	bx	lr

08006290 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006290:	b480      	push	{r7}
 8006292:	b083      	sub	sp, #12
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	68da      	ldr	r2, [r3, #12]
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80062a6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	695a      	ldr	r2, [r3, #20]
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f022 0201 	bic.w	r2, r2, #1
 80062b6:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2220      	movs	r2, #32
 80062bc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80062c0:	bf00      	nop
 80062c2:	370c      	adds	r7, #12
 80062c4:	46bd      	mov	sp, r7
 80062c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ca:	4770      	bx	lr

080062cc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b084      	sub	sp, #16
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062d8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	2200      	movs	r2, #0
 80062de:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	2200      	movs	r2, #0
 80062e4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80062e6:	68f8      	ldr	r0, [r7, #12]
 80062e8:	f7ff ffc8 	bl	800627c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80062ec:	bf00      	nop
 80062ee:	3710      	adds	r7, #16
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bd80      	pop	{r7, pc}

080062f4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80062f4:	b480      	push	{r7}
 80062f6:	b085      	sub	sp, #20
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006302:	b2db      	uxtb	r3, r3
 8006304:	2b21      	cmp	r3, #33	; 0x21
 8006306:	d144      	bne.n	8006392 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	689b      	ldr	r3, [r3, #8]
 800630c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006310:	d11a      	bne.n	8006348 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6a1b      	ldr	r3, [r3, #32]
 8006316:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	881b      	ldrh	r3, [r3, #0]
 800631c:	461a      	mov	r2, r3
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006326:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	691b      	ldr	r3, [r3, #16]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d105      	bne.n	800633c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6a1b      	ldr	r3, [r3, #32]
 8006334:	1c9a      	adds	r2, r3, #2
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	621a      	str	r2, [r3, #32]
 800633a:	e00e      	b.n	800635a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6a1b      	ldr	r3, [r3, #32]
 8006340:	1c5a      	adds	r2, r3, #1
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	621a      	str	r2, [r3, #32]
 8006346:	e008      	b.n	800635a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6a1b      	ldr	r3, [r3, #32]
 800634c:	1c59      	adds	r1, r3, #1
 800634e:	687a      	ldr	r2, [r7, #4]
 8006350:	6211      	str	r1, [r2, #32]
 8006352:	781a      	ldrb	r2, [r3, #0]
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800635e:	b29b      	uxth	r3, r3
 8006360:	3b01      	subs	r3, #1
 8006362:	b29b      	uxth	r3, r3
 8006364:	687a      	ldr	r2, [r7, #4]
 8006366:	4619      	mov	r1, r3
 8006368:	84d1      	strh	r1, [r2, #38]	; 0x26
 800636a:	2b00      	cmp	r3, #0
 800636c:	d10f      	bne.n	800638e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	68da      	ldr	r2, [r3, #12]
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800637c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	68da      	ldr	r2, [r3, #12]
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800638c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800638e:	2300      	movs	r3, #0
 8006390:	e000      	b.n	8006394 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8006392:	2302      	movs	r3, #2
  }
}
 8006394:	4618      	mov	r0, r3
 8006396:	3714      	adds	r7, #20
 8006398:	46bd      	mov	sp, r7
 800639a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639e:	4770      	bx	lr

080063a0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b082      	sub	sp, #8
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	68da      	ldr	r2, [r3, #12]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80063b6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2220      	movs	r2, #32
 80063bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	f7ff ff47 	bl	8006254 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80063c6:	2300      	movs	r3, #0
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	3708      	adds	r7, #8
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}

080063d0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b084      	sub	sp, #16
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80063de:	b2db      	uxtb	r3, r3
 80063e0:	2b22      	cmp	r3, #34	; 0x22
 80063e2:	d171      	bne.n	80064c8 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	689b      	ldr	r3, [r3, #8]
 80063e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063ec:	d123      	bne.n	8006436 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063f2:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	691b      	ldr	r3, [r3, #16]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d10e      	bne.n	800641a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	685b      	ldr	r3, [r3, #4]
 8006402:	b29b      	uxth	r3, r3
 8006404:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006408:	b29a      	uxth	r2, r3
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006412:	1c9a      	adds	r2, r3, #2
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	629a      	str	r2, [r3, #40]	; 0x28
 8006418:	e029      	b.n	800646e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	685b      	ldr	r3, [r3, #4]
 8006420:	b29b      	uxth	r3, r3
 8006422:	b2db      	uxtb	r3, r3
 8006424:	b29a      	uxth	r2, r3
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800642e:	1c5a      	adds	r2, r3, #1
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	629a      	str	r2, [r3, #40]	; 0x28
 8006434:	e01b      	b.n	800646e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	691b      	ldr	r3, [r3, #16]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d10a      	bne.n	8006454 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	6858      	ldr	r0, [r3, #4]
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006448:	1c59      	adds	r1, r3, #1
 800644a:	687a      	ldr	r2, [r7, #4]
 800644c:	6291      	str	r1, [r2, #40]	; 0x28
 800644e:	b2c2      	uxtb	r2, r0
 8006450:	701a      	strb	r2, [r3, #0]
 8006452:	e00c      	b.n	800646e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	685b      	ldr	r3, [r3, #4]
 800645a:	b2da      	uxtb	r2, r3
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006460:	1c58      	adds	r0, r3, #1
 8006462:	6879      	ldr	r1, [r7, #4]
 8006464:	6288      	str	r0, [r1, #40]	; 0x28
 8006466:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800646a:	b2d2      	uxtb	r2, r2
 800646c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006472:	b29b      	uxth	r3, r3
 8006474:	3b01      	subs	r3, #1
 8006476:	b29b      	uxth	r3, r3
 8006478:	687a      	ldr	r2, [r7, #4]
 800647a:	4619      	mov	r1, r3
 800647c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800647e:	2b00      	cmp	r3, #0
 8006480:	d120      	bne.n	80064c4 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	68da      	ldr	r2, [r3, #12]
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f022 0220 	bic.w	r2, r2, #32
 8006490:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	68da      	ldr	r2, [r3, #12]
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80064a0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	695a      	ldr	r2, [r3, #20]
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f022 0201 	bic.w	r2, r2, #1
 80064b0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2220      	movs	r2, #32
 80064b6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f7ff fed4 	bl	8006268 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80064c0:	2300      	movs	r3, #0
 80064c2:	e002      	b.n	80064ca <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80064c4:	2300      	movs	r3, #0
 80064c6:	e000      	b.n	80064ca <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80064c8:	2302      	movs	r3, #2
  }
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	3710      	adds	r7, #16
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}
	...

080064d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80064d4:	b5b0      	push	{r4, r5, r7, lr}
 80064d6:	b084      	sub	sp, #16
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	691b      	ldr	r3, [r3, #16]
 80064e2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	68da      	ldr	r2, [r3, #12]
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	430a      	orrs	r2, r1
 80064f0:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	689a      	ldr	r2, [r3, #8]
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	691b      	ldr	r3, [r3, #16]
 80064fa:	431a      	orrs	r2, r3
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	695b      	ldr	r3, [r3, #20]
 8006500:	431a      	orrs	r2, r3
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	69db      	ldr	r3, [r3, #28]
 8006506:	4313      	orrs	r3, r2
 8006508:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	68db      	ldr	r3, [r3, #12]
 8006510:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006514:	f023 030c 	bic.w	r3, r3, #12
 8006518:	687a      	ldr	r2, [r7, #4]
 800651a:	6812      	ldr	r2, [r2, #0]
 800651c:	68f9      	ldr	r1, [r7, #12]
 800651e:	430b      	orrs	r3, r1
 8006520:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	695b      	ldr	r3, [r3, #20]
 8006528:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	699a      	ldr	r2, [r3, #24]
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	430a      	orrs	r2, r1
 8006536:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	69db      	ldr	r3, [r3, #28]
 800653c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006540:	f040 80e4 	bne.w	800670c <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	4aab      	ldr	r2, [pc, #684]	; (80067f8 <UART_SetConfig+0x324>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d004      	beq.n	8006558 <UART_SetConfig+0x84>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4aaa      	ldr	r2, [pc, #680]	; (80067fc <UART_SetConfig+0x328>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d16c      	bne.n	8006632 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8006558:	f7fe ff86 	bl	8005468 <HAL_RCC_GetPCLK2Freq>
 800655c:	4602      	mov	r2, r0
 800655e:	4613      	mov	r3, r2
 8006560:	009b      	lsls	r3, r3, #2
 8006562:	4413      	add	r3, r2
 8006564:	009a      	lsls	r2, r3, #2
 8006566:	441a      	add	r2, r3
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	685b      	ldr	r3, [r3, #4]
 800656c:	005b      	lsls	r3, r3, #1
 800656e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006572:	4aa3      	ldr	r2, [pc, #652]	; (8006800 <UART_SetConfig+0x32c>)
 8006574:	fba2 2303 	umull	r2, r3, r2, r3
 8006578:	095b      	lsrs	r3, r3, #5
 800657a:	011c      	lsls	r4, r3, #4
 800657c:	f7fe ff74 	bl	8005468 <HAL_RCC_GetPCLK2Freq>
 8006580:	4602      	mov	r2, r0
 8006582:	4613      	mov	r3, r2
 8006584:	009b      	lsls	r3, r3, #2
 8006586:	4413      	add	r3, r2
 8006588:	009a      	lsls	r2, r3, #2
 800658a:	441a      	add	r2, r3
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	685b      	ldr	r3, [r3, #4]
 8006590:	005b      	lsls	r3, r3, #1
 8006592:	fbb2 f5f3 	udiv	r5, r2, r3
 8006596:	f7fe ff67 	bl	8005468 <HAL_RCC_GetPCLK2Freq>
 800659a:	4602      	mov	r2, r0
 800659c:	4613      	mov	r3, r2
 800659e:	009b      	lsls	r3, r3, #2
 80065a0:	4413      	add	r3, r2
 80065a2:	009a      	lsls	r2, r3, #2
 80065a4:	441a      	add	r2, r3
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	685b      	ldr	r3, [r3, #4]
 80065aa:	005b      	lsls	r3, r3, #1
 80065ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80065b0:	4a93      	ldr	r2, [pc, #588]	; (8006800 <UART_SetConfig+0x32c>)
 80065b2:	fba2 2303 	umull	r2, r3, r2, r3
 80065b6:	095b      	lsrs	r3, r3, #5
 80065b8:	2264      	movs	r2, #100	; 0x64
 80065ba:	fb02 f303 	mul.w	r3, r2, r3
 80065be:	1aeb      	subs	r3, r5, r3
 80065c0:	00db      	lsls	r3, r3, #3
 80065c2:	3332      	adds	r3, #50	; 0x32
 80065c4:	4a8e      	ldr	r2, [pc, #568]	; (8006800 <UART_SetConfig+0x32c>)
 80065c6:	fba2 2303 	umull	r2, r3, r2, r3
 80065ca:	095b      	lsrs	r3, r3, #5
 80065cc:	005b      	lsls	r3, r3, #1
 80065ce:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80065d2:	441c      	add	r4, r3
 80065d4:	f7fe ff48 	bl	8005468 <HAL_RCC_GetPCLK2Freq>
 80065d8:	4602      	mov	r2, r0
 80065da:	4613      	mov	r3, r2
 80065dc:	009b      	lsls	r3, r3, #2
 80065de:	4413      	add	r3, r2
 80065e0:	009a      	lsls	r2, r3, #2
 80065e2:	441a      	add	r2, r3
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	685b      	ldr	r3, [r3, #4]
 80065e8:	005b      	lsls	r3, r3, #1
 80065ea:	fbb2 f5f3 	udiv	r5, r2, r3
 80065ee:	f7fe ff3b 	bl	8005468 <HAL_RCC_GetPCLK2Freq>
 80065f2:	4602      	mov	r2, r0
 80065f4:	4613      	mov	r3, r2
 80065f6:	009b      	lsls	r3, r3, #2
 80065f8:	4413      	add	r3, r2
 80065fa:	009a      	lsls	r2, r3, #2
 80065fc:	441a      	add	r2, r3
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	685b      	ldr	r3, [r3, #4]
 8006602:	005b      	lsls	r3, r3, #1
 8006604:	fbb2 f3f3 	udiv	r3, r2, r3
 8006608:	4a7d      	ldr	r2, [pc, #500]	; (8006800 <UART_SetConfig+0x32c>)
 800660a:	fba2 2303 	umull	r2, r3, r2, r3
 800660e:	095b      	lsrs	r3, r3, #5
 8006610:	2264      	movs	r2, #100	; 0x64
 8006612:	fb02 f303 	mul.w	r3, r2, r3
 8006616:	1aeb      	subs	r3, r5, r3
 8006618:	00db      	lsls	r3, r3, #3
 800661a:	3332      	adds	r3, #50	; 0x32
 800661c:	4a78      	ldr	r2, [pc, #480]	; (8006800 <UART_SetConfig+0x32c>)
 800661e:	fba2 2303 	umull	r2, r3, r2, r3
 8006622:	095b      	lsrs	r3, r3, #5
 8006624:	f003 0207 	and.w	r2, r3, #7
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4422      	add	r2, r4
 800662e:	609a      	str	r2, [r3, #8]
 8006630:	e154      	b.n	80068dc <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8006632:	f7fe ff05 	bl	8005440 <HAL_RCC_GetPCLK1Freq>
 8006636:	4602      	mov	r2, r0
 8006638:	4613      	mov	r3, r2
 800663a:	009b      	lsls	r3, r3, #2
 800663c:	4413      	add	r3, r2
 800663e:	009a      	lsls	r2, r3, #2
 8006640:	441a      	add	r2, r3
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	685b      	ldr	r3, [r3, #4]
 8006646:	005b      	lsls	r3, r3, #1
 8006648:	fbb2 f3f3 	udiv	r3, r2, r3
 800664c:	4a6c      	ldr	r2, [pc, #432]	; (8006800 <UART_SetConfig+0x32c>)
 800664e:	fba2 2303 	umull	r2, r3, r2, r3
 8006652:	095b      	lsrs	r3, r3, #5
 8006654:	011c      	lsls	r4, r3, #4
 8006656:	f7fe fef3 	bl	8005440 <HAL_RCC_GetPCLK1Freq>
 800665a:	4602      	mov	r2, r0
 800665c:	4613      	mov	r3, r2
 800665e:	009b      	lsls	r3, r3, #2
 8006660:	4413      	add	r3, r2
 8006662:	009a      	lsls	r2, r3, #2
 8006664:	441a      	add	r2, r3
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	685b      	ldr	r3, [r3, #4]
 800666a:	005b      	lsls	r3, r3, #1
 800666c:	fbb2 f5f3 	udiv	r5, r2, r3
 8006670:	f7fe fee6 	bl	8005440 <HAL_RCC_GetPCLK1Freq>
 8006674:	4602      	mov	r2, r0
 8006676:	4613      	mov	r3, r2
 8006678:	009b      	lsls	r3, r3, #2
 800667a:	4413      	add	r3, r2
 800667c:	009a      	lsls	r2, r3, #2
 800667e:	441a      	add	r2, r3
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	685b      	ldr	r3, [r3, #4]
 8006684:	005b      	lsls	r3, r3, #1
 8006686:	fbb2 f3f3 	udiv	r3, r2, r3
 800668a:	4a5d      	ldr	r2, [pc, #372]	; (8006800 <UART_SetConfig+0x32c>)
 800668c:	fba2 2303 	umull	r2, r3, r2, r3
 8006690:	095b      	lsrs	r3, r3, #5
 8006692:	2264      	movs	r2, #100	; 0x64
 8006694:	fb02 f303 	mul.w	r3, r2, r3
 8006698:	1aeb      	subs	r3, r5, r3
 800669a:	00db      	lsls	r3, r3, #3
 800669c:	3332      	adds	r3, #50	; 0x32
 800669e:	4a58      	ldr	r2, [pc, #352]	; (8006800 <UART_SetConfig+0x32c>)
 80066a0:	fba2 2303 	umull	r2, r3, r2, r3
 80066a4:	095b      	lsrs	r3, r3, #5
 80066a6:	005b      	lsls	r3, r3, #1
 80066a8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80066ac:	441c      	add	r4, r3
 80066ae:	f7fe fec7 	bl	8005440 <HAL_RCC_GetPCLK1Freq>
 80066b2:	4602      	mov	r2, r0
 80066b4:	4613      	mov	r3, r2
 80066b6:	009b      	lsls	r3, r3, #2
 80066b8:	4413      	add	r3, r2
 80066ba:	009a      	lsls	r2, r3, #2
 80066bc:	441a      	add	r2, r3
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	685b      	ldr	r3, [r3, #4]
 80066c2:	005b      	lsls	r3, r3, #1
 80066c4:	fbb2 f5f3 	udiv	r5, r2, r3
 80066c8:	f7fe feba 	bl	8005440 <HAL_RCC_GetPCLK1Freq>
 80066cc:	4602      	mov	r2, r0
 80066ce:	4613      	mov	r3, r2
 80066d0:	009b      	lsls	r3, r3, #2
 80066d2:	4413      	add	r3, r2
 80066d4:	009a      	lsls	r2, r3, #2
 80066d6:	441a      	add	r2, r3
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	685b      	ldr	r3, [r3, #4]
 80066dc:	005b      	lsls	r3, r3, #1
 80066de:	fbb2 f3f3 	udiv	r3, r2, r3
 80066e2:	4a47      	ldr	r2, [pc, #284]	; (8006800 <UART_SetConfig+0x32c>)
 80066e4:	fba2 2303 	umull	r2, r3, r2, r3
 80066e8:	095b      	lsrs	r3, r3, #5
 80066ea:	2264      	movs	r2, #100	; 0x64
 80066ec:	fb02 f303 	mul.w	r3, r2, r3
 80066f0:	1aeb      	subs	r3, r5, r3
 80066f2:	00db      	lsls	r3, r3, #3
 80066f4:	3332      	adds	r3, #50	; 0x32
 80066f6:	4a42      	ldr	r2, [pc, #264]	; (8006800 <UART_SetConfig+0x32c>)
 80066f8:	fba2 2303 	umull	r2, r3, r2, r3
 80066fc:	095b      	lsrs	r3, r3, #5
 80066fe:	f003 0207 	and.w	r2, r3, #7
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	4422      	add	r2, r4
 8006708:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 800670a:	e0e7      	b.n	80068dc <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4a39      	ldr	r2, [pc, #228]	; (80067f8 <UART_SetConfig+0x324>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d004      	beq.n	8006720 <UART_SetConfig+0x24c>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	4a38      	ldr	r2, [pc, #224]	; (80067fc <UART_SetConfig+0x328>)
 800671c:	4293      	cmp	r3, r2
 800671e:	d171      	bne.n	8006804 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8006720:	f7fe fea2 	bl	8005468 <HAL_RCC_GetPCLK2Freq>
 8006724:	4602      	mov	r2, r0
 8006726:	4613      	mov	r3, r2
 8006728:	009b      	lsls	r3, r3, #2
 800672a:	4413      	add	r3, r2
 800672c:	009a      	lsls	r2, r3, #2
 800672e:	441a      	add	r2, r3
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	685b      	ldr	r3, [r3, #4]
 8006734:	009b      	lsls	r3, r3, #2
 8006736:	fbb2 f3f3 	udiv	r3, r2, r3
 800673a:	4a31      	ldr	r2, [pc, #196]	; (8006800 <UART_SetConfig+0x32c>)
 800673c:	fba2 2303 	umull	r2, r3, r2, r3
 8006740:	095b      	lsrs	r3, r3, #5
 8006742:	011c      	lsls	r4, r3, #4
 8006744:	f7fe fe90 	bl	8005468 <HAL_RCC_GetPCLK2Freq>
 8006748:	4602      	mov	r2, r0
 800674a:	4613      	mov	r3, r2
 800674c:	009b      	lsls	r3, r3, #2
 800674e:	4413      	add	r3, r2
 8006750:	009a      	lsls	r2, r3, #2
 8006752:	441a      	add	r2, r3
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	685b      	ldr	r3, [r3, #4]
 8006758:	009b      	lsls	r3, r3, #2
 800675a:	fbb2 f5f3 	udiv	r5, r2, r3
 800675e:	f7fe fe83 	bl	8005468 <HAL_RCC_GetPCLK2Freq>
 8006762:	4602      	mov	r2, r0
 8006764:	4613      	mov	r3, r2
 8006766:	009b      	lsls	r3, r3, #2
 8006768:	4413      	add	r3, r2
 800676a:	009a      	lsls	r2, r3, #2
 800676c:	441a      	add	r2, r3
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	685b      	ldr	r3, [r3, #4]
 8006772:	009b      	lsls	r3, r3, #2
 8006774:	fbb2 f3f3 	udiv	r3, r2, r3
 8006778:	4a21      	ldr	r2, [pc, #132]	; (8006800 <UART_SetConfig+0x32c>)
 800677a:	fba2 2303 	umull	r2, r3, r2, r3
 800677e:	095b      	lsrs	r3, r3, #5
 8006780:	2264      	movs	r2, #100	; 0x64
 8006782:	fb02 f303 	mul.w	r3, r2, r3
 8006786:	1aeb      	subs	r3, r5, r3
 8006788:	011b      	lsls	r3, r3, #4
 800678a:	3332      	adds	r3, #50	; 0x32
 800678c:	4a1c      	ldr	r2, [pc, #112]	; (8006800 <UART_SetConfig+0x32c>)
 800678e:	fba2 2303 	umull	r2, r3, r2, r3
 8006792:	095b      	lsrs	r3, r3, #5
 8006794:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006798:	441c      	add	r4, r3
 800679a:	f7fe fe65 	bl	8005468 <HAL_RCC_GetPCLK2Freq>
 800679e:	4602      	mov	r2, r0
 80067a0:	4613      	mov	r3, r2
 80067a2:	009b      	lsls	r3, r3, #2
 80067a4:	4413      	add	r3, r2
 80067a6:	009a      	lsls	r2, r3, #2
 80067a8:	441a      	add	r2, r3
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	685b      	ldr	r3, [r3, #4]
 80067ae:	009b      	lsls	r3, r3, #2
 80067b0:	fbb2 f5f3 	udiv	r5, r2, r3
 80067b4:	f7fe fe58 	bl	8005468 <HAL_RCC_GetPCLK2Freq>
 80067b8:	4602      	mov	r2, r0
 80067ba:	4613      	mov	r3, r2
 80067bc:	009b      	lsls	r3, r3, #2
 80067be:	4413      	add	r3, r2
 80067c0:	009a      	lsls	r2, r3, #2
 80067c2:	441a      	add	r2, r3
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	685b      	ldr	r3, [r3, #4]
 80067c8:	009b      	lsls	r3, r3, #2
 80067ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80067ce:	4a0c      	ldr	r2, [pc, #48]	; (8006800 <UART_SetConfig+0x32c>)
 80067d0:	fba2 2303 	umull	r2, r3, r2, r3
 80067d4:	095b      	lsrs	r3, r3, #5
 80067d6:	2264      	movs	r2, #100	; 0x64
 80067d8:	fb02 f303 	mul.w	r3, r2, r3
 80067dc:	1aeb      	subs	r3, r5, r3
 80067de:	011b      	lsls	r3, r3, #4
 80067e0:	3332      	adds	r3, #50	; 0x32
 80067e2:	4a07      	ldr	r2, [pc, #28]	; (8006800 <UART_SetConfig+0x32c>)
 80067e4:	fba2 2303 	umull	r2, r3, r2, r3
 80067e8:	095b      	lsrs	r3, r3, #5
 80067ea:	f003 020f 	and.w	r2, r3, #15
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	4422      	add	r2, r4
 80067f4:	609a      	str	r2, [r3, #8]
 80067f6:	e071      	b.n	80068dc <UART_SetConfig+0x408>
 80067f8:	40011000 	.word	0x40011000
 80067fc:	40011400 	.word	0x40011400
 8006800:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8006804:	f7fe fe1c 	bl	8005440 <HAL_RCC_GetPCLK1Freq>
 8006808:	4602      	mov	r2, r0
 800680a:	4613      	mov	r3, r2
 800680c:	009b      	lsls	r3, r3, #2
 800680e:	4413      	add	r3, r2
 8006810:	009a      	lsls	r2, r3, #2
 8006812:	441a      	add	r2, r3
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	685b      	ldr	r3, [r3, #4]
 8006818:	009b      	lsls	r3, r3, #2
 800681a:	fbb2 f3f3 	udiv	r3, r2, r3
 800681e:	4a31      	ldr	r2, [pc, #196]	; (80068e4 <UART_SetConfig+0x410>)
 8006820:	fba2 2303 	umull	r2, r3, r2, r3
 8006824:	095b      	lsrs	r3, r3, #5
 8006826:	011c      	lsls	r4, r3, #4
 8006828:	f7fe fe0a 	bl	8005440 <HAL_RCC_GetPCLK1Freq>
 800682c:	4602      	mov	r2, r0
 800682e:	4613      	mov	r3, r2
 8006830:	009b      	lsls	r3, r3, #2
 8006832:	4413      	add	r3, r2
 8006834:	009a      	lsls	r2, r3, #2
 8006836:	441a      	add	r2, r3
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	685b      	ldr	r3, [r3, #4]
 800683c:	009b      	lsls	r3, r3, #2
 800683e:	fbb2 f5f3 	udiv	r5, r2, r3
 8006842:	f7fe fdfd 	bl	8005440 <HAL_RCC_GetPCLK1Freq>
 8006846:	4602      	mov	r2, r0
 8006848:	4613      	mov	r3, r2
 800684a:	009b      	lsls	r3, r3, #2
 800684c:	4413      	add	r3, r2
 800684e:	009a      	lsls	r2, r3, #2
 8006850:	441a      	add	r2, r3
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	685b      	ldr	r3, [r3, #4]
 8006856:	009b      	lsls	r3, r3, #2
 8006858:	fbb2 f3f3 	udiv	r3, r2, r3
 800685c:	4a21      	ldr	r2, [pc, #132]	; (80068e4 <UART_SetConfig+0x410>)
 800685e:	fba2 2303 	umull	r2, r3, r2, r3
 8006862:	095b      	lsrs	r3, r3, #5
 8006864:	2264      	movs	r2, #100	; 0x64
 8006866:	fb02 f303 	mul.w	r3, r2, r3
 800686a:	1aeb      	subs	r3, r5, r3
 800686c:	011b      	lsls	r3, r3, #4
 800686e:	3332      	adds	r3, #50	; 0x32
 8006870:	4a1c      	ldr	r2, [pc, #112]	; (80068e4 <UART_SetConfig+0x410>)
 8006872:	fba2 2303 	umull	r2, r3, r2, r3
 8006876:	095b      	lsrs	r3, r3, #5
 8006878:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800687c:	441c      	add	r4, r3
 800687e:	f7fe fddf 	bl	8005440 <HAL_RCC_GetPCLK1Freq>
 8006882:	4602      	mov	r2, r0
 8006884:	4613      	mov	r3, r2
 8006886:	009b      	lsls	r3, r3, #2
 8006888:	4413      	add	r3, r2
 800688a:	009a      	lsls	r2, r3, #2
 800688c:	441a      	add	r2, r3
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	685b      	ldr	r3, [r3, #4]
 8006892:	009b      	lsls	r3, r3, #2
 8006894:	fbb2 f5f3 	udiv	r5, r2, r3
 8006898:	f7fe fdd2 	bl	8005440 <HAL_RCC_GetPCLK1Freq>
 800689c:	4602      	mov	r2, r0
 800689e:	4613      	mov	r3, r2
 80068a0:	009b      	lsls	r3, r3, #2
 80068a2:	4413      	add	r3, r2
 80068a4:	009a      	lsls	r2, r3, #2
 80068a6:	441a      	add	r2, r3
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	685b      	ldr	r3, [r3, #4]
 80068ac:	009b      	lsls	r3, r3, #2
 80068ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80068b2:	4a0c      	ldr	r2, [pc, #48]	; (80068e4 <UART_SetConfig+0x410>)
 80068b4:	fba2 2303 	umull	r2, r3, r2, r3
 80068b8:	095b      	lsrs	r3, r3, #5
 80068ba:	2264      	movs	r2, #100	; 0x64
 80068bc:	fb02 f303 	mul.w	r3, r2, r3
 80068c0:	1aeb      	subs	r3, r5, r3
 80068c2:	011b      	lsls	r3, r3, #4
 80068c4:	3332      	adds	r3, #50	; 0x32
 80068c6:	4a07      	ldr	r2, [pc, #28]	; (80068e4 <UART_SetConfig+0x410>)
 80068c8:	fba2 2303 	umull	r2, r3, r2, r3
 80068cc:	095b      	lsrs	r3, r3, #5
 80068ce:	f003 020f 	and.w	r2, r3, #15
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4422      	add	r2, r4
 80068d8:	609a      	str	r2, [r3, #8]
}
 80068da:	e7ff      	b.n	80068dc <UART_SetConfig+0x408>
 80068dc:	bf00      	nop
 80068de:	3710      	adds	r7, #16
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bdb0      	pop	{r4, r5, r7, pc}
 80068e4:	51eb851f 	.word	0x51eb851f

080068e8 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 80068e8:	b480      	push	{r7}
 80068ea:	b085      	sub	sp, #20
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
 80068f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 80068f2:	2300      	movs	r3, #0
 80068f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	681a      	ldr	r2, [r3, #0]
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006900:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 8006902:	68fa      	ldr	r2, [r7, #12]
 8006904:	4b20      	ldr	r3, [pc, #128]	; (8006988 <FSMC_NORSRAM_Init+0xa0>)
 8006906:	4013      	ands	r3, r2
 8006908:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8006912:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8006918:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 800691e:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8006924:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 800692a:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 8006930:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 8006936:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 800693c:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 8006942:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 8006948:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 800694e:	431a      	orrs	r2, r3
                     Init->WriteBurst
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 8006954:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8006956:	68fa      	ldr	r2, [r7, #12]
 8006958:	4313      	orrs	r3, r2
 800695a:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	689b      	ldr	r3, [r3, #8]
 8006960:	2b08      	cmp	r3, #8
 8006962:	d103      	bne.n	800696c <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800696a:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	681a      	ldr	r2, [r3, #0]
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	68f9      	ldr	r1, [r7, #12]
 8006974:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8006978:	2300      	movs	r3, #0
}
 800697a:	4618      	mov	r0, r3
 800697c:	3714      	adds	r7, #20
 800697e:	46bd      	mov	sp, r7
 8006980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006984:	4770      	bx	lr
 8006986:	bf00      	nop
 8006988:	fff00080 	.word	0xfff00080

0800698c <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800698c:	b480      	push	{r7}
 800698e:	b087      	sub	sp, #28
 8006990:	af00      	add	r7, sp, #0
 8006992:	60f8      	str	r0, [r7, #12]
 8006994:	60b9      	str	r1, [r7, #8]
 8006996:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8006998:	2300      	movs	r3, #0
 800699a:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	1c5a      	adds	r2, r3, #1
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069a6:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 80069a8:	697b      	ldr	r3, [r7, #20]
 80069aa:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80069ae:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	685b      	ldr	r3, [r3, #4]
 80069b8:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80069ba:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	689b      	ldr	r3, [r3, #8]
 80069c0:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 80069c2:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	68db      	ldr	r3, [r3, #12]
 80069c8:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 80069ca:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	691b      	ldr	r3, [r3, #16]
 80069d0:	3b01      	subs	r3, #1
 80069d2:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 80069d4:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	695b      	ldr	r3, [r3, #20]
 80069da:	3b02      	subs	r3, #2
 80069dc:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 80069de:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80069e4:	4313      	orrs	r3, r2
 80069e6:	697a      	ldr	r2, [r7, #20]
 80069e8:	4313      	orrs	r3, r2
 80069ea:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	1c5a      	adds	r2, r3, #1
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	6979      	ldr	r1, [r7, #20]
 80069f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 80069f8:	2300      	movs	r3, #0
}
 80069fa:	4618      	mov	r0, r3
 80069fc:	371c      	adds	r7, #28
 80069fe:	46bd      	mov	sp, r7
 8006a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a04:	4770      	bx	lr
	...

08006a08 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b087      	sub	sp, #28
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	60f8      	str	r0, [r7, #12]
 8006a10:	60b9      	str	r1, [r7, #8]
 8006a12:	607a      	str	r2, [r7, #4]
 8006a14:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 8006a16:	2300      	movs	r3, #0
 8006a18:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a20:	d122      	bne.n	8006a68 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	687a      	ldr	r2, [r7, #4]
 8006a26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a2a:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8006a2c:	697a      	ldr	r2, [r7, #20]
 8006a2e:	4b15      	ldr	r3, [pc, #84]	; (8006a84 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8006a30:	4013      	ands	r3, r2
 8006a32:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	685b      	ldr	r3, [r3, #4]
 8006a3c:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006a3e:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	689b      	ldr	r3, [r3, #8]
 8006a44:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 8006a46:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	68db      	ldr	r3, [r3, #12]
 8006a4c:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 8006a4e:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8006a54:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006a56:	697a      	ldr	r2, [r7, #20]
 8006a58:	4313      	orrs	r3, r2
 8006a5a:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	687a      	ldr	r2, [r7, #4]
 8006a60:	6979      	ldr	r1, [r7, #20]
 8006a62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006a66:	e005      	b.n	8006a74 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	687a      	ldr	r2, [r7, #4]
 8006a6c:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8006a70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8006a74:	2300      	movs	r3, #0
}
 8006a76:	4618      	mov	r0, r3
 8006a78:	371c      	adds	r7, #28
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a80:	4770      	bx	lr
 8006a82:	bf00      	nop
 8006a84:	cff00000 	.word	0xcff00000

08006a88 <aiInit>:

/*
 * Init function to create and initialize a NN.
 */
int aiInit(const ai_u8* activations)
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b08e      	sub	sp, #56	; 0x38
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
    ai_error err;

    /* 1 - Specific AI data structure to provide the references of the
     * activation/working memory chunk and the weights/bias parameters */
    const ai_network_params params = {
 8006a90:	4b26      	ldr	r3, [pc, #152]	; (8006b2c <aiInit+0xa4>)
 8006a92:	60fb      	str	r3, [r7, #12]
 8006a94:	2301      	movs	r3, #1
 8006a96:	823b      	strh	r3, [r7, #16]
 8006a98:	2301      	movs	r3, #1
 8006a9a:	827b      	strh	r3, [r7, #18]
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	82bb      	strh	r3, [r7, #20]
 8006aa0:	4b23      	ldr	r3, [pc, #140]	; (8006b30 <aiInit+0xa8>)
 8006aa2:	61bb      	str	r3, [r7, #24]
            AI_HANDWRITTEN_NN_DATA_WEIGHTS(ai_handwritten_nn_data_weights_get()),
 8006aa4:	f000 f990 	bl	8006dc8 <ai_handwritten_nn_data_weights_get>
 8006aa8:	4603      	mov	r3, r0
    const ai_network_params params = {
 8006aaa:	61fb      	str	r3, [r7, #28]
 8006aac:	4b21      	ldr	r3, [pc, #132]	; (8006b34 <aiInit+0xac>)
 8006aae:	623b      	str	r3, [r7, #32]
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006ab8:	2301      	movs	r3, #1
 8006aba:	853b      	strh	r3, [r7, #40]	; 0x28
 8006abc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8006ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	633b      	str	r3, [r7, #48]	; 0x30
            AI_HANDWRITTEN_NN_DATA_ACTIVATIONS(activations)
    };

    /* 2 - Create an instance of the NN */
    err = ai_handwritten_nn_create(&handwritten_nn, AI_HANDWRITTEN_NN_DATA_CONFIG);
 8006ac6:	2100      	movs	r1, #0
 8006ac8:	481b      	ldr	r0, [pc, #108]	; (8006b38 <aiInit+0xb0>)
 8006aca:	f000 f927 	bl	8006d1c <ai_handwritten_nn_create>
 8006ace:	4603      	mov	r3, r0
 8006ad0:	637b      	str	r3, [r7, #52]	; 0x34
    if (err.type != AI_ERROR_NONE) {
 8006ad2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d002      	beq.n	8006ae0 <aiInit+0x58>
	    return -1;
 8006ada:	f04f 33ff 	mov.w	r3, #4294967295
 8006ade:	e020      	b.n	8006b22 <aiInit+0x9a>
    }

    /* 3 - Initialize the NN - Ready to be used */
    if (!ai_handwritten_nn_init(handwritten_nn, &params)) {
 8006ae0:	4b15      	ldr	r3, [pc, #84]	; (8006b38 <aiInit+0xb0>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f107 020c 	add.w	r2, r7, #12
 8006ae8:	4611      	mov	r1, r2
 8006aea:	4618      	mov	r0, r3
 8006aec:	f000 f938 	bl	8006d60 <ai_handwritten_nn_init>
 8006af0:	4603      	mov	r3, r0
 8006af2:	f083 0301 	eor.w	r3, r3, #1
 8006af6:	b2db      	uxtb	r3, r3
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d011      	beq.n	8006b20 <aiInit+0x98>
        err = ai_handwritten_nn_get_error(handwritten_nn);
 8006afc:	4b0e      	ldr	r3, [pc, #56]	; (8006b38 <aiInit+0xb0>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	4618      	mov	r0, r3
 8006b02:	f000 f8ff 	bl	8006d04 <ai_handwritten_nn_get_error>
 8006b06:	4603      	mov	r3, r0
 8006b08:	637b      	str	r3, [r7, #52]	; 0x34
        ai_handwritten_nn_destroy(handwritten_nn);
 8006b0a:	4b0b      	ldr	r3, [pc, #44]	; (8006b38 <aiInit+0xb0>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	4618      	mov	r0, r3
 8006b10:	f000 f91a 	bl	8006d48 <ai_handwritten_nn_destroy>
        handwritten_nn = AI_HANDLE_NULL;
 8006b14:	4b08      	ldr	r3, [pc, #32]	; (8006b38 <aiInit+0xb0>)
 8006b16:	2200      	movs	r2, #0
 8006b18:	601a      	str	r2, [r3, #0]
	    return -2;
 8006b1a:	f06f 0301 	mvn.w	r3, #1
 8006b1e:	e000      	b.n	8006b22 <aiInit+0x9a>
    }

    return 0;
 8006b20:	2300      	movs	r3, #0
}
 8006b22:	4618      	mov	r0, r3
 8006b24:	3738      	adds	r7, #56	; 0x38
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bd80      	pop	{r7, pc}
 8006b2a:	bf00      	nop
 8006b2c:	40040440 	.word	0x40040440
 8006b30:	000e5a28 	.word	0x000e5a28
 8006b34:	00040440 	.word	0x00040440
 8006b38:	20000634 	.word	0x20000634

08006b3c <MX_X_CUBE_AI_Init>:

/*************************************************************************
  *
  */
void MX_X_CUBE_AI_Init(void)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	af00      	add	r7, sp, #0
    /* Activation/working buffer is allocated as a static memory chunk
     * (bss section) */
    AI_ALIGNED(4)
    static ai_u8 activations[AI_HANDWRITTEN_NN_DATA_ACTIVATIONS_SIZE];

    aiInit(activations);
 8006b40:	4802      	ldr	r0, [pc, #8]	; (8006b4c <MX_X_CUBE_AI_Init+0x10>)
 8006b42:	f7ff ffa1 	bl	8006a88 <aiInit>
    /* USER CODE END 0 */
}
 8006b46:	bf00      	nop
 8006b48:	bd80      	pop	{r7, pc}
 8006b4a:	bf00      	nop
 8006b4c:	20000638 	.word	0x20000638

08006b50 <handwritten_nn_configure_activations>:


AI_DECLARE_STATIC
ai_bool handwritten_nn_configure_activations(
  ai_network* net_ctx, const ai_buffer* activation_buffer)
{
 8006b50:	b480      	push	{r7}
 8006b52:	b085      	sub	sp, #20
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
 8006b58:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  activation_buffer && activation_buffer->data)

  ai_ptr activations = AI_PTR(AI_PTR_ALIGN(activation_buffer->data, 4));
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	691b      	ldr	r3, [r3, #16]
 8006b5e:	3303      	adds	r3, #3
 8006b60:	f023 0303 	bic.w	r3, r3, #3
 8006b64:	60fb      	str	r3, [r7, #12]
  AI_ASSERT( activations )

  {
    /* Updating activations (byte) offsets */
    input_0_output_array.data = AI_PTR(NULL);
 8006b66:	4b1c      	ldr	r3, [pc, #112]	; (8006bd8 <handwritten_nn_configure_activations+0x88>)
 8006b68:	2200      	movs	r2, #0
 8006b6a:	609a      	str	r2, [r3, #8]
    input_0_output_array.data_start = AI_PTR(NULL);
 8006b6c:	4b1a      	ldr	r3, [pc, #104]	; (8006bd8 <handwritten_nn_configure_activations+0x88>)
 8006b6e:	2200      	movs	r2, #0
 8006b70:	60da      	str	r2, [r3, #12]
    dense_output_array.data = AI_PTR(activations + 0);
 8006b72:	4a1a      	ldr	r2, [pc, #104]	; (8006bdc <handwritten_nn_configure_activations+0x8c>)
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	6093      	str	r3, [r2, #8]
    dense_output_array.data_start = AI_PTR(activations + 0);
 8006b78:	4a18      	ldr	r2, [pc, #96]	; (8006bdc <handwritten_nn_configure_activations+0x8c>)
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	60d3      	str	r3, [r2, #12]
    dense_nl_output_array.data = AI_PTR(activations + 0);
 8006b7e:	4a18      	ldr	r2, [pc, #96]	; (8006be0 <handwritten_nn_configure_activations+0x90>)
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	6093      	str	r3, [r2, #8]
    dense_nl_output_array.data_start = AI_PTR(activations + 0);
 8006b84:	4a16      	ldr	r2, [pc, #88]	; (8006be0 <handwritten_nn_configure_activations+0x90>)
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	60d3      	str	r3, [r2, #12]
    dense_1_output_array.data = AI_PTR(activations + 1024);
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b90:	4a14      	ldr	r2, [pc, #80]	; (8006be4 <handwritten_nn_configure_activations+0x94>)
 8006b92:	6093      	str	r3, [r2, #8]
    dense_1_output_array.data_start = AI_PTR(activations + 1024);
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b9a:	4a12      	ldr	r2, [pc, #72]	; (8006be4 <handwritten_nn_configure_activations+0x94>)
 8006b9c:	60d3      	str	r3, [r2, #12]
    dense_1_nl_output_array.data = AI_PTR(activations + 1024);
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ba4:	4a10      	ldr	r2, [pc, #64]	; (8006be8 <handwritten_nn_configure_activations+0x98>)
 8006ba6:	6093      	str	r3, [r2, #8]
    dense_1_nl_output_array.data_start = AI_PTR(activations + 1024);
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006bae:	4a0e      	ldr	r2, [pc, #56]	; (8006be8 <handwritten_nn_configure_activations+0x98>)
 8006bb0:	60d3      	str	r3, [r2, #12]
    dense_2_output_array.data = AI_PTR(activations + 0);
 8006bb2:	4a0e      	ldr	r2, [pc, #56]	; (8006bec <handwritten_nn_configure_activations+0x9c>)
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	6093      	str	r3, [r2, #8]
    dense_2_output_array.data_start = AI_PTR(activations + 0);
 8006bb8:	4a0c      	ldr	r2, [pc, #48]	; (8006bec <handwritten_nn_configure_activations+0x9c>)
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	60d3      	str	r3, [r2, #12]
    dense_2_nl_output_array.data = AI_PTR(NULL);
 8006bbe:	4b0c      	ldr	r3, [pc, #48]	; (8006bf0 <handwritten_nn_configure_activations+0xa0>)
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	609a      	str	r2, [r3, #8]
    dense_2_nl_output_array.data_start = AI_PTR(NULL);
 8006bc4:	4b0a      	ldr	r3, [pc, #40]	; (8006bf0 <handwritten_nn_configure_activations+0xa0>)
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	60da      	str	r2, [r3, #12]
    
  }
  return true;
 8006bca:	2301      	movs	r3, #1
}
 8006bcc:	4618      	mov	r0, r3
 8006bce:	3714      	adds	r7, #20
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd6:	4770      	bx	lr
 8006bd8:	200000b8 	.word	0x200000b8
 8006bdc:	200000c8 	.word	0x200000c8
 8006be0:	200000d8 	.word	0x200000d8
 8006be4:	200000e8 	.word	0x200000e8
 8006be8:	200000f8 	.word	0x200000f8
 8006bec:	20000108 	.word	0x20000108
 8006bf0:	20000118 	.word	0x20000118

08006bf4 <handwritten_nn_configure_weights>:


AI_DECLARE_STATIC
ai_bool handwritten_nn_configure_weights(
  ai_network* net_ctx, const ai_buffer* weights_buffer)
{
 8006bf4:	b480      	push	{r7}
 8006bf6:	b085      	sub	sp, #20
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
 8006bfc:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  weights_buffer && weights_buffer->data)

  ai_ptr weights = AI_PTR(weights_buffer->data);
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	691b      	ldr	r3, [r3, #16]
 8006c02:	60fb      	str	r3, [r7, #12]
  AI_ASSERT( weights )

  {
    /* Updating weights (byte) offsets */
    dense_2_bias_array.format |= AI_FMT_FLAG_CONST;
 8006c04:	4b39      	ldr	r3, [pc, #228]	; (8006cec <handwritten_nn_configure_weights+0xf8>)
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006c0c:	4a37      	ldr	r2, [pc, #220]	; (8006cec <handwritten_nn_configure_weights+0xf8>)
 8006c0e:	6013      	str	r3, [r2, #0]
    dense_2_bias_array.data = AI_PTR(weights + 940544);
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	f503 2365 	add.w	r3, r3, #937984	; 0xe5000
 8006c16:	f503 6320 	add.w	r3, r3, #2560	; 0xa00
 8006c1a:	4a34      	ldr	r2, [pc, #208]	; (8006cec <handwritten_nn_configure_weights+0xf8>)
 8006c1c:	6093      	str	r3, [r2, #8]
    dense_2_bias_array.data_start = AI_PTR(weights + 940544);
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	f503 2365 	add.w	r3, r3, #937984	; 0xe5000
 8006c24:	f503 6320 	add.w	r3, r3, #2560	; 0xa00
 8006c28:	4a30      	ldr	r2, [pc, #192]	; (8006cec <handwritten_nn_configure_weights+0xf8>)
 8006c2a:	60d3      	str	r3, [r2, #12]
  dense_2_weights_array.format |= AI_FMT_FLAG_CONST;
 8006c2c:	4b30      	ldr	r3, [pc, #192]	; (8006cf0 <handwritten_nn_configure_weights+0xfc>)
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006c34:	4a2e      	ldr	r2, [pc, #184]	; (8006cf0 <handwritten_nn_configure_weights+0xfc>)
 8006c36:	6013      	str	r3, [r2, #0]
    dense_2_weights_array.data = AI_PTR(weights + 935424);
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	f503 2364 	add.w	r3, r3, #933888	; 0xe4000
 8006c3e:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8006c42:	4a2b      	ldr	r2, [pc, #172]	; (8006cf0 <handwritten_nn_configure_weights+0xfc>)
 8006c44:	6093      	str	r3, [r2, #8]
    dense_2_weights_array.data_start = AI_PTR(weights + 935424);
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	f503 2364 	add.w	r3, r3, #933888	; 0xe4000
 8006c4c:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8006c50:	4a27      	ldr	r2, [pc, #156]	; (8006cf0 <handwritten_nn_configure_weights+0xfc>)
 8006c52:	60d3      	str	r3, [r2, #12]
  dense_1_bias_array.format |= AI_FMT_FLAG_CONST;
 8006c54:	4b27      	ldr	r3, [pc, #156]	; (8006cf4 <handwritten_nn_configure_weights+0x100>)
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006c5c:	4a25      	ldr	r2, [pc, #148]	; (8006cf4 <handwritten_nn_configure_weights+0x100>)
 8006c5e:	6013      	str	r3, [r2, #0]
    dense_1_bias_array.data = AI_PTR(weights + 934912);
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	f503 2364 	add.w	r3, r3, #933888	; 0xe4000
 8006c66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c6a:	4a22      	ldr	r2, [pc, #136]	; (8006cf4 <handwritten_nn_configure_weights+0x100>)
 8006c6c:	6093      	str	r3, [r2, #8]
    dense_1_bias_array.data_start = AI_PTR(weights + 934912);
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	f503 2364 	add.w	r3, r3, #933888	; 0xe4000
 8006c74:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c78:	4a1e      	ldr	r2, [pc, #120]	; (8006cf4 <handwritten_nn_configure_weights+0x100>)
 8006c7a:	60d3      	str	r3, [r2, #12]
  dense_1_weights_array.format |= AI_FMT_FLAG_CONST;
 8006c7c:	4b1e      	ldr	r3, [pc, #120]	; (8006cf8 <handwritten_nn_configure_weights+0x104>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006c84:	4a1c      	ldr	r2, [pc, #112]	; (8006cf8 <handwritten_nn_configure_weights+0x104>)
 8006c86:	6013      	str	r3, [r2, #0]
    dense_1_weights_array.data = AI_PTR(weights + 803840);
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	f503 2344 	add.w	r3, r3, #802816	; 0xc4000
 8006c8e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c92:	4a19      	ldr	r2, [pc, #100]	; (8006cf8 <handwritten_nn_configure_weights+0x104>)
 8006c94:	6093      	str	r3, [r2, #8]
    dense_1_weights_array.data_start = AI_PTR(weights + 803840);
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	f503 2344 	add.w	r3, r3, #802816	; 0xc4000
 8006c9c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ca0:	4a15      	ldr	r2, [pc, #84]	; (8006cf8 <handwritten_nn_configure_weights+0x104>)
 8006ca2:	60d3      	str	r3, [r2, #12]
  dense_bias_array.format |= AI_FMT_FLAG_CONST;
 8006ca4:	4b15      	ldr	r3, [pc, #84]	; (8006cfc <handwritten_nn_configure_weights+0x108>)
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006cac:	4a13      	ldr	r2, [pc, #76]	; (8006cfc <handwritten_nn_configure_weights+0x108>)
 8006cae:	6013      	str	r3, [r2, #0]
    dense_bias_array.data = AI_PTR(weights + 802816);
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	f503 2344 	add.w	r3, r3, #802816	; 0xc4000
 8006cb6:	4a11      	ldr	r2, [pc, #68]	; (8006cfc <handwritten_nn_configure_weights+0x108>)
 8006cb8:	6093      	str	r3, [r2, #8]
    dense_bias_array.data_start = AI_PTR(weights + 802816);
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	f503 2344 	add.w	r3, r3, #802816	; 0xc4000
 8006cc0:	4a0e      	ldr	r2, [pc, #56]	; (8006cfc <handwritten_nn_configure_weights+0x108>)
 8006cc2:	60d3      	str	r3, [r2, #12]
  dense_weights_array.format |= AI_FMT_FLAG_CONST;
 8006cc4:	4b0e      	ldr	r3, [pc, #56]	; (8006d00 <handwritten_nn_configure_weights+0x10c>)
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006ccc:	4a0c      	ldr	r2, [pc, #48]	; (8006d00 <handwritten_nn_configure_weights+0x10c>)
 8006cce:	6013      	str	r3, [r2, #0]
    dense_weights_array.data = AI_PTR(weights + 0);
 8006cd0:	4a0b      	ldr	r2, [pc, #44]	; (8006d00 <handwritten_nn_configure_weights+0x10c>)
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	6093      	str	r3, [r2, #8]
    dense_weights_array.data_start = AI_PTR(weights + 0);
 8006cd6:	4a0a      	ldr	r2, [pc, #40]	; (8006d00 <handwritten_nn_configure_weights+0x10c>)
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	60d3      	str	r3, [r2, #12]
  
  }

  return true;
 8006cdc:	2301      	movs	r3, #1
}
 8006cde:	4618      	mov	r0, r3
 8006ce0:	3714      	adds	r7, #20
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce8:	4770      	bx	lr
 8006cea:	bf00      	nop
 8006cec:	20000058 	.word	0x20000058
 8006cf0:	20000068 	.word	0x20000068
 8006cf4:	20000078 	.word	0x20000078
 8006cf8:	20000088 	.word	0x20000088
 8006cfc:	20000098 	.word	0x20000098
 8006d00:	200000a8 	.word	0x200000a8

08006d04 <ai_handwritten_nn_get_error>:
  return false;
}

AI_API_ENTRY
ai_error ai_handwritten_nn_get_error(ai_handle network)
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b082      	sub	sp, #8
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	f7f9 fca3 	bl	8000658 <ai_platform_network_get_error>
 8006d12:	4603      	mov	r3, r0
}
 8006d14:	4618      	mov	r0, r3
 8006d16:	3708      	adds	r7, #8
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	bd80      	pop	{r7, pc}

08006d1c <ai_handwritten_nn_create>:

AI_API_ENTRY
ai_error ai_handwritten_nn_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b084      	sub	sp, #16
 8006d20:	af02      	add	r7, sp, #8
 8006d22:	6078      	str	r0, [r7, #4]
 8006d24:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 8006d26:	2300      	movs	r3, #0
 8006d28:	9301      	str	r3, [sp, #4]
 8006d2a:	2303      	movs	r3, #3
 8006d2c:	9300      	str	r3, [sp, #0]
 8006d2e:	2301      	movs	r3, #1
 8006d30:	4a04      	ldr	r2, [pc, #16]	; (8006d44 <ai_handwritten_nn_create+0x28>)
 8006d32:	6839      	ldr	r1, [r7, #0]
 8006d34:	6878      	ldr	r0, [r7, #4]
 8006d36:	f7f9 fd75 	bl	8000824 <ai_platform_network_create>
 8006d3a:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	3708      	adds	r7, #8
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bd80      	pop	{r7, pc}
 8006d44:	20000008 	.word	0x20000008

08006d48 <ai_handwritten_nn_destroy>:

AI_API_ENTRY
ai_handle ai_handwritten_nn_destroy(ai_handle network)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b082      	sub	sp, #8
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
  return ai_platform_network_destroy(network);
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	f7f9 fda3 	bl	800089c <ai_platform_network_destroy>
 8006d56:	4603      	mov	r3, r0
}
 8006d58:	4618      	mov	r0, r3
 8006d5a:	3708      	adds	r7, #8
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bd80      	pop	{r7, pc}

08006d60 <ai_handwritten_nn_init>:

AI_API_ENTRY
ai_bool ai_handwritten_nn_init(
  ai_handle network, const ai_network_params* params)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b084      	sub	sp, #16
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
 8006d68:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8006d6a:	6839      	ldr	r1, [r7, #0]
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f7f9 fdb4 	bl	80008da <ai_platform_network_init>
 8006d72:	60f8      	str	r0, [r7, #12]
  if ( !net_ctx ) return false;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d101      	bne.n	8006d7e <ai_handwritten_nn_init+0x1e>
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	e01f      	b.n	8006dbe <ai_handwritten_nn_init+0x5e>

  ai_bool ok = true;
 8006d7e:	2301      	movs	r3, #1
 8006d80:	72fb      	strb	r3, [r7, #11]
  ok &= handwritten_nn_configure_weights(net_ctx, &params->params);
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	4619      	mov	r1, r3
 8006d86:	68f8      	ldr	r0, [r7, #12]
 8006d88:	f7ff ff34 	bl	8006bf4 <handwritten_nn_configure_weights>
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	461a      	mov	r2, r3
 8006d90:	7afb      	ldrb	r3, [r7, #11]
 8006d92:	4013      	ands	r3, r2
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	bf14      	ite	ne
 8006d98:	2301      	movne	r3, #1
 8006d9a:	2300      	moveq	r3, #0
 8006d9c:	72fb      	strb	r3, [r7, #11]
  ok &= handwritten_nn_configure_activations(net_ctx, &params->activations);
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	3314      	adds	r3, #20
 8006da2:	4619      	mov	r1, r3
 8006da4:	68f8      	ldr	r0, [r7, #12]
 8006da6:	f7ff fed3 	bl	8006b50 <handwritten_nn_configure_activations>
 8006daa:	4603      	mov	r3, r0
 8006dac:	461a      	mov	r2, r3
 8006dae:	7afb      	ldrb	r3, [r7, #11]
 8006db0:	4013      	ands	r3, r2
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	bf14      	ite	ne
 8006db6:	2301      	movne	r3, #1
 8006db8:	2300      	moveq	r3, #0
 8006dba:	72fb      	strb	r3, [r7, #11]

  return ok;
 8006dbc:	7afb      	ldrb	r3, [r7, #11]
}
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	3710      	adds	r7, #16
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bd80      	pop	{r7, pc}
	...

08006dc8 <ai_handwritten_nn_data_weights_get>:
#include "handwritten_nn_data.h"

ai_handle ai_handwritten_nn_data_weights_get(void)
{
 8006dc8:	b480      	push	{r7}
 8006dca:	af00      	add	r7, sp, #0
    0x3c, 0x37, 0xb6, 0x00, 0x00, 0x00, 0x00, 0x85, 0x06,
    0xa8, 0xbc, 0x00, 0x00, 0x00, 0x00, 0xcb, 0x66, 0xf8,
    0xbc, 0x00, 0x00, 0x00, 0x00, 0x1d, 0x9e, 0x0d, 0xbc
  };

  return AI_HANDLE_PTR(s_handwritten_nn_weights);
 8006dcc:	4b02      	ldr	r3, [pc, #8]	; (8006dd8 <ai_handwritten_nn_data_weights_get+0x10>)
}
 8006dce:	4618      	mov	r0, r3
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd6:	4770      	bx	lr
 8006dd8:	0800a070 	.word	0x0800a070

08006ddc <LCD_IO_Init>:
/**
  * @brief  Configures the LCD_SPI interface.
  * @retval None
  */
void LCD_IO_Init(void)
{
 8006ddc:	b480      	push	{r7}
 8006dde:	af00      	add	r7, sp, #0
//  HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_RESET);
//  HAL_Delay(100);
//  HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_SET);
//  HAL_Delay(300);

}
 8006de0:	bf00      	nop
 8006de2:	46bd      	mov	sp, r7
 8006de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de8:	4770      	bx	lr
	...

08006dec <LCD_IO_WriteMultipleData>:
  * @param  pData Pointer on the register value
  * @param  Size Size of byte to transmit to the register
  * @retval None
  */
void LCD_IO_WriteMultipleData(uint8_t *pData, uint32_t Size)
{
 8006dec:	b480      	push	{r7}
 8006dee:	b085      	sub	sp, #20
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
 8006df4:	6039      	str	r1, [r7, #0]
  uint32_t counter = 0;
 8006df6:	2300      	movs	r3, #0
 8006df8:	60fb      	str	r3, [r7, #12]

  for (counter = Size; counter != 0; counter--)
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	60fb      	str	r3, [r7, #12]
 8006dfe:	e00c      	b.n	8006e1a <LCD_IO_WriteMultipleData+0x2e>
  {
    /* Write 16-bit Data */
    LCD_RAM = *(uint16_t *)pData;
 8006e00:	4a0a      	ldr	r2, [pc, #40]	; (8006e2c <LCD_IO_WriteMultipleData+0x40>)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	881b      	ldrh	r3, [r3, #0]
 8006e06:	8013      	strh	r3, [r2, #0]
    counter--;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	3b01      	subs	r3, #1
 8006e0c:	60fb      	str	r3, [r7, #12]
    pData += 2;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	3302      	adds	r3, #2
 8006e12:	607b      	str	r3, [r7, #4]
  for (counter = Size; counter != 0; counter--)
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	3b01      	subs	r3, #1
 8006e18:	60fb      	str	r3, [r7, #12]
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d1ef      	bne.n	8006e00 <LCD_IO_WriteMultipleData+0x14>
  }
}
 8006e20:	bf00      	nop
 8006e22:	3714      	adds	r7, #20
 8006e24:	46bd      	mov	sp, r7
 8006e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2a:	4770      	bx	lr
 8006e2c:	60010000 	.word	0x60010000

08006e30 <LCD_IO_WriteReg>:
  * @brief  register address.
  * @param  Reg
  * @retval None
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8006e30:	b480      	push	{r7}
 8006e32:	b083      	sub	sp, #12
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	4603      	mov	r3, r0
 8006e38:	71fb      	strb	r3, [r7, #7]
  /* Write 16-bit Data */
  LCD_REG  = (uint16_t)Reg;
 8006e3a:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8006e3e:	79fa      	ldrb	r2, [r7, #7]
 8006e40:	b292      	uxth	r2, r2
 8006e42:	801a      	strh	r2, [r3, #0]

}
 8006e44:	bf00      	nop
 8006e46:	370c      	adds	r7, #12
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4e:	4770      	bx	lr

08006e50 <LCD_IO_ReadData>:
  * @brief  Read register value.
  * @param  Reg
  * @retval None
  */
uint16_t LCD_IO_ReadData(void) 
{
 8006e50:	b480      	push	{r7}
 8006e52:	af00      	add	r7, sp, #0
  /* Read 16-bit Reg */
  return (uint16_t)LCD_RAM;
 8006e54:	4b03      	ldr	r3, [pc, #12]	; (8006e64 <LCD_IO_ReadData+0x14>)
 8006e56:	881b      	ldrh	r3, [r3, #0]
 8006e58:	b29b      	uxth	r3, r3
  
}
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e62:	4770      	bx	lr
 8006e64:	60010000 	.word	0x60010000

08006e68 <ili9325_Init>:
  * @brief  Initialize the ILI9325 LCD Component.
  * @param  None
  * @retval None
  */
void ili9325_Init(void)
{  
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	af00      	add	r7, sp, #0
  /* Initialize ILI9325 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8006e6c:	f7ff ffb6 	bl	8006ddc <LCD_IO_Init>
  
  /* Start Initial Sequence --------------------------------------------------*/
  ili9325_WriteReg(LCD_REG_0, 0x0001); /* Start internal OSC. */
 8006e70:	2101      	movs	r1, #1
 8006e72:	2000      	movs	r0, #0
 8006e74:	f000 f9a7 	bl	80071c6 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_1, 0x0100); /* Set SS and SM bit */
 8006e78:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006e7c:	2001      	movs	r0, #1
 8006e7e:	f000 f9a2 	bl	80071c6 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_2, 0x0700); /* Set 1 line inversion */
 8006e82:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8006e86:	2002      	movs	r0, #2
 8006e88:	f000 f99d 	bl	80071c6 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_3, 0x1018); /* Set GRAM write direction and BGR=1. */
 8006e8c:	f241 0118 	movw	r1, #4120	; 0x1018
 8006e90:	2003      	movs	r0, #3
 8006e92:	f000 f998 	bl	80071c6 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_4, 0x0000); /* Resize register */
 8006e96:	2100      	movs	r1, #0
 8006e98:	2004      	movs	r0, #4
 8006e9a:	f000 f994 	bl	80071c6 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_8, 0x0202); /* Set the back porch and front porch */
 8006e9e:	f240 2102 	movw	r1, #514	; 0x202
 8006ea2:	2008      	movs	r0, #8
 8006ea4:	f000 f98f 	bl	80071c6 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_9, 0x0000); /* Set non-display area refresh cycle ISC[3:0] */
 8006ea8:	2100      	movs	r1, #0
 8006eaa:	2009      	movs	r0, #9
 8006eac:	f000 f98b 	bl	80071c6 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_10, 0x0000); /* FMARK function */
 8006eb0:	2100      	movs	r1, #0
 8006eb2:	200a      	movs	r0, #10
 8006eb4:	f000 f987 	bl	80071c6 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_12, 0x0000); /* RGB interface setting */
 8006eb8:	2100      	movs	r1, #0
 8006eba:	200c      	movs	r0, #12
 8006ebc:	f000 f983 	bl	80071c6 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_13, 0x0000); /* Frame marker Position */
 8006ec0:	2100      	movs	r1, #0
 8006ec2:	200d      	movs	r0, #13
 8006ec4:	f000 f97f 	bl	80071c6 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_15, 0x0000); /* RGB interface polarity */
 8006ec8:	2100      	movs	r1, #0
 8006eca:	200f      	movs	r0, #15
 8006ecc:	f000 f97b 	bl	80071c6 <ili9325_WriteReg>
  
  /* Power On sequence -------------------------------------------------------*/
  ili9325_WriteReg(LCD_REG_16, 0x0000); /* SAP, BT[3:0], AP, DSTB, SLP, STB */
 8006ed0:	2100      	movs	r1, #0
 8006ed2:	2010      	movs	r0, #16
 8006ed4:	f000 f977 	bl	80071c6 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_17, 0x0000); /* DC1[2:0], DC0[2:0], VC[2:0] */
 8006ed8:	2100      	movs	r1, #0
 8006eda:	2011      	movs	r0, #17
 8006edc:	f000 f973 	bl	80071c6 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_18, 0x0000); /* VREG1OUT voltage */
 8006ee0:	2100      	movs	r1, #0
 8006ee2:	2012      	movs	r0, #18
 8006ee4:	f000 f96f 	bl	80071c6 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_19, 0x0000); /* VDV[4:0] for VCOM amplitude */
 8006ee8:	2100      	movs	r1, #0
 8006eea:	2013      	movs	r0, #19
 8006eec:	f000 f96b 	bl	80071c6 <ili9325_WriteReg>

  ili9325_WriteReg(LCD_REG_16, 0x17B0); /* SAP, BT[3:0], AP, DSTB, SLP, STB */
 8006ef0:	f241 71b0 	movw	r1, #6064	; 0x17b0
 8006ef4:	2010      	movs	r0, #16
 8006ef6:	f000 f966 	bl	80071c6 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_17, 0x0137); /* DC1[2:0], DC0[2:0], VC[2:0] */
 8006efa:	f240 1137 	movw	r1, #311	; 0x137
 8006efe:	2011      	movs	r0, #17
 8006f00:	f000 f961 	bl	80071c6 <ili9325_WriteReg>

  ili9325_WriteReg(LCD_REG_18, 0x0139); /* VREG1OUT voltage */
 8006f04:	f240 1139 	movw	r1, #313	; 0x139
 8006f08:	2012      	movs	r0, #18
 8006f0a:	f000 f95c 	bl	80071c6 <ili9325_WriteReg>

  ili9325_WriteReg(LCD_REG_19, 0x1d00); /* VDV[4:0] for VCOM amplitude */
 8006f0e:	f44f 51e8 	mov.w	r1, #7424	; 0x1d00
 8006f12:	2013      	movs	r0, #19
 8006f14:	f000 f957 	bl	80071c6 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_41, 0x0013); /* VCM[4:0] for VCOMH */
 8006f18:	2113      	movs	r1, #19
 8006f1a:	2029      	movs	r0, #41	; 0x29
 8006f1c:	f000 f953 	bl	80071c6 <ili9325_WriteReg>

  ili9325_WriteReg(LCD_REG_32, 0x0000); /* GRAM horizontal Address */
 8006f20:	2100      	movs	r1, #0
 8006f22:	2020      	movs	r0, #32
 8006f24:	f000 f94f 	bl	80071c6 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_33, 0x0000); /* GRAM Vertical Address */
 8006f28:	2100      	movs	r1, #0
 8006f2a:	2021      	movs	r0, #33	; 0x21
 8006f2c:	f000 f94b 	bl	80071c6 <ili9325_WriteReg>

  /* Adjust the Gamma Curve (ILI9325) ----------------------------------------*/
  ili9325_WriteReg(LCD_REG_48, 0x0007);
 8006f30:	2107      	movs	r1, #7
 8006f32:	2030      	movs	r0, #48	; 0x30
 8006f34:	f000 f947 	bl	80071c6 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_49, 0x0302);
 8006f38:	f240 3102 	movw	r1, #770	; 0x302
 8006f3c:	2031      	movs	r0, #49	; 0x31
 8006f3e:	f000 f942 	bl	80071c6 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_50, 0x0105);
 8006f42:	f240 1105 	movw	r1, #261	; 0x105
 8006f46:	2032      	movs	r0, #50	; 0x32
 8006f48:	f000 f93d 	bl	80071c6 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_53, 0x0206);
 8006f4c:	f240 2106 	movw	r1, #518	; 0x206
 8006f50:	2035      	movs	r0, #53	; 0x35
 8006f52:	f000 f938 	bl	80071c6 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_54, 0x0808);
 8006f56:	f640 0108 	movw	r1, #2056	; 0x808
 8006f5a:	2036      	movs	r0, #54	; 0x36
 8006f5c:	f000 f933 	bl	80071c6 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_55, 0x0206);
 8006f60:	f240 2106 	movw	r1, #518	; 0x206
 8006f64:	2037      	movs	r0, #55	; 0x37
 8006f66:	f000 f92e 	bl	80071c6 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_56, 0x0504);
 8006f6a:	f240 5104 	movw	r1, #1284	; 0x504
 8006f6e:	2038      	movs	r0, #56	; 0x38
 8006f70:	f000 f929 	bl	80071c6 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_57, 0x0007);
 8006f74:	2107      	movs	r1, #7
 8006f76:	2039      	movs	r0, #57	; 0x39
 8006f78:	f000 f925 	bl	80071c6 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_60, 0x0105);
 8006f7c:	f240 1105 	movw	r1, #261	; 0x105
 8006f80:	203c      	movs	r0, #60	; 0x3c
 8006f82:	f000 f920 	bl	80071c6 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_61, 0x0808);
 8006f86:	f640 0108 	movw	r1, #2056	; 0x808
 8006f8a:	203d      	movs	r0, #61	; 0x3d
 8006f8c:	f000 f91b 	bl	80071c6 <ili9325_WriteReg>
  HAL_Delay(50); 
 8006f90:	2032      	movs	r0, #50	; 0x32
 8006f92:	f7fd faf7 	bl	8004584 <HAL_Delay>
  /* Set GRAM area -----------------------------------------------------------*/
  ili9325_WriteReg(LCD_REG_80, 0x0000); /* Horizontal GRAM Start Address */
 8006f96:	2100      	movs	r1, #0
 8006f98:	2050      	movs	r0, #80	; 0x50
 8006f9a:	f000 f914 	bl	80071c6 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_81, 0x00EF); /* Horizontal GRAM End Address */
 8006f9e:	21ef      	movs	r1, #239	; 0xef
 8006fa0:	2051      	movs	r0, #81	; 0x51
 8006fa2:	f000 f910 	bl	80071c6 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_82, 0x0000); /* Vertical GRAM Start Address */
 8006fa6:	2100      	movs	r1, #0
 8006fa8:	2052      	movs	r0, #82	; 0x52
 8006faa:	f000 f90c 	bl	80071c6 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_83, 0x013F); /* Vertical GRAM End Address */
 8006fae:	f240 113f 	movw	r1, #319	; 0x13f
 8006fb2:	2053      	movs	r0, #83	; 0x53
 8006fb4:	f000 f907 	bl	80071c6 <ili9325_WriteReg>
  
  ili9325_WriteReg(LCD_REG_96,  0xA700); /* Gate Scan Line(GS=1, scan direction is G320~G1) */
 8006fb8:	f44f 4127 	mov.w	r1, #42752	; 0xa700
 8006fbc:	2060      	movs	r0, #96	; 0x60
 8006fbe:	f000 f902 	bl	80071c6 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_97,  0x0001); /* NDL,VLE, REV */
 8006fc2:	2101      	movs	r1, #1
 8006fc4:	2061      	movs	r0, #97	; 0x61
 8006fc6:	f000 f8fe 	bl	80071c6 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_106, 0x0000); /* set scrolling line */
 8006fca:	2100      	movs	r1, #0
 8006fcc:	206a      	movs	r0, #106	; 0x6a
 8006fce:	f000 f8fa 	bl	80071c6 <ili9325_WriteReg>
  
  /* Partial Display Control -------------------------------------------------*/
  ili9325_WriteReg(LCD_REG_128, 0x0000);
 8006fd2:	2100      	movs	r1, #0
 8006fd4:	2080      	movs	r0, #128	; 0x80
 8006fd6:	f000 f8f6 	bl	80071c6 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_129, 0x0000);
 8006fda:	2100      	movs	r1, #0
 8006fdc:	2081      	movs	r0, #129	; 0x81
 8006fde:	f000 f8f2 	bl	80071c6 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_130, 0x0000);
 8006fe2:	2100      	movs	r1, #0
 8006fe4:	2082      	movs	r0, #130	; 0x82
 8006fe6:	f000 f8ee 	bl	80071c6 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_131, 0x0000);
 8006fea:	2100      	movs	r1, #0
 8006fec:	2083      	movs	r0, #131	; 0x83
 8006fee:	f000 f8ea 	bl	80071c6 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_132, 0x0000);
 8006ff2:	2100      	movs	r1, #0
 8006ff4:	2084      	movs	r0, #132	; 0x84
 8006ff6:	f000 f8e6 	bl	80071c6 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_133, 0x0000);
 8006ffa:	2100      	movs	r1, #0
 8006ffc:	2085      	movs	r0, #133	; 0x85
 8006ffe:	f000 f8e2 	bl	80071c6 <ili9325_WriteReg>
  
  /* Panel Control -----------------------------------------------------------*/
  ili9325_WriteReg(LCD_REG_144, 0x0010);
 8007002:	2110      	movs	r1, #16
 8007004:	2090      	movs	r0, #144	; 0x90
 8007006:	f000 f8de 	bl	80071c6 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_146, 0x0000);
 800700a:	2100      	movs	r1, #0
 800700c:	2092      	movs	r0, #146	; 0x92
 800700e:	f000 f8da 	bl	80071c6 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_147, 0x0003);
 8007012:	2103      	movs	r1, #3
 8007014:	2093      	movs	r0, #147	; 0x93
 8007016:	f000 f8d6 	bl	80071c6 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_149, 0x0110);
 800701a:	f44f 7188 	mov.w	r1, #272	; 0x110
 800701e:	2095      	movs	r0, #149	; 0x95
 8007020:	f000 f8d1 	bl	80071c6 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_151, 0x0000);
 8007024:	2100      	movs	r1, #0
 8007026:	2097      	movs	r0, #151	; 0x97
 8007028:	f000 f8cd 	bl	80071c6 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_152, 0x0000);
 800702c:	2100      	movs	r1, #0
 800702e:	2098      	movs	r0, #152	; 0x98
 8007030:	f000 f8c9 	bl	80071c6 <ili9325_WriteReg>
  
  /* set GRAM write direction and BGR = 1 */
  /* I/D=00 (Horizontal : increment, Vertical : decrement) */
  /* AM=1 (address is updated in vertical writing direction) */
  ili9325_WriteReg(LCD_REG_3, 0x1010);
 8007034:	f241 0110 	movw	r1, #4112	; 0x1010
 8007038:	2003      	movs	r0, #3
 800703a:	f000 f8c4 	bl	80071c6 <ili9325_WriteReg>
  
  /* 262K color and display ON */ 
  ili9325_WriteReg(LCD_REG_7, 0x0173);    
 800703e:	f240 1173 	movw	r1, #371	; 0x173
 8007042:	2007      	movs	r0, #7
 8007044:	f000 f8bf 	bl	80071c6 <ili9325_WriteReg>
  
  /* Set the Cursor */ 
  ili9325_SetCursor(0, 0);
 8007048:	2100      	movs	r1, #0
 800704a:	2000      	movs	r0, #0
 800704c:	f000 f86d 	bl	800712a <ili9325_SetCursor>
  
  /* Prepare to write GRAM */
  LCD_IO_WriteReg(LCD_REG_34);
 8007050:	2022      	movs	r0, #34	; 0x22
 8007052:	f7ff feed 	bl	8006e30 <LCD_IO_WriteReg>
}
 8007056:	bf00      	nop
 8007058:	bd80      	pop	{r7, pc}

0800705a <ili9325_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9325_DisplayOn(void)
{
 800705a:	b580      	push	{r7, lr}
 800705c:	af00      	add	r7, sp, #0
  /* Power On sequence -------------------------------------------------------*/
  ili9325_WriteReg(LCD_REG_16, 0x0000); /* SAP, BT[3:0], AP, DSTB, SLP, STB */
 800705e:	2100      	movs	r1, #0
 8007060:	2010      	movs	r0, #16
 8007062:	f000 f8b0 	bl	80071c6 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_17, 0x0000); /* DC1[2:0], DC0[2:0], VC[2:0] */
 8007066:	2100      	movs	r1, #0
 8007068:	2011      	movs	r0, #17
 800706a:	f000 f8ac 	bl	80071c6 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_18, 0x0000); /* VREG1OUT voltage */
 800706e:	2100      	movs	r1, #0
 8007070:	2012      	movs	r0, #18
 8007072:	f000 f8a8 	bl	80071c6 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_19, 0x0000); /* VDV[4:0] for VCOM amplitude*/
 8007076:	2100      	movs	r1, #0
 8007078:	2013      	movs	r0, #19
 800707a:	f000 f8a4 	bl	80071c6 <ili9325_WriteReg>

  ili9325_WriteReg(LCD_REG_16, 0x17B0); /* SAP, BT[3:0], AP, DSTB, SLP, STB */
 800707e:	f241 71b0 	movw	r1, #6064	; 0x17b0
 8007082:	2010      	movs	r0, #16
 8007084:	f000 f89f 	bl	80071c6 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_17, 0x0137); /* DC1[2:0], DC0[2:0], VC[2:0] */
 8007088:	f240 1137 	movw	r1, #311	; 0x137
 800708c:	2011      	movs	r0, #17
 800708e:	f000 f89a 	bl	80071c6 <ili9325_WriteReg>

  ili9325_WriteReg(LCD_REG_18, 0x0139); /* VREG1OUT voltage */
 8007092:	f240 1139 	movw	r1, #313	; 0x139
 8007096:	2012      	movs	r0, #18
 8007098:	f000 f895 	bl	80071c6 <ili9325_WriteReg>

  ili9325_WriteReg(LCD_REG_19, 0x1d00); /* VDV[4:0] for VCOM amplitude */
 800709c:	f44f 51e8 	mov.w	r1, #7424	; 0x1d00
 80070a0:	2013      	movs	r0, #19
 80070a2:	f000 f890 	bl	80071c6 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_41, 0x0013); /* VCM[4:0] for VCOMH */
 80070a6:	2113      	movs	r1, #19
 80070a8:	2029      	movs	r0, #41	; 0x29
 80070aa:	f000 f88c 	bl	80071c6 <ili9325_WriteReg>
 
  /* Display On */
  ili9325_WriteReg(LCD_REG_7, 0x0173); /* 262K color and display ON */
 80070ae:	f240 1173 	movw	r1, #371	; 0x173
 80070b2:	2007      	movs	r0, #7
 80070b4:	f000 f887 	bl	80071c6 <ili9325_WriteReg>
}
 80070b8:	bf00      	nop
 80070ba:	bd80      	pop	{r7, pc}

080070bc <ili9325_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9325_DisplayOff(void)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	af00      	add	r7, sp, #0
  /* Power Off sequence ------------------------------------------------------*/
  ili9325_WriteReg(LCD_REG_16, 0x0000); /* SAP, BT[3:0], AP, DSTB, SLP, STB */
 80070c0:	2100      	movs	r1, #0
 80070c2:	2010      	movs	r0, #16
 80070c4:	f000 f87f 	bl	80071c6 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_17, 0x0000); /* DC1[2:0], DC0[2:0], VC[2:0] */
 80070c8:	2100      	movs	r1, #0
 80070ca:	2011      	movs	r0, #17
 80070cc:	f000 f87b 	bl	80071c6 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_18, 0x0000); /* VREG1OUT voltage */
 80070d0:	2100      	movs	r1, #0
 80070d2:	2012      	movs	r0, #18
 80070d4:	f000 f877 	bl	80071c6 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_19, 0x0000); /* VDV[4:0] for VCOM amplitude*/
 80070d8:	2100      	movs	r1, #0
 80070da:	2013      	movs	r0, #19
 80070dc:	f000 f873 	bl	80071c6 <ili9325_WriteReg>
  
  ili9325_WriteReg(LCD_REG_41, 0x0000); /* VCM[4:0] for VCOMH */
 80070e0:	2100      	movs	r1, #0
 80070e2:	2029      	movs	r0, #41	; 0x29
 80070e4:	f000 f86f 	bl	80071c6 <ili9325_WriteReg>
  
  /* Display Off */
  ili9325_WriteReg(LCD_REG_7, 0x0); 
 80070e8:	2100      	movs	r1, #0
 80070ea:	2007      	movs	r0, #7
 80070ec:	f000 f86b 	bl	80071c6 <ili9325_WriteReg>
}
 80070f0:	bf00      	nop
 80070f2:	bd80      	pop	{r7, pc}

080070f4 <ili9325_GetLcdPixelWidth>:
  * @brief  Get the LCD pixel Width.
  * @param  None
  * @retval The Lcd Pixel Width
  */
uint16_t ili9325_GetLcdPixelWidth(void)
{
 80070f4:	b480      	push	{r7}
 80070f6:	af00      	add	r7, sp, #0
 return (uint16_t)320;
 80070f8:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	46bd      	mov	sp, r7
 8007100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007104:	4770      	bx	lr

08007106 <ili9325_GetLcdPixelHeight>:
  * @brief  Get the LCD pixel Height.
  * @param  None
  * @retval The Lcd Pixel Height
  */
uint16_t ili9325_GetLcdPixelHeight(void)
{
 8007106:	b480      	push	{r7}
 8007108:	af00      	add	r7, sp, #0
 return (uint16_t)240;
 800710a:	23f0      	movs	r3, #240	; 0xf0
}
 800710c:	4618      	mov	r0, r3
 800710e:	46bd      	mov	sp, r7
 8007110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007114:	4770      	bx	lr

08007116 <ili9325_ReadID>:
  * @brief  Get the ILI9325 ID.
  * @param  None
  * @retval The ILI9325 ID 
  */
uint16_t ili9325_ReadID(void)
{
 8007116:	b580      	push	{r7, lr}
 8007118:	af00      	add	r7, sp, #0
  LCD_IO_Init(); 
 800711a:	f7ff fe5f 	bl	8006ddc <LCD_IO_Init>
  return (ili9325_ReadReg(0x00));
 800711e:	2000      	movs	r0, #0
 8007120:	f000 f866 	bl	80071f0 <ili9325_ReadReg>
 8007124:	4603      	mov	r3, r0
}
 8007126:	4618      	mov	r0, r3
 8007128:	bd80      	pop	{r7, pc}

0800712a <ili9325_SetCursor>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval None
  */
void ili9325_SetCursor(uint16_t Xpos, uint16_t Ypos)
{
 800712a:	b580      	push	{r7, lr}
 800712c:	b082      	sub	sp, #8
 800712e:	af00      	add	r7, sp, #0
 8007130:	4603      	mov	r3, r0
 8007132:	460a      	mov	r2, r1
 8007134:	80fb      	strh	r3, [r7, #6]
 8007136:	4613      	mov	r3, r2
 8007138:	80bb      	strh	r3, [r7, #4]
//  ili9325_WriteReg(LCD_REG_32, Ypos);
//  ili9325_WriteReg(LCD_REG_33, (ILI9325_LCD_PIXEL_WIDTH - 1 - Xpos));

  ili9325_WriteReg(LCD_REG_32, (ILI9325_LCD_PIXEL_HEIGHT- 1 - Ypos));
 800713a:	88bb      	ldrh	r3, [r7, #4]
 800713c:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 8007140:	b29b      	uxth	r3, r3
 8007142:	4619      	mov	r1, r3
 8007144:	2020      	movs	r0, #32
 8007146:	f000 f83e 	bl	80071c6 <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_33, Xpos);
 800714a:	88fb      	ldrh	r3, [r7, #6]
 800714c:	4619      	mov	r1, r3
 800714e:	2021      	movs	r0, #33	; 0x21
 8007150:	f000 f839 	bl	80071c6 <ili9325_WriteReg>

}
 8007154:	bf00      	nop
 8007156:	3708      	adds	r7, #8
 8007158:	46bd      	mov	sp, r7
 800715a:	bd80      	pop	{r7, pc}

0800715c <ili9325_WritePixel>:
  * @param  Ypos: specifies the Y position.
  * @param  RGBCode: the RGB pixel color
  * @retval None
  */
void ili9325_WritePixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGBCode)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b082      	sub	sp, #8
 8007160:	af00      	add	r7, sp, #0
 8007162:	4603      	mov	r3, r0
 8007164:	80fb      	strh	r3, [r7, #6]
 8007166:	460b      	mov	r3, r1
 8007168:	80bb      	strh	r3, [r7, #4]
 800716a:	4613      	mov	r3, r2
 800716c:	807b      	strh	r3, [r7, #2]
  /* Set Cursor */
  ili9325_SetCursor(Xpos, Ypos);
 800716e:	88ba      	ldrh	r2, [r7, #4]
 8007170:	88fb      	ldrh	r3, [r7, #6]
 8007172:	4611      	mov	r1, r2
 8007174:	4618      	mov	r0, r3
 8007176:	f7ff ffd8 	bl	800712a <ili9325_SetCursor>
  
  /* Prepare to write GRAM */
  LCD_IO_WriteReg(LCD_REG_34);
 800717a:	2022      	movs	r0, #34	; 0x22
 800717c:	f7ff fe58 	bl	8006e30 <LCD_IO_WriteReg>

  /* Write 16-bit GRAM Reg */
  LCD_IO_WriteMultipleData((uint8_t*)&RGBCode, 2);
 8007180:	1cbb      	adds	r3, r7, #2
 8007182:	2102      	movs	r1, #2
 8007184:	4618      	mov	r0, r3
 8007186:	f7ff fe31 	bl	8006dec <LCD_IO_WriteMultipleData>
}
 800718a:	bf00      	nop
 800718c:	3708      	adds	r7, #8
 800718e:	46bd      	mov	sp, r7
 8007190:	bd80      	pop	{r7, pc}

08007192 <ili9325_ReadPixel>:
  * @brief  Read pixel.
  * @param  None
  * @retval The RGB pixel color
  */
uint16_t ili9325_ReadPixel(uint16_t Xpos, uint16_t Ypos)
{
 8007192:	b580      	push	{r7, lr}
 8007194:	b082      	sub	sp, #8
 8007196:	af00      	add	r7, sp, #0
 8007198:	4603      	mov	r3, r0
 800719a:	460a      	mov	r2, r1
 800719c:	80fb      	strh	r3, [r7, #6]
 800719e:	4613      	mov	r3, r2
 80071a0:	80bb      	strh	r3, [r7, #4]
  /* Set Cursor */
  ili9325_SetCursor(Xpos, Ypos);
 80071a2:	88ba      	ldrh	r2, [r7, #4]
 80071a4:	88fb      	ldrh	r3, [r7, #6]
 80071a6:	4611      	mov	r1, r2
 80071a8:	4618      	mov	r0, r3
 80071aa:	f7ff ffbe 	bl	800712a <ili9325_SetCursor>
  
  /* Prepare to write GRAM */
  LCD_IO_WriteReg(LCD_REG_34);
 80071ae:	2022      	movs	r0, #34	; 0x22
 80071b0:	f7ff fe3e 	bl	8006e30 <LCD_IO_WriteReg>
  
  /* Dummy read */
  LCD_IO_ReadData();
 80071b4:	f7ff fe4c 	bl	8006e50 <LCD_IO_ReadData>
  
  /* Read 16-bit Reg */
  return (LCD_IO_ReadData());
 80071b8:	f7ff fe4a 	bl	8006e50 <LCD_IO_ReadData>
 80071bc:	4603      	mov	r3, r0
}
 80071be:	4618      	mov	r0, r3
 80071c0:	3708      	adds	r7, #8
 80071c2:	46bd      	mov	sp, r7
 80071c4:	bd80      	pop	{r7, pc}

080071c6 <ili9325_WriteReg>:
  * @param  LCDReg: Address of the selected register.
  * @param  LCDRegValue: Value to write to the selected register.
  * @retval None
  */
void ili9325_WriteReg(uint8_t LCDReg, uint16_t LCDRegValue)
{
 80071c6:	b580      	push	{r7, lr}
 80071c8:	b082      	sub	sp, #8
 80071ca:	af00      	add	r7, sp, #0
 80071cc:	4603      	mov	r3, r0
 80071ce:	460a      	mov	r2, r1
 80071d0:	71fb      	strb	r3, [r7, #7]
 80071d2:	4613      	mov	r3, r2
 80071d4:	80bb      	strh	r3, [r7, #4]
  LCD_IO_WriteReg(LCDReg);
 80071d6:	79fb      	ldrb	r3, [r7, #7]
 80071d8:	4618      	mov	r0, r3
 80071da:	f7ff fe29 	bl	8006e30 <LCD_IO_WriteReg>
  
  /* Write 16-bit GRAM Reg */
  LCD_IO_WriteMultipleData((uint8_t*)&LCDRegValue, 2);
 80071de:	1d3b      	adds	r3, r7, #4
 80071e0:	2102      	movs	r1, #2
 80071e2:	4618      	mov	r0, r3
 80071e4:	f7ff fe02 	bl	8006dec <LCD_IO_WriteMultipleData>
}
 80071e8:	bf00      	nop
 80071ea:	3708      	adds	r7, #8
 80071ec:	46bd      	mov	sp, r7
 80071ee:	bd80      	pop	{r7, pc}

080071f0 <ili9325_ReadReg>:
  * @brief  Reads the selected LCD Register.
  * @param  LCDReg: address of the selected register.
  * @retval LCD Register Value.
  */
uint16_t ili9325_ReadReg(uint8_t LCDReg)
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b082      	sub	sp, #8
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	4603      	mov	r3, r0
 80071f8:	71fb      	strb	r3, [r7, #7]
  /* Write 16-bit Index (then Read Reg) */
  LCD_IO_WriteReg(LCDReg);
 80071fa:	79fb      	ldrb	r3, [r7, #7]
 80071fc:	4618      	mov	r0, r3
 80071fe:	f7ff fe17 	bl	8006e30 <LCD_IO_WriteReg>

  /* Read 16-bit Reg */
  return (LCD_IO_ReadData());
 8007202:	f7ff fe25 	bl	8006e50 <LCD_IO_ReadData>
 8007206:	4603      	mov	r3, r0
}
 8007208:	4618      	mov	r0, r3
 800720a:	3708      	adds	r7, #8
 800720c:	46bd      	mov	sp, r7
 800720e:	bd80      	pop	{r7, pc}

08007210 <ili9325_SetDisplayWindow>:
  * @param  Height: display window height.
  * @param  Width:  display window width.
  * @retval None
  */
void ili9325_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8007210:	b590      	push	{r4, r7, lr}
 8007212:	b083      	sub	sp, #12
 8007214:	af00      	add	r7, sp, #0
 8007216:	4604      	mov	r4, r0
 8007218:	4608      	mov	r0, r1
 800721a:	4611      	mov	r1, r2
 800721c:	461a      	mov	r2, r3
 800721e:	4623      	mov	r3, r4
 8007220:	80fb      	strh	r3, [r7, #6]
 8007222:	4603      	mov	r3, r0
 8007224:	80bb      	strh	r3, [r7, #4]
 8007226:	460b      	mov	r3, r1
 8007228:	807b      	strh	r3, [r7, #2]
 800722a:	4613      	mov	r3, r2
 800722c:	803b      	strh	r3, [r7, #0]
//  ili9325_WriteReg(LCD_REG_82, ILI9325_LCD_PIXEL_WIDTH - Xpos - Width);
//  /* Vertical GRAM End Address */
//  ili9325_WriteReg(LCD_REG_83, ILI9325_LCD_PIXEL_WIDTH - Xpos - 1);   
  
  /* Horizontal GRAM Start Address */
  ili9325_WriteReg(LCD_REG_80, (ILI9325_LCD_PIXEL_HEIGHT - Ypos - Height));
 800722e:	88bb      	ldrh	r3, [r7, #4]
 8007230:	425b      	negs	r3, r3
 8007232:	b29a      	uxth	r2, r3
 8007234:	883b      	ldrh	r3, [r7, #0]
 8007236:	1ad3      	subs	r3, r2, r3
 8007238:	b29b      	uxth	r3, r3
 800723a:	33f0      	adds	r3, #240	; 0xf0
 800723c:	b29b      	uxth	r3, r3
 800723e:	4619      	mov	r1, r3
 8007240:	2050      	movs	r0, #80	; 0x50
 8007242:	f7ff ffc0 	bl	80071c6 <ili9325_WriteReg>
  /* Horizontal GRAM End Address */
  ili9325_WriteReg(LCD_REG_81, (ILI9325_LCD_PIXEL_HEIGHT - Ypos - 1));
 8007246:	88bb      	ldrh	r3, [r7, #4]
 8007248:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 800724c:	b29b      	uxth	r3, r3
 800724e:	4619      	mov	r1, r3
 8007250:	2051      	movs	r0, #81	; 0x51
 8007252:	f7ff ffb8 	bl	80071c6 <ili9325_WriteReg>
  
  /* Vertical GRAM Start Address */
  ili9325_WriteReg(LCD_REG_82,  Xpos);
 8007256:	88fb      	ldrh	r3, [r7, #6]
 8007258:	4619      	mov	r1, r3
 800725a:	2052      	movs	r0, #82	; 0x52
 800725c:	f7ff ffb3 	bl	80071c6 <ili9325_WriteReg>
  /* Vertical GRAM End Address */
  ili9325_WriteReg(LCD_REG_83, (Xpos + Width - 1));
 8007260:	88fa      	ldrh	r2, [r7, #6]
 8007262:	887b      	ldrh	r3, [r7, #2]
 8007264:	4413      	add	r3, r2
 8007266:	b29b      	uxth	r3, r3
 8007268:	3b01      	subs	r3, #1
 800726a:	b29b      	uxth	r3, r3
 800726c:	4619      	mov	r1, r3
 800726e:	2053      	movs	r0, #83	; 0x53
 8007270:	f7ff ffa9 	bl	80071c6 <ili9325_WriteReg>
  
}
 8007274:	bf00      	nop
 8007276:	370c      	adds	r7, #12
 8007278:	46bd      	mov	sp, r7
 800727a:	bd90      	pop	{r4, r7, pc}

0800727c <ili9325_DrawHLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.  
  * @retval None
  */
void ili9325_DrawHLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 800727c:	b590      	push	{r4, r7, lr}
 800727e:	b085      	sub	sp, #20
 8007280:	af00      	add	r7, sp, #0
 8007282:	4604      	mov	r4, r0
 8007284:	4608      	mov	r0, r1
 8007286:	4611      	mov	r1, r2
 8007288:	461a      	mov	r2, r3
 800728a:	4623      	mov	r3, r4
 800728c:	80fb      	strh	r3, [r7, #6]
 800728e:	4603      	mov	r3, r0
 8007290:	80bb      	strh	r3, [r7, #4]
 8007292:	460b      	mov	r3, r1
 8007294:	807b      	strh	r3, [r7, #2]
 8007296:	4613      	mov	r3, r2
 8007298:	803b      	strh	r3, [r7, #0]
  uint16_t counter = 0;
 800729a:	2300      	movs	r3, #0
 800729c:	81fb      	strh	r3, [r7, #14]
  
  /* Set Cursor */
  ili9325_SetCursor(Xpos, Ypos); 
 800729e:	887a      	ldrh	r2, [r7, #2]
 80072a0:	88bb      	ldrh	r3, [r7, #4]
 80072a2:	4611      	mov	r1, r2
 80072a4:	4618      	mov	r0, r3
 80072a6:	f7ff ff40 	bl	800712a <ili9325_SetCursor>
  
  /* Prepare to write GRAM */
  LCD_IO_WriteReg(LCD_REG_34);
 80072aa:	2022      	movs	r0, #34	; 0x22
 80072ac:	f7ff fdc0 	bl	8006e30 <LCD_IO_WriteReg>

  /* Sent a complete line */
  for(counter = 0; counter < Length; counter++)
 80072b0:	2300      	movs	r3, #0
 80072b2:	81fb      	strh	r3, [r7, #14]
 80072b4:	e007      	b.n	80072c6 <ili9325_DrawHLine+0x4a>
  {
    ArrayRGB[counter] = RGBCode;
 80072b6:	89fb      	ldrh	r3, [r7, #14]
 80072b8:	490a      	ldr	r1, [pc, #40]	; (80072e4 <ili9325_DrawHLine+0x68>)
 80072ba:	88fa      	ldrh	r2, [r7, #6]
 80072bc:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
  for(counter = 0; counter < Length; counter++)
 80072c0:	89fb      	ldrh	r3, [r7, #14]
 80072c2:	3301      	adds	r3, #1
 80072c4:	81fb      	strh	r3, [r7, #14]
 80072c6:	89fa      	ldrh	r2, [r7, #14]
 80072c8:	883b      	ldrh	r3, [r7, #0]
 80072ca:	429a      	cmp	r2, r3
 80072cc:	d3f3      	bcc.n	80072b6 <ili9325_DrawHLine+0x3a>
  }  

  LCD_IO_WriteMultipleData((uint8_t*)&ArrayRGB[0], Length * 2);
 80072ce:	883b      	ldrh	r3, [r7, #0]
 80072d0:	005b      	lsls	r3, r3, #1
 80072d2:	4619      	mov	r1, r3
 80072d4:	4803      	ldr	r0, [pc, #12]	; (80072e4 <ili9325_DrawHLine+0x68>)
 80072d6:	f7ff fd89 	bl	8006dec <LCD_IO_WriteMultipleData>
}
 80072da:	bf00      	nop
 80072dc:	3714      	adds	r7, #20
 80072de:	46bd      	mov	sp, r7
 80072e0:	bd90      	pop	{r4, r7, pc}
 80072e2:	bf00      	nop
 80072e4:	20000ca4 	.word	0x20000ca4

080072e8 <ili9325_DrawVLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.  
  * @retval None
  */
void ili9325_DrawVLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 80072e8:	b590      	push	{r4, r7, lr}
 80072ea:	b085      	sub	sp, #20
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	4604      	mov	r4, r0
 80072f0:	4608      	mov	r0, r1
 80072f2:	4611      	mov	r1, r2
 80072f4:	461a      	mov	r2, r3
 80072f6:	4623      	mov	r3, r4
 80072f8:	80fb      	strh	r3, [r7, #6]
 80072fa:	4603      	mov	r3, r0
 80072fc:	80bb      	strh	r3, [r7, #4]
 80072fe:	460b      	mov	r3, r1
 8007300:	807b      	strh	r3, [r7, #2]
 8007302:	4613      	mov	r3, r2
 8007304:	803b      	strh	r3, [r7, #0]
  uint16_t counter = 0;
 8007306:	2300      	movs	r3, #0
 8007308:	81fb      	strh	r3, [r7, #14]

  /* set GRAM write direction and BGR = 1 */
  /* I/D=00 (Horizontal : increment, Vertical : decrement) */
  /* AM=1 (address is updated in vertical writing direction) */
  ili9325_WriteReg(LCD_REG_3, 0x1020);
 800730a:	f44f 5181 	mov.w	r1, #4128	; 0x1020
 800730e:	2003      	movs	r0, #3
 8007310:	f7ff ff59 	bl	80071c6 <ili9325_WriteReg>
  
  /* Set Cursor */
  ili9325_SetCursor(Xpos, Ypos);
 8007314:	887a      	ldrh	r2, [r7, #2]
 8007316:	88bb      	ldrh	r3, [r7, #4]
 8007318:	4611      	mov	r1, r2
 800731a:	4618      	mov	r0, r3
 800731c:	f7ff ff05 	bl	800712a <ili9325_SetCursor>
  
  /* Prepare to write GRAM */
  LCD_IO_WriteReg(LCD_REG_34);
 8007320:	2022      	movs	r0, #34	; 0x22
 8007322:	f7ff fd85 	bl	8006e30 <LCD_IO_WriteReg>

  /* Fill a complete vertical line */
  for(counter = 0; counter < Length; counter++)
 8007326:	2300      	movs	r3, #0
 8007328:	81fb      	strh	r3, [r7, #14]
 800732a:	e007      	b.n	800733c <ili9325_DrawVLine+0x54>
  {
    ArrayRGB[counter] = RGBCode;
 800732c:	89fb      	ldrh	r3, [r7, #14]
 800732e:	490d      	ldr	r1, [pc, #52]	; (8007364 <ili9325_DrawVLine+0x7c>)
 8007330:	88fa      	ldrh	r2, [r7, #6]
 8007332:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
  for(counter = 0; counter < Length; counter++)
 8007336:	89fb      	ldrh	r3, [r7, #14]
 8007338:	3301      	adds	r3, #1
 800733a:	81fb      	strh	r3, [r7, #14]
 800733c:	89fa      	ldrh	r2, [r7, #14]
 800733e:	883b      	ldrh	r3, [r7, #0]
 8007340:	429a      	cmp	r2, r3
 8007342:	d3f3      	bcc.n	800732c <ili9325_DrawVLine+0x44>
  }
  
  /* Write 16-bit GRAM Reg */
  LCD_IO_WriteMultipleData((uint8_t*)&ArrayRGB[0], Length * 2);
 8007344:	883b      	ldrh	r3, [r7, #0]
 8007346:	005b      	lsls	r3, r3, #1
 8007348:	4619      	mov	r1, r3
 800734a:	4806      	ldr	r0, [pc, #24]	; (8007364 <ili9325_DrawVLine+0x7c>)
 800734c:	f7ff fd4e 	bl	8006dec <LCD_IO_WriteMultipleData>
  
  /* set GRAM write direction and BGR = 1 */
  /* I/D=00 (Horizontal : increment, Vertical : decrement) */
  /* AM=1 (address is updated in vertical writing direction) */
  ili9325_WriteReg(LCD_REG_3, 0x1028);  
 8007350:	f241 0128 	movw	r1, #4136	; 0x1028
 8007354:	2003      	movs	r0, #3
 8007356:	f7ff ff36 	bl	80071c6 <ili9325_WriteReg>
}
 800735a:	bf00      	nop
 800735c:	3714      	adds	r7, #20
 800735e:	46bd      	mov	sp, r7
 8007360:	bd90      	pop	{r4, r7, pc}
 8007362:	bf00      	nop
 8007364:	20000ca4 	.word	0x20000ca4

08007368 <ili9325_DrawBitmap>:
  * @param  Xpos: Bmp X position in the LCD
  * @param  Ypos: Bmp Y position in the LCD    
  * @retval None
  */
void ili9325_DrawBitmap(uint16_t Xpos, uint16_t Ypos, uint8_t *pbmp)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b084      	sub	sp, #16
 800736c:	af00      	add	r7, sp, #0
 800736e:	4603      	mov	r3, r0
 8007370:	603a      	str	r2, [r7, #0]
 8007372:	80fb      	strh	r3, [r7, #6]
 8007374:	460b      	mov	r3, r1
 8007376:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, size = 0;
 8007378:	2300      	movs	r3, #0
 800737a:	60fb      	str	r3, [r7, #12]
 800737c:	2300      	movs	r3, #0
 800737e:	60bb      	str	r3, [r7, #8]
  /* Read bitmap size */
  size = *(volatile uint16_t *) (pbmp + 2);
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	3302      	adds	r3, #2
 8007384:	881b      	ldrh	r3, [r3, #0]
 8007386:	b29b      	uxth	r3, r3
 8007388:	60bb      	str	r3, [r7, #8]
  size |= (*(volatile uint16_t *) (pbmp + 4)) << 16;
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	3304      	adds	r3, #4
 800738e:	881b      	ldrh	r3, [r3, #0]
 8007390:	b29b      	uxth	r3, r3
 8007392:	041b      	lsls	r3, r3, #16
 8007394:	461a      	mov	r2, r3
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	4313      	orrs	r3, r2
 800739a:	60bb      	str	r3, [r7, #8]
  /* Get bitmap data address offset */
  index = *(volatile uint16_t *) (pbmp + 10);
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	330a      	adds	r3, #10
 80073a0:	881b      	ldrh	r3, [r3, #0]
 80073a2:	b29b      	uxth	r3, r3
 80073a4:	60fb      	str	r3, [r7, #12]
  index |= (*(volatile uint16_t *) (pbmp + 12)) << 16;
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	330c      	adds	r3, #12
 80073aa:	881b      	ldrh	r3, [r3, #0]
 80073ac:	b29b      	uxth	r3, r3
 80073ae:	041b      	lsls	r3, r3, #16
 80073b0:	461a      	mov	r2, r3
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	4313      	orrs	r3, r2
 80073b6:	60fb      	str	r3, [r7, #12]
  size = (size - index)/2;
 80073b8:	68ba      	ldr	r2, [r7, #8]
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	1ad3      	subs	r3, r2, r3
 80073be:	085b      	lsrs	r3, r3, #1
 80073c0:	60bb      	str	r3, [r7, #8]
  pbmp += index;
 80073c2:	683a      	ldr	r2, [r7, #0]
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	4413      	add	r3, r2
 80073c8:	603b      	str	r3, [r7, #0]
  /* Set GRAM write direction and BGR = 1 */
  /* I/D=00 (Horizontal : decrement, Vertical : decrement) */
  /* AM=1 (address is updated in vertical writing direction) */
  ili9325_WriteReg(LCD_REG_3, 0x1038);
 80073ca:	f241 0138 	movw	r1, #4152	; 0x1038
 80073ce:	2003      	movs	r0, #3
 80073d0:	f7ff fef9 	bl	80071c6 <ili9325_WriteReg>

  /* Set Cursor */
  ili9325_SetCursor(Xpos, Ypos);  
 80073d4:	88ba      	ldrh	r2, [r7, #4]
 80073d6:	88fb      	ldrh	r3, [r7, #6]
 80073d8:	4611      	mov	r1, r2
 80073da:	4618      	mov	r0, r3
 80073dc:	f7ff fea5 	bl	800712a <ili9325_SetCursor>
  
  /* Prepare to write GRAM */
  LCD_IO_WriteReg(LCD_REG_34);
 80073e0:	2022      	movs	r0, #34	; 0x22
 80073e2:	f7ff fd25 	bl	8006e30 <LCD_IO_WriteReg>
 
  LCD_IO_WriteMultipleData((uint8_t*)pbmp, size*2);
 80073e6:	68bb      	ldr	r3, [r7, #8]
 80073e8:	005b      	lsls	r3, r3, #1
 80073ea:	4619      	mov	r1, r3
 80073ec:	6838      	ldr	r0, [r7, #0]
 80073ee:	f7ff fcfd 	bl	8006dec <LCD_IO_WriteMultipleData>
 
  /* Set GRAM write direction and BGR = 1 */
  /* I/D = 01 (Horizontal : increment, Vertical : decrement) */
  /* AM = 1 (address is updated in vertical writing direction) */
  ili9325_WriteReg(LCD_REG_3, 0x1028);
 80073f2:	f241 0128 	movw	r1, #4136	; 0x1028
 80073f6:	2003      	movs	r0, #3
 80073f8:	f7ff fee5 	bl	80071c6 <ili9325_WriteReg>
}
 80073fc:	bf00      	nop
 80073fe:	3710      	adds	r7, #16
 8007400:	46bd      	mov	sp, r7
 8007402:	bd80      	pop	{r7, pc}

08007404 <ili9325_DrawRGBImage>:
  * @param  Xsize: Image X size in the LCD
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  */
void ili9325_DrawRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint8_t *pdata)
{
 8007404:	b590      	push	{r4, r7, lr}
 8007406:	b085      	sub	sp, #20
 8007408:	af00      	add	r7, sp, #0
 800740a:	4604      	mov	r4, r0
 800740c:	4608      	mov	r0, r1
 800740e:	4611      	mov	r1, r2
 8007410:	461a      	mov	r2, r3
 8007412:	4623      	mov	r3, r4
 8007414:	80fb      	strh	r3, [r7, #6]
 8007416:	4603      	mov	r3, r0
 8007418:	80bb      	strh	r3, [r7, #4]
 800741a:	460b      	mov	r3, r1
 800741c:	807b      	strh	r3, [r7, #2]
 800741e:	4613      	mov	r3, r2
 8007420:	803b      	strh	r3, [r7, #0]
  uint32_t size = 0;
 8007422:	2300      	movs	r3, #0
 8007424:	60fb      	str	r3, [r7, #12]

  size = (Xsize * Ysize);
 8007426:	887b      	ldrh	r3, [r7, #2]
 8007428:	883a      	ldrh	r2, [r7, #0]
 800742a:	fb02 f303 	mul.w	r3, r2, r3
 800742e:	60fb      	str	r3, [r7, #12]

  /* Set Cursor */
  ili9325_SetCursor(Xpos, Ypos);  
 8007430:	88ba      	ldrh	r2, [r7, #4]
 8007432:	88fb      	ldrh	r3, [r7, #6]
 8007434:	4611      	mov	r1, r2
 8007436:	4618      	mov	r0, r3
 8007438:	f7ff fe77 	bl	800712a <ili9325_SetCursor>
  
  /* Prepare to write GRAM */
  LCD_IO_WriteReg(LCD_REG_34);
 800743c:	2022      	movs	r0, #34	; 0x22
 800743e:	f7ff fcf7 	bl	8006e30 <LCD_IO_WriteReg>
 
  LCD_IO_WriteMultipleData((uint8_t*)pdata, size*2);
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	005b      	lsls	r3, r3, #1
 8007446:	4619      	mov	r1, r3
 8007448:	6a38      	ldr	r0, [r7, #32]
 800744a:	f7ff fccf 	bl	8006dec <LCD_IO_WriteMultipleData>
}
 800744e:	bf00      	nop
 8007450:	3714      	adds	r7, #20
 8007452:	46bd      	mov	sp, r7
 8007454:	bd90      	pop	{r4, r7, pc}
	...

08007458 <ili9325_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void ili9325_Clear(uint16_t Color)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b084      	sub	sp, #16
 800745c:	af00      	add	r7, sp, #0
 800745e:	4603      	mov	r3, r0
 8007460:	80fb      	strh	r3, [r7, #6]
  uint32_t size = ILI9325_LCD_PIXEL_HEIGHT * ILI9325_LCD_PIXEL_WIDTH;
 8007462:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8007466:	60fb      	str	r3, [r7, #12]
  
  /* Set Cursor */
  ili9325_SetCursor(0, 0);  
 8007468:	2100      	movs	r1, #0
 800746a:	2000      	movs	r0, #0
 800746c:	f7ff fe5d 	bl	800712a <ili9325_SetCursor>
  
  /* Prepare to write GRAM */
  LCD_IO_WriteReg(LCD_REG_34);
 8007470:	2022      	movs	r0, #34	; 0x22
 8007472:	f7ff fcdd 	bl	8006e30 <LCD_IO_WriteReg>
  
  while((size--) != 0)
 8007476:	e002      	b.n	800747e <ili9325_Clear+0x26>
  {
    /* Write 16-bit Data */
    LCD_RAM = Color;
 8007478:	4a05      	ldr	r2, [pc, #20]	; (8007490 <ili9325_Clear+0x38>)
 800747a:	88fb      	ldrh	r3, [r7, #6]
 800747c:	8013      	strh	r3, [r2, #0]
  while((size--) != 0)
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	1e5a      	subs	r2, r3, #1
 8007482:	60fa      	str	r2, [r7, #12]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d1f7      	bne.n	8007478 <ili9325_Clear+0x20>
  }
}
 8007488:	bf00      	nop
 800748a:	3710      	adds	r7, #16
 800748c:	46bd      	mov	sp, r7
 800748e:	bd80      	pop	{r7, pc}
 8007490:	60010000 	.word	0x60010000

08007494 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b082      	sub	sp, #8
 8007498:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint16_t linenum = 0;
 800749a:	2300      	movs	r3, #0
 800749c:	80fb      	strh	r3, [r7, #6]
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800749e:	f7fc ffff 	bl	80044a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80074a2:	f000 f81f 	bl	80074e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80074a6:	f000 f8f3 	bl	8007690 <MX_GPIO_Init>
  MX_CRC_Init();
 80074aa:	f000 f87d 	bl	80075a8 <MX_CRC_Init>
  MX_FSMC_Init();
 80074ae:	f000 f9ed 	bl	800788c <MX_FSMC_Init>
  MX_SPI3_Init();
 80074b2:	f000 f88d 	bl	80075d0 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 80074b6:	f000 f8c1 	bl	800763c <MX_USART1_UART_Init>
  MX_X_CUBE_AI_Init();
 80074ba:	f7ff fb3f 	bl	8006b3c <MX_X_CUBE_AI_Init>
  /* USER CODE BEGIN 2 */
  /* Initialize the LCD */
    BSP_LCD_Init();
 80074be:	f000 fa4d 	bl	800795c <BSP_LCD_Init>
    /* Enable the LCD */
    BSP_LCD_DisplayOn();
 80074c2:	f000 fc89 	bl	8007dd8 <BSP_LCD_DisplayOn>
    /* Touch Panel configuration */
    TouchPanel_Calibrate();
 80074c6:	f001 fb27 	bl	8008b18 <TouchPanel_Calibrate>
    BSP_LCD_Clear(LCD_COLOR_WHITE);
 80074ca:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80074ce:	f000 fac3 	bl	8007a58 <BSP_LCD_Clear>
    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80074d2:	2000      	movs	r0, #0
 80074d4:	f000 fa94 	bl	8007a00 <BSP_LCD_SetTextColor>
    BSP_LCD_DrawHLine(100,50,100);
 80074d8:	2264      	movs	r2, #100	; 0x64
 80074da:	2132      	movs	r1, #50	; 0x32
 80074dc:	2064      	movs	r0, #100	; 0x64
 80074de:	f000 fbbb 	bl	8007c58 <BSP_LCD_DrawHLine>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80074e2:	e7fe      	b.n	80074e2 <main+0x4e>

080074e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b094      	sub	sp, #80	; 0x50
 80074e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80074ea:	f107 0320 	add.w	r3, r7, #32
 80074ee:	2230      	movs	r2, #48	; 0x30
 80074f0:	2100      	movs	r1, #0
 80074f2:	4618      	mov	r0, r3
 80074f4:	f001 fbe0 	bl	8008cb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80074f8:	f107 030c 	add.w	r3, r7, #12
 80074fc:	2200      	movs	r2, #0
 80074fe:	601a      	str	r2, [r3, #0]
 8007500:	605a      	str	r2, [r3, #4]
 8007502:	609a      	str	r2, [r3, #8]
 8007504:	60da      	str	r2, [r3, #12]
 8007506:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8007508:	2300      	movs	r3, #0
 800750a:	60bb      	str	r3, [r7, #8]
 800750c:	4b24      	ldr	r3, [pc, #144]	; (80075a0 <SystemClock_Config+0xbc>)
 800750e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007510:	4a23      	ldr	r2, [pc, #140]	; (80075a0 <SystemClock_Config+0xbc>)
 8007512:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007516:	6413      	str	r3, [r2, #64]	; 0x40
 8007518:	4b21      	ldr	r3, [pc, #132]	; (80075a0 <SystemClock_Config+0xbc>)
 800751a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800751c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007520:	60bb      	str	r3, [r7, #8]
 8007522:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8007524:	2300      	movs	r3, #0
 8007526:	607b      	str	r3, [r7, #4]
 8007528:	4b1e      	ldr	r3, [pc, #120]	; (80075a4 <SystemClock_Config+0xc0>)
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	4a1d      	ldr	r2, [pc, #116]	; (80075a4 <SystemClock_Config+0xc0>)
 800752e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007532:	6013      	str	r3, [r2, #0]
 8007534:	4b1b      	ldr	r3, [pc, #108]	; (80075a4 <SystemClock_Config+0xc0>)
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800753c:	607b      	str	r3, [r7, #4]
 800753e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8007540:	2302      	movs	r3, #2
 8007542:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007544:	2301      	movs	r3, #1
 8007546:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8007548:	2310      	movs	r3, #16
 800754a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800754c:	2300      	movs	r3, #0
 800754e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007550:	f107 0320 	add.w	r3, r7, #32
 8007554:	4618      	mov	r0, r3
 8007556:	f7fd fb29 	bl	8004bac <HAL_RCC_OscConfig>
 800755a:	4603      	mov	r3, r0
 800755c:	2b00      	cmp	r3, #0
 800755e:	d001      	beq.n	8007564 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8007560:	f000 f9f4 	bl	800794c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007564:	230f      	movs	r3, #15
 8007566:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8007568:	2300      	movs	r3, #0
 800756a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800756c:	2300      	movs	r3, #0
 800756e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8007570:	2300      	movs	r3, #0
 8007572:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007574:	2300      	movs	r3, #0
 8007576:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8007578:	f107 030c 	add.w	r3, r7, #12
 800757c:	2100      	movs	r1, #0
 800757e:	4618      	mov	r0, r3
 8007580:	f7fd fd56 	bl	8005030 <HAL_RCC_ClockConfig>
 8007584:	4603      	mov	r3, r0
 8007586:	2b00      	cmp	r3, #0
 8007588:	d001      	beq.n	800758e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800758a:	f000 f9df 	bl	800794c <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 800758e:	2200      	movs	r2, #0
 8007590:	2100      	movs	r1, #0
 8007592:	2000      	movs	r0, #0
 8007594:	f7fd fe2e 	bl	80051f4 <HAL_RCC_MCOConfig>
}
 8007598:	bf00      	nop
 800759a:	3750      	adds	r7, #80	; 0x50
 800759c:	46bd      	mov	sp, r7
 800759e:	bd80      	pop	{r7, pc}
 80075a0:	40023800 	.word	0x40023800
 80075a4:	40007000 	.word	0x40007000

080075a8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80075ac:	4b06      	ldr	r3, [pc, #24]	; (80075c8 <MX_CRC_Init+0x20>)
 80075ae:	4a07      	ldr	r2, [pc, #28]	; (80075cc <MX_CRC_Init+0x24>)
 80075b0:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80075b2:	4805      	ldr	r0, [pc, #20]	; (80075c8 <MX_CRC_Init+0x20>)
 80075b4:	f7fd f8ed 	bl	8004792 <HAL_CRC_Init>
 80075b8:	4603      	mov	r3, r0
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d001      	beq.n	80075c2 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80075be:	f000 f9c5 	bl	800794c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80075c2:	bf00      	nop
 80075c4:	bd80      	pop	{r7, pc}
 80075c6:	bf00      	nop
 80075c8:	2000129c 	.word	0x2000129c
 80075cc:	40023000 	.word	0x40023000

080075d0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80075d4:	4b17      	ldr	r3, [pc, #92]	; (8007634 <MX_SPI3_Init+0x64>)
 80075d6:	4a18      	ldr	r2, [pc, #96]	; (8007638 <MX_SPI3_Init+0x68>)
 80075d8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80075da:	4b16      	ldr	r3, [pc, #88]	; (8007634 <MX_SPI3_Init+0x64>)
 80075dc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80075e0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80075e2:	4b14      	ldr	r3, [pc, #80]	; (8007634 <MX_SPI3_Init+0x64>)
 80075e4:	2200      	movs	r2, #0
 80075e6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80075e8:	4b12      	ldr	r3, [pc, #72]	; (8007634 <MX_SPI3_Init+0x64>)
 80075ea:	2200      	movs	r2, #0
 80075ec:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80075ee:	4b11      	ldr	r3, [pc, #68]	; (8007634 <MX_SPI3_Init+0x64>)
 80075f0:	2200      	movs	r2, #0
 80075f2:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80075f4:	4b0f      	ldr	r3, [pc, #60]	; (8007634 <MX_SPI3_Init+0x64>)
 80075f6:	2200      	movs	r2, #0
 80075f8:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80075fa:	4b0e      	ldr	r3, [pc, #56]	; (8007634 <MX_SPI3_Init+0x64>)
 80075fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007600:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007602:	4b0c      	ldr	r3, [pc, #48]	; (8007634 <MX_SPI3_Init+0x64>)
 8007604:	2200      	movs	r2, #0
 8007606:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007608:	4b0a      	ldr	r3, [pc, #40]	; (8007634 <MX_SPI3_Init+0x64>)
 800760a:	2200      	movs	r2, #0
 800760c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800760e:	4b09      	ldr	r3, [pc, #36]	; (8007634 <MX_SPI3_Init+0x64>)
 8007610:	2200      	movs	r2, #0
 8007612:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007614:	4b07      	ldr	r3, [pc, #28]	; (8007634 <MX_SPI3_Init+0x64>)
 8007616:	2200      	movs	r2, #0
 8007618:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800761a:	4b06      	ldr	r3, [pc, #24]	; (8007634 <MX_SPI3_Init+0x64>)
 800761c:	220a      	movs	r2, #10
 800761e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8007620:	4804      	ldr	r0, [pc, #16]	; (8007634 <MX_SPI3_Init+0x64>)
 8007622:	f7fd ff35 	bl	8005490 <HAL_SPI_Init>
 8007626:	4603      	mov	r3, r0
 8007628:	2b00      	cmp	r3, #0
 800762a:	d001      	beq.n	8007630 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 800762c:	f000 f98e 	bl	800794c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8007630:	bf00      	nop
 8007632:	bd80      	pop	{r7, pc}
 8007634:	200012f4 	.word	0x200012f4
 8007638:	40003c00 	.word	0x40003c00

0800763c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8007640:	4b11      	ldr	r3, [pc, #68]	; (8007688 <MX_USART1_UART_Init+0x4c>)
 8007642:	4a12      	ldr	r2, [pc, #72]	; (800768c <MX_USART1_UART_Init+0x50>)
 8007644:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8007646:	4b10      	ldr	r3, [pc, #64]	; (8007688 <MX_USART1_UART_Init+0x4c>)
 8007648:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800764c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800764e:	4b0e      	ldr	r3, [pc, #56]	; (8007688 <MX_USART1_UART_Init+0x4c>)
 8007650:	2200      	movs	r2, #0
 8007652:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8007654:	4b0c      	ldr	r3, [pc, #48]	; (8007688 <MX_USART1_UART_Init+0x4c>)
 8007656:	2200      	movs	r2, #0
 8007658:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800765a:	4b0b      	ldr	r3, [pc, #44]	; (8007688 <MX_USART1_UART_Init+0x4c>)
 800765c:	2200      	movs	r2, #0
 800765e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8007660:	4b09      	ldr	r3, [pc, #36]	; (8007688 <MX_USART1_UART_Init+0x4c>)
 8007662:	220c      	movs	r2, #12
 8007664:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007666:	4b08      	ldr	r3, [pc, #32]	; (8007688 <MX_USART1_UART_Init+0x4c>)
 8007668:	2200      	movs	r2, #0
 800766a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800766c:	4b06      	ldr	r3, [pc, #24]	; (8007688 <MX_USART1_UART_Init+0x4c>)
 800766e:	2200      	movs	r2, #0
 8007670:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8007672:	4805      	ldr	r0, [pc, #20]	; (8007688 <MX_USART1_UART_Init+0x4c>)
 8007674:	f7fe fca4 	bl	8005fc0 <HAL_UART_Init>
 8007678:	4603      	mov	r3, r0
 800767a:	2b00      	cmp	r3, #0
 800767c:	d001      	beq.n	8007682 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800767e:	f000 f965 	bl	800794c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8007682:	bf00      	nop
 8007684:	bd80      	pop	{r7, pc}
 8007686:	bf00      	nop
 8007688:	2000134c 	.word	0x2000134c
 800768c:	40011000 	.word	0x40011000

08007690 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b08e      	sub	sp, #56	; 0x38
 8007694:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007696:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800769a:	2200      	movs	r2, #0
 800769c:	601a      	str	r2, [r3, #0]
 800769e:	605a      	str	r2, [r3, #4]
 80076a0:	609a      	str	r2, [r3, #8]
 80076a2:	60da      	str	r2, [r3, #12]
 80076a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80076a6:	2300      	movs	r3, #0
 80076a8:	623b      	str	r3, [r7, #32]
 80076aa:	4b72      	ldr	r3, [pc, #456]	; (8007874 <MX_GPIO_Init+0x1e4>)
 80076ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076ae:	4a71      	ldr	r2, [pc, #452]	; (8007874 <MX_GPIO_Init+0x1e4>)
 80076b0:	f043 0310 	orr.w	r3, r3, #16
 80076b4:	6313      	str	r3, [r2, #48]	; 0x30
 80076b6:	4b6f      	ldr	r3, [pc, #444]	; (8007874 <MX_GPIO_Init+0x1e4>)
 80076b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076ba:	f003 0310 	and.w	r3, r3, #16
 80076be:	623b      	str	r3, [r7, #32]
 80076c0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80076c2:	2300      	movs	r3, #0
 80076c4:	61fb      	str	r3, [r7, #28]
 80076c6:	4b6b      	ldr	r3, [pc, #428]	; (8007874 <MX_GPIO_Init+0x1e4>)
 80076c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076ca:	4a6a      	ldr	r2, [pc, #424]	; (8007874 <MX_GPIO_Init+0x1e4>)
 80076cc:	f043 0320 	orr.w	r3, r3, #32
 80076d0:	6313      	str	r3, [r2, #48]	; 0x30
 80076d2:	4b68      	ldr	r3, [pc, #416]	; (8007874 <MX_GPIO_Init+0x1e4>)
 80076d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076d6:	f003 0320 	and.w	r3, r3, #32
 80076da:	61fb      	str	r3, [r7, #28]
 80076dc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80076de:	2300      	movs	r3, #0
 80076e0:	61bb      	str	r3, [r7, #24]
 80076e2:	4b64      	ldr	r3, [pc, #400]	; (8007874 <MX_GPIO_Init+0x1e4>)
 80076e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076e6:	4a63      	ldr	r2, [pc, #396]	; (8007874 <MX_GPIO_Init+0x1e4>)
 80076e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076ec:	6313      	str	r3, [r2, #48]	; 0x30
 80076ee:	4b61      	ldr	r3, [pc, #388]	; (8007874 <MX_GPIO_Init+0x1e4>)
 80076f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076f6:	61bb      	str	r3, [r7, #24]
 80076f8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80076fa:	2300      	movs	r3, #0
 80076fc:	617b      	str	r3, [r7, #20]
 80076fe:	4b5d      	ldr	r3, [pc, #372]	; (8007874 <MX_GPIO_Init+0x1e4>)
 8007700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007702:	4a5c      	ldr	r2, [pc, #368]	; (8007874 <MX_GPIO_Init+0x1e4>)
 8007704:	f043 0304 	orr.w	r3, r3, #4
 8007708:	6313      	str	r3, [r2, #48]	; 0x30
 800770a:	4b5a      	ldr	r3, [pc, #360]	; (8007874 <MX_GPIO_Init+0x1e4>)
 800770c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800770e:	f003 0304 	and.w	r3, r3, #4
 8007712:	617b      	str	r3, [r7, #20]
 8007714:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007716:	2300      	movs	r3, #0
 8007718:	613b      	str	r3, [r7, #16]
 800771a:	4b56      	ldr	r3, [pc, #344]	; (8007874 <MX_GPIO_Init+0x1e4>)
 800771c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800771e:	4a55      	ldr	r2, [pc, #340]	; (8007874 <MX_GPIO_Init+0x1e4>)
 8007720:	f043 0308 	orr.w	r3, r3, #8
 8007724:	6313      	str	r3, [r2, #48]	; 0x30
 8007726:	4b53      	ldr	r3, [pc, #332]	; (8007874 <MX_GPIO_Init+0x1e4>)
 8007728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800772a:	f003 0308 	and.w	r3, r3, #8
 800772e:	613b      	str	r3, [r7, #16]
 8007730:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8007732:	2300      	movs	r3, #0
 8007734:	60fb      	str	r3, [r7, #12]
 8007736:	4b4f      	ldr	r3, [pc, #316]	; (8007874 <MX_GPIO_Init+0x1e4>)
 8007738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800773a:	4a4e      	ldr	r2, [pc, #312]	; (8007874 <MX_GPIO_Init+0x1e4>)
 800773c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007740:	6313      	str	r3, [r2, #48]	; 0x30
 8007742:	4b4c      	ldr	r3, [pc, #304]	; (8007874 <MX_GPIO_Init+0x1e4>)
 8007744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007746:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800774a:	60fb      	str	r3, [r7, #12]
 800774c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800774e:	2300      	movs	r3, #0
 8007750:	60bb      	str	r3, [r7, #8]
 8007752:	4b48      	ldr	r3, [pc, #288]	; (8007874 <MX_GPIO_Init+0x1e4>)
 8007754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007756:	4a47      	ldr	r2, [pc, #284]	; (8007874 <MX_GPIO_Init+0x1e4>)
 8007758:	f043 0301 	orr.w	r3, r3, #1
 800775c:	6313      	str	r3, [r2, #48]	; 0x30
 800775e:	4b45      	ldr	r3, [pc, #276]	; (8007874 <MX_GPIO_Init+0x1e4>)
 8007760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007762:	f003 0301 	and.w	r3, r3, #1
 8007766:	60bb      	str	r3, [r7, #8]
 8007768:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800776a:	2300      	movs	r3, #0
 800776c:	607b      	str	r3, [r7, #4]
 800776e:	4b41      	ldr	r3, [pc, #260]	; (8007874 <MX_GPIO_Init+0x1e4>)
 8007770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007772:	4a40      	ldr	r2, [pc, #256]	; (8007874 <MX_GPIO_Init+0x1e4>)
 8007774:	f043 0302 	orr.w	r3, r3, #2
 8007778:	6313      	str	r3, [r2, #48]	; 0x30
 800777a:	4b3e      	ldr	r3, [pc, #248]	; (8007874 <MX_GPIO_Init+0x1e4>)
 800777c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800777e:	f003 0302 	and.w	r3, r3, #2
 8007782:	607b      	str	r3, [r7, #4]
 8007784:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(A23_GPIO_Port, A23_Pin, GPIO_PIN_SET);
 8007786:	2201      	movs	r2, #1
 8007788:	2104      	movs	r1, #4
 800778a:	483b      	ldr	r0, [pc, #236]	; (8007878 <MX_GPIO_Init+0x1e8>)
 800778c:	f7fd f9f4 	bl	8004b78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BL_PWM_GPIO_Port, BL_PWM_Pin, GPIO_PIN_SET);
 8007790:	2201      	movs	r2, #1
 8007792:	2180      	movs	r1, #128	; 0x80
 8007794:	4839      	ldr	r0, [pc, #228]	; (800787c <MX_GPIO_Init+0x1ec>)
 8007796:	f7fd f9ef 	bl	8004b78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCDTP_CS_GPIO_Port, LCDTP_CS_Pin, GPIO_PIN_RESET);
 800779a:	2200      	movs	r2, #0
 800779c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80077a0:	4837      	ldr	r0, [pc, #220]	; (8007880 <MX_GPIO_Init+0x1f0>)
 80077a2:	f7fd f9e9 	bl	8004b78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 80077a6:	2200      	movs	r2, #0
 80077a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80077ac:	4835      	ldr	r0, [pc, #212]	; (8007884 <MX_GPIO_Init+0x1f4>)
 80077ae:	f7fd f9e3 	bl	8004b78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(A24_GPIO_Port, A24_Pin, GPIO_PIN_SET);
 80077b2:	2201      	movs	r2, #1
 80077b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80077b8:	4832      	ldr	r0, [pc, #200]	; (8007884 <MX_GPIO_Init+0x1f4>)
 80077ba:	f7fd f9dd 	bl	8004b78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : A23_Pin */
  GPIO_InitStruct.Pin = A23_Pin;
 80077be:	2304      	movs	r3, #4
 80077c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80077c2:	2301      	movs	r3, #1
 80077c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077c6:	2300      	movs	r3, #0
 80077c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80077ca:	2300      	movs	r3, #0
 80077cc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(A23_GPIO_Port, &GPIO_InitStruct);
 80077ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80077d2:	4619      	mov	r1, r3
 80077d4:	4828      	ldr	r0, [pc, #160]	; (8007878 <MX_GPIO_Init+0x1e8>)
 80077d6:	f7fd f81d 	bl	8004814 <HAL_GPIO_Init>

  /*Configure GPIO pin : BL_PWM_Pin */
  GPIO_InitStruct.Pin = BL_PWM_Pin;
 80077da:	2380      	movs	r3, #128	; 0x80
 80077dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80077de:	2301      	movs	r3, #1
 80077e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077e2:	2300      	movs	r3, #0
 80077e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80077e6:	2300      	movs	r3, #0
 80077e8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(BL_PWM_GPIO_Port, &GPIO_InitStruct);
 80077ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80077ee:	4619      	mov	r1, r3
 80077f0:	4822      	ldr	r0, [pc, #136]	; (800787c <MX_GPIO_Init+0x1ec>)
 80077f2:	f7fd f80f 	bl	8004814 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCDTP_IRQ_Pin */
  GPIO_InitStruct.Pin = LCDTP_IRQ_Pin;
 80077f6:	2320      	movs	r3, #32
 80077f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80077fa:	2300      	movs	r3, #0
 80077fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077fe:	2300      	movs	r3, #0
 8007800:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(LCDTP_IRQ_GPIO_Port, &GPIO_InitStruct);
 8007802:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007806:	4619      	mov	r1, r3
 8007808:	481f      	ldr	r0, [pc, #124]	; (8007888 <MX_GPIO_Init+0x1f8>)
 800780a:	f7fd f803 	bl	8004814 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800780e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007812:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007814:	2302      	movs	r3, #2
 8007816:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007818:	2300      	movs	r3, #0
 800781a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800781c:	2300      	movs	r3, #0
 800781e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8007820:	2300      	movs	r3, #0
 8007822:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007824:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007828:	4619      	mov	r1, r3
 800782a:	4815      	ldr	r0, [pc, #84]	; (8007880 <MX_GPIO_Init+0x1f0>)
 800782c:	f7fc fff2 	bl	8004814 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCDTP_CS_Pin */
  GPIO_InitStruct.Pin = LCDTP_CS_Pin;
 8007830:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007834:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007836:	2301      	movs	r3, #1
 8007838:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800783a:	2300      	movs	r3, #0
 800783c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800783e:	2300      	movs	r3, #0
 8007840:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCDTP_CS_GPIO_Port, &GPIO_InitStruct);
 8007842:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007846:	4619      	mov	r1, r3
 8007848:	480d      	ldr	r0, [pc, #52]	; (8007880 <MX_GPIO_Init+0x1f0>)
 800784a:	f7fc ffe3 	bl	8004814 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CS_Pin A24_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|A24_Pin;
 800784e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8007852:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007854:	2301      	movs	r3, #1
 8007856:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007858:	2300      	movs	r3, #0
 800785a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800785c:	2300      	movs	r3, #0
 800785e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8007860:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007864:	4619      	mov	r1, r3
 8007866:	4807      	ldr	r0, [pc, #28]	; (8007884 <MX_GPIO_Init+0x1f4>)
 8007868:	f7fc ffd4 	bl	8004814 <HAL_GPIO_Init>

}
 800786c:	bf00      	nop
 800786e:	3738      	adds	r7, #56	; 0x38
 8007870:	46bd      	mov	sp, r7
 8007872:	bd80      	pop	{r7, pc}
 8007874:	40023800 	.word	0x40023800
 8007878:	40021000 	.word	0x40021000
 800787c:	40021400 	.word	0x40021400
 8007880:	40020000 	.word	0x40020000
 8007884:	40021800 	.word	0x40021800
 8007888:	40020800 	.word	0x40020800

0800788c <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b088      	sub	sp, #32
 8007890:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8007892:	1d3b      	adds	r3, r7, #4
 8007894:	2200      	movs	r2, #0
 8007896:	601a      	str	r2, [r3, #0]
 8007898:	605a      	str	r2, [r3, #4]
 800789a:	609a      	str	r2, [r3, #8]
 800789c:	60da      	str	r2, [r3, #12]
 800789e:	611a      	str	r2, [r3, #16]
 80078a0:	615a      	str	r2, [r3, #20]
 80078a2:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 80078a4:	4b27      	ldr	r3, [pc, #156]	; (8007944 <MX_FSMC_Init+0xb8>)
 80078a6:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80078aa:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80078ac:	4b25      	ldr	r3, [pc, #148]	; (8007944 <MX_FSMC_Init+0xb8>)
 80078ae:	4a26      	ldr	r2, [pc, #152]	; (8007948 <MX_FSMC_Init+0xbc>)
 80078b0:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 80078b2:	4b24      	ldr	r3, [pc, #144]	; (8007944 <MX_FSMC_Init+0xb8>)
 80078b4:	2200      	movs	r2, #0
 80078b6:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 80078b8:	4b22      	ldr	r3, [pc, #136]	; (8007944 <MX_FSMC_Init+0xb8>)
 80078ba:	2200      	movs	r2, #0
 80078bc:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 80078be:	4b21      	ldr	r3, [pc, #132]	; (8007944 <MX_FSMC_Init+0xb8>)
 80078c0:	2200      	movs	r2, #0
 80078c2:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80078c4:	4b1f      	ldr	r3, [pc, #124]	; (8007944 <MX_FSMC_Init+0xb8>)
 80078c6:	2210      	movs	r2, #16
 80078c8:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80078ca:	4b1e      	ldr	r3, [pc, #120]	; (8007944 <MX_FSMC_Init+0xb8>)
 80078cc:	2200      	movs	r2, #0
 80078ce:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80078d0:	4b1c      	ldr	r3, [pc, #112]	; (8007944 <MX_FSMC_Init+0xb8>)
 80078d2:	2200      	movs	r2, #0
 80078d4:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80078d6:	4b1b      	ldr	r3, [pc, #108]	; (8007944 <MX_FSMC_Init+0xb8>)
 80078d8:	2200      	movs	r2, #0
 80078da:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80078dc:	4b19      	ldr	r3, [pc, #100]	; (8007944 <MX_FSMC_Init+0xb8>)
 80078de:	2200      	movs	r2, #0
 80078e0:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80078e2:	4b18      	ldr	r3, [pc, #96]	; (8007944 <MX_FSMC_Init+0xb8>)
 80078e4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80078e8:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80078ea:	4b16      	ldr	r3, [pc, #88]	; (8007944 <MX_FSMC_Init+0xb8>)
 80078ec:	2200      	movs	r2, #0
 80078ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 80078f0:	4b14      	ldr	r3, [pc, #80]	; (8007944 <MX_FSMC_Init+0xb8>)
 80078f2:	2200      	movs	r2, #0
 80078f4:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80078f6:	4b13      	ldr	r3, [pc, #76]	; (8007944 <MX_FSMC_Init+0xb8>)
 80078f8:	2200      	movs	r2, #0
 80078fa:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80078fc:	4b11      	ldr	r3, [pc, #68]	; (8007944 <MX_FSMC_Init+0xb8>)
 80078fe:	2200      	movs	r2, #0
 8007900:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8007902:	4b10      	ldr	r3, [pc, #64]	; (8007944 <MX_FSMC_Init+0xb8>)
 8007904:	2200      	movs	r2, #0
 8007906:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 8007908:	230f      	movs	r3, #15
 800790a:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 800790c:	230f      	movs	r3, #15
 800790e:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 40;
 8007910:	2328      	movs	r3, #40	; 0x28
 8007912:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 0;
 8007914:	2300      	movs	r3, #0
 8007916:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8007918:	2310      	movs	r3, #16
 800791a:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 800791c:	2311      	movs	r3, #17
 800791e:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8007920:	2300      	movs	r3, #0
 8007922:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8007924:	1d3b      	adds	r3, r7, #4
 8007926:	2200      	movs	r2, #0
 8007928:	4619      	mov	r1, r3
 800792a:	4806      	ldr	r0, [pc, #24]	; (8007944 <MX_FSMC_Init+0xb8>)
 800792c:	f7fe fb04 	bl	8005f38 <HAL_SRAM_Init>
 8007930:	4603      	mov	r3, r0
 8007932:	2b00      	cmp	r3, #0
 8007934:	d001      	beq.n	800793a <MX_FSMC_Init+0xae>
  {
    Error_Handler( );
 8007936:	f000 f809 	bl	800794c <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 800793a:	bf00      	nop
 800793c:	3720      	adds	r7, #32
 800793e:	46bd      	mov	sp, r7
 8007940:	bd80      	pop	{r7, pc}
 8007942:	bf00      	nop
 8007944:	200012a4 	.word	0x200012a4
 8007948:	a0000104 	.word	0xa0000104

0800794c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800794c:	b480      	push	{r7}
 800794e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8007950:	bf00      	nop
 8007952:	46bd      	mov	sp, r7
 8007954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007958:	4770      	bx	lr
	...

0800795c <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 800795c:	b580      	push	{r7, lr}
 800795e:	b082      	sub	sp, #8
 8007960:	af00      	add	r7, sp, #0
  uint8_t ret = LCD_ERROR;
 8007962:	2301      	movs	r3, #1
 8007964:	71fb      	strb	r3, [r7, #7]
  
  /* Default value for draw propriety */
  DrawProp.BackColor = 0xFFFF;
 8007966:	4b16      	ldr	r3, [pc, #88]	; (80079c0 <BSP_LCD_Init+0x64>)
 8007968:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800796c:	605a      	str	r2, [r3, #4]
  DrawProp.pFont     = &Font24;
 800796e:	4b14      	ldr	r3, [pc, #80]	; (80079c0 <BSP_LCD_Init+0x64>)
 8007970:	4a14      	ldr	r2, [pc, #80]	; (80079c4 <BSP_LCD_Init+0x68>)
 8007972:	609a      	str	r2, [r3, #8]
  DrawProp.TextColor = 0x0000;
 8007974:	4b12      	ldr	r3, [pc, #72]	; (80079c0 <BSP_LCD_Init+0x64>)
 8007976:	2200      	movs	r2, #0
 8007978:	601a      	str	r2, [r3, #0]
  if(ili9325_drv.ReadID() == ILI9325_ID || ili9325_drv.ReadID() == ILI9328_ID)
 800797a:	4b13      	ldr	r3, [pc, #76]	; (80079c8 <BSP_LCD_Init+0x6c>)
 800797c:	685b      	ldr	r3, [r3, #4]
 800797e:	4798      	blx	r3
 8007980:	4603      	mov	r3, r0
 8007982:	461a      	mov	r2, r3
 8007984:	f249 3325 	movw	r3, #37669	; 0x9325
 8007988:	429a      	cmp	r2, r3
 800798a:	d008      	beq.n	800799e <BSP_LCD_Init+0x42>
 800798c:	4b0e      	ldr	r3, [pc, #56]	; (80079c8 <BSP_LCD_Init+0x6c>)
 800798e:	685b      	ldr	r3, [r3, #4]
 8007990:	4798      	blx	r3
 8007992:	4603      	mov	r3, r0
 8007994:	461a      	mov	r2, r3
 8007996:	f249 3328 	movw	r3, #37672	; 0x9328
 800799a:	429a      	cmp	r2, r3
 800799c:	d10b      	bne.n	80079b6 <BSP_LCD_Init+0x5a>
  {
    lcd_drv = &ili9325_drv;
 800799e:	4b0b      	ldr	r3, [pc, #44]	; (80079cc <BSP_LCD_Init+0x70>)
 80079a0:	4a09      	ldr	r2, [pc, #36]	; (80079c8 <BSP_LCD_Init+0x6c>)
 80079a2:	601a      	str	r2, [r3, #0]

    /* LCD Init */   
    lcd_drv->Init();
 80079a4:	4b09      	ldr	r3, [pc, #36]	; (80079cc <BSP_LCD_Init+0x70>)
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	4798      	blx	r3
    
    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80079ac:	4805      	ldr	r0, [pc, #20]	; (80079c4 <BSP_LCD_Init+0x68>)
 80079ae:	f000 f837 	bl	8007a20 <BSP_LCD_SetFont>

    ret = LCD_OK;
 80079b2:	2300      	movs	r3, #0
 80079b4:	71fb      	strb	r3, [r7, #7]
  }
  
  return ret;
 80079b6:	79fb      	ldrb	r3, [r7, #7]
}
 80079b8:	4618      	mov	r0, r3
 80079ba:	3708      	adds	r7, #8
 80079bc:	46bd      	mov	sp, r7
 80079be:	bd80      	pop	{r7, pc}
 80079c0:	2000138c 	.word	0x2000138c
 80079c4:	20000590 	.word	0x20000590
 80079c8:	20000554 	.word	0x20000554
 80079cc:	20000f24 	.word	0x20000f24

080079d0 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	af00      	add	r7, sp, #0
  return(lcd_drv->GetLcdPixelWidth());
 80079d4:	4b03      	ldr	r3, [pc, #12]	; (80079e4 <BSP_LCD_GetXSize+0x14>)
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079da:	4798      	blx	r3
 80079dc:	4603      	mov	r3, r0
}
 80079de:	4618      	mov	r0, r3
 80079e0:	bd80      	pop	{r7, pc}
 80079e2:	bf00      	nop
 80079e4:	20000f24 	.word	0x20000f24

080079e8 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	af00      	add	r7, sp, #0
  return(lcd_drv->GetLcdPixelHeight());
 80079ec:	4b03      	ldr	r3, [pc, #12]	; (80079fc <BSP_LCD_GetYSize+0x14>)
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079f2:	4798      	blx	r3
 80079f4:	4603      	mov	r3, r0
}
 80079f6:	4618      	mov	r0, r3
 80079f8:	bd80      	pop	{r7, pc}
 80079fa:	bf00      	nop
 80079fc:	20000f24 	.word	0x20000f24

08007a00 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code RGB(5-6-5)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint16_t Color)
{
 8007a00:	b480      	push	{r7}
 8007a02:	b083      	sub	sp, #12
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	4603      	mov	r3, r0
 8007a08:	80fb      	strh	r3, [r7, #6]
  DrawProp.TextColor = Color;
 8007a0a:	88fb      	ldrh	r3, [r7, #6]
 8007a0c:	4a03      	ldr	r2, [pc, #12]	; (8007a1c <BSP_LCD_SetTextColor+0x1c>)
 8007a0e:	6013      	str	r3, [r2, #0]
}
 8007a10:	bf00      	nop
 8007a12:	370c      	adds	r7, #12
 8007a14:	46bd      	mov	sp, r7
 8007a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1a:	4770      	bx	lr
 8007a1c:	2000138c 	.word	0x2000138c

08007a20 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  pFonts: Font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 8007a20:	b480      	push	{r7}
 8007a22:	b083      	sub	sp, #12
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
  DrawProp.pFont = pFonts;
 8007a28:	4a04      	ldr	r2, [pc, #16]	; (8007a3c <BSP_LCD_SetFont+0x1c>)
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6093      	str	r3, [r2, #8]
}
 8007a2e:	bf00      	nop
 8007a30:	370c      	adds	r7, #12
 8007a32:	46bd      	mov	sp, r7
 8007a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a38:	4770      	bx	lr
 8007a3a:	bf00      	nop
 8007a3c:	2000138c 	.word	0x2000138c

08007a40 <BSP_LCD_GetFont>:
/**
  * @brief  Gets the LCD text font.
  * @retval Used font
  */
sFONT *BSP_LCD_GetFont(void)
{
 8007a40:	b480      	push	{r7}
 8007a42:	af00      	add	r7, sp, #0
  return DrawProp.pFont;
 8007a44:	4b03      	ldr	r3, [pc, #12]	; (8007a54 <BSP_LCD_GetFont+0x14>)
 8007a46:	689b      	ldr	r3, [r3, #8]
}
 8007a48:	4618      	mov	r0, r3
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a50:	4770      	bx	lr
 8007a52:	bf00      	nop
 8007a54:	2000138c 	.word	0x2000138c

08007a58 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint16_t Color)
{ 
 8007a58:	b590      	push	{r4, r7, lr}
 8007a5a:	b085      	sub	sp, #20
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	4603      	mov	r3, r0
 8007a60:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8007a62:	2300      	movs	r3, #0
 8007a64:	60fb      	str	r3, [r7, #12]
  
  uint32_t color_backup = DrawProp.TextColor; 
 8007a66:	4b15      	ldr	r3, [pc, #84]	; (8007abc <BSP_LCD_Clear+0x64>)
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	60bb      	str	r3, [r7, #8]
  DrawProp.TextColor = Color;
 8007a6c:	88fb      	ldrh	r3, [r7, #6]
 8007a6e:	4a13      	ldr	r2, [pc, #76]	; (8007abc <BSP_LCD_Clear+0x64>)
 8007a70:	6013      	str	r3, [r2, #0]
  
  for(counter = 0; counter < BSP_LCD_GetYSize(); counter++)
 8007a72:	2300      	movs	r3, #0
 8007a74:	60fb      	str	r3, [r7, #12]
 8007a76:	e00d      	b.n	8007a94 <BSP_LCD_Clear+0x3c>
  {
    BSP_LCD_DrawHLine(0, counter, BSP_LCD_GetXSize());
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	b29c      	uxth	r4, r3
 8007a7c:	f7ff ffa8 	bl	80079d0 <BSP_LCD_GetXSize>
 8007a80:	4603      	mov	r3, r0
 8007a82:	b29b      	uxth	r3, r3
 8007a84:	461a      	mov	r2, r3
 8007a86:	4621      	mov	r1, r4
 8007a88:	2000      	movs	r0, #0
 8007a8a:	f000 f8e5 	bl	8007c58 <BSP_LCD_DrawHLine>
  for(counter = 0; counter < BSP_LCD_GetYSize(); counter++)
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	3301      	adds	r3, #1
 8007a92:	60fb      	str	r3, [r7, #12]
 8007a94:	f7ff ffa8 	bl	80079e8 <BSP_LCD_GetYSize>
 8007a98:	4602      	mov	r2, r0
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	4293      	cmp	r3, r2
 8007a9e:	d3eb      	bcc.n	8007a78 <BSP_LCD_Clear+0x20>
  }

  DrawProp.TextColor = color_backup; 
 8007aa0:	4a06      	ldr	r2, [pc, #24]	; (8007abc <BSP_LCD_Clear+0x64>)
 8007aa2:	68bb      	ldr	r3, [r7, #8]
 8007aa4:	6013      	str	r3, [r2, #0]
  BSP_LCD_SetTextColor(DrawProp.TextColor);
 8007aa6:	4b05      	ldr	r3, [pc, #20]	; (8007abc <BSP_LCD_Clear+0x64>)
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	b29b      	uxth	r3, r3
 8007aac:	4618      	mov	r0, r3
 8007aae:	f7ff ffa7 	bl	8007a00 <BSP_LCD_SetTextColor>
}
 8007ab2:	bf00      	nop
 8007ab4:	3714      	adds	r7, #20
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	bd90      	pop	{r4, r7, pc}
 8007aba:	bf00      	nop
 8007abc:	2000138c 	.word	0x2000138c

08007ac0 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b082      	sub	sp, #8
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	80fb      	strh	r3, [r7, #6]
 8007aca:	460b      	mov	r3, r1
 8007acc:	80bb      	strh	r3, [r7, #4]
 8007ace:	4613      	mov	r3, r2
 8007ad0:	70fb      	strb	r3, [r7, #3]
  LCD_DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 8007ad2:	4b0f      	ldr	r3, [pc, #60]	; (8007b10 <BSP_LCD_DisplayChar+0x50>)
 8007ad4:	689b      	ldr	r3, [r3, #8]
 8007ad6:	681a      	ldr	r2, [r3, #0]
 8007ad8:	78fb      	ldrb	r3, [r7, #3]
 8007ada:	3b20      	subs	r3, #32
    DrawProp.pFont->Height * ((DrawProp.pFont->Width + 7) / 8)]);
 8007adc:	490c      	ldr	r1, [pc, #48]	; (8007b10 <BSP_LCD_DisplayChar+0x50>)
 8007ade:	6889      	ldr	r1, [r1, #8]
 8007ae0:	88c9      	ldrh	r1, [r1, #6]
  LCD_DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 8007ae2:	fb01 f103 	mul.w	r1, r1, r3
    DrawProp.pFont->Height * ((DrawProp.pFont->Width + 7) / 8)]);
 8007ae6:	4b0a      	ldr	r3, [pc, #40]	; (8007b10 <BSP_LCD_DisplayChar+0x50>)
 8007ae8:	689b      	ldr	r3, [r3, #8]
 8007aea:	889b      	ldrh	r3, [r3, #4]
 8007aec:	3307      	adds	r3, #7
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	da00      	bge.n	8007af4 <BSP_LCD_DisplayChar+0x34>
 8007af2:	3307      	adds	r3, #7
 8007af4:	10db      	asrs	r3, r3, #3
 8007af6:	fb03 f301 	mul.w	r3, r3, r1
  LCD_DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 8007afa:	441a      	add	r2, r3
 8007afc:	88b9      	ldrh	r1, [r7, #4]
 8007afe:	88fb      	ldrh	r3, [r7, #6]
 8007b00:	4618      	mov	r0, r3
 8007b02:	f000 f98f 	bl	8007e24 <LCD_DrawChar>
}
 8007b06:	bf00      	nop
 8007b08:	3708      	adds	r7, #8
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	bd80      	pop	{r7, pc}
 8007b0e:	bf00      	nop
 8007b10:	2000138c 	.word	0x2000138c

08007b14 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *pText, Line_ModeTypdef Mode)
{
 8007b14:	b590      	push	{r4, r7, lr}
 8007b16:	b089      	sub	sp, #36	; 0x24
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	60ba      	str	r2, [r7, #8]
 8007b1c:	461a      	mov	r2, r3
 8007b1e:	4603      	mov	r3, r0
 8007b20:	81fb      	strh	r3, [r7, #14]
 8007b22:	460b      	mov	r3, r1
 8007b24:	81bb      	strh	r3, [r7, #12]
 8007b26:	4613      	mov	r3, r2
 8007b28:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, counter = 0;
 8007b2a:	2301      	movs	r3, #1
 8007b2c:	83fb      	strh	r3, [r7, #30]
 8007b2e:	2300      	movs	r3, #0
 8007b30:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8007b32:	2300      	movs	r3, #0
 8007b34:	61bb      	str	r3, [r7, #24]
 8007b36:	2300      	movs	r3, #0
 8007b38:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 8007b3a:	68bb      	ldr	r3, [r7, #8]
 8007b3c:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8007b3e:	e002      	b.n	8007b46 <BSP_LCD_DisplayStringAt+0x32>
 8007b40:	69bb      	ldr	r3, [r7, #24]
 8007b42:	3301      	adds	r3, #1
 8007b44:	61bb      	str	r3, [r7, #24]
 8007b46:	697b      	ldr	r3, [r7, #20]
 8007b48:	1c5a      	adds	r2, r3, #1
 8007b4a:	617a      	str	r2, [r7, #20]
 8007b4c:	781b      	ldrb	r3, [r3, #0]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d1f6      	bne.n	8007b40 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp.pFont->Width);
 8007b52:	f7ff ff3d 	bl	80079d0 <BSP_LCD_GetXSize>
 8007b56:	4602      	mov	r2, r0
 8007b58:	4b32      	ldr	r3, [pc, #200]	; (8007c24 <BSP_LCD_DisplayStringAt+0x110>)
 8007b5a:	689b      	ldr	r3, [r3, #8]
 8007b5c:	889b      	ldrh	r3, [r3, #4]
 8007b5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b62:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 8007b64:	79fb      	ldrb	r3, [r7, #7]
 8007b66:	2b02      	cmp	r3, #2
 8007b68:	d014      	beq.n	8007b94 <BSP_LCD_DisplayStringAt+0x80>
 8007b6a:	2b03      	cmp	r3, #3
 8007b6c:	d00f      	beq.n	8007b8e <BSP_LCD_DisplayStringAt+0x7a>
 8007b6e:	2b01      	cmp	r3, #1
 8007b70:	d11e      	bne.n	8007bb0 <BSP_LCD_DisplayStringAt+0x9c>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp.pFont->Width) / 2;
 8007b72:	693a      	ldr	r2, [r7, #16]
 8007b74:	69bb      	ldr	r3, [r7, #24]
 8007b76:	1ad3      	subs	r3, r2, r3
 8007b78:	4a2a      	ldr	r2, [pc, #168]	; (8007c24 <BSP_LCD_DisplayStringAt+0x110>)
 8007b7a:	6892      	ldr	r2, [r2, #8]
 8007b7c:	8892      	ldrh	r2, [r2, #4]
 8007b7e:	fb02 f303 	mul.w	r3, r2, r3
 8007b82:	085b      	lsrs	r3, r3, #1
 8007b84:	b29a      	uxth	r2, r3
 8007b86:	89fb      	ldrh	r3, [r7, #14]
 8007b88:	4413      	add	r3, r2
 8007b8a:	83fb      	strh	r3, [r7, #30]
      break;
 8007b8c:	e013      	b.n	8007bb6 <BSP_LCD_DisplayStringAt+0xa2>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
 8007b8e:	89fb      	ldrh	r3, [r7, #14]
 8007b90:	83fb      	strh	r3, [r7, #30]
      break;
 8007b92:	e010      	b.n	8007bb6 <BSP_LCD_DisplayStringAt+0xa2>
    }
  case RIGHT_MODE:
    {
      refcolumn =  - Xpos + ((xsize - size)*DrawProp.pFont->Width);
 8007b94:	693a      	ldr	r2, [r7, #16]
 8007b96:	69bb      	ldr	r3, [r7, #24]
 8007b98:	1ad3      	subs	r3, r2, r3
 8007b9a:	b29a      	uxth	r2, r3
 8007b9c:	4b21      	ldr	r3, [pc, #132]	; (8007c24 <BSP_LCD_DisplayStringAt+0x110>)
 8007b9e:	689b      	ldr	r3, [r3, #8]
 8007ba0:	889b      	ldrh	r3, [r3, #4]
 8007ba2:	fb12 f303 	smulbb	r3, r2, r3
 8007ba6:	b29a      	uxth	r2, r3
 8007ba8:	89fb      	ldrh	r3, [r7, #14]
 8007baa:	1ad3      	subs	r3, r2, r3
 8007bac:	83fb      	strh	r3, [r7, #30]
      break;
 8007bae:	e002      	b.n	8007bb6 <BSP_LCD_DisplayStringAt+0xa2>
    }    
  default:
    {
      refcolumn = Xpos;
 8007bb0:	89fb      	ldrh	r3, [r7, #14]
 8007bb2:	83fb      	strh	r3, [r7, #30]
      break;
 8007bb4:	bf00      	nop
    }
  }
  
  /* Send the string character by character on lCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (counter*DrawProp.pFont->Width)) & 0xFFFF) >= DrawProp.pFont->Width))
 8007bb6:	e012      	b.n	8007bde <BSP_LCD_DisplayStringAt+0xca>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Ypos, *pText);
 8007bb8:	68bb      	ldr	r3, [r7, #8]
 8007bba:	781a      	ldrb	r2, [r3, #0]
 8007bbc:	89b9      	ldrh	r1, [r7, #12]
 8007bbe:	8bfb      	ldrh	r3, [r7, #30]
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	f7ff ff7d 	bl	8007ac0 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp.pFont->Width;
 8007bc6:	4b17      	ldr	r3, [pc, #92]	; (8007c24 <BSP_LCD_DisplayStringAt+0x110>)
 8007bc8:	689b      	ldr	r3, [r3, #8]
 8007bca:	889a      	ldrh	r2, [r3, #4]
 8007bcc:	8bfb      	ldrh	r3, [r7, #30]
 8007bce:	4413      	add	r3, r2
 8007bd0:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 8007bd2:	68bb      	ldr	r3, [r7, #8]
 8007bd4:	3301      	adds	r3, #1
 8007bd6:	60bb      	str	r3, [r7, #8]
    counter++;
 8007bd8:	8bbb      	ldrh	r3, [r7, #28]
 8007bda:	3301      	adds	r3, #1
 8007bdc:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (counter*DrawProp.pFont->Width)) & 0xFFFF) >= DrawProp.pFont->Width))
 8007bde:	68bb      	ldr	r3, [r7, #8]
 8007be0:	781b      	ldrb	r3, [r3, #0]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	bf14      	ite	ne
 8007be6:	2301      	movne	r3, #1
 8007be8:	2300      	moveq	r3, #0
 8007bea:	b2dc      	uxtb	r4, r3
 8007bec:	f7ff fef0 	bl	80079d0 <BSP_LCD_GetXSize>
 8007bf0:	4601      	mov	r1, r0
 8007bf2:	8bbb      	ldrh	r3, [r7, #28]
 8007bf4:	4a0b      	ldr	r2, [pc, #44]	; (8007c24 <BSP_LCD_DisplayStringAt+0x110>)
 8007bf6:	6892      	ldr	r2, [r2, #8]
 8007bf8:	8892      	ldrh	r2, [r2, #4]
 8007bfa:	fb02 f303 	mul.w	r3, r2, r3
 8007bfe:	1acb      	subs	r3, r1, r3
 8007c00:	b29b      	uxth	r3, r3
 8007c02:	4a08      	ldr	r2, [pc, #32]	; (8007c24 <BSP_LCD_DisplayStringAt+0x110>)
 8007c04:	6892      	ldr	r2, [r2, #8]
 8007c06:	8892      	ldrh	r2, [r2, #4]
 8007c08:	4293      	cmp	r3, r2
 8007c0a:	bf2c      	ite	cs
 8007c0c:	2301      	movcs	r3, #1
 8007c0e:	2300      	movcc	r3, #0
 8007c10:	b2db      	uxtb	r3, r3
 8007c12:	4023      	ands	r3, r4
 8007c14:	b2db      	uxtb	r3, r3
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d1ce      	bne.n	8007bb8 <BSP_LCD_DisplayStringAt+0xa4>
  }
}
 8007c1a:	bf00      	nop
 8007c1c:	3724      	adds	r7, #36	; 0x24
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bd90      	pop	{r4, r7, pc}
 8007c22:	bf00      	nop
 8007c24:	2000138c 	.word	0x2000138c

08007c28 <BSP_LCD_DisplayStringAtLine>:
  *            @arg  0..29: if the Current fonts is Font8x8
  * @param  pText: Pointer to string to display on LCD
  * @retval None
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *pText)
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b082      	sub	sp, #8
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	4603      	mov	r3, r0
 8007c30:	6039      	str	r1, [r7, #0]
 8007c32:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line),pText, LEFT_MODE);
 8007c34:	f7ff ff04 	bl	8007a40 <BSP_LCD_GetFont>
 8007c38:	4603      	mov	r3, r0
 8007c3a:	88db      	ldrh	r3, [r3, #6]
 8007c3c:	88fa      	ldrh	r2, [r7, #6]
 8007c3e:	fb12 f303 	smulbb	r3, r2, r3
 8007c42:	b299      	uxth	r1, r3
 8007c44:	2303      	movs	r3, #3
 8007c46:	683a      	ldr	r2, [r7, #0]
 8007c48:	2000      	movs	r0, #0
 8007c4a:	f7ff ff63 	bl	8007b14 <BSP_LCD_DisplayStringAt>
}
 8007c4e:	bf00      	nop
 8007c50:	3708      	adds	r7, #8
 8007c52:	46bd      	mov	sp, r7
 8007c54:	bd80      	pop	{r7, pc}
	...

08007c58 <BSP_LCD_DrawHLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8007c58:	b590      	push	{r4, r7, lr}
 8007c5a:	b085      	sub	sp, #20
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	4603      	mov	r3, r0
 8007c60:	80fb      	strh	r3, [r7, #6]
 8007c62:	460b      	mov	r3, r1
 8007c64:	80bb      	strh	r3, [r7, #4]
 8007c66:	4613      	mov	r3, r2
 8007c68:	807b      	strh	r3, [r7, #2]
  uint32_t index = 0;
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	60fb      	str	r3, [r7, #12]
  
  if(lcd_drv->DrawHLine != NULL)
 8007c6e:	4b15      	ldr	r3, [pc, #84]	; (8007cc4 <BSP_LCD_DrawHLine+0x6c>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	6a1b      	ldr	r3, [r3, #32]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d00a      	beq.n	8007c8e <BSP_LCD_DrawHLine+0x36>
  {
    lcd_drv->DrawHLine(DrawProp.TextColor, Xpos, Ypos, Length);
 8007c78:	4b12      	ldr	r3, [pc, #72]	; (8007cc4 <BSP_LCD_DrawHLine+0x6c>)
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	6a1c      	ldr	r4, [r3, #32]
 8007c7e:	4b12      	ldr	r3, [pc, #72]	; (8007cc8 <BSP_LCD_DrawHLine+0x70>)
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	b298      	uxth	r0, r3
 8007c84:	887b      	ldrh	r3, [r7, #2]
 8007c86:	88ba      	ldrh	r2, [r7, #4]
 8007c88:	88f9      	ldrh	r1, [r7, #6]
 8007c8a:	47a0      	blx	r4
    for(index = 0; index < Length; index++)
    {
      LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
    }
  }
}
 8007c8c:	e015      	b.n	8007cba <BSP_LCD_DrawHLine+0x62>
    for(index = 0; index < Length; index++)
 8007c8e:	2300      	movs	r3, #0
 8007c90:	60fb      	str	r3, [r7, #12]
 8007c92:	e00e      	b.n	8007cb2 <BSP_LCD_DrawHLine+0x5a>
      LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	b29a      	uxth	r2, r3
 8007c98:	88fb      	ldrh	r3, [r7, #6]
 8007c9a:	4413      	add	r3, r2
 8007c9c:	b298      	uxth	r0, r3
 8007c9e:	4b0a      	ldr	r3, [pc, #40]	; (8007cc8 <BSP_LCD_DrawHLine+0x70>)
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	b29a      	uxth	r2, r3
 8007ca4:	88bb      	ldrh	r3, [r7, #4]
 8007ca6:	4619      	mov	r1, r3
 8007ca8:	f000 f8a0 	bl	8007dec <LCD_DrawPixel>
    for(index = 0; index < Length; index++)
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	3301      	adds	r3, #1
 8007cb0:	60fb      	str	r3, [r7, #12]
 8007cb2:	887b      	ldrh	r3, [r7, #2]
 8007cb4:	68fa      	ldr	r2, [r7, #12]
 8007cb6:	429a      	cmp	r2, r3
 8007cb8:	d3ec      	bcc.n	8007c94 <BSP_LCD_DrawHLine+0x3c>
}
 8007cba:	bf00      	nop
 8007cbc:	3714      	adds	r7, #20
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	bd90      	pop	{r4, r7, pc}
 8007cc2:	bf00      	nop
 8007cc4:	20000f24 	.word	0x20000f24
 8007cc8:	2000138c 	.word	0x2000138c

08007ccc <BSP_LCD_DrawVLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawVLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8007ccc:	b590      	push	{r4, r7, lr}
 8007cce:	b085      	sub	sp, #20
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	80fb      	strh	r3, [r7, #6]
 8007cd6:	460b      	mov	r3, r1
 8007cd8:	80bb      	strh	r3, [r7, #4]
 8007cda:	4613      	mov	r3, r2
 8007cdc:	807b      	strh	r3, [r7, #2]
  uint32_t index = 0;
 8007cde:	2300      	movs	r3, #0
 8007ce0:	60fb      	str	r3, [r7, #12]
  
  if(lcd_drv->DrawVLine != NULL)
 8007ce2:	4b15      	ldr	r3, [pc, #84]	; (8007d38 <BSP_LCD_DrawVLine+0x6c>)
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d00a      	beq.n	8007d02 <BSP_LCD_DrawVLine+0x36>
  {
    lcd_drv->DrawVLine(DrawProp.TextColor, Xpos, Ypos, Length);
 8007cec:	4b12      	ldr	r3, [pc, #72]	; (8007d38 <BSP_LCD_DrawVLine+0x6c>)
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8007cf2:	4b12      	ldr	r3, [pc, #72]	; (8007d3c <BSP_LCD_DrawVLine+0x70>)
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	b298      	uxth	r0, r3
 8007cf8:	887b      	ldrh	r3, [r7, #2]
 8007cfa:	88ba      	ldrh	r2, [r7, #4]
 8007cfc:	88f9      	ldrh	r1, [r7, #6]
 8007cfe:	47a0      	blx	r4
    for(index = 0; index < Length; index++)
    {
      LCD_DrawPixel(Xpos, Ypos + index, DrawProp.TextColor);
    }
  }
}
 8007d00:	e015      	b.n	8007d2e <BSP_LCD_DrawVLine+0x62>
    for(index = 0; index < Length; index++)
 8007d02:	2300      	movs	r3, #0
 8007d04:	60fb      	str	r3, [r7, #12]
 8007d06:	e00e      	b.n	8007d26 <BSP_LCD_DrawVLine+0x5a>
      LCD_DrawPixel(Xpos, Ypos + index, DrawProp.TextColor);
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	b29a      	uxth	r2, r3
 8007d0c:	88bb      	ldrh	r3, [r7, #4]
 8007d0e:	4413      	add	r3, r2
 8007d10:	b299      	uxth	r1, r3
 8007d12:	4b0a      	ldr	r3, [pc, #40]	; (8007d3c <BSP_LCD_DrawVLine+0x70>)
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	b29a      	uxth	r2, r3
 8007d18:	88fb      	ldrh	r3, [r7, #6]
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	f000 f866 	bl	8007dec <LCD_DrawPixel>
    for(index = 0; index < Length; index++)
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	3301      	adds	r3, #1
 8007d24:	60fb      	str	r3, [r7, #12]
 8007d26:	887b      	ldrh	r3, [r7, #2]
 8007d28:	68fa      	ldr	r2, [r7, #12]
 8007d2a:	429a      	cmp	r2, r3
 8007d2c:	d3ec      	bcc.n	8007d08 <BSP_LCD_DrawVLine+0x3c>
}
 8007d2e:	bf00      	nop
 8007d30:	3714      	adds	r7, #20
 8007d32:	46bd      	mov	sp, r7
 8007d34:	bd90      	pop	{r4, r7, pc}
 8007d36:	bf00      	nop
 8007d38:	20000f24 	.word	0x20000f24
 8007d3c:	2000138c 	.word	0x2000138c

08007d40 <BSP_LCD_DrawBitmap>:
  * @param  Ypos: Bmp Y position in the LCD
  * @param  pbmp: Pointer to Bmp picture address.
  * @retval None
  */
void BSP_LCD_DrawBitmap(uint16_t Xpos, uint16_t Ypos, uint8_t *pbmp)
{
 8007d40:	b590      	push	{r4, r7, lr}
 8007d42:	b085      	sub	sp, #20
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	4603      	mov	r3, r0
 8007d48:	603a      	str	r2, [r7, #0]
 8007d4a:	80fb      	strh	r3, [r7, #6]
 8007d4c:	460b      	mov	r3, r1
 8007d4e:	80bb      	strh	r3, [r7, #4]
  uint32_t height = 0;
 8007d50:	2300      	movs	r3, #0
 8007d52:	60fb      	str	r3, [r7, #12]
  uint32_t width  = 0;
 8007d54:	2300      	movs	r3, #0
 8007d56:	60bb      	str	r3, [r7, #8]
  
  
  /* Read bitmap width */
  width = *(uint16_t *) (pbmp + 18);
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	3312      	adds	r3, #18
 8007d5c:	881b      	ldrh	r3, [r3, #0]
 8007d5e:	60bb      	str	r3, [r7, #8]
  width |= (*(uint16_t *) (pbmp + 20)) << 16;
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	3314      	adds	r3, #20
 8007d64:	881b      	ldrh	r3, [r3, #0]
 8007d66:	041b      	lsls	r3, r3, #16
 8007d68:	461a      	mov	r2, r3
 8007d6a:	68bb      	ldr	r3, [r7, #8]
 8007d6c:	4313      	orrs	r3, r2
 8007d6e:	60bb      	str	r3, [r7, #8]
  
  /* Read bitmap height */
  height = *(uint16_t *) (pbmp + 22);
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	3316      	adds	r3, #22
 8007d74:	881b      	ldrh	r3, [r3, #0]
 8007d76:	60fb      	str	r3, [r7, #12]
  height |= (*(uint16_t *) (pbmp + 24)) << 16; 
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	3318      	adds	r3, #24
 8007d7c:	881b      	ldrh	r3, [r3, #0]
 8007d7e:	041b      	lsls	r3, r3, #16
 8007d80:	461a      	mov	r2, r3
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	4313      	orrs	r3, r2
 8007d86:	60fb      	str	r3, [r7, #12]
  
  LCD_SetDisplayWindow(Xpos, Ypos, width, height);
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	b29a      	uxth	r2, r3
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	b29b      	uxth	r3, r3
 8007d90:	88b9      	ldrh	r1, [r7, #4]
 8007d92:	88f8      	ldrh	r0, [r7, #6]
 8007d94:	f000 f938 	bl	8008008 <LCD_SetDisplayWindow>
  
  if(lcd_drv->DrawBitmap != NULL)
 8007d98:	4b0e      	ldr	r3, [pc, #56]	; (8007dd4 <BSP_LCD_DrawBitmap+0x94>)
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d006      	beq.n	8007db0 <BSP_LCD_DrawBitmap+0x70>
  {
    lcd_drv->DrawBitmap(Xpos, Ypos, pbmp);
 8007da2:	4b0c      	ldr	r3, [pc, #48]	; (8007dd4 <BSP_LCD_DrawBitmap+0x94>)
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007da8:	88b9      	ldrh	r1, [r7, #4]
 8007daa:	88f8      	ldrh	r0, [r7, #6]
 8007dac:	683a      	ldr	r2, [r7, #0]
 8007dae:	4798      	blx	r3
  } 
  LCD_SetDisplayWindow(0, 0, BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 8007db0:	f7ff fe0e 	bl	80079d0 <BSP_LCD_GetXSize>
 8007db4:	4603      	mov	r3, r0
 8007db6:	b29c      	uxth	r4, r3
 8007db8:	f7ff fe16 	bl	80079e8 <BSP_LCD_GetYSize>
 8007dbc:	4603      	mov	r3, r0
 8007dbe:	b29b      	uxth	r3, r3
 8007dc0:	4622      	mov	r2, r4
 8007dc2:	2100      	movs	r1, #0
 8007dc4:	2000      	movs	r0, #0
 8007dc6:	f000 f91f 	bl	8008008 <LCD_SetDisplayWindow>
}
 8007dca:	bf00      	nop
 8007dcc:	3714      	adds	r7, #20
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	bd90      	pop	{r4, r7, pc}
 8007dd2:	bf00      	nop
 8007dd4:	20000f24 	.word	0x20000f24

08007dd8 <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	af00      	add	r7, sp, #0
  lcd_drv->DisplayOn();
 8007ddc:	4b02      	ldr	r3, [pc, #8]	; (8007de8 <BSP_LCD_DisplayOn+0x10>)
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	689b      	ldr	r3, [r3, #8]
 8007de2:	4798      	blx	r3
}
 8007de4:	bf00      	nop
 8007de6:	bd80      	pop	{r7, pc}
 8007de8:	20000f24 	.word	0x20000f24

08007dec <LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGBCode: Pixel color in RGB mode (5-6-5)  
  * @retval None
  */
static void LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGBCode)
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b082      	sub	sp, #8
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	4603      	mov	r3, r0
 8007df4:	80fb      	strh	r3, [r7, #6]
 8007df6:	460b      	mov	r3, r1
 8007df8:	80bb      	strh	r3, [r7, #4]
 8007dfa:	4613      	mov	r3, r2
 8007dfc:	807b      	strh	r3, [r7, #2]
  if(lcd_drv->WritePixel != NULL)
 8007dfe:	4b08      	ldr	r3, [pc, #32]	; (8007e20 <LCD_DrawPixel+0x34>)
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	695b      	ldr	r3, [r3, #20]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d006      	beq.n	8007e16 <LCD_DrawPixel+0x2a>
  {
    lcd_drv->WritePixel(Xpos, Ypos, RGBCode);
 8007e08:	4b05      	ldr	r3, [pc, #20]	; (8007e20 <LCD_DrawPixel+0x34>)
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	695b      	ldr	r3, [r3, #20]
 8007e0e:	887a      	ldrh	r2, [r7, #2]
 8007e10:	88b9      	ldrh	r1, [r7, #4]
 8007e12:	88f8      	ldrh	r0, [r7, #6]
 8007e14:	4798      	blx	r3
  }
}
 8007e16:	bf00      	nop
 8007e18:	3708      	adds	r7, #8
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bd80      	pop	{r7, pc}
 8007e1e:	bf00      	nop
 8007e20:	20000f24 	.word	0x20000f24

08007e24 <LCD_DrawChar>:
  * @param  Ypos: Start column address
  * @param  pChar: Pointer to the character data
  * @retval None
  */
static void LCD_DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *pChar)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b08a      	sub	sp, #40	; 0x28
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	603a      	str	r2, [r7, #0]
 8007e2e:	80fb      	strh	r3, [r7, #6]
 8007e30:	460b      	mov	r3, r1
 8007e32:	80bb      	strh	r3, [r7, #4]
  uint32_t counterh = 0, counterw = 0, index = 0;
 8007e34:	2300      	movs	r3, #0
 8007e36:	627b      	str	r3, [r7, #36]	; 0x24
 8007e38:	2300      	movs	r3, #0
 8007e3a:	623b      	str	r3, [r7, #32]
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	61bb      	str	r3, [r7, #24]
  uint16_t height = 0, width = 0;
 8007e40:	2300      	movs	r3, #0
 8007e42:	82fb      	strh	r3, [r7, #22]
 8007e44:	2300      	movs	r3, #0
 8007e46:	82bb      	strh	r3, [r7, #20]
  uint8_t offset = 0;
 8007e48:	2300      	movs	r3, #0
 8007e4a:	74fb      	strb	r3, [r7, #19]
  uint8_t *pchar = NULL;
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	60fb      	str	r3, [r7, #12]
  uint32_t line = 0;
 8007e50:	2300      	movs	r3, #0
 8007e52:	61fb      	str	r3, [r7, #28]
  
 
  height = DrawProp.pFont->Height;
 8007e54:	4b63      	ldr	r3, [pc, #396]	; (8007fe4 <LCD_DrawChar+0x1c0>)
 8007e56:	689b      	ldr	r3, [r3, #8]
 8007e58:	88db      	ldrh	r3, [r3, #6]
 8007e5a:	82fb      	strh	r3, [r7, #22]
  width  = DrawProp.pFont->Width;
 8007e5c:	4b61      	ldr	r3, [pc, #388]	; (8007fe4 <LCD_DrawChar+0x1c0>)
 8007e5e:	689b      	ldr	r3, [r3, #8]
 8007e60:	889b      	ldrh	r3, [r3, #4]
 8007e62:	82bb      	strh	r3, [r7, #20]
  
  /* Fill bitmap header*/
  *(uint16_t *) (bitmap + 2) = (uint16_t)(height*width*2+OFFSET_BITMAP);
 8007e64:	8afa      	ldrh	r2, [r7, #22]
 8007e66:	8abb      	ldrh	r3, [r7, #20]
 8007e68:	fb12 f303 	smulbb	r3, r2, r3
 8007e6c:	b29b      	uxth	r3, r3
 8007e6e:	331b      	adds	r3, #27
 8007e70:	b29b      	uxth	r3, r3
 8007e72:	4a5d      	ldr	r2, [pc, #372]	; (8007fe8 <LCD_DrawChar+0x1c4>)
 8007e74:	005b      	lsls	r3, r3, #1
 8007e76:	b29b      	uxth	r3, r3
 8007e78:	8013      	strh	r3, [r2, #0]
  *(uint16_t *) (bitmap + 4) = (uint16_t)((height*width*2+OFFSET_BITMAP)>>16);
 8007e7a:	8afb      	ldrh	r3, [r7, #22]
 8007e7c:	8aba      	ldrh	r2, [r7, #20]
 8007e7e:	fb02 f303 	mul.w	r3, r2, r3
 8007e82:	331b      	adds	r3, #27
 8007e84:	005b      	lsls	r3, r3, #1
 8007e86:	141a      	asrs	r2, r3, #16
 8007e88:	4b58      	ldr	r3, [pc, #352]	; (8007fec <LCD_DrawChar+0x1c8>)
 8007e8a:	b292      	uxth	r2, r2
 8007e8c:	801a      	strh	r2, [r3, #0]
  *(uint16_t *) (bitmap + 10) = OFFSET_BITMAP;
 8007e8e:	4b58      	ldr	r3, [pc, #352]	; (8007ff0 <LCD_DrawChar+0x1cc>)
 8007e90:	2236      	movs	r2, #54	; 0x36
 8007e92:	801a      	strh	r2, [r3, #0]
  *(uint16_t *) (bitmap + 18) = (uint16_t)(width);
 8007e94:	4a57      	ldr	r2, [pc, #348]	; (8007ff4 <LCD_DrawChar+0x1d0>)
 8007e96:	8abb      	ldrh	r3, [r7, #20]
 8007e98:	8013      	strh	r3, [r2, #0]
  *(uint16_t *) (bitmap + 20) = (uint16_t)((width)>>16);
 8007e9a:	8abb      	ldrh	r3, [r7, #20]
 8007e9c:	141a      	asrs	r2, r3, #16
 8007e9e:	4b56      	ldr	r3, [pc, #344]	; (8007ff8 <LCD_DrawChar+0x1d4>)
 8007ea0:	b292      	uxth	r2, r2
 8007ea2:	801a      	strh	r2, [r3, #0]
  *(uint16_t *) (bitmap + 22) = (uint16_t)(height);
 8007ea4:	4a55      	ldr	r2, [pc, #340]	; (8007ffc <LCD_DrawChar+0x1d8>)
 8007ea6:	8afb      	ldrh	r3, [r7, #22]
 8007ea8:	8013      	strh	r3, [r2, #0]
  *(uint16_t *) (bitmap + 24) = (uint16_t)((height)>>16);
 8007eaa:	8afb      	ldrh	r3, [r7, #22]
 8007eac:	141a      	asrs	r2, r3, #16
 8007eae:	4b54      	ldr	r3, [pc, #336]	; (8008000 <LCD_DrawChar+0x1dc>)
 8007eb0:	b292      	uxth	r2, r2
 8007eb2:	801a      	strh	r2, [r3, #0]

  offset =  8 *((width + 7)/8) -  width ;
 8007eb4:	8abb      	ldrh	r3, [r7, #20]
 8007eb6:	3307      	adds	r3, #7
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	da00      	bge.n	8007ebe <LCD_DrawChar+0x9a>
 8007ebc:	3307      	adds	r3, #7
 8007ebe:	10db      	asrs	r3, r3, #3
 8007ec0:	b2db      	uxtb	r3, r3
 8007ec2:	00db      	lsls	r3, r3, #3
 8007ec4:	b2da      	uxtb	r2, r3
 8007ec6:	8abb      	ldrh	r3, [r7, #20]
 8007ec8:	b2db      	uxtb	r3, r3
 8007eca:	1ad3      	subs	r3, r2, r3
 8007ecc:	74fb      	strb	r3, [r7, #19]
  
  for(counterh = 0; counterh < height; counterh++)
 8007ece:	2300      	movs	r3, #0
 8007ed0:	627b      	str	r3, [r7, #36]	; 0x24
 8007ed2:	e078      	b.n	8007fc6 <LCD_DrawChar+0x1a2>
  {
    pchar = ((uint8_t *)pChar + (width + 7)/8 * counterh);
 8007ed4:	8abb      	ldrh	r3, [r7, #20]
 8007ed6:	3307      	adds	r3, #7
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	da00      	bge.n	8007ede <LCD_DrawChar+0xba>
 8007edc:	3307      	adds	r3, #7
 8007ede:	10db      	asrs	r3, r3, #3
 8007ee0:	461a      	mov	r2, r3
 8007ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ee4:	fb03 f302 	mul.w	r3, r3, r2
 8007ee8:	683a      	ldr	r2, [r7, #0]
 8007eea:	4413      	add	r3, r2
 8007eec:	60fb      	str	r3, [r7, #12]
    
    if(((width + 7)/8) == 3)
 8007eee:	8abb      	ldrh	r3, [r7, #20]
 8007ef0:	3b11      	subs	r3, #17
 8007ef2:	2b07      	cmp	r3, #7
 8007ef4:	d80c      	bhi.n	8007f10 <LCD_DrawChar+0xec>
    {
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	781b      	ldrb	r3, [r3, #0]
 8007efa:	041a      	lsls	r2, r3, #16
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	3301      	adds	r3, #1
 8007f00:	781b      	ldrb	r3, [r3, #0]
 8007f02:	021b      	lsls	r3, r3, #8
 8007f04:	4313      	orrs	r3, r2
 8007f06:	68fa      	ldr	r2, [r7, #12]
 8007f08:	3202      	adds	r2, #2
 8007f0a:	7812      	ldrb	r2, [r2, #0]
 8007f0c:	4313      	orrs	r3, r2
 8007f0e:	61fb      	str	r3, [r7, #28]
    }

    if(((width + 7)/8) == 2)
 8007f10:	8abb      	ldrh	r3, [r7, #20]
 8007f12:	3b09      	subs	r3, #9
 8007f14:	2b07      	cmp	r3, #7
 8007f16:	d807      	bhi.n	8007f28 <LCD_DrawChar+0x104>
    {
      line =  (pchar[0]<< 8) | pchar[1];
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	781b      	ldrb	r3, [r3, #0]
 8007f1c:	021b      	lsls	r3, r3, #8
 8007f1e:	68fa      	ldr	r2, [r7, #12]
 8007f20:	3201      	adds	r2, #1
 8007f22:	7812      	ldrb	r2, [r2, #0]
 8007f24:	4313      	orrs	r3, r2
 8007f26:	61fb      	str	r3, [r7, #28]
    }
      
    if(((width + 7)/8) == 1)
 8007f28:	8abb      	ldrh	r3, [r7, #20]
 8007f2a:	3b01      	subs	r3, #1
 8007f2c:	2b07      	cmp	r3, #7
 8007f2e:	d802      	bhi.n	8007f36 <LCD_DrawChar+0x112>
    {
      line =  pchar[0];
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	781b      	ldrb	r3, [r3, #0]
 8007f34:	61fb      	str	r3, [r7, #28]
    }  
    
    for (counterw = 0; counterw < width; counterw++)
 8007f36:	2300      	movs	r3, #0
 8007f38:	623b      	str	r3, [r7, #32]
 8007f3a:	e03d      	b.n	8007fb8 <LCD_DrawChar+0x194>
    {
      /* Image in the bitmap is written from the bottom to the top */
      /* Need to invert image in the bitmap */
      index = (((height-counterh-1)*width)+(counterw))*2+OFFSET_BITMAP;
 8007f3c:	8afa      	ldrh	r2, [r7, #22]
 8007f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f40:	1ad3      	subs	r3, r2, r3
 8007f42:	3b01      	subs	r3, #1
 8007f44:	8aba      	ldrh	r2, [r7, #20]
 8007f46:	fb02 f203 	mul.w	r2, r2, r3
 8007f4a:	6a3b      	ldr	r3, [r7, #32]
 8007f4c:	4413      	add	r3, r2
 8007f4e:	331b      	adds	r3, #27
 8007f50:	005b      	lsls	r3, r3, #1
 8007f52:	61bb      	str	r3, [r7, #24]
      if(line & (1 << (width- counterw + offset- 1))) 
 8007f54:	8aba      	ldrh	r2, [r7, #20]
 8007f56:	6a3b      	ldr	r3, [r7, #32]
 8007f58:	1ad2      	subs	r2, r2, r3
 8007f5a:	7cfb      	ldrb	r3, [r7, #19]
 8007f5c:	4413      	add	r3, r2
 8007f5e:	3b01      	subs	r3, #1
 8007f60:	2201      	movs	r2, #1
 8007f62:	fa02 f303 	lsl.w	r3, r2, r3
 8007f66:	461a      	mov	r2, r3
 8007f68:	69fb      	ldr	r3, [r7, #28]
 8007f6a:	4013      	ands	r3, r2
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d010      	beq.n	8007f92 <LCD_DrawChar+0x16e>
      {
        bitmap[index] = (uint8_t)DrawProp.TextColor;
 8007f70:	4b1c      	ldr	r3, [pc, #112]	; (8007fe4 <LCD_DrawChar+0x1c0>)
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	b2d9      	uxtb	r1, r3
 8007f76:	4a23      	ldr	r2, [pc, #140]	; (8008004 <LCD_DrawChar+0x1e0>)
 8007f78:	69bb      	ldr	r3, [r7, #24]
 8007f7a:	4413      	add	r3, r2
 8007f7c:	460a      	mov	r2, r1
 8007f7e:	701a      	strb	r2, [r3, #0]
        bitmap[index+1] = (uint8_t)(DrawProp.TextColor >> 8);
 8007f80:	4b18      	ldr	r3, [pc, #96]	; (8007fe4 <LCD_DrawChar+0x1c0>)
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	0a1a      	lsrs	r2, r3, #8
 8007f86:	69bb      	ldr	r3, [r7, #24]
 8007f88:	3301      	adds	r3, #1
 8007f8a:	b2d1      	uxtb	r1, r2
 8007f8c:	4a1d      	ldr	r2, [pc, #116]	; (8008004 <LCD_DrawChar+0x1e0>)
 8007f8e:	54d1      	strb	r1, [r2, r3]
 8007f90:	e00f      	b.n	8007fb2 <LCD_DrawChar+0x18e>
      }
      else
      {
        bitmap[index] = (uint8_t)DrawProp.BackColor;
 8007f92:	4b14      	ldr	r3, [pc, #80]	; (8007fe4 <LCD_DrawChar+0x1c0>)
 8007f94:	685b      	ldr	r3, [r3, #4]
 8007f96:	b2d9      	uxtb	r1, r3
 8007f98:	4a1a      	ldr	r2, [pc, #104]	; (8008004 <LCD_DrawChar+0x1e0>)
 8007f9a:	69bb      	ldr	r3, [r7, #24]
 8007f9c:	4413      	add	r3, r2
 8007f9e:	460a      	mov	r2, r1
 8007fa0:	701a      	strb	r2, [r3, #0]
        bitmap[index+1] = (uint8_t)(DrawProp.BackColor >> 8);
 8007fa2:	4b10      	ldr	r3, [pc, #64]	; (8007fe4 <LCD_DrawChar+0x1c0>)
 8007fa4:	685b      	ldr	r3, [r3, #4]
 8007fa6:	0a1a      	lsrs	r2, r3, #8
 8007fa8:	69bb      	ldr	r3, [r7, #24]
 8007faa:	3301      	adds	r3, #1
 8007fac:	b2d1      	uxtb	r1, r2
 8007fae:	4a15      	ldr	r2, [pc, #84]	; (8008004 <LCD_DrawChar+0x1e0>)
 8007fb0:	54d1      	strb	r1, [r2, r3]
    for (counterw = 0; counterw < width; counterw++)
 8007fb2:	6a3b      	ldr	r3, [r7, #32]
 8007fb4:	3301      	adds	r3, #1
 8007fb6:	623b      	str	r3, [r7, #32]
 8007fb8:	8abb      	ldrh	r3, [r7, #20]
 8007fba:	6a3a      	ldr	r2, [r7, #32]
 8007fbc:	429a      	cmp	r2, r3
 8007fbe:	d3bd      	bcc.n	8007f3c <LCD_DrawChar+0x118>
  for(counterh = 0; counterh < height; counterh++)
 8007fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fc2:	3301      	adds	r3, #1
 8007fc4:	627b      	str	r3, [r7, #36]	; 0x24
 8007fc6:	8afb      	ldrh	r3, [r7, #22]
 8007fc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fca:	429a      	cmp	r2, r3
 8007fcc:	d382      	bcc.n	8007ed4 <LCD_DrawChar+0xb0>
      } 
    }
  }

  BSP_LCD_DrawBitmap(Xpos, Ypos, bitmap);
 8007fce:	88b9      	ldrh	r1, [r7, #4]
 8007fd0:	88fb      	ldrh	r3, [r7, #6]
 8007fd2:	4a0c      	ldr	r2, [pc, #48]	; (8008004 <LCD_DrawChar+0x1e0>)
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	f7ff feb3 	bl	8007d40 <BSP_LCD_DrawBitmap>
}
 8007fda:	bf00      	nop
 8007fdc:	3728      	adds	r7, #40	; 0x28
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	bd80      	pop	{r7, pc}
 8007fe2:	bf00      	nop
 8007fe4:	2000138c 	.word	0x2000138c
 8007fe8:	20000f2a 	.word	0x20000f2a
 8007fec:	20000f2c 	.word	0x20000f2c
 8007ff0:	20000f32 	.word	0x20000f32
 8007ff4:	20000f3a 	.word	0x20000f3a
 8007ff8:	20000f3c 	.word	0x20000f3c
 8007ffc:	20000f3e 	.word	0x20000f3e
 8008000:	20000f40 	.word	0x20000f40
 8008004:	20000f28 	.word	0x20000f28

08008008 <LCD_SetDisplayWindow>:
  * @param  Width: LCD window width
  * @param  Height: LCD window height  
  * @retval None
  */
static void LCD_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8008008:	b590      	push	{r4, r7, lr}
 800800a:	b083      	sub	sp, #12
 800800c:	af00      	add	r7, sp, #0
 800800e:	4604      	mov	r4, r0
 8008010:	4608      	mov	r0, r1
 8008012:	4611      	mov	r1, r2
 8008014:	461a      	mov	r2, r3
 8008016:	4623      	mov	r3, r4
 8008018:	80fb      	strh	r3, [r7, #6]
 800801a:	4603      	mov	r3, r0
 800801c:	80bb      	strh	r3, [r7, #4]
 800801e:	460b      	mov	r3, r1
 8008020:	807b      	strh	r3, [r7, #2]
 8008022:	4613      	mov	r3, r2
 8008024:	803b      	strh	r3, [r7, #0]
  if(lcd_drv->SetDisplayWindow != NULL)
 8008026:	4b08      	ldr	r3, [pc, #32]	; (8008048 <LCD_SetDisplayWindow+0x40>)
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	69db      	ldr	r3, [r3, #28]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d007      	beq.n	8008040 <LCD_SetDisplayWindow+0x38>
  {
    lcd_drv->SetDisplayWindow(Xpos, Ypos, Width, Height);
 8008030:	4b05      	ldr	r3, [pc, #20]	; (8008048 <LCD_SetDisplayWindow+0x40>)
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	69dc      	ldr	r4, [r3, #28]
 8008036:	883b      	ldrh	r3, [r7, #0]
 8008038:	887a      	ldrh	r2, [r7, #2]
 800803a:	88b9      	ldrh	r1, [r7, #4]
 800803c:	88f8      	ldrh	r0, [r7, #6]
 800803e:	47a0      	blx	r4
  }  
}
 8008040:	bf00      	nop
 8008042:	370c      	adds	r7, #12
 8008044:	46bd      	mov	sp, r7
 8008046:	bd90      	pop	{r4, r7, pc}
 8008048:	20000f24 	.word	0x20000f24

0800804c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800804c:	b480      	push	{r7}
 800804e:	b083      	sub	sp, #12
 8008050:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008052:	2300      	movs	r3, #0
 8008054:	607b      	str	r3, [r7, #4]
 8008056:	4b10      	ldr	r3, [pc, #64]	; (8008098 <HAL_MspInit+0x4c>)
 8008058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800805a:	4a0f      	ldr	r2, [pc, #60]	; (8008098 <HAL_MspInit+0x4c>)
 800805c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008060:	6453      	str	r3, [r2, #68]	; 0x44
 8008062:	4b0d      	ldr	r3, [pc, #52]	; (8008098 <HAL_MspInit+0x4c>)
 8008064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008066:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800806a:	607b      	str	r3, [r7, #4]
 800806c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800806e:	2300      	movs	r3, #0
 8008070:	603b      	str	r3, [r7, #0]
 8008072:	4b09      	ldr	r3, [pc, #36]	; (8008098 <HAL_MspInit+0x4c>)
 8008074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008076:	4a08      	ldr	r2, [pc, #32]	; (8008098 <HAL_MspInit+0x4c>)
 8008078:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800807c:	6413      	str	r3, [r2, #64]	; 0x40
 800807e:	4b06      	ldr	r3, [pc, #24]	; (8008098 <HAL_MspInit+0x4c>)
 8008080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008082:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008086:	603b      	str	r3, [r7, #0]
 8008088:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800808a:	bf00      	nop
 800808c:	370c      	adds	r7, #12
 800808e:	46bd      	mov	sp, r7
 8008090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008094:	4770      	bx	lr
 8008096:	bf00      	nop
 8008098:	40023800 	.word	0x40023800

0800809c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800809c:	b480      	push	{r7}
 800809e:	b085      	sub	sp, #20
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	4a0b      	ldr	r2, [pc, #44]	; (80080d8 <HAL_CRC_MspInit+0x3c>)
 80080aa:	4293      	cmp	r3, r2
 80080ac:	d10d      	bne.n	80080ca <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80080ae:	2300      	movs	r3, #0
 80080b0:	60fb      	str	r3, [r7, #12]
 80080b2:	4b0a      	ldr	r3, [pc, #40]	; (80080dc <HAL_CRC_MspInit+0x40>)
 80080b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080b6:	4a09      	ldr	r2, [pc, #36]	; (80080dc <HAL_CRC_MspInit+0x40>)
 80080b8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80080bc:	6313      	str	r3, [r2, #48]	; 0x30
 80080be:	4b07      	ldr	r3, [pc, #28]	; (80080dc <HAL_CRC_MspInit+0x40>)
 80080c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80080c6:	60fb      	str	r3, [r7, #12]
 80080c8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80080ca:	bf00      	nop
 80080cc:	3714      	adds	r7, #20
 80080ce:	46bd      	mov	sp, r7
 80080d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d4:	4770      	bx	lr
 80080d6:	bf00      	nop
 80080d8:	40023000 	.word	0x40023000
 80080dc:	40023800 	.word	0x40023800

080080e0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b08a      	sub	sp, #40	; 0x28
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80080e8:	f107 0314 	add.w	r3, r7, #20
 80080ec:	2200      	movs	r2, #0
 80080ee:	601a      	str	r2, [r3, #0]
 80080f0:	605a      	str	r2, [r3, #4]
 80080f2:	609a      	str	r2, [r3, #8]
 80080f4:	60da      	str	r2, [r3, #12]
 80080f6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	4a28      	ldr	r2, [pc, #160]	; (80081a0 <HAL_SPI_MspInit+0xc0>)
 80080fe:	4293      	cmp	r3, r2
 8008100:	d14a      	bne.n	8008198 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8008102:	2300      	movs	r3, #0
 8008104:	613b      	str	r3, [r7, #16]
 8008106:	4b27      	ldr	r3, [pc, #156]	; (80081a4 <HAL_SPI_MspInit+0xc4>)
 8008108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800810a:	4a26      	ldr	r2, [pc, #152]	; (80081a4 <HAL_SPI_MspInit+0xc4>)
 800810c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008110:	6413      	str	r3, [r2, #64]	; 0x40
 8008112:	4b24      	ldr	r3, [pc, #144]	; (80081a4 <HAL_SPI_MspInit+0xc4>)
 8008114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008116:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800811a:	613b      	str	r3, [r7, #16]
 800811c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800811e:	2300      	movs	r3, #0
 8008120:	60fb      	str	r3, [r7, #12]
 8008122:	4b20      	ldr	r3, [pc, #128]	; (80081a4 <HAL_SPI_MspInit+0xc4>)
 8008124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008126:	4a1f      	ldr	r2, [pc, #124]	; (80081a4 <HAL_SPI_MspInit+0xc4>)
 8008128:	f043 0304 	orr.w	r3, r3, #4
 800812c:	6313      	str	r3, [r2, #48]	; 0x30
 800812e:	4b1d      	ldr	r3, [pc, #116]	; (80081a4 <HAL_SPI_MspInit+0xc4>)
 8008130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008132:	f003 0304 	and.w	r3, r3, #4
 8008136:	60fb      	str	r3, [r7, #12]
 8008138:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800813a:	2300      	movs	r3, #0
 800813c:	60bb      	str	r3, [r7, #8]
 800813e:	4b19      	ldr	r3, [pc, #100]	; (80081a4 <HAL_SPI_MspInit+0xc4>)
 8008140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008142:	4a18      	ldr	r2, [pc, #96]	; (80081a4 <HAL_SPI_MspInit+0xc4>)
 8008144:	f043 0302 	orr.w	r3, r3, #2
 8008148:	6313      	str	r3, [r2, #48]	; 0x30
 800814a:	4b16      	ldr	r3, [pc, #88]	; (80081a4 <HAL_SPI_MspInit+0xc4>)
 800814c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800814e:	f003 0302 	and.w	r3, r3, #2
 8008152:	60bb      	str	r3, [r7, #8]
 8008154:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration    
    PC12     ------> SPI3_MOSI
    PB3     ------> SPI3_SCK
    PB4     ------> SPI3_MISO 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8008156:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800815a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800815c:	2302      	movs	r3, #2
 800815e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008160:	2300      	movs	r3, #0
 8008162:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008164:	2303      	movs	r3, #3
 8008166:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8008168:	2306      	movs	r3, #6
 800816a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800816c:	f107 0314 	add.w	r3, r7, #20
 8008170:	4619      	mov	r1, r3
 8008172:	480d      	ldr	r0, [pc, #52]	; (80081a8 <HAL_SPI_MspInit+0xc8>)
 8008174:	f7fc fb4e 	bl	8004814 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8008178:	2318      	movs	r3, #24
 800817a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800817c:	2302      	movs	r3, #2
 800817e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008180:	2300      	movs	r3, #0
 8008182:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008184:	2303      	movs	r3, #3
 8008186:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8008188:	2306      	movs	r3, #6
 800818a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800818c:	f107 0314 	add.w	r3, r7, #20
 8008190:	4619      	mov	r1, r3
 8008192:	4806      	ldr	r0, [pc, #24]	; (80081ac <HAL_SPI_MspInit+0xcc>)
 8008194:	f7fc fb3e 	bl	8004814 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8008198:	bf00      	nop
 800819a:	3728      	adds	r7, #40	; 0x28
 800819c:	46bd      	mov	sp, r7
 800819e:	bd80      	pop	{r7, pc}
 80081a0:	40003c00 	.word	0x40003c00
 80081a4:	40023800 	.word	0x40023800
 80081a8:	40020800 	.word	0x40020800
 80081ac:	40020400 	.word	0x40020400

080081b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b08a      	sub	sp, #40	; 0x28
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80081b8:	f107 0314 	add.w	r3, r7, #20
 80081bc:	2200      	movs	r2, #0
 80081be:	601a      	str	r2, [r3, #0]
 80081c0:	605a      	str	r2, [r3, #4]
 80081c2:	609a      	str	r2, [r3, #8]
 80081c4:	60da      	str	r2, [r3, #12]
 80081c6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	4a19      	ldr	r2, [pc, #100]	; (8008234 <HAL_UART_MspInit+0x84>)
 80081ce:	4293      	cmp	r3, r2
 80081d0:	d12c      	bne.n	800822c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80081d2:	2300      	movs	r3, #0
 80081d4:	613b      	str	r3, [r7, #16]
 80081d6:	4b18      	ldr	r3, [pc, #96]	; (8008238 <HAL_UART_MspInit+0x88>)
 80081d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081da:	4a17      	ldr	r2, [pc, #92]	; (8008238 <HAL_UART_MspInit+0x88>)
 80081dc:	f043 0310 	orr.w	r3, r3, #16
 80081e0:	6453      	str	r3, [r2, #68]	; 0x44
 80081e2:	4b15      	ldr	r3, [pc, #84]	; (8008238 <HAL_UART_MspInit+0x88>)
 80081e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081e6:	f003 0310 	and.w	r3, r3, #16
 80081ea:	613b      	str	r3, [r7, #16]
 80081ec:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80081ee:	2300      	movs	r3, #0
 80081f0:	60fb      	str	r3, [r7, #12]
 80081f2:	4b11      	ldr	r3, [pc, #68]	; (8008238 <HAL_UART_MspInit+0x88>)
 80081f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081f6:	4a10      	ldr	r2, [pc, #64]	; (8008238 <HAL_UART_MspInit+0x88>)
 80081f8:	f043 0301 	orr.w	r3, r3, #1
 80081fc:	6313      	str	r3, [r2, #48]	; 0x30
 80081fe:	4b0e      	ldr	r3, [pc, #56]	; (8008238 <HAL_UART_MspInit+0x88>)
 8008200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008202:	f003 0301 	and.w	r3, r3, #1
 8008206:	60fb      	str	r3, [r7, #12]
 8008208:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800820a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800820e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008210:	2302      	movs	r3, #2
 8008212:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008214:	2301      	movs	r3, #1
 8008216:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008218:	2303      	movs	r3, #3
 800821a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800821c:	2307      	movs	r3, #7
 800821e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008220:	f107 0314 	add.w	r3, r7, #20
 8008224:	4619      	mov	r1, r3
 8008226:	4805      	ldr	r0, [pc, #20]	; (800823c <HAL_UART_MspInit+0x8c>)
 8008228:	f7fc faf4 	bl	8004814 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800822c:	bf00      	nop
 800822e:	3728      	adds	r7, #40	; 0x28
 8008230:	46bd      	mov	sp, r7
 8008232:	bd80      	pop	{r7, pc}
 8008234:	40011000 	.word	0x40011000
 8008238:	40023800 	.word	0x40023800
 800823c:	40020000 	.word	0x40020000

08008240 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8008240:	b580      	push	{r7, lr}
 8008242:	b086      	sub	sp, #24
 8008244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8008246:	1d3b      	adds	r3, r7, #4
 8008248:	2200      	movs	r2, #0
 800824a:	601a      	str	r2, [r3, #0]
 800824c:	605a      	str	r2, [r3, #4]
 800824e:	609a      	str	r2, [r3, #8]
 8008250:	60da      	str	r2, [r3, #12]
 8008252:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8008254:	4b24      	ldr	r3, [pc, #144]	; (80082e8 <HAL_FSMC_MspInit+0xa8>)
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d140      	bne.n	80082de <HAL_FSMC_MspInit+0x9e>
    return;
  }
  FSMC_Initialized = 1;
 800825c:	4b22      	ldr	r3, [pc, #136]	; (80082e8 <HAL_FSMC_MspInit+0xa8>)
 800825e:	2201      	movs	r2, #1
 8008260:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8008262:	2300      	movs	r3, #0
 8008264:	603b      	str	r3, [r7, #0]
 8008266:	4b21      	ldr	r3, [pc, #132]	; (80082ec <HAL_FSMC_MspInit+0xac>)
 8008268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800826a:	4a20      	ldr	r2, [pc, #128]	; (80082ec <HAL_FSMC_MspInit+0xac>)
 800826c:	f043 0301 	orr.w	r3, r3, #1
 8008270:	6393      	str	r3, [r2, #56]	; 0x38
 8008272:	4b1e      	ldr	r3, [pc, #120]	; (80082ec <HAL_FSMC_MspInit+0xac>)
 8008274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008276:	f003 0301 	and.w	r3, r3, #1
 800827a:	603b      	str	r3, [r7, #0]
 800827c:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10 
 800827e:	f64f 7380 	movw	r3, #65408	; 0xff80
 8008282:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008284:	2302      	movs	r3, #2
 8008286:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008288:	2300      	movs	r3, #0
 800828a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800828c:	2303      	movs	r3, #3
 800828e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8008290:	230c      	movs	r3, #12
 8008292:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8008294:	1d3b      	adds	r3, r7, #4
 8008296:	4619      	mov	r1, r3
 8008298:	4815      	ldr	r0, [pc, #84]	; (80082f0 <HAL_FSMC_MspInit+0xb0>)
 800829a:	f7fc fabb 	bl	8004814 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14 
 800829e:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 80082a2:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4 
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80082a4:	2302      	movs	r3, #2
 80082a6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082a8:	2300      	movs	r3, #0
 80082aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80082ac:	2303      	movs	r3, #3
 80082ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80082b0:	230c      	movs	r3, #12
 80082b2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80082b4:	1d3b      	adds	r3, r7, #4
 80082b6:	4619      	mov	r1, r3
 80082b8:	480e      	ldr	r0, [pc, #56]	; (80082f4 <HAL_FSMC_MspInit+0xb4>)
 80082ba:	f7fc faab 	bl	8004814 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80082be:	2320      	movs	r3, #32
 80082c0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80082c2:	2302      	movs	r3, #2
 80082c4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082c6:	2300      	movs	r3, #0
 80082c8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80082ca:	2303      	movs	r3, #3
 80082cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80082ce:	230c      	movs	r3, #12
 80082d0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80082d2:	1d3b      	adds	r3, r7, #4
 80082d4:	4619      	mov	r1, r3
 80082d6:	4808      	ldr	r0, [pc, #32]	; (80082f8 <HAL_FSMC_MspInit+0xb8>)
 80082d8:	f7fc fa9c 	bl	8004814 <HAL_GPIO_Init>
 80082dc:	e000      	b.n	80082e0 <HAL_FSMC_MspInit+0xa0>
    return;
 80082de:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80082e0:	3718      	adds	r7, #24
 80082e2:	46bd      	mov	sp, r7
 80082e4:	bd80      	pop	{r7, pc}
 80082e6:	bf00      	nop
 80082e8:	20001290 	.word	0x20001290
 80082ec:	40023800 	.word	0x40023800
 80082f0:	40021000 	.word	0x40021000
 80082f4:	40020c00 	.word	0x40020c00
 80082f8:	40021800 	.word	0x40021800

080082fc <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b082      	sub	sp, #8
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8008304:	f7ff ff9c 	bl	8008240 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8008308:	bf00      	nop
 800830a:	3708      	adds	r7, #8
 800830c:	46bd      	mov	sp, r7
 800830e:	bd80      	pop	{r7, pc}

08008310 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008310:	b480      	push	{r7}
 8008312:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8008314:	bf00      	nop
 8008316:	46bd      	mov	sp, r7
 8008318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831c:	4770      	bx	lr

0800831e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800831e:	b480      	push	{r7}
 8008320:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008322:	e7fe      	b.n	8008322 <HardFault_Handler+0x4>

08008324 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008324:	b480      	push	{r7}
 8008326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008328:	e7fe      	b.n	8008328 <MemManage_Handler+0x4>

0800832a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800832a:	b480      	push	{r7}
 800832c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800832e:	e7fe      	b.n	800832e <BusFault_Handler+0x4>

08008330 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008330:	b480      	push	{r7}
 8008332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008334:	e7fe      	b.n	8008334 <UsageFault_Handler+0x4>

08008336 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008336:	b480      	push	{r7}
 8008338:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800833a:	bf00      	nop
 800833c:	46bd      	mov	sp, r7
 800833e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008342:	4770      	bx	lr

08008344 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008344:	b480      	push	{r7}
 8008346:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008348:	bf00      	nop
 800834a:	46bd      	mov	sp, r7
 800834c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008350:	4770      	bx	lr

08008352 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008352:	b480      	push	{r7}
 8008354:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008356:	bf00      	nop
 8008358:	46bd      	mov	sp, r7
 800835a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835e:	4770      	bx	lr

08008360 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008364:	f7fc f8ee 	bl	8004544 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008368:	bf00      	nop
 800836a:	bd80      	pop	{r7, pc}

0800836c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800836c:	b580      	push	{r7, lr}
 800836e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8008370:	4802      	ldr	r0, [pc, #8]	; (800837c <USART1_IRQHandler+0x10>)
 8008372:	f7fd fe73 	bl	800605c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8008376:	bf00      	nop
 8008378:	bd80      	pop	{r7, pc}
 800837a:	bf00      	nop
 800837c:	2000134c 	.word	0x2000134c

08008380 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008380:	b480      	push	{r7}
 8008382:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008384:	4b16      	ldr	r3, [pc, #88]	; (80083e0 <SystemInit+0x60>)
 8008386:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800838a:	4a15      	ldr	r2, [pc, #84]	; (80083e0 <SystemInit+0x60>)
 800838c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008390:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8008394:	4b13      	ldr	r3, [pc, #76]	; (80083e4 <SystemInit+0x64>)
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	4a12      	ldr	r2, [pc, #72]	; (80083e4 <SystemInit+0x64>)
 800839a:	f043 0301 	orr.w	r3, r3, #1
 800839e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80083a0:	4b10      	ldr	r3, [pc, #64]	; (80083e4 <SystemInit+0x64>)
 80083a2:	2200      	movs	r2, #0
 80083a4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80083a6:	4b0f      	ldr	r3, [pc, #60]	; (80083e4 <SystemInit+0x64>)
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	4a0e      	ldr	r2, [pc, #56]	; (80083e4 <SystemInit+0x64>)
 80083ac:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80083b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80083b4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80083b6:	4b0b      	ldr	r3, [pc, #44]	; (80083e4 <SystemInit+0x64>)
 80083b8:	4a0b      	ldr	r2, [pc, #44]	; (80083e8 <SystemInit+0x68>)
 80083ba:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80083bc:	4b09      	ldr	r3, [pc, #36]	; (80083e4 <SystemInit+0x64>)
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	4a08      	ldr	r2, [pc, #32]	; (80083e4 <SystemInit+0x64>)
 80083c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80083c6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80083c8:	4b06      	ldr	r3, [pc, #24]	; (80083e4 <SystemInit+0x64>)
 80083ca:	2200      	movs	r2, #0
 80083cc:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80083ce:	4b04      	ldr	r3, [pc, #16]	; (80083e0 <SystemInit+0x60>)
 80083d0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80083d4:	609a      	str	r2, [r3, #8]
#endif
}
 80083d6:	bf00      	nop
 80083d8:	46bd      	mov	sp, r7
 80083da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083de:	4770      	bx	lr
 80083e0:	e000ed00 	.word	0xe000ed00
 80083e4:	40023800 	.word	0x40023800
 80083e8:	24003010 	.word	0x24003010

080083ec <DelayUS>:
* Output         : None
* Return         : None
* Attention      : None
*******************************************************************************/
void DelayUS(uint32_t cnt)
{
 80083ec:	b480      	push	{r7}
 80083ee:	b085      	sub	sp, #20
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
  uint32_t i;
  i = cnt * 4;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	009b      	lsls	r3, r3, #2
 80083f8:	60fb      	str	r3, [r7, #12]
  while(i--);
 80083fa:	bf00      	nop
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	1e5a      	subs	r2, r3, #1
 8008400:	60fa      	str	r2, [r7, #12]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d1fa      	bne.n	80083fc <DelayUS+0x10>
}
 8008406:	bf00      	nop
 8008408:	3714      	adds	r7, #20
 800840a:	46bd      	mov	sp, r7
 800840c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008410:	4770      	bx	lr
	...

08008414 <WR_CMD>:
* Output         : None
* Return         : None
* Attention      : None
*******************************************************************************/
static void WR_CMD (uint8_t cmd)  
{ 
 8008414:	b580      	push	{r7, lr}
 8008416:	b082      	sub	sp, #8
 8008418:	af00      	add	r7, sp, #0
 800841a:	4603      	mov	r3, r0
 800841c:	71fb      	strb	r3, [r7, #7]
  HAL_SPI_Transmit(&TP_hspi,&cmd,1,1000);
 800841e:	1df9      	adds	r1, r7, #7
 8008420:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008424:	2201      	movs	r2, #1
 8008426:	4803      	ldr	r0, [pc, #12]	; (8008434 <WR_CMD+0x20>)
 8008428:	f7fd f896 	bl	8005558 <HAL_SPI_Transmit>
} 
 800842c:	bf00      	nop
 800842e:	3708      	adds	r7, #8
 8008430:	46bd      	mov	sp, r7
 8008432:	bd80      	pop	{r7, pc}
 8008434:	200012f4 	.word	0x200012f4

08008438 <RD_AD>:
* Output         : None
* Return         : 
* Attention      : None
*******************************************************************************/
static int RD_AD(void)  
{ 
 8008438:	b580      	push	{r7, lr}
 800843a:	b082      	sub	sp, #8
 800843c:	af00      	add	r7, sp, #0
  uint8_t buf[2];
  int value;
  HAL_SPI_Receive(&TP_hspi,buf,2,1000);
 800843e:	4639      	mov	r1, r7
 8008440:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008444:	2202      	movs	r2, #2
 8008446:	4809      	ldr	r0, [pc, #36]	; (800846c <RD_AD+0x34>)
 8008448:	f7fd f9ba 	bl	80057c0 <HAL_SPI_Receive>
  value = (uint16_t)((buf[0] << 8) + buf[1]) >> 3;
 800844c:	783b      	ldrb	r3, [r7, #0]
 800844e:	b29b      	uxth	r3, r3
 8008450:	021b      	lsls	r3, r3, #8
 8008452:	b29a      	uxth	r2, r3
 8008454:	787b      	ldrb	r3, [r7, #1]
 8008456:	b29b      	uxth	r3, r3
 8008458:	4413      	add	r3, r2
 800845a:	b29b      	uxth	r3, r3
 800845c:	08db      	lsrs	r3, r3, #3
 800845e:	b29b      	uxth	r3, r3
 8008460:	607b      	str	r3, [r7, #4]
  return value;
 8008462:	687b      	ldr	r3, [r7, #4]
} 
 8008464:	4618      	mov	r0, r3
 8008466:	3708      	adds	r7, #8
 8008468:	46bd      	mov	sp, r7
 800846a:	bd80      	pop	{r7, pc}
 800846c:	200012f4 	.word	0x200012f4

08008470 <Read_X>:
* Output         : None
* Return         : 
* Attention      : None
*******************************************************************************/
int Read_X(void)  
{  
 8008470:	b580      	push	{r7, lr}
 8008472:	b082      	sub	sp, #8
 8008474:	af00      	add	r7, sp, #0
  int i; 
  TP_CS(0); 
 8008476:	2200      	movs	r2, #0
 8008478:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800847c:	480c      	ldr	r0, [pc, #48]	; (80084b0 <Read_X+0x40>)
 800847e:	f7fc fb7b 	bl	8004b78 <HAL_GPIO_WritePin>
  DelayUS(1); 
 8008482:	2001      	movs	r0, #1
 8008484:	f7ff ffb2 	bl	80083ec <DelayUS>
  WR_CMD(CHX); 
 8008488:	2090      	movs	r0, #144	; 0x90
 800848a:	f7ff ffc3 	bl	8008414 <WR_CMD>
  DelayUS(1); 
 800848e:	2001      	movs	r0, #1
 8008490:	f7ff ffac 	bl	80083ec <DelayUS>
  i=RD_AD(); 
 8008494:	f7ff ffd0 	bl	8008438 <RD_AD>
 8008498:	6078      	str	r0, [r7, #4]
  TP_CS(1); 
 800849a:	2201      	movs	r2, #1
 800849c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80084a0:	4803      	ldr	r0, [pc, #12]	; (80084b0 <Read_X+0x40>)
 80084a2:	f7fc fb69 	bl	8004b78 <HAL_GPIO_WritePin>
  return i;    
 80084a6:	687b      	ldr	r3, [r7, #4]
} 
 80084a8:	4618      	mov	r0, r3
 80084aa:	3708      	adds	r7, #8
 80084ac:	46bd      	mov	sp, r7
 80084ae:	bd80      	pop	{r7, pc}
 80084b0:	40020000 	.word	0x40020000

080084b4 <Read_Y>:
* Output         : None
* Return         : 
* Attention      : None
*******************************************************************************/
int Read_Y(void)  
{  
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b082      	sub	sp, #8
 80084b8:	af00      	add	r7, sp, #0
  int i; 
  TP_CS(0); 
 80084ba:	2200      	movs	r2, #0
 80084bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80084c0:	480c      	ldr	r0, [pc, #48]	; (80084f4 <Read_Y+0x40>)
 80084c2:	f7fc fb59 	bl	8004b78 <HAL_GPIO_WritePin>
  DelayUS(1); 
 80084c6:	2001      	movs	r0, #1
 80084c8:	f7ff ff90 	bl	80083ec <DelayUS>
  WR_CMD(CHY); 
 80084cc:	20d0      	movs	r0, #208	; 0xd0
 80084ce:	f7ff ffa1 	bl	8008414 <WR_CMD>
  DelayUS(1); 
 80084d2:	2001      	movs	r0, #1
 80084d4:	f7ff ff8a 	bl	80083ec <DelayUS>
  i=RD_AD(); 
 80084d8:	f7ff ffae 	bl	8008438 <RD_AD>
 80084dc:	6078      	str	r0, [r7, #4]
  TP_CS(1); 
 80084de:	2201      	movs	r2, #1
 80084e0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80084e4:	4803      	ldr	r0, [pc, #12]	; (80084f4 <Read_Y+0x40>)
 80084e6:	f7fc fb47 	bl	8004b78 <HAL_GPIO_WritePin>
  return i;     
 80084ea:	687b      	ldr	r3, [r7, #4]
} 
 80084ec:	4618      	mov	r0, r3
 80084ee:	3708      	adds	r7, #8
 80084f0:	46bd      	mov	sp, r7
 80084f2:	bd80      	pop	{r7, pc}
 80084f4:	40020000 	.word	0x40020000

080084f8 <TP_GetAdXY>:
* Output         : None
* Return         : 
* Attention      : None
*******************************************************************************/
void TP_GetAdXY(int *x,int *y)  
{ 
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b084      	sub	sp, #16
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
 8008500:	6039      	str	r1, [r7, #0]
  int adx,ady; 
  adx=Read_X(); 
 8008502:	f7ff ffb5 	bl	8008470 <Read_X>
 8008506:	60f8      	str	r0, [r7, #12]
  DelayUS(1); 
 8008508:	2001      	movs	r0, #1
 800850a:	f7ff ff6f 	bl	80083ec <DelayUS>
  ady=Read_Y(); 
 800850e:	f7ff ffd1 	bl	80084b4 <Read_Y>
 8008512:	60b8      	str	r0, [r7, #8]
  *x=adx; 
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	68fa      	ldr	r2, [r7, #12]
 8008518:	601a      	str	r2, [r3, #0]
  *y=ady; 
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	68ba      	ldr	r2, [r7, #8]
 800851e:	601a      	str	r2, [r3, #0]
} 
 8008520:	bf00      	nop
 8008522:	3710      	adds	r7, #16
 8008524:	46bd      	mov	sp, r7
 8008526:	bd80      	pop	{r7, pc}

08008528 <DrawCross>:
* Output         : None
* Return         : None
* Attention      : None
*******************************************************************************/
void DrawCross(uint16_t Xpos,uint16_t Ypos)
{
 8008528:	b580      	push	{r7, lr}
 800852a:	b082      	sub	sp, #8
 800852c:	af00      	add	r7, sp, #0
 800852e:	4603      	mov	r3, r0
 8008530:	460a      	mov	r2, r1
 8008532:	80fb      	strh	r3, [r7, #6]
 8008534:	4613      	mov	r3, r2
 8008536:	80bb      	strh	r3, [r7, #4]
  BSP_LCD_DrawHLine(Xpos-13, Ypos, 10);
 8008538:	88fb      	ldrh	r3, [r7, #6]
 800853a:	3b0d      	subs	r3, #13
 800853c:	b29b      	uxth	r3, r3
 800853e:	88b9      	ldrh	r1, [r7, #4]
 8008540:	220a      	movs	r2, #10
 8008542:	4618      	mov	r0, r3
 8008544:	f7ff fb88 	bl	8007c58 <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(Xpos+4, Ypos, 10);
 8008548:	88fb      	ldrh	r3, [r7, #6]
 800854a:	3304      	adds	r3, #4
 800854c:	b29b      	uxth	r3, r3
 800854e:	88b9      	ldrh	r1, [r7, #4]
 8008550:	220a      	movs	r2, #10
 8008552:	4618      	mov	r0, r3
 8008554:	f7ff fb80 	bl	8007c58 <BSP_LCD_DrawHLine>
  BSP_LCD_DrawVLine(Xpos, Ypos-13, 10);
 8008558:	88bb      	ldrh	r3, [r7, #4]
 800855a:	3b0d      	subs	r3, #13
 800855c:	b299      	uxth	r1, r3
 800855e:	88fb      	ldrh	r3, [r7, #6]
 8008560:	220a      	movs	r2, #10
 8008562:	4618      	mov	r0, r3
 8008564:	f7ff fbb2 	bl	8007ccc <BSP_LCD_DrawVLine>
  BSP_LCD_DrawVLine(Xpos, Ypos+4, 10);  
 8008568:	88bb      	ldrh	r3, [r7, #4]
 800856a:	3304      	adds	r3, #4
 800856c:	b299      	uxth	r1, r3
 800856e:	88fb      	ldrh	r3, [r7, #6]
 8008570:	220a      	movs	r2, #10
 8008572:	4618      	mov	r0, r3
 8008574:	f7ff fbaa 	bl	8007ccc <BSP_LCD_DrawVLine>

}  
 8008578:	bf00      	nop
 800857a:	3708      	adds	r7, #8
 800857c:	46bd      	mov	sp, r7
 800857e:	bd80      	pop	{r7, pc}

08008580 <Read_Ads7846>:
* Output         : None
* Return         : Coordinate *
* Attention      : None
*******************************************************************************/
Coordinate *Read_Ads7846(void)
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b09c      	sub	sp, #112	; 0x70
 8008584:	af00      	add	r7, sp, #0
  static Coordinate  screen;
  int m0,m1,m2,TP_X[1],TP_Y[1],temp[3];
  uint8_t count=0;
 8008586:	2300      	movs	r3, #0
 8008588:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  int buffer[2][9]={{0},{0}};
 800858c:	1d3b      	adds	r3, r7, #4
 800858e:	2248      	movs	r2, #72	; 0x48
 8008590:	2100      	movs	r1, #0
 8008592:	4618      	mov	r0, r3
 8008594:	f000 fb90 	bl	8008cb8 <memset>
  
  do
  {       
    TP_GetAdXY(TP_X,TP_Y);  
 8008598:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800859c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80085a0:	4611      	mov	r1, r2
 80085a2:	4618      	mov	r0, r3
 80085a4:	f7ff ffa8 	bl	80084f8 <TP_GetAdXY>
    buffer[0][count]=TP_X[0];  
 80085a8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80085ac:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80085ae:	009b      	lsls	r3, r3, #2
 80085b0:	f107 0170 	add.w	r1, r7, #112	; 0x70
 80085b4:	440b      	add	r3, r1
 80085b6:	f843 2c6c 	str.w	r2, [r3, #-108]
    buffer[1][count]=TP_Y[0];
 80085ba:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80085be:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80085c0:	3309      	adds	r3, #9
 80085c2:	009b      	lsls	r3, r3, #2
 80085c4:	f107 0170 	add.w	r1, r7, #112	; 0x70
 80085c8:	440b      	add	r3, r1
 80085ca:	f843 2c6c 	str.w	r2, [r3, #-108]
    count++;  
 80085ce:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80085d2:	3301      	adds	r3, #1
 80085d4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  }
  while(!TP_INT_IN&& count<9);  /* TP_INT_IN  */
 80085d8:	2120      	movs	r1, #32
 80085da:	4885      	ldr	r0, [pc, #532]	; (80087f0 <Read_Ads7846+0x270>)
 80085dc:	f7fc fab4 	bl	8004b48 <HAL_GPIO_ReadPin>
 80085e0:	4603      	mov	r3, r0
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d103      	bne.n	80085ee <Read_Ads7846+0x6e>
 80085e6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80085ea:	2b08      	cmp	r3, #8
 80085ec:	d9d4      	bls.n	8008598 <Read_Ads7846+0x18>
  if(count==9)   /* Average X Y  */ 
 80085ee:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80085f2:	2b09      	cmp	r3, #9
 80085f4:	f040 80f6 	bne.w	80087e4 <Read_Ads7846+0x264>
  {
    /* Average X  */
    temp[0]=(buffer[0][0]+buffer[0][1]+buffer[0][2])/3;
 80085f8:	687a      	ldr	r2, [r7, #4]
 80085fa:	68bb      	ldr	r3, [r7, #8]
 80085fc:	441a      	add	r2, r3
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	4413      	add	r3, r2
 8008602:	4a7c      	ldr	r2, [pc, #496]	; (80087f4 <Read_Ads7846+0x274>)
 8008604:	fb82 1203 	smull	r1, r2, r2, r3
 8008608:	17db      	asrs	r3, r3, #31
 800860a:	1ad3      	subs	r3, r2, r3
 800860c:	64fb      	str	r3, [r7, #76]	; 0x4c
    temp[1]=(buffer[0][3]+buffer[0][4]+buffer[0][5])/3;
 800860e:	693a      	ldr	r2, [r7, #16]
 8008610:	697b      	ldr	r3, [r7, #20]
 8008612:	441a      	add	r2, r3
 8008614:	69bb      	ldr	r3, [r7, #24]
 8008616:	4413      	add	r3, r2
 8008618:	4a76      	ldr	r2, [pc, #472]	; (80087f4 <Read_Ads7846+0x274>)
 800861a:	fb82 1203 	smull	r1, r2, r2, r3
 800861e:	17db      	asrs	r3, r3, #31
 8008620:	1ad3      	subs	r3, r2, r3
 8008622:	653b      	str	r3, [r7, #80]	; 0x50
    temp[2]=(buffer[0][6]+buffer[0][7]+buffer[0][8])/3;
 8008624:	69fa      	ldr	r2, [r7, #28]
 8008626:	6a3b      	ldr	r3, [r7, #32]
 8008628:	441a      	add	r2, r3
 800862a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800862c:	4413      	add	r3, r2
 800862e:	4a71      	ldr	r2, [pc, #452]	; (80087f4 <Read_Ads7846+0x274>)
 8008630:	fb82 1203 	smull	r1, r2, r2, r3
 8008634:	17db      	asrs	r3, r3, #31
 8008636:	1ad3      	subs	r3, r2, r3
 8008638:	657b      	str	r3, [r7, #84]	; 0x54
   
    m0=temp[0]-temp[1];
 800863a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800863c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800863e:	1ad3      	subs	r3, r2, r3
 8008640:	66bb      	str	r3, [r7, #104]	; 0x68
    m1=temp[1]-temp[2];
 8008642:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008644:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008646:	1ad3      	subs	r3, r2, r3
 8008648:	667b      	str	r3, [r7, #100]	; 0x64
    m2=temp[2]-temp[0];
 800864a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800864c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800864e:	1ad3      	subs	r3, r2, r3
 8008650:	663b      	str	r3, [r7, #96]	; 0x60
   
    m0=m0>0?m0:(-m0);
 8008652:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008654:	2b00      	cmp	r3, #0
 8008656:	bfb8      	it	lt
 8008658:	425b      	neglt	r3, r3
 800865a:	66bb      	str	r3, [r7, #104]	; 0x68
    m1=m1>0?m1:(-m1);
 800865c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800865e:	2b00      	cmp	r3, #0
 8008660:	bfb8      	it	lt
 8008662:	425b      	neglt	r3, r3
 8008664:	667b      	str	r3, [r7, #100]	; 0x64
    m2=m2>0?m2:(-m2);
 8008666:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008668:	2b00      	cmp	r3, #0
 800866a:	bfb8      	it	lt
 800866c:	425b      	neglt	r3, r3
 800866e:	663b      	str	r3, [r7, #96]	; 0x60
   
    if( m0>THRESHOLD  &&  m1>THRESHOLD  &&  m2>THRESHOLD ) return 0;
 8008670:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008672:	2b02      	cmp	r3, #2
 8008674:	dd07      	ble.n	8008686 <Read_Ads7846+0x106>
 8008676:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008678:	2b02      	cmp	r3, #2
 800867a:	dd04      	ble.n	8008686 <Read_Ads7846+0x106>
 800867c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800867e:	2b02      	cmp	r3, #2
 8008680:	dd01      	ble.n	8008686 <Read_Ads7846+0x106>
 8008682:	2300      	movs	r3, #0
 8008684:	e0af      	b.n	80087e6 <Read_Ads7846+0x266>
   
    if(m0<m1)
 8008686:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008688:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800868a:	429a      	cmp	r2, r3
 800868c:	da17      	bge.n	80086be <Read_Ads7846+0x13e>
    {
      if(m2<m0) 
 800868e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008690:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008692:	429a      	cmp	r2, r3
 8008694:	da09      	bge.n	80086aa <Read_Ads7846+0x12a>
        screen.x=(temp[0]+temp[2])/2;
 8008696:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008698:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800869a:	4413      	add	r3, r2
 800869c:	0fda      	lsrs	r2, r3, #31
 800869e:	4413      	add	r3, r2
 80086a0:	105b      	asrs	r3, r3, #1
 80086a2:	b29a      	uxth	r2, r3
 80086a4:	4b54      	ldr	r3, [pc, #336]	; (80087f8 <Read_Ads7846+0x278>)
 80086a6:	801a      	strh	r2, [r3, #0]
 80086a8:	e020      	b.n	80086ec <Read_Ads7846+0x16c>
      else 
        screen.x=(temp[0]+temp[1])/2;  
 80086aa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80086ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80086ae:	4413      	add	r3, r2
 80086b0:	0fda      	lsrs	r2, r3, #31
 80086b2:	4413      	add	r3, r2
 80086b4:	105b      	asrs	r3, r3, #1
 80086b6:	b29a      	uxth	r2, r3
 80086b8:	4b4f      	ldr	r3, [pc, #316]	; (80087f8 <Read_Ads7846+0x278>)
 80086ba:	801a      	strh	r2, [r3, #0]
 80086bc:	e016      	b.n	80086ec <Read_Ads7846+0x16c>
    }
    else if(m2<m1) 
 80086be:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80086c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80086c2:	429a      	cmp	r2, r3
 80086c4:	da09      	bge.n	80086da <Read_Ads7846+0x15a>
      screen.x=(temp[0]+temp[2])/2;
 80086c6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80086c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80086ca:	4413      	add	r3, r2
 80086cc:	0fda      	lsrs	r2, r3, #31
 80086ce:	4413      	add	r3, r2
 80086d0:	105b      	asrs	r3, r3, #1
 80086d2:	b29a      	uxth	r2, r3
 80086d4:	4b48      	ldr	r3, [pc, #288]	; (80087f8 <Read_Ads7846+0x278>)
 80086d6:	801a      	strh	r2, [r3, #0]
 80086d8:	e008      	b.n	80086ec <Read_Ads7846+0x16c>
    else 
      screen.x=(temp[1]+temp[2])/2;
 80086da:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80086dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80086de:	4413      	add	r3, r2
 80086e0:	0fda      	lsrs	r2, r3, #31
 80086e2:	4413      	add	r3, r2
 80086e4:	105b      	asrs	r3, r3, #1
 80086e6:	b29a      	uxth	r2, r3
 80086e8:	4b43      	ldr	r3, [pc, #268]	; (80087f8 <Read_Ads7846+0x278>)
 80086ea:	801a      	strh	r2, [r3, #0]
   
    /* Average Y  */
    temp[0]=(buffer[1][0]+buffer[1][1]+buffer[1][2])/3;
 80086ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80086ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086f0:	441a      	add	r2, r3
 80086f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086f4:	4413      	add	r3, r2
 80086f6:	4a3f      	ldr	r2, [pc, #252]	; (80087f4 <Read_Ads7846+0x274>)
 80086f8:	fb82 1203 	smull	r1, r2, r2, r3
 80086fc:	17db      	asrs	r3, r3, #31
 80086fe:	1ad3      	subs	r3, r2, r3
 8008700:	64fb      	str	r3, [r7, #76]	; 0x4c
    temp[1]=(buffer[1][3]+buffer[1][4]+buffer[1][5])/3;
 8008702:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008706:	441a      	add	r2, r3
 8008708:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800870a:	4413      	add	r3, r2
 800870c:	4a39      	ldr	r2, [pc, #228]	; (80087f4 <Read_Ads7846+0x274>)
 800870e:	fb82 1203 	smull	r1, r2, r2, r3
 8008712:	17db      	asrs	r3, r3, #31
 8008714:	1ad3      	subs	r3, r2, r3
 8008716:	653b      	str	r3, [r7, #80]	; 0x50
    temp[2]=(buffer[1][6]+buffer[1][7]+buffer[1][8])/3;
 8008718:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800871a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800871c:	441a      	add	r2, r3
 800871e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008720:	4413      	add	r3, r2
 8008722:	4a34      	ldr	r2, [pc, #208]	; (80087f4 <Read_Ads7846+0x274>)
 8008724:	fb82 1203 	smull	r1, r2, r2, r3
 8008728:	17db      	asrs	r3, r3, #31
 800872a:	1ad3      	subs	r3, r2, r3
 800872c:	657b      	str	r3, [r7, #84]	; 0x54
    m0=temp[0]-temp[1];
 800872e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008730:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008732:	1ad3      	subs	r3, r2, r3
 8008734:	66bb      	str	r3, [r7, #104]	; 0x68
    m1=temp[1]-temp[2];
 8008736:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008738:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800873a:	1ad3      	subs	r3, r2, r3
 800873c:	667b      	str	r3, [r7, #100]	; 0x64
    m2=temp[2]-temp[0];
 800873e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008740:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008742:	1ad3      	subs	r3, r2, r3
 8008744:	663b      	str	r3, [r7, #96]	; 0x60
    m0=m0>0?m0:(-m0);
 8008746:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008748:	2b00      	cmp	r3, #0
 800874a:	bfb8      	it	lt
 800874c:	425b      	neglt	r3, r3
 800874e:	66bb      	str	r3, [r7, #104]	; 0x68
    m1=m1>0?m1:(-m1);
 8008750:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008752:	2b00      	cmp	r3, #0
 8008754:	bfb8      	it	lt
 8008756:	425b      	neglt	r3, r3
 8008758:	667b      	str	r3, [r7, #100]	; 0x64
    m2=m2>0?m2:(-m2);
 800875a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800875c:	2b00      	cmp	r3, #0
 800875e:	bfb8      	it	lt
 8008760:	425b      	neglt	r3, r3
 8008762:	663b      	str	r3, [r7, #96]	; 0x60
    if(m0>THRESHOLD&&m1>THRESHOLD&&m2>THRESHOLD) return 0;
 8008764:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008766:	2b02      	cmp	r3, #2
 8008768:	dd07      	ble.n	800877a <Read_Ads7846+0x1fa>
 800876a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800876c:	2b02      	cmp	r3, #2
 800876e:	dd04      	ble.n	800877a <Read_Ads7846+0x1fa>
 8008770:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008772:	2b02      	cmp	r3, #2
 8008774:	dd01      	ble.n	800877a <Read_Ads7846+0x1fa>
 8008776:	2300      	movs	r3, #0
 8008778:	e035      	b.n	80087e6 <Read_Ads7846+0x266>
   
    if(m0<m1)
 800877a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800877c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800877e:	429a      	cmp	r2, r3
 8008780:	da17      	bge.n	80087b2 <Read_Ads7846+0x232>
    {
      if(m2<m0) 
 8008782:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008784:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008786:	429a      	cmp	r2, r3
 8008788:	da09      	bge.n	800879e <Read_Ads7846+0x21e>
        screen.y=(temp[0]+temp[2])/2;
 800878a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800878c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800878e:	4413      	add	r3, r2
 8008790:	0fda      	lsrs	r2, r3, #31
 8008792:	4413      	add	r3, r2
 8008794:	105b      	asrs	r3, r3, #1
 8008796:	b29a      	uxth	r2, r3
 8008798:	4b17      	ldr	r3, [pc, #92]	; (80087f8 <Read_Ads7846+0x278>)
 800879a:	805a      	strh	r2, [r3, #2]
 800879c:	e020      	b.n	80087e0 <Read_Ads7846+0x260>
      else 
        screen.y=(temp[0]+temp[1])/2;  
 800879e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80087a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80087a2:	4413      	add	r3, r2
 80087a4:	0fda      	lsrs	r2, r3, #31
 80087a6:	4413      	add	r3, r2
 80087a8:	105b      	asrs	r3, r3, #1
 80087aa:	b29a      	uxth	r2, r3
 80087ac:	4b12      	ldr	r3, [pc, #72]	; (80087f8 <Read_Ads7846+0x278>)
 80087ae:	805a      	strh	r2, [r3, #2]
 80087b0:	e016      	b.n	80087e0 <Read_Ads7846+0x260>
      }
    else if(m2<m1) 
 80087b2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80087b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80087b6:	429a      	cmp	r2, r3
 80087b8:	da09      	bge.n	80087ce <Read_Ads7846+0x24e>
       screen.y=(temp[0]+temp[2])/2;
 80087ba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80087bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80087be:	4413      	add	r3, r2
 80087c0:	0fda      	lsrs	r2, r3, #31
 80087c2:	4413      	add	r3, r2
 80087c4:	105b      	asrs	r3, r3, #1
 80087c6:	b29a      	uxth	r2, r3
 80087c8:	4b0b      	ldr	r3, [pc, #44]	; (80087f8 <Read_Ads7846+0x278>)
 80087ca:	805a      	strh	r2, [r3, #2]
 80087cc:	e008      	b.n	80087e0 <Read_Ads7846+0x260>
    else
       screen.y=(temp[1]+temp[2])/2;
 80087ce:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80087d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80087d2:	4413      	add	r3, r2
 80087d4:	0fda      	lsrs	r2, r3, #31
 80087d6:	4413      	add	r3, r2
 80087d8:	105b      	asrs	r3, r3, #1
 80087da:	b29a      	uxth	r2, r3
 80087dc:	4b06      	ldr	r3, [pc, #24]	; (80087f8 <Read_Ads7846+0x278>)
 80087de:	805a      	strh	r2, [r3, #2]
   
    return &screen;
 80087e0:	4b05      	ldr	r3, [pc, #20]	; (80087f8 <Read_Ads7846+0x278>)
 80087e2:	e000      	b.n	80087e6 <Read_Ads7846+0x266>
  }
  return 0; 
 80087e4:	2300      	movs	r3, #0
}
 80087e6:	4618      	mov	r0, r3
 80087e8:	3770      	adds	r7, #112	; 0x70
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bd80      	pop	{r7, pc}
 80087ee:	bf00      	nop
 80087f0:	40020800 	.word	0x40020800
 80087f4:	55555556 	.word	0x55555556
 80087f8:	20001294 	.word	0x20001294

080087fc <setCalibrationMatrix>:
* Attention      : None
*******************************************************************************/
FunctionalState setCalibrationMatrix( Coordinate * displayPtr,
                          Coordinate * screenPtr,
                          Matrix * matrixPtr)
{
 80087fc:	b590      	push	{r4, r7, lr}
 80087fe:	b087      	sub	sp, #28
 8008800:	af00      	add	r7, sp, #0
 8008802:	60f8      	str	r0, [r7, #12]
 8008804:	60b9      	str	r1, [r7, #8]
 8008806:	607a      	str	r2, [r7, #4]

  FunctionalState retTHRESHOLD = ENABLE ;
 8008808:	2301      	movs	r3, #1
 800880a:	75fb      	strb	r3, [r7, #23]
  /* K=(X0-X2) (Y1-Y2)-(X1-X2) (Y0-Y2) */
  matrixPtr->Divider = ((screenPtr[0].x - screenPtr[2].x) * (screenPtr[1].y - screenPtr[2].y)) - 
 800880c:	68bb      	ldr	r3, [r7, #8]
 800880e:	881b      	ldrh	r3, [r3, #0]
 8008810:	461a      	mov	r2, r3
 8008812:	68bb      	ldr	r3, [r7, #8]
 8008814:	3308      	adds	r3, #8
 8008816:	881b      	ldrh	r3, [r3, #0]
 8008818:	1ad3      	subs	r3, r2, r3
 800881a:	68ba      	ldr	r2, [r7, #8]
 800881c:	3204      	adds	r2, #4
 800881e:	8852      	ldrh	r2, [r2, #2]
 8008820:	4611      	mov	r1, r2
 8008822:	68ba      	ldr	r2, [r7, #8]
 8008824:	3208      	adds	r2, #8
 8008826:	8852      	ldrh	r2, [r2, #2]
 8008828:	1a8a      	subs	r2, r1, r2
 800882a:	fb02 f203 	mul.w	r2, r2, r3
                       ((screenPtr[1].x - screenPtr[2].x) * (screenPtr[0].y - screenPtr[2].y)) ;
 800882e:	68bb      	ldr	r3, [r7, #8]
 8008830:	3304      	adds	r3, #4
 8008832:	881b      	ldrh	r3, [r3, #0]
 8008834:	4619      	mov	r1, r3
 8008836:	68bb      	ldr	r3, [r7, #8]
 8008838:	3308      	adds	r3, #8
 800883a:	881b      	ldrh	r3, [r3, #0]
 800883c:	1acb      	subs	r3, r1, r3
 800883e:	68b9      	ldr	r1, [r7, #8]
 8008840:	8849      	ldrh	r1, [r1, #2]
 8008842:	4608      	mov	r0, r1
 8008844:	68b9      	ldr	r1, [r7, #8]
 8008846:	3108      	adds	r1, #8
 8008848:	8849      	ldrh	r1, [r1, #2]
 800884a:	1a41      	subs	r1, r0, r1
 800884c:	fb01 f303 	mul.w	r3, r1, r3
  matrixPtr->Divider = ((screenPtr[0].x - screenPtr[2].x) * (screenPtr[1].y - screenPtr[2].y)) - 
 8008850:	1ad3      	subs	r3, r2, r3
 8008852:	4618      	mov	r0, r3
 8008854:	f7fb fac8 	bl	8003de8 <__aeabi_i2d>
 8008858:	4603      	mov	r3, r0
 800885a:	460c      	mov	r4, r1
 800885c:	687a      	ldr	r2, [r7, #4]
 800885e:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
  if( matrixPtr->Divider == 0 )
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8008868:	f04f 0200 	mov.w	r2, #0
 800886c:	f04f 0300 	mov.w	r3, #0
 8008870:	f7fb fb7a 	bl	8003f68 <__aeabi_dcmpeq>
 8008874:	4603      	mov	r3, r0
 8008876:	2b00      	cmp	r3, #0
 8008878:	d002      	beq.n	8008880 <setCalibrationMatrix+0x84>
  {
    retTHRESHOLD = DISABLE;
 800887a:	2300      	movs	r3, #0
 800887c:	75fb      	strb	r3, [r7, #23]
 800887e:	e145      	b.n	8008b0c <setCalibrationMatrix+0x310>
  }
  else
  {
    /* A=((XD0-XD2) (Y1-Y2)-(XD1-XD2) (Y0-Y2))/K  */
    matrixPtr->An = ((displayPtr[0].x - displayPtr[2].x) * (screenPtr[1].y - screenPtr[2].y)) - 
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	881b      	ldrh	r3, [r3, #0]
 8008884:	461a      	mov	r2, r3
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	3308      	adds	r3, #8
 800888a:	881b      	ldrh	r3, [r3, #0]
 800888c:	1ad3      	subs	r3, r2, r3
 800888e:	68ba      	ldr	r2, [r7, #8]
 8008890:	3204      	adds	r2, #4
 8008892:	8852      	ldrh	r2, [r2, #2]
 8008894:	4611      	mov	r1, r2
 8008896:	68ba      	ldr	r2, [r7, #8]
 8008898:	3208      	adds	r2, #8
 800889a:	8852      	ldrh	r2, [r2, #2]
 800889c:	1a8a      	subs	r2, r1, r2
 800889e:	fb02 f203 	mul.w	r2, r2, r3
                    ((displayPtr[1].x - displayPtr[2].x) * (screenPtr[0].y - screenPtr[2].y)) ;
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	3304      	adds	r3, #4
 80088a6:	881b      	ldrh	r3, [r3, #0]
 80088a8:	4619      	mov	r1, r3
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	3308      	adds	r3, #8
 80088ae:	881b      	ldrh	r3, [r3, #0]
 80088b0:	1acb      	subs	r3, r1, r3
 80088b2:	68b9      	ldr	r1, [r7, #8]
 80088b4:	8849      	ldrh	r1, [r1, #2]
 80088b6:	4608      	mov	r0, r1
 80088b8:	68b9      	ldr	r1, [r7, #8]
 80088ba:	3108      	adds	r1, #8
 80088bc:	8849      	ldrh	r1, [r1, #2]
 80088be:	1a41      	subs	r1, r0, r1
 80088c0:	fb01 f303 	mul.w	r3, r1, r3
    matrixPtr->An = ((displayPtr[0].x - displayPtr[2].x) * (screenPtr[1].y - screenPtr[2].y)) - 
 80088c4:	1ad3      	subs	r3, r2, r3
 80088c6:	4618      	mov	r0, r3
 80088c8:	f7fb fa8e 	bl	8003de8 <__aeabi_i2d>
 80088cc:	4603      	mov	r3, r0
 80088ce:	460c      	mov	r4, r1
 80088d0:	687a      	ldr	r2, [r7, #4]
 80088d2:	e9c2 3400 	strd	r3, r4, [r2]
  /* B=((X0-X2) (XD1-XD2)-(XD0-XD2) (X1-X2))/K  */
    matrixPtr->Bn = ((screenPtr[0].x - screenPtr[2].x) * (displayPtr[1].x - displayPtr[2].x)) - 
 80088d6:	68bb      	ldr	r3, [r7, #8]
 80088d8:	881b      	ldrh	r3, [r3, #0]
 80088da:	461a      	mov	r2, r3
 80088dc:	68bb      	ldr	r3, [r7, #8]
 80088de:	3308      	adds	r3, #8
 80088e0:	881b      	ldrh	r3, [r3, #0]
 80088e2:	1ad3      	subs	r3, r2, r3
 80088e4:	68fa      	ldr	r2, [r7, #12]
 80088e6:	3204      	adds	r2, #4
 80088e8:	8812      	ldrh	r2, [r2, #0]
 80088ea:	4611      	mov	r1, r2
 80088ec:	68fa      	ldr	r2, [r7, #12]
 80088ee:	3208      	adds	r2, #8
 80088f0:	8812      	ldrh	r2, [r2, #0]
 80088f2:	1a8a      	subs	r2, r1, r2
 80088f4:	fb02 f203 	mul.w	r2, r2, r3
                    ((displayPtr[0].x - displayPtr[2].x) * (screenPtr[1].x - screenPtr[2].x)) ;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	881b      	ldrh	r3, [r3, #0]
 80088fc:	4619      	mov	r1, r3
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	3308      	adds	r3, #8
 8008902:	881b      	ldrh	r3, [r3, #0]
 8008904:	1acb      	subs	r3, r1, r3
 8008906:	68b9      	ldr	r1, [r7, #8]
 8008908:	3104      	adds	r1, #4
 800890a:	8809      	ldrh	r1, [r1, #0]
 800890c:	4608      	mov	r0, r1
 800890e:	68b9      	ldr	r1, [r7, #8]
 8008910:	3108      	adds	r1, #8
 8008912:	8809      	ldrh	r1, [r1, #0]
 8008914:	1a41      	subs	r1, r0, r1
 8008916:	fb01 f303 	mul.w	r3, r1, r3
    matrixPtr->Bn = ((screenPtr[0].x - screenPtr[2].x) * (displayPtr[1].x - displayPtr[2].x)) - 
 800891a:	1ad3      	subs	r3, r2, r3
 800891c:	4618      	mov	r0, r3
 800891e:	f7fb fa63 	bl	8003de8 <__aeabi_i2d>
 8008922:	4603      	mov	r3, r0
 8008924:	460c      	mov	r4, r1
 8008926:	687a      	ldr	r2, [r7, #4]
 8008928:	e9c2 3402 	strd	r3, r4, [r2, #8]
    /* C=(Y0(X2XD1-X1XD2)+Y1(X0XD2-X2XD0)+Y2(X1XD0-X0XD1))/K */
    matrixPtr->Cn = (screenPtr[2].x * displayPtr[1].x - screenPtr[1].x * displayPtr[2].x) * screenPtr[0].y +
 800892c:	68bb      	ldr	r3, [r7, #8]
 800892e:	3308      	adds	r3, #8
 8008930:	881b      	ldrh	r3, [r3, #0]
 8008932:	461a      	mov	r2, r3
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	3304      	adds	r3, #4
 8008938:	881b      	ldrh	r3, [r3, #0]
 800893a:	fb03 f202 	mul.w	r2, r3, r2
 800893e:	68bb      	ldr	r3, [r7, #8]
 8008940:	3304      	adds	r3, #4
 8008942:	881b      	ldrh	r3, [r3, #0]
 8008944:	4619      	mov	r1, r3
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	3308      	adds	r3, #8
 800894a:	881b      	ldrh	r3, [r3, #0]
 800894c:	fb03 f301 	mul.w	r3, r3, r1
 8008950:	1ad3      	subs	r3, r2, r3
 8008952:	68ba      	ldr	r2, [r7, #8]
 8008954:	8852      	ldrh	r2, [r2, #2]
 8008956:	fb02 f203 	mul.w	r2, r2, r3
                    (screenPtr[0].x * displayPtr[2].x - screenPtr[2].x * displayPtr[0].x) * screenPtr[1].y +
 800895a:	68bb      	ldr	r3, [r7, #8]
 800895c:	881b      	ldrh	r3, [r3, #0]
 800895e:	4619      	mov	r1, r3
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	3308      	adds	r3, #8
 8008964:	881b      	ldrh	r3, [r3, #0]
 8008966:	fb03 f101 	mul.w	r1, r3, r1
 800896a:	68bb      	ldr	r3, [r7, #8]
 800896c:	3308      	adds	r3, #8
 800896e:	881b      	ldrh	r3, [r3, #0]
 8008970:	4618      	mov	r0, r3
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	881b      	ldrh	r3, [r3, #0]
 8008976:	fb03 f300 	mul.w	r3, r3, r0
 800897a:	1acb      	subs	r3, r1, r3
 800897c:	68b9      	ldr	r1, [r7, #8]
 800897e:	3104      	adds	r1, #4
 8008980:	8849      	ldrh	r1, [r1, #2]
 8008982:	fb01 f303 	mul.w	r3, r1, r3
    matrixPtr->Cn = (screenPtr[2].x * displayPtr[1].x - screenPtr[1].x * displayPtr[2].x) * screenPtr[0].y +
 8008986:	441a      	add	r2, r3
                    (screenPtr[1].x * displayPtr[0].x - screenPtr[0].x * displayPtr[1].x) * screenPtr[2].y ;
 8008988:	68bb      	ldr	r3, [r7, #8]
 800898a:	3304      	adds	r3, #4
 800898c:	881b      	ldrh	r3, [r3, #0]
 800898e:	4619      	mov	r1, r3
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	881b      	ldrh	r3, [r3, #0]
 8008994:	fb03 f101 	mul.w	r1, r3, r1
 8008998:	68bb      	ldr	r3, [r7, #8]
 800899a:	881b      	ldrh	r3, [r3, #0]
 800899c:	4618      	mov	r0, r3
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	3304      	adds	r3, #4
 80089a2:	881b      	ldrh	r3, [r3, #0]
 80089a4:	fb03 f300 	mul.w	r3, r3, r0
 80089a8:	1acb      	subs	r3, r1, r3
 80089aa:	68b9      	ldr	r1, [r7, #8]
 80089ac:	3108      	adds	r1, #8
 80089ae:	8849      	ldrh	r1, [r1, #2]
 80089b0:	fb01 f303 	mul.w	r3, r1, r3
                    (screenPtr[0].x * displayPtr[2].x - screenPtr[2].x * displayPtr[0].x) * screenPtr[1].y +
 80089b4:	4413      	add	r3, r2
    matrixPtr->Cn = (screenPtr[2].x * displayPtr[1].x - screenPtr[1].x * displayPtr[2].x) * screenPtr[0].y +
 80089b6:	4618      	mov	r0, r3
 80089b8:	f7fb fa16 	bl	8003de8 <__aeabi_i2d>
 80089bc:	4603      	mov	r3, r0
 80089be:	460c      	mov	r4, r1
 80089c0:	687a      	ldr	r2, [r7, #4]
 80089c2:	e9c2 3404 	strd	r3, r4, [r2, #16]
    /* D=((YD0-YD2) (Y1-Y2)-(YD1-YD2) (Y0-Y2))/K  */
    matrixPtr->Dn = ((displayPtr[0].y - displayPtr[2].y) * (screenPtr[1].y - screenPtr[2].y)) - 
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	885b      	ldrh	r3, [r3, #2]
 80089ca:	461a      	mov	r2, r3
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	3308      	adds	r3, #8
 80089d0:	885b      	ldrh	r3, [r3, #2]
 80089d2:	1ad3      	subs	r3, r2, r3
 80089d4:	68ba      	ldr	r2, [r7, #8]
 80089d6:	3204      	adds	r2, #4
 80089d8:	8852      	ldrh	r2, [r2, #2]
 80089da:	4611      	mov	r1, r2
 80089dc:	68ba      	ldr	r2, [r7, #8]
 80089de:	3208      	adds	r2, #8
 80089e0:	8852      	ldrh	r2, [r2, #2]
 80089e2:	1a8a      	subs	r2, r1, r2
 80089e4:	fb02 f203 	mul.w	r2, r2, r3
                    ((displayPtr[1].y - displayPtr[2].y) * (screenPtr[0].y - screenPtr[2].y)) ;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	3304      	adds	r3, #4
 80089ec:	885b      	ldrh	r3, [r3, #2]
 80089ee:	4619      	mov	r1, r3
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	3308      	adds	r3, #8
 80089f4:	885b      	ldrh	r3, [r3, #2]
 80089f6:	1acb      	subs	r3, r1, r3
 80089f8:	68b9      	ldr	r1, [r7, #8]
 80089fa:	8849      	ldrh	r1, [r1, #2]
 80089fc:	4608      	mov	r0, r1
 80089fe:	68b9      	ldr	r1, [r7, #8]
 8008a00:	3108      	adds	r1, #8
 8008a02:	8849      	ldrh	r1, [r1, #2]
 8008a04:	1a41      	subs	r1, r0, r1
 8008a06:	fb01 f303 	mul.w	r3, r1, r3
    matrixPtr->Dn = ((displayPtr[0].y - displayPtr[2].y) * (screenPtr[1].y - screenPtr[2].y)) - 
 8008a0a:	1ad3      	subs	r3, r2, r3
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	f7fb f9eb 	bl	8003de8 <__aeabi_i2d>
 8008a12:	4603      	mov	r3, r0
 8008a14:	460c      	mov	r4, r1
 8008a16:	687a      	ldr	r2, [r7, #4]
 8008a18:	e9c2 3406 	strd	r3, r4, [r2, #24]
    /* E=((X0-X2) (YD1-YD2)-(YD0-YD2) (X1-X2))/K  */
    matrixPtr->En = ((screenPtr[0].x - screenPtr[2].x) * (displayPtr[1].y - displayPtr[2].y)) - 
 8008a1c:	68bb      	ldr	r3, [r7, #8]
 8008a1e:	881b      	ldrh	r3, [r3, #0]
 8008a20:	461a      	mov	r2, r3
 8008a22:	68bb      	ldr	r3, [r7, #8]
 8008a24:	3308      	adds	r3, #8
 8008a26:	881b      	ldrh	r3, [r3, #0]
 8008a28:	1ad3      	subs	r3, r2, r3
 8008a2a:	68fa      	ldr	r2, [r7, #12]
 8008a2c:	3204      	adds	r2, #4
 8008a2e:	8852      	ldrh	r2, [r2, #2]
 8008a30:	4611      	mov	r1, r2
 8008a32:	68fa      	ldr	r2, [r7, #12]
 8008a34:	3208      	adds	r2, #8
 8008a36:	8852      	ldrh	r2, [r2, #2]
 8008a38:	1a8a      	subs	r2, r1, r2
 8008a3a:	fb02 f203 	mul.w	r2, r2, r3
                    ((displayPtr[0].y - displayPtr[2].y) * (screenPtr[1].x - screenPtr[2].x)) ;
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	885b      	ldrh	r3, [r3, #2]
 8008a42:	4619      	mov	r1, r3
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	3308      	adds	r3, #8
 8008a48:	885b      	ldrh	r3, [r3, #2]
 8008a4a:	1acb      	subs	r3, r1, r3
 8008a4c:	68b9      	ldr	r1, [r7, #8]
 8008a4e:	3104      	adds	r1, #4
 8008a50:	8809      	ldrh	r1, [r1, #0]
 8008a52:	4608      	mov	r0, r1
 8008a54:	68b9      	ldr	r1, [r7, #8]
 8008a56:	3108      	adds	r1, #8
 8008a58:	8809      	ldrh	r1, [r1, #0]
 8008a5a:	1a41      	subs	r1, r0, r1
 8008a5c:	fb01 f303 	mul.w	r3, r1, r3
    matrixPtr->En = ((screenPtr[0].x - screenPtr[2].x) * (displayPtr[1].y - displayPtr[2].y)) - 
 8008a60:	1ad3      	subs	r3, r2, r3
 8008a62:	4618      	mov	r0, r3
 8008a64:	f7fb f9c0 	bl	8003de8 <__aeabi_i2d>
 8008a68:	4603      	mov	r3, r0
 8008a6a:	460c      	mov	r4, r1
 8008a6c:	687a      	ldr	r2, [r7, #4]
 8008a6e:	e9c2 3408 	strd	r3, r4, [r2, #32]
    /* F=(Y0(X2YD1-X1YD2)+Y1(X0YD2-X2YD0)+Y2(X1YD0-X0YD1))/K */
    matrixPtr->Fn = (screenPtr[2].x * displayPtr[1].y - screenPtr[1].x * displayPtr[2].y) * screenPtr[0].y +
 8008a72:	68bb      	ldr	r3, [r7, #8]
 8008a74:	3308      	adds	r3, #8
 8008a76:	881b      	ldrh	r3, [r3, #0]
 8008a78:	461a      	mov	r2, r3
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	3304      	adds	r3, #4
 8008a7e:	885b      	ldrh	r3, [r3, #2]
 8008a80:	fb03 f202 	mul.w	r2, r3, r2
 8008a84:	68bb      	ldr	r3, [r7, #8]
 8008a86:	3304      	adds	r3, #4
 8008a88:	881b      	ldrh	r3, [r3, #0]
 8008a8a:	4619      	mov	r1, r3
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	3308      	adds	r3, #8
 8008a90:	885b      	ldrh	r3, [r3, #2]
 8008a92:	fb03 f301 	mul.w	r3, r3, r1
 8008a96:	1ad3      	subs	r3, r2, r3
 8008a98:	68ba      	ldr	r2, [r7, #8]
 8008a9a:	8852      	ldrh	r2, [r2, #2]
 8008a9c:	fb02 f203 	mul.w	r2, r2, r3
                    (screenPtr[0].x * displayPtr[2].y - screenPtr[2].x * displayPtr[0].y) * screenPtr[1].y +
 8008aa0:	68bb      	ldr	r3, [r7, #8]
 8008aa2:	881b      	ldrh	r3, [r3, #0]
 8008aa4:	4619      	mov	r1, r3
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	3308      	adds	r3, #8
 8008aaa:	885b      	ldrh	r3, [r3, #2]
 8008aac:	fb03 f101 	mul.w	r1, r3, r1
 8008ab0:	68bb      	ldr	r3, [r7, #8]
 8008ab2:	3308      	adds	r3, #8
 8008ab4:	881b      	ldrh	r3, [r3, #0]
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	885b      	ldrh	r3, [r3, #2]
 8008abc:	fb03 f300 	mul.w	r3, r3, r0
 8008ac0:	1acb      	subs	r3, r1, r3
 8008ac2:	68b9      	ldr	r1, [r7, #8]
 8008ac4:	3104      	adds	r1, #4
 8008ac6:	8849      	ldrh	r1, [r1, #2]
 8008ac8:	fb01 f303 	mul.w	r3, r1, r3
    matrixPtr->Fn = (screenPtr[2].x * displayPtr[1].y - screenPtr[1].x * displayPtr[2].y) * screenPtr[0].y +
 8008acc:	441a      	add	r2, r3
                    (screenPtr[1].x * displayPtr[0].y - screenPtr[0].x * displayPtr[1].y) * screenPtr[2].y ;
 8008ace:	68bb      	ldr	r3, [r7, #8]
 8008ad0:	3304      	adds	r3, #4
 8008ad2:	881b      	ldrh	r3, [r3, #0]
 8008ad4:	4619      	mov	r1, r3
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	885b      	ldrh	r3, [r3, #2]
 8008ada:	fb03 f101 	mul.w	r1, r3, r1
 8008ade:	68bb      	ldr	r3, [r7, #8]
 8008ae0:	881b      	ldrh	r3, [r3, #0]
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	3304      	adds	r3, #4
 8008ae8:	885b      	ldrh	r3, [r3, #2]
 8008aea:	fb03 f300 	mul.w	r3, r3, r0
 8008aee:	1acb      	subs	r3, r1, r3
 8008af0:	68b9      	ldr	r1, [r7, #8]
 8008af2:	3108      	adds	r1, #8
 8008af4:	8849      	ldrh	r1, [r1, #2]
 8008af6:	fb01 f303 	mul.w	r3, r1, r3
                    (screenPtr[0].x * displayPtr[2].y - screenPtr[2].x * displayPtr[0].y) * screenPtr[1].y +
 8008afa:	4413      	add	r3, r2
    matrixPtr->Fn = (screenPtr[2].x * displayPtr[1].y - screenPtr[1].x * displayPtr[2].y) * screenPtr[0].y +
 8008afc:	4618      	mov	r0, r3
 8008afe:	f7fb f973 	bl	8003de8 <__aeabi_i2d>
 8008b02:	4603      	mov	r3, r0
 8008b04:	460c      	mov	r4, r1
 8008b06:	687a      	ldr	r2, [r7, #4]
 8008b08:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
  }
  return( retTHRESHOLD ) ;
 8008b0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b0e:	4618      	mov	r0, r3
 8008b10:	371c      	adds	r7, #28
 8008b12:	46bd      	mov	sp, r7
 8008b14:	bd90      	pop	{r4, r7, pc}
	...

08008b18 <TouchPanel_Calibrate>:
* Output         : None
* Return         : None
* Attention      : None
*******************************************************************************/
void TouchPanel_Calibrate(void)
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b082      	sub	sp, #8
 8008b1c:	af00      	add	r7, sp, #0
  uint8_t i;
  Coordinate * Ptr;

  for(i=0;i<3;i++)
 8008b1e:	2300      	movs	r3, #0
 8008b20:	71fb      	strb	r3, [r7, #7]
 8008b22:	e03a      	b.n	8008b9a <TouchPanel_Calibrate+0x82>
  {
    BSP_LCD_SetFont(&Font12);
 8008b24:	4824      	ldr	r0, [pc, #144]	; (8008bb8 <TouchPanel_Calibrate+0xa0>)
 8008b26:	f7fe ff7b 	bl	8007a20 <BSP_LCD_SetFont>
    BSP_LCD_Clear(LCD_COLOR_WHITE);
 8008b2a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8008b2e:	f7fe ff93 	bl	8007a58 <BSP_LCD_Clear>
    BSP_LCD_SetTextColor(LCD_COLOR_BLUE); 
 8008b32:	201f      	movs	r0, #31
 8008b34:	f7fe ff64 	bl	8007a00 <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAtLine(1, (uint8_t*)"        Touch crosshair to calibrate");
 8008b38:	4920      	ldr	r1, [pc, #128]	; (8008bbc <TouchPanel_Calibrate+0xa4>)
 8008b3a:	2001      	movs	r0, #1
 8008b3c:	f7ff f874 	bl	8007c28 <BSP_LCD_DisplayStringAtLine>
    BSP_LCD_SetFont(&Font24);
 8008b40:	481f      	ldr	r0, [pc, #124]	; (8008bc0 <TouchPanel_Calibrate+0xa8>)
 8008b42:	f7fe ff6d 	bl	8007a20 <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAtLine(5, (uint8_t*)"   Waveshare LCD");
 8008b46:	491f      	ldr	r1, [pc, #124]	; (8008bc4 <TouchPanel_Calibrate+0xac>)
 8008b48:	2005      	movs	r0, #5
 8008b4a:	f7ff f86d 	bl	8007c28 <BSP_LCD_DisplayStringAtLine>
    HAL_Delay(200);
 8008b4e:	20c8      	movs	r0, #200	; 0xc8
 8008b50:	f7fb fd18 	bl	8004584 <HAL_Delay>
    DrawCross(DisplaySample[i].x,DisplaySample[i].y);
 8008b54:	79fb      	ldrb	r3, [r7, #7]
 8008b56:	4a1c      	ldr	r2, [pc, #112]	; (8008bc8 <TouchPanel_Calibrate+0xb0>)
 8008b58:	f832 0023 	ldrh.w	r0, [r2, r3, lsl #2]
 8008b5c:	79fb      	ldrb	r3, [r7, #7]
 8008b5e:	4a1a      	ldr	r2, [pc, #104]	; (8008bc8 <TouchPanel_Calibrate+0xb0>)
 8008b60:	009b      	lsls	r3, r3, #2
 8008b62:	4413      	add	r3, r2
 8008b64:	885b      	ldrh	r3, [r3, #2]
 8008b66:	4619      	mov	r1, r3
 8008b68:	f7ff fcde 	bl	8008528 <DrawCross>
    do
    {
      Ptr=Read_Ads7846();
 8008b6c:	f7ff fd08 	bl	8008580 <Read_Ads7846>
 8008b70:	6038      	str	r0, [r7, #0]
    }
    while( Ptr == (void*)0 );
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d0f9      	beq.n	8008b6c <TouchPanel_Calibrate+0x54>
    ScreenSample[i].x= Ptr->x; ScreenSample[i].y= Ptr->y;
 8008b78:	79fb      	ldrb	r3, [r7, #7]
 8008b7a:	683a      	ldr	r2, [r7, #0]
 8008b7c:	8811      	ldrh	r1, [r2, #0]
 8008b7e:	4a13      	ldr	r2, [pc, #76]	; (8008bcc <TouchPanel_Calibrate+0xb4>)
 8008b80:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
 8008b84:	79fb      	ldrb	r3, [r7, #7]
 8008b86:	683a      	ldr	r2, [r7, #0]
 8008b88:	8851      	ldrh	r1, [r2, #2]
 8008b8a:	4a10      	ldr	r2, [pc, #64]	; (8008bcc <TouchPanel_Calibrate+0xb4>)
 8008b8c:	009b      	lsls	r3, r3, #2
 8008b8e:	4413      	add	r3, r2
 8008b90:	460a      	mov	r2, r1
 8008b92:	805a      	strh	r2, [r3, #2]
  for(i=0;i<3;i++)
 8008b94:	79fb      	ldrb	r3, [r7, #7]
 8008b96:	3301      	adds	r3, #1
 8008b98:	71fb      	strb	r3, [r7, #7]
 8008b9a:	79fb      	ldrb	r3, [r7, #7]
 8008b9c:	2b02      	cmp	r3, #2
 8008b9e:	d9c1      	bls.n	8008b24 <TouchPanel_Calibrate+0xc>
  }
  setCalibrationMatrix( &DisplaySample[0],&ScreenSample[0],&matrix );
 8008ba0:	4a0b      	ldr	r2, [pc, #44]	; (8008bd0 <TouchPanel_Calibrate+0xb8>)
 8008ba2:	490a      	ldr	r1, [pc, #40]	; (8008bcc <TouchPanel_Calibrate+0xb4>)
 8008ba4:	4808      	ldr	r0, [pc, #32]	; (8008bc8 <TouchPanel_Calibrate+0xb0>)
 8008ba6:	f7ff fe29 	bl	80087fc <setCalibrationMatrix>
  BSP_LCD_Clear(LCD_COLOR_BLACK);
 8008baa:	2000      	movs	r0, #0
 8008bac:	f7fe ff54 	bl	8007a58 <BSP_LCD_Clear>
} 
 8008bb0:	bf00      	nop
 8008bb2:	3708      	adds	r7, #8
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	bd80      	pop	{r7, pc}
 8008bb8:	20000598 	.word	0x20000598
 8008bbc:	08009f64 	.word	0x08009f64
 8008bc0:	20000590 	.word	0x20000590
 8008bc4:	08009f8c 	.word	0x08009f8c
 8008bc8:	200005a4 	.word	0x200005a4
 8008bcc:	2000139c 	.word	0x2000139c
 8008bd0:	200013a8 	.word	0x200013a8

08008bd4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8008bd4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008c0c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8008bd8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8008bda:	e003      	b.n	8008be4 <LoopCopyDataInit>

08008bdc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8008bdc:	4b0c      	ldr	r3, [pc, #48]	; (8008c10 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8008bde:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8008be0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8008be2:	3104      	adds	r1, #4

08008be4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8008be4:	480b      	ldr	r0, [pc, #44]	; (8008c14 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8008be6:	4b0c      	ldr	r3, [pc, #48]	; (8008c18 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8008be8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8008bea:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8008bec:	d3f6      	bcc.n	8008bdc <CopyDataInit>
  ldr  r2, =_sbss
 8008bee:	4a0b      	ldr	r2, [pc, #44]	; (8008c1c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8008bf0:	e002      	b.n	8008bf8 <LoopFillZerobss>

08008bf2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8008bf2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8008bf4:	f842 3b04 	str.w	r3, [r2], #4

08008bf8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8008bf8:	4b09      	ldr	r3, [pc, #36]	; (8008c20 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8008bfa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8008bfc:	d3f9      	bcc.n	8008bf2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8008bfe:	f7ff fbbf 	bl	8008380 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008c02:	f000 f81b 	bl	8008c3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008c06:	f7fe fc45 	bl	8007494 <main>
  bx  lr    
 8008c0a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8008c0c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8008c10:	080f1a34 	.word	0x080f1a34
  ldr  r0, =_sdata
 8008c14:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8008c18:	20000618 	.word	0x20000618
  ldr  r2, =_sbss
 8008c1c:	20000618 	.word	0x20000618
  ldr  r3, = _ebss
 8008c20:	200013e0 	.word	0x200013e0

08008c24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008c24:	e7fe      	b.n	8008c24 <ADC_IRQHandler>

08008c26 <__aeabi_memclr>:
 8008c26:	2200      	movs	r2, #0
 8008c28:	f7fa bf3e 	b.w	8003aa8 <__aeabi_memset>

08008c2c <__aeabi_memcpy>:
 8008c2c:	f000 b839 	b.w	8008ca2 <memcpy>

08008c30 <__errno>:
 8008c30:	4b01      	ldr	r3, [pc, #4]	; (8008c38 <__errno+0x8>)
 8008c32:	6818      	ldr	r0, [r3, #0]
 8008c34:	4770      	bx	lr
 8008c36:	bf00      	nop
 8008c38:	200005b0 	.word	0x200005b0

08008c3c <__libc_init_array>:
 8008c3c:	b570      	push	{r4, r5, r6, lr}
 8008c3e:	4e0d      	ldr	r6, [pc, #52]	; (8008c74 <__libc_init_array+0x38>)
 8008c40:	4c0d      	ldr	r4, [pc, #52]	; (8008c78 <__libc_init_array+0x3c>)
 8008c42:	1ba4      	subs	r4, r4, r6
 8008c44:	10a4      	asrs	r4, r4, #2
 8008c46:	2500      	movs	r5, #0
 8008c48:	42a5      	cmp	r5, r4
 8008c4a:	d109      	bne.n	8008c60 <__libc_init_array+0x24>
 8008c4c:	4e0b      	ldr	r6, [pc, #44]	; (8008c7c <__libc_init_array+0x40>)
 8008c4e:	4c0c      	ldr	r4, [pc, #48]	; (8008c80 <__libc_init_array+0x44>)
 8008c50:	f001 f97c 	bl	8009f4c <_init>
 8008c54:	1ba4      	subs	r4, r4, r6
 8008c56:	10a4      	asrs	r4, r4, #2
 8008c58:	2500      	movs	r5, #0
 8008c5a:	42a5      	cmp	r5, r4
 8008c5c:	d105      	bne.n	8008c6a <__libc_init_array+0x2e>
 8008c5e:	bd70      	pop	{r4, r5, r6, pc}
 8008c60:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008c64:	4798      	blx	r3
 8008c66:	3501      	adds	r5, #1
 8008c68:	e7ee      	b.n	8008c48 <__libc_init_array+0xc>
 8008c6a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008c6e:	4798      	blx	r3
 8008c70:	3501      	adds	r5, #1
 8008c72:	e7f2      	b.n	8008c5a <__libc_init_array+0x1e>
 8008c74:	080f1a2c 	.word	0x080f1a2c
 8008c78:	080f1a2c 	.word	0x080f1a2c
 8008c7c:	080f1a2c 	.word	0x080f1a2c
 8008c80:	080f1a30 	.word	0x080f1a30

08008c84 <memcmp>:
 8008c84:	b530      	push	{r4, r5, lr}
 8008c86:	2400      	movs	r4, #0
 8008c88:	42a2      	cmp	r2, r4
 8008c8a:	d101      	bne.n	8008c90 <memcmp+0xc>
 8008c8c:	2000      	movs	r0, #0
 8008c8e:	e007      	b.n	8008ca0 <memcmp+0x1c>
 8008c90:	5d03      	ldrb	r3, [r0, r4]
 8008c92:	3401      	adds	r4, #1
 8008c94:	190d      	adds	r5, r1, r4
 8008c96:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8008c9a:	42ab      	cmp	r3, r5
 8008c9c:	d0f4      	beq.n	8008c88 <memcmp+0x4>
 8008c9e:	1b58      	subs	r0, r3, r5
 8008ca0:	bd30      	pop	{r4, r5, pc}

08008ca2 <memcpy>:
 8008ca2:	b510      	push	{r4, lr}
 8008ca4:	1e43      	subs	r3, r0, #1
 8008ca6:	440a      	add	r2, r1
 8008ca8:	4291      	cmp	r1, r2
 8008caa:	d100      	bne.n	8008cae <memcpy+0xc>
 8008cac:	bd10      	pop	{r4, pc}
 8008cae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008cb2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008cb6:	e7f7      	b.n	8008ca8 <memcpy+0x6>

08008cb8 <memset>:
 8008cb8:	4402      	add	r2, r0
 8008cba:	4603      	mov	r3, r0
 8008cbc:	4293      	cmp	r3, r2
 8008cbe:	d100      	bne.n	8008cc2 <memset+0xa>
 8008cc0:	4770      	bx	lr
 8008cc2:	f803 1b01 	strb.w	r1, [r3], #1
 8008cc6:	e7f9      	b.n	8008cbc <memset+0x4>

08008cc8 <tanhf>:
 8008cc8:	b510      	push	{r4, lr}
 8008cca:	ee10 4a10 	vmov	r4, s0
 8008cce:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8008cd2:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8008cd6:	ed2d 8b02 	vpush	{d8}
 8008cda:	eef0 7a40 	vmov.f32	s15, s0
 8008cde:	db0c      	blt.n	8008cfa <tanhf+0x32>
 8008ce0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008ce4:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8008ce8:	2c00      	cmp	r4, #0
 8008cea:	bfac      	ite	ge
 8008cec:	ee30 0a07 	vaddge.f32	s0, s0, s14
 8008cf0:	ee30 0a47 	vsublt.f32	s0, s0, s14
 8008cf4:	ecbd 8b02 	vpop	{d8}
 8008cf8:	bd10      	pop	{r4, pc}
 8008cfa:	4a1b      	ldr	r2, [pc, #108]	; (8008d68 <tanhf+0xa0>)
 8008cfc:	4293      	cmp	r3, r2
 8008cfe:	dc30      	bgt.n	8008d62 <tanhf+0x9a>
 8008d00:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
 8008d04:	da06      	bge.n	8008d14 <tanhf+0x4c>
 8008d06:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8008d0a:	ee37 0a80 	vadd.f32	s0, s15, s0
 8008d0e:	ee20 0a27 	vmul.f32	s0, s0, s15
 8008d12:	e7ef      	b.n	8008cf4 <tanhf+0x2c>
 8008d14:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8008d18:	eeb0 8a00 	vmov.f32	s16, #0	; 0x40000000  2.0
 8008d1c:	db12      	blt.n	8008d44 <tanhf+0x7c>
 8008d1e:	f001 f837 	bl	8009d90 <fabsf>
 8008d22:	ee30 0a00 	vadd.f32	s0, s0, s0
 8008d26:	f000 ff07 	bl	8009b38 <expm1f>
 8008d2a:	ee30 0a08 	vadd.f32	s0, s0, s16
 8008d2e:	eec8 7a00 	vdiv.f32	s15, s16, s0
 8008d32:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8008d36:	ee30 0a67 	vsub.f32	s0, s0, s15
 8008d3a:	2c00      	cmp	r4, #0
 8008d3c:	bfb8      	it	lt
 8008d3e:	eeb1 0a40 	vneglt.f32	s0, s0
 8008d42:	e7d7      	b.n	8008cf4 <tanhf+0x2c>
 8008d44:	f001 f824 	bl	8009d90 <fabsf>
 8008d48:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
 8008d4c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8008d50:	f000 fef2 	bl	8009b38 <expm1f>
 8008d54:	ee70 7a08 	vadd.f32	s15, s0, s16
 8008d58:	eeb1 7a40 	vneg.f32	s14, s0
 8008d5c:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8008d60:	e7eb      	b.n	8008d3a <tanhf+0x72>
 8008d62:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8008d66:	e7e8      	b.n	8008d3a <tanhf+0x72>
 8008d68:	41afffff 	.word	0x41afffff

08008d6c <expf>:
 8008d6c:	b530      	push	{r4, r5, lr}
 8008d6e:	ed2d 8b02 	vpush	{d8}
 8008d72:	4d35      	ldr	r5, [pc, #212]	; (8008e48 <expf+0xdc>)
 8008d74:	b08b      	sub	sp, #44	; 0x2c
 8008d76:	eeb0 8a40 	vmov.f32	s16, s0
 8008d7a:	f000 fa4b 	bl	8009214 <__ieee754_expf>
 8008d7e:	f995 3000 	ldrsb.w	r3, [r5]
 8008d82:	3301      	adds	r3, #1
 8008d84:	ee10 4a10 	vmov	r4, s0
 8008d88:	d030      	beq.n	8008dec <expf+0x80>
 8008d8a:	eeb0 0a48 	vmov.f32	s0, s16
 8008d8e:	f001 f806 	bl	8009d9e <finitef>
 8008d92:	b358      	cbz	r0, 8008dec <expf+0x80>
 8008d94:	eddf 7a2d 	vldr	s15, [pc, #180]	; 8008e4c <expf+0xe0>
 8008d98:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8008d9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008da0:	dd35      	ble.n	8008e0e <expf+0xa2>
 8008da2:	2303      	movs	r3, #3
 8008da4:	9300      	str	r3, [sp, #0]
 8008da6:	4b2a      	ldr	r3, [pc, #168]	; (8008e50 <expf+0xe4>)
 8008da8:	9301      	str	r3, [sp, #4]
 8008daa:	ee18 0a10 	vmov	r0, s16
 8008dae:	2300      	movs	r3, #0
 8008db0:	9308      	str	r3, [sp, #32]
 8008db2:	f7fb f82b 	bl	8003e0c <__aeabi_f2d>
 8008db6:	f995 3000 	ldrsb.w	r3, [r5]
 8008dba:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008dbe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008dc2:	b9cb      	cbnz	r3, 8008df8 <expf+0x8c>
 8008dc4:	4b23      	ldr	r3, [pc, #140]	; (8008e54 <expf+0xe8>)
 8008dc6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8008dca:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008dce:	4668      	mov	r0, sp
 8008dd0:	f000 fea5 	bl	8009b1e <matherr>
 8008dd4:	b1b0      	cbz	r0, 8008e04 <expf+0x98>
 8008dd6:	9b08      	ldr	r3, [sp, #32]
 8008dd8:	b11b      	cbz	r3, 8008de2 <expf+0x76>
 8008dda:	f7ff ff29 	bl	8008c30 <__errno>
 8008dde:	9b08      	ldr	r3, [sp, #32]
 8008de0:	6003      	str	r3, [r0, #0]
 8008de2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008de6:	f7fb f8f1 	bl	8003fcc <__aeabi_d2f>
 8008dea:	4604      	mov	r4, r0
 8008dec:	ee00 4a10 	vmov	s0, r4
 8008df0:	b00b      	add	sp, #44	; 0x2c
 8008df2:	ecbd 8b02 	vpop	{d8}
 8008df6:	bd30      	pop	{r4, r5, pc}
 8008df8:	4917      	ldr	r1, [pc, #92]	; (8008e58 <expf+0xec>)
 8008dfa:	2000      	movs	r0, #0
 8008dfc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008e00:	2b02      	cmp	r3, #2
 8008e02:	d1e4      	bne.n	8008dce <expf+0x62>
 8008e04:	f7ff ff14 	bl	8008c30 <__errno>
 8008e08:	2322      	movs	r3, #34	; 0x22
 8008e0a:	6003      	str	r3, [r0, #0]
 8008e0c:	e7e3      	b.n	8008dd6 <expf+0x6a>
 8008e0e:	eddf 7a13 	vldr	s15, [pc, #76]	; 8008e5c <expf+0xf0>
 8008e12:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8008e16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e1a:	d5e7      	bpl.n	8008dec <expf+0x80>
 8008e1c:	2304      	movs	r3, #4
 8008e1e:	9300      	str	r3, [sp, #0]
 8008e20:	4b0b      	ldr	r3, [pc, #44]	; (8008e50 <expf+0xe4>)
 8008e22:	9301      	str	r3, [sp, #4]
 8008e24:	ee18 0a10 	vmov	r0, s16
 8008e28:	2300      	movs	r3, #0
 8008e2a:	9308      	str	r3, [sp, #32]
 8008e2c:	f7fa ffee 	bl	8003e0c <__aeabi_f2d>
 8008e30:	2300      	movs	r3, #0
 8008e32:	2200      	movs	r2, #0
 8008e34:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008e38:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008e3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008e40:	f995 3000 	ldrsb.w	r3, [r5]
 8008e44:	e7dc      	b.n	8008e00 <expf+0x94>
 8008e46:	bf00      	nop
 8008e48:	20000614 	.word	0x20000614
 8008e4c:	42b17180 	.word	0x42b17180
 8008e50:	080f19dc 	.word	0x080f19dc
 8008e54:	47efffff 	.word	0x47efffff
 8008e58:	7ff00000 	.word	0x7ff00000
 8008e5c:	c2cff1b5 	.word	0xc2cff1b5

08008e60 <logf>:
 8008e60:	b510      	push	{r4, lr}
 8008e62:	ed2d 8b02 	vpush	{d8}
 8008e66:	b08a      	sub	sp, #40	; 0x28
 8008e68:	eeb0 8a40 	vmov.f32	s16, s0
 8008e6c:	f000 faa6 	bl	80093bc <__ieee754_logf>
 8008e70:	4b31      	ldr	r3, [pc, #196]	; (8008f38 <logf+0xd8>)
 8008e72:	f993 4000 	ldrsb.w	r4, [r3]
 8008e76:	1c63      	adds	r3, r4, #1
 8008e78:	d059      	beq.n	8008f2e <logf+0xce>
 8008e7a:	eeb4 8a48 	vcmp.f32	s16, s16
 8008e7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e82:	d654      	bvs.n	8008f2e <logf+0xce>
 8008e84:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8008e88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e8c:	dc4f      	bgt.n	8008f2e <logf+0xce>
 8008e8e:	4b2b      	ldr	r3, [pc, #172]	; (8008f3c <logf+0xdc>)
 8008e90:	9301      	str	r3, [sp, #4]
 8008e92:	ee18 0a10 	vmov	r0, s16
 8008e96:	2300      	movs	r3, #0
 8008e98:	9308      	str	r3, [sp, #32]
 8008e9a:	f7fa ffb7 	bl	8003e0c <__aeabi_f2d>
 8008e9e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008ea2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008ea6:	b994      	cbnz	r4, 8008ece <logf+0x6e>
 8008ea8:	4b25      	ldr	r3, [pc, #148]	; (8008f40 <logf+0xe0>)
 8008eaa:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8008eae:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8008eb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008eb6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008eba:	d025      	beq.n	8008f08 <logf+0xa8>
 8008ebc:	2301      	movs	r3, #1
 8008ebe:	2c02      	cmp	r4, #2
 8008ec0:	9300      	str	r3, [sp, #0]
 8008ec2:	d116      	bne.n	8008ef2 <logf+0x92>
 8008ec4:	f7ff feb4 	bl	8008c30 <__errno>
 8008ec8:	2321      	movs	r3, #33	; 0x21
 8008eca:	6003      	str	r3, [r0, #0]
 8008ecc:	e016      	b.n	8008efc <logf+0x9c>
 8008ece:	4b1d      	ldr	r3, [pc, #116]	; (8008f44 <logf+0xe4>)
 8008ed0:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008eda:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008ede:	d1ed      	bne.n	8008ebc <logf+0x5c>
 8008ee0:	2302      	movs	r3, #2
 8008ee2:	429c      	cmp	r4, r3
 8008ee4:	9300      	str	r3, [sp, #0]
 8008ee6:	d111      	bne.n	8008f0c <logf+0xac>
 8008ee8:	f7ff fea2 	bl	8008c30 <__errno>
 8008eec:	2322      	movs	r3, #34	; 0x22
 8008eee:	6003      	str	r3, [r0, #0]
 8008ef0:	e011      	b.n	8008f16 <logf+0xb6>
 8008ef2:	4668      	mov	r0, sp
 8008ef4:	f000 fe13 	bl	8009b1e <matherr>
 8008ef8:	2800      	cmp	r0, #0
 8008efa:	d0e3      	beq.n	8008ec4 <logf+0x64>
 8008efc:	4812      	ldr	r0, [pc, #72]	; (8008f48 <logf+0xe8>)
 8008efe:	f000 fe13 	bl	8009b28 <nan>
 8008f02:	ed8d 0b06 	vstr	d0, [sp, #24]
 8008f06:	e006      	b.n	8008f16 <logf+0xb6>
 8008f08:	2302      	movs	r3, #2
 8008f0a:	9300      	str	r3, [sp, #0]
 8008f0c:	4668      	mov	r0, sp
 8008f0e:	f000 fe06 	bl	8009b1e <matherr>
 8008f12:	2800      	cmp	r0, #0
 8008f14:	d0e8      	beq.n	8008ee8 <logf+0x88>
 8008f16:	9b08      	ldr	r3, [sp, #32]
 8008f18:	b11b      	cbz	r3, 8008f22 <logf+0xc2>
 8008f1a:	f7ff fe89 	bl	8008c30 <__errno>
 8008f1e:	9b08      	ldr	r3, [sp, #32]
 8008f20:	6003      	str	r3, [r0, #0]
 8008f22:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008f26:	f7fb f851 	bl	8003fcc <__aeabi_d2f>
 8008f2a:	ee00 0a10 	vmov	s0, r0
 8008f2e:	b00a      	add	sp, #40	; 0x28
 8008f30:	ecbd 8b02 	vpop	{d8}
 8008f34:	bd10      	pop	{r4, pc}
 8008f36:	bf00      	nop
 8008f38:	20000614 	.word	0x20000614
 8008f3c:	080f19e1 	.word	0x080f19e1
 8008f40:	c7efffff 	.word	0xc7efffff
 8008f44:	fff00000 	.word	0xfff00000
 8008f48:	080f19e5 	.word	0x080f19e5

08008f4c <powf>:
 8008f4c:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 8008f50:	ed2d 8b04 	vpush	{d8-d9}
 8008f54:	4ca7      	ldr	r4, [pc, #668]	; (80091f4 <powf+0x2a8>)
 8008f56:	b08a      	sub	sp, #40	; 0x28
 8008f58:	eef0 8a40 	vmov.f32	s17, s0
 8008f5c:	eeb0 8a60 	vmov.f32	s16, s1
 8008f60:	f000 fb1a 	bl	8009598 <__ieee754_powf>
 8008f64:	f994 5000 	ldrsb.w	r5, [r4]
 8008f68:	1c6b      	adds	r3, r5, #1
 8008f6a:	eeb0 9a40 	vmov.f32	s18, s0
 8008f6e:	4626      	mov	r6, r4
 8008f70:	d05f      	beq.n	8009032 <powf+0xe6>
 8008f72:	eeb4 8a48 	vcmp.f32	s16, s16
 8008f76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f7a:	d65a      	bvs.n	8009032 <powf+0xe6>
 8008f7c:	eef4 8a68 	vcmp.f32	s17, s17
 8008f80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f84:	d721      	bvc.n	8008fca <powf+0x7e>
 8008f86:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8008f8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f8e:	d150      	bne.n	8009032 <powf+0xe6>
 8008f90:	2301      	movs	r3, #1
 8008f92:	9300      	str	r3, [sp, #0]
 8008f94:	4b98      	ldr	r3, [pc, #608]	; (80091f8 <powf+0x2ac>)
 8008f96:	9301      	str	r3, [sp, #4]
 8008f98:	ee18 0a90 	vmov	r0, s17
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	9308      	str	r3, [sp, #32]
 8008fa0:	f7fa ff34 	bl	8003e0c <__aeabi_f2d>
 8008fa4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008fa8:	ee18 0a10 	vmov	r0, s16
 8008fac:	f7fa ff2e 	bl	8003e0c <__aeabi_f2d>
 8008fb0:	4b92      	ldr	r3, [pc, #584]	; (80091fc <powf+0x2b0>)
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	2d02      	cmp	r5, #2
 8008fb6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008fba:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008fbe:	d032      	beq.n	8009026 <powf+0xda>
 8008fc0:	4668      	mov	r0, sp
 8008fc2:	f000 fdac 	bl	8009b1e <matherr>
 8008fc6:	bb40      	cbnz	r0, 800901a <powf+0xce>
 8008fc8:	e065      	b.n	8009096 <powf+0x14a>
 8008fca:	eddf 9a8d 	vldr	s19, [pc, #564]	; 8009200 <powf+0x2b4>
 8008fce:	eef4 8a69 	vcmp.f32	s17, s19
 8008fd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fd6:	d163      	bne.n	80090a0 <powf+0x154>
 8008fd8:	eeb4 8a69 	vcmp.f32	s16, s19
 8008fdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fe0:	d12e      	bne.n	8009040 <powf+0xf4>
 8008fe2:	2301      	movs	r3, #1
 8008fe4:	9300      	str	r3, [sp, #0]
 8008fe6:	4b84      	ldr	r3, [pc, #528]	; (80091f8 <powf+0x2ac>)
 8008fe8:	9301      	str	r3, [sp, #4]
 8008fea:	ee18 0a90 	vmov	r0, s17
 8008fee:	2300      	movs	r3, #0
 8008ff0:	9308      	str	r3, [sp, #32]
 8008ff2:	f7fa ff0b 	bl	8003e0c <__aeabi_f2d>
 8008ff6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008ffa:	ee18 0a10 	vmov	r0, s16
 8008ffe:	f7fa ff05 	bl	8003e0c <__aeabi_f2d>
 8009002:	2200      	movs	r2, #0
 8009004:	2300      	movs	r3, #0
 8009006:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800900a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800900e:	2d00      	cmp	r5, #0
 8009010:	d0d6      	beq.n	8008fc0 <powf+0x74>
 8009012:	4b7a      	ldr	r3, [pc, #488]	; (80091fc <powf+0x2b0>)
 8009014:	2200      	movs	r2, #0
 8009016:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800901a:	9b08      	ldr	r3, [sp, #32]
 800901c:	b11b      	cbz	r3, 8009026 <powf+0xda>
 800901e:	f7ff fe07 	bl	8008c30 <__errno>
 8009022:	9b08      	ldr	r3, [sp, #32]
 8009024:	6003      	str	r3, [r0, #0]
 8009026:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800902a:	f7fa ffcf 	bl	8003fcc <__aeabi_d2f>
 800902e:	ee09 0a10 	vmov	s18, r0
 8009032:	eeb0 0a49 	vmov.f32	s0, s18
 8009036:	b00a      	add	sp, #40	; 0x28
 8009038:	ecbd 8b04 	vpop	{d8-d9}
 800903c:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8009040:	eeb0 0a48 	vmov.f32	s0, s16
 8009044:	f000 feab 	bl	8009d9e <finitef>
 8009048:	2800      	cmp	r0, #0
 800904a:	d0f2      	beq.n	8009032 <powf+0xe6>
 800904c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8009050:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009054:	d5ed      	bpl.n	8009032 <powf+0xe6>
 8009056:	2301      	movs	r3, #1
 8009058:	9300      	str	r3, [sp, #0]
 800905a:	4b67      	ldr	r3, [pc, #412]	; (80091f8 <powf+0x2ac>)
 800905c:	9301      	str	r3, [sp, #4]
 800905e:	ee18 0a90 	vmov	r0, s17
 8009062:	2300      	movs	r3, #0
 8009064:	9308      	str	r3, [sp, #32]
 8009066:	f7fa fed1 	bl	8003e0c <__aeabi_f2d>
 800906a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800906e:	ee18 0a10 	vmov	r0, s16
 8009072:	f7fa fecb 	bl	8003e0c <__aeabi_f2d>
 8009076:	f994 3000 	ldrsb.w	r3, [r4]
 800907a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800907e:	b923      	cbnz	r3, 800908a <powf+0x13e>
 8009080:	2200      	movs	r2, #0
 8009082:	2300      	movs	r3, #0
 8009084:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009088:	e79a      	b.n	8008fc0 <powf+0x74>
 800908a:	495e      	ldr	r1, [pc, #376]	; (8009204 <powf+0x2b8>)
 800908c:	2000      	movs	r0, #0
 800908e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009092:	2b02      	cmp	r3, #2
 8009094:	d194      	bne.n	8008fc0 <powf+0x74>
 8009096:	f7ff fdcb 	bl	8008c30 <__errno>
 800909a:	2321      	movs	r3, #33	; 0x21
 800909c:	6003      	str	r3, [r0, #0]
 800909e:	e7bc      	b.n	800901a <powf+0xce>
 80090a0:	f000 fe7d 	bl	8009d9e <finitef>
 80090a4:	4605      	mov	r5, r0
 80090a6:	2800      	cmp	r0, #0
 80090a8:	d173      	bne.n	8009192 <powf+0x246>
 80090aa:	eeb0 0a68 	vmov.f32	s0, s17
 80090ae:	f000 fe76 	bl	8009d9e <finitef>
 80090b2:	2800      	cmp	r0, #0
 80090b4:	d06d      	beq.n	8009192 <powf+0x246>
 80090b6:	eeb0 0a48 	vmov.f32	s0, s16
 80090ba:	f000 fe70 	bl	8009d9e <finitef>
 80090be:	2800      	cmp	r0, #0
 80090c0:	d067      	beq.n	8009192 <powf+0x246>
 80090c2:	ee18 0a90 	vmov	r0, s17
 80090c6:	f7fa fea1 	bl	8003e0c <__aeabi_f2d>
 80090ca:	4680      	mov	r8, r0
 80090cc:	ee18 0a10 	vmov	r0, s16
 80090d0:	4689      	mov	r9, r1
 80090d2:	f7fa fe9b 	bl	8003e0c <__aeabi_f2d>
 80090d6:	eeb4 9a49 	vcmp.f32	s18, s18
 80090da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090de:	f994 4000 	ldrsb.w	r4, [r4]
 80090e2:	4b45      	ldr	r3, [pc, #276]	; (80091f8 <powf+0x2ac>)
 80090e4:	d713      	bvc.n	800910e <powf+0x1c2>
 80090e6:	2201      	movs	r2, #1
 80090e8:	e9cd 2300 	strd	r2, r3, [sp]
 80090ec:	9508      	str	r5, [sp, #32]
 80090ee:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80090f2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80090f6:	2c00      	cmp	r4, #0
 80090f8:	d0c2      	beq.n	8009080 <powf+0x134>
 80090fa:	eec9 7aa9 	vdiv.f32	s15, s19, s19
 80090fe:	ee17 0a90 	vmov	r0, s15
 8009102:	f7fa fe83 	bl	8003e0c <__aeabi_f2d>
 8009106:	2c02      	cmp	r4, #2
 8009108:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800910c:	e7c2      	b.n	8009094 <powf+0x148>
 800910e:	2203      	movs	r2, #3
 8009110:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8009114:	e9cd 2300 	strd	r2, r3, [sp]
 8009118:	9508      	str	r5, [sp, #32]
 800911a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800911e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009122:	ee28 8a27 	vmul.f32	s16, s16, s15
 8009126:	b9fc      	cbnz	r4, 8009168 <powf+0x21c>
 8009128:	4b37      	ldr	r3, [pc, #220]	; (8009208 <powf+0x2bc>)
 800912a:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 800912e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8009132:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009136:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800913a:	d553      	bpl.n	80091e4 <powf+0x298>
 800913c:	eeb0 0a48 	vmov.f32	s0, s16
 8009140:	f000 fe3e 	bl	8009dc0 <rintf>
 8009144:	eeb4 0a48 	vcmp.f32	s0, s16
 8009148:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800914c:	d004      	beq.n	8009158 <powf+0x20c>
 800914e:	4b2f      	ldr	r3, [pc, #188]	; (800920c <powf+0x2c0>)
 8009150:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8009154:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009158:	f996 3000 	ldrsb.w	r3, [r6]
 800915c:	2b02      	cmp	r3, #2
 800915e:	d141      	bne.n	80091e4 <powf+0x298>
 8009160:	f7ff fd66 	bl	8008c30 <__errno>
 8009164:	2322      	movs	r3, #34	; 0x22
 8009166:	e799      	b.n	800909c <powf+0x150>
 8009168:	4b29      	ldr	r3, [pc, #164]	; (8009210 <powf+0x2c4>)
 800916a:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 800916e:	2200      	movs	r2, #0
 8009170:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009174:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009178:	d5ee      	bpl.n	8009158 <powf+0x20c>
 800917a:	eeb0 0a48 	vmov.f32	s0, s16
 800917e:	f000 fe1f 	bl	8009dc0 <rintf>
 8009182:	eeb4 0a48 	vcmp.f32	s0, s16
 8009186:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800918a:	d0e5      	beq.n	8009158 <powf+0x20c>
 800918c:	2200      	movs	r2, #0
 800918e:	4b1d      	ldr	r3, [pc, #116]	; (8009204 <powf+0x2b8>)
 8009190:	e7e0      	b.n	8009154 <powf+0x208>
 8009192:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8009196:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800919a:	f47f af4a 	bne.w	8009032 <powf+0xe6>
 800919e:	eeb0 0a68 	vmov.f32	s0, s17
 80091a2:	f000 fdfc 	bl	8009d9e <finitef>
 80091a6:	2800      	cmp	r0, #0
 80091a8:	f43f af43 	beq.w	8009032 <powf+0xe6>
 80091ac:	eeb0 0a48 	vmov.f32	s0, s16
 80091b0:	f000 fdf5 	bl	8009d9e <finitef>
 80091b4:	2800      	cmp	r0, #0
 80091b6:	f43f af3c 	beq.w	8009032 <powf+0xe6>
 80091ba:	2304      	movs	r3, #4
 80091bc:	9300      	str	r3, [sp, #0]
 80091be:	4b0e      	ldr	r3, [pc, #56]	; (80091f8 <powf+0x2ac>)
 80091c0:	9301      	str	r3, [sp, #4]
 80091c2:	ee18 0a90 	vmov	r0, s17
 80091c6:	2300      	movs	r3, #0
 80091c8:	9308      	str	r3, [sp, #32]
 80091ca:	f7fa fe1f 	bl	8003e0c <__aeabi_f2d>
 80091ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80091d2:	ee18 0a10 	vmov	r0, s16
 80091d6:	f7fa fe19 	bl	8003e0c <__aeabi_f2d>
 80091da:	2200      	movs	r2, #0
 80091dc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80091e0:	2300      	movs	r3, #0
 80091e2:	e7b7      	b.n	8009154 <powf+0x208>
 80091e4:	4668      	mov	r0, sp
 80091e6:	f000 fc9a 	bl	8009b1e <matherr>
 80091ea:	2800      	cmp	r0, #0
 80091ec:	f47f af15 	bne.w	800901a <powf+0xce>
 80091f0:	e7b6      	b.n	8009160 <powf+0x214>
 80091f2:	bf00      	nop
 80091f4:	20000614 	.word	0x20000614
 80091f8:	080f19e6 	.word	0x080f19e6
 80091fc:	3ff00000 	.word	0x3ff00000
 8009200:	00000000 	.word	0x00000000
 8009204:	fff00000 	.word	0xfff00000
 8009208:	47efffff 	.word	0x47efffff
 800920c:	c7efffff 	.word	0xc7efffff
 8009210:	7ff00000 	.word	0x7ff00000

08009214 <__ieee754_expf>:
 8009214:	ee10 2a10 	vmov	r2, s0
 8009218:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800921c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8009220:	d902      	bls.n	8009228 <__ieee754_expf+0x14>
 8009222:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009226:	4770      	bx	lr
 8009228:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 800922c:	d106      	bne.n	800923c <__ieee754_expf+0x28>
 800922e:	eddf 7a51 	vldr	s15, [pc, #324]	; 8009374 <__ieee754_expf+0x160>
 8009232:	2b00      	cmp	r3, #0
 8009234:	bf18      	it	ne
 8009236:	eeb0 0a67 	vmovne.f32	s0, s15
 800923a:	4770      	bx	lr
 800923c:	484e      	ldr	r0, [pc, #312]	; (8009378 <__ieee754_expf+0x164>)
 800923e:	4282      	cmp	r2, r0
 8009240:	dd04      	ble.n	800924c <__ieee754_expf+0x38>
 8009242:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 800937c <__ieee754_expf+0x168>
 8009246:	ee20 0a00 	vmul.f32	s0, s0, s0
 800924a:	4770      	bx	lr
 800924c:	2a00      	cmp	r2, #0
 800924e:	da03      	bge.n	8009258 <__ieee754_expf+0x44>
 8009250:	4a4b      	ldr	r2, [pc, #300]	; (8009380 <__ieee754_expf+0x16c>)
 8009252:	4291      	cmp	r1, r2
 8009254:	f200 808a 	bhi.w	800936c <__ieee754_expf+0x158>
 8009258:	4a4a      	ldr	r2, [pc, #296]	; (8009384 <__ieee754_expf+0x170>)
 800925a:	4291      	cmp	r1, r2
 800925c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8009260:	d954      	bls.n	800930c <__ieee754_expf+0xf8>
 8009262:	4a49      	ldr	r2, [pc, #292]	; (8009388 <__ieee754_expf+0x174>)
 8009264:	4291      	cmp	r1, r2
 8009266:	ea4f 0283 	mov.w	r2, r3, lsl #2
 800926a:	d836      	bhi.n	80092da <__ieee754_expf+0xc6>
 800926c:	4947      	ldr	r1, [pc, #284]	; (800938c <__ieee754_expf+0x178>)
 800926e:	4411      	add	r1, r2
 8009270:	ed91 7a00 	vldr	s14, [r1]
 8009274:	4946      	ldr	r1, [pc, #280]	; (8009390 <__ieee754_expf+0x17c>)
 8009276:	440a      	add	r2, r1
 8009278:	edd2 7a00 	vldr	s15, [r2]
 800927c:	ee30 7a47 	vsub.f32	s14, s0, s14
 8009280:	f1c3 0201 	rsb	r2, r3, #1
 8009284:	1ad2      	subs	r2, r2, r3
 8009286:	ee37 0a67 	vsub.f32	s0, s14, s15
 800928a:	ee60 6a00 	vmul.f32	s13, s0, s0
 800928e:	eddf 5a41 	vldr	s11, [pc, #260]	; 8009394 <__ieee754_expf+0x180>
 8009292:	ed9f 5a41 	vldr	s10, [pc, #260]	; 8009398 <__ieee754_expf+0x184>
 8009296:	eea6 5aa5 	vfma.f32	s10, s13, s11
 800929a:	eddf 5a40 	vldr	s11, [pc, #256]	; 800939c <__ieee754_expf+0x188>
 800929e:	eee5 5a26 	vfma.f32	s11, s10, s13
 80092a2:	ed9f 5a3f 	vldr	s10, [pc, #252]	; 80093a0 <__ieee754_expf+0x18c>
 80092a6:	eea5 5aa6 	vfma.f32	s10, s11, s13
 80092aa:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80093a4 <__ieee754_expf+0x190>
 80092ae:	eee5 5a26 	vfma.f32	s11, s10, s13
 80092b2:	eeb0 5a40 	vmov.f32	s10, s0
 80092b6:	eea5 5ae6 	vfms.f32	s10, s11, s13
 80092ba:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 80092be:	eef0 6a45 	vmov.f32	s13, s10
 80092c2:	ee20 5a05 	vmul.f32	s10, s0, s10
 80092c6:	bb92      	cbnz	r2, 800932e <__ieee754_expf+0x11a>
 80092c8:	ee76 6ae5 	vsub.f32	s13, s13, s11
 80092cc:	eec5 7a26 	vdiv.f32	s15, s10, s13
 80092d0:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80092d4:	ee36 0a40 	vsub.f32	s0, s12, s0
 80092d8:	4770      	bx	lr
 80092da:	4b33      	ldr	r3, [pc, #204]	; (80093a8 <__ieee754_expf+0x194>)
 80092dc:	ed9f 7a33 	vldr	s14, [pc, #204]	; 80093ac <__ieee754_expf+0x198>
 80092e0:	4413      	add	r3, r2
 80092e2:	edd3 7a00 	vldr	s15, [r3]
 80092e6:	eee0 7a07 	vfma.f32	s15, s0, s14
 80092ea:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80093b0 <__ieee754_expf+0x19c>
 80092ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80092f2:	ee17 2a90 	vmov	r2, s15
 80092f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80092fa:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80092fe:	eeb0 7a40 	vmov.f32	s14, s0
 8009302:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 80093b4 <__ieee754_expf+0x1a0>
 8009306:	ee67 7a80 	vmul.f32	s15, s15, s0
 800930a:	e7bc      	b.n	8009286 <__ieee754_expf+0x72>
 800930c:	f1b1 5f46 	cmp.w	r1, #830472192	; 0x31800000
 8009310:	d20b      	bcs.n	800932a <__ieee754_expf+0x116>
 8009312:	eddf 6a1a 	vldr	s13, [pc, #104]	; 800937c <__ieee754_expf+0x168>
 8009316:	ee70 6a26 	vadd.f32	s13, s0, s13
 800931a:	eef4 6ac6 	vcmpe.f32	s13, s12
 800931e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009322:	dd02      	ble.n	800932a <__ieee754_expf+0x116>
 8009324:	ee30 0a06 	vadd.f32	s0, s0, s12
 8009328:	4770      	bx	lr
 800932a:	2200      	movs	r2, #0
 800932c:	e7ad      	b.n	800928a <__ieee754_expf+0x76>
 800932e:	ee75 6ae6 	vsub.f32	s13, s11, s13
 8009332:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 8009336:	ee85 0a26 	vdiv.f32	s0, s10, s13
 800933a:	bfb8      	it	lt
 800933c:	3264      	addlt	r2, #100	; 0x64
 800933e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8009342:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8009346:	ee76 7a40 	vsub.f32	s15, s12, s0
 800934a:	ee17 3a90 	vmov	r3, s15
 800934e:	bfab      	itete	ge
 8009350:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 8009354:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8009358:	ee00 3a10 	vmovge	s0, r3
 800935c:	eddf 7a16 	vldrlt	s15, [pc, #88]	; 80093b8 <__ieee754_expf+0x1a4>
 8009360:	bfbc      	itt	lt
 8009362:	ee00 3a10 	vmovlt	s0, r3
 8009366:	ee20 0a27 	vmullt.f32	s0, s0, s15
 800936a:	4770      	bx	lr
 800936c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009374 <__ieee754_expf+0x160>
 8009370:	4770      	bx	lr
 8009372:	bf00      	nop
 8009374:	00000000 	.word	0x00000000
 8009378:	42b17217 	.word	0x42b17217
 800937c:	7149f2ca 	.word	0x7149f2ca
 8009380:	42cff1b5 	.word	0x42cff1b5
 8009384:	3eb17218 	.word	0x3eb17218
 8009388:	3f851591 	.word	0x3f851591
 800938c:	080f19f4 	.word	0x080f19f4
 8009390:	080f19fc 	.word	0x080f19fc
 8009394:	3331bb4c 	.word	0x3331bb4c
 8009398:	b5ddea0e 	.word	0xb5ddea0e
 800939c:	388ab355 	.word	0x388ab355
 80093a0:	bb360b61 	.word	0xbb360b61
 80093a4:	3e2aaaab 	.word	0x3e2aaaab
 80093a8:	080f19ec 	.word	0x080f19ec
 80093ac:	3fb8aa3b 	.word	0x3fb8aa3b
 80093b0:	3f317180 	.word	0x3f317180
 80093b4:	3717f7d1 	.word	0x3717f7d1
 80093b8:	0d800000 	.word	0x0d800000

080093bc <__ieee754_logf>:
 80093bc:	ee10 3a10 	vmov	r3, s0
 80093c0:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 80093c4:	d106      	bne.n	80093d4 <__ieee754_logf+0x18>
 80093c6:	ed9f 7a65 	vldr	s14, [pc, #404]	; 800955c <__ieee754_logf+0x1a0>
 80093ca:	eddf 7a65 	vldr	s15, [pc, #404]	; 8009560 <__ieee754_logf+0x1a4>
 80093ce:	ee87 0a27 	vdiv.f32	s0, s14, s15
 80093d2:	4770      	bx	lr
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	da02      	bge.n	80093de <__ieee754_logf+0x22>
 80093d8:	ee30 7a40 	vsub.f32	s14, s0, s0
 80093dc:	e7f5      	b.n	80093ca <__ieee754_logf+0xe>
 80093de:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80093e2:	db02      	blt.n	80093ea <__ieee754_logf+0x2e>
 80093e4:	ee30 0a00 	vadd.f32	s0, s0, s0
 80093e8:	4770      	bx	lr
 80093ea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80093ee:	bfbf      	itttt	lt
 80093f0:	eddf 7a5c 	vldrlt	s15, [pc, #368]	; 8009564 <__ieee754_logf+0x1a8>
 80093f4:	ee60 7a27 	vmullt.f32	s15, s0, s15
 80093f8:	f06f 0118 	mvnlt.w	r1, #24
 80093fc:	ee17 3a90 	vmovlt	r3, s15
 8009400:	ea4f 52e3 	mov.w	r2, r3, asr #23
 8009404:	bfa8      	it	ge
 8009406:	2100      	movge	r1, #0
 8009408:	3a7f      	subs	r2, #127	; 0x7f
 800940a:	440a      	add	r2, r1
 800940c:	4956      	ldr	r1, [pc, #344]	; (8009568 <__ieee754_logf+0x1ac>)
 800940e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8009412:	4419      	add	r1, r3
 8009414:	f401 0100 	and.w	r1, r1, #8388608	; 0x800000
 8009418:	eb02 52d1 	add.w	r2, r2, r1, lsr #23
 800941c:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 8009420:	4319      	orrs	r1, r3
 8009422:	ee07 1a90 	vmov	s15, r1
 8009426:	f103 010f 	add.w	r1, r3, #15
 800942a:	f3c1 0116 	ubfx	r1, r1, #0, #23
 800942e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8009432:	290f      	cmp	r1, #15
 8009434:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8009438:	dc31      	bgt.n	800949e <__ieee754_logf+0xe2>
 800943a:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800943e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009442:	d10f      	bne.n	8009464 <__ieee754_logf+0xa8>
 8009444:	2a00      	cmp	r2, #0
 8009446:	f000 8085 	beq.w	8009554 <__ieee754_logf+0x198>
 800944a:	ee07 2a90 	vmov	s15, r2
 800944e:	ed9f 0a47 	vldr	s0, [pc, #284]	; 800956c <__ieee754_logf+0x1b0>
 8009452:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8009570 <__ieee754_logf+0x1b4>
 8009456:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800945a:	ee27 0a80 	vmul.f32	s0, s15, s0
 800945e:	eea7 0a87 	vfma.f32	s0, s15, s14
 8009462:	4770      	bx	lr
 8009464:	eddf 7a43 	vldr	s15, [pc, #268]	; 8009574 <__ieee754_logf+0x1b8>
 8009468:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800946c:	eea0 7a67 	vfms.f32	s14, s0, s15
 8009470:	ee60 7a00 	vmul.f32	s15, s0, s0
 8009474:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009478:	b912      	cbnz	r2, 8009480 <__ieee754_logf+0xc4>
 800947a:	ee30 0a47 	vsub.f32	s0, s0, s14
 800947e:	4770      	bx	lr
 8009480:	ee07 2a90 	vmov	s15, r2
 8009484:	eddf 6a39 	vldr	s13, [pc, #228]	; 800956c <__ieee754_logf+0x1b0>
 8009488:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800948c:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8009490:	ee37 0a40 	vsub.f32	s0, s14, s0
 8009494:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8009570 <__ieee754_logf+0x1b4>
 8009498:	ee97 0a87 	vfnms.f32	s0, s15, s14
 800949c:	4770      	bx	lr
 800949e:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 80094a2:	ee70 7a27 	vadd.f32	s15, s0, s15
 80094a6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009578 <__ieee754_logf+0x1bc>
 80094aa:	eddf 4a34 	vldr	s9, [pc, #208]	; 800957c <__ieee754_logf+0x1c0>
 80094ae:	4934      	ldr	r1, [pc, #208]	; (8009580 <__ieee754_logf+0x1c4>)
 80094b0:	ee80 6a27 	vdiv.f32	s12, s0, s15
 80094b4:	4419      	add	r1, r3
 80094b6:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 80094ba:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80094be:	430b      	orrs	r3, r1
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	ee07 2a90 	vmov	s15, r2
 80094c6:	ee26 5a06 	vmul.f32	s10, s12, s12
 80094ca:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80094ce:	ee25 7a05 	vmul.f32	s14, s10, s10
 80094d2:	eddf 7a2c 	vldr	s15, [pc, #176]	; 8009584 <__ieee754_logf+0x1c8>
 80094d6:	eee7 7a25 	vfma.f32	s15, s14, s11
 80094da:	eddf 5a2b 	vldr	s11, [pc, #172]	; 8009588 <__ieee754_logf+0x1cc>
 80094de:	eee7 5a87 	vfma.f32	s11, s15, s14
 80094e2:	eddf 7a2a 	vldr	s15, [pc, #168]	; 800958c <__ieee754_logf+0x1d0>
 80094e6:	eee7 7a24 	vfma.f32	s15, s14, s9
 80094ea:	eddf 4a29 	vldr	s9, [pc, #164]	; 8009590 <__ieee754_logf+0x1d4>
 80094ee:	eee7 4a87 	vfma.f32	s9, s15, s14
 80094f2:	eddf 7a28 	vldr	s15, [pc, #160]	; 8009594 <__ieee754_logf+0x1d8>
 80094f6:	eee4 7a87 	vfma.f32	s15, s9, s14
 80094fa:	ee67 7a85 	vmul.f32	s15, s15, s10
 80094fe:	eee5 7a87 	vfma.f32	s15, s11, s14
 8009502:	dd1c      	ble.n	800953e <__ieee754_logf+0x182>
 8009504:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8009508:	ee20 7a07 	vmul.f32	s14, s0, s14
 800950c:	ee27 7a00 	vmul.f32	s14, s14, s0
 8009510:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009514:	ee67 7a86 	vmul.f32	s15, s15, s12
 8009518:	b922      	cbnz	r2, 8009524 <__ieee754_logf+0x168>
 800951a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800951e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8009522:	4770      	bx	lr
 8009524:	ed9f 6a11 	vldr	s12, [pc, #68]	; 800956c <__ieee754_logf+0x1b0>
 8009528:	eee6 7a86 	vfma.f32	s15, s13, s12
 800952c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009530:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8009534:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8009570 <__ieee754_logf+0x1b4>
 8009538:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 800953c:	4770      	bx	lr
 800953e:	ee70 7a67 	vsub.f32	s15, s0, s15
 8009542:	ee67 7a86 	vmul.f32	s15, s15, s12
 8009546:	2a00      	cmp	r2, #0
 8009548:	d0e9      	beq.n	800951e <__ieee754_logf+0x162>
 800954a:	ed9f 7a08 	vldr	s14, [pc, #32]	; 800956c <__ieee754_logf+0x1b0>
 800954e:	eee6 7ac7 	vfms.f32	s15, s13, s14
 8009552:	e7ed      	b.n	8009530 <__ieee754_logf+0x174>
 8009554:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8009560 <__ieee754_logf+0x1a4>
 8009558:	4770      	bx	lr
 800955a:	bf00      	nop
 800955c:	cc000000 	.word	0xcc000000
 8009560:	00000000 	.word	0x00000000
 8009564:	4c000000 	.word	0x4c000000
 8009568:	004afb20 	.word	0x004afb20
 800956c:	3717f7d1 	.word	0x3717f7d1
 8009570:	3f317180 	.word	0x3f317180
 8009574:	3eaaaaab 	.word	0x3eaaaaab
 8009578:	3e1cd04f 	.word	0x3e1cd04f
 800957c:	3e178897 	.word	0x3e178897
 8009580:	ffcf5c30 	.word	0xffcf5c30
 8009584:	3e638e29 	.word	0x3e638e29
 8009588:	3ecccccd 	.word	0x3ecccccd
 800958c:	3e3a3325 	.word	0x3e3a3325
 8009590:	3e924925 	.word	0x3e924925
 8009594:	3f2aaaab 	.word	0x3f2aaaab

08009598 <__ieee754_powf>:
 8009598:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800959c:	ee10 5a90 	vmov	r5, s1
 80095a0:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 80095a4:	ed2d 8b02 	vpush	{d8}
 80095a8:	eeb0 8a40 	vmov.f32	s16, s0
 80095ac:	eef0 8a60 	vmov.f32	s17, s1
 80095b0:	f000 8293 	beq.w	8009ada <__ieee754_powf+0x542>
 80095b4:	ee10 8a10 	vmov	r8, s0
 80095b8:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 80095bc:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80095c0:	dc06      	bgt.n	80095d0 <__ieee754_powf+0x38>
 80095c2:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 80095c6:	dd0a      	ble.n	80095de <__ieee754_powf+0x46>
 80095c8:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 80095cc:	f000 8285 	beq.w	8009ada <__ieee754_powf+0x542>
 80095d0:	ecbd 8b02 	vpop	{d8}
 80095d4:	48d9      	ldr	r0, [pc, #868]	; (800993c <__ieee754_powf+0x3a4>)
 80095d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80095da:	f000 bbeb 	b.w	8009db4 <nanf>
 80095de:	f1b8 0f00 	cmp.w	r8, #0
 80095e2:	da1d      	bge.n	8009620 <__ieee754_powf+0x88>
 80095e4:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 80095e8:	da2c      	bge.n	8009644 <__ieee754_powf+0xac>
 80095ea:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 80095ee:	db30      	blt.n	8009652 <__ieee754_powf+0xba>
 80095f0:	15fb      	asrs	r3, r7, #23
 80095f2:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 80095f6:	fa47 f603 	asr.w	r6, r7, r3
 80095fa:	fa06 f303 	lsl.w	r3, r6, r3
 80095fe:	42bb      	cmp	r3, r7
 8009600:	d127      	bne.n	8009652 <__ieee754_powf+0xba>
 8009602:	f006 0601 	and.w	r6, r6, #1
 8009606:	f1c6 0602 	rsb	r6, r6, #2
 800960a:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800960e:	d122      	bne.n	8009656 <__ieee754_powf+0xbe>
 8009610:	2d00      	cmp	r5, #0
 8009612:	f280 8268 	bge.w	8009ae6 <__ieee754_powf+0x54e>
 8009616:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800961a:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800961e:	e00d      	b.n	800963c <__ieee754_powf+0xa4>
 8009620:	2600      	movs	r6, #0
 8009622:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8009626:	d1f0      	bne.n	800960a <__ieee754_powf+0x72>
 8009628:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800962c:	f000 8255 	beq.w	8009ada <__ieee754_powf+0x542>
 8009630:	dd0a      	ble.n	8009648 <__ieee754_powf+0xb0>
 8009632:	2d00      	cmp	r5, #0
 8009634:	f280 8254 	bge.w	8009ae0 <__ieee754_powf+0x548>
 8009638:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 8009940 <__ieee754_powf+0x3a8>
 800963c:	ecbd 8b02 	vpop	{d8}
 8009640:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009644:	2602      	movs	r6, #2
 8009646:	e7ec      	b.n	8009622 <__ieee754_powf+0x8a>
 8009648:	2d00      	cmp	r5, #0
 800964a:	daf5      	bge.n	8009638 <__ieee754_powf+0xa0>
 800964c:	eeb1 0a68 	vneg.f32	s0, s17
 8009650:	e7f4      	b.n	800963c <__ieee754_powf+0xa4>
 8009652:	2600      	movs	r6, #0
 8009654:	e7d9      	b.n	800960a <__ieee754_powf+0x72>
 8009656:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 800965a:	d102      	bne.n	8009662 <__ieee754_powf+0xca>
 800965c:	ee28 0a08 	vmul.f32	s0, s16, s16
 8009660:	e7ec      	b.n	800963c <__ieee754_powf+0xa4>
 8009662:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 8009666:	eeb0 0a48 	vmov.f32	s0, s16
 800966a:	d108      	bne.n	800967e <__ieee754_powf+0xe6>
 800966c:	f1b8 0f00 	cmp.w	r8, #0
 8009670:	db05      	blt.n	800967e <__ieee754_powf+0xe6>
 8009672:	ecbd 8b02 	vpop	{d8}
 8009676:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800967a:	f000 ba4d 	b.w	8009b18 <__ieee754_sqrtf>
 800967e:	f000 fb87 	bl	8009d90 <fabsf>
 8009682:	b124      	cbz	r4, 800968e <__ieee754_powf+0xf6>
 8009684:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 8009688:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800968c:	d117      	bne.n	80096be <__ieee754_powf+0x126>
 800968e:	2d00      	cmp	r5, #0
 8009690:	bfbc      	itt	lt
 8009692:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 8009696:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800969a:	f1b8 0f00 	cmp.w	r8, #0
 800969e:	dacd      	bge.n	800963c <__ieee754_powf+0xa4>
 80096a0:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 80096a4:	ea54 0306 	orrs.w	r3, r4, r6
 80096a8:	d104      	bne.n	80096b4 <__ieee754_powf+0x11c>
 80096aa:	ee70 7a40 	vsub.f32	s15, s0, s0
 80096ae:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80096b2:	e7c3      	b.n	800963c <__ieee754_powf+0xa4>
 80096b4:	2e01      	cmp	r6, #1
 80096b6:	d1c1      	bne.n	800963c <__ieee754_powf+0xa4>
 80096b8:	eeb1 0a40 	vneg.f32	s0, s0
 80096bc:	e7be      	b.n	800963c <__ieee754_powf+0xa4>
 80096be:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 80096c2:	3801      	subs	r0, #1
 80096c4:	ea56 0300 	orrs.w	r3, r6, r0
 80096c8:	d104      	bne.n	80096d4 <__ieee754_powf+0x13c>
 80096ca:	ee38 8a48 	vsub.f32	s16, s16, s16
 80096ce:	ee88 0a08 	vdiv.f32	s0, s16, s16
 80096d2:	e7b3      	b.n	800963c <__ieee754_powf+0xa4>
 80096d4:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 80096d8:	dd6d      	ble.n	80097b6 <__ieee754_powf+0x21e>
 80096da:	4b9a      	ldr	r3, [pc, #616]	; (8009944 <__ieee754_powf+0x3ac>)
 80096dc:	429c      	cmp	r4, r3
 80096de:	dc06      	bgt.n	80096ee <__ieee754_powf+0x156>
 80096e0:	2d00      	cmp	r5, #0
 80096e2:	daa9      	bge.n	8009638 <__ieee754_powf+0xa0>
 80096e4:	ed9f 0a98 	vldr	s0, [pc, #608]	; 8009948 <__ieee754_powf+0x3b0>
 80096e8:	ee20 0a00 	vmul.f32	s0, s0, s0
 80096ec:	e7a6      	b.n	800963c <__ieee754_powf+0xa4>
 80096ee:	4b97      	ldr	r3, [pc, #604]	; (800994c <__ieee754_powf+0x3b4>)
 80096f0:	429c      	cmp	r4, r3
 80096f2:	dd02      	ble.n	80096fa <__ieee754_powf+0x162>
 80096f4:	2d00      	cmp	r5, #0
 80096f6:	dcf5      	bgt.n	80096e4 <__ieee754_powf+0x14c>
 80096f8:	e79e      	b.n	8009638 <__ieee754_powf+0xa0>
 80096fa:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80096fe:	ee30 0a67 	vsub.f32	s0, s0, s15
 8009702:	ed9f 7a93 	vldr	s14, [pc, #588]	; 8009950 <__ieee754_powf+0x3b8>
 8009706:	eef1 6a40 	vneg.f32	s13, s0
 800970a:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800970e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009712:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8009716:	eee7 7a40 	vfms.f32	s15, s14, s0
 800971a:	ee60 0a00 	vmul.f32	s1, s0, s0
 800971e:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 8009954 <__ieee754_powf+0x3bc>
 8009722:	ee67 0aa0 	vmul.f32	s1, s15, s1
 8009726:	eddf 7a8c 	vldr	s15, [pc, #560]	; 8009958 <__ieee754_powf+0x3c0>
 800972a:	ee67 7ae0 	vnmul.f32	s15, s15, s1
 800972e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8009732:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 800995c <__ieee754_powf+0x3c4>
 8009736:	eeb0 6a67 	vmov.f32	s12, s15
 800973a:	eea0 6a07 	vfma.f32	s12, s0, s14
 800973e:	ee16 3a10 	vmov	r3, s12
 8009742:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8009746:	f023 030f 	bic.w	r3, r3, #15
 800974a:	ee00 3a90 	vmov	s1, r3
 800974e:	eee6 0a87 	vfma.f32	s1, s13, s14
 8009752:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8009756:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 800975a:	f025 050f 	bic.w	r5, r5, #15
 800975e:	ee07 5a10 	vmov	s14, r5
 8009762:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8009766:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800976a:	ee07 3a90 	vmov	s15, r3
 800976e:	eee7 0a27 	vfma.f32	s1, s14, s15
 8009772:	3e01      	subs	r6, #1
 8009774:	ea56 0200 	orrs.w	r2, r6, r0
 8009778:	ee07 5a10 	vmov	s14, r5
 800977c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009780:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8009784:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8009788:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800978c:	ee17 4a10 	vmov	r4, s14
 8009790:	bf08      	it	eq
 8009792:	eeb0 8a40 	vmoveq.f32	s16, s0
 8009796:	2c00      	cmp	r4, #0
 8009798:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800979c:	f340 8184 	ble.w	8009aa8 <__ieee754_powf+0x510>
 80097a0:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 80097a4:	f340 80fc 	ble.w	80099a0 <__ieee754_powf+0x408>
 80097a8:	eddf 7a67 	vldr	s15, [pc, #412]	; 8009948 <__ieee754_powf+0x3b0>
 80097ac:	ee28 0a27 	vmul.f32	s0, s16, s15
 80097b0:	ee20 0a27 	vmul.f32	s0, s0, s15
 80097b4:	e742      	b.n	800963c <__ieee754_powf+0xa4>
 80097b6:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
 80097ba:	bfbf      	itttt	lt
 80097bc:	eddf 7a68 	vldrlt	s15, [pc, #416]	; 8009960 <__ieee754_powf+0x3c8>
 80097c0:	ee60 7a27 	vmullt.f32	s15, s0, s15
 80097c4:	f06f 0217 	mvnlt.w	r2, #23
 80097c8:	ee17 4a90 	vmovlt	r4, s15
 80097cc:	ea4f 53e4 	mov.w	r3, r4, asr #23
 80097d0:	bfa8      	it	ge
 80097d2:	2200      	movge	r2, #0
 80097d4:	3b7f      	subs	r3, #127	; 0x7f
 80097d6:	4413      	add	r3, r2
 80097d8:	4a62      	ldr	r2, [pc, #392]	; (8009964 <__ieee754_powf+0x3cc>)
 80097da:	f3c4 0416 	ubfx	r4, r4, #0, #23
 80097de:	4294      	cmp	r4, r2
 80097e0:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 80097e4:	dd06      	ble.n	80097f4 <__ieee754_powf+0x25c>
 80097e6:	4a60      	ldr	r2, [pc, #384]	; (8009968 <__ieee754_powf+0x3d0>)
 80097e8:	4294      	cmp	r4, r2
 80097ea:	f340 80a5 	ble.w	8009938 <__ieee754_powf+0x3a0>
 80097ee:	3301      	adds	r3, #1
 80097f0:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 80097f4:	2400      	movs	r4, #0
 80097f6:	4a5d      	ldr	r2, [pc, #372]	; (800996c <__ieee754_powf+0x3d4>)
 80097f8:	00a7      	lsls	r7, r4, #2
 80097fa:	443a      	add	r2, r7
 80097fc:	ee07 1a90 	vmov	s15, r1
 8009800:	ed92 7a00 	vldr	s14, [r2]
 8009804:	4a5a      	ldr	r2, [pc, #360]	; (8009970 <__ieee754_powf+0x3d8>)
 8009806:	ee37 6a27 	vadd.f32	s12, s14, s15
 800980a:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 800980e:	eec5 6a06 	vdiv.f32	s13, s10, s12
 8009812:	1049      	asrs	r1, r1, #1
 8009814:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8009818:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 800981c:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 8009820:	ee77 5ac7 	vsub.f32	s11, s15, s14
 8009824:	ee06 1a10 	vmov	s12, r1
 8009828:	ee65 4aa6 	vmul.f32	s9, s11, s13
 800982c:	ee14 ca90 	vmov	ip, s9
 8009830:	ea02 0c0c 	and.w	ip, r2, ip
 8009834:	ee05 ca10 	vmov	s10, ip
 8009838:	eeb1 4a45 	vneg.f32	s8, s10
 800983c:	eee4 5a06 	vfma.f32	s11, s8, s12
 8009840:	ee36 6a47 	vsub.f32	s12, s12, s14
 8009844:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8009974 <__ieee754_powf+0x3dc>
 8009848:	ee37 6ac6 	vsub.f32	s12, s15, s12
 800984c:	ee64 7aa4 	vmul.f32	s15, s9, s9
 8009850:	eee4 5a06 	vfma.f32	s11, s8, s12
 8009854:	ee67 3aa7 	vmul.f32	s7, s15, s15
 8009858:	ee25 6aa6 	vmul.f32	s12, s11, s13
 800985c:	eddf 5a46 	vldr	s11, [pc, #280]	; 8009978 <__ieee754_powf+0x3e0>
 8009860:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8009864:	eddf 5a45 	vldr	s11, [pc, #276]	; 800997c <__ieee754_powf+0x3e4>
 8009868:	eee7 5a27 	vfma.f32	s11, s14, s15
 800986c:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8009950 <__ieee754_powf+0x3b8>
 8009870:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8009874:	eddf 5a42 	vldr	s11, [pc, #264]	; 8009980 <__ieee754_powf+0x3e8>
 8009878:	eee7 5a27 	vfma.f32	s11, s14, s15
 800987c:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8009984 <__ieee754_powf+0x3ec>
 8009880:	ee75 6a24 	vadd.f32	s13, s10, s9
 8009884:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8009888:	ee66 6a86 	vmul.f32	s13, s13, s12
 800988c:	eef0 5a08 	vmov.f32	s11, #8	; 0x40400000  3.0
 8009890:	eef0 7a65 	vmov.f32	s15, s11
 8009894:	eee3 6a87 	vfma.f32	s13, s7, s14
 8009898:	eee5 7a05 	vfma.f32	s15, s10, s10
 800989c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80098a0:	ee17 1a90 	vmov	r1, s15
 80098a4:	4011      	ands	r1, r2
 80098a6:	ee07 1a90 	vmov	s15, r1
 80098aa:	ee37 7ae5 	vsub.f32	s14, s15, s11
 80098ae:	eddf 5a36 	vldr	s11, [pc, #216]	; 8009988 <__ieee754_powf+0x3f0>
 80098b2:	eea4 7a05 	vfma.f32	s14, s8, s10
 80098b6:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80098ba:	ee27 7a24 	vmul.f32	s14, s14, s9
 80098be:	eea7 7a86 	vfma.f32	s14, s15, s12
 80098c2:	eeb0 6a47 	vmov.f32	s12, s14
 80098c6:	eea5 6a27 	vfma.f32	s12, s10, s15
 80098ca:	ee16 1a10 	vmov	r1, s12
 80098ce:	4011      	ands	r1, r2
 80098d0:	ee06 1a90 	vmov	s13, r1
 80098d4:	eee4 6a27 	vfma.f32	s13, s8, s15
 80098d8:	eddf 7a2c 	vldr	s15, [pc, #176]	; 800998c <__ieee754_powf+0x3f4>
 80098dc:	ee37 7a66 	vsub.f32	s14, s14, s13
 80098e0:	ee06 1a10 	vmov	s12, r1
 80098e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80098e8:	eddf 7a29 	vldr	s15, [pc, #164]	; 8009990 <__ieee754_powf+0x3f8>
 80098ec:	4929      	ldr	r1, [pc, #164]	; (8009994 <__ieee754_powf+0x3fc>)
 80098ee:	eea6 7a27 	vfma.f32	s14, s12, s15
 80098f2:	4439      	add	r1, r7
 80098f4:	edd1 7a00 	vldr	s15, [r1]
 80098f8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80098fc:	ee07 3a90 	vmov	s15, r3
 8009900:	eef0 0a47 	vmov.f32	s1, s14
 8009904:	4b24      	ldr	r3, [pc, #144]	; (8009998 <__ieee754_powf+0x400>)
 8009906:	eee6 0a25 	vfma.f32	s1, s12, s11
 800990a:	443b      	add	r3, r7
 800990c:	ed93 5a00 	vldr	s10, [r3]
 8009910:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8009914:	ee70 0a85 	vadd.f32	s1, s1, s10
 8009918:	ee70 7aa6 	vadd.f32	s15, s1, s13
 800991c:	ee17 3a90 	vmov	r3, s15
 8009920:	4013      	ands	r3, r2
 8009922:	ee07 3a90 	vmov	s15, r3
 8009926:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800992a:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800992e:	eee6 7a65 	vfms.f32	s15, s12, s11
 8009932:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009936:	e70e      	b.n	8009756 <__ieee754_powf+0x1be>
 8009938:	2401      	movs	r4, #1
 800993a:	e75c      	b.n	80097f6 <__ieee754_powf+0x25e>
 800993c:	080f19e5 	.word	0x080f19e5
 8009940:	00000000 	.word	0x00000000
 8009944:	3f7ffff7 	.word	0x3f7ffff7
 8009948:	7149f2ca 	.word	0x7149f2ca
 800994c:	3f800007 	.word	0x3f800007
 8009950:	3eaaaaab 	.word	0x3eaaaaab
 8009954:	36eca570 	.word	0x36eca570
 8009958:	3fb8aa3b 	.word	0x3fb8aa3b
 800995c:	3fb8aa00 	.word	0x3fb8aa00
 8009960:	4b800000 	.word	0x4b800000
 8009964:	001cc471 	.word	0x001cc471
 8009968:	005db3d6 	.word	0x005db3d6
 800996c:	080f1a04 	.word	0x080f1a04
 8009970:	fffff000 	.word	0xfffff000
 8009974:	3e6c3255 	.word	0x3e6c3255
 8009978:	3e53f142 	.word	0x3e53f142
 800997c:	3e8ba305 	.word	0x3e8ba305
 8009980:	3edb6db7 	.word	0x3edb6db7
 8009984:	3f19999a 	.word	0x3f19999a
 8009988:	3f763800 	.word	0x3f763800
 800998c:	3f76384f 	.word	0x3f76384f
 8009990:	369dc3a0 	.word	0x369dc3a0
 8009994:	080f1a14 	.word	0x080f1a14
 8009998:	080f1a0c 	.word	0x080f1a0c
 800999c:	3338aa3c 	.word	0x3338aa3c
 80099a0:	f040 8092 	bne.w	8009ac8 <__ieee754_powf+0x530>
 80099a4:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 800999c <__ieee754_powf+0x404>
 80099a8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80099ac:	ee70 6aa6 	vadd.f32	s13, s1, s13
 80099b0:	eef4 6ac7 	vcmpe.f32	s13, s14
 80099b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099b8:	f73f aef6 	bgt.w	80097a8 <__ieee754_powf+0x210>
 80099bc:	15db      	asrs	r3, r3, #23
 80099be:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 80099c2:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80099c6:	4103      	asrs	r3, r0
 80099c8:	4423      	add	r3, r4
 80099ca:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80099ce:	4947      	ldr	r1, [pc, #284]	; (8009aec <__ieee754_powf+0x554>)
 80099d0:	3a7f      	subs	r2, #127	; 0x7f
 80099d2:	4111      	asrs	r1, r2
 80099d4:	ea23 0101 	bic.w	r1, r3, r1
 80099d8:	f3c3 0016 	ubfx	r0, r3, #0, #23
 80099dc:	ee07 1a10 	vmov	s14, r1
 80099e0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80099e4:	f1c2 0217 	rsb	r2, r2, #23
 80099e8:	4110      	asrs	r0, r2
 80099ea:	2c00      	cmp	r4, #0
 80099ec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80099f0:	bfb8      	it	lt
 80099f2:	4240      	neglt	r0, r0
 80099f4:	ee37 7aa0 	vadd.f32	s14, s15, s1
 80099f8:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009af0 <__ieee754_powf+0x558>
 80099fc:	ee17 3a10 	vmov	r3, s14
 8009a00:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8009a04:	f023 030f 	bic.w	r3, r3, #15
 8009a08:	ee07 3a10 	vmov	s14, r3
 8009a0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009a10:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8009a14:	eddf 7a37 	vldr	s15, [pc, #220]	; 8009af4 <__ieee754_powf+0x55c>
 8009a18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a1c:	eee0 7aa6 	vfma.f32	s15, s1, s13
 8009a20:	eddf 6a35 	vldr	s13, [pc, #212]	; 8009af8 <__ieee754_powf+0x560>
 8009a24:	eeb0 0a67 	vmov.f32	s0, s15
 8009a28:	eea7 0a26 	vfma.f32	s0, s14, s13
 8009a2c:	eeb0 6a40 	vmov.f32	s12, s0
 8009a30:	eea7 6a66 	vfms.f32	s12, s14, s13
 8009a34:	ee20 7a00 	vmul.f32	s14, s0, s0
 8009a38:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8009a3c:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8009afc <__ieee754_powf+0x564>
 8009a40:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 8009b00 <__ieee754_powf+0x568>
 8009a44:	eea7 6a26 	vfma.f32	s12, s14, s13
 8009a48:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8009b04 <__ieee754_powf+0x56c>
 8009a4c:	eee6 6a07 	vfma.f32	s13, s12, s14
 8009a50:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 8009b08 <__ieee754_powf+0x570>
 8009a54:	eea6 6a87 	vfma.f32	s12, s13, s14
 8009a58:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8009b0c <__ieee754_powf+0x574>
 8009a5c:	eee6 6a07 	vfma.f32	s13, s12, s14
 8009a60:	eeb0 6a40 	vmov.f32	s12, s0
 8009a64:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8009a68:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8009a6c:	eeb0 7a46 	vmov.f32	s14, s12
 8009a70:	ee77 6a66 	vsub.f32	s13, s14, s13
 8009a74:	ee20 6a06 	vmul.f32	s12, s0, s12
 8009a78:	eee0 7a27 	vfma.f32	s15, s0, s15
 8009a7c:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8009a80:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009a84:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8009a88:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8009a8c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8009a90:	ee10 3a10 	vmov	r3, s0
 8009a94:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8009a98:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009a9c:	da1a      	bge.n	8009ad4 <__ieee754_powf+0x53c>
 8009a9e:	f000 f9e9 	bl	8009e74 <scalbnf>
 8009aa2:	ee20 0a08 	vmul.f32	s0, s0, s16
 8009aa6:	e5c9      	b.n	800963c <__ieee754_powf+0xa4>
 8009aa8:	4a19      	ldr	r2, [pc, #100]	; (8009b10 <__ieee754_powf+0x578>)
 8009aaa:	4293      	cmp	r3, r2
 8009aac:	dd02      	ble.n	8009ab4 <__ieee754_powf+0x51c>
 8009aae:	eddf 7a19 	vldr	s15, [pc, #100]	; 8009b14 <__ieee754_powf+0x57c>
 8009ab2:	e67b      	b.n	80097ac <__ieee754_powf+0x214>
 8009ab4:	d108      	bne.n	8009ac8 <__ieee754_powf+0x530>
 8009ab6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009aba:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8009abe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ac2:	f6ff af7b 	blt.w	80099bc <__ieee754_powf+0x424>
 8009ac6:	e7f2      	b.n	8009aae <__ieee754_powf+0x516>
 8009ac8:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8009acc:	f73f af76 	bgt.w	80099bc <__ieee754_powf+0x424>
 8009ad0:	2000      	movs	r0, #0
 8009ad2:	e78f      	b.n	80099f4 <__ieee754_powf+0x45c>
 8009ad4:	ee00 3a10 	vmov	s0, r3
 8009ad8:	e7e3      	b.n	8009aa2 <__ieee754_powf+0x50a>
 8009ada:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8009ade:	e5ad      	b.n	800963c <__ieee754_powf+0xa4>
 8009ae0:	eeb0 0a68 	vmov.f32	s0, s17
 8009ae4:	e5aa      	b.n	800963c <__ieee754_powf+0xa4>
 8009ae6:	eeb0 0a48 	vmov.f32	s0, s16
 8009aea:	e5a7      	b.n	800963c <__ieee754_powf+0xa4>
 8009aec:	007fffff 	.word	0x007fffff
 8009af0:	3f317218 	.word	0x3f317218
 8009af4:	35bfbe8c 	.word	0x35bfbe8c
 8009af8:	3f317200 	.word	0x3f317200
 8009afc:	3331bb4c 	.word	0x3331bb4c
 8009b00:	b5ddea0e 	.word	0xb5ddea0e
 8009b04:	388ab355 	.word	0x388ab355
 8009b08:	bb360b61 	.word	0xbb360b61
 8009b0c:	3e2aaaab 	.word	0x3e2aaaab
 8009b10:	43160000 	.word	0x43160000
 8009b14:	0da24260 	.word	0x0da24260

08009b18 <__ieee754_sqrtf>:
 8009b18:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8009b1c:	4770      	bx	lr

08009b1e <matherr>:
 8009b1e:	2000      	movs	r0, #0
 8009b20:	4770      	bx	lr
 8009b22:	0000      	movs	r0, r0
 8009b24:	0000      	movs	r0, r0
	...

08009b28 <nan>:
 8009b28:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009b30 <nan+0x8>
 8009b2c:	4770      	bx	lr
 8009b2e:	bf00      	nop
 8009b30:	00000000 	.word	0x00000000
 8009b34:	7ff80000 	.word	0x7ff80000

08009b38 <expm1f>:
 8009b38:	ee10 2a10 	vmov	r2, s0
 8009b3c:	4985      	ldr	r1, [pc, #532]	; (8009d54 <expm1f+0x21c>)
 8009b3e:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8009b42:	428b      	cmp	r3, r1
 8009b44:	d924      	bls.n	8009b90 <expm1f+0x58>
 8009b46:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8009b4a:	d902      	bls.n	8009b52 <expm1f+0x1a>
 8009b4c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009b50:	4770      	bx	lr
 8009b52:	d106      	bne.n	8009b62 <expm1f+0x2a>
 8009b54:	2a00      	cmp	r2, #0
 8009b56:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8009b5a:	bfb8      	it	lt
 8009b5c:	eeb0 0a67 	vmovlt.f32	s0, s15
 8009b60:	4770      	bx	lr
 8009b62:	2a00      	cmp	r2, #0
 8009b64:	db08      	blt.n	8009b78 <expm1f+0x40>
 8009b66:	4a7c      	ldr	r2, [pc, #496]	; (8009d58 <expm1f+0x220>)
 8009b68:	4293      	cmp	r3, r2
 8009b6a:	f240 80eb 	bls.w	8009d44 <expm1f+0x20c>
 8009b6e:	ed9f 0a7b 	vldr	s0, [pc, #492]	; 8009d5c <expm1f+0x224>
 8009b72:	ee20 0a00 	vmul.f32	s0, s0, s0
 8009b76:	4770      	bx	lr
 8009b78:	eddf 7a79 	vldr	s15, [pc, #484]	; 8009d60 <expm1f+0x228>
 8009b7c:	ee70 7a27 	vadd.f32	s15, s0, s15
 8009b80:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009b84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b88:	d554      	bpl.n	8009c34 <expm1f+0xfc>
 8009b8a:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8009b8e:	4770      	bx	lr
 8009b90:	4974      	ldr	r1, [pc, #464]	; (8009d64 <expm1f+0x22c>)
 8009b92:	428b      	cmp	r3, r1
 8009b94:	d96d      	bls.n	8009c72 <expm1f+0x13a>
 8009b96:	4974      	ldr	r1, [pc, #464]	; (8009d68 <expm1f+0x230>)
 8009b98:	428b      	cmp	r3, r1
 8009b9a:	d84b      	bhi.n	8009c34 <expm1f+0xfc>
 8009b9c:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8009d6c <expm1f+0x234>
 8009ba0:	2a00      	cmp	r2, #0
 8009ba2:	bfa7      	ittee	ge
 8009ba4:	ee30 7a47 	vsubge.f32	s14, s0, s14
 8009ba8:	eddf 7a71 	vldrge	s15, [pc, #452]	; 8009d70 <expm1f+0x238>
 8009bac:	eddf 7a71 	vldrlt	s15, [pc, #452]	; 8009d74 <expm1f+0x23c>
 8009bb0:	ee30 7a07 	vaddlt.f32	s14, s0, s14
 8009bb4:	bfac      	ite	ge
 8009bb6:	2301      	movge	r3, #1
 8009bb8:	f04f 33ff 	movlt.w	r3, #4294967295
 8009bbc:	ee37 0a67 	vsub.f32	s0, s14, s15
 8009bc0:	ee37 7a40 	vsub.f32	s14, s14, s0
 8009bc4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009bc8:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8009bcc:	ee20 5a25 	vmul.f32	s10, s0, s11
 8009bd0:	eddf 6a69 	vldr	s13, [pc, #420]	; 8009d78 <expm1f+0x240>
 8009bd4:	ed9f 6a69 	vldr	s12, [pc, #420]	; 8009d7c <expm1f+0x244>
 8009bd8:	ee20 7a05 	vmul.f32	s14, s0, s10
 8009bdc:	eea7 6a26 	vfma.f32	s12, s14, s13
 8009be0:	eddf 6a67 	vldr	s13, [pc, #412]	; 8009d80 <expm1f+0x248>
 8009be4:	eee6 6a07 	vfma.f32	s13, s12, s14
 8009be8:	ed9f 6a66 	vldr	s12, [pc, #408]	; 8009d84 <expm1f+0x24c>
 8009bec:	eea6 6a87 	vfma.f32	s12, s13, s14
 8009bf0:	eddf 6a65 	vldr	s13, [pc, #404]	; 8009d88 <expm1f+0x250>
 8009bf4:	eee6 6a07 	vfma.f32	s13, s12, s14
 8009bf8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8009bfc:	eef0 4a46 	vmov.f32	s9, s12
 8009c00:	eee6 4a87 	vfma.f32	s9, s13, s14
 8009c04:	eef0 6a64 	vmov.f32	s13, s9
 8009c08:	eef0 4a08 	vmov.f32	s9, #8	; 0x40400000  3.0
 8009c0c:	eee5 4a66 	vfms.f32	s9, s10, s13
 8009c10:	ee36 5ae4 	vsub.f32	s10, s13, s9
 8009c14:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8009c18:	eee0 6a64 	vfms.f32	s13, s0, s9
 8009c1c:	eef0 4a66 	vmov.f32	s9, s13
 8009c20:	eec5 6a24 	vdiv.f32	s13, s10, s9
 8009c24:	ee66 6a87 	vmul.f32	s13, s13, s14
 8009c28:	bb8b      	cbnz	r3, 8009c8e <expm1f+0x156>
 8009c2a:	eef0 7a47 	vmov.f32	s15, s14
 8009c2e:	eed0 7a26 	vfnms.f32	s15, s0, s13
 8009c32:	e027      	b.n	8009c84 <expm1f+0x14c>
 8009c34:	eddf 7a55 	vldr	s15, [pc, #340]	; 8009d8c <expm1f+0x254>
 8009c38:	2a00      	cmp	r2, #0
 8009c3a:	ee20 7a27 	vmul.f32	s14, s0, s15
 8009c3e:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8009c42:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 8009c46:	bfa8      	it	ge
 8009c48:	eef0 7a66 	vmovge.f32	s15, s13
 8009c4c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009c50:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8009d6c <expm1f+0x234>
 8009c54:	eddf 6a46 	vldr	s13, [pc, #280]	; 8009d70 <expm1f+0x238>
 8009c58:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009c5c:	ee17 3a90 	vmov	r3, s15
 8009c60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009c64:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8009c68:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8009c6c:	eeb0 7a40 	vmov.f32	s14, s0
 8009c70:	e7a4      	b.n	8009bbc <expm1f+0x84>
 8009c72:	f1b3 5f4c 	cmp.w	r3, #855638016	; 0x33000000
 8009c76:	d208      	bcs.n	8009c8a <expm1f+0x152>
 8009c78:	eddf 7a38 	vldr	s15, [pc, #224]	; 8009d5c <expm1f+0x224>
 8009c7c:	ee70 7a27 	vadd.f32	s15, s0, s15
 8009c80:	ee77 7ae7 	vsub.f32	s15, s15, s15
 8009c84:	ee30 0a67 	vsub.f32	s0, s0, s15
 8009c88:	4770      	bx	lr
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	e79c      	b.n	8009bc8 <expm1f+0x90>
 8009c8e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8009c92:	1c5a      	adds	r2, r3, #1
 8009c94:	eed6 7a80 	vfnms.f32	s15, s13, s0
 8009c98:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009c9c:	d106      	bne.n	8009cac <expm1f+0x174>
 8009c9e:	ee70 7a67 	vsub.f32	s15, s0, s15
 8009ca2:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 8009ca6:	eea7 0aa5 	vfma.f32	s0, s15, s11
 8009caa:	4770      	bx	lr
 8009cac:	2b01      	cmp	r3, #1
 8009cae:	d118      	bne.n	8009ce2 <expm1f+0x1aa>
 8009cb0:	eebd 7a00 	vmov.f32	s14, #208	; 0xbe800000 -0.250
 8009cb4:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8009cb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009cbc:	bf41      	itttt	mi
 8009cbe:	ee30 0a25 	vaddmi.f32	s0, s0, s11
 8009cc2:	ee37 0ac0 	vsubmi.f32	s0, s15, s0
 8009cc6:	eef8 7a00 	vmovmi.f32	s15, #128	; 0xc0000000 -2.0
 8009cca:	ee20 0a27 	vmulmi.f32	s0, s0, s15
 8009cce:	bf5f      	itttt	pl
 8009cd0:	ee30 0a67 	vsubpl.f32	s0, s0, s15
 8009cd4:	eef0 7a00 	vmovpl.f32	s15, #0	; 0x40000000  2.0
 8009cd8:	eea0 6a27 	vfmapl.f32	s12, s0, s15
 8009cdc:	eeb0 0a46 	vmovpl.f32	s0, s12
 8009ce0:	4770      	bx	lr
 8009ce2:	1c5a      	adds	r2, r3, #1
 8009ce4:	2a39      	cmp	r2, #57	; 0x39
 8009ce6:	ea4f 51c3 	mov.w	r1, r3, lsl #23
 8009cea:	d90b      	bls.n	8009d04 <expm1f+0x1cc>
 8009cec:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8009cf0:	ee36 0a40 	vsub.f32	s0, s12, s0
 8009cf4:	ee10 3a10 	vmov	r3, s0
 8009cf8:	440b      	add	r3, r1
 8009cfa:	ee00 3a10 	vmov	s0, r3
 8009cfe:	ee30 0a46 	vsub.f32	s0, s0, s12
 8009d02:	4770      	bx	lr
 8009d04:	2b16      	cmp	r3, #22
 8009d06:	dc11      	bgt.n	8009d2c <expm1f+0x1f4>
 8009d08:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009d0c:	fa42 f303 	asr.w	r3, r2, r3
 8009d10:	f1c3 537e 	rsb	r3, r3, #1065353216	; 0x3f800000
 8009d14:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8009d18:	ee07 3a90 	vmov	s15, r3
 8009d1c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8009d20:	ee10 3a10 	vmov	r3, s0
 8009d24:	440b      	add	r3, r1
 8009d26:	ee00 3a10 	vmov	s0, r3
 8009d2a:	4770      	bx	lr
 8009d2c:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8009d30:	05db      	lsls	r3, r3, #23
 8009d32:	ee07 3a10 	vmov	s14, r3
 8009d36:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009d3a:	ee30 0a67 	vsub.f32	s0, s0, s15
 8009d3e:	ee30 0a06 	vadd.f32	s0, s0, s12
 8009d42:	e7ed      	b.n	8009d20 <expm1f+0x1e8>
 8009d44:	eddf 7a11 	vldr	s15, [pc, #68]	; 8009d8c <expm1f+0x254>
 8009d48:	ee20 7a27 	vmul.f32	s14, s0, s15
 8009d4c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8009d50:	e77c      	b.n	8009c4c <expm1f+0x114>
 8009d52:	bf00      	nop
 8009d54:	4195b843 	.word	0x4195b843
 8009d58:	42b17217 	.word	0x42b17217
 8009d5c:	7149f2ca 	.word	0x7149f2ca
 8009d60:	0da24260 	.word	0x0da24260
 8009d64:	3eb17218 	.word	0x3eb17218
 8009d68:	3f851591 	.word	0x3f851591
 8009d6c:	3f317180 	.word	0x3f317180
 8009d70:	3717f7d1 	.word	0x3717f7d1
 8009d74:	b717f7d1 	.word	0xb717f7d1
 8009d78:	b457edbb 	.word	0xb457edbb
 8009d7c:	36867e54 	.word	0x36867e54
 8009d80:	b8a670cd 	.word	0xb8a670cd
 8009d84:	3ad00d01 	.word	0x3ad00d01
 8009d88:	bd088889 	.word	0xbd088889
 8009d8c:	3fb8aa3b 	.word	0x3fb8aa3b

08009d90 <fabsf>:
 8009d90:	ee10 3a10 	vmov	r3, s0
 8009d94:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009d98:	ee00 3a10 	vmov	s0, r3
 8009d9c:	4770      	bx	lr

08009d9e <finitef>:
 8009d9e:	ee10 3a10 	vmov	r3, s0
 8009da2:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 8009da6:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8009daa:	bfac      	ite	ge
 8009dac:	2000      	movge	r0, #0
 8009dae:	2001      	movlt	r0, #1
 8009db0:	4770      	bx	lr
	...

08009db4 <nanf>:
 8009db4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009dbc <nanf+0x8>
 8009db8:	4770      	bx	lr
 8009dba:	bf00      	nop
 8009dbc:	7fc00000 	.word	0x7fc00000

08009dc0 <rintf>:
 8009dc0:	b513      	push	{r0, r1, r4, lr}
 8009dc2:	ee10 1a10 	vmov	r1, s0
 8009dc6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009dca:	0ddc      	lsrs	r4, r3, #23
 8009dcc:	3c7f      	subs	r4, #127	; 0x7f
 8009dce:	2c16      	cmp	r4, #22
 8009dd0:	dc46      	bgt.n	8009e60 <rintf+0xa0>
 8009dd2:	b32b      	cbz	r3, 8009e20 <rintf+0x60>
 8009dd4:	2c00      	cmp	r4, #0
 8009dd6:	ee10 2a10 	vmov	r2, s0
 8009dda:	ea4f 70d1 	mov.w	r0, r1, lsr #31
 8009dde:	da21      	bge.n	8009e24 <rintf+0x64>
 8009de0:	f3c1 0316 	ubfx	r3, r1, #0, #23
 8009de4:	425b      	negs	r3, r3
 8009de6:	4a21      	ldr	r2, [pc, #132]	; (8009e6c <rintf+0xac>)
 8009de8:	0a5b      	lsrs	r3, r3, #9
 8009dea:	0d09      	lsrs	r1, r1, #20
 8009dec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009df0:	0509      	lsls	r1, r1, #20
 8009df2:	430b      	orrs	r3, r1
 8009df4:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 8009df8:	ee07 3a90 	vmov	s15, r3
 8009dfc:	edd2 6a00 	vldr	s13, [r2]
 8009e00:	ee36 7aa7 	vadd.f32	s14, s13, s15
 8009e04:	ed8d 7a01 	vstr	s14, [sp, #4]
 8009e08:	eddd 7a01 	vldr	s15, [sp, #4]
 8009e0c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009e10:	ee17 3a90 	vmov	r3, s15
 8009e14:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009e18:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 8009e1c:	ee00 3a10 	vmov	s0, r3
 8009e20:	b002      	add	sp, #8
 8009e22:	bd10      	pop	{r4, pc}
 8009e24:	4b12      	ldr	r3, [pc, #72]	; (8009e70 <rintf+0xb0>)
 8009e26:	4123      	asrs	r3, r4
 8009e28:	4219      	tst	r1, r3
 8009e2a:	d0f9      	beq.n	8009e20 <rintf+0x60>
 8009e2c:	085b      	lsrs	r3, r3, #1
 8009e2e:	4219      	tst	r1, r3
 8009e30:	d006      	beq.n	8009e40 <rintf+0x80>
 8009e32:	ea21 0203 	bic.w	r2, r1, r3
 8009e36:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009e3a:	fa43 f404 	asr.w	r4, r3, r4
 8009e3e:	4322      	orrs	r2, r4
 8009e40:	4b0a      	ldr	r3, [pc, #40]	; (8009e6c <rintf+0xac>)
 8009e42:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009e46:	ed90 7a00 	vldr	s14, [r0]
 8009e4a:	ee07 2a90 	vmov	s15, r2
 8009e4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009e52:	edcd 7a01 	vstr	s15, [sp, #4]
 8009e56:	ed9d 0a01 	vldr	s0, [sp, #4]
 8009e5a:	ee30 0a47 	vsub.f32	s0, s0, s14
 8009e5e:	e7df      	b.n	8009e20 <rintf+0x60>
 8009e60:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8009e64:	d3dc      	bcc.n	8009e20 <rintf+0x60>
 8009e66:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009e6a:	e7d9      	b.n	8009e20 <rintf+0x60>
 8009e6c:	080f1a1c 	.word	0x080f1a1c
 8009e70:	007fffff 	.word	0x007fffff

08009e74 <scalbnf>:
 8009e74:	b508      	push	{r3, lr}
 8009e76:	ee10 2a10 	vmov	r2, s0
 8009e7a:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 8009e7e:	ed2d 8b02 	vpush	{d8}
 8009e82:	eef0 0a40 	vmov.f32	s1, s0
 8009e86:	d004      	beq.n	8009e92 <scalbnf+0x1e>
 8009e88:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8009e8c:	d306      	bcc.n	8009e9c <scalbnf+0x28>
 8009e8e:	ee70 0a00 	vadd.f32	s1, s0, s0
 8009e92:	ecbd 8b02 	vpop	{d8}
 8009e96:	eeb0 0a60 	vmov.f32	s0, s1
 8009e9a:	bd08      	pop	{r3, pc}
 8009e9c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009ea0:	d21c      	bcs.n	8009edc <scalbnf+0x68>
 8009ea2:	4b1f      	ldr	r3, [pc, #124]	; (8009f20 <scalbnf+0xac>)
 8009ea4:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8009f24 <scalbnf+0xb0>
 8009ea8:	4298      	cmp	r0, r3
 8009eaa:	ee60 0a27 	vmul.f32	s1, s0, s15
 8009eae:	db10      	blt.n	8009ed2 <scalbnf+0x5e>
 8009eb0:	ee10 2a90 	vmov	r2, s1
 8009eb4:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 8009eb8:	3b19      	subs	r3, #25
 8009eba:	4403      	add	r3, r0
 8009ebc:	2bfe      	cmp	r3, #254	; 0xfe
 8009ebe:	dd0f      	ble.n	8009ee0 <scalbnf+0x6c>
 8009ec0:	ed9f 8a19 	vldr	s16, [pc, #100]	; 8009f28 <scalbnf+0xb4>
 8009ec4:	eeb0 0a48 	vmov.f32	s0, s16
 8009ec8:	f000 f834 	bl	8009f34 <copysignf>
 8009ecc:	ee60 0a08 	vmul.f32	s1, s0, s16
 8009ed0:	e7df      	b.n	8009e92 <scalbnf+0x1e>
 8009ed2:	eddf 7a16 	vldr	s15, [pc, #88]	; 8009f2c <scalbnf+0xb8>
 8009ed6:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8009eda:	e7da      	b.n	8009e92 <scalbnf+0x1e>
 8009edc:	0ddb      	lsrs	r3, r3, #23
 8009ede:	e7ec      	b.n	8009eba <scalbnf+0x46>
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	dd06      	ble.n	8009ef2 <scalbnf+0x7e>
 8009ee4:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8009ee8:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8009eec:	ee00 3a90 	vmov	s1, r3
 8009ef0:	e7cf      	b.n	8009e92 <scalbnf+0x1e>
 8009ef2:	f113 0f16 	cmn.w	r3, #22
 8009ef6:	da06      	bge.n	8009f06 <scalbnf+0x92>
 8009ef8:	f24c 3350 	movw	r3, #50000	; 0xc350
 8009efc:	4298      	cmp	r0, r3
 8009efe:	dcdf      	bgt.n	8009ec0 <scalbnf+0x4c>
 8009f00:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 8009f2c <scalbnf+0xb8>
 8009f04:	e7de      	b.n	8009ec4 <scalbnf+0x50>
 8009f06:	3319      	adds	r3, #25
 8009f08:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8009f0c:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8009f10:	eddf 7a07 	vldr	s15, [pc, #28]	; 8009f30 <scalbnf+0xbc>
 8009f14:	ee07 3a10 	vmov	s14, r3
 8009f18:	ee67 0a27 	vmul.f32	s1, s14, s15
 8009f1c:	e7b9      	b.n	8009e92 <scalbnf+0x1e>
 8009f1e:	bf00      	nop
 8009f20:	ffff3cb0 	.word	0xffff3cb0
 8009f24:	4c000000 	.word	0x4c000000
 8009f28:	7149f2ca 	.word	0x7149f2ca
 8009f2c:	0da24260 	.word	0x0da24260
 8009f30:	33000000 	.word	0x33000000

08009f34 <copysignf>:
 8009f34:	ee10 3a10 	vmov	r3, s0
 8009f38:	ee10 2a90 	vmov	r2, s1
 8009f3c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009f40:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8009f44:	4313      	orrs	r3, r2
 8009f46:	ee00 3a10 	vmov	s0, r3
 8009f4a:	4770      	bx	lr

08009f4c <_init>:
 8009f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f4e:	bf00      	nop
 8009f50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f52:	bc08      	pop	{r3}
 8009f54:	469e      	mov	lr, r3
 8009f56:	4770      	bx	lr

08009f58 <_fini>:
 8009f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f5a:	bf00      	nop
 8009f5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f5e:	bc08      	pop	{r3}
 8009f60:	469e      	mov	lr, r3
 8009f62:	4770      	bx	lr
