
AI_HandwrittenDigits_Classification.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ad4c  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000656f4  0800aed4  0800aed4  0001aed4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080705c8  080705c8  000904f0  2**0
                  CONTENTS
  4 .ARM          00000008  080705c8  080705c8  000805c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080705d0  080705d0  000904f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080705d0  080705d0  000805d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080705d4  080705d4  000805d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000004f0  20000000  080705d8  00090000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000fc00  200004f0  08070ac8  000904f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200100f0  08070ac8  000a00f0  2**0
                  ALLOC
 11 .ARM.attributes 00000034  00000000  00000000  000904f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001101f  00000000  00000000  00090524  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002c7c  00000000  00000000  000a1543  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000db8  00000000  00000000  000a41c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c50  00000000  00000000  000a4f78  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002326f  00000000  00000000  000a5bc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ca23  00000000  00000000  000c8e37  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cfdb5  00000000  00000000  000d585a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      00001b20  00000000  00000000  001a560f  2**0
                  CONTENTS, READONLY
 20 .iar.rtmodel  0000017e  00000000  00000000  001a712f  2**0
                  CONTENTS, READONLY
 21 .iar_vfe_header 0000001c  00000000  00000000  001a72b0  2**2
                  CONTENTS, READONLY
 22 .debug_frame  00006c88  00000000  00000000  001a72cc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200004f0 	.word	0x200004f0
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800aebc 	.word	0x0800aebc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200004f4 	.word	0x200004f4
 80001c4:	0800aebc 	.word	0x0800aebc

080001c8 <_ai_platform_get_io_buffers>:
 80001c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80001cc:	b081      	sub	sp, #4
 80001ce:	468b      	mov	fp, r1
 80001d0:	6801      	ldr	r1, [r0, #0]
 80001d2:	680f      	ldr	r7, [r1, #0]
 80001d4:	8901      	ldrh	r1, [r0, #8]
 80001d6:	2600      	movs	r6, #0
 80001d8:	46b0      	mov	r8, r6
 80001da:	f04f 0904 	mov.w	r9, #4
 80001de:	46b2      	mov	sl, r6
 80001e0:	b339      	cbz	r1, 8000232 <_ai_platform_get_io_buffers+0x6a>
 80001e2:	4604      	mov	r4, r0
 80001e4:	6860      	ldr	r0, [r4, #4]
 80001e6:	683a      	ldr	r2, [r7, #0]
 80001e8:	6841      	ldr	r1, [r0, #4]
 80001ea:	6810      	ldr	r0, [r2, #0]
 80001ec:	eb01 050a 	add.w	r5, r1, sl
 80001f0:	f003 f9ae 	bl	8003550 <ai_array_to_buffer_fmt>
 80001f4:	6028      	str	r0, [r5, #0]
 80001f6:	2101      	movs	r1, #1
 80001f8:	80a9      	strh	r1, [r5, #4]
 80001fa:	1c76      	adds	r6, r6, #1
 80001fc:	6938      	ldr	r0, [r7, #16]
 80001fe:	80e8      	strh	r0, [r5, #6]
 8000200:	f108 0801 	add.w	r8, r8, #1
 8000204:	68f9      	ldr	r1, [r7, #12]
 8000206:	8129      	strh	r1, [r5, #8]
 8000208:	f10a 0a14 	add.w	sl, sl, #20
 800020c:	68b8      	ldr	r0, [r7, #8]
 800020e:	60e8      	str	r0, [r5, #12]
 8000210:	6839      	ldr	r1, [r7, #0]
 8000212:	6888      	ldr	r0, [r1, #8]
 8000214:	6128      	str	r0, [r5, #16]
 8000216:	6820      	ldr	r0, [r4, #0]
 8000218:	f850 7009 	ldr.w	r7, [r0, r9]
 800021c:	8920      	ldrh	r0, [r4, #8]
 800021e:	4580      	cmp	r8, r0
 8000220:	f109 0904 	add.w	r9, r9, #4
 8000224:	d3de      	bcc.n	80001e4 <_ai_platform_get_io_buffers+0x1c>
 8000226:	b2b0      	uxth	r0, r6
 8000228:	b118      	cbz	r0, 8000232 <_ai_platform_get_io_buffers+0x6a>
 800022a:	6860      	ldr	r0, [r4, #4]
 800022c:	6841      	ldr	r1, [r0, #4]
 800022e:	f8cb 1000 	str.w	r1, [fp]
 8000232:	b2b0      	uxth	r0, r6
 8000234:	b001      	add	sp, #4
 8000236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800023a <_platform_network_state_setup>:
 800023a:	b430      	push	{r4, r5}
 800023c:	6914      	ldr	r4, [r2, #16]
 800023e:	6a13      	ldr	r3, [r2, #32]
 8000240:	435c      	muls	r4, r3
 8000242:	6084      	str	r4, [r0, #8]
 8000244:	888d      	ldrh	r5, [r1, #4]
 8000246:	436c      	muls	r4, r5
 8000248:	60c4      	str	r4, [r0, #12]
 800024a:	6909      	ldr	r1, [r1, #16]
 800024c:	68c3      	ldr	r3, [r0, #12]
 800024e:	6041      	str	r1, [r0, #4]
 8000250:	4419      	add	r1, r3
 8000252:	6001      	str	r1, [r0, #0]
 8000254:	6812      	ldr	r2, [r2, #0]
 8000256:	6814      	ldr	r4, [r2, #0]
 8000258:	00a1      	lsls	r1, r4, #2
 800025a:	d407      	bmi.n	800026c <_platform_network_state_setup+0x32>
 800025c:	6894      	ldr	r4, [r2, #8]
 800025e:	68d1      	ldr	r1, [r2, #12]
 8000260:	6843      	ldr	r3, [r0, #4]
 8000262:	1a64      	subs	r4, r4, r1
 8000264:	1919      	adds	r1, r3, r4
 8000266:	6091      	str	r1, [r2, #8]
 8000268:	6840      	ldr	r0, [r0, #4]
 800026a:	60d0      	str	r0, [r2, #12]
 800026c:	bc30      	pop	{r4, r5}
 800026e:	4770      	bx	lr

08000270 <_platform_network_state_update_input>:
 8000270:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000274:	4605      	mov	r5, r0
 8000276:	2600      	movs	r6, #0
 8000278:	6828      	ldr	r0, [r5, #0]
 800027a:	6801      	ldr	r1, [r0, #0]
 800027c:	8928      	ldrh	r0, [r5, #8]
 800027e:	2704      	movs	r7, #4
 8000280:	46b0      	mov	r8, r6
 8000282:	b338      	cbz	r0, 80002d4 <_platform_network_state_update_input+0x64>
 8000284:	6868      	ldr	r0, [r5, #4]
 8000286:	6802      	ldr	r2, [r0, #0]
 8000288:	eb02 0408 	add.w	r4, r2, r8
 800028c:	680a      	ldr	r2, [r1, #0]
 800028e:	6813      	ldr	r3, [r2, #0]
 8000290:	6890      	ldr	r0, [r2, #8]
 8000292:	6861      	ldr	r1, [r4, #4]
 8000294:	009b      	lsls	r3, r3, #2
 8000296:	d503      	bpl.n	80002a0 <_platform_network_state_update_input+0x30>
 8000298:	68a2      	ldr	r2, [r4, #8]
 800029a:	f009 fc81 	bl	8009ba0 <__aeabi_memcpy>
 800029e:	e005      	b.n	80002ac <_platform_network_state_update_input+0x3c>
 80002a0:	68d3      	ldr	r3, [r2, #12]
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	180b      	adds	r3, r1, r0
 80002a6:	6093      	str	r3, [r2, #8]
 80002a8:	6860      	ldr	r0, [r4, #4]
 80002aa:	60d0      	str	r0, [r2, #12]
 80002ac:	6860      	ldr	r0, [r4, #4]
 80002ae:	68a1      	ldr	r1, [r4, #8]
 80002b0:	4408      	add	r0, r1
 80002b2:	6821      	ldr	r1, [r4, #0]
 80002b4:	6060      	str	r0, [r4, #4]
 80002b6:	4288      	cmp	r0, r1
 80002b8:	d302      	bcc.n	80002c0 <_platform_network_state_update_input+0x50>
 80002ba:	68e0      	ldr	r0, [r4, #12]
 80002bc:	4240      	negs	r0, r0
 80002be:	4408      	add	r0, r1
 80002c0:	6060      	str	r0, [r4, #4]
 80002c2:	1c76      	adds	r6, r6, #1
 80002c4:	6828      	ldr	r0, [r5, #0]
 80002c6:	59c1      	ldr	r1, [r0, r7]
 80002c8:	8928      	ldrh	r0, [r5, #8]
 80002ca:	1d3f      	adds	r7, r7, #4
 80002cc:	4286      	cmp	r6, r0
 80002ce:	f108 0810 	add.w	r8, r8, #16
 80002d2:	d3d7      	bcc.n	8000284 <_platform_network_state_update_input+0x14>
 80002d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080002d8 <_platform_network_state_update_output>:
 80002d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80002dc:	4605      	mov	r5, r0
 80002de:	2600      	movs	r6, #0
 80002e0:	6828      	ldr	r0, [r5, #0]
 80002e2:	6801      	ldr	r1, [r0, #0]
 80002e4:	8928      	ldrh	r0, [r5, #8]
 80002e6:	2704      	movs	r7, #4
 80002e8:	46b0      	mov	r8, r6
 80002ea:	b388      	cbz	r0, 8000350 <_platform_network_state_update_output+0x78>
 80002ec:	6868      	ldr	r0, [r5, #4]
 80002ee:	6809      	ldr	r1, [r1, #0]
 80002f0:	6802      	ldr	r2, [r0, #0]
 80002f2:	680b      	ldr	r3, [r1, #0]
 80002f4:	eb02 0408 	add.w	r4, r2, r8
 80002f8:	009b      	lsls	r3, r3, #2
 80002fa:	6860      	ldr	r0, [r4, #4]
 80002fc:	68a2      	ldr	r2, [r4, #8]
 80002fe:	d50e      	bpl.n	800031e <_platform_network_state_update_output+0x46>
 8000300:	6889      	ldr	r1, [r1, #8]
 8000302:	f009 fc4d 	bl	8009ba0 <__aeabi_memcpy>
 8000306:	6862      	ldr	r2, [r4, #4]
 8000308:	68a0      	ldr	r0, [r4, #8]
 800030a:	6821      	ldr	r1, [r4, #0]
 800030c:	4410      	add	r0, r2
 800030e:	4288      	cmp	r0, r1
 8000310:	6060      	str	r0, [r4, #4]
 8000312:	d302      	bcc.n	800031a <_platform_network_state_update_output+0x42>
 8000314:	68e0      	ldr	r0, [r4, #12]
 8000316:	4240      	negs	r0, r0
 8000318:	4408      	add	r0, r1
 800031a:	6060      	str	r0, [r4, #4]
 800031c:	e00f      	b.n	800033e <_platform_network_state_update_output+0x66>
 800031e:	4410      	add	r0, r2
 8000320:	6822      	ldr	r2, [r4, #0]
 8000322:	6060      	str	r0, [r4, #4]
 8000324:	4290      	cmp	r0, r2
 8000326:	d302      	bcc.n	800032e <_platform_network_state_update_output+0x56>
 8000328:	68e0      	ldr	r0, [r4, #12]
 800032a:	4240      	negs	r0, r0
 800032c:	4410      	add	r0, r2
 800032e:	6060      	str	r0, [r4, #4]
 8000330:	688a      	ldr	r2, [r1, #8]
 8000332:	68cb      	ldr	r3, [r1, #12]
 8000334:	1ad2      	subs	r2, r2, r3
 8000336:	4410      	add	r0, r2
 8000338:	6088      	str	r0, [r1, #8]
 800033a:	6862      	ldr	r2, [r4, #4]
 800033c:	60ca      	str	r2, [r1, #12]
 800033e:	1c76      	adds	r6, r6, #1
 8000340:	6828      	ldr	r0, [r5, #0]
 8000342:	59c1      	ldr	r1, [r0, r7]
 8000344:	8928      	ldrh	r0, [r5, #8]
 8000346:	1d3f      	adds	r7, r7, #4
 8000348:	4286      	cmp	r6, r0
 800034a:	f108 0810 	add.w	r8, r8, #16
 800034e:	d3cd      	bcc.n	80002ec <_platform_network_state_update_output+0x14>
 8000350:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000354 <_platform_network_io_bind>:
 8000354:	2800      	cmp	r0, #0
 8000356:	d100      	bne.n	800035a <_platform_network_io_bind+0x6>
 8000358:	4770      	bx	lr
 800035a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800035e:	b081      	sub	sp, #4
 8000360:	2300      	movs	r3, #0
 8000362:	b405      	push	{r0, r2}
 8000364:	b081      	sub	sp, #4
 8000366:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8000368:	8243      	strh	r3, [r0, #18]
 800036a:	9801      	ldr	r0, [sp, #4]
 800036c:	8203      	strh	r3, [r0, #16]
 800036e:	9b01      	ldr	r3, [sp, #4]
 8000370:	7a18      	ldrb	r0, [r3, #8]
 8000372:	f000 0003 	and.w	r0, r0, #3
 8000376:	2803      	cmp	r0, #3
 8000378:	d004      	beq.n	8000384 <_platform_network_io_bind+0x30>
 800037a:	2230      	movs	r2, #48	; 0x30
 800037c:	2111      	movs	r1, #17
 800037e:	f103 000c 	add.w	r0, r3, #12
 8000382:	e0ce      	b.n	8000522 <_platform_network_io_bind+0x1ce>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf1c      	itt	ne
 8000388:	8910      	ldrhne	r0, [r2, #8]
 800038a:	2800      	cmpne	r0, #0
 800038c:	f000 80c3 	beq.w	8000516 <_platform_network_io_bind+0x1c2>
 8000390:	6810      	ldr	r0, [r2, #0]
 8000392:	f8b1 a004 	ldrh.w	sl, [r1, #4]
 8000396:	6804      	ldr	r4, [r0, #0]
 8000398:	9200      	str	r2, [sp, #0]
 800039a:	2700      	movs	r7, #0
 800039c:	2504      	movs	r5, #4
 800039e:	46b9      	mov	r9, r7
 80003a0:	1d0e      	adds	r6, r1, #4
 80003a2:	9800      	ldr	r0, [sp, #0]
 80003a4:	8901      	ldrh	r1, [r0, #8]
 80003a6:	428f      	cmp	r7, r1
 80003a8:	f080 80b1 	bcs.w	800050e <_platform_network_io_bind+0x1ba>
 80003ac:	6841      	ldr	r1, [r0, #4]
 80003ae:	680a      	ldr	r2, [r1, #0]
 80003b0:	eb02 0809 	add.w	r8, r2, r9
 80003b4:	2c00      	cmp	r4, #0
 80003b6:	bf18      	it	ne
 80003b8:	f1b8 0f00 	cmpne.w	r8, #0
 80003bc:	f000 80ab 	beq.w	8000516 <_platform_network_io_bind+0x1c2>
 80003c0:	6820      	ldr	r0, [r4, #0]
 80003c2:	8873      	ldrh	r3, [r6, #2]
 80003c4:	f8b6 c004 	ldrh.w	ip, [r6, #4]
 80003c8:	68b2      	ldr	r2, [r6, #8]
 80003ca:	6841      	ldr	r1, [r0, #4]
 80003cc:	fb03 fe0c 	mul.w	lr, r3, ip
 80003d0:	fb02 fe0e 	mul.w	lr, r2, lr
 80003d4:	4571      	cmp	r1, lr
 80003d6:	f0c0 80a0 	bcc.w	800051a <_platform_network_io_bind+0x1c6>
 80003da:	f8d4 e010 	ldr.w	lr, [r4, #16]
 80003de:	459e      	cmp	lr, r3
 80003e0:	bf04      	itt	eq
 80003e2:	68e3      	ldreq	r3, [r4, #12]
 80003e4:	4563      	cmpeq	r3, ip
 80003e6:	bf04      	itt	eq
 80003e8:	68a3      	ldreq	r3, [r4, #8]
 80003ea:	4293      	cmpeq	r3, r2
 80003ec:	f040 8095 	bne.w	800051a <_platform_network_io_bind+0x1c6>
 80003f0:	6800      	ldr	r0, [r0, #0]
 80003f2:	f003 f985 	bl	8003700 <ai_array_get_byte_size>
 80003f6:	6921      	ldr	r1, [r4, #16]
 80003f8:	6a22      	ldr	r2, [r4, #32]
 80003fa:	4351      	muls	r1, r2
 80003fc:	4288      	cmp	r0, r1
 80003fe:	f0c0 808c 	bcc.w	800051a <_platform_network_io_bind+0x1c6>
 8000402:	6820      	ldr	r0, [r4, #0]
 8000404:	6800      	ldr	r0, [r0, #0]
 8000406:	f003 f8a3 	bl	8003550 <ai_array_to_buffer_fmt>
 800040a:	f856 1c04 	ldr.w	r1, [r6, #-4]
 800040e:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 8000412:	f021 417e 	bic.w	r1, r1, #4261412864	; 0xfe000000
 8000416:	4288      	cmp	r0, r1
 8000418:	d115      	bne.n	8000446 <_platform_network_io_bind+0xf2>
 800041a:	68f0      	ldr	r0, [r6, #12]
 800041c:	2800      	cmp	r0, #0
 800041e:	d07a      	beq.n	8000516 <_platform_network_io_bind+0x1c2>
 8000420:	8830      	ldrh	r0, [r6, #0]
 8000422:	b190      	cbz	r0, 800044a <_platform_network_io_bind+0xf6>
 8000424:	4550      	cmp	r0, sl
 8000426:	bf28      	it	cs
 8000428:	4682      	movcs	sl, r0
 800042a:	4622      	mov	r2, r4
 800042c:	1f31      	subs	r1, r6, #4
 800042e:	4640      	mov	r0, r8
 8000430:	f7ff ff03 	bl	800023a <_platform_network_state_setup>
 8000434:	9800      	ldr	r0, [sp, #0]
 8000436:	6801      	ldr	r1, [r0, #0]
 8000438:	594c      	ldr	r4, [r1, r5]
 800043a:	1c7f      	adds	r7, r7, #1
 800043c:	3614      	adds	r6, #20
 800043e:	f109 0910 	add.w	r9, r9, #16
 8000442:	1d2d      	adds	r5, r5, #4
 8000444:	e7ad      	b.n	80003a2 <_platform_network_io_bind+0x4e>
 8000446:	2219      	movs	r2, #25
 8000448:	e068      	b.n	800051c <_platform_network_io_bind+0x1c8>
 800044a:	2221      	movs	r2, #33	; 0x21
 800044c:	e066      	b.n	800051c <_platform_network_io_bind+0x1c8>
 800044e:	9901      	ldr	r1, [sp, #4]
 8000450:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 8000452:	320c      	adds	r2, #12
 8000454:	8911      	ldrh	r1, [r2, #8]
 8000456:	2900      	cmp	r1, #0
 8000458:	d073      	beq.n	8000542 <_platform_network_io_bind+0x1ee>
 800045a:	6813      	ldr	r3, [r2, #0]
 800045c:	681c      	ldr	r4, [r3, #0]
 800045e:	9200      	str	r2, [sp, #0]
 8000460:	2700      	movs	r7, #0
 8000462:	2504      	movs	r5, #4
 8000464:	46b9      	mov	r9, r7
 8000466:	1d06      	adds	r6, r0, #4
 8000468:	9800      	ldr	r0, [sp, #0]
 800046a:	8901      	ldrh	r1, [r0, #8]
 800046c:	428f      	cmp	r7, r1
 800046e:	d25e      	bcs.n	800052e <_platform_network_io_bind+0x1da>
 8000470:	6841      	ldr	r1, [r0, #4]
 8000472:	680a      	ldr	r2, [r1, #0]
 8000474:	eb02 0809 	add.w	r8, r2, r9
 8000478:	2c00      	cmp	r4, #0
 800047a:	bf18      	it	ne
 800047c:	f1b8 0f00 	cmpne.w	r8, #0
 8000480:	d05c      	beq.n	800053c <_platform_network_io_bind+0x1e8>
 8000482:	6820      	ldr	r0, [r4, #0]
 8000484:	8873      	ldrh	r3, [r6, #2]
 8000486:	f8b6 c004 	ldrh.w	ip, [r6, #4]
 800048a:	68b2      	ldr	r2, [r6, #8]
 800048c:	6841      	ldr	r1, [r0, #4]
 800048e:	fb03 fe0c 	mul.w	lr, r3, ip
 8000492:	fb02 fe0e 	mul.w	lr, r2, lr
 8000496:	4571      	cmp	r1, lr
 8000498:	d353      	bcc.n	8000542 <_platform_network_io_bind+0x1ee>
 800049a:	f8d4 e010 	ldr.w	lr, [r4, #16]
 800049e:	459e      	cmp	lr, r3
 80004a0:	bf04      	itt	eq
 80004a2:	68e3      	ldreq	r3, [r4, #12]
 80004a4:	4563      	cmpeq	r3, ip
 80004a6:	bf04      	itt	eq
 80004a8:	68a3      	ldreq	r3, [r4, #8]
 80004aa:	4293      	cmpeq	r3, r2
 80004ac:	d149      	bne.n	8000542 <_platform_network_io_bind+0x1ee>
 80004ae:	6800      	ldr	r0, [r0, #0]
 80004b0:	f003 f926 	bl	8003700 <ai_array_get_byte_size>
 80004b4:	6921      	ldr	r1, [r4, #16]
 80004b6:	6a22      	ldr	r2, [r4, #32]
 80004b8:	4351      	muls	r1, r2
 80004ba:	4288      	cmp	r0, r1
 80004bc:	d341      	bcc.n	8000542 <_platform_network_io_bind+0x1ee>
 80004be:	6820      	ldr	r0, [r4, #0]
 80004c0:	6800      	ldr	r0, [r0, #0]
 80004c2:	f003 f845 	bl	8003550 <ai_array_to_buffer_fmt>
 80004c6:	f856 1c04 	ldr.w	r1, [r6, #-4]
 80004ca:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 80004ce:	f021 417e 	bic.w	r1, r1, #4261412864	; 0xfe000000
 80004d2:	4288      	cmp	r0, r1
 80004d4:	d115      	bne.n	8000502 <_platform_network_io_bind+0x1ae>
 80004d6:	68f0      	ldr	r0, [r6, #12]
 80004d8:	2800      	cmp	r0, #0
 80004da:	d02f      	beq.n	800053c <_platform_network_io_bind+0x1e8>
 80004dc:	8830      	ldrh	r0, [r6, #0]
 80004de:	b198      	cbz	r0, 8000508 <_platform_network_io_bind+0x1b4>
 80004e0:	4550      	cmp	r0, sl
 80004e2:	bf28      	it	cs
 80004e4:	4682      	movcs	sl, r0
 80004e6:	4622      	mov	r2, r4
 80004e8:	1f31      	subs	r1, r6, #4
 80004ea:	4640      	mov	r0, r8
 80004ec:	f7ff fea5 	bl	800023a <_platform_network_state_setup>
 80004f0:	9800      	ldr	r0, [sp, #0]
 80004f2:	6801      	ldr	r1, [r0, #0]
 80004f4:	594c      	ldr	r4, [r1, r5]
 80004f6:	1c7f      	adds	r7, r7, #1
 80004f8:	3614      	adds	r6, #20
 80004fa:	f109 0910 	add.w	r9, r9, #16
 80004fe:	1d2d      	adds	r5, r5, #4
 8000500:	e7b2      	b.n	8000468 <_platform_network_io_bind+0x114>
 8000502:	2219      	movs	r2, #25
 8000504:	2113      	movs	r1, #19
 8000506:	e00a      	b.n	800051e <_platform_network_io_bind+0x1ca>
 8000508:	2221      	movs	r2, #33	; 0x21
 800050a:	2113      	movs	r1, #19
 800050c:	e007      	b.n	800051e <_platform_network_io_bind+0x1ca>
 800050e:	9802      	ldr	r0, [sp, #8]
 8000510:	2800      	cmp	r0, #0
 8000512:	d19c      	bne.n	800044e <_platform_network_io_bind+0xfa>
 8000514:	e00e      	b.n	8000534 <_platform_network_io_bind+0x1e0>
 8000516:	2217      	movs	r2, #23
 8000518:	e000      	b.n	800051c <_platform_network_io_bind+0x1c8>
 800051a:	2218      	movs	r2, #24
 800051c:	2112      	movs	r1, #18
 800051e:	9801      	ldr	r0, [sp, #4]
 8000520:	300c      	adds	r0, #12
 8000522:	f000 fa8e 	bl	8000a42 <core_set_error>
 8000526:	2000      	movs	r0, #0
 8000528:	b004      	add	sp, #16
 800052a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052e:	9801      	ldr	r0, [sp, #4]
 8000530:	f8a0 a010 	strh.w	sl, [r0, #16]
 8000534:	2001      	movs	r0, #1
 8000536:	b004      	add	sp, #16
 8000538:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053c:	2217      	movs	r2, #23
 800053e:	2113      	movs	r1, #19
 8000540:	e7ed      	b.n	800051e <_platform_network_io_bind+0x1ca>
 8000542:	2218      	movs	r2, #24
 8000544:	2113      	movs	r1, #19
 8000546:	e7ea      	b.n	800051e <_platform_network_io_bind+0x1ca>

08000548 <ai_platform_runtime_get_revision>:
 8000548:	f8df 04a8 	ldr.w	r0, [pc, #1192]	; 80009f4 <.text_21>
 800054c:	6801      	ldr	r1, [r0, #0]
 800054e:	0849      	lsrs	r1, r1, #1
 8000550:	0049      	lsls	r1, r1, #1
 8000552:	6001      	str	r1, [r0, #0]
 8000554:	2001      	movs	r0, #1
 8000556:	f8df 14a0 	ldr.w	r1, [pc, #1184]	; 80009f8 <.text_22>
 800055a:	6088      	str	r0, [r1, #8]
 800055c:	6888      	ldr	r0, [r1, #8]
 800055e:	2800      	cmp	r0, #0
 8000560:	d1fc      	bne.n	800055c <ai_platform_runtime_get_revision+0x14>
 8000562:	f8df 2498 	ldr.w	r2, [pc, #1176]	; 80009fc <.text_23>
 8000566:	600a      	str	r2, [r1, #0]
 8000568:	6808      	ldr	r0, [r1, #0]
 800056a:	f8df 1494 	ldr.w	r1, [pc, #1172]	; 8000a00 <.text_24>
 800056e:	4288      	cmp	r0, r1
 8000570:	d000      	beq.n	8000574 <ai_platform_runtime_get_revision+0x2c>
 8000572:	e7fe      	b.n	8000572 <ai_platform_runtime_get_revision+0x2a>
 8000574:	a0aa      	add	r0, pc, #680	; (adr r0, 8000820 <.text_16>)
 8000576:	4770      	bx	lr

08000578 <ai_platform_runtime_get_version>:
 8000578:	f8df 0478 	ldr.w	r0, [pc, #1144]	; 80009f4 <.text_21>
 800057c:	6801      	ldr	r1, [r0, #0]
 800057e:	0849      	lsrs	r1, r1, #1
 8000580:	0049      	lsls	r1, r1, #1
 8000582:	6001      	str	r1, [r0, #0]
 8000584:	2001      	movs	r0, #1
 8000586:	f8df 1470 	ldr.w	r1, [pc, #1136]	; 80009f8 <.text_22>
 800058a:	6088      	str	r0, [r1, #8]
 800058c:	6888      	ldr	r0, [r1, #8]
 800058e:	2800      	cmp	r0, #0
 8000590:	d1fc      	bne.n	800058c <ai_platform_runtime_get_version+0x14>
 8000592:	f8df 2468 	ldr.w	r2, [pc, #1128]	; 80009fc <.text_23>
 8000596:	600a      	str	r2, [r1, #0]
 8000598:	6808      	ldr	r0, [r1, #0]
 800059a:	f8df 1464 	ldr.w	r1, [pc, #1124]	; 8000a00 <.text_24>
 800059e:	4288      	cmp	r0, r1
 80005a0:	d000      	beq.n	80005a4 <ai_platform_runtime_get_version+0x2c>
 80005a2:	e7fe      	b.n	80005a2 <ai_platform_runtime_get_version+0x2a>
 80005a4:	f20f 4264 	addw	r2, pc, #1124	; 0x464
 80005a8:	6810      	ldr	r0, [r2, #0]
 80005aa:	4770      	bx	lr

080005ac <ai_platform_api_get_version>:
 80005ac:	f8df 0444 	ldr.w	r0, [pc, #1092]	; 80009f4 <.text_21>
 80005b0:	6801      	ldr	r1, [r0, #0]
 80005b2:	0849      	lsrs	r1, r1, #1
 80005b4:	0049      	lsls	r1, r1, #1
 80005b6:	6001      	str	r1, [r0, #0]
 80005b8:	2001      	movs	r0, #1
 80005ba:	f8df 143c 	ldr.w	r1, [pc, #1084]	; 80009f8 <.text_22>
 80005be:	6088      	str	r0, [r1, #8]
 80005c0:	6888      	ldr	r0, [r1, #8]
 80005c2:	2800      	cmp	r0, #0
 80005c4:	d1fc      	bne.n	80005c0 <ai_platform_api_get_version+0x14>
 80005c6:	f8df 2434 	ldr.w	r2, [pc, #1076]	; 80009fc <.text_23>
 80005ca:	600a      	str	r2, [r1, #0]
 80005cc:	6808      	ldr	r0, [r1, #0]
 80005ce:	f8df 1430 	ldr.w	r1, [pc, #1072]	; 8000a00 <.text_24>
 80005d2:	4288      	cmp	r0, r1
 80005d4:	d000      	beq.n	80005d8 <ai_platform_api_get_version+0x2c>
 80005d6:	e7fe      	b.n	80005d6 <ai_platform_api_get_version+0x2a>
 80005d8:	f20f 4234 	addw	r2, pc, #1076	; 0x434
 80005dc:	6810      	ldr	r0, [r2, #0]
 80005de:	4770      	bx	lr

080005e0 <ai_platform_interface_api_get_version>:
 80005e0:	f8df 0410 	ldr.w	r0, [pc, #1040]	; 80009f4 <.text_21>
 80005e4:	6801      	ldr	r1, [r0, #0]
 80005e6:	0849      	lsrs	r1, r1, #1
 80005e8:	0049      	lsls	r1, r1, #1
 80005ea:	6001      	str	r1, [r0, #0]
 80005ec:	2001      	movs	r0, #1
 80005ee:	f8df 1408 	ldr.w	r1, [pc, #1032]	; 80009f8 <.text_22>
 80005f2:	6088      	str	r0, [r1, #8]
 80005f4:	6888      	ldr	r0, [r1, #8]
 80005f6:	2800      	cmp	r0, #0
 80005f8:	d1fc      	bne.n	80005f4 <ai_platform_interface_api_get_version+0x14>
 80005fa:	f8df 2400 	ldr.w	r2, [pc, #1024]	; 80009fc <.text_23>
 80005fe:	600a      	str	r2, [r1, #0]
 8000600:	6808      	ldr	r0, [r1, #0]
 8000602:	f8df 13fc 	ldr.w	r1, [pc, #1020]	; 8000a00 <.text_24>
 8000606:	4288      	cmp	r0, r1
 8000608:	d000      	beq.n	800060c <ai_platform_interface_api_get_version+0x2c>
 800060a:	e7fe      	b.n	800060a <ai_platform_interface_api_get_version+0x2a>
 800060c:	f20f 4204 	addw	r2, pc, #1028	; 0x404
 8000610:	6810      	ldr	r0, [r2, #0]
 8000612:	4770      	bx	lr

08000614 <ai_platform_context_acquire>:
 8000614:	b120      	cbz	r0, 8000620 <ai_platform_context_acquire+0xc>
 8000616:	6801      	ldr	r1, [r0, #0]
 8000618:	f8df 23e8 	ldr.w	r2, [pc, #1000]	; 8000a04 <.text_25>
 800061c:	4291      	cmp	r1, r2
 800061e:	d000      	beq.n	8000622 <ai_platform_context_acquire+0xe>
 8000620:	2000      	movs	r0, #0
 8000622:	f8df 13d0 	ldr.w	r1, [pc, #976]	; 80009f4 <.text_21>
 8000626:	680a      	ldr	r2, [r1, #0]
 8000628:	0852      	lsrs	r2, r2, #1
 800062a:	0052      	lsls	r2, r2, #1
 800062c:	600a      	str	r2, [r1, #0]
 800062e:	2101      	movs	r1, #1
 8000630:	f8df 23c4 	ldr.w	r2, [pc, #964]	; 80009f8 <.text_22>
 8000634:	6091      	str	r1, [r2, #8]
 8000636:	6891      	ldr	r1, [r2, #8]
 8000638:	2900      	cmp	r1, #0
 800063a:	d1fc      	bne.n	8000636 <ai_platform_context_acquire+0x22>
 800063c:	f8df 33bc 	ldr.w	r3, [pc, #956]	; 80009fc <.text_23>
 8000640:	6013      	str	r3, [r2, #0]
 8000642:	6811      	ldr	r1, [r2, #0]
 8000644:	f8df 23b8 	ldr.w	r2, [pc, #952]	; 8000a00 <.text_24>
 8000648:	4291      	cmp	r1, r2
 800064a:	d000      	beq.n	800064e <ai_platform_context_acquire+0x3a>
 800064c:	e7fe      	b.n	800064c <ai_platform_context_acquire+0x38>
 800064e:	4770      	bx	lr

08000650 <ai_platform_context_release>:
 8000650:	f8df 13b0 	ldr.w	r1, [pc, #944]	; 8000a04 <.text_25>
 8000654:	6001      	str	r1, [r0, #0]
 8000656:	4770      	bx	lr

08000658 <ai_platform_network_get_error>:
 8000658:	b120      	cbz	r0, 8000664 <ai_platform_network_get_error+0xc>
 800065a:	6801      	ldr	r1, [r0, #0]
 800065c:	f8df 23a4 	ldr.w	r2, [pc, #932]	; 8000a04 <.text_25>
 8000660:	4291      	cmp	r1, r2
 8000662:	d000      	beq.n	8000666 <ai_platform_network_get_error+0xe>
 8000664:	2000      	movs	r0, #0
 8000666:	f8df 138c 	ldr.w	r1, [pc, #908]	; 80009f4 <.text_21>
 800066a:	680a      	ldr	r2, [r1, #0]
 800066c:	0852      	lsrs	r2, r2, #1
 800066e:	0052      	lsls	r2, r2, #1
 8000670:	600a      	str	r2, [r1, #0]
 8000672:	2101      	movs	r1, #1
 8000674:	f8df 2380 	ldr.w	r2, [pc, #896]	; 80009f8 <.text_22>
 8000678:	6091      	str	r1, [r2, #8]
 800067a:	6891      	ldr	r1, [r2, #8]
 800067c:	2900      	cmp	r1, #0
 800067e:	d1fc      	bne.n	800067a <ai_platform_network_get_error+0x22>
 8000680:	f8df 3378 	ldr.w	r3, [pc, #888]	; 80009fc <.text_23>
 8000684:	6013      	str	r3, [r2, #0]
 8000686:	6811      	ldr	r1, [r2, #0]
 8000688:	f8df 2374 	ldr.w	r2, [pc, #884]	; 8000a00 <.text_24>
 800068c:	4291      	cmp	r1, r2
 800068e:	d000      	beq.n	8000692 <ai_platform_network_get_error+0x3a>
 8000690:	e7fe      	b.n	8000690 <ai_platform_network_get_error+0x38>
 8000692:	2800      	cmp	r0, #0
 8000694:	bf1c      	itt	ne
 8000696:	300c      	addne	r0, #12
 8000698:	f000 b9ce 	bne.w	8000a38 <core_get_error>
 800069c:	f20f 3088 	addw	r0, pc, #904	; 0x388
 80006a0:	6800      	ldr	r0, [r0, #0]
 80006a2:	4770      	bx	lr

080006a4 <ai_platform_network_set_error>:
 80006a4:	2800      	cmp	r0, #0
 80006a6:	bf1c      	itt	ne
 80006a8:	300c      	addne	r0, #12
 80006aa:	f000 b9ca 	bne.w	8000a42 <core_set_error>
 80006ae:	4770      	bx	lr

080006b0 <ai_platform_api_get_network_report>:
 80006b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80006b4:	ea5f 0900 	movs.w	r9, r0
 80006b8:	b081      	sub	sp, #4
 80006ba:	460c      	mov	r4, r1
 80006bc:	d005      	beq.n	80006ca <ai_platform_api_get_network_report+0x1a>
 80006be:	f8d9 0000 	ldr.w	r0, [r9]
 80006c2:	f8df 1340 	ldr.w	r1, [pc, #832]	; 8000a04 <.text_25>
 80006c6:	4288      	cmp	r0, r1
 80006c8:	d001      	beq.n	80006ce <ai_platform_api_get_network_report+0x1e>
 80006ca:	f04f 0900 	mov.w	r9, #0
 80006ce:	f8df 5324 	ldr.w	r5, [pc, #804]	; 80009f4 <.text_21>
 80006d2:	f8df 6324 	ldr.w	r6, [pc, #804]	; 80009f8 <.text_22>
 80006d6:	6828      	ldr	r0, [r5, #0]
 80006d8:	0840      	lsrs	r0, r0, #1
 80006da:	0040      	lsls	r0, r0, #1
 80006dc:	6028      	str	r0, [r5, #0]
 80006de:	2101      	movs	r1, #1
 80006e0:	60b1      	str	r1, [r6, #8]
 80006e2:	68b0      	ldr	r0, [r6, #8]
 80006e4:	2800      	cmp	r0, #0
 80006e6:	d1fc      	bne.n	80006e2 <ai_platform_api_get_network_report+0x32>
 80006e8:	f8df 7310 	ldr.w	r7, [pc, #784]	; 80009fc <.text_23>
 80006ec:	f8df 8310 	ldr.w	r8, [pc, #784]	; 8000a00 <.text_24>
 80006f0:	6037      	str	r7, [r6, #0]
 80006f2:	6830      	ldr	r0, [r6, #0]
 80006f4:	4540      	cmp	r0, r8
 80006f6:	d000      	beq.n	80006fa <ai_platform_api_get_network_report+0x4a>
 80006f8:	e7fe      	b.n	80006f8 <ai_platform_api_get_network_report+0x48>
 80006fa:	f1b9 0f00 	cmp.w	r9, #0
 80006fe:	bf18      	it	ne
 8000700:	2c00      	cmpne	r4, #0
 8000702:	f000 8088 	beq.w	8000816 <ai_platform_api_get_network_report+0x166>
 8000706:	2000      	movs	r0, #0
 8000708:	6660      	str	r0, [r4, #100]	; 0x64
 800070a:	f8d9 2044 	ldr.w	r2, [r9, #68]	; 0x44
 800070e:	2a00      	cmp	r2, #0
 8000710:	f000 807b 	beq.w	800080a <ai_platform_api_get_network_report+0x15a>
 8000714:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8000716:	1c49      	adds	r1, r1, #1
 8000718:	6661      	str	r1, [r4, #100]	; 0x64
 800071a:	6890      	ldr	r0, [r2, #8]
 800071c:	4282      	cmp	r2, r0
 800071e:	bf1c      	itt	ne
 8000720:	2800      	cmpne	r0, #0
 8000722:	4602      	movne	r2, r0
 8000724:	d1f6      	bne.n	8000714 <ai_platform_api_get_network_report+0x64>
 8000726:	e06e      	b.n	8000806 <ai_platform_api_get_network_report+0x156>
 8000728:	f8d9 003c 	ldr.w	r0, [r9, #60]	; 0x3c
 800072c:	f104 0134 	add.w	r1, r4, #52	; 0x34
 8000730:	f7ff fd4a 	bl	80001c8 <_ai_platform_get_io_buffers>
 8000734:	8620      	strh	r0, [r4, #48]	; 0x30
 8000736:	b910      	cbnz	r0, 800073e <ai_platform_api_get_network_report+0x8e>
 8000738:	2218      	movs	r2, #24
 800073a:	2112      	movs	r1, #18
 800073c:	e067      	b.n	800080e <ai_platform_api_get_network_report+0x15e>
 800073e:	f8d9 003c 	ldr.w	r0, [r9, #60]	; 0x3c
 8000742:	f104 0138 	add.w	r1, r4, #56	; 0x38
 8000746:	300c      	adds	r0, #12
 8000748:	f7ff fd3e 	bl	80001c8 <_ai_platform_get_io_buffers>
 800074c:	8660      	strh	r0, [r4, #50]	; 0x32
 800074e:	b910      	cbnz	r0, 8000756 <ai_platform_api_get_network_report+0xa6>
 8000750:	2218      	movs	r2, #24
 8000752:	2113      	movs	r1, #19
 8000754:	e05b      	b.n	800080e <ai_platform_api_get_network_report+0x15e>
 8000756:	f8d9 0004 	ldr.w	r0, [r9, #4]
 800075a:	66a0      	str	r0, [r4, #104]	; 0x68
 800075c:	f109 0228 	add.w	r2, r9, #40	; 0x28
 8000760:	e892 5c08 	ldmia.w	r2, {r3, sl, fp, ip, lr}
 8000764:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 8000768:	f109 0914 	add.w	r9, r9, #20
 800076c:	e881 5c08 	stmia.w	r1, {r3, sl, fp, ip, lr}
 8000770:	e899 500e 	ldmia.w	r9, {r1, r2, r3, ip, lr}
 8000774:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8000778:	e880 500e 	stmia.w	r0, {r1, r2, r3, ip, lr}
 800077c:	6828      	ldr	r0, [r5, #0]
 800077e:	0840      	lsrs	r0, r0, #1
 8000780:	0040      	lsls	r0, r0, #1
 8000782:	6028      	str	r0, [r5, #0]
 8000784:	2301      	movs	r3, #1
 8000786:	60b3      	str	r3, [r6, #8]
 8000788:	68b0      	ldr	r0, [r6, #8]
 800078a:	2800      	cmp	r0, #0
 800078c:	d1fc      	bne.n	8000788 <ai_platform_api_get_network_report+0xd8>
 800078e:	6037      	str	r7, [r6, #0]
 8000790:	6831      	ldr	r1, [r6, #0]
 8000792:	4541      	cmp	r1, r8
 8000794:	d000      	beq.n	8000798 <ai_platform_api_get_network_report+0xe8>
 8000796:	e7fe      	b.n	8000796 <ai_platform_api_get_network_report+0xe6>
 8000798:	a021      	add	r0, pc, #132	; (adr r0, 8000820 <.text_16>)
 800079a:	6120      	str	r0, [r4, #16]
 800079c:	6829      	ldr	r1, [r5, #0]
 800079e:	0849      	lsrs	r1, r1, #1
 80007a0:	0049      	lsls	r1, r1, #1
 80007a2:	6029      	str	r1, [r5, #0]
 80007a4:	60b3      	str	r3, [r6, #8]
 80007a6:	68b0      	ldr	r0, [r6, #8]
 80007a8:	2800      	cmp	r0, #0
 80007aa:	d1fc      	bne.n	80007a6 <ai_platform_api_get_network_report+0xf6>
 80007ac:	6037      	str	r7, [r6, #0]
 80007ae:	6831      	ldr	r1, [r6, #0]
 80007b0:	4541      	cmp	r1, r8
 80007b2:	d000      	beq.n	80007b6 <ai_platform_api_get_network_report+0x106>
 80007b4:	e7fe      	b.n	80007b4 <ai_platform_api_get_network_report+0x104>
 80007b6:	f20f 2054 	addw	r0, pc, #596	; 0x254
 80007ba:	6802      	ldr	r2, [r0, #0]
 80007bc:	6162      	str	r2, [r4, #20]
 80007be:	6829      	ldr	r1, [r5, #0]
 80007c0:	0849      	lsrs	r1, r1, #1
 80007c2:	0049      	lsls	r1, r1, #1
 80007c4:	6029      	str	r1, [r5, #0]
 80007c6:	60b3      	str	r3, [r6, #8]
 80007c8:	68b0      	ldr	r0, [r6, #8]
 80007ca:	2800      	cmp	r0, #0
 80007cc:	d1fc      	bne.n	80007c8 <ai_platform_api_get_network_report+0x118>
 80007ce:	6037      	str	r7, [r6, #0]
 80007d0:	6831      	ldr	r1, [r6, #0]
 80007d2:	4541      	cmp	r1, r8
 80007d4:	d000      	beq.n	80007d8 <ai_platform_api_get_network_report+0x128>
 80007d6:	e7fe      	b.n	80007d6 <ai_platform_api_get_network_report+0x126>
 80007d8:	a08d      	add	r0, pc, #564	; (adr r0, 8000a10 <.text_28>)
 80007da:	6802      	ldr	r2, [r0, #0]
 80007dc:	6262      	str	r2, [r4, #36]	; 0x24
 80007de:	6829      	ldr	r1, [r5, #0]
 80007e0:	0849      	lsrs	r1, r1, #1
 80007e2:	0049      	lsls	r1, r1, #1
 80007e4:	6029      	str	r1, [r5, #0]
 80007e6:	60b3      	str	r3, [r6, #8]
 80007e8:	68b0      	ldr	r0, [r6, #8]
 80007ea:	2800      	cmp	r0, #0
 80007ec:	d1fc      	bne.n	80007e8 <ai_platform_api_get_network_report+0x138>
 80007ee:	6037      	str	r7, [r6, #0]
 80007f0:	6831      	ldr	r1, [r6, #0]
 80007f2:	4541      	cmp	r1, r8
 80007f4:	d000      	beq.n	80007f8 <ai_platform_api_get_network_report+0x148>
 80007f6:	e7fe      	b.n	80007f6 <ai_platform_api_get_network_report+0x146>
 80007f8:	a086      	add	r0, pc, #536	; (adr r0, 8000a14 <.text_29>)
 80007fa:	6802      	ldr	r2, [r0, #0]
 80007fc:	62a2      	str	r2, [r4, #40]	; 0x28
 80007fe:	2001      	movs	r0, #1
 8000800:	b001      	add	sp, #4
 8000802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000806:	2900      	cmp	r1, #0
 8000808:	d18e      	bne.n	8000728 <ai_platform_api_get_network_report+0x78>
 800080a:	2218      	movs	r2, #24
 800080c:	2111      	movs	r1, #17
 800080e:	f109 000c 	add.w	r0, r9, #12
 8000812:	f000 f916 	bl	8000a42 <core_set_error>
 8000816:	2000      	movs	r0, #0
 8000818:	b001      	add	sp, #4
 800081a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08000820 <.text_16>:
 8000820:	00000000 	.word	0x00000000

08000824 <ai_platform_network_create>:
 8000824:	b570      	push	{r4, r5, r6, lr}
 8000826:	9d04      	ldr	r5, [sp, #16]
 8000828:	4604      	mov	r4, r0
 800082a:	9805      	ldr	r0, [sp, #20]
 800082c:	b2db      	uxtb	r3, r3
 800082e:	042d      	lsls	r5, r5, #16
 8000830:	ea45 6503 	orr.w	r5, r5, r3, lsl #24
 8000834:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
 8000838:	a07c      	add	r0, pc, #496	; (adr r0, 8000a2c <.text_35>)
 800083a:	6806      	ldr	r6, [r0, #0]
 800083c:	486d      	ldr	r0, [pc, #436]	; (80009f4 <.text_21>)
 800083e:	6801      	ldr	r1, [r0, #0]
 8000840:	0849      	lsrs	r1, r1, #1
 8000842:	0049      	lsls	r1, r1, #1
 8000844:	6001      	str	r1, [r0, #0]
 8000846:	2001      	movs	r0, #1
 8000848:	496b      	ldr	r1, [pc, #428]	; (80009f8 <.text_22>)
 800084a:	6088      	str	r0, [r1, #8]
 800084c:	6888      	ldr	r0, [r1, #8]
 800084e:	2800      	cmp	r0, #0
 8000850:	d1fc      	bne.n	800084c <ai_platform_network_create+0x28>
 8000852:	4b6a      	ldr	r3, [pc, #424]	; (80009fc <.text_23>)
 8000854:	600b      	str	r3, [r1, #0]
 8000856:	6808      	ldr	r0, [r1, #0]
 8000858:	4969      	ldr	r1, [pc, #420]	; (8000a00 <.text_24>)
 800085a:	4288      	cmp	r0, r1
 800085c:	d000      	beq.n	8000860 <ai_platform_network_create+0x3c>
 800085e:	e7fe      	b.n	800085e <ai_platform_network_create+0x3a>
 8000860:	b91c      	cbnz	r4, 800086a <ai_platform_network_create+0x46>
 8000862:	bf00      	nop
 8000864:	a072      	add	r0, pc, #456	; (adr r0, 8000a30 <.text_36>)
 8000866:	6800      	ldr	r0, [r0, #0]
 8000868:	bd70      	pop	{r4, r5, r6, pc}
 800086a:	4966      	ldr	r1, [pc, #408]	; (8000a04 <.text_25>)
 800086c:	6011      	str	r1, [r2, #0]
 800086e:	f8c4 2000 	str.w	r2, [r4]
 8000872:	f000 f8df 	bl	8000a34 <core_init>
 8000876:	b908      	cbnz	r0, 800087c <ai_platform_network_create+0x58>
 8000878:	a067      	add	r0, pc, #412	; (adr r0, 8000a18 <.text_30>)
 800087a:	e00a      	b.n	8000892 <ai_platform_network_create+0x6e>
 800087c:	4962      	ldr	r1, [pc, #392]	; (8000a08 <.text_26>)
 800087e:	428d      	cmp	r5, r1
 8000880:	bf28      	it	cs
 8000882:	f20f 1098 	addwcs	r0, pc, #408	; 0x198
 8000886:	d204      	bcs.n	8000892 <ai_platform_network_create+0x6e>
 8000888:	a065      	add	r0, pc, #404	; (adr r0, 8000a20 <_platform_network_sanity_check{5}::signatures>)
 800088a:	f000 f8ef 	bl	8000a6c <ai_check_custom_types>
 800088e:	b918      	cbnz	r0, 8000898 <ai_platform_network_create+0x74>
 8000890:	a064      	add	r0, pc, #400	; (adr r0, 8000a24 <.text_33>)
 8000892:	6806      	ldr	r6, [r0, #0]
 8000894:	2100      	movs	r1, #0
 8000896:	6021      	str	r1, [r4, #0]
 8000898:	4630      	mov	r0, r6
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <ai_platform_network_destroy>:
 800089c:	b128      	cbz	r0, 80008aa <ai_platform_network_destroy+0xe>
 800089e:	6801      	ldr	r1, [r0, #0]
 80008a0:	4a58      	ldr	r2, [pc, #352]	; (8000a04 <.text_25>)
 80008a2:	4291      	cmp	r1, r2
 80008a4:	bf08      	it	eq
 80008a6:	4602      	moveq	r2, r0
 80008a8:	d000      	beq.n	80008ac <ai_platform_network_destroy+0x10>
 80008aa:	2200      	movs	r2, #0
 80008ac:	4951      	ldr	r1, [pc, #324]	; (80009f4 <.text_21>)
 80008ae:	680b      	ldr	r3, [r1, #0]
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	005b      	lsls	r3, r3, #1
 80008b4:	600b      	str	r3, [r1, #0]
 80008b6:	2101      	movs	r1, #1
 80008b8:	4b4f      	ldr	r3, [pc, #316]	; (80009f8 <.text_22>)
 80008ba:	6099      	str	r1, [r3, #8]
 80008bc:	6899      	ldr	r1, [r3, #8]
 80008be:	2900      	cmp	r1, #0
 80008c0:	d1fc      	bne.n	80008bc <ai_platform_network_destroy+0x20>
 80008c2:	f8df c138 	ldr.w	ip, [pc, #312]	; 80009fc <.text_23>
 80008c6:	f8c3 c000 	str.w	ip, [r3]
 80008ca:	6819      	ldr	r1, [r3, #0]
 80008cc:	4b4c      	ldr	r3, [pc, #304]	; (8000a00 <.text_24>)
 80008ce:	4299      	cmp	r1, r3
 80008d0:	d000      	beq.n	80008d4 <ai_platform_network_destroy+0x38>
 80008d2:	e7fe      	b.n	80008d2 <ai_platform_network_destroy+0x36>
 80008d4:	b102      	cbz	r2, 80008d8 <ai_platform_network_destroy+0x3c>
 80008d6:	2000      	movs	r0, #0
 80008d8:	4770      	bx	lr

080008da <ai_platform_network_init>:
 80008da:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80008de:	b081      	sub	sp, #4
 80008e0:	460a      	mov	r2, r1
 80008e2:	b118      	cbz	r0, 80008ec <ai_platform_network_init+0x12>
 80008e4:	6801      	ldr	r1, [r0, #0]
 80008e6:	4b47      	ldr	r3, [pc, #284]	; (8000a04 <.text_25>)
 80008e8:	4299      	cmp	r1, r3
 80008ea:	d000      	beq.n	80008ee <ai_platform_network_init+0x14>
 80008ec:	2000      	movs	r0, #0
 80008ee:	4941      	ldr	r1, [pc, #260]	; (80009f4 <.text_21>)
 80008f0:	680b      	ldr	r3, [r1, #0]
 80008f2:	085b      	lsrs	r3, r3, #1
 80008f4:	005b      	lsls	r3, r3, #1
 80008f6:	600b      	str	r3, [r1, #0]
 80008f8:	2101      	movs	r1, #1
 80008fa:	4b3f      	ldr	r3, [pc, #252]	; (80009f8 <.text_22>)
 80008fc:	6099      	str	r1, [r3, #8]
 80008fe:	6899      	ldr	r1, [r3, #8]
 8000900:	2900      	cmp	r1, #0
 8000902:	d1fc      	bne.n	80008fe <ai_platform_network_init+0x24>
 8000904:	4c3d      	ldr	r4, [pc, #244]	; (80009fc <.text_23>)
 8000906:	601c      	str	r4, [r3, #0]
 8000908:	6819      	ldr	r1, [r3, #0]
 800090a:	4b3d      	ldr	r3, [pc, #244]	; (8000a00 <.text_24>)
 800090c:	4299      	cmp	r1, r3
 800090e:	d000      	beq.n	8000912 <ai_platform_network_init+0x38>
 8000910:	e7fe      	b.n	8000910 <ai_platform_network_init+0x36>
 8000912:	2800      	cmp	r0, #0
 8000914:	d034      	beq.n	8000980 <ai_platform_network_init+0xa6>
 8000916:	b90a      	cbnz	r2, 800091c <ai_platform_network_init+0x42>
 8000918:	2211      	movs	r2, #17
 800091a:	e012      	b.n	8000942 <ai_platform_network_init+0x68>
 800091c:	6913      	ldr	r3, [r2, #16]
 800091e:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8000920:	b939      	cbnz	r1, 8000932 <ai_platform_network_init+0x58>
 8000922:	8b91      	ldrh	r1, [r2, #28]
 8000924:	8b55      	ldrh	r5, [r2, #26]
 8000926:	6a14      	ldr	r4, [r2, #32]
 8000928:	4369      	muls	r1, r5
 800092a:	4361      	muls	r1, r4
 800092c:	bf18      	it	ne
 800092e:	2213      	movne	r2, #19
 8000930:	d107      	bne.n	8000942 <ai_platform_network_init+0x68>
 8000932:	b973      	cbnz	r3, 8000952 <ai_platform_network_init+0x78>
 8000934:	8911      	ldrh	r1, [r2, #8]
 8000936:	88d4      	ldrh	r4, [r2, #6]
 8000938:	68d3      	ldr	r3, [r2, #12]
 800093a:	4361      	muls	r1, r4
 800093c:	4359      	muls	r1, r3
 800093e:	d008      	beq.n	8000952 <ai_platform_network_init+0x78>
 8000940:	2212      	movs	r2, #18
 8000942:	2110      	movs	r1, #16
 8000944:	300c      	adds	r0, #12
 8000946:	f000 f87c 	bl	8000a42 <core_set_error>
 800094a:	2000      	movs	r0, #0
 800094c:	b001      	add	sp, #4
 800094e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000952:	caf8      	ldmia	r2!, {r3, r4, r5, r6, r7}
 8000954:	f100 0114 	add.w	r1, r0, #20
 8000958:	f100 0c28 	add.w	ip, r0, #40	; 0x28
 800095c:	e881 00f8 	stmia.w	r1, {r3, r4, r5, r6, r7}
 8000960:	e892 4f00 	ldmia.w	r2, {r8, r9, sl, fp, lr}
 8000964:	e88c 4f00 	stmia.w	ip, {r8, r9, sl, fp, lr}
 8000968:	2103      	movs	r1, #3
 800096a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800096c:	6081      	str	r1, [r0, #8]
 800096e:	b13a      	cbz	r2, 8000980 <ai_platform_network_init+0xa6>
 8000970:	6891      	ldr	r1, [r2, #8]
 8000972:	6050      	str	r0, [r2, #4]
 8000974:	428a      	cmp	r2, r1
 8000976:	bf18      	it	ne
 8000978:	2900      	cmpne	r1, #0
 800097a:	bf18      	it	ne
 800097c:	460a      	movne	r2, r1
 800097e:	d1f7      	bne.n	8000970 <ai_platform_network_init+0x96>
 8000980:	b001      	add	sp, #4
 8000982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000986 <ai_platform_network_process>:
 8000986:	b570      	push	{r4, r5, r6, lr}
 8000988:	0004      	movs	r4, r0
 800098a:	d003      	beq.n	8000994 <ai_platform_network_process+0xe>
 800098c:	6820      	ldr	r0, [r4, #0]
 800098e:	4b1d      	ldr	r3, [pc, #116]	; (8000a04 <.text_25>)
 8000990:	4298      	cmp	r0, r3
 8000992:	d000      	beq.n	8000996 <ai_platform_network_process+0x10>
 8000994:	2400      	movs	r4, #0
 8000996:	4817      	ldr	r0, [pc, #92]	; (80009f4 <.text_21>)
 8000998:	6803      	ldr	r3, [r0, #0]
 800099a:	085b      	lsrs	r3, r3, #1
 800099c:	005b      	lsls	r3, r3, #1
 800099e:	6003      	str	r3, [r0, #0]
 80009a0:	2001      	movs	r0, #1
 80009a2:	4b15      	ldr	r3, [pc, #84]	; (80009f8 <.text_22>)
 80009a4:	6098      	str	r0, [r3, #8]
 80009a6:	6898      	ldr	r0, [r3, #8]
 80009a8:	2800      	cmp	r0, #0
 80009aa:	d1fc      	bne.n	80009a6 <ai_platform_network_process+0x20>
 80009ac:	4d13      	ldr	r5, [pc, #76]	; (80009fc <.text_23>)
 80009ae:	601d      	str	r5, [r3, #0]
 80009b0:	6818      	ldr	r0, [r3, #0]
 80009b2:	4b13      	ldr	r3, [pc, #76]	; (8000a00 <.text_24>)
 80009b4:	4298      	cmp	r0, r3
 80009b6:	d000      	beq.n	80009ba <ai_platform_network_process+0x34>
 80009b8:	e7fe      	b.n	80009b8 <ai_platform_network_process+0x32>
 80009ba:	4620      	mov	r0, r4
 80009bc:	f7ff fcca 	bl	8000354 <_platform_network_io_bind>
 80009c0:	b1b8      	cbz	r0, 80009f2 <ai_platform_network_process+0x6c>
 80009c2:	8a60      	ldrh	r0, [r4, #18]
 80009c4:	8a21      	ldrh	r1, [r4, #16]
 80009c6:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 80009c8:	4288      	cmp	r0, r1
 80009ca:	f105 060c 	add.w	r6, r5, #12
 80009ce:	d20f      	bcs.n	80009f0 <ai_platform_network_process+0x6a>
 80009d0:	4628      	mov	r0, r5
 80009d2:	f7ff fc4d 	bl	8000270 <_platform_network_state_update_input>
 80009d6:	4620      	mov	r0, r4
 80009d8:	f000 f8f2 	bl	8000bc0 <ai_layers_forward_all>
 80009dc:	4630      	mov	r0, r6
 80009de:	f7ff fc7b 	bl	80002d8 <_platform_network_state_update_output>
 80009e2:	8a60      	ldrh	r0, [r4, #18]
 80009e4:	8a21      	ldrh	r1, [r4, #16]
 80009e6:	1c40      	adds	r0, r0, #1
 80009e8:	8260      	strh	r0, [r4, #18]
 80009ea:	b280      	uxth	r0, r0
 80009ec:	4288      	cmp	r0, r1
 80009ee:	d3ef      	bcc.n	80009d0 <ai_platform_network_process+0x4a>
 80009f0:	8a60      	ldrh	r0, [r4, #18]
 80009f2:	bd70      	pop	{r4, r5, r6, pc}

080009f4 <.text_21>:
 80009f4:	e0002000 	.word	0xe0002000

080009f8 <.text_22>:
 80009f8:	40023000 	.word	0x40023000

080009fc <.text_23>:
 80009fc:	f407a5c2 	.word	0xf407a5c2

08000a00 <.text_24>:
 8000a00:	b5e8b5cd 	.word	0xb5e8b5cd

08000a04 <.text_25>:
 8000a04:	a1c00100 	.word	0xa1c00100

08000a08 <.text_26>:
 8000a08:	01030001 	.word	0x01030001

08000a0c <.text_27>:
 8000a0c:	00000004 	.word	0x00000004

08000a10 <.text_28>:
 8000a10:	00000101 	.word	0x00000101

08000a14 <.text_29>:
 8000a14:	00000301 	.word	0x00000301

08000a18 <.text_30>:
 8000a18:	00001030 	.word	0x00001030

08000a1c <.text_31>:
 8000a1c:	00001001 	.word	0x00001001

08000a20 <_platform_network_sanity_check{5}::signatures>:
 8000a20:	84048403                                ....

08000a24 <.text_33>:
 8000a24:	00001002 	.word	0x00001002

08000a28 <.text_34>:
 8000a28:	00001010 	.word	0x00001010

08000a2c <.text_35>:
 8000a2c:	00000000 	.word	0x00000000

08000a30 <.text_36>:
 8000a30:	00001010 	.word	0x00001010

08000a34 <core_init>:
 8000a34:	2001      	movs	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <core_get_error>:
 8000a38:	4601      	mov	r1, r0
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	6808      	ldr	r0, [r1, #0]
 8000a3e:	600a      	str	r2, [r1, #0]
 8000a40:	4770      	bx	lr

08000a42 <core_set_error>:
 8000a42:	7803      	ldrb	r3, [r0, #0]
 8000a44:	ea5f 6c03 	movs.w	ip, r3, lsl #24
 8000a48:	d104      	bne.n	8000a54 <core_set_error+0x12>
 8000a4a:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 8000a4e:	6001      	str	r1, [r0, #0]
 8000a50:	2001      	movs	r0, #1
 8000a52:	4770      	bx	lr
 8000a54:	2000      	movs	r0, #0
 8000a56:	4770      	bx	lr

08000a58 <ai_layers_forward_layer>:
 8000a58:	b510      	push	{r4, lr}
 8000a5a:	4604      	mov	r4, r0
 8000a5c:	68e1      	ldr	r1, [r4, #12]
 8000a5e:	4788      	blx	r1
 8000a60:	68a0      	ldr	r0, [r4, #8]
 8000a62:	42a0      	cmp	r0, r4
 8000a64:	bf08      	it	eq
 8000a66:	2000      	moveq	r0, #0
 8000a68:	bd10      	pop	{r4, pc}
	...

08000a6c <ai_check_custom_types>:
 8000a6c:	b500      	push	{lr}
 8000a6e:	b081      	sub	sp, #4
 8000a70:	b160      	cbz	r0, 8000a8c <ai_check_custom_types+0x20>
 8000a72:	7801      	ldrb	r1, [r0, #0]
 8000a74:	2903      	cmp	r1, #3
 8000a76:	d109      	bne.n	8000a8c <ai_check_custom_types+0x20>
 8000a78:	f05f 0204 	movs.w	r2, #4
 8000a7c:	a18c      	add	r1, pc, #560	; (adr r1, 8000cb0 <ai_check_custom_types::ref_signatures>)
 8000a7e:	f009 f8bb 	bl	8009bf8 <memcmp>
 8000a82:	1e40      	subs	r0, r0, #1
 8000a84:	4180      	sbcs	r0, r0
 8000a86:	0fc0      	lsrs	r0, r0, #31
 8000a88:	b001      	add	sp, #4
 8000a8a:	bd00      	pop	{pc}
 8000a8c:	2000      	movs	r0, #0
 8000a8e:	b001      	add	sp, #4
 8000a90:	bd00      	pop	{pc}
	...

08000a94 <ai_layer_type_name>:
 8000a94:	f242 7211 	movw	r2, #10001	; 0x2711
 8000a98:	1a81      	subs	r1, r0, r2
 8000a9a:	2901      	cmp	r1, #1
 8000a9c:	bf81      	itttt	hi
 8000a9e:	1ec9      	subhi	r1, r1, #3
 8000aa0:	290d      	cmphi	r1, #13
 8000aa2:	390f      	subhi	r1, #15
 8000aa4:	2909      	cmphi	r1, #9
 8000aa6:	f200 806b 	bhi.w	8000b80 <ai_layer_type_name+0xec>
 8000aaa:	1a80      	subs	r0, r0, r2
 8000aac:	d033      	beq.n	8000b16 <ai_layer_type_name+0x82>
 8000aae:	1e40      	subs	r0, r0, #1
 8000ab0:	d033      	beq.n	8000b1a <ai_layer_type_name+0x86>
 8000ab2:	1e80      	subs	r0, r0, #2
 8000ab4:	d033      	beq.n	8000b1e <ai_layer_type_name+0x8a>
 8000ab6:	1e40      	subs	r0, r0, #1
 8000ab8:	d034      	beq.n	8000b24 <ai_layer_type_name+0x90>
 8000aba:	1e40      	subs	r0, r0, #1
 8000abc:	d034      	beq.n	8000b28 <ai_layer_type_name+0x94>
 8000abe:	1e40      	subs	r0, r0, #1
 8000ac0:	d034      	beq.n	8000b2c <ai_layer_type_name+0x98>
 8000ac2:	1e40      	subs	r0, r0, #1
 8000ac4:	d034      	beq.n	8000b30 <ai_layer_type_name+0x9c>
 8000ac6:	1e40      	subs	r0, r0, #1
 8000ac8:	d034      	beq.n	8000b34 <ai_layer_type_name+0xa0>
 8000aca:	1e40      	subs	r0, r0, #1
 8000acc:	d034      	beq.n	8000b38 <ai_layer_type_name+0xa4>
 8000ace:	1e40      	subs	r0, r0, #1
 8000ad0:	d034      	beq.n	8000b3c <ai_layer_type_name+0xa8>
 8000ad2:	1e40      	subs	r0, r0, #1
 8000ad4:	d034      	beq.n	8000b40 <ai_layer_type_name+0xac>
 8000ad6:	1e40      	subs	r0, r0, #1
 8000ad8:	d034      	beq.n	8000b44 <ai_layer_type_name+0xb0>
 8000ada:	1e40      	subs	r0, r0, #1
 8000adc:	d034      	beq.n	8000b48 <ai_layer_type_name+0xb4>
 8000ade:	1e40      	subs	r0, r0, #1
 8000ae0:	d034      	beq.n	8000b4c <ai_layer_type_name+0xb8>
 8000ae2:	1e40      	subs	r0, r0, #1
 8000ae4:	d034      	beq.n	8000b50 <ai_layer_type_name+0xbc>
 8000ae6:	1e40      	subs	r0, r0, #1
 8000ae8:	d034      	beq.n	8000b54 <ai_layer_type_name+0xc0>
 8000aea:	1e80      	subs	r0, r0, #2
 8000aec:	d034      	beq.n	8000b58 <ai_layer_type_name+0xc4>
 8000aee:	1e40      	subs	r0, r0, #1
 8000af0:	d034      	beq.n	8000b5c <ai_layer_type_name+0xc8>
 8000af2:	1e40      	subs	r0, r0, #1
 8000af4:	d034      	beq.n	8000b60 <ai_layer_type_name+0xcc>
 8000af6:	1e40      	subs	r0, r0, #1
 8000af8:	d034      	beq.n	8000b64 <ai_layer_type_name+0xd0>
 8000afa:	1e40      	subs	r0, r0, #1
 8000afc:	d034      	beq.n	8000b68 <ai_layer_type_name+0xd4>
 8000afe:	1e40      	subs	r0, r0, #1
 8000b00:	d034      	beq.n	8000b6c <ai_layer_type_name+0xd8>
 8000b02:	1e40      	subs	r0, r0, #1
 8000b04:	d034      	beq.n	8000b70 <ai_layer_type_name+0xdc>
 8000b06:	1e40      	subs	r0, r0, #1
 8000b08:	d034      	beq.n	8000b74 <ai_layer_type_name+0xe0>
 8000b0a:	1e40      	subs	r0, r0, #1
 8000b0c:	d034      	beq.n	8000b78 <ai_layer_type_name+0xe4>
 8000b0e:	1e40      	subs	r0, r0, #1
 8000b10:	d034      	beq.n	8000b7c <ai_layer_type_name+0xe8>
 8000b12:	a01c      	add	r0, pc, #112	; (adr r0, 8000b84 <.text_5>)
 8000b14:	4770      	bx	lr
 8000b16:	a01c      	add	r0, pc, #112	; (adr r0, 8000b88 <.text_6>)
 8000b18:	4770      	bx	lr
 8000b1a:	a01c      	add	r0, pc, #112	; (adr r0, 8000b8c <.text_7>)
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	a031      	add	r0, pc, #196	; (adr r0, 8000be8 <.text_15>)
 8000b22:	4770      	bx	lr
 8000b24:	a032      	add	r0, pc, #200	; (adr r0, 8000bf0 <.text_16>)
 8000b26:	4770      	bx	lr
 8000b28:	a019      	add	r0, pc, #100	; (adr r0, 8000b90 <.text_8>)
 8000b2a:	4770      	bx	lr
 8000b2c:	a019      	add	r0, pc, #100	; (adr r0, 8000b94 <.text_9>)
 8000b2e:	4770      	bx	lr
 8000b30:	a031      	add	r0, pc, #196	; (adr r0, 8000bf8 <.text_17>)
 8000b32:	4770      	bx	lr
 8000b34:	a018      	add	r0, pc, #96	; (adr r0, 8000b98 <.text_10>)
 8000b36:	4770      	bx	lr
 8000b38:	a031      	add	r0, pc, #196	; (adr r0, 8000c00 <.text_18>)
 8000b3a:	4770      	bx	lr
 8000b3c:	a032      	add	r0, pc, #200	; (adr r0, 8000c08 <.text_19>)
 8000b3e:	4770      	bx	lr
 8000b40:	a036      	add	r0, pc, #216	; (adr r0, 8000c1c <.text_20>)
 8000b42:	4770      	bx	lr
 8000b44:	a037      	add	r0, pc, #220	; (adr r0, 8000c24 <.text_21>)
 8000b46:	4770      	bx	lr
 8000b48:	a014      	add	r0, pc, #80	; (adr r0, 8000b9c <.text_11>)
 8000b4a:	4770      	bx	lr
 8000b4c:	a037      	add	r0, pc, #220	; (adr r0, 8000c2c <.text_22>)
 8000b4e:	4770      	bx	lr
 8000b50:	a038      	add	r0, pc, #224	; (adr r0, 8000c34 <.text_23>)
 8000b52:	4770      	bx	lr
 8000b54:	a03a      	add	r0, pc, #232	; (adr r0, 8000c40 <.text_24>)
 8000b56:	4770      	bx	lr
 8000b58:	a03e      	add	r0, pc, #248	; (adr r0, 8000c54 <.text_25>)
 8000b5a:	4770      	bx	lr
 8000b5c:	a03f      	add	r0, pc, #252	; (adr r0, 8000c5c <.text_26>)
 8000b5e:	4770      	bx	lr
 8000b60:	a040      	add	r0, pc, #256	; (adr r0, 8000c64 <.text_27>)
 8000b62:	4770      	bx	lr
 8000b64:	a042      	add	r0, pc, #264	; (adr r0, 8000c70 <.text_28>)
 8000b66:	4770      	bx	lr
 8000b68:	a043      	add	r0, pc, #268	; (adr r0, 8000c78 <.text_29>)
 8000b6a:	4770      	bx	lr
 8000b6c:	a044      	add	r0, pc, #272	; (adr r0, 8000c80 <.text_30>)
 8000b6e:	4770      	bx	lr
 8000b70:	a00b      	add	r0, pc, #44	; (adr r0, 8000ba0 <.text_12>)
 8000b72:	4770      	bx	lr
 8000b74:	a048      	add	r0, pc, #288	; (adr r0, 8000c98 <.text_31>)
 8000b76:	4770      	bx	lr
 8000b78:	a049      	add	r0, pc, #292	; (adr r0, 8000ca0 <.text_32>)
 8000b7a:	4770      	bx	lr
 8000b7c:	a04a      	add	r0, pc, #296	; (adr r0, 8000ca8 <.text_33>)
 8000b7e:	4770      	bx	lr
 8000b80:	a000      	add	r0, pc, #0	; (adr r0, 8000b84 <.text_5>)
 8000b82:	4770      	bx	lr

08000b84 <.text_5>:
 8000b84:	00000000 	.word	0x00000000

08000b88 <.text_6>:
 8000b88:	00444441 	.word	0x00444441

08000b8c <.text_7>:
 8000b8c:	00004e42 	.word	0x00004e42

08000b90 <.text_8>:
 8000b90:	00555247 	.word	0x00555247

08000b94 <.text_9>:
 8000b94:	004e524c 	.word	0x004e524c

08000b98 <.text_10>:
 8000b98:	00004c4e 	.word	0x00004c4e

08000b9c <.text_11>:
 8000b9c:	00004d53 	.word	0x00004d53

08000ba0 <.text_12>:
 8000ba0:	00444150 	.word	0x00444150

08000ba4 <ai_layer_type_is_valid>:
 8000ba4:	f242 7111 	movw	r1, #10001	; 0x2711
 8000ba8:	1a40      	subs	r0, r0, r1
 8000baa:	2801      	cmp	r0, #1
 8000bac:	bf81      	itttt	hi
 8000bae:	1ec0      	subhi	r0, r0, #3
 8000bb0:	280d      	cmphi	r0, #13
 8000bb2:	380f      	subhi	r0, #15
 8000bb4:	2809      	cmphi	r0, #9
 8000bb6:	d801      	bhi.n	8000bbc <ai_layer_type_is_valid+0x18>
 8000bb8:	2001      	movs	r0, #1
 8000bba:	4770      	bx	lr
 8000bbc:	2000      	movs	r0, #0
 8000bbe:	4770      	bx	lr

08000bc0 <ai_layers_forward_all>:
 8000bc0:	b530      	push	{r4, r5, lr}
 8000bc2:	4604      	mov	r4, r0
 8000bc4:	b081      	sub	sp, #4
 8000bc6:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8000bc8:	b158      	cbz	r0, 8000be2 <ai_layers_forward_all+0x22>
 8000bca:	64a0      	str	r0, [r4, #72]	; 0x48
 8000bcc:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8000bce:	68e9      	ldr	r1, [r5, #12]
 8000bd0:	4628      	mov	r0, r5
 8000bd2:	4788      	blx	r1
 8000bd4:	68a8      	ldr	r0, [r5, #8]
 8000bd6:	42a8      	cmp	r0, r5
 8000bd8:	bf08      	it	eq
 8000bda:	2000      	moveq	r0, #0
 8000bdc:	2800      	cmp	r0, #0
 8000bde:	64a0      	str	r0, [r4, #72]	; 0x48
 8000be0:	d1f4      	bne.n	8000bcc <ai_layers_forward_all+0xc>
 8000be2:	b001      	add	sp, #4
 8000be4:	bd30      	pop	{r4, r5, pc}
	...

08000be8 <.text_15>:
 8000be8:	564e4f43 	.word	0x564e4f43
 8000bec:	4432      	.short	0x4432
	...

08000bf0 <.text_16>:
 8000bf0:	534e4544 	.word	0x534e4544
 8000bf4:	0045      	.short	0x0045
	...

08000bf8 <.text_17>:
 8000bf8:	4d54534c 	.word	0x4d54534c
 8000bfc:	00000000 	.word	0x00000000

08000c00 <.text_18>:
 8000c00:	4d524f4e 	.word	0x4d524f4e
 8000c04:	00000000 	.word	0x00000000

08000c08 <.text_19>:
 8000c08:	4954504f 	.word	0x4954504f
 8000c0c:	455a494d 	.word	0x455a494d
 8000c10:	4f435f44 	.word	0x4f435f44
 8000c14:	4432564e 	.word	0x4432564e
 8000c18:	00000000 	.word	0x00000000

08000c1c <.text_20>:
 8000c1c:	4d524550 	.word	0x4d524550
 8000c20:	00455455 	.word	0x00455455

08000c24 <.text_21>:
 8000c24:	4c4f4f50 	.word	0x4c4f4f50
 8000c28:	00000000 	.word	0x00000000

08000c2c <.text_22>:
 8000c2c:	494c5053 	.word	0x494c5053
 8000c30:	0054      	.short	0x0054
	...

08000c34 <.text_23>:
 8000c34:	454d4954 	.word	0x454d4954
 8000c38:	4c45445f 	.word	0x4c45445f
 8000c3c:	5941      	.short	0x5941
	...

08000c40 <.text_24>:
 8000c40:	454d4954 	.word	0x454d4954
 8000c44:	5349445f 	.word	0x5349445f
 8000c48:	42495254 	.word	0x42495254
 8000c4c:	44455455 	.word	0x44455455
 8000c50:	00000000 	.word	0x00000000

08000c54 <.text_25>:
 8000c54:	434e4f43 	.word	0x434e4f43
 8000c58:	5441      	.short	0x5441
	...

08000c5c <.text_26>:
 8000c5c:	4d4d4547 	.word	0x4d4d4547
 8000c60:	00000000 	.word	0x00000000

08000c64 <.text_27>:
 8000c64:	41535055 	.word	0x41535055
 8000c68:	454c504d 	.word	0x454c504d
 8000c6c:	00000000 	.word	0x00000000

08000c70 <.text_28>:
 8000c70:	57544c45 	.word	0x57544c45
 8000c74:	00455349 	.word	0x00455349

08000c78 <.text_29>:
 8000c78:	454e4547 	.word	0x454e4547
 8000c7c:	00434952 	.word	0x00434952

08000c80 <.text_30>:
 8000c80:	54534e49 	.word	0x54534e49
 8000c84:	45434e41 	.word	0x45434e41
 8000c88:	4d524f4e 	.word	0x4d524f4e
 8000c8c:	5a494c41 	.word	0x5a494c41
 8000c90:	4f495441 	.word	0x4f495441
 8000c94:	004e      	.short	0x004e
	...

08000c98 <.text_31>:
 8000c98:	43494c53 	.word	0x43494c53
 8000c9c:	0045      	.short	0x0045
	...

08000ca0 <.text_32>:
 8000ca0:	454c4954 	.word	0x454c4954
 8000ca4:	00000000 	.word	0x00000000

08000ca8 <.text_33>:
 8000ca8:	55444552 	.word	0x55444552
 8000cac:	4543      	.short	0x4543
	...

08000cb0 <ai_check_custom_types::ref_signatures>:
 8000cb0:	8403 8404                                   ....

08000cb4 <ai_conv2d_kernel_simple_f32>:
 8000cb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000cb8:	b081      	sub	sp, #4
 8000cba:	468b      	mov	fp, r1
 8000cbc:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8000cbe:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8000cc2:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8000cc4:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000cc8:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8000cca:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
 8000cce:	f8dd 904c 	ldr.w	r9, [sp, #76]	; 0x4c
 8000cd2:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8000cda:	eba5 0709 	sub.w	r7, r5, r9
 8000cde:	fb07 f708 	mul.w	r7, r7, r8
 8000ce2:	9700      	str	r7, [sp, #0]
 8000ce4:	1ae4      	subs	r4, r4, r3
 8000ce6:	fb05 f708 	mul.w	r7, r5, r8
 8000cea:	fb05 650e 	mla	r5, r5, lr, r6
 8000cee:	fb08 f505 	mul.w	r5, r8, r5
 8000cf2:	437c      	muls	r4, r7
 8000cf4:	eb01 0685 	add.w	r6, r1, r5, lsl #2
 8000cf8:	45da      	cmp	sl, fp
 8000cfa:	990c      	ldr	r1, [sp, #48]	; 0x30
 8000cfc:	ebac 0009 	sub.w	r0, ip, r9
 8000d00:	bf0c      	ite	eq
 8000d02:	ed9f 0aab 	vldreq	s0, [pc, #684]	; 8000fb0 <.text_4>
 8000d06:	eeb7 0a00 	vmovne.f32	s0, #112	; 0x3f800000  1.0
 8000d0a:	fb0c f50e 	mul.w	r5, ip, lr
 8000d0e:	fb00 f008 	mul.w	r0, r0, r8
 8000d12:	fb09 f908 	mul.w	r9, r9, r8
 8000d16:	fb08 f505 	mul.w	r5, r8, r5
 8000d1a:	2900      	cmp	r1, #0
 8000d1c:	eb02 0885 	add.w	r8, r2, r5, lsl #2
 8000d20:	f000 8070 	beq.w	8000e04 <ai_conv2d_kernel_simple_f32+0x150>
 8000d24:	f029 0203 	bic.w	r2, r9, #3
 8000d28:	edda 0a00 	vldr	s1, [sl]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	ee60 0a80 	vmul.f32	s1, s1, s0
 8000d32:	46c4      	mov	ip, r8
 8000d34:	dd5c      	ble.n	8000df0 <ai_conv2d_kernel_simple_f32+0x13c>
 8000d36:	9d00      	ldr	r5, [sp, #0]
 8000d38:	469e      	mov	lr, r3
 8000d3a:	2700      	movs	r7, #0
 8000d3c:	2a00      	cmp	r2, #0
 8000d3e:	dd1d      	ble.n	8000d7c <ai_conv2d_kernel_simple_f32+0xc8>
 8000d40:	ed96 4a00 	vldr	s8, [r6]
 8000d44:	eddc 4a00 	vldr	s9, [ip]
 8000d48:	ed96 3a01 	vldr	s6, [r6, #4]
 8000d4c:	eddc 3a01 	vldr	s7, [ip, #4]
 8000d50:	ed96 2a02 	vldr	s4, [r6, #8]
 8000d54:	eddc 2a02 	vldr	s5, [ip, #8]
 8000d58:	ed96 1a03 	vldr	s2, [r6, #12]
 8000d5c:	eddc 1a03 	vldr	s3, [ip, #12]
 8000d60:	ee44 0a24 	vmla.f32	s1, s8, s9
 8000d64:	ee43 0a23 	vmla.f32	s1, s6, s7
 8000d68:	3610      	adds	r6, #16
 8000d6a:	1d3f      	adds	r7, r7, #4
 8000d6c:	ee42 0a22 	vmla.f32	s1, s4, s5
 8000d70:	4297      	cmp	r7, r2
 8000d72:	ee41 0a21 	vmla.f32	s1, s2, s3
 8000d76:	f10c 0c10 	add.w	ip, ip, #16
 8000d7a:	dbe1      	blt.n	8000d40 <ai_conv2d_kernel_simple_f32+0x8c>
 8000d7c:	454f      	cmp	r7, r9
 8000d7e:	da2f      	bge.n	8000de0 <ai_conv2d_kernel_simple_f32+0x12c>
 8000d80:	1c7f      	adds	r7, r7, #1
 8000d82:	ed96 1a00 	vldr	s2, [r6]
 8000d86:	eddc 1a00 	vldr	s3, [ip]
 8000d8a:	1d36      	adds	r6, r6, #4
 8000d8c:	454f      	cmp	r7, r9
 8000d8e:	ee41 0a21 	vmla.f32	s1, s2, s3
 8000d92:	f10c 0c04 	add.w	ip, ip, #4
 8000d96:	da23      	bge.n	8000de0 <ai_conv2d_kernel_simple_f32+0x12c>
 8000d98:	1c7f      	adds	r7, r7, #1
 8000d9a:	ed96 1a00 	vldr	s2, [r6]
 8000d9e:	eddc 1a00 	vldr	s3, [ip]
 8000da2:	1d36      	adds	r6, r6, #4
 8000da4:	454f      	cmp	r7, r9
 8000da6:	ee41 0a21 	vmla.f32	s1, s2, s3
 8000daa:	f10c 0c04 	add.w	ip, ip, #4
 8000dae:	da17      	bge.n	8000de0 <ai_conv2d_kernel_simple_f32+0x12c>
 8000db0:	1c7f      	adds	r7, r7, #1
 8000db2:	ed96 1a00 	vldr	s2, [r6]
 8000db6:	eddc 1a00 	vldr	s3, [ip]
 8000dba:	1d36      	adds	r6, r6, #4
 8000dbc:	454f      	cmp	r7, r9
 8000dbe:	ee41 0a21 	vmla.f32	s1, s2, s3
 8000dc2:	f10c 0c04 	add.w	ip, ip, #4
 8000dc6:	da0b      	bge.n	8000de0 <ai_conv2d_kernel_simple_f32+0x12c>
 8000dc8:	1c7f      	adds	r7, r7, #1
 8000dca:	ed96 1a00 	vldr	s2, [r6]
 8000dce:	eddc 1a00 	vldr	s3, [ip]
 8000dd2:	1d36      	adds	r6, r6, #4
 8000dd4:	454f      	cmp	r7, r9
 8000dd6:	ee41 0a21 	vmla.f32	s1, s2, s3
 8000dda:	f10c 0c04 	add.w	ip, ip, #4
 8000dde:	dbcf      	blt.n	8000d80 <ai_conv2d_kernel_simple_f32+0xcc>
 8000de0:	f1be 0e01 	subs.w	lr, lr, #1
 8000de4:	eb0c 0c80 	add.w	ip, ip, r0, lsl #2
 8000de8:	eb06 0685 	add.w	r6, r6, r5, lsl #2
 8000dec:	d1a5      	bne.n	8000d3a <ai_conv2d_kernel_simple_f32+0x86>
 8000dee:	9500      	str	r5, [sp, #0]
 8000df0:	edcb 0a00 	vstr	s1, [fp]
 8000df4:	1e49      	subs	r1, r1, #1
 8000df6:	eb06 0684 	add.w	r6, r6, r4, lsl #2
 8000dfa:	f10b 0b04 	add.w	fp, fp, #4
 8000dfe:	f10a 0a04 	add.w	sl, sl, #4
 8000e02:	d191      	bne.n	8000d28 <ai_conv2d_kernel_simple_f32+0x74>
 8000e04:	b001      	add	sp, #4
 8000e06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08000e0c <ai_conv2d_kernel_depthwise_f32>:
 8000e0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e10:	b081      	sub	sp, #4
 8000e12:	b402      	push	{r1}
 8000e14:	b084      	sub	sp, #16
 8000e16:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8000e18:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
 8000e1c:	f8dd 8044 	ldr.w	r8, [sp, #68]	; 0x44
 8000e20:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8000e22:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8000e24:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8000e26:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
 8000e2a:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8000e2c:	f8dd e050 	ldr.w	lr, [sp, #80]	; 0x50
 8000e30:	9f16      	ldr	r7, [sp, #88]	; 0x58
 8000e32:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8000e36:	fbb6 f6fa 	udiv	r6, r6, sl
 8000e3a:	eba8 0a00 	sub.w	sl, r8, r0
 8000e3e:	fb0c fa0a 	mul.w	sl, ip, sl
 8000e42:	1b09      	subs	r1, r1, r4
 8000e44:	eba5 0c00 	sub.w	ip, r5, r0
 8000e48:	4369      	muls	r1, r5
 8000e4a:	fb05 750e 	mla	r5, r5, lr, r7
 8000e4e:	eb03 0785 	add.w	r7, r3, r5, lsl #2
 8000e52:	9b04      	ldr	r3, [sp, #16]
 8000e54:	4599      	cmp	r9, r3
 8000e56:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8000e58:	bf0c      	ite	eq
 8000e5a:	ed9f 0a55 	vldreq	s0, [pc, #340]	; 8000fb0 <.text_4>
 8000e5e:	eeb7 0a00 	vmovne.f32	s0, #112	; 0x3f800000  1.0
 8000e62:	fb08 f50e 	mul.w	r5, r8, lr
 8000e66:	435d      	muls	r5, r3
 8000e68:	eb02 0e85 	add.w	lr, r2, r5, lsl #2
 8000e6c:	eb0e 0583 	add.w	r5, lr, r3, lsl #2
 8000e70:	45ae      	cmp	lr, r5
 8000e72:	f04f 0800 	mov.w	r8, #0
 8000e76:	9500      	str	r5, [sp, #0]
 8000e78:	f080 8097 	bcs.w	8000faa <ai_conv2d_kernel_depthwise_f32+0x19e>
 8000e7c:	f020 0303 	bic.w	r3, r0, #3
 8000e80:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8000e84:	9603      	str	r6, [sp, #12]
 8000e86:	9a03      	ldr	r2, [sp, #12]
 8000e88:	2a00      	cmp	r2, #0
 8000e8a:	f000 8088 	beq.w	8000f9e <ai_conv2d_kernel_depthwise_f32+0x192>
 8000e8e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8000e90:	9e04      	ldr	r6, [sp, #16]
 8000e92:	eb02 0988 	add.w	r9, r2, r8, lsl #2
 8000e96:	9a03      	ldr	r2, [sp, #12]
 8000e98:	9415      	str	r4, [sp, #84]	; 0x54
 8000e9a:	eb06 0688 	add.w	r6, r6, r8, lsl #2
 8000e9e:	9102      	str	r1, [sp, #8]
 8000ea0:	f8cd e004 	str.w	lr, [sp, #4]
 8000ea4:	9915      	ldr	r1, [sp, #84]	; 0x54
 8000ea6:	edd9 0a00 	vldr	s1, [r9]
 8000eaa:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000eae:	2900      	cmp	r1, #0
 8000eb0:	ee60 0a80 	vmul.f32	s1, s1, s0
 8000eb4:	dd63      	ble.n	8000f7e <ai_conv2d_kernel_depthwise_f32+0x172>
 8000eb6:	2400      	movs	r4, #0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	dd26      	ble.n	8000f0a <ai_conv2d_kernel_depthwise_f32+0xfe>
 8000ebc:	f8dd 503c 	ldr.w	r5, [sp, #60]	; 0x3c
 8000ec0:	ed97 1a00 	vldr	s2, [r7]
 8000ec4:	edde 1a00 	vldr	s3, [lr]
 8000ec8:	eb0e 0e85 	add.w	lr, lr, r5, lsl #2
 8000ecc:	ee41 0a21 	vmla.f32	s1, s2, s3
 8000ed0:	ed97 1a01 	vldr	s2, [r7, #4]
 8000ed4:	edde 1a00 	vldr	s3, [lr]
 8000ed8:	eb0e 0e85 	add.w	lr, lr, r5, lsl #2
 8000edc:	ee41 0a21 	vmla.f32	s1, s2, s3
 8000ee0:	ed97 1a02 	vldr	s2, [r7, #8]
 8000ee4:	edde 1a00 	vldr	s3, [lr]
 8000ee8:	eb0e 0e85 	add.w	lr, lr, r5, lsl #2
 8000eec:	ee41 0a21 	vmla.f32	s1, s2, s3
 8000ef0:	1d24      	adds	r4, r4, #4
 8000ef2:	ed97 1a03 	vldr	s2, [r7, #12]
 8000ef6:	edde 1a00 	vldr	s3, [lr]
 8000efa:	3710      	adds	r7, #16
 8000efc:	429c      	cmp	r4, r3
 8000efe:	ee41 0a21 	vmla.f32	s1, s2, s3
 8000f02:	eb0e 0e85 	add.w	lr, lr, r5, lsl #2
 8000f06:	dbdb      	blt.n	8000ec0 <ai_conv2d_kernel_depthwise_f32+0xb4>
 8000f08:	950f      	str	r5, [sp, #60]	; 0x3c
 8000f0a:	4284      	cmp	r4, r0
 8000f0c:	da31      	bge.n	8000f72 <ai_conv2d_kernel_depthwise_f32+0x166>
 8000f0e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8000f10:	1c64      	adds	r4, r4, #1
 8000f12:	ed97 1a00 	vldr	s2, [r7]
 8000f16:	edde 1a00 	vldr	s3, [lr]
 8000f1a:	1d3f      	adds	r7, r7, #4
 8000f1c:	4284      	cmp	r4, r0
 8000f1e:	ee41 0a21 	vmla.f32	s1, s2, s3
 8000f22:	eb0e 0e85 	add.w	lr, lr, r5, lsl #2
 8000f26:	da23      	bge.n	8000f70 <ai_conv2d_kernel_depthwise_f32+0x164>
 8000f28:	1c64      	adds	r4, r4, #1
 8000f2a:	ed97 1a00 	vldr	s2, [r7]
 8000f2e:	edde 1a00 	vldr	s3, [lr]
 8000f32:	1d3f      	adds	r7, r7, #4
 8000f34:	4284      	cmp	r4, r0
 8000f36:	ee41 0a21 	vmla.f32	s1, s2, s3
 8000f3a:	eb0e 0e85 	add.w	lr, lr, r5, lsl #2
 8000f3e:	da17      	bge.n	8000f70 <ai_conv2d_kernel_depthwise_f32+0x164>
 8000f40:	1c64      	adds	r4, r4, #1
 8000f42:	ed97 1a00 	vldr	s2, [r7]
 8000f46:	edde 1a00 	vldr	s3, [lr]
 8000f4a:	1d3f      	adds	r7, r7, #4
 8000f4c:	4284      	cmp	r4, r0
 8000f4e:	ee41 0a21 	vmla.f32	s1, s2, s3
 8000f52:	eb0e 0e85 	add.w	lr, lr, r5, lsl #2
 8000f56:	da0b      	bge.n	8000f70 <ai_conv2d_kernel_depthwise_f32+0x164>
 8000f58:	1c64      	adds	r4, r4, #1
 8000f5a:	ed97 1a00 	vldr	s2, [r7]
 8000f5e:	edde 1a00 	vldr	s3, [lr]
 8000f62:	1d3f      	adds	r7, r7, #4
 8000f64:	4284      	cmp	r4, r0
 8000f66:	ee41 0a21 	vmla.f32	s1, s2, s3
 8000f6a:	eb0e 0e85 	add.w	lr, lr, r5, lsl #2
 8000f6e:	dbcf      	blt.n	8000f10 <ai_conv2d_kernel_depthwise_f32+0x104>
 8000f70:	950f      	str	r5, [sp, #60]	; 0x3c
 8000f72:	1e49      	subs	r1, r1, #1
 8000f74:	eb0e 0e8a 	add.w	lr, lr, sl, lsl #2
 8000f78:	eb07 078c 	add.w	r7, r7, ip, lsl #2
 8000f7c:	d19b      	bne.n	8000eb6 <ai_conv2d_kernel_depthwise_f32+0xaa>
 8000f7e:	9902      	ldr	r1, [sp, #8]
 8000f80:	edc6 0a00 	vstr	s1, [r6]
 8000f84:	1d36      	adds	r6, r6, #4
 8000f86:	1e52      	subs	r2, r2, #1
 8000f88:	eb07 0781 	add.w	r7, r7, r1, lsl #2
 8000f8c:	f108 0801 	add.w	r8, r8, #1
 8000f90:	f109 0904 	add.w	r9, r9, #4
 8000f94:	d186      	bne.n	8000ea4 <ai_conv2d_kernel_depthwise_f32+0x98>
 8000f96:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8000f98:	9902      	ldr	r1, [sp, #8]
 8000f9a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f9e:	9a00      	ldr	r2, [sp, #0]
 8000fa0:	f10e 0e04 	add.w	lr, lr, #4
 8000fa4:	4596      	cmp	lr, r2
 8000fa6:	f4ff af6e 	bcc.w	8000e86 <ai_conv2d_kernel_depthwise_f32+0x7a>
 8000faa:	b006      	add	sp, #24
 8000fac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08000fb0 <.text_4>:
 8000fb0:	00000000 	.word	0x00000000

08000fb4 <ai_conv2d_kernel_group_f32>:
 8000fb4:	e92d 4ffa 	stmdb	sp!, {r1, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000fb8:	b085      	sub	sp, #20
 8000fba:	4693      	mov	fp, r2
 8000fbc:	f9bd 9050 	ldrsh.w	r9, [sp, #80]	; 0x50
 8000fc0:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 8000fc2:	9912      	ldr	r1, [sp, #72]	; 0x48
 8000fc4:	f9bd 8054 	ldrsh.w	r8, [sp, #84]	; 0x54
 8000fc8:	f8dd e05c 	ldr.w	lr, [sp, #92]	; 0x5c
 8000fcc:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8000fce:	9f19      	ldr	r7, [sp, #100]	; 0x64
 8000fd0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8000fd2:	981c      	ldr	r0, [sp, #112]	; 0x70
 8000fd4:	46ca      	mov	sl, r9
 8000fd6:	4655      	mov	r5, sl
 8000fd8:	ebaa 0c04 	sub.w	ip, sl, r4
 8000fdc:	fb94 f6f5 	sdiv	r6, r4, r5
 8000fe0:	fb05 c506 	mla	r5, r5, r6, ip
 8000fe4:	fb95 fcfa 	sdiv	ip, r5, sl
 8000fe8:	fb0a 551c 	mls	r5, sl, ip, r5
 8000fec:	9501      	str	r5, [sp, #4]
 8000fee:	4454      	add	r4, sl
 8000ff0:	4645      	mov	r5, r8
 8000ff2:	1bee      	subs	r6, r5, r7
 8000ff4:	fb97 fcf5 	sdiv	ip, r7, r5
 8000ff8:	fb05 6c0c 	mla	ip, r5, ip, r6
 8000ffc:	fb9c f6f5 	sdiv	r6, ip, r5
 8001000:	fb05 cc16 	mls	ip, r5, r6, ip
 8001004:	f8cd c000 	str.w	ip, [sp]
 8001008:	1e64      	subs	r4, r4, #1
 800100a:	9e01      	ldr	r6, [sp, #4]
 800100c:	1b80      	subs	r0, r0, r6
 800100e:	4450      	add	r0, sl
 8001010:	1e40      	subs	r0, r0, #1
 8001012:	fb90 f0fa 	sdiv	r0, r0, sl
 8001016:	9e00      	ldr	r6, [sp, #0]
 8001018:	1b9b      	subs	r3, r3, r6
 800101a:	fbb1 f6f2 	udiv	r6, r1, r2
 800101e:	18eb      	adds	r3, r5, r3
 8001020:	1e5b      	subs	r3, r3, #1
 8001022:	fb93 fcf5 	sdiv	ip, r3, r5
 8001026:	ebae 0e0c 	sub.w	lr, lr, ip
 800102a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800102c:	9604      	str	r6, [sp, #16]
 800102e:	fbb3 f3f2 	udiv	r3, r3, r2
 8001032:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8001034:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8001036:	fb01 f808 	mul.w	r8, r1, r8
 800103a:	fb00 881a 	mls	r8, r0, sl, r8
 800103e:	fb06 f808 	mul.w	r8, r6, r8
 8001042:	fb06 f109 	mul.w	r1, r6, r9
 8001046:	9e16      	ldr	r6, [sp, #88]	; 0x58
 8001048:	435e      	muls	r6, r3
 800104a:	fb0e fe06 	mul.w	lr, lr, r6
 800104e:	19ee      	adds	r6, r5, r7
 8001050:	1e76      	subs	r6, r6, #1
 8001052:	fb96 f5f5 	sdiv	r5, r6, r5
 8001056:	9e16      	ldr	r6, [sp, #88]	; 0x58
 8001058:	fb94 f4fa 	sdiv	r4, r4, sl
 800105c:	eba1 0903 	sub.w	r9, r1, r3
 8001060:	fb06 4405 	mla	r4, r6, r5, r4
 8001064:	9e06      	ldr	r6, [sp, #24]
 8001066:	9916      	ldr	r1, [sp, #88]	; 0x58
 8001068:	9d05      	ldr	r5, [sp, #20]
 800106a:	435c      	muls	r4, r3
 800106c:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8001070:	1a09      	subs	r1, r1, r0
 8001072:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8001074:	4359      	muls	r1, r3
 8001076:	42ae      	cmp	r6, r5
 8001078:	9d00      	ldr	r5, [sp, #0]
 800107a:	9e01      	ldr	r6, [sp, #4]
 800107c:	442f      	add	r7, r5
 800107e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8001080:	fb05 6507 	mla	r5, r5, r7, r6
 8001084:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8001086:	bf0c      	ite	eq
 8001088:	ed9f 0a3d 	vldreq	s0, [pc, #244]	; 8001180 <.text_6>
 800108c:	eeb7 0a00 	vmovne.f32	s0, #112	; 0x3f800000  1.0
 8001090:	437d      	muls	r5, r7
 8001092:	2a00      	cmp	r2, #0
 8001094:	eb0b 0585 	add.w	r5, fp, r5, lsl #2
 8001098:	f04f 0a00 	mov.w	sl, #0
 800109c:	d06d      	beq.n	800117a <ai_conv2d_kernel_group_f32+0x1c6>
 800109e:	9200      	str	r2, [sp, #0]
 80010a0:	9a04      	ldr	r2, [sp, #16]
 80010a2:	2a00      	cmp	r2, #0
 80010a4:	d063      	beq.n	800116e <ai_conv2d_kernel_group_f32+0x1ba>
 80010a6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80010a8:	9f05      	ldr	r7, [sp, #20]
 80010aa:	f8cd c004 	str.w	ip, [sp, #4]
 80010ae:	eb02 0b8a 	add.w	fp, r2, sl, lsl #2
 80010b2:	9a04      	ldr	r2, [sp, #16]
 80010b4:	f8cd e00c 	str.w	lr, [sp, #12]
 80010b8:	eb07 078a 	add.w	r7, r7, sl, lsl #2
 80010bc:	f8cd 5008 	str.w	r5, [sp, #8]
 80010c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80010c4:	eddb 0a00 	vldr	s1, [fp]
 80010c8:	9d02      	ldr	r5, [sp, #8]
 80010ca:	f1be 0f01 	cmp.w	lr, #1
 80010ce:	ee60 0a80 	vmul.f32	s1, s1, s0
 80010d2:	db3b      	blt.n	800114c <ai_conv2d_kernel_group_f32+0x198>
 80010d4:	2801      	cmp	r0, #1
 80010d6:	db32      	blt.n	800113e <ai_conv2d_kernel_group_f32+0x18a>
 80010d8:	ea4f 0c00 	mov.w	ip, r0
 80010dc:	eb05 0683 	add.w	r6, r5, r3, lsl #2
 80010e0:	42b5      	cmp	r5, r6
 80010e2:	d227      	bcs.n	8001134 <ai_conv2d_kernel_group_f32+0x180>
 80010e4:	ed94 1a00 	vldr	s2, [r4]
 80010e8:	edd5 1a00 	vldr	s3, [r5]
 80010ec:	1d24      	adds	r4, r4, #4
 80010ee:	1d2d      	adds	r5, r5, #4
 80010f0:	42b5      	cmp	r5, r6
 80010f2:	ee41 0a21 	vmla.f32	s1, s2, s3
 80010f6:	d21d      	bcs.n	8001134 <ai_conv2d_kernel_group_f32+0x180>
 80010f8:	ed94 1a00 	vldr	s2, [r4]
 80010fc:	edd5 1a00 	vldr	s3, [r5]
 8001100:	1d24      	adds	r4, r4, #4
 8001102:	1d2d      	adds	r5, r5, #4
 8001104:	42b5      	cmp	r5, r6
 8001106:	ee41 0a21 	vmla.f32	s1, s2, s3
 800110a:	d213      	bcs.n	8001134 <ai_conv2d_kernel_group_f32+0x180>
 800110c:	ed94 1a00 	vldr	s2, [r4]
 8001110:	edd5 1a00 	vldr	s3, [r5]
 8001114:	1d24      	adds	r4, r4, #4
 8001116:	1d2d      	adds	r5, r5, #4
 8001118:	42b5      	cmp	r5, r6
 800111a:	ee41 0a21 	vmla.f32	s1, s2, s3
 800111e:	d209      	bcs.n	8001134 <ai_conv2d_kernel_group_f32+0x180>
 8001120:	ed94 1a00 	vldr	s2, [r4]
 8001124:	edd5 1a00 	vldr	s3, [r5]
 8001128:	1d24      	adds	r4, r4, #4
 800112a:	1d2d      	adds	r5, r5, #4
 800112c:	42b5      	cmp	r5, r6
 800112e:	ee41 0a21 	vmla.f32	s1, s2, s3
 8001132:	d3d7      	bcc.n	80010e4 <ai_conv2d_kernel_group_f32+0x130>
 8001134:	f1bc 0c01 	subs.w	ip, ip, #1
 8001138:	eb05 0589 	add.w	r5, r5, r9, lsl #2
 800113c:	d1ce      	bne.n	80010dc <ai_conv2d_kernel_group_f32+0x128>
 800113e:	f1be 0e01 	subs.w	lr, lr, #1
 8001142:	eb05 0588 	add.w	r5, r5, r8, lsl #2
 8001146:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 800114a:	d1c3      	bne.n	80010d4 <ai_conv2d_kernel_group_f32+0x120>
 800114c:	9d03      	ldr	r5, [sp, #12]
 800114e:	edc7 0a00 	vstr	s1, [r7]
 8001152:	1d3f      	adds	r7, r7, #4
 8001154:	1e52      	subs	r2, r2, #1
 8001156:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 800115a:	f10a 0a01 	add.w	sl, sl, #1
 800115e:	f10b 0b04 	add.w	fp, fp, #4
 8001162:	d1ad      	bne.n	80010c0 <ai_conv2d_kernel_group_f32+0x10c>
 8001164:	f8dd c004 	ldr.w	ip, [sp, #4]
 8001168:	f8dd e00c 	ldr.w	lr, [sp, #12]
 800116c:	9d02      	ldr	r5, [sp, #8]
 800116e:	9a00      	ldr	r2, [sp, #0]
 8001170:	1e52      	subs	r2, r2, #1
 8001172:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 8001176:	9200      	str	r2, [sp, #0]
 8001178:	d192      	bne.n	80010a0 <ai_conv2d_kernel_group_f32+0xec>
 800117a:	b007      	add	sp, #28
 800117c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001180 <.text_6>:
 8001180:	00000000 	.word	0x00000000

08001184 <ai_conv2d_kernel_f32>:
 8001184:	e92d 4ff2 	stmdb	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001188:	b090      	sub	sp, #64	; 0x40
 800118a:	991a      	ldr	r1, [sp, #104]	; 0x68
 800118c:	b901      	cbnz	r1, 8001190 <ai_conv2d_kernel_f32+0xc>
 800118e:	9910      	ldr	r1, [sp, #64]	; 0x40
 8001190:	9c26      	ldr	r4, [sp, #152]	; 0x98
 8001192:	9e25      	ldr	r6, [sp, #148]	; 0x94
 8001194:	9d24      	ldr	r5, [sp, #144]	; 0x90
 8001196:	9f23      	ldr	r7, [sp, #140]	; 0x8c
 8001198:	f8dd e088 	ldr.w	lr, [sp, #136]	; 0x88
 800119c:	f9bd c078 	ldrsh.w	ip, [sp, #120]	; 0x78
 80011a0:	f9bd 807c 	ldrsh.w	r8, [sp, #124]	; 0x7c
 80011a4:	900f      	str	r0, [sp, #60]	; 0x3c
 80011a6:	1bed      	subs	r5, r5, r7
 80011a8:	1ba4      	subs	r4, r4, r6
 80011aa:	920e      	str	r2, [sp, #56]	; 0x38
 80011ac:	930d      	str	r3, [sp, #52]	; 0x34
 80011ae:	f1be 0f01 	cmp.w	lr, #1
 80011b2:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80011b4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80011b6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80011b8:	f8dd 9080 	ldr.w	r9, [sp, #128]	; 0x80
 80011bc:	f8dd a084 	ldr.w	sl, [sp, #132]	; 0x84
 80011c0:	bf04      	itt	eq
 80011c2:	fb1c fb08 	smulbbeq	fp, ip, r8
 80011c6:	f1bb 0f01 	cmpeq.w	fp, #1
 80011ca:	d114      	bne.n	80011f6 <ai_conv2d_kernel_f32+0x72>
 80011cc:	9303      	str	r3, [sp, #12]
 80011ce:	9202      	str	r2, [sp, #8]
 80011d0:	9001      	str	r0, [sp, #4]
 80011d2:	9100      	str	r1, [sp, #0]
 80011d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80011d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80011d8:	9910      	ldr	r1, [sp, #64]	; 0x40
 80011da:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80011dc:	9409      	str	r4, [sp, #36]	; 0x24
 80011de:	9608      	str	r6, [sp, #32]
 80011e0:	9507      	str	r5, [sp, #28]
 80011e2:	9706      	str	r7, [sp, #24]
 80011e4:	f8cd a014 	str.w	sl, [sp, #20]
 80011e8:	f8cd 9010 	str.w	r9, [sp, #16]
 80011ec:	f7ff fd62 	bl	8000cb4 <ai_conv2d_kernel_simple_f32>
 80011f0:	b011      	add	sp, #68	; 0x44
 80011f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80011f6:	4586      	cmp	lr, r0
 80011f8:	bf04      	itt	eq
 80011fa:	fb1c fb08 	smulbbeq	fp, ip, r8
 80011fe:	f1bb 0f01 	cmpeq.w	fp, #1
 8001202:	d114      	bne.n	800122e <ai_conv2d_kernel_f32+0xaa>
 8001204:	9303      	str	r3, [sp, #12]
 8001206:	9202      	str	r2, [sp, #8]
 8001208:	9001      	str	r0, [sp, #4]
 800120a:	9100      	str	r1, [sp, #0]
 800120c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800120e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8001210:	9910      	ldr	r1, [sp, #64]	; 0x40
 8001212:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8001214:	9409      	str	r4, [sp, #36]	; 0x24
 8001216:	9608      	str	r6, [sp, #32]
 8001218:	9507      	str	r5, [sp, #28]
 800121a:	9706      	str	r7, [sp, #24]
 800121c:	f8cd a014 	str.w	sl, [sp, #20]
 8001220:	f8cd 9010 	str.w	r9, [sp, #16]
 8001224:	f7ff fdf2 	bl	8000e0c <ai_conv2d_kernel_depthwise_f32>
 8001228:	b011      	add	sp, #68	; 0x44
 800122a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800122e:	9303      	str	r3, [sp, #12]
 8001230:	9202      	str	r2, [sp, #8]
 8001232:	9001      	str	r0, [sp, #4]
 8001234:	9100      	str	r1, [sp, #0]
 8001236:	f8cd e020 	str.w	lr, [sp, #32]
 800123a:	f8cd c010 	str.w	ip, [sp, #16]
 800123e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001240:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8001242:	9910      	ldr	r1, [sp, #64]	; 0x40
 8001244:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8001246:	940c      	str	r4, [sp, #48]	; 0x30
 8001248:	960b      	str	r6, [sp, #44]	; 0x2c
 800124a:	950a      	str	r5, [sp, #40]	; 0x28
 800124c:	9709      	str	r7, [sp, #36]	; 0x24
 800124e:	f8cd a01c 	str.w	sl, [sp, #28]
 8001252:	f8cd 9018 	str.w	r9, [sp, #24]
 8001256:	f8cd 8014 	str.w	r8, [sp, #20]
 800125a:	f7ff feab 	bl	8000fb4 <ai_conv2d_kernel_group_f32>
 800125e:	b011      	add	sp, #68	; 0x44
 8001260:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001264 <ai_conv2d_stripe_f32>:
 8001264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001268:	b091      	sub	sp, #68	; 0x44
 800126a:	4604      	mov	r4, r0
 800126c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8001270:	9d1e      	ldr	r5, [sp, #120]	; 0x78
 8001272:	f8dd b094 	ldr.w	fp, [sp, #148]	; 0x94
 8001276:	9826      	ldr	r0, [sp, #152]	; 0x98
 8001278:	fb08 b000 	mla	r0, r8, r0, fp
 800127c:	2d00      	cmp	r5, #0
 800127e:	9001      	str	r0, [sp, #4]
 8001280:	d05d      	beq.n	800133e <ai_conv2d_stripe_f32+0xda>
 8001282:	9102      	str	r1, [sp, #8]
 8001284:	920e      	str	r2, [sp, #56]	; 0x38
 8001286:	9500      	str	r5, [sp, #0]
 8001288:	930d      	str	r3, [sp, #52]	; 0x34
 800128a:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800128c:	9e24      	ldr	r6, [sp, #144]	; 0x90
 800128e:	971a      	str	r7, [sp, #104]	; 0x68
 8001290:	4625      	mov	r5, r4
 8001292:	950f      	str	r5, [sp, #60]	; 0x3c
 8001294:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8001296:	9c20      	ldr	r4, [sp, #128]	; 0x80
 8001298:	f8dd c088 	ldr.w	ip, [sp, #136]	; 0x88
 800129c:	f8dd e08c 	ldr.w	lr, [sp, #140]	; 0x8c
 80012a0:	9821      	ldr	r0, [sp, #132]	; 0x84
 80012a2:	f8dd 906c 	ldr.w	r9, [sp, #108]	; 0x6c
 80012a6:	f9bd 10a0 	ldrsh.w	r1, [sp, #160]	; 0xa0
 80012aa:	f9bd 20a4 	ldrsh.w	r2, [sp, #164]	; 0xa4
 80012ae:	9d02      	ldr	r5, [sp, #8]
 80012b0:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 80012b2:	931f      	str	r3, [sp, #124]	; 0x7c
 80012b4:	9420      	str	r4, [sp, #128]	; 0x80
 80012b6:	f8cd c088 	str.w	ip, [sp, #136]	; 0x88
 80012ba:	f8cd e08c 	str.w	lr, [sp, #140]	; 0x8c
 80012be:	9624      	str	r6, [sp, #144]	; 0x90
 80012c0:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 80012c2:	f8dd a004 	ldr.w	sl, [sp, #4]
 80012c6:	9c00      	ldr	r4, [sp, #0]
 80012c8:	f8ad 10a0 	strh.w	r1, [sp, #160]	; 0xa0
 80012cc:	f8ad 20a4 	strh.w	r2, [sp, #164]	; 0xa4
 80012d0:	f8ad 0084 	strh.w	r0, [sp, #132]	; 0x84
 80012d4:	f1db 0000 	rsbs	r0, fp, #0
 80012d8:	bfd8      	it	le
 80012da:	2000      	movle	r0, #0
 80012dc:	eba8 010b 	sub.w	r1, r8, fp
 80012e0:	42b1      	cmp	r1, r6
 80012e2:	bf28      	it	cs
 80012e4:	4631      	movcs	r1, r6
 80012e6:	910c      	str	r1, [sp, #48]	; 0x30
 80012e8:	900b      	str	r0, [sp, #44]	; 0x2c
 80012ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80012ee:	9702      	str	r7, [sp, #8]
 80012f0:	f8cd 9004 	str.w	r9, [sp, #4]
 80012f4:	4450      	add	r0, sl
 80012f6:	9924      	ldr	r1, [sp, #144]	; 0x90
 80012f8:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80012fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80012fc:	910a      	str	r1, [sp, #40]	; 0x28
 80012fe:	9209      	str	r2, [sp, #36]	; 0x24
 8001300:	fb00 f009 	mul.w	r0, r0, r9
 8001304:	9922      	ldr	r1, [sp, #136]	; 0x88
 8001306:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8001308:	9108      	str	r1, [sp, #32]
 800130a:	9207      	str	r2, [sp, #28]
 800130c:	991f      	ldr	r1, [sp, #124]	; 0x7c
 800130e:	f9bd 20a4 	ldrsh.w	r2, [sp, #164]	; 0xa4
 8001312:	9106      	str	r1, [sp, #24]
 8001314:	9205      	str	r2, [sp, #20]
 8001316:	f9bd 10a0 	ldrsh.w	r1, [sp, #160]	; 0xa0
 800131a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800131c:	9104      	str	r1, [sp, #16]
 800131e:	9200      	str	r2, [sp, #0]
 8001320:	990e      	ldr	r1, [sp, #56]	; 0x38
 8001322:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 8001326:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8001328:	4629      	mov	r1, r5
 800132a:	f7ff ff2b 	bl	8001184 <ai_conv2d_kernel_f32>
 800132e:	f8bd 0084 	ldrh.w	r0, [sp, #132]	; 0x84
 8001332:	1e64      	subs	r4, r4, #1
 8001334:	eb05 0587 	add.w	r5, r5, r7, lsl #2
 8001338:	4483      	add	fp, r0
 800133a:	4482      	add	sl, r0
 800133c:	d1ca      	bne.n	80012d4 <ai_conv2d_stripe_f32+0x70>
 800133e:	b011      	add	sp, #68	; 0x44
 8001340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001344 <func_dummy>:
 8001344:	4770      	bx	lr
	...

08001348 <ai_dict8_dot_array_f32>:
 8001348:	b4f0      	push	{r4, r5, r6, r7}
 800134a:	4604      	mov	r4, r0
 800134c:	9804      	ldr	r0, [sp, #16]
 800134e:	eb03 0580 	add.w	r5, r3, r0, lsl #2
 8001352:	3d20      	subs	r5, #32
 8001354:	2808      	cmp	r0, #8
 8001356:	ed9f 0ad9 	vldr	s0, [pc, #868]	; 80016bc <.text_12>
 800135a:	d22f      	bcs.n	80013bc <ai_dict8_dot_array_f32+0x74>
 800135c:	3520      	adds	r5, #32
 800135e:	42ab      	cmp	r3, r5
 8001360:	d224      	bcs.n	80013ac <ai_dict8_dot_array_f32+0x64>
 8001362:	7808      	ldrb	r0, [r1, #0]
 8001364:	ed93 1a00 	vldr	s2, [r3]
 8001368:	eb02 0680 	add.w	r6, r2, r0, lsl #2
 800136c:	1d18      	adds	r0, r3, #4
 800136e:	edd6 0a00 	vldr	s1, [r6]
 8001372:	42a8      	cmp	r0, r5
 8001374:	ee00 0a81 	vmla.f32	s0, s1, s2
 8001378:	d218      	bcs.n	80013ac <ai_dict8_dot_array_f32+0x64>
 800137a:	784b      	ldrb	r3, [r1, #1]
 800137c:	ed90 1a00 	vldr	s2, [r0]
 8001380:	eb02 0683 	add.w	r6, r2, r3, lsl #2
 8001384:	1d00      	adds	r0, r0, #4
 8001386:	edd6 0a00 	vldr	s1, [r6]
 800138a:	42a8      	cmp	r0, r5
 800138c:	ee00 0a81 	vmla.f32	s0, s1, s2
 8001390:	d20c      	bcs.n	80013ac <ai_dict8_dot_array_f32+0x64>
 8001392:	788b      	ldrb	r3, [r1, #2]
 8001394:	ed90 1a00 	vldr	s2, [r0]
 8001398:	eb02 0683 	add.w	r6, r2, r3, lsl #2
 800139c:	1d03      	adds	r3, r0, #4
 800139e:	1cc9      	adds	r1, r1, #3
 80013a0:	edd6 0a00 	vldr	s1, [r6]
 80013a4:	42ab      	cmp	r3, r5
 80013a6:	ee00 0a81 	vmla.f32	s0, s1, s2
 80013aa:	d3da      	bcc.n	8001362 <ai_dict8_dot_array_f32+0x1a>
 80013ac:	edd4 0a00 	vldr	s1, [r4]
 80013b0:	ee30 0a80 	vadd.f32	s0, s1, s0
 80013b4:	ed84 0a00 	vstr	s0, [r4]
 80013b8:	bcf0      	pop	{r4, r5, r6, r7}
 80013ba:	4770      	bx	lr
 80013bc:	f001 0003 	and.w	r0, r1, #3
 80013c0:	2803      	cmp	r0, #3
 80013c2:	d8f3      	bhi.n	80013ac <ai_dict8_dot_array_f32+0x64>
 80013c4:	e8df f000 	tbb	[pc, r0]
 80013c8:	4c413603 	.word	0x4c413603
 80013cc:	e7ee      	b.n	80013ac <ai_dict8_dot_array_f32+0x64>
 80013ce:	429d      	cmp	r5, r3
 80013d0:	f080 80d5 	bcs.w	800157e <ai_dict8_dot_array_f32+0x236>
 80013d4:	3520      	adds	r5, #32
 80013d6:	42ab      	cmp	r3, r5
 80013d8:	d2e8      	bcs.n	80013ac <ai_dict8_dot_array_f32+0x64>
 80013da:	7808      	ldrb	r0, [r1, #0]
 80013dc:	ed93 1a00 	vldr	s2, [r3]
 80013e0:	eb02 0680 	add.w	r6, r2, r0, lsl #2
 80013e4:	1d18      	adds	r0, r3, #4
 80013e6:	edd6 0a00 	vldr	s1, [r6]
 80013ea:	42a8      	cmp	r0, r5
 80013ec:	ee00 0a81 	vmla.f32	s0, s1, s2
 80013f0:	d2dc      	bcs.n	80013ac <ai_dict8_dot_array_f32+0x64>
 80013f2:	784b      	ldrb	r3, [r1, #1]
 80013f4:	ed90 1a00 	vldr	s2, [r0]
 80013f8:	eb02 0683 	add.w	r6, r2, r3, lsl #2
 80013fc:	1d00      	adds	r0, r0, #4
 80013fe:	edd6 0a00 	vldr	s1, [r6]
 8001402:	42a8      	cmp	r0, r5
 8001404:	ee00 0a81 	vmla.f32	s0, s1, s2
 8001408:	d2d0      	bcs.n	80013ac <ai_dict8_dot_array_f32+0x64>
 800140a:	788b      	ldrb	r3, [r1, #2]
 800140c:	ed90 1a00 	vldr	s2, [r0]
 8001410:	eb02 0683 	add.w	r6, r2, r3, lsl #2
 8001414:	1d03      	adds	r3, r0, #4
 8001416:	1cc9      	adds	r1, r1, #3
 8001418:	edd6 0a00 	vldr	s1, [r6]
 800141c:	42ab      	cmp	r3, r5
 800141e:	ee00 0a81 	vmla.f32	s0, s1, s2
 8001422:	d3da      	bcc.n	80013da <ai_dict8_dot_array_f32+0x92>
 8001424:	edd4 0a00 	vldr	s1, [r4]
 8001428:	ee30 0a80 	vadd.f32	s0, s1, s0
 800142c:	ed84 0a00 	vstr	s0, [r4]
 8001430:	bcf0      	pop	{r4, r5, r6, r7}
 8001432:	4770      	bx	lr
 8001434:	f811 0b01 	ldrb.w	r0, [r1], #1
 8001438:	ed93 1a00 	vldr	s2, [r3]
 800143c:	eb02 0680 	add.w	r6, r2, r0, lsl #2
 8001440:	1d1b      	adds	r3, r3, #4
 8001442:	edd6 0a00 	vldr	s1, [r6]
 8001446:	ee00 0a81 	vmla.f32	s0, s1, s2
 800144a:	f811 0b01 	ldrb.w	r0, [r1], #1
 800144e:	ed93 1a00 	vldr	s2, [r3]
 8001452:	eb02 0680 	add.w	r6, r2, r0, lsl #2
 8001456:	1d1b      	adds	r3, r3, #4
 8001458:	edd6 0a00 	vldr	s1, [r6]
 800145c:	ee00 0a81 	vmla.f32	s0, s1, s2
 8001460:	f811 0b01 	ldrb.w	r0, [r1], #1
 8001464:	ed93 1a00 	vldr	s2, [r3]
 8001468:	eb02 0680 	add.w	r6, r2, r0, lsl #2
 800146c:	1d1b      	adds	r3, r3, #4
 800146e:	edd6 0a00 	vldr	s1, [r6]
 8001472:	429d      	cmp	r5, r3
 8001474:	ee00 0a81 	vmla.f32	s0, s1, s2
 8001478:	d34e      	bcc.n	8001518 <ai_dict8_dot_array_f32+0x1d0>
 800147a:	78cf      	ldrb	r7, [r1, #3]
 800147c:	ed93 4a00 	vldr	s8, [r3]
 8001480:	ed93 3a01 	vldr	s6, [r3, #4]
 8001484:	ed93 2a02 	vldr	s4, [r3, #8]
 8001488:	ed93 1a03 	vldr	s2, [r3, #12]
 800148c:	eb02 0687 	add.w	r6, r2, r7, lsl #2
 8001490:	788f      	ldrb	r7, [r1, #2]
 8001492:	edd6 0a00 	vldr	s1, [r6]
 8001496:	eb02 0687 	add.w	r6, r2, r7, lsl #2
 800149a:	784f      	ldrb	r7, [r1, #1]
 800149c:	edd6 1a00 	vldr	s3, [r6]
 80014a0:	eb02 0687 	add.w	r6, r2, r7, lsl #2
 80014a4:	780f      	ldrb	r7, [r1, #0]
 80014a6:	edd6 2a00 	vldr	s5, [r6]
 80014aa:	eb02 0687 	add.w	r6, r2, r7, lsl #2
 80014ae:	f103 0010 	add.w	r0, r3, #16
 80014b2:	edd6 3a00 	vldr	s7, [r6]
 80014b6:	790b      	ldrb	r3, [r1, #4]
 80014b8:	ee03 0a84 	vmla.f32	s0, s7, s8
 80014bc:	ee02 0a83 	vmla.f32	s0, s5, s6
 80014c0:	ee01 0a82 	vmla.f32	s0, s3, s4
 80014c4:	eb02 0783 	add.w	r7, r2, r3, lsl #2
 80014c8:	ee00 0a81 	vmla.f32	s0, s1, s2
 80014cc:	794b      	ldrb	r3, [r1, #5]
 80014ce:	edd7 0a00 	vldr	s1, [r7]
 80014d2:	ed90 4a00 	vldr	s8, [r0]
 80014d6:	edd0 3a01 	vldr	s7, [r0, #4]
 80014da:	ed90 3a02 	vldr	s6, [r0, #8]
 80014de:	edd0 2a03 	vldr	s5, [r0, #12]
 80014e2:	eb02 0783 	add.w	r7, r2, r3, lsl #2
 80014e6:	798b      	ldrb	r3, [r1, #6]
 80014e8:	ed97 1a00 	vldr	s2, [r7]
 80014ec:	eb02 0783 	add.w	r7, r2, r3, lsl #2
 80014f0:	79cb      	ldrb	r3, [r1, #7]
 80014f2:	edd7 1a00 	vldr	s3, [r7]
 80014f6:	eb02 0783 	add.w	r7, r2, r3, lsl #2
 80014fa:	ee00 0a84 	vmla.f32	s0, s1, s8
 80014fe:	3108      	adds	r1, #8
 8001500:	f100 0310 	add.w	r3, r0, #16
 8001504:	ee01 0a23 	vmla.f32	s0, s2, s7
 8001508:	ed97 2a00 	vldr	s4, [r7]
 800150c:	ee01 0a83 	vmla.f32	s0, s3, s6
 8001510:	429d      	cmp	r5, r3
 8001512:	ee02 0a22 	vmla.f32	s0, s4, s5
 8001516:	d2b0      	bcs.n	800147a <ai_dict8_dot_array_f32+0x132>
 8001518:	3520      	adds	r5, #32
 800151a:	42ab      	cmp	r3, r5
 800151c:	f4bf af46 	bcs.w	80013ac <ai_dict8_dot_array_f32+0x64>
 8001520:	7808      	ldrb	r0, [r1, #0]
 8001522:	ed93 1a00 	vldr	s2, [r3]
 8001526:	eb02 0680 	add.w	r6, r2, r0, lsl #2
 800152a:	1d18      	adds	r0, r3, #4
 800152c:	edd6 0a00 	vldr	s1, [r6]
 8001530:	42a8      	cmp	r0, r5
 8001532:	ee00 0a81 	vmla.f32	s0, s1, s2
 8001536:	f4bf af39 	bcs.w	80013ac <ai_dict8_dot_array_f32+0x64>
 800153a:	784b      	ldrb	r3, [r1, #1]
 800153c:	ed90 1a00 	vldr	s2, [r0]
 8001540:	eb02 0683 	add.w	r6, r2, r3, lsl #2
 8001544:	1d00      	adds	r0, r0, #4
 8001546:	edd6 0a00 	vldr	s1, [r6]
 800154a:	42a8      	cmp	r0, r5
 800154c:	ee00 0a81 	vmla.f32	s0, s1, s2
 8001550:	f4bf af2c 	bcs.w	80013ac <ai_dict8_dot_array_f32+0x64>
 8001554:	788b      	ldrb	r3, [r1, #2]
 8001556:	ed90 1a00 	vldr	s2, [r0]
 800155a:	eb02 0683 	add.w	r6, r2, r3, lsl #2
 800155e:	1d03      	adds	r3, r0, #4
 8001560:	1cc9      	adds	r1, r1, #3
 8001562:	edd6 0a00 	vldr	s1, [r6]
 8001566:	42ab      	cmp	r3, r5
 8001568:	ee00 0a81 	vmla.f32	s0, s1, s2
 800156c:	d3d8      	bcc.n	8001520 <ai_dict8_dot_array_f32+0x1d8>
 800156e:	edd4 0a00 	vldr	s1, [r4]
 8001572:	ee30 0a80 	vadd.f32	s0, s1, s0
 8001576:	ed84 0a00 	vstr	s0, [r4]
 800157a:	bcf0      	pop	{r4, r5, r6, r7}
 800157c:	4770      	bx	lr
 800157e:	78cf      	ldrb	r7, [r1, #3]
 8001580:	ed93 4a00 	vldr	s8, [r3]
 8001584:	ed93 3a01 	vldr	s6, [r3, #4]
 8001588:	ed93 2a02 	vldr	s4, [r3, #8]
 800158c:	ed93 1a03 	vldr	s2, [r3, #12]
 8001590:	eb02 0687 	add.w	r6, r2, r7, lsl #2
 8001594:	788f      	ldrb	r7, [r1, #2]
 8001596:	edd6 0a00 	vldr	s1, [r6]
 800159a:	eb02 0687 	add.w	r6, r2, r7, lsl #2
 800159e:	784f      	ldrb	r7, [r1, #1]
 80015a0:	edd6 1a00 	vldr	s3, [r6]
 80015a4:	eb02 0687 	add.w	r6, r2, r7, lsl #2
 80015a8:	780f      	ldrb	r7, [r1, #0]
 80015aa:	edd6 2a00 	vldr	s5, [r6]
 80015ae:	eb02 0687 	add.w	r6, r2, r7, lsl #2
 80015b2:	f103 0010 	add.w	r0, r3, #16
 80015b6:	edd6 3a00 	vldr	s7, [r6]
 80015ba:	790b      	ldrb	r3, [r1, #4]
 80015bc:	ee03 0a84 	vmla.f32	s0, s7, s8
 80015c0:	ee02 0a83 	vmla.f32	s0, s5, s6
 80015c4:	ee01 0a82 	vmla.f32	s0, s3, s4
 80015c8:	eb02 0783 	add.w	r7, r2, r3, lsl #2
 80015cc:	ee00 0a81 	vmla.f32	s0, s1, s2
 80015d0:	794b      	ldrb	r3, [r1, #5]
 80015d2:	edd7 0a00 	vldr	s1, [r7]
 80015d6:	ed90 4a00 	vldr	s8, [r0]
 80015da:	edd0 3a01 	vldr	s7, [r0, #4]
 80015de:	ed90 3a02 	vldr	s6, [r0, #8]
 80015e2:	edd0 2a03 	vldr	s5, [r0, #12]
 80015e6:	eb02 0783 	add.w	r7, r2, r3, lsl #2
 80015ea:	798b      	ldrb	r3, [r1, #6]
 80015ec:	ed97 1a00 	vldr	s2, [r7]
 80015f0:	eb02 0783 	add.w	r7, r2, r3, lsl #2
 80015f4:	79cb      	ldrb	r3, [r1, #7]
 80015f6:	edd7 1a00 	vldr	s3, [r7]
 80015fa:	eb02 0783 	add.w	r7, r2, r3, lsl #2
 80015fe:	ee00 0a84 	vmla.f32	s0, s1, s8
 8001602:	3108      	adds	r1, #8
 8001604:	f100 0310 	add.w	r3, r0, #16
 8001608:	ee01 0a23 	vmla.f32	s0, s2, s7
 800160c:	ed97 2a00 	vldr	s4, [r7]
 8001610:	ee01 0a83 	vmla.f32	s0, s3, s6
 8001614:	429d      	cmp	r5, r3
 8001616:	ee02 0a22 	vmla.f32	s0, s4, s5
 800161a:	d2b0      	bcs.n	800157e <ai_dict8_dot_array_f32+0x236>
 800161c:	e6da      	b.n	80013d4 <ai_dict8_dot_array_f32+0x8c>
	...

08001620 <ai_dict4_dot_array_f32>:
 8001620:	b4f0      	push	{r4, r5, r6, r7}
 8001622:	9c04      	ldr	r4, [sp, #16]
 8001624:	0865      	lsrs	r5, r4, #1
 8001626:	006d      	lsls	r5, r5, #1
 8001628:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800162c:	42ab      	cmp	r3, r5
 800162e:	ed9f 0a23 	vldr	s0, [pc, #140]	; 80016bc <.text_12>
 8001632:	d22f      	bcs.n	8001694 <ai_dict4_dot_array_f32+0x74>
 8001634:	f811 6b01 	ldrb.w	r6, [r1], #1
 8001638:	ed93 2a00 	vldr	s4, [r3]
 800163c:	ed93 1a01 	vldr	s2, [r3, #4]
 8001640:	f006 070f 	and.w	r7, r6, #15
 8001644:	0936      	lsrs	r6, r6, #4
 8001646:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800164a:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800164e:	edd6 1a00 	vldr	s3, [r6]
 8001652:	edd7 0a00 	vldr	s1, [r7]
 8001656:	3308      	adds	r3, #8
 8001658:	ee01 0a82 	vmla.f32	s0, s3, s4
 800165c:	42ab      	cmp	r3, r5
 800165e:	ee00 0a81 	vmla.f32	s0, s1, s2
 8001662:	d217      	bcs.n	8001694 <ai_dict4_dot_array_f32+0x74>
 8001664:	f811 6b01 	ldrb.w	r6, [r1], #1
 8001668:	ed93 2a00 	vldr	s4, [r3]
 800166c:	ed93 1a01 	vldr	s2, [r3, #4]
 8001670:	f006 070f 	and.w	r7, r6, #15
 8001674:	0936      	lsrs	r6, r6, #4
 8001676:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800167a:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800167e:	edd6 1a00 	vldr	s3, [r6]
 8001682:	edd7 0a00 	vldr	s1, [r7]
 8001686:	3308      	adds	r3, #8
 8001688:	ee01 0a82 	vmla.f32	s0, s3, s4
 800168c:	42ab      	cmp	r3, r5
 800168e:	ee00 0a81 	vmla.f32	s0, s1, s2
 8001692:	d3cf      	bcc.n	8001634 <ai_dict4_dot_array_f32+0x14>
 8001694:	07e4      	lsls	r4, r4, #31
 8001696:	d509      	bpl.n	80016ac <ai_dict4_dot_array_f32+0x8c>
 8001698:	7809      	ldrb	r1, [r1, #0]
 800169a:	ed93 1a00 	vldr	s2, [r3]
 800169e:	0909      	lsrs	r1, r1, #4
 80016a0:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80016a4:	edd2 0a00 	vldr	s1, [r2]
 80016a8:	ee00 0a81 	vmla.f32	s0, s1, s2
 80016ac:	edd0 1a00 	vldr	s3, [r0]
 80016b0:	ee31 0a80 	vadd.f32	s0, s3, s0
 80016b4:	ed80 0a00 	vstr	s0, [r0]
 80016b8:	bcf0      	pop	{r4, r5, r6, r7}
 80016ba:	4770      	bx	lr

080016bc <.text_12>:
 80016bc:	00000000 	.word	0x00000000

080016c0 <ai_dict_decompress_f32>:
 80016c0:	b4f0      	push	{r4, r5, r6, r7}
 80016c2:	4604      	mov	r4, r0
 80016c4:	9805      	ldr	r0, [sp, #20]
 80016c6:	9e04      	ldr	r6, [sp, #16]
 80016c8:	2b04      	cmp	r3, #4
 80016ca:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 80016ce:	d003      	beq.n	80016d8 <ai_dict_decompress_f32+0x18>
 80016d0:	2b08      	cmp	r3, #8
 80016d2:	d03e      	beq.n	8001752 <ai_dict_decompress_f32+0x92>
 80016d4:	bcf0      	pop	{r4, r5, r6, r7}
 80016d6:	4770      	bx	lr
 80016d8:	42ac      	cmp	r4, r5
 80016da:	d259      	bcs.n	8001790 <ai_dict_decompress_f32+0xd0>
 80016dc:	0870      	lsrs	r0, r6, #1
 80016de:	d02e      	beq.n	800173e <ai_dict_decompress_f32+0x7e>
 80016e0:	07c3      	lsls	r3, r0, #31
 80016e2:	d50c      	bpl.n	80016fe <ai_dict_decompress_f32+0x3e>
 80016e4:	780f      	ldrb	r7, [r1, #0]
 80016e6:	093f      	lsrs	r7, r7, #4
 80016e8:	f852 3027 	ldr.w	r3, [r2, r7, lsl #2]
 80016ec:	6023      	str	r3, [r4, #0]
 80016ee:	f811 7b01 	ldrb.w	r7, [r1], #1
 80016f2:	f007 070f 	and.w	r7, r7, #15
 80016f6:	f852 3027 	ldr.w	r3, [r2, r7, lsl #2]
 80016fa:	6063      	str	r3, [r4, #4]
 80016fc:	3408      	adds	r4, #8
 80016fe:	0840      	lsrs	r0, r0, #1
 8001700:	d01d      	beq.n	800173e <ai_dict_decompress_f32+0x7e>
 8001702:	780b      	ldrb	r3, [r1, #0]
 8001704:	091b      	lsrs	r3, r3, #4
 8001706:	f852 7023 	ldr.w	r7, [r2, r3, lsl #2]
 800170a:	6027      	str	r7, [r4, #0]
 800170c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001710:	f003 030f 	and.w	r3, r3, #15
 8001714:	f852 7023 	ldr.w	r7, [r2, r3, lsl #2]
 8001718:	6067      	str	r7, [r4, #4]
 800171a:	f104 0308 	add.w	r3, r4, #8
 800171e:	780c      	ldrb	r4, [r1, #0]
 8001720:	0924      	lsrs	r4, r4, #4
 8001722:	f852 7024 	ldr.w	r7, [r2, r4, lsl #2]
 8001726:	601f      	str	r7, [r3, #0]
 8001728:	1e40      	subs	r0, r0, #1
 800172a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800172e:	f004 040f 	and.w	r4, r4, #15
 8001732:	f852 7024 	ldr.w	r7, [r2, r4, lsl #2]
 8001736:	605f      	str	r7, [r3, #4]
 8001738:	f103 0408 	add.w	r4, r3, #8
 800173c:	d1e1      	bne.n	8001702 <ai_dict_decompress_f32+0x42>
 800173e:	07f0      	lsls	r0, r6, #31
 8001740:	d5ca      	bpl.n	80016d8 <ai_dict_decompress_f32+0x18>
 8001742:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001746:	091b      	lsrs	r3, r3, #4
 8001748:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800174c:	f844 0b04 	str.w	r0, [r4], #4
 8001750:	e7c2      	b.n	80016d8 <ai_dict_decompress_f32+0x18>
 8001752:	42ac      	cmp	r4, r5
 8001754:	d21c      	bcs.n	8001790 <ai_dict_decompress_f32+0xd0>
 8001756:	780b      	ldrb	r3, [r1, #0]
 8001758:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800175c:	6020      	str	r0, [r4, #0]
 800175e:	1d20      	adds	r0, r4, #4
 8001760:	42a8      	cmp	r0, r5
 8001762:	bf3f      	itttt	cc
 8001764:	784b      	ldrbcc	r3, [r1, #1]
 8001766:	f852 4023 	ldrcc.w	r4, [r2, r3, lsl #2]
 800176a:	f840 4b04 	strcc.w	r4, [r0], #4
 800176e:	42a8      	cmpcc	r0, r5
 8001770:	d20e      	bcs.n	8001790 <ai_dict_decompress_f32+0xd0>
 8001772:	788b      	ldrb	r3, [r1, #2]
 8001774:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8001778:	f840 4b04 	str.w	r4, [r0], #4
 800177c:	42a8      	cmp	r0, r5
 800177e:	d207      	bcs.n	8001790 <ai_dict_decompress_f32+0xd0>
 8001780:	78cb      	ldrb	r3, [r1, #3]
 8001782:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8001786:	6004      	str	r4, [r0, #0]
 8001788:	1d09      	adds	r1, r1, #4
 800178a:	1d04      	adds	r4, r0, #4
 800178c:	42ac      	cmp	r4, r5
 800178e:	d3e2      	bcc.n	8001756 <ai_dict_decompress_f32+0x96>
 8001790:	bcf0      	pop	{r4, r5, r6, r7}
 8001792:	4770      	bx	lr

08001794 <forward_conv2d>:
 8001794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001798:	4605      	mov	r5, r0
 800179a:	b0a7      	sub	sp, #156	; 0x9c
 800179c:	6968      	ldr	r0, [r5, #20]
 800179e:	6800      	ldr	r0, [r0, #0]
 80017a0:	68c2      	ldr	r2, [r0, #12]
 80017a2:	6813      	ldr	r3, [r2, #0]
 80017a4:	6801      	ldr	r1, [r0, #0]
 80017a6:	6982      	ldr	r2, [r0, #24]
 80017a8:	8c00      	ldrh	r0, [r0, #32]
 80017aa:	680c      	ldr	r4, [r1, #0]
 80017ac:	f8d2 b000 	ldr.w	fp, [r2]
 80017b0:	2801      	cmp	r0, #1
 80017b2:	6890      	ldr	r0, [r2, #8]
 80017b4:	bfcc      	ite	gt
 80017b6:	6851      	ldrgt	r1, [r2, #4]
 80017b8:	2100      	movle	r1, #0
 80017ba:	68a2      	ldr	r2, [r4, #8]
 80017bc:	921b      	str	r2, [sp, #108]	; 0x6c
 80017be:	689e      	ldr	r6, [r3, #8]
 80017c0:	9603      	str	r6, [sp, #12]
 80017c2:	f8d3 a010 	ldr.w	sl, [r3, #16]
 80017c6:	68da      	ldr	r2, [r3, #12]
 80017c8:	9215      	str	r2, [sp, #84]	; 0x54
 80017ca:	6926      	ldr	r6, [r4, #16]
 80017cc:	961a      	str	r6, [sp, #104]	; 0x68
 80017ce:	68e7      	ldr	r7, [r4, #12]
 80017d0:	9721      	str	r7, [sp, #132]	; 0x84
 80017d2:	6a6e      	ldr	r6, [r5, #36]	; 0x24
 80017d4:	f8ad 6040 	strh.w	r6, [sp, #64]	; 0x40
 80017d8:	8d2f      	ldrh	r7, [r5, #40]	; 0x28
 80017da:	9720      	str	r7, [sp, #128]	; 0x80
 80017dc:	6baa      	ldr	r2, [r5, #56]	; 0x38
 80017de:	6817      	ldr	r7, [r2, #0]
 80017e0:	f8b2 8004 	ldrh.w	r8, [r2, #4]
 80017e4:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80017e6:	9219      	str	r2, [sp, #100]	; 0x64
 80017e8:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 80017ea:	9618      	str	r6, [sp, #96]	; 0x60
 80017ec:	f8db 200c 	ldr.w	r2, [fp, #12]
 80017f0:	9214      	str	r2, [sp, #80]	; 0x50
 80017f2:	f8db 6008 	ldr.w	r6, [fp, #8]
 80017f6:	9613      	str	r6, [sp, #76]	; 0x4c
 80017f8:	69aa      	ldr	r2, [r5, #24]
 80017fa:	921f      	str	r2, [sp, #124]	; 0x7c
 80017fc:	6822      	ldr	r2, [r4, #0]
 80017fe:	6894      	ldr	r4, [r2, #8]
 8001800:	941e      	str	r4, [sp, #120]	; 0x78
 8001802:	f8db 2000 	ldr.w	r2, [fp]
 8001806:	f8d2 9008 	ldr.w	r9, [r2, #8]
 800180a:	b119      	cbz	r1, 8001814 <forward_conv2d+0x80>
 800180c:	680a      	ldr	r2, [r1, #0]
 800180e:	6894      	ldr	r4, [r2, #8]
 8001810:	9417      	str	r4, [sp, #92]	; 0x5c
 8001812:	e001      	b.n	8001818 <forward_conv2d+0x84>
 8001814:	2200      	movs	r2, #0
 8001816:	9217      	str	r2, [sp, #92]	; 0x5c
 8001818:	6819      	ldr	r1, [r3, #0]
 800181a:	688a      	ldr	r2, [r1, #8]
 800181c:	9202      	str	r2, [sp, #8]
 800181e:	69e9      	ldr	r1, [r5, #28]
 8001820:	b158      	cbz	r0, 800183a <forward_conv2d+0xa6>
 8001822:	6803      	ldr	r3, [r0, #0]
 8001824:	689a      	ldr	r2, [r3, #8]
 8001826:	9212      	str	r2, [sp, #72]	; 0x48
 8001828:	921c      	str	r2, [sp, #112]	; 0x70
 800182a:	69c0      	ldr	r0, [r0, #28]
 800182c:	9024      	str	r0, [sp, #144]	; 0x90
 800182e:	6859      	ldr	r1, [r3, #4]
 8001830:	6818      	ldr	r0, [r3, #0]
 8001832:	f001 ff65 	bl	8003700 <ai_array_get_byte_size>
 8001836:	4604      	mov	r4, r0
 8001838:	e00a      	b.n	8001850 <forward_conv2d+0xbc>
 800183a:	b119      	cbz	r1, 8001844 <forward_conv2d+0xb0>
 800183c:	6888      	ldr	r0, [r1, #8]
 800183e:	9012      	str	r0, [sp, #72]	; 0x48
 8001840:	901c      	str	r0, [sp, #112]	; 0x70
 8001842:	e002      	b.n	800184a <forward_conv2d+0xb6>
 8001844:	2200      	movs	r2, #0
 8001846:	9212      	str	r2, [sp, #72]	; 0x48
 8001848:	911c      	str	r1, [sp, #112]	; 0x70
 800184a:	2200      	movs	r2, #0
 800184c:	9224      	str	r2, [sp, #144]	; 0x90
 800184e:	2401      	movs	r4, #1
 8001850:	6a28      	ldr	r0, [r5, #32]
 8001852:	2800      	cmp	r0, #0
 8001854:	aa18      	add	r2, sp, #96	; 0x60
 8001856:	bf12      	itee	ne
 8001858:	9023      	strne	r0, [sp, #140]	; 0x8c
 800185a:	f8df 1b88 	ldreq.w	r1, [pc, #2952]	; 80023e4 <.text_22>
 800185e:	9123      	streq	r1, [sp, #140]	; 0x8c
 8001860:	9914      	ldr	r1, [sp, #80]	; 0x50
 8001862:	8813      	ldrh	r3, [r2, #0]
 8001864:	1e48      	subs	r0, r1, #1
 8001866:	1e5b      	subs	r3, r3, #1
 8001868:	aa19      	add	r2, sp, #100	; 0x64
 800186a:	fb03 1100 	mla	r1, r3, r0, r1
 800186e:	9116      	str	r1, [sp, #88]	; 0x58
 8001870:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8001872:	8813      	ldrh	r3, [r2, #0]
 8001874:	1e41      	subs	r1, r0, #1
 8001876:	1e5b      	subs	r3, r3, #1
 8001878:	fb03 0001 	mla	r0, r3, r1, r0
 800187c:	901d      	str	r0, [sp, #116]	; 0x74
 800187e:	2600      	movs	r6, #0
 8001880:	f8db 1000 	ldr.w	r1, [fp]
 8001884:	6808      	ldr	r0, [r1, #0]
 8001886:	2200      	movs	r2, #0
 8001888:	11c3      	asrs	r3, r0, #7
 800188a:	ea4f 5c60 	mov.w	ip, r0, asr #21
 800188e:	1440      	asrs	r0, r0, #17
 8001890:	f000 000f 	and.w	r0, r0, #15
 8001894:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001898:	f00c 0c03 	and.w	ip, ip, #3
 800189c:	2804      	cmp	r0, #4
 800189e:	fa23 f30c 	lsr.w	r3, r3, ip
 80018a2:	bf14      	ite	ne
 80018a4:	2808      	cmpne	r0, #8
 80018a6:	68ca      	ldreq	r2, [r1, #12]
 80018a8:	b182      	cbz	r2, 80018cc <forward_conv2d+0x138>
 80018aa:	6968      	ldr	r0, [r5, #20]
 80018ac:	6800      	ldr	r0, [r0, #0]
 80018ae:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80018b0:	6828      	ldr	r0, [r5, #0]
 80018b2:	b108      	cbz	r0, 80018b8 <forward_conv2d+0x124>
 80018b4:	6806      	ldr	r6, [r0, #0]
 80018b6:	68b6      	ldr	r6, [r6, #8]
 80018b8:	6800      	ldr	r0, [r0, #0]
 80018ba:	6840      	ldr	r0, [r0, #4]
 80018bc:	9001      	str	r0, [sp, #4]
 80018be:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80018c0:	9000      	str	r0, [sp, #0]
 80018c2:	4630      	mov	r0, r6
 80018c4:	6889      	ldr	r1, [r1, #8]
 80018c6:	f7ff fefb 	bl	80016c0 <ai_dict_decompress_f32>
 80018ca:	b906      	cbnz	r6, 80018ce <forward_conv2d+0x13a>
 80018cc:	464e      	mov	r6, r9
 80018ce:	b2bf      	uxth	r7, r7
 80018d0:	427f      	negs	r7, r7
 80018d2:	f1ba 0f00 	cmp.w	sl, #0
 80018d6:	d065      	beq.n	80019a4 <forward_conv2d+0x210>
 80018d8:	f1c8 0800 	rsb	r8, r8, #0
 80018dc:	f8cd 8094 	str.w	r8, [sp, #148]	; 0x94
 80018e0:	4652      	mov	r2, sl
 80018e2:	9d02      	ldr	r5, [sp, #8]
 80018e4:	f8dd a00c 	ldr.w	sl, [sp, #12]
 80018e8:	9626      	str	r6, [sp, #152]	; 0x98
 80018ea:	9711      	str	r7, [sp, #68]	; 0x44
 80018ec:	9222      	str	r2, [sp, #136]	; 0x88
 80018ee:	9825      	ldr	r0, [sp, #148]	; 0x94
 80018f0:	9911      	ldr	r1, [sp, #68]	; 0x44
 80018f2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80018f4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80018f6:	9e16      	ldr	r6, [sp, #88]	; 0x58
 80018f8:	4249      	negs	r1, r1
 80018fa:	bfd8      	it	le
 80018fc:	2100      	movle	r1, #0
 80018fe:	1ad2      	subs	r2, r2, r3
 8001900:	42b2      	cmp	r2, r6
 8001902:	bf3d      	ittte	cc
 8001904:	9b1a      	ldrcc	r3, [sp, #104]	; 0x68
 8001906:	9a11      	ldrcc	r2, [sp, #68]	; 0x44
 8001908:	1a9a      	subcc	r2, r3, r2
 800190a:	4632      	movcs	r2, r6
 800190c:	900b      	str	r0, [sp, #44]	; 0x2c
 800190e:	9109      	str	r1, [sp, #36]	; 0x24
 8001910:	920a      	str	r2, [sp, #40]	; 0x28
 8001912:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8001914:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
 8001918:	9008      	str	r0, [sp, #32]
 800191a:	9107      	str	r1, [sp, #28]
 800191c:	f8cd a008 	str.w	sl, [sp, #8]
 8001920:	9814      	ldr	r0, [sp, #80]	; 0x50
 8001922:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8001924:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8001926:	9006      	str	r0, [sp, #24]
 8001928:	9105      	str	r1, [sp, #20]
 800192a:	b21b      	sxth	r3, r3
 800192c:	9815      	ldr	r0, [sp, #84]	; 0x54
 800192e:	9921      	ldr	r1, [sp, #132]	; 0x84
 8001930:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8001932:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8001934:	930f      	str	r3, [sp, #60]	; 0x3c
 8001936:	9004      	str	r0, [sp, #16]
 8001938:	9103      	str	r1, [sp, #12]
 800193a:	b236      	sxth	r6, r6
 800193c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800193e:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8001940:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8001942:	960e      	str	r6, [sp, #56]	; 0x38
 8001944:	930d      	str	r3, [sp, #52]	; 0x34
 8001946:	9001      	str	r0, [sp, #4]
 8001948:	9100      	str	r1, [sp, #0]
 800194a:	4629      	mov	r1, r5
 800194c:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800194e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8001950:	960c      	str	r6, [sp, #48]	; 0x30
 8001952:	2000      	movs	r0, #0
 8001954:	f7ff fc86 	bl	8001264 <ai_conv2d_stripe_f32>
 8001958:	9815      	ldr	r0, [sp, #84]	; 0x54
 800195a:	b1d8      	cbz	r0, 8001994 <forward_conv2d+0x200>
 800195c:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800195e:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 8001960:	f8dd 8090 	ldr.w	r8, [sp, #144]	; 0x90
 8001964:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8001968:	4683      	mov	fp, r0
 800196a:	4633      	mov	r3, r6
 800196c:	4652      	mov	r2, sl
 800196e:	4629      	mov	r1, r5
 8001970:	4628      	mov	r0, r5
 8001972:	47c8      	blx	r9
 8001974:	4446      	add	r6, r8
 8001976:	1bf0      	subs	r0, r6, r7
 8001978:	42a0      	cmp	r0, r4
 800197a:	bfa8      	it	ge
 800197c:	463e      	movge	r6, r7
 800197e:	f1bb 0b01 	subs.w	fp, fp, #1
 8001982:	eb05 058a 	add.w	r5, r5, sl, lsl #2
 8001986:	d1f0      	bne.n	800196a <forward_conv2d+0x1d6>
 8001988:	9612      	str	r6, [sp, #72]	; 0x48
 800198a:	971c      	str	r7, [sp, #112]	; 0x70
 800198c:	f8cd 8090 	str.w	r8, [sp, #144]	; 0x90
 8001990:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8001994:	9811      	ldr	r0, [sp, #68]	; 0x44
 8001996:	9920      	ldr	r1, [sp, #128]	; 0x80
 8001998:	1808      	adds	r0, r1, r0
 800199a:	9011      	str	r0, [sp, #68]	; 0x44
 800199c:	9822      	ldr	r0, [sp, #136]	; 0x88
 800199e:	1e40      	subs	r0, r0, #1
 80019a0:	9022      	str	r0, [sp, #136]	; 0x88
 80019a2:	d1a4      	bne.n	80018ee <forward_conv2d+0x15a>
 80019a4:	b027      	add	sp, #156	; 0x9c
 80019a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080019ac <forward_conv2d_nl_pool>:
 80019ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80019b0:	4607      	mov	r7, r0
 80019b2:	b0b9      	sub	sp, #228	; 0xe4
 80019b4:	6978      	ldr	r0, [r7, #20]
 80019b6:	6800      	ldr	r0, [r0, #0]
 80019b8:	68c2      	ldr	r2, [r0, #12]
 80019ba:	6816      	ldr	r6, [r2, #0]
 80019bc:	6801      	ldr	r1, [r0, #0]
 80019be:	6982      	ldr	r2, [r0, #24]
 80019c0:	8c00      	ldrh	r0, [r0, #32]
 80019c2:	680b      	ldr	r3, [r1, #0]
 80019c4:	f8d2 b000 	ldr.w	fp, [r2]
 80019c8:	689c      	ldr	r4, [r3, #8]
 80019ca:	2801      	cmp	r0, #1
 80019cc:	6890      	ldr	r0, [r2, #8]
 80019ce:	bfcc      	ite	gt
 80019d0:	6851      	ldrgt	r1, [r2, #4]
 80019d2:	2100      	movle	r1, #0
 80019d4:	9424      	str	r4, [sp, #144]	; 0x90
 80019d6:	68b5      	ldr	r5, [r6, #8]
 80019d8:	9502      	str	r5, [sp, #8]
 80019da:	6934      	ldr	r4, [r6, #16]
 80019dc:	9423      	str	r4, [sp, #140]	; 0x8c
 80019de:	68f5      	ldr	r5, [r6, #12]
 80019e0:	9522      	str	r5, [sp, #136]	; 0x88
 80019e2:	691c      	ldr	r4, [r3, #16]
 80019e4:	941c      	str	r4, [sp, #112]	; 0x70
 80019e6:	68dd      	ldr	r5, [r3, #12]
 80019e8:	952e      	str	r5, [sp, #184]	; 0xb8
 80019ea:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 80019ec:	f8ad 404c 	strh.w	r4, [sp, #76]	; 0x4c
 80019f0:	8d3d      	ldrh	r5, [r7, #40]	; 0x28
 80019f2:	9521      	str	r5, [sp, #132]	; 0x84
 80019f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80019f6:	69bd      	ldr	r5, [r7, #24]
 80019f8:	f8b2 8000 	ldrh.w	r8, [r2]
 80019fc:	f8b2 9004 	ldrh.w	r9, [r2, #4]
 8001a00:	6894      	ldr	r4, [r2, #8]
 8001a02:	952d      	str	r5, [sp, #180]	; 0xb4
 8001a04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a06:	9220      	str	r2, [sp, #128]	; 0x80
 8001a08:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 8001a0a:	951f      	str	r5, [sp, #124]	; 0x7c
 8001a0c:	f8db 2008 	ldr.w	r2, [fp, #8]
 8001a10:	921b      	str	r2, [sp, #108]	; 0x6c
 8001a12:	f8db 500c 	ldr.w	r5, [fp, #12]
 8001a16:	951a      	str	r5, [sp, #104]	; 0x68
 8001a18:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001a1a:	922c      	str	r2, [sp, #176]	; 0xb0
 8001a1c:	6c7d      	ldr	r5, [r7, #68]	; 0x44
 8001a1e:	952b      	str	r5, [sp, #172]	; 0xac
 8001a20:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001a22:	9216      	str	r2, [sp, #88]	; 0x58
 8001a24:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001a26:	6815      	ldr	r5, [r2, #0]
 8001a28:	f8d2 e004 	ldr.w	lr, [r2, #4]
 8001a2c:	f8cd e0a8 	str.w	lr, [sp, #168]	; 0xa8
 8001a30:	6892      	ldr	r2, [r2, #8]
 8001a32:	921e      	str	r2, [sp, #120]	; 0x78
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	6893      	ldr	r3, [r2, #8]
 8001a38:	9329      	str	r3, [sp, #164]	; 0xa4
 8001a3a:	f8db 2000 	ldr.w	r2, [fp]
 8001a3e:	f8d2 a008 	ldr.w	sl, [r2, #8]
 8001a42:	b119      	cbz	r1, 8001a4c <forward_conv2d_nl_pool+0xa0>
 8001a44:	680a      	ldr	r2, [r1, #0]
 8001a46:	6893      	ldr	r3, [r2, #8]
 8001a48:	931d      	str	r3, [sp, #116]	; 0x74
 8001a4a:	e001      	b.n	8001a50 <forward_conv2d_nl_pool+0xa4>
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	921d      	str	r2, [sp, #116]	; 0x74
 8001a50:	69f9      	ldr	r1, [r7, #28]
 8001a52:	b158      	cbz	r0, 8001a6c <forward_conv2d_nl_pool+0xc0>
 8001a54:	6803      	ldr	r3, [r0, #0]
 8001a56:	689a      	ldr	r2, [r3, #8]
 8001a58:	9218      	str	r2, [sp, #96]	; 0x60
 8001a5a:	9210      	str	r2, [sp, #64]	; 0x40
 8001a5c:	69c0      	ldr	r0, [r0, #28]
 8001a5e:	9015      	str	r0, [sp, #84]	; 0x54
 8001a60:	6859      	ldr	r1, [r3, #4]
 8001a62:	6818      	ldr	r0, [r3, #0]
 8001a64:	f001 fe4c 	bl	8003700 <ai_array_get_byte_size>
 8001a68:	9014      	str	r0, [sp, #80]	; 0x50
 8001a6a:	e00b      	b.n	8001a84 <forward_conv2d_nl_pool+0xd8>
 8001a6c:	b119      	cbz	r1, 8001a76 <forward_conv2d_nl_pool+0xca>
 8001a6e:	6889      	ldr	r1, [r1, #8]
 8001a70:	9118      	str	r1, [sp, #96]	; 0x60
 8001a72:	9110      	str	r1, [sp, #64]	; 0x40
 8001a74:	e002      	b.n	8001a7c <forward_conv2d_nl_pool+0xd0>
 8001a76:	2200      	movs	r2, #0
 8001a78:	9118      	str	r1, [sp, #96]	; 0x60
 8001a7a:	9210      	str	r2, [sp, #64]	; 0x40
 8001a7c:	2100      	movs	r1, #0
 8001a7e:	2201      	movs	r2, #1
 8001a80:	9115      	str	r1, [sp, #84]	; 0x54
 8001a82:	9214      	str	r2, [sp, #80]	; 0x50
 8001a84:	aa1f      	add	r2, sp, #124	; 0x7c
 8001a86:	6a38      	ldr	r0, [r7, #32]
 8001a88:	2800      	cmp	r0, #0
 8001a8a:	bf12      	itee	ne
 8001a8c:	9030      	strne	r0, [sp, #192]	; 0xc0
 8001a8e:	f8df 1954 	ldreq.w	r1, [pc, #2388]	; 80023e4 <.text_22>
 8001a92:	9130      	streq	r1, [sp, #192]	; 0xc0
 8001a94:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001a96:	981a      	ldr	r0, [sp, #104]	; 0x68
 8001a98:	8813      	ldrh	r3, [r2, #0]
 8001a9a:	9128      	str	r1, [sp, #160]	; 0xa0
 8001a9c:	1e5b      	subs	r3, r3, #1
 8001a9e:	1e41      	subs	r1, r0, #1
 8001aa0:	aa20      	add	r2, sp, #128	; 0x80
 8001aa2:	fb03 0001 	mla	r0, r3, r1, r0
 8001aa6:	9019      	str	r0, [sp, #100]	; 0x64
 8001aa8:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8001aaa:	8813      	ldrh	r3, [r2, #0]
 8001aac:	1e48      	subs	r0, r1, #1
 8001aae:	1e5b      	subs	r3, r3, #1
 8001ab0:	fb03 1100 	mla	r1, r3, r0, r1
 8001ab4:	9127      	str	r1, [sp, #156]	; 0x9c
 8001ab6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001ab8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8001aba:	9819      	ldr	r0, [sp, #100]	; 0x64
 8001abc:	9112      	str	r1, [sp, #72]	; 0x48
 8001abe:	1a12      	subs	r2, r2, r0
 8001ac0:	4442      	add	r2, r8
 8001ac2:	9921      	ldr	r1, [sp, #132]	; 0x84
 8001ac4:	fa12 f084 	uxtah	r0, r2, r4
 8001ac8:	fbb0 f1f1 	udiv	r1, r0, r1
 8001acc:	1c49      	adds	r1, r1, #1
 8001ace:	9111      	str	r1, [sp, #68]	; 0x44
 8001ad0:	2400      	movs	r4, #0
 8001ad2:	f8db 1000 	ldr.w	r1, [fp]
 8001ad6:	6808      	ldr	r0, [r1, #0]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	11c3      	asrs	r3, r0, #7
 8001adc:	ea4f 5c60 	mov.w	ip, r0, asr #21
 8001ae0:	1440      	asrs	r0, r0, #17
 8001ae2:	f000 000f 	and.w	r0, r0, #15
 8001ae6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001aea:	f00c 0c03 	and.w	ip, ip, #3
 8001aee:	2804      	cmp	r0, #4
 8001af0:	fa23 f30c 	lsr.w	r3, r3, ip
 8001af4:	bf14      	ite	ne
 8001af6:	2808      	cmpne	r0, #8
 8001af8:	68ca      	ldreq	r2, [r1, #12]
 8001afa:	b1a2      	cbz	r2, 8001b26 <forward_conv2d_nl_pool+0x17a>
 8001afc:	6978      	ldr	r0, [r7, #20]
 8001afe:	6800      	ldr	r0, [r0, #0]
 8001b00:	f8d0 e024 	ldr.w	lr, [r0, #36]	; 0x24
 8001b04:	f8de 0004 	ldr.w	r0, [lr, #4]
 8001b08:	b108      	cbz	r0, 8001b0e <forward_conv2d_nl_pool+0x162>
 8001b0a:	6804      	ldr	r4, [r0, #0]
 8001b0c:	68a4      	ldr	r4, [r4, #8]
 8001b0e:	6800      	ldr	r0, [r0, #0]
 8001b10:	6840      	ldr	r0, [r0, #4]
 8001b12:	9001      	str	r0, [sp, #4]
 8001b14:	9824      	ldr	r0, [sp, #144]	; 0x90
 8001b16:	9000      	str	r0, [sp, #0]
 8001b18:	4620      	mov	r0, r4
 8001b1a:	6889      	ldr	r1, [r1, #8]
 8001b1c:	f7ff fdd0 	bl	80016c0 <ai_dict_decompress_f32>
 8001b20:	b10c      	cbz	r4, 8001b26 <forward_conv2d_nl_pool+0x17a>
 8001b22:	4623      	mov	r3, r4
 8001b24:	e000      	b.n	8001b28 <forward_conv2d_nl_pool+0x17c>
 8001b26:	4653      	mov	r3, sl
 8001b28:	697a      	ldr	r2, [r7, #20]
 8001b2a:	6814      	ldr	r4, [r2, #0]
 8001b2c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001b2e:	6814      	ldr	r4, [r2, #0]
 8001b30:	6827      	ldr	r7, [r4, #0]
 8001b32:	f8d7 a008 	ldr.w	sl, [r7, #8]
 8001b36:	68e2      	ldr	r2, [r4, #12]
 8001b38:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 8001b3a:	f8dd c008 	ldr.w	ip, [sp, #8]
 8001b3e:	6830      	ldr	r0, [r6, #0]
 8001b40:	4357      	muls	r7, r2
 8001b42:	fb0c f707 	mul.w	r7, ip, r7
 8001b46:	00bf      	lsls	r7, r7, #2
 8001b48:	9736      	str	r7, [sp, #216]	; 0xd8
 8001b4a:	2100      	movs	r1, #0
 8001b4c:	af16      	add	r7, sp, #88	; 0x58
 8001b4e:	f1c9 0900 	rsb	r9, r9, #0
 8001b52:	5e7f      	ldrsh	r7, [r7, r1]
 8001b54:	9735      	str	r7, [sp, #212]	; 0xd4
 8001b56:	b22d      	sxth	r5, r5
 8001b58:	9f02      	ldr	r7, [sp, #8]
 8001b5a:	f8dd e088 	ldr.w	lr, [sp, #136]	; 0x88
 8001b5e:	fb0e f707 	mul.w	r7, lr, r7
 8001b62:	9734      	str	r7, [sp, #208]	; 0xd0
 8001b64:	462e      	mov	r6, r5
 8001b66:	9f02      	ldr	r7, [sp, #8]
 8001b68:	4357      	muls	r7, r2
 8001b6a:	9733      	str	r7, [sp, #204]	; 0xcc
 8001b6c:	f8cd 90c8 	str.w	r9, [sp, #200]	; 0xc8
 8001b70:	f1c8 0800 	rsb	r8, r8, #0
 8001b74:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8001b76:	9731      	str	r7, [sp, #196]	; 0xc4
 8001b78:	9f23      	ldr	r7, [sp, #140]	; 0x8c
 8001b7a:	2f00      	cmp	r7, #0
 8001b7c:	f000 8100 	beq.w	8001d80 <forward_conv2d_nl_pool+0x3d4>
 8001b80:	46e1      	mov	r9, ip
 8001b82:	9337      	str	r3, [sp, #220]	; 0xdc
 8001b84:	9026      	str	r0, [sp, #152]	; 0x98
 8001b86:	912f      	str	r1, [sp, #188]	; 0xbc
 8001b88:	9225      	str	r2, [sp, #148]	; 0x94
 8001b8a:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8001b8e:	9811      	ldr	r0, [sp, #68]	; 0x44
 8001b90:	2800      	cmp	r0, #0
 8001b92:	dd5d      	ble.n	8001c50 <forward_conv2d_nl_pool+0x2a4>
 8001b94:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8001b96:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8001b98:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8001b9a:	9832      	ldr	r0, [sp, #200]	; 0xc8
 8001b9c:	4249      	negs	r1, r1
 8001b9e:	bfd8      	it	le
 8001ba0:	2100      	movle	r1, #0
 8001ba2:	1ad2      	subs	r2, r2, r3
 8001ba4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8001ba6:	429a      	cmp	r2, r3
 8001ba8:	bf3d      	ittte	cc
 8001baa:	9b1c      	ldrcc	r3, [sp, #112]	; 0x70
 8001bac:	9a17      	ldrcc	r2, [sp, #92]	; 0x5c
 8001bae:	1a9a      	subcc	r2, r3, r2
 8001bb0:	461a      	movcs	r2, r3
 8001bb2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8001bb4:	b21b      	sxth	r3, r3
 8001bb6:	930f      	str	r3, [sp, #60]	; 0x3c
 8001bb8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8001bba:	b21b      	sxth	r3, r3
 8001bbc:	930e      	str	r3, [sp, #56]	; 0x38
 8001bbe:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8001bc0:	930d      	str	r3, [sp, #52]	; 0x34
 8001bc2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8001bc4:	930c      	str	r3, [sp, #48]	; 0x30
 8001bc6:	900b      	str	r0, [sp, #44]	; 0x2c
 8001bc8:	9109      	str	r1, [sp, #36]	; 0x24
 8001bca:	920a      	str	r2, [sp, #40]	; 0x28
 8001bcc:	982d      	ldr	r0, [sp, #180]	; 0xb4
 8001bce:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
 8001bd2:	9008      	str	r0, [sp, #32]
 8001bd4:	9107      	str	r1, [sp, #28]
 8001bd6:	f8cd 9008 	str.w	r9, [sp, #8]
 8001bda:	981a      	ldr	r0, [sp, #104]	; 0x68
 8001bdc:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8001bde:	9006      	str	r0, [sp, #24]
 8001be0:	9105      	str	r1, [sp, #20]
 8001be2:	9825      	ldr	r0, [sp, #148]	; 0x94
 8001be4:	992e      	ldr	r1, [sp, #184]	; 0xb8
 8001be6:	9004      	str	r0, [sp, #16]
 8001be8:	9103      	str	r1, [sp, #12]
 8001bea:	9824      	ldr	r0, [sp, #144]	; 0x90
 8001bec:	991d      	ldr	r1, [sp, #116]	; 0x74
 8001bee:	9001      	str	r0, [sp, #4]
 8001bf0:	9100      	str	r1, [sp, #0]
 8001bf2:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 8001bf4:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8001bf6:	4651      	mov	r1, sl
 8001bf8:	2000      	movs	r0, #0
 8001bfa:	f7ff fb33 	bl	8001264 <ai_conv2d_stripe_f32>
 8001bfe:	9825      	ldr	r0, [sp, #148]	; 0x94
 8001c00:	b320      	cbz	r0, 8001c4c <forward_conv2d_nl_pool+0x2a0>
 8001c02:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8001c06:	9f30      	ldr	r7, [sp, #192]	; 0xc0
 8001c08:	4683      	mov	fp, r0
 8001c0a:	4643      	mov	r3, r8
 8001c0c:	464a      	mov	r2, r9
 8001c0e:	4651      	mov	r1, sl
 8001c10:	4650      	mov	r0, sl
 8001c12:	47b8      	blx	r7
 8001c14:	9815      	ldr	r0, [sp, #84]	; 0x54
 8001c16:	9931      	ldr	r1, [sp, #196]	; 0xc4
 8001c18:	4480      	add	r8, r0
 8001c1a:	9814      	ldr	r0, [sp, #80]	; 0x50
 8001c1c:	eba8 0101 	sub.w	r1, r8, r1
 8001c20:	4281      	cmp	r1, r0
 8001c22:	6820      	ldr	r0, [r4, #0]
 8001c24:	6841      	ldr	r1, [r0, #4]
 8001c26:	68c0      	ldr	r0, [r0, #12]
 8001c28:	bfa8      	it	ge
 8001c2a:	f8dd 8040 	ldrge.w	r8, [sp, #64]	; 0x40
 8001c2e:	eb0a 0a89 	add.w	sl, sl, r9, lsl #2
 8001c32:	eb00 0281 	add.w	r2, r0, r1, lsl #2
 8001c36:	4592      	cmp	sl, r2
 8001c38:	d302      	bcc.n	8001c40 <forward_conv2d_nl_pool+0x294>
 8001c3a:	0089      	lsls	r1, r1, #2
 8001c3c:	4249      	negs	r1, r1
 8001c3e:	448a      	add	sl, r1
 8001c40:	f1bb 0b01 	subs.w	fp, fp, #1
 8001c44:	d1e1      	bne.n	8001c0a <forward_conv2d_nl_pool+0x25e>
 8001c46:	f8cd 8060 	str.w	r8, [sp, #96]	; 0x60
 8001c4a:	9730      	str	r7, [sp, #192]	; 0xc0
 8001c4c:	1c76      	adds	r6, r6, #1
 8001c4e:	b236      	sxth	r6, r6
 8001c50:	9811      	ldr	r0, [sp, #68]	; 0x44
 8001c52:	1e40      	subs	r0, r0, #1
 8001c54:	2800      	cmp	r0, #0
 8001c56:	9011      	str	r0, [sp, #68]	; 0x44
 8001c58:	dc4e      	bgt.n	8001cf8 <forward_conv2d_nl_pool+0x34c>
 8001c5a:	9833      	ldr	r0, [sp, #204]	; 0xcc
 8001c5c:	4370      	muls	r0, r6
 8001c5e:	0080      	lsls	r0, r0, #2
 8001c60:	4240      	negs	r0, r0
 8001c62:	eb0a 0100 	add.w	r1, sl, r0
 8001c66:	6820      	ldr	r0, [r4, #0]
 8001c68:	68c2      	ldr	r2, [r0, #12]
 8001c6a:	4291      	cmp	r1, r2
 8001c6c:	bf3c      	itt	cc
 8001c6e:	6843      	ldrcc	r3, [r0, #4]
 8001c70:	eb01 0183 	addcc.w	r1, r1, r3, lsl #2
 8001c74:	428a      	cmp	r2, r1
 8001c76:	4657      	mov	r7, sl
 8001c78:	d232      	bcs.n	8001ce0 <forward_conv2d_nl_pool+0x334>
 8001c7a:	ab12      	add	r3, sp, #72	; 0x48
 8001c7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c80:	429e      	cmp	r6, r3
 8001c82:	d02d      	beq.n	8001ce0 <forward_conv2d_nl_pool+0x334>
 8001c84:	6843      	ldr	r3, [r0, #4]
 8001c86:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8001c8a:	4291      	cmp	r1, r2
 8001c8c:	f080 8028 	bcs.w	8001ce0 <forward_conv2d_nl_pool+0x334>
 8001c90:	f851 3b04 	ldr.w	r3, [r1], #4
 8001c94:	f84a 3b04 	str.w	r3, [sl], #4
 8001c98:	68c2      	ldr	r2, [r0, #12]
 8001c9a:	6843      	ldr	r3, [r0, #4]
 8001c9c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8001ca0:	4291      	cmp	r1, r2
 8001ca2:	d21d      	bcs.n	8001ce0 <forward_conv2d_nl_pool+0x334>
 8001ca4:	f851 2b04 	ldr.w	r2, [r1], #4
 8001ca8:	f84a 2b04 	str.w	r2, [sl], #4
 8001cac:	6843      	ldr	r3, [r0, #4]
 8001cae:	68c2      	ldr	r2, [r0, #12]
 8001cb0:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8001cb4:	4291      	cmp	r1, r2
 8001cb6:	d213      	bcs.n	8001ce0 <forward_conv2d_nl_pool+0x334>
 8001cb8:	f851 2b04 	ldr.w	r2, [r1], #4
 8001cbc:	f84a 2b04 	str.w	r2, [sl], #4
 8001cc0:	6843      	ldr	r3, [r0, #4]
 8001cc2:	68c2      	ldr	r2, [r0, #12]
 8001cc4:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8001cc8:	4291      	cmp	r1, r2
 8001cca:	d209      	bcs.n	8001ce0 <forward_conv2d_nl_pool+0x334>
 8001ccc:	f851 2b04 	ldr.w	r2, [r1], #4
 8001cd0:	f84a 2b04 	str.w	r2, [sl], #4
 8001cd4:	6843      	ldr	r3, [r0, #4]
 8001cd6:	68c2      	ldr	r2, [r0, #12]
 8001cd8:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8001cdc:	4291      	cmp	r1, r2
 8001cde:	d3d7      	bcc.n	8001c90 <forward_conv2d_nl_pool+0x2e4>
 8001ce0:	9811      	ldr	r0, [sp, #68]	; 0x44
 8001ce2:	2800      	cmp	r0, #0
 8001ce4:	d506      	bpl.n	8001cf4 <forward_conv2d_nl_pool+0x348>
 8001ce6:	9936      	ldr	r1, [sp, #216]	; 0xd8
 8001ce8:	4650      	mov	r0, sl
 8001cea:	f007 ff56 	bl	8009b9a <__aeabi_memclr>
 8001cee:	981e      	ldr	r0, [sp, #120]	; 0x78
 8001cf0:	1986      	adds	r6, r0, r6
 8001cf2:	b236      	sxth	r6, r6
 8001cf4:	9612      	str	r6, [sp, #72]	; 0x48
 8001cf6:	46ba      	mov	sl, r7
 8001cf8:	9812      	ldr	r0, [sp, #72]	; 0x48
 8001cfa:	4286      	cmp	r6, r0
 8001cfc:	d136      	bne.n	8001d6c <forward_conv2d_nl_pool+0x3c0>
 8001cfe:	982f      	ldr	r0, [sp, #188]	; 0xbc
 8001d00:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8001d02:	f8dd c0a0 	ldr.w	ip, [sp, #160]	; 0xa0
 8001d06:	9916      	ldr	r1, [sp, #88]	; 0x58
 8001d08:	1c40      	adds	r0, r0, #1
 8001d0a:	902f      	str	r0, [sp, #188]	; 0xbc
 8001d0c:	b292      	uxth	r2, r2
 8001d0e:	9826      	ldr	r0, [sp, #152]	; 0x98
 8001d10:	9008      	str	r0, [sp, #32]
 8001d12:	9206      	str	r2, [sp, #24]
 8001d14:	fa1f f389 	uxth.w	r3, r9
 8001d18:	9816      	ldr	r0, [sp, #88]	; 0x58
 8001d1a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8001d1c:	b280      	uxth	r0, r0
 8001d1e:	9005      	str	r0, [sp, #20]
 8001d20:	b292      	uxth	r2, r2
 8001d22:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8001d24:	b280      	uxth	r0, r0
 8001d26:	9002      	str	r0, [sp, #8]
 8001d28:	1a76      	subs	r6, r6, r1
 8001d2a:	2101      	movs	r1, #1
 8001d2c:	9107      	str	r1, [sp, #28]
 8001d2e:	b236      	sxth	r6, r6
 8001d30:	992b      	ldr	r1, [sp, #172]	; 0xac
 8001d32:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8001d34:	b289      	uxth	r1, r1
 8001d36:	9104      	str	r1, [sp, #16]
 8001d38:	b280      	uxth	r0, r0
 8001d3a:	b2a9      	uxth	r1, r5
 8001d3c:	9103      	str	r1, [sp, #12]
 8001d3e:	9000      	str	r0, [sp, #0]
 8001d40:	9912      	ldr	r1, [sp, #72]	; 0x48
 8001d42:	b289      	uxth	r1, r1
 8001d44:	9101      	str	r1, [sp, #4]
 8001d46:	9925      	ldr	r1, [sp, #148]	; 0x94
 8001d48:	6820      	ldr	r0, [r4, #0]
 8001d4a:	b289      	uxth	r1, r1
 8001d4c:	47e0      	blx	ip
 8001d4e:	9826      	ldr	r0, [sp, #152]	; 0x98
 8001d50:	6881      	ldr	r1, [r0, #8]
 8001d52:	9834      	ldr	r0, [sp, #208]	; 0xd0
 8001d54:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 8001d58:	9926      	ldr	r1, [sp, #152]	; 0x98
 8001d5a:	608a      	str	r2, [r1, #8]
 8001d5c:	9835      	ldr	r0, [sp, #212]	; 0xd4
 8001d5e:	1a28      	subs	r0, r5, r0
 8001d60:	2800      	cmp	r0, #0
 8001d62:	bfc3      	ittte	gt
 8001d64:	9816      	ldrgt	r0, [sp, #88]	; 0x58
 8001d66:	1a2d      	subgt	r5, r5, r0
 8001d68:	b22d      	sxthgt	r5, r5
 8001d6a:	2500      	movle	r5, #0
 8001d6c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8001d6e:	9921      	ldr	r1, [sp, #132]	; 0x84
 8001d70:	1808      	adds	r0, r1, r0
 8001d72:	9017      	str	r0, [sp, #92]	; 0x5c
 8001d74:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8001d76:	982f      	ldr	r0, [sp, #188]	; 0xbc
 8001d78:	4288      	cmp	r0, r1
 8001d7a:	f4ff af08 	bcc.w	8001b8e <forward_conv2d_nl_pool+0x1e2>
 8001d7e:	9826      	ldr	r0, [sp, #152]	; 0x98
 8001d80:	6821      	ldr	r1, [r4, #0]
 8001d82:	68ca      	ldr	r2, [r1, #12]
 8001d84:	608a      	str	r2, [r1, #8]
 8001d86:	68c1      	ldr	r1, [r0, #12]
 8001d88:	6081      	str	r1, [r0, #8]
 8001d8a:	b039      	add	sp, #228	; 0xe4
 8001d8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001d90 <forward_dense>:
 8001d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d94:	b081      	sub	sp, #4
 8001d96:	ed2d 8b02 	vpush	{d8}
 8001d9a:	b088      	sub	sp, #32
 8001d9c:	6940      	ldr	r0, [r0, #20]
 8001d9e:	6800      	ldr	r0, [r0, #0]
 8001da0:	6801      	ldr	r1, [r0, #0]
 8001da2:	680a      	ldr	r2, [r1, #0]
 8001da4:	68c3      	ldr	r3, [r0, #12]
 8001da6:	6981      	ldr	r1, [r0, #24]
 8001da8:	8c00      	ldrh	r0, [r0, #32]
 8001daa:	681f      	ldr	r7, [r3, #0]
 8001dac:	f8d1 e000 	ldr.w	lr, [r1]
 8001db0:	6894      	ldr	r4, [r2, #8]
 8001db2:	f8de 9000 	ldr.w	r9, [lr]
 8001db6:	f8d7 c008 	ldr.w	ip, [r7, #8]
 8001dba:	f8d9 5000 	ldr.w	r5, [r9]
 8001dbe:	6812      	ldr	r2, [r2, #0]
 8001dc0:	2802      	cmp	r0, #2
 8001dc2:	bfac      	ite	ge
 8001dc4:	684b      	ldrge	r3, [r1, #4]
 8001dc6:	2300      	movlt	r3, #0
 8001dc8:	68f9      	ldr	r1, [r7, #12]
 8001dca:	6938      	ldr	r0, [r7, #16]
 8001dcc:	683f      	ldr	r7, [r7, #0]
 8001dce:	68bf      	ldr	r7, [r7, #8]
 8001dd0:	4341      	muls	r1, r0
 8001dd2:	2000      	movs	r0, #0
 8001dd4:	11ee      	asrs	r6, r5, #7
 8001dd6:	f006 087f 	and.w	r8, r6, #127	; 0x7f
 8001dda:	156e      	asrs	r6, r5, #21
 8001ddc:	146d      	asrs	r5, r5, #17
 8001dde:	f005 050f 	and.w	r5, r5, #15
 8001de2:	2d04      	cmp	r5, #4
 8001de4:	bf14      	ite	ne
 8001de6:	2d08      	cmpne	r5, #8
 8001de8:	f8d9 000c 	ldreq.w	r0, [r9, #12]
 8001dec:	6895      	ldr	r5, [r2, #8]
 8001dee:	f8de 9018 	ldr.w	r9, [lr, #24]
 8001df2:	f006 0603 	and.w	r6, r6, #3
 8001df6:	2900      	cmp	r1, #0
 8001df8:	fa28 f806 	lsr.w	r8, r8, r6
 8001dfc:	eb07 028c 	add.w	r2, r7, ip, lsl #2
 8001e00:	f000 80eb 	beq.w	8001fda <forward_dense+0x24a>
 8001e04:	f8cd e01c 	str.w	lr, [sp, #28]
 8001e08:	9305      	str	r3, [sp, #20]
 8001e0a:	f8cd c018 	str.w	ip, [sp, #24]
 8001e0e:	9201      	str	r2, [sp, #4]
 8001e10:	9104      	str	r1, [sp, #16]
 8001e12:	9907      	ldr	r1, [sp, #28]
 8001e14:	680a      	ldr	r2, [r1, #0]
 8001e16:	9905      	ldr	r1, [sp, #20]
 8001e18:	f8d2 b008 	ldr.w	fp, [r2, #8]
 8001e1c:	9b01      	ldr	r3, [sp, #4]
 8001e1e:	2900      	cmp	r1, #0
 8001e20:	bf1a      	itte	ne
 8001e22:	680a      	ldrne	r2, [r1, #0]
 8001e24:	6892      	ldrne	r2, [r2, #8]
 8001e26:	2200      	moveq	r2, #0
 8001e28:	2800      	cmp	r0, #0
 8001e2a:	f040 80ab 	bne.w	8001f84 <forward_dense+0x1f4>
 8001e2e:	429f      	cmp	r7, r3
 8001e30:	f080 80c7 	bcs.w	8001fc2 <forward_dense+0x232>
 8001e34:	9003      	str	r0, [sp, #12]
 8001e36:	2a00      	cmp	r2, #0
 8001e38:	bf0e      	itee	eq
 8001e3a:	ed9f 0a6b 	vldreq	s0, [pc, #428]	; 8001fe8 <.text_17>
 8001e3e:	ed92 0a00 	vldrne	s0, [r2]
 8001e42:	1d12      	addne	r2, r2, #4
 8001e44:	2c04      	cmp	r4, #4
 8001e46:	4620      	mov	r0, r4
 8001e48:	46ae      	mov	lr, r5
 8001e4a:	46dc      	mov	ip, fp
 8001e4c:	eddf 0a66 	vldr	s1, [pc, #408]	; 8001fe8 <.text_17>
 8001e50:	d35d      	bcc.n	8001f0e <forward_dense+0x17e>
 8001e52:	08a1      	lsrs	r1, r4, #2
 8001e54:	07ce      	lsls	r6, r1, #31
 8001e56:	d51c      	bpl.n	8001e92 <forward_dense+0x102>
 8001e58:	ed9c 4a00 	vldr	s8, [ip]
 8001e5c:	edde 4a00 	vldr	s9, [lr]
 8001e60:	ed9c 3a01 	vldr	s6, [ip, #4]
 8001e64:	edde 3a01 	vldr	s7, [lr, #4]
 8001e68:	ed9c 2a02 	vldr	s4, [ip, #8]
 8001e6c:	edde 2a02 	vldr	s5, [lr, #8]
 8001e70:	ed9c 1a03 	vldr	s2, [ip, #12]
 8001e74:	edde 1a03 	vldr	s3, [lr, #12]
 8001e78:	ee44 0a24 	vmla.f32	s1, s8, s9
 8001e7c:	ee43 0a23 	vmla.f32	s1, s6, s7
 8001e80:	ee42 0a22 	vmla.f32	s1, s4, s5
 8001e84:	ee41 0a21 	vmla.f32	s1, s2, s3
 8001e88:	f10e 0e10 	add.w	lr, lr, #16
 8001e8c:	f10c 0c10 	add.w	ip, ip, #16
 8001e90:	1f00      	subs	r0, r0, #4
 8001e92:	0849      	lsrs	r1, r1, #1
 8001e94:	f000 803b 	beq.w	8001f0e <forward_dense+0x17e>
 8001e98:	edde 4a00 	vldr	s9, [lr]
 8001e9c:	edde 3a01 	vldr	s7, [lr, #4]
 8001ea0:	edde 2a02 	vldr	s5, [lr, #8]
 8001ea4:	edde 1a03 	vldr	s3, [lr, #12]
 8001ea8:	ed9c 1a03 	vldr	s2, [ip, #12]
 8001eac:	ed9c 2a02 	vldr	s4, [ip, #8]
 8001eb0:	ed9c 3a01 	vldr	s6, [ip, #4]
 8001eb4:	ed9c 4a00 	vldr	s8, [ip]
 8001eb8:	ee44 0a24 	vmla.f32	s1, s8, s9
 8001ebc:	ee43 0a23 	vmla.f32	s1, s6, s7
 8001ec0:	ee42 0a22 	vmla.f32	s1, s4, s5
 8001ec4:	ee41 0a21 	vmla.f32	s1, s2, s3
 8001ec8:	f10e 0610 	add.w	r6, lr, #16
 8001ecc:	f10c 0c10 	add.w	ip, ip, #16
 8001ed0:	edd6 8a00 	vldr	s17, [r6]
 8001ed4:	ed9c 8a00 	vldr	s16, [ip]
 8001ed8:	ed9c 7a01 	vldr	s14, [ip, #4]
 8001edc:	edd6 7a01 	vldr	s15, [r6, #4]
 8001ee0:	ed9c 6a02 	vldr	s12, [ip, #8]
 8001ee4:	edd6 6a02 	vldr	s13, [r6, #8]
 8001ee8:	ed9c 5a03 	vldr	s10, [ip, #12]
 8001eec:	edd6 5a03 	vldr	s11, [r6, #12]
 8001ef0:	ee48 0a28 	vmla.f32	s1, s16, s17
 8001ef4:	ee47 0a27 	vmla.f32	s1, s14, s15
 8001ef8:	3808      	subs	r0, #8
 8001efa:	ee46 0a26 	vmla.f32	s1, s12, s13
 8001efe:	1e49      	subs	r1, r1, #1
 8001f00:	ee45 0a25 	vmla.f32	s1, s10, s11
 8001f04:	f106 0e10 	add.w	lr, r6, #16
 8001f08:	f10c 0c10 	add.w	ip, ip, #16
 8001f0c:	d1c4      	bne.n	8001e98 <forward_dense+0x108>
 8001f0e:	b378      	cbz	r0, 8001f70 <forward_dense+0x1e0>
 8001f10:	f010 0103 	ands.w	r1, r0, #3
 8001f14:	f000 800c 	beq.w	8001f30 <forward_dense+0x1a0>
 8001f18:	ed9c 1a00 	vldr	s2, [ip]
 8001f1c:	edde 1a00 	vldr	s3, [lr]
 8001f20:	1e49      	subs	r1, r1, #1
 8001f22:	ee41 0a21 	vmla.f32	s1, s2, s3
 8001f26:	f10e 0e04 	add.w	lr, lr, #4
 8001f2a:	f10c 0c04 	add.w	ip, ip, #4
 8001f2e:	d1f3      	bne.n	8001f18 <forward_dense+0x188>
 8001f30:	0880      	lsrs	r0, r0, #2
 8001f32:	d01d      	beq.n	8001f70 <forward_dense+0x1e0>
 8001f34:	ed9c 2a00 	vldr	s4, [ip]
 8001f38:	ed9e 1a00 	vldr	s2, [lr]
 8001f3c:	eddc 1a01 	vldr	s3, [ip, #4]
 8001f40:	edde 2a01 	vldr	s5, [lr, #4]
 8001f44:	ee42 0a01 	vmla.f32	s1, s4, s2
 8001f48:	ee41 0aa2 	vmla.f32	s1, s3, s5
 8001f4c:	ed9c 2a02 	vldr	s4, [ip, #8]
 8001f50:	ed9e 1a02 	vldr	s2, [lr, #8]
 8001f54:	eddc 1a03 	vldr	s3, [ip, #12]
 8001f58:	edde 2a03 	vldr	s5, [lr, #12]
 8001f5c:	ee42 0a01 	vmla.f32	s1, s4, s2
 8001f60:	1e40      	subs	r0, r0, #1
 8001f62:	ee41 0aa2 	vmla.f32	s1, s3, s5
 8001f66:	f10e 0e10 	add.w	lr, lr, #16
 8001f6a:	f10c 0c10 	add.w	ip, ip, #16
 8001f6e:	d1e1      	bne.n	8001f34 <forward_dense+0x1a4>
 8001f70:	ee30 0a20 	vadd.f32	s0, s0, s1
 8001f74:	ed87 0a00 	vstr	s0, [r7]
 8001f78:	1d3f      	adds	r7, r7, #4
 8001f7a:	429f      	cmp	r7, r3
 8001f7c:	44cb      	add	fp, r9
 8001f7e:	f4ff af5a 	bcc.w	8001e36 <forward_dense+0xa6>
 8001f82:	e01d      	b.n	8001fc0 <forward_dense+0x230>
 8001f84:	429f      	cmp	r7, r3
 8001f86:	d21c      	bcs.n	8001fc2 <forward_dense+0x232>
 8001f88:	469a      	mov	sl, r3
 8001f8a:	9003      	str	r0, [sp, #12]
 8001f8c:	4616      	mov	r6, r2
 8001f8e:	2e00      	cmp	r6, #0
 8001f90:	bf14      	ite	ne
 8001f92:	f856 0b04 	ldrne.w	r0, [r6], #4
 8001f96:	2000      	moveq	r0, #0
 8001f98:	9002      	str	r0, [sp, #8]
 8001f9a:	f1b8 0f04 	cmp.w	r8, #4
 8001f9e:	9a03      	ldr	r2, [sp, #12]
 8001fa0:	9400      	str	r4, [sp, #0]
 8001fa2:	462b      	mov	r3, r5
 8001fa4:	4659      	mov	r1, fp
 8001fa6:	a802      	add	r0, sp, #8
 8001fa8:	d102      	bne.n	8001fb0 <forward_dense+0x220>
 8001faa:	f7ff fb39 	bl	8001620 <ai_dict4_dot_array_f32>
 8001fae:	e001      	b.n	8001fb4 <forward_dense+0x224>
 8001fb0:	f7ff f9ca 	bl	8001348 <ai_dict8_dot_array_f32>
 8001fb4:	9802      	ldr	r0, [sp, #8]
 8001fb6:	f847 0b04 	str.w	r0, [r7], #4
 8001fba:	4557      	cmp	r7, sl
 8001fbc:	44cb      	add	fp, r9
 8001fbe:	d3e6      	bcc.n	8001f8e <forward_dense+0x1fe>
 8001fc0:	9803      	ldr	r0, [sp, #12]
 8001fc2:	9901      	ldr	r1, [sp, #4]
 8001fc4:	9a06      	ldr	r2, [sp, #24]
 8001fc6:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8001fca:	9904      	ldr	r1, [sp, #16]
 8001fcc:	9301      	str	r3, [sp, #4]
 8001fce:	1e49      	subs	r1, r1, #1
 8001fd0:	eb05 0584 	add.w	r5, r5, r4, lsl #2
 8001fd4:	9104      	str	r1, [sp, #16]
 8001fd6:	f47f af1c 	bne.w	8001e12 <forward_dense+0x82>
 8001fda:	b008      	add	sp, #32
 8001fdc:	ecbd 8b02 	vpop	{d8}
 8001fe0:	b001      	add	sp, #4
 8001fe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08001fe8 <.text_17>:
 8001fe8:	00000000 	.word	0x00000000

08001fec <arm_mat_gemm_f32>:
 8001fec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ff0:	4615      	mov	r5, r2
 8001ff2:	b08a      	sub	sp, #40	; 0x28
 8001ff4:	6842      	ldr	r2, [r0, #4]
 8001ff6:	9203      	str	r2, [sp, #12]
 8001ff8:	4699      	mov	r9, r3
 8001ffa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8001ffc:	686c      	ldr	r4, [r5, #4]
 8001ffe:	9400      	str	r4, [sp, #0]
 8002000:	468b      	mov	fp, r1
 8002002:	685e      	ldr	r6, [r3, #4]
 8002004:	8804      	ldrh	r4, [r0, #0]
 8002006:	f8b3 c000 	ldrh.w	ip, [r3]
 800200a:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800200e:	8840      	ldrh	r0, [r0, #2]
 8002010:	f8bb 1000 	ldrh.w	r1, [fp]
 8002014:	f8bb 2002 	ldrh.w	r2, [fp, #2]
 8002018:	f8b5 e000 	ldrh.w	lr, [r5]
 800201c:	886f      	ldrh	r7, [r5, #2]
 800201e:	f8db 3004 	ldr.w	r3, [fp, #4]
 8002022:	9306      	str	r3, [sp, #24]
 8002024:	9305      	str	r3, [sp, #20]
 8002026:	2500      	movs	r5, #0
 8002028:	fa4f f389 	sxtb.w	r3, r9
 800202c:	2b00      	cmp	r3, #0
 800202e:	bf0c      	ite	eq
 8002030:	46a0      	moveq	r8, r4
 8002032:	4680      	movne	r8, r0
 8002034:	2f01      	cmp	r7, #1
 8002036:	bf0c      	ite	eq
 8002038:	2300      	moveq	r3, #0
 800203a:	2304      	movne	r3, #4
 800203c:	f1be 0f01 	cmp.w	lr, #1
 8002040:	d104      	bne.n	800204c <arm_mat_gemm_f32+0x60>
 8002042:	2f01      	cmp	r7, #1
 8002044:	d007      	beq.n	8002056 <arm_mat_gemm_f32+0x6a>
 8002046:	f1ca 0e00 	rsb	lr, sl, #0
 800204a:	e005      	b.n	8002058 <arm_mat_gemm_f32+0x6c>
 800204c:	2f01      	cmp	r7, #1
 800204e:	bf08      	it	eq
 8002050:	f04f 0e01 	moveq.w	lr, #1
 8002054:	d000      	beq.n	8002058 <arm_mat_gemm_f32+0x6c>
 8002056:	46ae      	mov	lr, r5
 8002058:	fa0f f78e 	sxth.w	r7, lr
 800205c:	9704      	str	r7, [sp, #16]
 800205e:	fa4f f789 	sxtb.w	r7, r9
 8002062:	2f00      	cmp	r7, #0
 8002064:	bf0c      	ite	eq
 8002066:	46a3      	moveq	fp, r4
 8002068:	4683      	movne	fp, r0
 800206a:	45e3      	cmp	fp, ip
 800206c:	d117      	bne.n	800209e <arm_mat_gemm_f32+0xb2>
 800206e:	f99d e04c 	ldrsb.w	lr, [sp, #76]	; 0x4c
 8002072:	f1be 0f00 	cmp.w	lr, #0
 8002076:	bf0c      	ite	eq
 8002078:	9201      	streq	r2, [sp, #4]
 800207a:	9101      	strne	r1, [sp, #4]
 800207c:	9f01      	ldr	r7, [sp, #4]
 800207e:	4557      	cmp	r7, sl
 8002080:	d10d      	bne.n	800209e <arm_mat_gemm_f32+0xb2>
 8002082:	fa4f f789 	sxtb.w	r7, r9
 8002086:	2f00      	cmp	r7, #0
 8002088:	bf0c      	ite	eq
 800208a:	4683      	moveq	fp, r0
 800208c:	46a3      	movne	fp, r4
 800208e:	f1be 0f00 	cmp.w	lr, #0
 8002092:	bf0c      	ite	eq
 8002094:	460f      	moveq	r7, r1
 8002096:	4617      	movne	r7, r2
 8002098:	45bb      	cmp	fp, r7
 800209a:	f000 808d 	beq.w	80021b8 <arm_mat_gemm_f32+0x1cc>
 800209e:	fb0a f30c 	mul.w	r3, sl, ip
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	f06f 0002 	mvn.w	r0, #2
 80020a8:	f340 8083 	ble.w	80021b2 <arm_mat_gemm_f32+0x1c6>
 80020ac:	1c6d      	adds	r5, r5, #1
 80020ae:	2100      	movs	r1, #0
 80020b0:	b2aa      	uxth	r2, r5
 80020b2:	6031      	str	r1, [r6, #0]
 80020b4:	429a      	cmp	r2, r3
 80020b6:	bfbf      	itttt	lt
 80020b8:	6071      	strlt	r1, [r6, #4]
 80020ba:	1c6d      	addlt	r5, r5, #1
 80020bc:	b2aa      	uxthlt	r2, r5
 80020be:	429a      	cmplt	r2, r3
 80020c0:	da77      	bge.n	80021b2 <arm_mat_gemm_f32+0x1c6>
 80020c2:	1c6d      	adds	r5, r5, #1
 80020c4:	b2aa      	uxth	r2, r5
 80020c6:	429a      	cmp	r2, r3
 80020c8:	60b1      	str	r1, [r6, #8]
 80020ca:	da72      	bge.n	80021b2 <arm_mat_gemm_f32+0x1c6>
 80020cc:	60f1      	str	r1, [r6, #12]
 80020ce:	1c6d      	adds	r5, r5, #1
 80020d0:	3610      	adds	r6, #16
 80020d2:	b2aa      	uxth	r2, r5
 80020d4:	429a      	cmp	r2, r3
 80020d6:	dbe9      	blt.n	80020ac <arm_mat_gemm_f32+0xc0>
 80020d8:	b00a      	add	sp, #40	; 0x28
 80020da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80020de:	9d06      	ldr	r5, [sp, #24]
 80020e0:	0097      	lsls	r7, r2, #2
 80020e2:	9708      	str	r7, [sp, #32]
 80020e4:	0087      	lsls	r7, r0, #2
 80020e6:	9707      	str	r7, [sp, #28]
 80020e8:	f8cd c00c 	str.w	ip, [sp, #12]
 80020ec:	f8ad 4008 	strh.w	r4, [sp, #8]
 80020f0:	ea4f 0408 	mov.w	r4, r8
 80020f4:	f8dd c014 	ldr.w	ip, [sp, #20]
 80020f8:	fa4f f789 	sxtb.w	r7, r9
 80020fc:	2f00      	cmp	r7, #0
 80020fe:	bf0c      	ite	eq
 8002100:	4682      	moveq	sl, r0
 8002102:	f8bd a008 	ldrhne.w	sl, [sp, #8]
 8002106:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800210a:	f1ba 0f00 	cmp.w	sl, #0
 800210e:	ed9f 1ab4 	vldr	s2, [pc, #720]	; 80023e0 <.text_21>
 8002112:	d018      	beq.n	8002146 <arm_mat_gemm_f32+0x15a>
 8002114:	fa4f f789 	sxtb.w	r7, r9
 8002118:	2f00      	cmp	r7, #0
 800211a:	bf0c      	ite	eq
 800211c:	2704      	moveq	r7, #4
 800211e:	9f07      	ldrne	r7, [sp, #28]
 8002120:	f1be 0f00 	cmp.w	lr, #0
 8002124:	f1aa 0a01 	sub.w	sl, sl, #1
 8002128:	edd8 1a00 	vldr	s3, [r8]
 800212c:	ed95 2a00 	vldr	s4, [r5]
 8002130:	44b8      	add	r8, r7
 8002132:	bf0c      	ite	eq
 8002134:	9f08      	ldreq	r7, [sp, #32]
 8002136:	2704      	movne	r7, #4
 8002138:	19ed      	adds	r5, r5, r7
 800213a:	fa1f f78a 	uxth.w	r7, sl
 800213e:	2f00      	cmp	r7, #0
 8002140:	ee01 1a82 	vmla.f32	s2, s3, s4
 8002144:	d1e6      	bne.n	8002114 <arm_mat_gemm_f32+0x128>
 8002146:	ee20 1a01 	vmul.f32	s2, s0, s2
 800214a:	eddb 1a00 	vldr	s3, [fp]
 800214e:	ee00 1aa1 	vmla.f32	s2, s1, s3
 8002152:	ed86 1a00 	vstr	s2, [r6]
 8002156:	1d36      	adds	r6, r6, #4
 8002158:	1e64      	subs	r4, r4, #1
 800215a:	b2a4      	uxth	r4, r4
 800215c:	f1be 0f00 	cmp.w	lr, #0
 8002160:	bf0e      	itee	eq
 8002162:	1b15      	subeq	r5, r2, r4
 8002164:	1b0d      	subne	r5, r1, r4
 8002166:	4355      	mulne	r5, r2
 8002168:	2c00      	cmp	r4, #0
 800216a:	449b      	add	fp, r3
 800216c:	eb0c 0585 	add.w	r5, ip, r5, lsl #2
 8002170:	d1c2      	bne.n	80020f8 <arm_mat_gemm_f32+0x10c>
 8002172:	f8bd 6002 	ldrh.w	r6, [sp, #2]
 8002176:	9d03      	ldr	r5, [sp, #12]
 8002178:	f8bd 4008 	ldrh.w	r4, [sp, #8]
 800217c:	f8cd c014 	str.w	ip, [sp, #20]
 8002180:	9f01      	ldr	r7, [sp, #4]
 8002182:	443e      	add	r6, r7
 8002184:	f8ad 6002 	strh.w	r6, [sp, #2]
 8002188:	fa4f f689 	sxtb.w	r6, r9
 800218c:	2e00      	cmp	r6, #0
 800218e:	bf0c      	ite	eq
 8002190:	ea4f 0c80 	moveq.w	ip, r0, lsl #2
 8002194:	f04f 0c04 	movne.w	ip, #4
 8002198:	44ac      	add	ip, r5
 800219a:	9d04      	ldr	r5, [sp, #16]
 800219c:	f8bd 6000 	ldrh.w	r6, [sp]
 80021a0:	eb0b 0b85 	add.w	fp, fp, r5, lsl #2
 80021a4:	1e75      	subs	r5, r6, #1
 80021a6:	f8ad 5000 	strh.w	r5, [sp]
 80021aa:	f8bd 5000 	ldrh.w	r5, [sp]
 80021ae:	b965      	cbnz	r5, 80021ca <arm_mat_gemm_f32+0x1de>
 80021b0:	2000      	movs	r0, #0
 80021b2:	b00a      	add	sp, #40	; 0x28
 80021b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80021b8:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80021bc:	f8dd b000 	ldr.w	fp, [sp]
 80021c0:	9609      	str	r6, [sp, #36]	; 0x24
 80021c2:	f8ad 5002 	strh.w	r5, [sp, #2]
 80021c6:	f8ad 8000 	strh.w	r8, [sp]
 80021ca:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80021cc:	f8bd 5002 	ldrh.w	r5, [sp, #2]
 80021d0:	f1be 0f00 	cmp.w	lr, #0
 80021d4:	eb07 0685 	add.w	r6, r7, r5, lsl #2
 80021d8:	bf0c      	ite	eq
 80021da:	4690      	moveq	r8, r2
 80021dc:	4688      	movne	r8, r1
 80021de:	e77e      	b.n	80020de <arm_mat_gemm_f32+0xf2>

080021e0 <forward_gemm>:
 80021e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021e2:	4604      	mov	r4, r0
 80021e4:	b08b      	sub	sp, #44	; 0x2c
 80021e6:	6960      	ldr	r0, [r4, #20]
 80021e8:	6800      	ldr	r0, [r0, #0]
 80021ea:	6801      	ldr	r1, [r0, #0]
 80021ec:	68c3      	ldr	r3, [r0, #12]
 80021ee:	8902      	ldrh	r2, [r0, #8]
 80021f0:	2600      	movs	r6, #0
 80021f2:	2700      	movs	r7, #0
 80021f4:	680d      	ldr	r5, [r1, #0]
 80021f6:	f8d3 c000 	ldr.w	ip, [r3]
 80021fa:	2a03      	cmp	r2, #3
 80021fc:	d102      	bne.n	8002204 <forward_gemm+0x24>
 80021fe:	684e      	ldr	r6, [r1, #4]
 8002200:	688f      	ldr	r7, [r1, #8]
 8002202:	e00a      	b.n	800221a <forward_gemm+0x3a>
 8002204:	2a02      	cmp	r2, #2
 8002206:	d103      	bne.n	8002210 <forward_gemm+0x30>
 8002208:	6980      	ldr	r0, [r0, #24]
 800220a:	684e      	ldr	r6, [r1, #4]
 800220c:	6807      	ldr	r7, [r0, #0]
 800220e:	e004      	b.n	800221a <forward_gemm+0x3a>
 8002210:	2a01      	cmp	r2, #1
 8002212:	d102      	bne.n	800221a <forward_gemm+0x3a>
 8002214:	6980      	ldr	r0, [r0, #24]
 8002216:	6806      	ldr	r6, [r0, #0]
 8002218:	6847      	ldr	r7, [r0, #4]
 800221a:	f8dc 0000 	ldr.w	r0, [ip]
 800221e:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8002222:	6883      	ldr	r3, [r0, #8]
 8002224:	f8dc 1010 	ldr.w	r1, [ip, #16]
 8002228:	b292      	uxth	r2, r2
 800222a:	b289      	uxth	r1, r1
 800222c:	a808      	add	r0, sp, #32
 800222e:	f002 fb51 	bl	80048d4 <arm_mat_init_f32>
 8002232:	6829      	ldr	r1, [r5, #0]
 8002234:	688b      	ldr	r3, [r1, #8]
 8002236:	68aa      	ldr	r2, [r5, #8]
 8002238:	6929      	ldr	r1, [r5, #16]
 800223a:	b292      	uxth	r2, r2
 800223c:	b289      	uxth	r1, r1
 800223e:	a806      	add	r0, sp, #24
 8002240:	f002 fb48 	bl	80048d4 <arm_mat_init_f32>
 8002244:	6830      	ldr	r0, [r6, #0]
 8002246:	68b2      	ldr	r2, [r6, #8]
 8002248:	6883      	ldr	r3, [r0, #8]
 800224a:	6931      	ldr	r1, [r6, #16]
 800224c:	b292      	uxth	r2, r2
 800224e:	b289      	uxth	r1, r1
 8002250:	a804      	add	r0, sp, #16
 8002252:	f002 fb3f 	bl	80048d4 <arm_mat_init_f32>
 8002256:	6838      	ldr	r0, [r7, #0]
 8002258:	68ba      	ldr	r2, [r7, #8]
 800225a:	6883      	ldr	r3, [r0, #8]
 800225c:	6939      	ldr	r1, [r7, #16]
 800225e:	b292      	uxth	r2, r2
 8002260:	b289      	uxth	r1, r1
 8002262:	a802      	add	r0, sp, #8
 8002264:	f002 fb36 	bl	80048d4 <arm_mat_init_f32>
 8002268:	a808      	add	r0, sp, #32
 800226a:	9001      	str	r0, [sp, #4]
 800226c:	aa02      	add	r2, sp, #8
 800226e:	f994 1021 	ldrsb.w	r1, [r4, #33]	; 0x21
 8002272:	9100      	str	r1, [sp, #0]
 8002274:	a904      	add	r1, sp, #16
 8002276:	f994 3020 	ldrsb.w	r3, [r4, #32]
 800227a:	edd4 0a07 	vldr	s1, [r4, #28]
 800227e:	ed94 0a06 	vldr	s0, [r4, #24]
 8002282:	a806      	add	r0, sp, #24
 8002284:	f7ff feb2 	bl	8001fec <arm_mat_gemm_f32>
 8002288:	b00b      	add	sp, #44	; 0x2c
 800228a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800228c <forward_matmul>:
 800228c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002290:	b08b      	sub	sp, #44	; 0x2c
 8002292:	6940      	ldr	r0, [r0, #20]
 8002294:	6801      	ldr	r1, [r0, #0]
 8002296:	680a      	ldr	r2, [r1, #0]
 8002298:	6810      	ldr	r0, [r2, #0]
 800229a:	6857      	ldr	r7, [r2, #4]
 800229c:	68ca      	ldr	r2, [r1, #12]
 800229e:	6814      	ldr	r4, [r2, #0]
 80022a0:	b90f      	cbnz	r7, 80022a6 <forward_matmul+0x1a>
 80022a2:	6989      	ldr	r1, [r1, #24]
 80022a4:	680f      	ldr	r7, [r1, #0]
 80022a6:	68a2      	ldr	r2, [r4, #8]
 80022a8:	f8d0 e004 	ldr.w	lr, [r0, #4]
 80022ac:	687d      	ldr	r5, [r7, #4]
 80022ae:	f8d4 c004 	ldr.w	ip, [r4, #4]
 80022b2:	68c1      	ldr	r1, [r0, #12]
 80022b4:	f8d7 800c 	ldr.w	r8, [r7, #12]
 80022b8:	f8d4 b00c 	ldr.w	fp, [r4, #12]
 80022bc:	6923      	ldr	r3, [r4, #16]
 80022be:	9306      	str	r3, [sp, #24]
 80022c0:	fb01 fa0e 	mul.w	sl, r1, lr
 80022c4:	6824      	ldr	r4, [r4, #0]
 80022c6:	68a3      	ldr	r3, [r4, #8]
 80022c8:	6904      	ldr	r4, [r0, #16]
 80022ca:	434c      	muls	r4, r1
 80022cc:	fb0e f404 	mul.w	r4, lr, r4
 80022d0:	940a      	str	r4, [sp, #40]	; 0x28
 80022d2:	693e      	ldr	r6, [r7, #16]
 80022d4:	fb08 f606 	mul.w	r6, r8, r6
 80022d8:	436e      	muls	r6, r5
 80022da:	2a00      	cmp	r2, #0
 80022dc:	9609      	str	r6, [sp, #36]	; 0x24
 80022de:	fb08 f805 	mul.w	r8, r8, r5
 80022e2:	d079      	beq.n	80023d8 <forward_matmul+0x14c>
 80022e4:	2400      	movs	r4, #0
 80022e6:	46a1      	mov	r9, r4
 80022e8:	9202      	str	r2, [sp, #8]
 80022ea:	9a06      	ldr	r2, [sp, #24]
 80022ec:	2a00      	cmp	r2, #0
 80022ee:	d069      	beq.n	80023c4 <forward_matmul+0x138>
 80022f0:	2600      	movs	r6, #0
 80022f2:	9600      	str	r6, [sp, #0]
 80022f4:	f8cd a014 	str.w	sl, [sp, #20]
 80022f8:	f8cd b00c 	str.w	fp, [sp, #12]
 80022fc:	9a06      	ldr	r2, [sp, #24]
 80022fe:	f8dd a000 	ldr.w	sl, [sp]
 8002302:	9201      	str	r2, [sp, #4]
 8002304:	9a03      	ldr	r2, [sp, #12]
 8002306:	2a00      	cmp	r2, #0
 8002308:	d052      	beq.n	80023b0 <forward_matmul+0x124>
 800230a:	9507      	str	r5, [sp, #28]
 800230c:	f04f 0b00 	mov.w	fp, #0
 8002310:	f8cd c010 	str.w	ip, [sp, #16]
 8002314:	9200      	str	r2, [sp, #0]
 8002316:	9a04      	ldr	r2, [sp, #16]
 8002318:	2a00      	cmp	r2, #0
 800231a:	d03f      	beq.n	800239c <forward_matmul+0x110>
 800231c:	f04f 0c00 	mov.w	ip, #0
 8002320:	9008      	str	r0, [sp, #32]
 8002322:	9808      	ldr	r0, [sp, #32]
 8002324:	6805      	ldr	r5, [r0, #0]
 8002326:	6838      	ldr	r0, [r7, #0]
 8002328:	68ae      	ldr	r6, [r5, #8]
 800232a:	6880      	ldr	r0, [r0, #8]
 800232c:	1936      	adds	r6, r6, r4
 800232e:	4456      	add	r6, sl
 8002330:	4448      	add	r0, r9
 8002332:	eb06 050c 	add.w	r5, r6, ip
 8002336:	4458      	add	r0, fp
 8002338:	eb00 060c 	add.w	r6, r0, ip
 800233c:	ed9f 0a28 	vldr	s0, [pc, #160]	; 80023e0 <.text_21>
 8002340:	b321      	cbz	r1, 800238c <forward_matmul+0x100>
 8002342:	07c8      	lsls	r0, r1, #31
 8002344:	d509      	bpl.n	800235a <forward_matmul+0xce>
 8002346:	edd5 0a00 	vldr	s1, [r5]
 800234a:	ed96 1a00 	vldr	s2, [r6]
 800234e:	ee00 0a81 	vmla.f32	s0, s1, s2
 8002352:	eb05 058e 	add.w	r5, r5, lr, lsl #2
 8002356:	eb06 0688 	add.w	r6, r6, r8, lsl #2
 800235a:	0848      	lsrs	r0, r1, #1
 800235c:	f000 8016 	beq.w	800238c <forward_matmul+0x100>
 8002360:	edd5 0a00 	vldr	s1, [r5]
 8002364:	ed96 1a00 	vldr	s2, [r6]
 8002368:	eb05 058e 	add.w	r5, r5, lr, lsl #2
 800236c:	eb06 0688 	add.w	r6, r6, r8, lsl #2
 8002370:	ee00 0a81 	vmla.f32	s0, s1, s2
 8002374:	edd5 0a00 	vldr	s1, [r5]
 8002378:	ed96 1a00 	vldr	s2, [r6]
 800237c:	1e40      	subs	r0, r0, #1
 800237e:	ee00 0a81 	vmla.f32	s0, s1, s2
 8002382:	eb05 058e 	add.w	r5, r5, lr, lsl #2
 8002386:	eb06 0688 	add.w	r6, r6, r8, lsl #2
 800238a:	d1e9      	bne.n	8002360 <forward_matmul+0xd4>
 800238c:	ed83 0a00 	vstr	s0, [r3]
 8002390:	1d1b      	adds	r3, r3, #4
 8002392:	1e52      	subs	r2, r2, #1
 8002394:	f10c 0c04 	add.w	ip, ip, #4
 8002398:	d1c3      	bne.n	8002322 <forward_matmul+0x96>
 800239a:	9808      	ldr	r0, [sp, #32]
 800239c:	9d00      	ldr	r5, [sp, #0]
 800239e:	9a07      	ldr	r2, [sp, #28]
 80023a0:	1e6d      	subs	r5, r5, #1
 80023a2:	eb0b 0b82 	add.w	fp, fp, r2, lsl #2
 80023a6:	9500      	str	r5, [sp, #0]
 80023a8:	d1b5      	bne.n	8002316 <forward_matmul+0x8a>
 80023aa:	4615      	mov	r5, r2
 80023ac:	f8dd c010 	ldr.w	ip, [sp, #16]
 80023b0:	9e01      	ldr	r6, [sp, #4]
 80023b2:	9a05      	ldr	r2, [sp, #20]
 80023b4:	1e76      	subs	r6, r6, #1
 80023b6:	eb0a 0a82 	add.w	sl, sl, r2, lsl #2
 80023ba:	9601      	str	r6, [sp, #4]
 80023bc:	d1a2      	bne.n	8002304 <forward_matmul+0x78>
 80023be:	4692      	mov	sl, r2
 80023c0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80023c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80023c6:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80023c8:	eb09 0982 	add.w	r9, r9, r2, lsl #2
 80023cc:	9a02      	ldr	r2, [sp, #8]
 80023ce:	1e52      	subs	r2, r2, #1
 80023d0:	eb04 0486 	add.w	r4, r4, r6, lsl #2
 80023d4:	9202      	str	r2, [sp, #8]
 80023d6:	d188      	bne.n	80022ea <forward_matmul+0x5e>
 80023d8:	b00b      	add	sp, #44	; 0x2c
 80023da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080023e0 <.text_21>:
 80023e0:	00000000 	.word	0x00000000

080023e4 <.text_22>:
 80023e4:	08001345 	.word	0x08001345

080023e8 <nl_func_sm_channel_f32>:
 80023e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80023ec:	460f      	mov	r7, r1
 80023ee:	4614      	mov	r4, r2
 80023f0:	ed2d 8b02 	vpush	{d8}
 80023f4:	2c02      	cmp	r4, #2
 80023f6:	4606      	mov	r6, r0
 80023f8:	ed97 8a00 	vldr	s16, [r7]
 80023fc:	eddf 8ac5 	vldr	s17, [pc, #788]	; 8002714 <.text_12>
 8002400:	d33d      	bcc.n	800247e <nl_func_sm_channel_f32+0x96>
 8002402:	1e61      	subs	r1, r4, #1
 8002404:	1d3a      	adds	r2, r7, #4
 8002406:	f011 0003 	ands.w	r0, r1, #3
 800240a:	d00c      	beq.n	8002426 <nl_func_sm_channel_f32+0x3e>
 800240c:	ed92 0a00 	vldr	s0, [r2]
 8002410:	eeb4 0a48 	vcmp.f32	s0, s16
 8002414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002418:	bf58      	it	pl
 800241a:	eeb0 8a40 	vmovpl.f32	s16, s0
 800241e:	1e40      	subs	r0, r0, #1
 8002420:	f102 0204 	add.w	r2, r2, #4
 8002424:	d1f2      	bne.n	800240c <nl_func_sm_channel_f32+0x24>
 8002426:	0889      	lsrs	r1, r1, #2
 8002428:	f000 802b 	beq.w	8002482 <nl_func_sm_channel_f32+0x9a>
 800242c:	ed92 0a00 	vldr	s0, [r2]
 8002430:	eeb4 0a48 	vcmp.f32	s0, s16
 8002434:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002438:	bf58      	it	pl
 800243a:	eeb0 8a40 	vmovpl.f32	s16, s0
 800243e:	ed92 0a01 	vldr	s0, [r2, #4]
 8002442:	eeb4 0a48 	vcmp.f32	s0, s16
 8002446:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800244a:	bf58      	it	pl
 800244c:	eeb0 8a40 	vmovpl.f32	s16, s0
 8002450:	ed92 0a02 	vldr	s0, [r2, #8]
 8002454:	eeb4 0a48 	vcmp.f32	s0, s16
 8002458:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800245c:	bf58      	it	pl
 800245e:	eeb0 8a40 	vmovpl.f32	s16, s0
 8002462:	ed92 0a03 	vldr	s0, [r2, #12]
 8002466:	eeb4 0a48 	vcmp.f32	s0, s16
 800246a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800246e:	bf58      	it	pl
 8002470:	eeb0 8a40 	vmovpl.f32	s16, s0
 8002474:	1e49      	subs	r1, r1, #1
 8002476:	f102 0210 	add.w	r2, r2, #16
 800247a:	d1d7      	bne.n	800242c <nl_func_sm_channel_f32+0x44>
 800247c:	e001      	b.n	8002482 <nl_func_sm_channel_f32+0x9a>
 800247e:	2c00      	cmp	r4, #0
 8002480:	d040      	beq.n	8002504 <nl_func_sm_channel_f32+0x11c>
 8002482:	46b0      	mov	r8, r6
 8002484:	ea4f 0504 	mov.w	r5, r4
 8002488:	ed97 0a00 	vldr	s0, [r7]
 800248c:	ee30 0a48 	vsub.f32	s0, s0, s16
 8002490:	f007 fc26 	bl	8009ce0 <expf>
 8002494:	1d3f      	adds	r7, r7, #4
 8002496:	ed88 0a00 	vstr	s0, [r8]
 800249a:	1e6d      	subs	r5, r5, #1
 800249c:	ee78 8a80 	vadd.f32	s17, s17, s0
 80024a0:	f108 0804 	add.w	r8, r8, #4
 80024a4:	d1f0      	bne.n	8002488 <nl_func_sm_channel_f32+0xa0>
 80024a6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80024aa:	f014 0003 	ands.w	r0, r4, #3
 80024ae:	ee80 0a28 	vdiv.f32	s0, s0, s17
 80024b2:	d009      	beq.n	80024c8 <nl_func_sm_channel_f32+0xe0>
 80024b4:	edd6 0a00 	vldr	s1, [r6]
 80024b8:	ee60 0a80 	vmul.f32	s1, s1, s0
 80024bc:	edc6 0a00 	vstr	s1, [r6]
 80024c0:	1e40      	subs	r0, r0, #1
 80024c2:	f106 0604 	add.w	r6, r6, #4
 80024c6:	d1f5      	bne.n	80024b4 <nl_func_sm_channel_f32+0xcc>
 80024c8:	08a4      	lsrs	r4, r4, #2
 80024ca:	d01b      	beq.n	8002504 <nl_func_sm_channel_f32+0x11c>
 80024cc:	edd6 0a00 	vldr	s1, [r6]
 80024d0:	ee60 0a80 	vmul.f32	s1, s1, s0
 80024d4:	edc6 0a00 	vstr	s1, [r6]
 80024d8:	1e64      	subs	r4, r4, #1
 80024da:	ed96 1a01 	vldr	s2, [r6, #4]
 80024de:	edd6 0a02 	vldr	s1, [r6, #8]
 80024e2:	ee21 1a00 	vmul.f32	s2, s2, s0
 80024e6:	ed86 1a01 	vstr	s2, [r6, #4]
 80024ea:	ee60 0a80 	vmul.f32	s1, s1, s0
 80024ee:	ed96 1a03 	vldr	s2, [r6, #12]
 80024f2:	edc6 0a02 	vstr	s1, [r6, #8]
 80024f6:	ee21 1a00 	vmul.f32	s2, s2, s0
 80024fa:	ed86 1a03 	vstr	s2, [r6, #12]
 80024fe:	f106 0610 	add.w	r6, r6, #16
 8002502:	d1e3      	bne.n	80024cc <nl_func_sm_channel_f32+0xe4>
 8002504:	ecbd 8b02 	vpop	{d8}
 8002508:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800250c <nl_func_sm_array_f32>:
 800250c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002510:	b081      	sub	sp, #4
 8002512:	460c      	mov	r4, r1
 8002514:	9f08      	ldr	r7, [sp, #32]
 8002516:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8002518:	00bf      	lsls	r7, r7, #2
 800251a:	427f      	negs	r7, r7
 800251c:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8002520:	19cd      	adds	r5, r1, r7
 8002522:	00b6      	lsls	r6, r6, #2
 8002524:	4276      	negs	r6, r6
 8002526:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 800252a:	42a5      	cmp	r5, r4
 800252c:	4698      	mov	r8, r3
 800252e:	eb00 0906 	add.w	r9, r0, r6
 8002532:	d309      	bcc.n	8002548 <nl_func_sm_array_f32+0x3c>
 8002534:	2300      	movs	r3, #0
 8002536:	4642      	mov	r2, r8
 8002538:	4629      	mov	r1, r5
 800253a:	4648      	mov	r0, r9
 800253c:	f7ff ff54 	bl	80023e8 <nl_func_sm_channel_f32>
 8002540:	19ed      	adds	r5, r5, r7
 8002542:	42a5      	cmp	r5, r4
 8002544:	44b1      	add	r9, r6
 8002546:	d2f5      	bcs.n	8002534 <nl_func_sm_array_f32+0x28>
 8002548:	b001      	add	sp, #4
 800254a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08002550 <nl_func_tanh_array_f32>:
 8002550:	b570      	push	{r4, r5, r6, lr}
 8002552:	460c      	mov	r4, r1
 8002554:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8002558:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 800255c:	1f0d      	subs	r5, r1, #4
 800255e:	1f06      	subs	r6, r0, #4
 8002560:	42a5      	cmp	r5, r4
 8002562:	d309      	bcc.n	8002578 <nl_func_tanh_array_f32+0x28>
 8002564:	ed95 0a00 	vldr	s0, [r5]
 8002568:	f007 fb68 	bl	8009c3c <tanhf>
 800256c:	ed86 0a00 	vstr	s0, [r6]
 8002570:	1f2d      	subs	r5, r5, #4
 8002572:	1f36      	subs	r6, r6, #4
 8002574:	42a5      	cmp	r5, r4
 8002576:	d2f5      	bcs.n	8002564 <nl_func_tanh_array_f32+0x14>
 8002578:	bd70      	pop	{r4, r5, r6, pc}
	...

0800257c <nl_func_sigmoid_array_f32>:
 800257c:	b570      	push	{r4, r5, r6, lr}
 800257e:	460c      	mov	r4, r1
 8002580:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8002584:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8002588:	1f0d      	subs	r5, r1, #4
 800258a:	1f06      	subs	r6, r0, #4
 800258c:	42a5      	cmp	r5, r4
 800258e:	d313      	bcc.n	80025b8 <nl_func_sigmoid_array_f32+0x3c>
 8002590:	ed95 0a00 	vldr	s0, [r5]
 8002594:	eeb1 0a40 	vneg.f32	s0, s0
 8002598:	f007 fba2 	bl	8009ce0 <expf>
 800259c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80025a0:	ee70 0a20 	vadd.f32	s1, s0, s1
 80025a4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80025a8:	ee80 0a20 	vdiv.f32	s0, s0, s1
 80025ac:	ed86 0a00 	vstr	s0, [r6]
 80025b0:	1f2d      	subs	r5, r5, #4
 80025b2:	1f36      	subs	r6, r6, #4
 80025b4:	42a5      	cmp	r5, r4
 80025b6:	d2eb      	bcs.n	8002590 <nl_func_sigmoid_array_f32+0x14>
 80025b8:	bd70      	pop	{r4, r5, r6, pc}
	...

080025bc <nl_func_hard_sigmoid_array_f32>:
 80025bc:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 80025c0:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 80025c4:	1f1b      	subs	r3, r3, #4
 80025c6:	1f00      	subs	r0, r0, #4
 80025c8:	428b      	cmp	r3, r1
 80025ca:	d321      	bcc.n	8002610 <nl_func_hard_sigmoid_array_f32+0x54>
 80025cc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80025d0:	eddf 0aa6 	vldr	s1, [pc, #664]	; 800286c <.text_16>
 80025d4:	edd3 1a00 	vldr	s3, [r3]
 80025d8:	ed9f 2aa5 	vldr	s4, [pc, #660]	; 8002870 <.text_17>
 80025dc:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 80025e0:	ee01 1a82 	vmla.f32	s2, s3, s4
 80025e4:	eeb4 1a60 	vcmp.f32	s2, s1
 80025e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025ec:	da08      	bge.n	8002600 <nl_func_hard_sigmoid_array_f32+0x44>
 80025ee:	eeb5 1a40 	vcmp.f32	s2, #0.0
 80025f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025f6:	d505      	bpl.n	8002604 <nl_func_hard_sigmoid_array_f32+0x48>
 80025f8:	ed9f 1a46 	vldr	s2, [pc, #280]	; 8002714 <.text_12>
 80025fc:	e002      	b.n	8002604 <nl_func_hard_sigmoid_array_f32+0x48>
 80025fe:	bf00      	nop
 8002600:	eeb0 1a40 	vmov.f32	s2, s0
 8002604:	ed80 1a00 	vstr	s2, [r0]
 8002608:	1f1b      	subs	r3, r3, #4
 800260a:	1f00      	subs	r0, r0, #4
 800260c:	428b      	cmp	r3, r1
 800260e:	d2e1      	bcs.n	80025d4 <nl_func_hard_sigmoid_array_f32+0x18>
 8002610:	4770      	bx	lr
	...

08002614 <nl_func_exp_array_f32>:
 8002614:	b570      	push	{r4, r5, r6, lr}
 8002616:	460c      	mov	r4, r1
 8002618:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 800261c:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8002620:	1f0d      	subs	r5, r1, #4
 8002622:	1f06      	subs	r6, r0, #4
 8002624:	42a5      	cmp	r5, r4
 8002626:	d309      	bcc.n	800263c <nl_func_exp_array_f32+0x28>
 8002628:	ed95 0a00 	vldr	s0, [r5]
 800262c:	f007 fb58 	bl	8009ce0 <expf>
 8002630:	ed86 0a00 	vstr	s0, [r6]
 8002634:	1f2d      	subs	r5, r5, #4
 8002636:	1f36      	subs	r6, r6, #4
 8002638:	42a5      	cmp	r5, r4
 800263a:	d2f5      	bcs.n	8002628 <nl_func_exp_array_f32+0x14>
 800263c:	bd70      	pop	{r4, r5, r6, pc}
	...

08002640 <nl_func_sqrt_array_f32>:
 8002640:	b570      	push	{r4, r5, r6, lr}
 8002642:	460c      	mov	r4, r1
 8002644:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8002648:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 800264c:	1f0d      	subs	r5, r1, #4
 800264e:	1f06      	subs	r6, r0, #4
 8002650:	42a5      	cmp	r5, r4
 8002652:	d309      	bcc.n	8002668 <nl_func_sqrt_array_f32+0x28>
 8002654:	ed95 0a00 	vldr	s0, [r5]
 8002658:	f001 f9a8 	bl	80039ac <ai_math_sqrt>
 800265c:	ed86 0a00 	vstr	s0, [r6]
 8002660:	1f2d      	subs	r5, r5, #4
 8002662:	1f36      	subs	r6, r6, #4
 8002664:	42a5      	cmp	r5, r4
 8002666:	d2f5      	bcs.n	8002654 <nl_func_sqrt_array_f32+0x14>
 8002668:	bd70      	pop	{r4, r5, r6, pc}
	...

0800266c <nl_func_soft_plus_array_f32>:
 800266c:	b570      	push	{r4, r5, r6, lr}
 800266e:	460c      	mov	r4, r1
 8002670:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8002674:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8002678:	1f0d      	subs	r5, r1, #4
 800267a:	1f06      	subs	r6, r0, #4
 800267c:	42a5      	cmp	r5, r4
 800267e:	d30f      	bcc.n	80026a0 <nl_func_soft_plus_array_f32+0x34>
 8002680:	ed95 0a00 	vldr	s0, [r5]
 8002684:	f007 fb2c 	bl	8009ce0 <expf>
 8002688:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800268c:	ee30 0a20 	vadd.f32	s0, s0, s1
 8002690:	f007 fba0 	bl	8009dd4 <logf>
 8002694:	ed86 0a00 	vstr	s0, [r6]
 8002698:	1f2d      	subs	r5, r5, #4
 800269a:	1f36      	subs	r6, r6, #4
 800269c:	42a5      	cmp	r5, r4
 800269e:	d2ef      	bcs.n	8002680 <nl_func_soft_plus_array_f32+0x14>
 80026a0:	bd70      	pop	{r4, r5, r6, pc}
	...

080026a4 <nl_func_soft_sign_array_f32>:
 80026a4:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 80026a8:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 80026ac:	1f1b      	subs	r3, r3, #4
 80026ae:	1f00      	subs	r0, r0, #4
 80026b0:	428b      	cmp	r3, r1
 80026b2:	d30f      	bcc.n	80026d4 <nl_func_soft_sign_array_f32+0x30>
 80026b4:	ed93 0a00 	vldr	s0, [r3]
 80026b8:	eef0 0ac0 	vabs.f32	s1, s0
 80026bc:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80026c0:	ee70 0a81 	vadd.f32	s1, s1, s2
 80026c4:	ee80 0a20 	vdiv.f32	s0, s0, s1
 80026c8:	ed80 0a00 	vstr	s0, [r0]
 80026cc:	1f1b      	subs	r3, r3, #4
 80026ce:	1f00      	subs	r0, r0, #4
 80026d0:	428b      	cmp	r3, r1
 80026d2:	d2ef      	bcs.n	80026b4 <nl_func_soft_sign_array_f32+0x10>
 80026d4:	4770      	bx	lr
	...

080026d8 <nl_func_sign_array_f32>:
 80026d8:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 80026dc:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 80026e0:	1f1b      	subs	r3, r3, #4
 80026e2:	1f00      	subs	r0, r0, #4
 80026e4:	428b      	cmp	r3, r1
 80026e6:	d314      	bcc.n	8002712 <nl_func_sign_array_f32+0x3a>
 80026e8:	f04f 32ff 	mov.w	r2, #4294967295
 80026ec:	ed93 0a00 	vldr	s0, [r3]
 80026f0:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80026f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026f8:	bfcc      	ite	gt
 80026fa:	ed9f 0ab9 	vldrgt	s0, [pc, #740]	; 80029e0 <.text_21>
 80026fe:	ee00 2a10 	vmovle	s0, r2
 8002702:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8002706:	ed80 0a00 	vstr	s0, [r0]
 800270a:	1f1b      	subs	r3, r3, #4
 800270c:	1f00      	subs	r0, r0, #4
 800270e:	428b      	cmp	r3, r1
 8002710:	d2ec      	bcs.n	80026ec <nl_func_sign_array_f32+0x14>
 8002712:	4770      	bx	lr

08002714 <.text_12>:
 8002714:	00000000 	.word	0x00000000

08002718 <nl_func_clip_array_f32>:
 8002718:	ed93 0a00 	vldr	s0, [r3]
 800271c:	edd3 0a01 	vldr	s1, [r3, #4]
 8002720:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8002724:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8002728:	1f1b      	subs	r3, r3, #4
 800272a:	1f00      	subs	r0, r0, #4
 800272c:	428b      	cmp	r3, r1
 800272e:	d315      	bcc.n	800275c <nl_func_clip_array_f32+0x44>
 8002730:	ed93 1a00 	vldr	s2, [r3]
 8002734:	eeb4 0a41 	vcmp.f32	s0, s2
 8002738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800273c:	bf58      	it	pl
 800273e:	eeb0 1a40 	vmovpl.f32	s2, s0
 8002742:	eeb4 1a60 	vcmp.f32	s2, s1
 8002746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800274a:	bf58      	it	pl
 800274c:	eeb0 1a60 	vmovpl.f32	s2, s1
 8002750:	ed80 1a00 	vstr	s2, [r0]
 8002754:	1f1b      	subs	r3, r3, #4
 8002756:	1f00      	subs	r0, r0, #4
 8002758:	428b      	cmp	r3, r1
 800275a:	d2e9      	bcs.n	8002730 <nl_func_clip_array_f32+0x18>
 800275c:	4770      	bx	lr
	...

08002760 <nl_func_hardmax_array_f32>:
 8002760:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002764:	6856      	ldr	r6, [r2, #4]
 8002766:	68d4      	ldr	r4, [r2, #12]
 8002768:	4688      	mov	r8, r1
 800276a:	4374      	muls	r4, r6
 800276c:	4605      	mov	r5, r0
 800276e:	00a1      	lsls	r1, r4, #2
 8002770:	f007 fa13 	bl	8009b9a <__aeabi_memclr>
 8002774:	2200      	movs	r2, #0
 8002776:	2c00      	cmp	r4, #0
 8002778:	4643      	mov	r3, r8
 800277a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800277e:	d05a      	beq.n	8002836 <nl_func_hardmax_array_f32+0xd6>
 8002780:	f102 0c01 	add.w	ip, r2, #1
 8002784:	eb06 0e02 	add.w	lr, r6, r2
 8002788:	45f4      	cmp	ip, lr
 800278a:	edd3 0a00 	vldr	s1, [r3]
 800278e:	d249      	bcs.n	8002824 <nl_func_hardmax_array_f32+0xc4>
 8002790:	1e71      	subs	r1, r6, #1
 8002792:	f011 0003 	ands.w	r0, r1, #3
 8002796:	eb08 078c 	add.w	r7, r8, ip, lsl #2
 800279a:	d00f      	beq.n	80027bc <nl_func_hardmax_array_f32+0x5c>
 800279c:	ed97 1a00 	vldr	s2, [r7]
 80027a0:	eef4 0a41 	vcmp.f32	s1, s2
 80027a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027a8:	bf44      	itt	mi
 80027aa:	eef0 0a41 	vmovmi.f32	s1, s2
 80027ae:	4662      	movmi	r2, ip
 80027b0:	1e40      	subs	r0, r0, #1
 80027b2:	f10c 0c01 	add.w	ip, ip, #1
 80027b6:	f107 0704 	add.w	r7, r7, #4
 80027ba:	d1ef      	bne.n	800279c <nl_func_hardmax_array_f32+0x3c>
 80027bc:	0889      	lsrs	r1, r1, #2
 80027be:	d031      	beq.n	8002824 <nl_func_hardmax_array_f32+0xc4>
 80027c0:	ed97 1a00 	vldr	s2, [r7]
 80027c4:	eef4 0a41 	vcmp.f32	s1, s2
 80027c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027cc:	bf44      	itt	mi
 80027ce:	eef0 0a41 	vmovmi.f32	s1, s2
 80027d2:	4662      	movmi	r2, ip
 80027d4:	ed97 1a01 	vldr	s2, [r7, #4]
 80027d8:	eef4 0a41 	vcmp.f32	s1, s2
 80027dc:	f10c 0001 	add.w	r0, ip, #1
 80027e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027e4:	bf44      	itt	mi
 80027e6:	eef0 0a41 	vmovmi.f32	s1, s2
 80027ea:	4602      	movmi	r2, r0
 80027ec:	ed97 1a02 	vldr	s2, [r7, #8]
 80027f0:	1c40      	adds	r0, r0, #1
 80027f2:	eef4 0a41 	vcmp.f32	s1, s2
 80027f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027fa:	bf44      	itt	mi
 80027fc:	eef0 0a41 	vmovmi.f32	s1, s2
 8002800:	4602      	movmi	r2, r0
 8002802:	ed97 1a03 	vldr	s2, [r7, #12]
 8002806:	1c40      	adds	r0, r0, #1
 8002808:	eef4 0a41 	vcmp.f32	s1, s2
 800280c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002810:	bf44      	itt	mi
 8002812:	eef0 0a41 	vmovmi.f32	s1, s2
 8002816:	4602      	movmi	r2, r0
 8002818:	1e49      	subs	r1, r1, #1
 800281a:	f100 0c01 	add.w	ip, r0, #1
 800281e:	f107 0710 	add.w	r7, r7, #16
 8002822:	d1cd      	bne.n	80027c0 <nl_func_hardmax_array_f32+0x60>
 8002824:	eb05 0082 	add.w	r0, r5, r2, lsl #2
 8002828:	4672      	mov	r2, lr
 800282a:	42a2      	cmp	r2, r4
 800282c:	ed80 0a00 	vstr	s0, [r0]
 8002830:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8002834:	d3a4      	bcc.n	8002780 <nl_func_hardmax_array_f32+0x20>
 8002836:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800283c <nl_func_relu_array_f32>:
 800283c:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8002840:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8002844:	1f1b      	subs	r3, r3, #4
 8002846:	1f00      	subs	r0, r0, #4
 8002848:	428b      	cmp	r3, r1
 800284a:	d30e      	bcc.n	800286a <nl_func_relu_array_f32+0x2e>
 800284c:	ed93 0a00 	vldr	s0, [r3]
 8002850:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8002854:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002858:	bf48      	it	mi
 800285a:	ed9f 0ab9 	vldrmi	s0, [pc, #740]	; 8002b40 <.text_25>
 800285e:	ed80 0a00 	vstr	s0, [r0]
 8002862:	1f1b      	subs	r3, r3, #4
 8002864:	1f00      	subs	r0, r0, #4
 8002866:	428b      	cmp	r3, r1
 8002868:	d2f0      	bcs.n	800284c <nl_func_relu_array_f32+0x10>
 800286a:	4770      	bx	lr

0800286c <.text_16>:
 800286c:	3f800001 	.word	0x3f800001

08002870 <.text_17>:
 8002870:	3e4ccccd 	.word	0x3e4ccccd

08002874 <nl_func_relu_generic_array_f32>:
 8002874:	ed93 0a00 	vldr	s0, [r3]
 8002878:	edd3 0a01 	vldr	s1, [r3, #4]
 800287c:	ed93 1a02 	vldr	s2, [r3, #8]
 8002880:	1f00      	subs	r0, r0, #4
 8002882:	eeb5 1a40 	vcmp.f32	s2, #0.0
 8002886:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 800288a:	1f0b      	subs	r3, r1, #4
 800288c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002890:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8002894:	d52a      	bpl.n	80028ec <nl_func_relu_generic_array_f32+0x78>
 8002896:	eef5 0a40 	vcmp.f32	s1, #0.0
 800289a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800289e:	d013      	beq.n	80028c8 <nl_func_relu_generic_array_f32+0x54>
 80028a0:	428a      	cmp	r2, r1
 80028a2:	d310      	bcc.n	80028c6 <nl_func_relu_generic_array_f32+0x52>
 80028a4:	ed92 1a00 	vldr	s2, [r2]
 80028a8:	eeb4 1a40 	vcmp.f32	s2, s0
 80028ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028b0:	bf44      	itt	mi
 80028b2:	ee31 1a40 	vsubmi.f32	s2, s2, s0
 80028b6:	ee21 1a20 	vmulmi.f32	s2, s2, s1
 80028ba:	ed80 1a00 	vstr	s2, [r0]
 80028be:	1f12      	subs	r2, r2, #4
 80028c0:	1f00      	subs	r0, r0, #4
 80028c2:	428a      	cmp	r2, r1
 80028c4:	d2ee      	bcs.n	80028a4 <nl_func_relu_generic_array_f32+0x30>
 80028c6:	4770      	bx	lr
 80028c8:	428a      	cmp	r2, r1
 80028ca:	d3fc      	bcc.n	80028c6 <nl_func_relu_generic_array_f32+0x52>
 80028cc:	edd2 0a00 	vldr	s1, [r2]
 80028d0:	eef4 0a40 	vcmp.f32	s1, s0
 80028d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028d8:	bf48      	it	mi
 80028da:	eddf 0a99 	vldrmi	s1, [pc, #612]	; 8002b40 <.text_25>
 80028de:	edc0 0a00 	vstr	s1, [r0]
 80028e2:	1f12      	subs	r2, r2, #4
 80028e4:	1f00      	subs	r0, r0, #4
 80028e6:	428a      	cmp	r2, r1
 80028e8:	d2f0      	bcs.n	80028cc <nl_func_relu_generic_array_f32+0x58>
 80028ea:	4770      	bx	lr
 80028ec:	428a      	cmp	r2, r1
 80028ee:	d3ea      	bcc.n	80028c6 <nl_func_relu_generic_array_f32+0x52>
 80028f0:	edd2 1a00 	vldr	s3, [r2]
 80028f4:	eef4 1a41 	vcmp.f32	s3, s2
 80028f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028fc:	d50a      	bpl.n	8002914 <nl_func_relu_generic_array_f32+0xa0>
 80028fe:	eef4 1a40 	vcmp.f32	s3, s0
 8002902:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002906:	d507      	bpl.n	8002918 <nl_func_relu_generic_array_f32+0xa4>
 8002908:	ee71 1ac0 	vsub.f32	s3, s3, s0
 800290c:	ee61 1aa0 	vmul.f32	s3, s3, s1
 8002910:	e002      	b.n	8002918 <nl_func_relu_generic_array_f32+0xa4>
 8002912:	bf00      	nop
 8002914:	eef0 1a41 	vmov.f32	s3, s2
 8002918:	edc0 1a00 	vstr	s3, [r0]
 800291c:	1f12      	subs	r2, r2, #4
 800291e:	1f00      	subs	r0, r0, #4
 8002920:	428a      	cmp	r2, r1
 8002922:	d2e5      	bcs.n	80028f0 <nl_func_relu_generic_array_f32+0x7c>
 8002924:	4770      	bx	lr
	...

08002928 <nl_func_relu_thresholded_array_f32>:
 8002928:	ed93 0a00 	vldr	s0, [r3]
 800292c:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8002930:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8002934:	1f1b      	subs	r3, r3, #4
 8002936:	1f00      	subs	r0, r0, #4
 8002938:	428b      	cmp	r3, r1
 800293a:	d30e      	bcc.n	800295a <nl_func_relu_thresholded_array_f32+0x32>
 800293c:	edd3 0a00 	vldr	s1, [r3]
 8002940:	eef4 0a40 	vcmp.f32	s1, s0
 8002944:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002948:	bf48      	it	mi
 800294a:	eddf 0a7d 	vldrmi	s1, [pc, #500]	; 8002b40 <.text_25>
 800294e:	edc0 0a00 	vstr	s1, [r0]
 8002952:	1f1b      	subs	r3, r3, #4
 8002954:	1f00      	subs	r0, r0, #4
 8002956:	428b      	cmp	r3, r1
 8002958:	d2f0      	bcs.n	800293c <nl_func_relu_thresholded_array_f32+0x14>
 800295a:	4770      	bx	lr

0800295c <nl_func_elu_array_f32>:
 800295c:	b570      	push	{r4, r5, r6, lr}
 800295e:	460c      	mov	r4, r1
 8002960:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8002964:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8002968:	1f0d      	subs	r5, r1, #4
 800296a:	1f06      	subs	r6, r0, #4
 800296c:	ed2d 8b04 	vpush	{d8-d9}
 8002970:	42a5      	cmp	r5, r4
 8002972:	ed93 8a00 	vldr	s16, [r3]
 8002976:	d32f      	bcc.n	80029d8 <nl_func_elu_array_f32+0x7c>
 8002978:	edd5 8a00 	vldr	s17, [r5]
 800297c:	eef5 8a40 	vcmp.f32	s17, #0.0
 8002980:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002984:	bf4c      	ite	mi
 8002986:	ed9f 9a6e 	vldrmi	s18, [pc, #440]	; 8002b40 <.text_25>
 800298a:	eeb0 9a68 	vmovpl.f32	s18, s17
 800298e:	eeb0 0a68 	vmov.f32	s0, s17
 8002992:	f007 f9a5 	bl	8009ce0 <expf>
 8002996:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 800299a:	ee30 0a20 	vadd.f32	s0, s0, s1
 800299e:	ee20 0a08 	vmul.f32	s0, s0, s16
 80029a2:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80029a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029aa:	dd05      	ble.n	80029b8 <nl_func_elu_array_f32+0x5c>
 80029ac:	ed9f 1a64 	vldr	s2, [pc, #400]	; 8002b40 <.text_25>
 80029b0:	ee39 9a01 	vadd.f32	s18, s18, s2
 80029b4:	e00a      	b.n	80029cc <nl_func_elu_array_f32+0x70>
 80029b6:	bf00      	nop
 80029b8:	eeb0 0a68 	vmov.f32	s0, s17
 80029bc:	f007 f990 	bl	8009ce0 <expf>
 80029c0:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 80029c4:	ee30 0a20 	vadd.f32	s0, s0, s1
 80029c8:	ee00 9a08 	vmla.f32	s18, s0, s16
 80029cc:	ed86 9a00 	vstr	s18, [r6]
 80029d0:	1f2d      	subs	r5, r5, #4
 80029d2:	1f36      	subs	r6, r6, #4
 80029d4:	42a5      	cmp	r5, r4
 80029d6:	d2cf      	bcs.n	8002978 <nl_func_elu_array_f32+0x1c>
 80029d8:	ecbd 8b04 	vpop	{d8-d9}
 80029dc:	bd70      	pop	{r4, r5, r6, pc}
	...

080029e0 <.text_21>:
 80029e0:	00000001 	.word	0x00000001

080029e4 <nl_func_selu_array_f32>:
 80029e4:	b570      	push	{r4, r5, r6, lr}
 80029e6:	460c      	mov	r4, r1
 80029e8:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 80029ec:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 80029f0:	1f0d      	subs	r5, r1, #4
 80029f2:	1f06      	subs	r6, r0, #4
 80029f4:	ed2d 8b04 	vpush	{d8-d9}
 80029f8:	42a5      	cmp	r5, r4
 80029fa:	ed93 8a00 	vldr	s16, [r3]
 80029fe:	edd3 8a01 	vldr	s17, [r3, #4]
 8002a02:	d331      	bcc.n	8002a68 <nl_func_selu_array_f32+0x84>
 8002a04:	ed95 9a00 	vldr	s18, [r5]
 8002a08:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8002a0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a10:	bf4c      	ite	mi
 8002a12:	eddf 9a4b 	vldrmi	s19, [pc, #300]	; 8002b40 <.text_25>
 8002a16:	eef0 9a49 	vmovpl.f32	s19, s18
 8002a1a:	eeb0 0a49 	vmov.f32	s0, s18
 8002a1e:	f007 f95f 	bl	8009ce0 <expf>
 8002a22:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8002a26:	ee30 0a20 	vadd.f32	s0, s0, s1
 8002a2a:	ee20 0a08 	vmul.f32	s0, s0, s16
 8002a2e:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8002a32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a36:	dd05      	ble.n	8002a44 <nl_func_selu_array_f32+0x60>
 8002a38:	ed9f 1a41 	vldr	s2, [pc, #260]	; 8002b40 <.text_25>
 8002a3c:	ee79 9a81 	vadd.f32	s19, s19, s2
 8002a40:	e00a      	b.n	8002a58 <nl_func_selu_array_f32+0x74>
 8002a42:	bf00      	nop
 8002a44:	eeb0 0a49 	vmov.f32	s0, s18
 8002a48:	f007 f94a 	bl	8009ce0 <expf>
 8002a4c:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8002a50:	ee30 0a20 	vadd.f32	s0, s0, s1
 8002a54:	ee40 9a08 	vmla.f32	s19, s0, s16
 8002a58:	ee28 0aa9 	vmul.f32	s0, s17, s19
 8002a5c:	ed86 0a00 	vstr	s0, [r6]
 8002a60:	1f2d      	subs	r5, r5, #4
 8002a62:	1f36      	subs	r6, r6, #4
 8002a64:	42a5      	cmp	r5, r4
 8002a66:	d2cd      	bcs.n	8002a04 <nl_func_selu_array_f32+0x20>
 8002a68:	ecbd 8b04 	vpop	{d8-d9}
 8002a6c:	bd70      	pop	{r4, r5, r6, pc}
	...

08002a70 <nl_func_prelu_array_f32>:
 8002a70:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8002a74:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 8002a78:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8002a7c:	1f1b      	subs	r3, r3, #4
 8002a7e:	f1ac 0c04 	sub.w	ip, ip, #4
 8002a82:	1f00      	subs	r0, r0, #4
 8002a84:	458c      	cmp	ip, r1
 8002a86:	d320      	bcc.n	8002aca <nl_func_prelu_array_f32+0x5a>
 8002a88:	ed9c 0a00 	vldr	s0, [ip]
 8002a8c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8002a90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a94:	bf4c      	ite	mi
 8002a96:	eddf 0a2a 	vldrmi	s1, [pc, #168]	; 8002b40 <.text_25>
 8002a9a:	eef0 0a40 	vmovpl.f32	s1, s0
 8002a9e:	461a      	mov	r2, r3
 8002aa0:	eeb1 0a40 	vneg.f32	s0, s0
 8002aa4:	1f13      	subs	r3, r2, #4
 8002aa6:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8002aaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002aae:	bf48      	it	mi
 8002ab0:	ed9f 0a23 	vldrmi	s0, [pc, #140]	; 8002b40 <.text_25>
 8002ab4:	ed92 1a00 	vldr	s2, [r2]
 8002ab8:	ee41 0a40 	vmls.f32	s1, s2, s0
 8002abc:	edc0 0a00 	vstr	s1, [r0]
 8002ac0:	f1ac 0c04 	sub.w	ip, ip, #4
 8002ac4:	1f00      	subs	r0, r0, #4
 8002ac6:	458c      	cmp	ip, r1
 8002ac8:	d2de      	bcs.n	8002a88 <nl_func_prelu_array_f32+0x18>
 8002aca:	4770      	bx	lr

08002acc <forward_relu>:
 8002acc:	b430      	push	{r4, r5}
 8002ace:	4602      	mov	r2, r0
 8002ad0:	6950      	ldr	r0, [r2, #20]
 8002ad2:	6800      	ldr	r0, [r0, #0]
 8002ad4:	6801      	ldr	r1, [r0, #0]
 8002ad6:	68c0      	ldr	r0, [r0, #12]
 8002ad8:	680b      	ldr	r3, [r1, #0]
 8002ada:	6805      	ldr	r5, [r0, #0]
 8002adc:	685c      	ldr	r4, [r3, #4]
 8002ade:	6898      	ldr	r0, [r3, #8]
 8002ae0:	68d9      	ldr	r1, [r3, #12]
 8002ae2:	682d      	ldr	r5, [r5, #0]
 8002ae4:	6992      	ldr	r2, [r2, #24]
 8002ae6:	4344      	muls	r4, r0
 8002ae8:	6918      	ldr	r0, [r3, #16]
 8002aea:	434c      	muls	r4, r1
 8002aec:	6819      	ldr	r1, [r3, #0]
 8002aee:	6889      	ldr	r1, [r1, #8]
 8002af0:	4344      	muls	r4, r0
 8002af2:	68a8      	ldr	r0, [r5, #8]
 8002af4:	b9ca      	cbnz	r2, 8002b2a <forward_relu+0x5e>
 8002af6:	eb01 0284 	add.w	r2, r1, r4, lsl #2
 8002afa:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 8002afe:	1f12      	subs	r2, r2, #4
 8002b00:	1f00      	subs	r0, r0, #4
 8002b02:	428a      	cmp	r2, r1
 8002b04:	f0c0 801a 	bcc.w	8002b3c <forward_relu+0x70>
 8002b08:	ed92 0a00 	vldr	s0, [r2]
 8002b0c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8002b10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b14:	bf48      	it	mi
 8002b16:	ed9f 0a0a 	vldrmi	s0, [pc, #40]	; 8002b40 <.text_25>
 8002b1a:	ed80 0a00 	vstr	s0, [r0]
 8002b1e:	1f12      	subs	r2, r2, #4
 8002b20:	1f00      	subs	r0, r0, #4
 8002b22:	428a      	cmp	r2, r1
 8002b24:	d2f0      	bcs.n	8002b08 <forward_relu+0x3c>
 8002b26:	bc30      	pop	{r4, r5}
 8002b28:	4770      	bx	lr
 8002b2a:	6893      	ldr	r3, [r2, #8]
 8002b2c:	6852      	ldr	r2, [r2, #4]
 8002b2e:	2a01      	cmp	r2, #1
 8002b30:	4622      	mov	r2, r4
 8002b32:	d101      	bne.n	8002b38 <forward_relu+0x6c>
 8002b34:	bc30      	pop	{r4, r5}
 8002b36:	e6f7      	b.n	8002928 <nl_func_relu_thresholded_array_f32>
 8002b38:	bc30      	pop	{r4, r5}
 8002b3a:	e69b      	b.n	8002874 <nl_func_relu_generic_array_f32>
 8002b3c:	bc30      	pop	{r4, r5}
 8002b3e:	4770      	bx	lr

08002b40 <.text_25>:
 8002b40:	00000000 	.word	0x00000000

08002b44 <forward_relu_thresholded>:
 8002b44:	b430      	push	{r4, r5}
 8002b46:	6941      	ldr	r1, [r0, #20]
 8002b48:	6980      	ldr	r0, [r0, #24]
 8002b4a:	680c      	ldr	r4, [r1, #0]
 8002b4c:	6822      	ldr	r2, [r4, #0]
 8002b4e:	6815      	ldr	r5, [r2, #0]
 8002b50:	686b      	ldr	r3, [r5, #4]
 8002b52:	68a9      	ldr	r1, [r5, #8]
 8002b54:	68ea      	ldr	r2, [r5, #12]
 8002b56:	434b      	muls	r3, r1
 8002b58:	6929      	ldr	r1, [r5, #16]
 8002b5a:	682d      	ldr	r5, [r5, #0]
 8002b5c:	4353      	muls	r3, r2
 8002b5e:	6882      	ldr	r2, [r0, #8]
 8002b60:	ed92 0a00 	vldr	s0, [r2]
 8002b64:	68e2      	ldr	r2, [r4, #12]
 8002b66:	6814      	ldr	r4, [r2, #0]
 8002b68:	434b      	muls	r3, r1
 8002b6a:	68a9      	ldr	r1, [r5, #8]
 8002b6c:	6825      	ldr	r5, [r4, #0]
 8002b6e:	68aa      	ldr	r2, [r5, #8]
 8002b70:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8002b74:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8002b78:	1f00      	subs	r0, r0, #4
 8002b7a:	1f1a      	subs	r2, r3, #4
 8002b7c:	4288      	cmp	r0, r1
 8002b7e:	d30e      	bcc.n	8002b9e <forward_relu_thresholded+0x5a>
 8002b80:	edd0 0a00 	vldr	s1, [r0]
 8002b84:	eef4 0a40 	vcmp.f32	s1, s0
 8002b88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b8c:	bf48      	it	mi
 8002b8e:	eddf 0ac1 	vldrmi	s1, [pc, #772]	; 8002e94 <.text_34>
 8002b92:	edc2 0a00 	vstr	s1, [r2]
 8002b96:	1f00      	subs	r0, r0, #4
 8002b98:	1f12      	subs	r2, r2, #4
 8002b9a:	4288      	cmp	r0, r1
 8002b9c:	d2f0      	bcs.n	8002b80 <forward_relu_thresholded+0x3c>
 8002b9e:	bc30      	pop	{r4, r5}
 8002ba0:	4770      	bx	lr
	...

08002ba4 <forward_elu>:
 8002ba4:	b570      	push	{r4, r5, r6, lr}
 8002ba6:	ed2d 8b04 	vpush	{d8-d9}
 8002baa:	6941      	ldr	r1, [r0, #20]
 8002bac:	680e      	ldr	r6, [r1, #0]
 8002bae:	6832      	ldr	r2, [r6, #0]
 8002bb0:	6814      	ldr	r4, [r2, #0]
 8002bb2:	6863      	ldr	r3, [r4, #4]
 8002bb4:	68a1      	ldr	r1, [r4, #8]
 8002bb6:	68e2      	ldr	r2, [r4, #12]
 8002bb8:	6980      	ldr	r0, [r0, #24]
 8002bba:	434b      	muls	r3, r1
 8002bbc:	6921      	ldr	r1, [r4, #16]
 8002bbe:	6824      	ldr	r4, [r4, #0]
 8002bc0:	68a4      	ldr	r4, [r4, #8]
 8002bc2:	4353      	muls	r3, r2
 8002bc4:	434b      	muls	r3, r1
 8002bc6:	6881      	ldr	r1, [r0, #8]
 8002bc8:	ed91 8a00 	vldr	s16, [r1]
 8002bcc:	68f1      	ldr	r1, [r6, #12]
 8002bce:	eb04 0083 	add.w	r0, r4, r3, lsl #2
 8002bd2:	1f05      	subs	r5, r0, #4
 8002bd4:	6808      	ldr	r0, [r1, #0]
 8002bd6:	6802      	ldr	r2, [r0, #0]
 8002bd8:	6891      	ldr	r1, [r2, #8]
 8002bda:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8002bde:	1f06      	subs	r6, r0, #4
 8002be0:	42a5      	cmp	r5, r4
 8002be2:	d32f      	bcc.n	8002c44 <forward_elu+0xa0>
 8002be4:	edd5 8a00 	vldr	s17, [r5]
 8002be8:	eef5 8a40 	vcmp.f32	s17, #0.0
 8002bec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bf0:	bf4c      	ite	mi
 8002bf2:	ed9f 9aa8 	vldrmi	s18, [pc, #672]	; 8002e94 <.text_34>
 8002bf6:	eeb0 9a68 	vmovpl.f32	s18, s17
 8002bfa:	eeb0 0a68 	vmov.f32	s0, s17
 8002bfe:	f007 f86f 	bl	8009ce0 <expf>
 8002c02:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8002c06:	ee30 0a20 	vadd.f32	s0, s0, s1
 8002c0a:	ee20 0a08 	vmul.f32	s0, s0, s16
 8002c0e:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8002c12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c16:	dd05      	ble.n	8002c24 <forward_elu+0x80>
 8002c18:	ed9f 1a9e 	vldr	s2, [pc, #632]	; 8002e94 <.text_34>
 8002c1c:	ee39 9a01 	vadd.f32	s18, s18, s2
 8002c20:	e00a      	b.n	8002c38 <forward_elu+0x94>
 8002c22:	bf00      	nop
 8002c24:	eeb0 0a68 	vmov.f32	s0, s17
 8002c28:	f007 f85a 	bl	8009ce0 <expf>
 8002c2c:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8002c30:	ee30 0a20 	vadd.f32	s0, s0, s1
 8002c34:	ee00 9a08 	vmla.f32	s18, s0, s16
 8002c38:	ed86 9a00 	vstr	s18, [r6]
 8002c3c:	1f2d      	subs	r5, r5, #4
 8002c3e:	1f36      	subs	r6, r6, #4
 8002c40:	42a5      	cmp	r5, r4
 8002c42:	d2cf      	bcs.n	8002be4 <forward_elu+0x40>
 8002c44:	ecbd 8b04 	vpop	{d8-d9}
 8002c48:	bd70      	pop	{r4, r5, r6, pc}

08002c4a <forward_selu>:
 8002c4a:	b430      	push	{r4, r5}
 8002c4c:	6941      	ldr	r1, [r0, #20]
 8002c4e:	680c      	ldr	r4, [r1, #0]
 8002c50:	6822      	ldr	r2, [r4, #0]
 8002c52:	6980      	ldr	r0, [r0, #24]
 8002c54:	6815      	ldr	r5, [r2, #0]
 8002c56:	6883      	ldr	r3, [r0, #8]
 8002c58:	686a      	ldr	r2, [r5, #4]
 8002c5a:	68a8      	ldr	r0, [r5, #8]
 8002c5c:	68e9      	ldr	r1, [r5, #12]
 8002c5e:	4342      	muls	r2, r0
 8002c60:	6928      	ldr	r0, [r5, #16]
 8002c62:	682d      	ldr	r5, [r5, #0]
 8002c64:	434a      	muls	r2, r1
 8002c66:	4342      	muls	r2, r0
 8002c68:	68e0      	ldr	r0, [r4, #12]
 8002c6a:	6804      	ldr	r4, [r0, #0]
 8002c6c:	68a9      	ldr	r1, [r5, #8]
 8002c6e:	6825      	ldr	r5, [r4, #0]
 8002c70:	68a8      	ldr	r0, [r5, #8]
 8002c72:	bc30      	pop	{r4, r5}
 8002c74:	e6b6      	b.n	80029e4 <nl_func_selu_array_f32>

08002c76 <forward_prelu>:
 8002c76:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002c7a:	b081      	sub	sp, #4
 8002c7c:	6940      	ldr	r0, [r0, #20]
 8002c7e:	6800      	ldr	r0, [r0, #0]
 8002c80:	6801      	ldr	r1, [r0, #0]
 8002c82:	68c2      	ldr	r2, [r0, #12]
 8002c84:	6980      	ldr	r0, [r0, #24]
 8002c86:	6804      	ldr	r4, [r0, #0]
 8002c88:	6820      	ldr	r0, [r4, #0]
 8002c8a:	680d      	ldr	r5, [r1, #0]
 8002c8c:	6817      	ldr	r7, [r2, #0]
 8002c8e:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8002c92:	b12c      	cbz	r4, 8002ca0 <forward_prelu+0x2a>
 8002c94:	6841      	ldr	r1, [r0, #4]
 8002c96:	6800      	ldr	r0, [r0, #0]
 8002c98:	f000 fd32 	bl	8003700 <ai_array_get_byte_size>
 8002c9c:	4681      	mov	r9, r0
 8002c9e:	e001      	b.n	8002ca4 <forward_prelu+0x2e>
 8002ca0:	f04f 0901 	mov.w	r9, #1
 8002ca4:	6828      	ldr	r0, [r5, #0]
 8002ca6:	6841      	ldr	r1, [r0, #4]
 8002ca8:	6800      	ldr	r0, [r0, #0]
 8002caa:	f000 fd29 	bl	8003700 <ai_array_get_byte_size>
 8002cae:	6829      	ldr	r1, [r5, #0]
 8002cb0:	683a      	ldr	r2, [r7, #0]
 8002cb2:	688e      	ldr	r6, [r1, #8]
 8002cb4:	6895      	ldr	r5, [r2, #8]
 8002cb6:	1837      	adds	r7, r6, r0
 8002cb8:	42be      	cmp	r6, r7
 8002cba:	d20f      	bcs.n	8002cdc <forward_prelu+0x66>
 8002cbc:	6862      	ldr	r2, [r4, #4]
 8002cbe:	68a0      	ldr	r0, [r4, #8]
 8002cc0:	68e1      	ldr	r1, [r4, #12]
 8002cc2:	4342      	muls	r2, r0
 8002cc4:	6920      	ldr	r0, [r4, #16]
 8002cc6:	434a      	muls	r2, r1
 8002cc8:	4342      	muls	r2, r0
 8002cca:	4643      	mov	r3, r8
 8002ccc:	4631      	mov	r1, r6
 8002cce:	4628      	mov	r0, r5
 8002cd0:	f7ff fece 	bl	8002a70 <nl_func_prelu_array_f32>
 8002cd4:	444e      	add	r6, r9
 8002cd6:	42be      	cmp	r6, r7
 8002cd8:	444d      	add	r5, r9
 8002cda:	d3ef      	bcc.n	8002cbc <forward_prelu+0x46>
 8002cdc:	b001      	add	sp, #4
 8002cde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08002ce4 <forward_sign>:
 8002ce4:	b430      	push	{r4, r5}
 8002ce6:	6940      	ldr	r0, [r0, #20]
 8002ce8:	6802      	ldr	r2, [r0, #0]
 8002cea:	6811      	ldr	r1, [r2, #0]
 8002cec:	68d2      	ldr	r2, [r2, #12]
 8002cee:	680b      	ldr	r3, [r1, #0]
 8002cf0:	685c      	ldr	r4, [r3, #4]
 8002cf2:	6898      	ldr	r0, [r3, #8]
 8002cf4:	68d9      	ldr	r1, [r3, #12]
 8002cf6:	4344      	muls	r4, r0
 8002cf8:	6918      	ldr	r0, [r3, #16]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	434c      	muls	r4, r1
 8002cfe:	4344      	muls	r4, r0
 8002d00:	6898      	ldr	r0, [r3, #8]
 8002d02:	6813      	ldr	r3, [r2, #0]
 8002d04:	681d      	ldr	r5, [r3, #0]
 8002d06:	68aa      	ldr	r2, [r5, #8]
 8002d08:	eb00 0184 	add.w	r1, r0, r4, lsl #2
 8002d0c:	eb02 0384 	add.w	r3, r2, r4, lsl #2
 8002d10:	1f09      	subs	r1, r1, #4
 8002d12:	1f1a      	subs	r2, r3, #4
 8002d14:	4281      	cmp	r1, r0
 8002d16:	d314      	bcc.n	8002d42 <forward_sign+0x5e>
 8002d18:	f04f 33ff 	mov.w	r3, #4294967295
 8002d1c:	ed91 0a00 	vldr	s0, [r1]
 8002d20:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8002d24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d28:	bfcc      	ite	gt
 8002d2a:	ed9f 0a5b 	vldrgt	s0, [pc, #364]	; 8002e98 <.text_35>
 8002d2e:	ee00 3a10 	vmovle	s0, r3
 8002d32:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8002d36:	ed82 0a00 	vstr	s0, [r2]
 8002d3a:	1f09      	subs	r1, r1, #4
 8002d3c:	1f12      	subs	r2, r2, #4
 8002d3e:	4281      	cmp	r1, r0
 8002d40:	d2ec      	bcs.n	8002d1c <forward_sign+0x38>
 8002d42:	bc30      	pop	{r4, r5}
 8002d44:	4770      	bx	lr
	...

08002d48 <forward_clip>:
 8002d48:	b430      	push	{r4, r5}
 8002d4a:	6941      	ldr	r1, [r0, #20]
 8002d4c:	680c      	ldr	r4, [r1, #0]
 8002d4e:	6822      	ldr	r2, [r4, #0]
 8002d50:	6815      	ldr	r5, [r2, #0]
 8002d52:	686b      	ldr	r3, [r5, #4]
 8002d54:	68a9      	ldr	r1, [r5, #8]
 8002d56:	68ea      	ldr	r2, [r5, #12]
 8002d58:	6980      	ldr	r0, [r0, #24]
 8002d5a:	434b      	muls	r3, r1
 8002d5c:	6929      	ldr	r1, [r5, #16]
 8002d5e:	4353      	muls	r3, r2
 8002d60:	434b      	muls	r3, r1
 8002d62:	682a      	ldr	r2, [r5, #0]
 8002d64:	6881      	ldr	r1, [r0, #8]
 8002d66:	6890      	ldr	r0, [r2, #8]
 8002d68:	68e2      	ldr	r2, [r4, #12]
 8002d6a:	ed91 0a00 	vldr	s0, [r1]
 8002d6e:	6814      	ldr	r4, [r2, #0]
 8002d70:	edd1 0a01 	vldr	s1, [r1, #4]
 8002d74:	6825      	ldr	r5, [r4, #0]
 8002d76:	68aa      	ldr	r2, [r5, #8]
 8002d78:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8002d7c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8002d80:	1f09      	subs	r1, r1, #4
 8002d82:	1f1a      	subs	r2, r3, #4
 8002d84:	4281      	cmp	r1, r0
 8002d86:	d315      	bcc.n	8002db4 <forward_clip+0x6c>
 8002d88:	ed91 1a00 	vldr	s2, [r1]
 8002d8c:	eeb4 0a41 	vcmp.f32	s0, s2
 8002d90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d94:	bf58      	it	pl
 8002d96:	eeb0 1a40 	vmovpl.f32	s2, s0
 8002d9a:	eeb4 1a60 	vcmp.f32	s2, s1
 8002d9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002da2:	bf58      	it	pl
 8002da4:	eeb0 1a60 	vmovpl.f32	s2, s1
 8002da8:	ed82 1a00 	vstr	s2, [r2]
 8002dac:	1f09      	subs	r1, r1, #4
 8002dae:	1f12      	subs	r2, r2, #4
 8002db0:	4281      	cmp	r1, r0
 8002db2:	d2e9      	bcs.n	8002d88 <forward_clip+0x40>
 8002db4:	bc30      	pop	{r4, r5}
 8002db6:	4770      	bx	lr

08002db8 <forward_sigmoid>:
 8002db8:	b570      	push	{r4, r5, r6, lr}
 8002dba:	6940      	ldr	r0, [r0, #20]
 8002dbc:	6802      	ldr	r2, [r0, #0]
 8002dbe:	6811      	ldr	r1, [r2, #0]
 8002dc0:	680b      	ldr	r3, [r1, #0]
 8002dc2:	685e      	ldr	r6, [r3, #4]
 8002dc4:	6898      	ldr	r0, [r3, #8]
 8002dc6:	68d9      	ldr	r1, [r3, #12]
 8002dc8:	4346      	muls	r6, r0
 8002dca:	6918      	ldr	r0, [r3, #16]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	689c      	ldr	r4, [r3, #8]
 8002dd0:	434e      	muls	r6, r1
 8002dd2:	4346      	muls	r6, r0
 8002dd4:	68d1      	ldr	r1, [r2, #12]
 8002dd6:	eb04 0086 	add.w	r0, r4, r6, lsl #2
 8002dda:	1f05      	subs	r5, r0, #4
 8002ddc:	6808      	ldr	r0, [r1, #0]
 8002dde:	6802      	ldr	r2, [r0, #0]
 8002de0:	6891      	ldr	r1, [r2, #8]
 8002de2:	eb01 0086 	add.w	r0, r1, r6, lsl #2
 8002de6:	1f06      	subs	r6, r0, #4
 8002de8:	42a5      	cmp	r5, r4
 8002dea:	d313      	bcc.n	8002e14 <forward_sigmoid+0x5c>
 8002dec:	ed95 0a00 	vldr	s0, [r5]
 8002df0:	eeb1 0a40 	vneg.f32	s0, s0
 8002df4:	f006 ff74 	bl	8009ce0 <expf>
 8002df8:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8002dfc:	ee70 0a20 	vadd.f32	s1, s0, s1
 8002e00:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002e04:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8002e08:	ed86 0a00 	vstr	s0, [r6]
 8002e0c:	1f2d      	subs	r5, r5, #4
 8002e0e:	1f36      	subs	r6, r6, #4
 8002e10:	42a5      	cmp	r5, r4
 8002e12:	d2eb      	bcs.n	8002dec <forward_sigmoid+0x34>
 8002e14:	bd70      	pop	{r4, r5, r6, pc}
	...

08002e18 <forward_hard_sigmoid>:
 8002e18:	b430      	push	{r4, r5}
 8002e1a:	6940      	ldr	r0, [r0, #20]
 8002e1c:	6802      	ldr	r2, [r0, #0]
 8002e1e:	6811      	ldr	r1, [r2, #0]
 8002e20:	68d2      	ldr	r2, [r2, #12]
 8002e22:	680b      	ldr	r3, [r1, #0]
 8002e24:	685c      	ldr	r4, [r3, #4]
 8002e26:	6898      	ldr	r0, [r3, #8]
 8002e28:	68d9      	ldr	r1, [r3, #12]
 8002e2a:	4344      	muls	r4, r0
 8002e2c:	6918      	ldr	r0, [r3, #16]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	434c      	muls	r4, r1
 8002e32:	4344      	muls	r4, r0
 8002e34:	6898      	ldr	r0, [r3, #8]
 8002e36:	6813      	ldr	r3, [r2, #0]
 8002e38:	681d      	ldr	r5, [r3, #0]
 8002e3a:	68aa      	ldr	r2, [r5, #8]
 8002e3c:	eb00 0184 	add.w	r1, r0, r4, lsl #2
 8002e40:	eb02 0384 	add.w	r3, r2, r4, lsl #2
 8002e44:	1f09      	subs	r1, r1, #4
 8002e46:	1f1a      	subs	r2, r3, #4
 8002e48:	4281      	cmp	r1, r0
 8002e4a:	d321      	bcc.n	8002e90 <forward_hard_sigmoid+0x78>
 8002e4c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002e50:	eddf 0a12 	vldr	s1, [pc, #72]	; 8002e9c <.text_36>
 8002e54:	edd1 1a00 	vldr	s3, [r1]
 8002e58:	ed9f 2a11 	vldr	s4, [pc, #68]	; 8002ea0 <.text_37>
 8002e5c:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 8002e60:	ee01 1a82 	vmla.f32	s2, s3, s4
 8002e64:	eeb4 1a60 	vcmp.f32	s2, s1
 8002e68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e6c:	da08      	bge.n	8002e80 <forward_hard_sigmoid+0x68>
 8002e6e:	eeb5 1a40 	vcmp.f32	s2, #0.0
 8002e72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e76:	d505      	bpl.n	8002e84 <forward_hard_sigmoid+0x6c>
 8002e78:	ed9f 1a06 	vldr	s2, [pc, #24]	; 8002e94 <.text_34>
 8002e7c:	e002      	b.n	8002e84 <forward_hard_sigmoid+0x6c>
 8002e7e:	bf00      	nop
 8002e80:	eeb0 1a40 	vmov.f32	s2, s0
 8002e84:	ed82 1a00 	vstr	s2, [r2]
 8002e88:	1f09      	subs	r1, r1, #4
 8002e8a:	1f12      	subs	r2, r2, #4
 8002e8c:	4281      	cmp	r1, r0
 8002e8e:	d2e1      	bcs.n	8002e54 <forward_hard_sigmoid+0x3c>
 8002e90:	bc30      	pop	{r4, r5}
 8002e92:	4770      	bx	lr

08002e94 <.text_34>:
 8002e94:	00000000 	.word	0x00000000

08002e98 <.text_35>:
 8002e98:	00000001 	.word	0x00000001

08002e9c <.text_36>:
 8002e9c:	3f800001 	.word	0x3f800001

08002ea0 <.text_37>:
 8002ea0:	3e4ccccd 	.word	0x3e4ccccd

08002ea4 <forward_exp>:
 8002ea4:	b570      	push	{r4, r5, r6, lr}
 8002ea6:	6940      	ldr	r0, [r0, #20]
 8002ea8:	6802      	ldr	r2, [r0, #0]
 8002eaa:	6811      	ldr	r1, [r2, #0]
 8002eac:	680b      	ldr	r3, [r1, #0]
 8002eae:	685e      	ldr	r6, [r3, #4]
 8002eb0:	6898      	ldr	r0, [r3, #8]
 8002eb2:	68d9      	ldr	r1, [r3, #12]
 8002eb4:	4346      	muls	r6, r0
 8002eb6:	6918      	ldr	r0, [r3, #16]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	689c      	ldr	r4, [r3, #8]
 8002ebc:	434e      	muls	r6, r1
 8002ebe:	4346      	muls	r6, r0
 8002ec0:	68d1      	ldr	r1, [r2, #12]
 8002ec2:	eb04 0086 	add.w	r0, r4, r6, lsl #2
 8002ec6:	1f05      	subs	r5, r0, #4
 8002ec8:	6808      	ldr	r0, [r1, #0]
 8002eca:	6802      	ldr	r2, [r0, #0]
 8002ecc:	6891      	ldr	r1, [r2, #8]
 8002ece:	eb01 0086 	add.w	r0, r1, r6, lsl #2
 8002ed2:	1f06      	subs	r6, r0, #4
 8002ed4:	42a5      	cmp	r5, r4
 8002ed6:	d309      	bcc.n	8002eec <forward_exp+0x48>
 8002ed8:	ed95 0a00 	vldr	s0, [r5]
 8002edc:	f006 ff00 	bl	8009ce0 <expf>
 8002ee0:	ed86 0a00 	vstr	s0, [r6]
 8002ee4:	1f2d      	subs	r5, r5, #4
 8002ee6:	1f36      	subs	r6, r6, #4
 8002ee8:	42a5      	cmp	r5, r4
 8002eea:	d2f5      	bcs.n	8002ed8 <forward_exp+0x34>
 8002eec:	bd70      	pop	{r4, r5, r6, pc}
	...

08002ef0 <forward_sqrt>:
 8002ef0:	b570      	push	{r4, r5, r6, lr}
 8002ef2:	6940      	ldr	r0, [r0, #20]
 8002ef4:	6802      	ldr	r2, [r0, #0]
 8002ef6:	6811      	ldr	r1, [r2, #0]
 8002ef8:	680b      	ldr	r3, [r1, #0]
 8002efa:	685e      	ldr	r6, [r3, #4]
 8002efc:	6898      	ldr	r0, [r3, #8]
 8002efe:	68d9      	ldr	r1, [r3, #12]
 8002f00:	4346      	muls	r6, r0
 8002f02:	6918      	ldr	r0, [r3, #16]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	689c      	ldr	r4, [r3, #8]
 8002f08:	434e      	muls	r6, r1
 8002f0a:	4346      	muls	r6, r0
 8002f0c:	68d1      	ldr	r1, [r2, #12]
 8002f0e:	eb04 0086 	add.w	r0, r4, r6, lsl #2
 8002f12:	1f05      	subs	r5, r0, #4
 8002f14:	6808      	ldr	r0, [r1, #0]
 8002f16:	6802      	ldr	r2, [r0, #0]
 8002f18:	6891      	ldr	r1, [r2, #8]
 8002f1a:	eb01 0086 	add.w	r0, r1, r6, lsl #2
 8002f1e:	1f06      	subs	r6, r0, #4
 8002f20:	42a5      	cmp	r5, r4
 8002f22:	d309      	bcc.n	8002f38 <forward_sqrt+0x48>
 8002f24:	ed95 0a00 	vldr	s0, [r5]
 8002f28:	f000 fd40 	bl	80039ac <ai_math_sqrt>
 8002f2c:	ed86 0a00 	vstr	s0, [r6]
 8002f30:	1f2d      	subs	r5, r5, #4
 8002f32:	1f36      	subs	r6, r6, #4
 8002f34:	42a5      	cmp	r5, r4
 8002f36:	d2f5      	bcs.n	8002f24 <forward_sqrt+0x34>
 8002f38:	bd70      	pop	{r4, r5, r6, pc}
	...

08002f3c <forward_soft_plus>:
 8002f3c:	b570      	push	{r4, r5, r6, lr}
 8002f3e:	6940      	ldr	r0, [r0, #20]
 8002f40:	6802      	ldr	r2, [r0, #0]
 8002f42:	6811      	ldr	r1, [r2, #0]
 8002f44:	680b      	ldr	r3, [r1, #0]
 8002f46:	685e      	ldr	r6, [r3, #4]
 8002f48:	6898      	ldr	r0, [r3, #8]
 8002f4a:	68d9      	ldr	r1, [r3, #12]
 8002f4c:	4346      	muls	r6, r0
 8002f4e:	6918      	ldr	r0, [r3, #16]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	689c      	ldr	r4, [r3, #8]
 8002f54:	434e      	muls	r6, r1
 8002f56:	4346      	muls	r6, r0
 8002f58:	68d1      	ldr	r1, [r2, #12]
 8002f5a:	eb04 0086 	add.w	r0, r4, r6, lsl #2
 8002f5e:	1f05      	subs	r5, r0, #4
 8002f60:	6808      	ldr	r0, [r1, #0]
 8002f62:	6802      	ldr	r2, [r0, #0]
 8002f64:	6891      	ldr	r1, [r2, #8]
 8002f66:	eb01 0086 	add.w	r0, r1, r6, lsl #2
 8002f6a:	1f06      	subs	r6, r0, #4
 8002f6c:	42a5      	cmp	r5, r4
 8002f6e:	d30f      	bcc.n	8002f90 <forward_soft_plus+0x54>
 8002f70:	ed95 0a00 	vldr	s0, [r5]
 8002f74:	f006 feb4 	bl	8009ce0 <expf>
 8002f78:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8002f7c:	ee30 0a20 	vadd.f32	s0, s0, s1
 8002f80:	f006 ff28 	bl	8009dd4 <logf>
 8002f84:	ed86 0a00 	vstr	s0, [r6]
 8002f88:	1f2d      	subs	r5, r5, #4
 8002f8a:	1f36      	subs	r6, r6, #4
 8002f8c:	42a5      	cmp	r5, r4
 8002f8e:	d2ef      	bcs.n	8002f70 <forward_soft_plus+0x34>
 8002f90:	bd70      	pop	{r4, r5, r6, pc}
	...

08002f94 <forward_soft_sign>:
 8002f94:	b430      	push	{r4, r5}
 8002f96:	6940      	ldr	r0, [r0, #20]
 8002f98:	6802      	ldr	r2, [r0, #0]
 8002f9a:	6811      	ldr	r1, [r2, #0]
 8002f9c:	68d2      	ldr	r2, [r2, #12]
 8002f9e:	680b      	ldr	r3, [r1, #0]
 8002fa0:	685c      	ldr	r4, [r3, #4]
 8002fa2:	6898      	ldr	r0, [r3, #8]
 8002fa4:	68d9      	ldr	r1, [r3, #12]
 8002fa6:	4344      	muls	r4, r0
 8002fa8:	6918      	ldr	r0, [r3, #16]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	434c      	muls	r4, r1
 8002fae:	4344      	muls	r4, r0
 8002fb0:	6898      	ldr	r0, [r3, #8]
 8002fb2:	6813      	ldr	r3, [r2, #0]
 8002fb4:	681d      	ldr	r5, [r3, #0]
 8002fb6:	68aa      	ldr	r2, [r5, #8]
 8002fb8:	eb00 0184 	add.w	r1, r0, r4, lsl #2
 8002fbc:	eb02 0384 	add.w	r3, r2, r4, lsl #2
 8002fc0:	1f09      	subs	r1, r1, #4
 8002fc2:	1f1a      	subs	r2, r3, #4
 8002fc4:	4281      	cmp	r1, r0
 8002fc6:	d30f      	bcc.n	8002fe8 <forward_soft_sign+0x54>
 8002fc8:	ed91 0a00 	vldr	s0, [r1]
 8002fcc:	eef0 0ac0 	vabs.f32	s1, s0
 8002fd0:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8002fd4:	ee70 0a81 	vadd.f32	s1, s1, s2
 8002fd8:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8002fdc:	ed82 0a00 	vstr	s0, [r2]
 8002fe0:	1f09      	subs	r1, r1, #4
 8002fe2:	1f12      	subs	r2, r2, #4
 8002fe4:	4281      	cmp	r1, r0
 8002fe6:	d2ef      	bcs.n	8002fc8 <forward_soft_sign+0x34>
 8002fe8:	bc30      	pop	{r4, r5}
 8002fea:	4770      	bx	lr

08002fec <forward_tanh>:
 8002fec:	b570      	push	{r4, r5, r6, lr}
 8002fee:	6940      	ldr	r0, [r0, #20]
 8002ff0:	6802      	ldr	r2, [r0, #0]
 8002ff2:	6811      	ldr	r1, [r2, #0]
 8002ff4:	680b      	ldr	r3, [r1, #0]
 8002ff6:	685e      	ldr	r6, [r3, #4]
 8002ff8:	6898      	ldr	r0, [r3, #8]
 8002ffa:	68d9      	ldr	r1, [r3, #12]
 8002ffc:	4346      	muls	r6, r0
 8002ffe:	6918      	ldr	r0, [r3, #16]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	689c      	ldr	r4, [r3, #8]
 8003004:	434e      	muls	r6, r1
 8003006:	4346      	muls	r6, r0
 8003008:	68d1      	ldr	r1, [r2, #12]
 800300a:	eb04 0086 	add.w	r0, r4, r6, lsl #2
 800300e:	1f05      	subs	r5, r0, #4
 8003010:	6808      	ldr	r0, [r1, #0]
 8003012:	6802      	ldr	r2, [r0, #0]
 8003014:	6891      	ldr	r1, [r2, #8]
 8003016:	eb01 0086 	add.w	r0, r1, r6, lsl #2
 800301a:	1f06      	subs	r6, r0, #4
 800301c:	42a5      	cmp	r5, r4
 800301e:	d309      	bcc.n	8003034 <forward_tanh+0x48>
 8003020:	ed95 0a00 	vldr	s0, [r5]
 8003024:	f006 fe0a 	bl	8009c3c <tanhf>
 8003028:	ed86 0a00 	vstr	s0, [r6]
 800302c:	1f2d      	subs	r5, r5, #4
 800302e:	1f36      	subs	r6, r6, #4
 8003030:	42a5      	cmp	r5, r4
 8003032:	d2f5      	bcs.n	8003020 <forward_tanh+0x34>
 8003034:	bd70      	pop	{r4, r5, r6, pc}

08003036 <forward_sm>:
 8003036:	b570      	push	{r4, r5, r6, lr}
 8003038:	b082      	sub	sp, #8
 800303a:	6940      	ldr	r0, [r0, #20]
 800303c:	6800      	ldr	r0, [r0, #0]
 800303e:	6801      	ldr	r1, [r0, #0]
 8003040:	68c0      	ldr	r0, [r0, #12]
 8003042:	680c      	ldr	r4, [r1, #0]
 8003044:	6805      	ldr	r5, [r0, #0]
 8003046:	68a2      	ldr	r2, [r4, #8]
 8003048:	68a8      	ldr	r0, [r5, #8]
 800304a:	9001      	str	r0, [sp, #4]
 800304c:	9200      	str	r2, [sp, #0]
 800304e:	4613      	mov	r3, r2
 8003050:	6866      	ldr	r6, [r4, #4]
 8003052:	68e1      	ldr	r1, [r4, #12]
 8003054:	6920      	ldr	r0, [r4, #16]
 8003056:	6824      	ldr	r4, [r4, #0]
 8003058:	4372      	muls	r2, r6
 800305a:	434a      	muls	r2, r1
 800305c:	4342      	muls	r2, r0
 800305e:	6828      	ldr	r0, [r5, #0]
 8003060:	68a1      	ldr	r1, [r4, #8]
 8003062:	6880      	ldr	r0, [r0, #8]
 8003064:	f7ff fa52 	bl	800250c <nl_func_sm_array_f32>
 8003068:	b002      	add	sp, #8
 800306a:	bd70      	pop	{r4, r5, r6, pc}

0800306c <forward_hardmax>:
 800306c:	b430      	push	{r4, r5}
 800306e:	6941      	ldr	r1, [r0, #20]
 8003070:	680c      	ldr	r4, [r1, #0]
 8003072:	6980      	ldr	r0, [r0, #24]
 8003074:	6822      	ldr	r2, [r4, #0]
 8003076:	6883      	ldr	r3, [r0, #8]
 8003078:	6811      	ldr	r1, [r2, #0]
 800307a:	6808      	ldr	r0, [r1, #0]
 800307c:	1d0a      	adds	r2, r1, #4
 800307e:	6881      	ldr	r1, [r0, #8]
 8003080:	68e0      	ldr	r0, [r4, #12]
 8003082:	6804      	ldr	r4, [r0, #0]
 8003084:	6825      	ldr	r5, [r4, #0]
 8003086:	68a8      	ldr	r0, [r5, #8]
 8003088:	bc30      	pop	{r4, r5}
 800308a:	f7ff bb69 	b.w	8002760 <nl_func_hardmax_array_f32>
	...

08003090 <ai_array_fmt_name>:
 8003090:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 8003094:	f1b0 0140 	subs.w	r1, r0, #64	; 0x40
 8003098:	d062      	beq.n	8003160 <ai_array_fmt_name+0xd0>
 800309a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800309e:	1a89      	subs	r1, r1, r2
 80030a0:	f000 8094 	beq.w	80031cc <ai_array_fmt_name+0x13c>
 80030a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030a8:	1a89      	subs	r1, r1, r2
 80030aa:	d071      	beq.n	8003190 <ai_array_fmt_name+0x100>
 80030ac:	1a89      	subs	r1, r1, r2
 80030ae:	d063      	beq.n	8003178 <ai_array_fmt_name+0xe8>
 80030b0:	1fc9      	subs	r1, r1, #7
 80030b2:	f000 808e 	beq.w	80031d2 <ai_array_fmt_name+0x142>
 80030b6:	f240 32f9 	movw	r2, #1017	; 0x3f9
 80030ba:	1a89      	subs	r1, r1, r2
 80030bc:	d05f      	beq.n	800317e <ai_array_fmt_name+0xee>
 80030be:	390f      	subs	r1, #15
 80030c0:	f000 808a 	beq.w	80031d8 <ai_array_fmt_name+0x148>
 80030c4:	f240 72f1 	movw	r2, #2033	; 0x7f1
 80030c8:	1a89      	subs	r1, r1, r2
 80030ca:	d05b      	beq.n	8003184 <ai_array_fmt_name+0xf4>
 80030cc:	391f      	subs	r1, #31
 80030ce:	f000 8086 	beq.w	80031de <ai_array_fmt_name+0x14e>
 80030d2:	f640 72e1 	movw	r2, #4065	; 0xfe1
 80030d6:	1a89      	subs	r1, r1, r2
 80030d8:	d057      	beq.n	800318a <ai_array_fmt_name+0xfa>
 80030da:	f8df 25d4 	ldr.w	r2, [pc, #1492]	; 80036b0 <.text_15>
 80030de:	1a89      	subs	r1, r1, r2
 80030e0:	f000 808f 	beq.w	8003202 <ai_array_fmt_name+0x172>
 80030e4:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 80030e8:	1a89      	subs	r1, r1, r2
 80030ea:	f000 8087 	beq.w	80031fc <ai_array_fmt_name+0x16c>
 80030ee:	f8df 25c4 	ldr.w	r2, [pc, #1476]	; 80036b4 <.text_16>
 80030f2:	1a89      	subs	r1, r1, r2
 80030f4:	d05e      	beq.n	80031b4 <ai_array_fmt_name+0x124>
 80030f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030fa:	1a89      	subs	r1, r1, r2
 80030fc:	d057      	beq.n	80031ae <ai_array_fmt_name+0x11e>
 80030fe:	1a89      	subs	r1, r1, r2
 8003100:	d049      	beq.n	8003196 <ai_array_fmt_name+0x106>
 8003102:	1fc9      	subs	r1, r1, #7
 8003104:	d059      	beq.n	80031ba <ai_array_fmt_name+0x12a>
 8003106:	f240 32f9 	movw	r2, #1017	; 0x3f9
 800310a:	1a89      	subs	r1, r1, r2
 800310c:	d046      	beq.n	800319c <ai_array_fmt_name+0x10c>
 800310e:	390f      	subs	r1, #15
 8003110:	d056      	beq.n	80031c0 <ai_array_fmt_name+0x130>
 8003112:	f240 72f1 	movw	r2, #2033	; 0x7f1
 8003116:	1a89      	subs	r1, r1, r2
 8003118:	d043      	beq.n	80031a2 <ai_array_fmt_name+0x112>
 800311a:	391f      	subs	r1, #31
 800311c:	d053      	beq.n	80031c6 <ai_array_fmt_name+0x136>
 800311e:	f640 72e1 	movw	r2, #4065	; 0xfe1
 8003122:	1a89      	subs	r1, r1, r2
 8003124:	d040      	beq.n	80031a8 <ai_array_fmt_name+0x118>
 8003126:	f8df 2588 	ldr.w	r2, [pc, #1416]	; 80036b0 <.text_15>
 800312a:	1a89      	subs	r1, r1, r2
 800312c:	d063      	beq.n	80031f6 <ai_array_fmt_name+0x166>
 800312e:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8003132:	1a89      	subs	r1, r1, r2
 8003134:	d05c      	beq.n	80031f0 <ai_array_fmt_name+0x160>
 8003136:	f8df 2580 	ldr.w	r2, [pc, #1408]	; 80036b8 <.text_17>
 800313a:	1a89      	subs	r1, r1, r2
 800313c:	d019      	beq.n	8003172 <ai_array_fmt_name+0xe2>
 800313e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003142:	1a89      	subs	r1, r1, r2
 8003144:	d00f      	beq.n	8003166 <ai_array_fmt_name+0xd6>
 8003146:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800314a:	1a89      	subs	r1, r1, r2
 800314c:	d00e      	beq.n	800316c <ai_array_fmt_name+0xdc>
 800314e:	f8df 256c 	ldr.w	r2, [pc, #1388]	; 80036bc <.text_18>
 8003152:	1a89      	subs	r1, r1, r2
 8003154:	d049      	beq.n	80031ea <ai_array_fmt_name+0x15a>
 8003156:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 800315a:	1a89      	subs	r1, r1, r2
 800315c:	d042      	beq.n	80031e4 <ai_array_fmt_name+0x154>
 800315e:	e053      	b.n	8003208 <ai_array_fmt_name+0x178>
 8003160:	f20f 6074 	addw	r0, pc, #1652	; 0x674
 8003164:	4770      	bx	lr
 8003166:	f20f 607c 	addw	r0, pc, #1660	; 0x67c
 800316a:	4770      	bx	lr
 800316c:	f20f 6080 	addw	r0, pc, #1664	; 0x680
 8003170:	4770      	bx	lr
 8003172:	f20f 6088 	addw	r0, pc, #1672	; 0x688
 8003176:	4770      	bx	lr
 8003178:	f20f 608c 	addw	r0, pc, #1676	; 0x68c
 800317c:	4770      	bx	lr
 800317e:	f20f 6090 	addw	r0, pc, #1680	; 0x690
 8003182:	4770      	bx	lr
 8003184:	f20f 6090 	addw	r0, pc, #1680	; 0x690
 8003188:	4770      	bx	lr
 800318a:	f20f 6094 	addw	r0, pc, #1684	; 0x694
 800318e:	4770      	bx	lr
 8003190:	f20f 6094 	addw	r0, pc, #1684	; 0x694
 8003194:	4770      	bx	lr
 8003196:	f20f 6098 	addw	r0, pc, #1688	; 0x698
 800319a:	4770      	bx	lr
 800319c:	f20f 6098 	addw	r0, pc, #1688	; 0x698
 80031a0:	4770      	bx	lr
 80031a2:	f20f 609c 	addw	r0, pc, #1692	; 0x69c
 80031a6:	4770      	bx	lr
 80031a8:	f20f 609c 	addw	r0, pc, #1692	; 0x69c
 80031ac:	4770      	bx	lr
 80031ae:	f20f 60a0 	addw	r0, pc, #1696	; 0x6a0
 80031b2:	4770      	bx	lr
 80031b4:	f20f 60a0 	addw	r0, pc, #1696	; 0x6a0
 80031b8:	4770      	bx	lr
 80031ba:	f20f 60a4 	addw	r0, pc, #1700	; 0x6a4
 80031be:	4770      	bx	lr
 80031c0:	f20f 60a4 	addw	r0, pc, #1700	; 0x6a4
 80031c4:	4770      	bx	lr
 80031c6:	f20f 60a8 	addw	r0, pc, #1704	; 0x6a8
 80031ca:	4770      	bx	lr
 80031cc:	f20f 60a8 	addw	r0, pc, #1704	; 0x6a8
 80031d0:	4770      	bx	lr
 80031d2:	f20f 60ac 	addw	r0, pc, #1708	; 0x6ac
 80031d6:	4770      	bx	lr
 80031d8:	f20f 60ac 	addw	r0, pc, #1708	; 0x6ac
 80031dc:	4770      	bx	lr
 80031de:	f20f 60b4 	addw	r0, pc, #1716	; 0x6b4
 80031e2:	4770      	bx	lr
 80031e4:	f20f 60b8 	addw	r0, pc, #1720	; 0x6b8
 80031e8:	4770      	bx	lr
 80031ea:	f20f 60c4 	addw	r0, pc, #1732	; 0x6c4
 80031ee:	4770      	bx	lr
 80031f0:	f20f 60cc 	addw	r0, pc, #1740	; 0x6cc
 80031f4:	4770      	bx	lr
 80031f6:	f20f 60d8 	addw	r0, pc, #1752	; 0x6d8
 80031fa:	4770      	bx	lr
 80031fc:	f20f 60e0 	addw	r0, pc, #1760	; 0x6e0
 8003200:	4770      	bx	lr
 8003202:	f20f 60ec 	addw	r0, pc, #1772	; 0x6ec
 8003206:	4770      	bx	lr
 8003208:	f36f 000d 	bfc	r0, #0, #14
 800320c:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 8003210:	2840      	cmp	r0, #64	; 0x40
 8003212:	d009      	beq.n	8003228 <ai_array_fmt_name+0x198>
 8003214:	f8df 14a8 	ldr.w	r1, [pc, #1192]	; 80036c0 <.text_19>
 8003218:	4288      	cmp	r0, r1
 800321a:	d00b      	beq.n	8003234 <ai_array_fmt_name+0x1a4>
 800321c:	f8df 14a4 	ldr.w	r1, [pc, #1188]	; 80036c4 <.text_20>
 8003220:	4288      	cmp	r0, r1
 8003222:	d004      	beq.n	800322e <ai_array_fmt_name+0x19e>
 8003224:	a07a      	add	r0, pc, #488	; (adr r0, 8003410 <.text_8>)
 8003226:	4770      	bx	lr
 8003228:	f20f 60d4 	addw	r0, pc, #1748	; 0x6d4
 800322c:	4770      	bx	lr
 800322e:	f20f 60e8 	addw	r0, pc, #1768	; 0x6e8
 8003232:	4770      	bx	lr
 8003234:	f20f 60f4 	addw	r0, pc, #1780	; 0x6f4
 8003238:	4770      	bx	lr

0800323a <ai_array_fmt_exported>:
 800323a:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 800323e:	f1b0 0140 	subs.w	r1, r0, #64	; 0x40
 8003242:	d068      	beq.n	8003316 <ai_array_fmt_exported+0xdc>
 8003244:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8003248:	1a89      	subs	r1, r1, r2
 800324a:	d064      	beq.n	8003316 <ai_array_fmt_exported+0xdc>
 800324c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003250:	1a89      	subs	r1, r1, r2
 8003252:	d062      	beq.n	800331a <ai_array_fmt_exported+0xe0>
 8003254:	1a89      	subs	r1, r1, r2
 8003256:	d05e      	beq.n	8003316 <ai_array_fmt_exported+0xdc>
 8003258:	1fc9      	subs	r1, r1, #7
 800325a:	d05c      	beq.n	8003316 <ai_array_fmt_exported+0xdc>
 800325c:	f240 32f9 	movw	r2, #1017	; 0x3f9
 8003260:	1a89      	subs	r1, r1, r2
 8003262:	d058      	beq.n	8003316 <ai_array_fmt_exported+0xdc>
 8003264:	390f      	subs	r1, #15
 8003266:	d056      	beq.n	8003316 <ai_array_fmt_exported+0xdc>
 8003268:	f240 72f1 	movw	r2, #2033	; 0x7f1
 800326c:	1a89      	subs	r1, r1, r2
 800326e:	d054      	beq.n	800331a <ai_array_fmt_exported+0xe0>
 8003270:	391f      	subs	r1, #31
 8003272:	d052      	beq.n	800331a <ai_array_fmt_exported+0xe0>
 8003274:	f640 72e1 	movw	r2, #4065	; 0xfe1
 8003278:	1a89      	subs	r1, r1, r2
 800327a:	d04e      	beq.n	800331a <ai_array_fmt_exported+0xe0>
 800327c:	f8df 2430 	ldr.w	r2, [pc, #1072]	; 80036b0 <.text_15>
 8003280:	1a89      	subs	r1, r1, r2
 8003282:	d04a      	beq.n	800331a <ai_array_fmt_exported+0xe0>
 8003284:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8003288:	1a89      	subs	r1, r1, r2
 800328a:	d046      	beq.n	800331a <ai_array_fmt_exported+0xe0>
 800328c:	f8df 2424 	ldr.w	r2, [pc, #1060]	; 80036b4 <.text_16>
 8003290:	1a89      	subs	r1, r1, r2
 8003292:	d040      	beq.n	8003316 <ai_array_fmt_exported+0xdc>
 8003294:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003298:	1a89      	subs	r1, r1, r2
 800329a:	d03e      	beq.n	800331a <ai_array_fmt_exported+0xe0>
 800329c:	1a89      	subs	r1, r1, r2
 800329e:	d03a      	beq.n	8003316 <ai_array_fmt_exported+0xdc>
 80032a0:	1fc9      	subs	r1, r1, #7
 80032a2:	d038      	beq.n	8003316 <ai_array_fmt_exported+0xdc>
 80032a4:	f240 32f9 	movw	r2, #1017	; 0x3f9
 80032a8:	1a89      	subs	r1, r1, r2
 80032aa:	d034      	beq.n	8003316 <ai_array_fmt_exported+0xdc>
 80032ac:	390f      	subs	r1, #15
 80032ae:	d032      	beq.n	8003316 <ai_array_fmt_exported+0xdc>
 80032b0:	f240 72f1 	movw	r2, #2033	; 0x7f1
 80032b4:	1a89      	subs	r1, r1, r2
 80032b6:	d030      	beq.n	800331a <ai_array_fmt_exported+0xe0>
 80032b8:	391f      	subs	r1, #31
 80032ba:	d02e      	beq.n	800331a <ai_array_fmt_exported+0xe0>
 80032bc:	f640 72e1 	movw	r2, #4065	; 0xfe1
 80032c0:	1a89      	subs	r1, r1, r2
 80032c2:	d02a      	beq.n	800331a <ai_array_fmt_exported+0xe0>
 80032c4:	f8df 23e8 	ldr.w	r2, [pc, #1000]	; 80036b0 <.text_15>
 80032c8:	1a89      	subs	r1, r1, r2
 80032ca:	d026      	beq.n	800331a <ai_array_fmt_exported+0xe0>
 80032cc:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 80032d0:	1a89      	subs	r1, r1, r2
 80032d2:	d022      	beq.n	800331a <ai_array_fmt_exported+0xe0>
 80032d4:	f8df 23e0 	ldr.w	r2, [pc, #992]	; 80036b8 <.text_17>
 80032d8:	1a89      	subs	r1, r1, r2
 80032da:	d01e      	beq.n	800331a <ai_array_fmt_exported+0xe0>
 80032dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80032e0:	1a89      	subs	r1, r1, r2
 80032e2:	d018      	beq.n	8003316 <ai_array_fmt_exported+0xdc>
 80032e4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80032e8:	1a89      	subs	r1, r1, r2
 80032ea:	d016      	beq.n	800331a <ai_array_fmt_exported+0xe0>
 80032ec:	f8df 23cc 	ldr.w	r2, [pc, #972]	; 80036bc <.text_18>
 80032f0:	1a89      	subs	r1, r1, r2
 80032f2:	d012      	beq.n	800331a <ai_array_fmt_exported+0xe0>
 80032f4:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 80032f8:	1a89      	subs	r1, r1, r2
 80032fa:	d00e      	beq.n	800331a <ai_array_fmt_exported+0xe0>
 80032fc:	f36f 000d 	bfc	r0, #0, #14
 8003300:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 8003304:	2840      	cmp	r0, #64	; 0x40
 8003306:	bf1f      	itttt	ne
 8003308:	f8df 33b4 	ldrne.w	r3, [pc, #948]	; 80036c0 <.text_19>
 800330c:	4298      	cmpne	r0, r3
 800330e:	f8df 33b4 	ldrne.w	r3, [pc, #948]	; 80036c4 <.text_20>
 8003312:	4298      	cmpne	r0, r3
 8003314:	d101      	bne.n	800331a <ai_array_fmt_exported+0xe0>
 8003316:	2001      	movs	r0, #1
 8003318:	4770      	bx	lr
 800331a:	2000      	movs	r0, #0
 800331c:	4770      	bx	lr

0800331e <ai_array_fmt_valid>:
 800331e:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 8003322:	f1b0 0140 	subs.w	r1, r0, #64	; 0x40
 8003326:	d069      	beq.n	80033fc <ai_array_fmt_valid+0xde>
 8003328:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800332c:	1a89      	subs	r1, r1, r2
 800332e:	d065      	beq.n	80033fc <ai_array_fmt_valid+0xde>
 8003330:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003334:	1a89      	subs	r1, r1, r2
 8003336:	d061      	beq.n	80033fc <ai_array_fmt_valid+0xde>
 8003338:	1a89      	subs	r1, r1, r2
 800333a:	d05f      	beq.n	80033fc <ai_array_fmt_valid+0xde>
 800333c:	1fc9      	subs	r1, r1, #7
 800333e:	d05d      	beq.n	80033fc <ai_array_fmt_valid+0xde>
 8003340:	f240 32f9 	movw	r2, #1017	; 0x3f9
 8003344:	1a89      	subs	r1, r1, r2
 8003346:	d059      	beq.n	80033fc <ai_array_fmt_valid+0xde>
 8003348:	390f      	subs	r1, #15
 800334a:	d057      	beq.n	80033fc <ai_array_fmt_valid+0xde>
 800334c:	f240 72f1 	movw	r2, #2033	; 0x7f1
 8003350:	1a89      	subs	r1, r1, r2
 8003352:	d053      	beq.n	80033fc <ai_array_fmt_valid+0xde>
 8003354:	391f      	subs	r1, #31
 8003356:	d051      	beq.n	80033fc <ai_array_fmt_valid+0xde>
 8003358:	f640 72e1 	movw	r2, #4065	; 0xfe1
 800335c:	1a89      	subs	r1, r1, r2
 800335e:	d04d      	beq.n	80033fc <ai_array_fmt_valid+0xde>
 8003360:	f8df 234c 	ldr.w	r2, [pc, #844]	; 80036b0 <.text_15>
 8003364:	1a89      	subs	r1, r1, r2
 8003366:	d049      	beq.n	80033fc <ai_array_fmt_valid+0xde>
 8003368:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 800336c:	1a89      	subs	r1, r1, r2
 800336e:	d045      	beq.n	80033fc <ai_array_fmt_valid+0xde>
 8003370:	f8df 2340 	ldr.w	r2, [pc, #832]	; 80036b4 <.text_16>
 8003374:	1a89      	subs	r1, r1, r2
 8003376:	d041      	beq.n	80033fc <ai_array_fmt_valid+0xde>
 8003378:	f44f 7200 	mov.w	r2, #512	; 0x200
 800337c:	1a89      	subs	r1, r1, r2
 800337e:	d03d      	beq.n	80033fc <ai_array_fmt_valid+0xde>
 8003380:	1a89      	subs	r1, r1, r2
 8003382:	d03b      	beq.n	80033fc <ai_array_fmt_valid+0xde>
 8003384:	1fc9      	subs	r1, r1, #7
 8003386:	d039      	beq.n	80033fc <ai_array_fmt_valid+0xde>
 8003388:	f240 32f9 	movw	r2, #1017	; 0x3f9
 800338c:	1a89      	subs	r1, r1, r2
 800338e:	d035      	beq.n	80033fc <ai_array_fmt_valid+0xde>
 8003390:	390f      	subs	r1, #15
 8003392:	d033      	beq.n	80033fc <ai_array_fmt_valid+0xde>
 8003394:	f240 72f1 	movw	r2, #2033	; 0x7f1
 8003398:	1a89      	subs	r1, r1, r2
 800339a:	d02f      	beq.n	80033fc <ai_array_fmt_valid+0xde>
 800339c:	391f      	subs	r1, #31
 800339e:	d02d      	beq.n	80033fc <ai_array_fmt_valid+0xde>
 80033a0:	f640 72e1 	movw	r2, #4065	; 0xfe1
 80033a4:	1a89      	subs	r1, r1, r2
 80033a6:	d029      	beq.n	80033fc <ai_array_fmt_valid+0xde>
 80033a8:	f8df 2304 	ldr.w	r2, [pc, #772]	; 80036b0 <.text_15>
 80033ac:	1a89      	subs	r1, r1, r2
 80033ae:	d025      	beq.n	80033fc <ai_array_fmt_valid+0xde>
 80033b0:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 80033b4:	1a89      	subs	r1, r1, r2
 80033b6:	d021      	beq.n	80033fc <ai_array_fmt_valid+0xde>
 80033b8:	f8df 22fc 	ldr.w	r2, [pc, #764]	; 80036b8 <.text_17>
 80033bc:	1a89      	subs	r1, r1, r2
 80033be:	d01d      	beq.n	80033fc <ai_array_fmt_valid+0xde>
 80033c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80033c4:	1a89      	subs	r1, r1, r2
 80033c6:	d019      	beq.n	80033fc <ai_array_fmt_valid+0xde>
 80033c8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80033cc:	1a89      	subs	r1, r1, r2
 80033ce:	d015      	beq.n	80033fc <ai_array_fmt_valid+0xde>
 80033d0:	f8df 22e8 	ldr.w	r2, [pc, #744]	; 80036bc <.text_18>
 80033d4:	1a89      	subs	r1, r1, r2
 80033d6:	d011      	beq.n	80033fc <ai_array_fmt_valid+0xde>
 80033d8:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 80033dc:	1a89      	subs	r1, r1, r2
 80033de:	bf1e      	ittt	ne
 80033e0:	f36f 000d 	bfcne	r0, #0, #14
 80033e4:	f040 0040 	orrne.w	r0, r0, #64	; 0x40
 80033e8:	2840      	cmpne	r0, #64	; 0x40
 80033ea:	d007      	beq.n	80033fc <ai_array_fmt_valid+0xde>
 80033ec:	f8df 32d0 	ldr.w	r3, [pc, #720]	; 80036c0 <.text_19>
 80033f0:	4298      	cmp	r0, r3
 80033f2:	bf1c      	itt	ne
 80033f4:	f8df 32cc 	ldrne.w	r3, [pc, #716]	; 80036c4 <.text_20>
 80033f8:	4298      	cmpne	r0, r3
 80033fa:	d101      	bne.n	8003400 <ai_array_fmt_valid+0xe2>
 80033fc:	2001      	movs	r0, #1
 80033fe:	4770      	bx	lr
 8003400:	2000      	movs	r0, #0
 8003402:	4770      	bx	lr

08003404 <ai_array_fmt_get_formats>:
 8003404:	f8df 12c0 	ldr.w	r1, [pc, #704]	; 80036c8 <.text_21>
 8003408:	6001      	str	r1, [r0, #0]
 800340a:	201c      	movs	r0, #28
 800340c:	4770      	bx	lr
	...

08003410 <.text_8>:
 8003410:	00000000 	.word	0x00000000

08003414 <ai_buffer_fmt_name>:
 8003414:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 8003418:	f1b0 0140 	subs.w	r1, r0, #64	; 0x40
 800341c:	d022      	beq.n	8003464 <ai_buffer_fmt_name+0x50>
 800341e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8003422:	1a89      	subs	r1, r1, r2
 8003424:	d039      	beq.n	800349a <ai_buffer_fmt_name+0x86>
 8003426:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800342a:	1a89      	subs	r1, r1, r2
 800342c:	d020      	beq.n	8003470 <ai_buffer_fmt_name+0x5c>
 800342e:	1fc9      	subs	r1, r1, #7
 8003430:	d036      	beq.n	80034a0 <ai_buffer_fmt_name+0x8c>
 8003432:	f240 32f9 	movw	r2, #1017	; 0x3f9
 8003436:	1a89      	subs	r1, r1, r2
 8003438:	d01d      	beq.n	8003476 <ai_buffer_fmt_name+0x62>
 800343a:	390f      	subs	r1, #15
 800343c:	d033      	beq.n	80034a6 <ai_buffer_fmt_name+0x92>
 800343e:	4aa3      	ldr	r2, [pc, #652]	; (80036cc <.text_22>)
 8003440:	1a89      	subs	r1, r1, r2
 8003442:	d021      	beq.n	8003488 <ai_buffer_fmt_name+0x74>
 8003444:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003448:	1a89      	subs	r1, r1, r2
 800344a:	d017      	beq.n	800347c <ai_buffer_fmt_name+0x68>
 800344c:	1fc9      	subs	r1, r1, #7
 800344e:	d01e      	beq.n	800348e <ai_buffer_fmt_name+0x7a>
 8003450:	f240 32f9 	movw	r2, #1017	; 0x3f9
 8003454:	1a89      	subs	r1, r1, r2
 8003456:	d014      	beq.n	8003482 <ai_buffer_fmt_name+0x6e>
 8003458:	390f      	subs	r1, #15
 800345a:	d01b      	beq.n	8003494 <ai_buffer_fmt_name+0x80>
 800345c:	4a9c      	ldr	r2, [pc, #624]	; (80036d0 <.text_23>)
 800345e:	1a89      	subs	r1, r1, r2
 8003460:	d003      	beq.n	800346a <ai_buffer_fmt_name+0x56>
 8003462:	e023      	b.n	80034ac <ai_buffer_fmt_name+0x98>
 8003464:	f20f 3070 	addw	r0, pc, #880	; 0x370
 8003468:	4770      	bx	lr
 800346a:	f20f 3078 	addw	r0, pc, #888	; 0x378
 800346e:	4770      	bx	lr
 8003470:	f20f 3094 	addw	r0, pc, #916	; 0x394
 8003474:	4770      	bx	lr
 8003476:	f20f 3098 	addw	r0, pc, #920	; 0x398
 800347a:	4770      	bx	lr
 800347c:	f20f 30b0 	addw	r0, pc, #944	; 0x3b0
 8003480:	4770      	bx	lr
 8003482:	f20f 30b4 	addw	r0, pc, #948	; 0x3b4
 8003486:	4770      	bx	lr
 8003488:	f20f 30cc 	addw	r0, pc, #972	; 0x3cc
 800348c:	4770      	bx	lr
 800348e:	f20f 30d0 	addw	r0, pc, #976	; 0x3d0
 8003492:	4770      	bx	lr
 8003494:	f20f 30d0 	addw	r0, pc, #976	; 0x3d0
 8003498:	4770      	bx	lr
 800349a:	f20f 30dc 	addw	r0, pc, #988	; 0x3dc
 800349e:	4770      	bx	lr
 80034a0:	f20f 30dc 	addw	r0, pc, #988	; 0x3dc
 80034a4:	4770      	bx	lr
 80034a6:	f20f 30e0 	addw	r0, pc, #992	; 0x3e0
 80034aa:	4770      	bx	lr
 80034ac:	0b80      	lsrs	r0, r0, #14
 80034ae:	0380      	lsls	r0, r0, #14
 80034b0:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 80034b4:	2840      	cmp	r0, #64	; 0x40
 80034b6:	d007      	beq.n	80034c8 <ai_buffer_fmt_name+0xb4>
 80034b8:	4981      	ldr	r1, [pc, #516]	; (80036c0 <.text_19>)
 80034ba:	4288      	cmp	r0, r1
 80034bc:	d00a      	beq.n	80034d4 <ai_buffer_fmt_name+0xc0>
 80034be:	4981      	ldr	r1, [pc, #516]	; (80036c4 <.text_20>)
 80034c0:	4288      	cmp	r0, r1
 80034c2:	d004      	beq.n	80034ce <ai_buffer_fmt_name+0xba>
 80034c4:	a079      	add	r0, pc, #484	; (adr r0, 80036ac <.text_14>)
 80034c6:	4770      	bx	lr
 80034c8:	f20f 4074 	addw	r0, pc, #1140	; 0x474
 80034cc:	4770      	bx	lr
 80034ce:	f20f 4088 	addw	r0, pc, #1160	; 0x488
 80034d2:	4770      	bx	lr
 80034d4:	f20f 4094 	addw	r0, pc, #1172	; 0x494
 80034d8:	4770      	bx	lr

080034da <ai_buffer_fmt_valid>:
 80034da:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 80034de:	f1b0 0140 	subs.w	r1, r0, #64	; 0x40
 80034e2:	d02d      	beq.n	8003540 <ai_buffer_fmt_valid+0x66>
 80034e4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80034e8:	1a89      	subs	r1, r1, r2
 80034ea:	d029      	beq.n	8003540 <ai_buffer_fmt_valid+0x66>
 80034ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80034f0:	1a89      	subs	r1, r1, r2
 80034f2:	d025      	beq.n	8003540 <ai_buffer_fmt_valid+0x66>
 80034f4:	1fc9      	subs	r1, r1, #7
 80034f6:	d023      	beq.n	8003540 <ai_buffer_fmt_valid+0x66>
 80034f8:	f240 32f9 	movw	r2, #1017	; 0x3f9
 80034fc:	1a89      	subs	r1, r1, r2
 80034fe:	d01f      	beq.n	8003540 <ai_buffer_fmt_valid+0x66>
 8003500:	390f      	subs	r1, #15
 8003502:	d01d      	beq.n	8003540 <ai_buffer_fmt_valid+0x66>
 8003504:	4a71      	ldr	r2, [pc, #452]	; (80036cc <.text_22>)
 8003506:	1a89      	subs	r1, r1, r2
 8003508:	d01a      	beq.n	8003540 <ai_buffer_fmt_valid+0x66>
 800350a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800350e:	1a89      	subs	r1, r1, r2
 8003510:	d016      	beq.n	8003540 <ai_buffer_fmt_valid+0x66>
 8003512:	1fc9      	subs	r1, r1, #7
 8003514:	d014      	beq.n	8003540 <ai_buffer_fmt_valid+0x66>
 8003516:	f240 32f9 	movw	r2, #1017	; 0x3f9
 800351a:	1a89      	subs	r1, r1, r2
 800351c:	d010      	beq.n	8003540 <ai_buffer_fmt_valid+0x66>
 800351e:	390f      	subs	r1, #15
 8003520:	d00e      	beq.n	8003540 <ai_buffer_fmt_valid+0x66>
 8003522:	4a6b      	ldr	r2, [pc, #428]	; (80036d0 <.text_23>)
 8003524:	1a89      	subs	r1, r1, r2
 8003526:	bf1f      	itttt	ne
 8003528:	0b80      	lsrne	r0, r0, #14
 800352a:	0380      	lslne	r0, r0, #14
 800352c:	f040 0040 	orrne.w	r0, r0, #64	; 0x40
 8003530:	2840      	cmpne	r0, #64	; 0x40
 8003532:	d005      	beq.n	8003540 <ai_buffer_fmt_valid+0x66>
 8003534:	4b62      	ldr	r3, [pc, #392]	; (80036c0 <.text_19>)
 8003536:	4298      	cmp	r0, r3
 8003538:	bf1c      	itt	ne
 800353a:	4b62      	ldrne	r3, [pc, #392]	; (80036c4 <.text_20>)
 800353c:	4298      	cmpne	r0, r3
 800353e:	d101      	bne.n	8003544 <ai_buffer_fmt_valid+0x6a>
 8003540:	2001      	movs	r0, #1
 8003542:	4770      	bx	lr
 8003544:	2000      	movs	r0, #0
 8003546:	4770      	bx	lr

08003548 <ai_buffer_fmt_get_formats>:
 8003548:	4962      	ldr	r1, [pc, #392]	; (80036d4 <.text_24>)
 800354a:	6001      	str	r1, [r0, #0]
 800354c:	200c      	movs	r0, #12
 800354e:	4770      	bx	lr

08003550 <ai_array_to_buffer_fmt>:
 8003550:	4601      	mov	r1, r0
 8003552:	2040      	movs	r0, #64	; 0x40
 8003554:	f3c1 4243 	ubfx	r2, r1, #17, #4
 8003558:	2a02      	cmp	r2, #2
 800355a:	d104      	bne.n	8003566 <ai_array_to_buffer_fmt+0x16>
 800355c:	485e      	ldr	r0, [pc, #376]	; (80036d8 <.text_25>)
 800355e:	4008      	ands	r0, r1
 8003560:	f440 2080 	orr.w	r0, r0, #262144	; 0x40000
 8003564:	e037      	b.n	80035d6 <ai_array_to_buffer_fmt+0x86>
 8003566:	f021 427e 	bic.w	r2, r1, #4261412864	; 0xfe000000
 800356a:	4b55      	ldr	r3, [pc, #340]	; (80036c0 <.text_19>)
 800356c:	1ad2      	subs	r2, r2, r3
 800356e:	d02d      	beq.n	80035cc <ai_array_to_buffer_fmt+0x7c>
 8003570:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003574:	1ad2      	subs	r2, r2, r3
 8003576:	d01b      	beq.n	80035b0 <ai_array_to_buffer_fmt+0x60>
 8003578:	1fd2      	subs	r2, r2, #7
 800357a:	d029      	beq.n	80035d0 <ai_array_to_buffer_fmt+0x80>
 800357c:	f240 33f9 	movw	r3, #1017	; 0x3f9
 8003580:	1ad2      	subs	r2, r2, r3
 8003582:	d017      	beq.n	80035b4 <ai_array_to_buffer_fmt+0x64>
 8003584:	3a0f      	subs	r2, #15
 8003586:	d025      	beq.n	80035d4 <ai_array_to_buffer_fmt+0x84>
 8003588:	4b50      	ldr	r3, [pc, #320]	; (80036cc <.text_22>)
 800358a:	1ad2      	subs	r2, r2, r3
 800358c:	d018      	beq.n	80035c0 <ai_array_to_buffer_fmt+0x70>
 800358e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003592:	1ad2      	subs	r2, r2, r3
 8003594:	d010      	beq.n	80035b8 <ai_array_to_buffer_fmt+0x68>
 8003596:	1fd2      	subs	r2, r2, #7
 8003598:	d014      	beq.n	80035c4 <ai_array_to_buffer_fmt+0x74>
 800359a:	f240 33f9 	movw	r3, #1017	; 0x3f9
 800359e:	1ad2      	subs	r2, r2, r3
 80035a0:	d00c      	beq.n	80035bc <ai_array_to_buffer_fmt+0x6c>
 80035a2:	3a0f      	subs	r2, #15
 80035a4:	d010      	beq.n	80035c8 <ai_array_to_buffer_fmt+0x78>
 80035a6:	4b4a      	ldr	r3, [pc, #296]	; (80036d0 <.text_23>)
 80035a8:	1ad2      	subs	r2, r2, r3
 80035aa:	d114      	bne.n	80035d6 <ai_array_to_buffer_fmt+0x86>
 80035ac:	484b      	ldr	r0, [pc, #300]	; (80036dc <.text_26>)
 80035ae:	e012      	b.n	80035d6 <ai_array_to_buffer_fmt+0x86>
 80035b0:	484b      	ldr	r0, [pc, #300]	; (80036e0 <.text_27>)
 80035b2:	e010      	b.n	80035d6 <ai_array_to_buffer_fmt+0x86>
 80035b4:	484b      	ldr	r0, [pc, #300]	; (80036e4 <.text_28>)
 80035b6:	e00e      	b.n	80035d6 <ai_array_to_buffer_fmt+0x86>
 80035b8:	484b      	ldr	r0, [pc, #300]	; (80036e8 <.text_29>)
 80035ba:	e00c      	b.n	80035d6 <ai_array_to_buffer_fmt+0x86>
 80035bc:	484b      	ldr	r0, [pc, #300]	; (80036ec <.text_30>)
 80035be:	e00a      	b.n	80035d6 <ai_array_to_buffer_fmt+0x86>
 80035c0:	4840      	ldr	r0, [pc, #256]	; (80036c4 <.text_20>)
 80035c2:	e008      	b.n	80035d6 <ai_array_to_buffer_fmt+0x86>
 80035c4:	484a      	ldr	r0, [pc, #296]	; (80036f0 <.text_31>)
 80035c6:	e006      	b.n	80035d6 <ai_array_to_buffer_fmt+0x86>
 80035c8:	484a      	ldr	r0, [pc, #296]	; (80036f4 <.text_32>)
 80035ca:	e004      	b.n	80035d6 <ai_array_to_buffer_fmt+0x86>
 80035cc:	4618      	mov	r0, r3
 80035ce:	e002      	b.n	80035d6 <ai_array_to_buffer_fmt+0x86>
 80035d0:	4849      	ldr	r0, [pc, #292]	; (80036f8 <.text_33>)
 80035d2:	e000      	b.n	80035d6 <ai_array_to_buffer_fmt+0x86>
 80035d4:	4849      	ldr	r0, [pc, #292]	; (80036fc <.text_34>)
 80035d6:	004a      	lsls	r2, r1, #1
 80035d8:	bf4c      	ite	mi
 80035da:	f04f 4280 	movmi.w	r2, #1073741824	; 0x40000000
 80035de:	2200      	movpl	r2, #0
 80035e0:	4310      	orrs	r0, r2
 80035e2:	008a      	lsls	r2, r1, #2
 80035e4:	bf4c      	ite	mi
 80035e6:	f04f 5200 	movmi.w	r2, #536870912	; 0x20000000
 80035ea:	2200      	movpl	r2, #0
 80035ec:	4310      	orrs	r0, r2
 80035ee:	0109      	lsls	r1, r1, #4
 80035f0:	bf4c      	ite	mi
 80035f2:	f04f 6100 	movmi.w	r1, #134217728	; 0x8000000
 80035f6:	2100      	movpl	r1, #0
 80035f8:	4308      	orrs	r0, r1
 80035fa:	4770      	bx	lr

080035fc <ai_buffer_to_array_fmt>:
 80035fc:	4602      	mov	r2, r0
 80035fe:	f022 407e 	bic.w	r0, r2, #4261412864	; 0xfe000000
 8003602:	3840      	subs	r0, #64	; 0x40
 8003604:	d022      	beq.n	800364c <ai_buffer_to_array_fmt+0x50>
 8003606:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 800360a:	1a40      	subs	r0, r0, r1
 800360c:	d030      	beq.n	8003670 <ai_buffer_to_array_fmt+0x74>
 800360e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003612:	1a40      	subs	r0, r0, r1
 8003614:	d01e      	beq.n	8003654 <ai_buffer_to_array_fmt+0x58>
 8003616:	1fc0      	subs	r0, r0, #7
 8003618:	d02c      	beq.n	8003674 <ai_buffer_to_array_fmt+0x78>
 800361a:	f240 31f9 	movw	r1, #1017	; 0x3f9
 800361e:	1a40      	subs	r0, r0, r1
 8003620:	d01a      	beq.n	8003658 <ai_buffer_to_array_fmt+0x5c>
 8003622:	380f      	subs	r0, #15
 8003624:	d028      	beq.n	8003678 <ai_buffer_to_array_fmt+0x7c>
 8003626:	4929      	ldr	r1, [pc, #164]	; (80036cc <.text_22>)
 8003628:	1a40      	subs	r0, r0, r1
 800362a:	d01b      	beq.n	8003664 <ai_buffer_to_array_fmt+0x68>
 800362c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003630:	1a40      	subs	r0, r0, r1
 8003632:	d013      	beq.n	800365c <ai_buffer_to_array_fmt+0x60>
 8003634:	1fc0      	subs	r0, r0, #7
 8003636:	d017      	beq.n	8003668 <ai_buffer_to_array_fmt+0x6c>
 8003638:	f240 31f9 	movw	r1, #1017	; 0x3f9
 800363c:	1a40      	subs	r0, r0, r1
 800363e:	d00f      	beq.n	8003660 <ai_buffer_to_array_fmt+0x64>
 8003640:	380f      	subs	r0, #15
 8003642:	d013      	beq.n	800366c <ai_buffer_to_array_fmt+0x70>
 8003644:	4922      	ldr	r1, [pc, #136]	; (80036d0 <.text_23>)
 8003646:	1a40      	subs	r0, r0, r1
 8003648:	d002      	beq.n	8003650 <ai_buffer_to_array_fmt+0x54>
 800364a:	e017      	b.n	800367c <ai_buffer_to_array_fmt+0x80>
 800364c:	2040      	movs	r0, #64	; 0x40
 800364e:	e01f      	b.n	8003690 <ai_buffer_to_array_fmt+0x94>
 8003650:	4822      	ldr	r0, [pc, #136]	; (80036dc <.text_26>)
 8003652:	e01d      	b.n	8003690 <ai_buffer_to_array_fmt+0x94>
 8003654:	4822      	ldr	r0, [pc, #136]	; (80036e0 <.text_27>)
 8003656:	e01b      	b.n	8003690 <ai_buffer_to_array_fmt+0x94>
 8003658:	4822      	ldr	r0, [pc, #136]	; (80036e4 <.text_28>)
 800365a:	e019      	b.n	8003690 <ai_buffer_to_array_fmt+0x94>
 800365c:	4822      	ldr	r0, [pc, #136]	; (80036e8 <.text_29>)
 800365e:	e017      	b.n	8003690 <ai_buffer_to_array_fmt+0x94>
 8003660:	4822      	ldr	r0, [pc, #136]	; (80036ec <.text_30>)
 8003662:	e015      	b.n	8003690 <ai_buffer_to_array_fmt+0x94>
 8003664:	4817      	ldr	r0, [pc, #92]	; (80036c4 <.text_20>)
 8003666:	e013      	b.n	8003690 <ai_buffer_to_array_fmt+0x94>
 8003668:	4821      	ldr	r0, [pc, #132]	; (80036f0 <.text_31>)
 800366a:	e011      	b.n	8003690 <ai_buffer_to_array_fmt+0x94>
 800366c:	4821      	ldr	r0, [pc, #132]	; (80036f4 <.text_32>)
 800366e:	e00f      	b.n	8003690 <ai_buffer_to_array_fmt+0x94>
 8003670:	4813      	ldr	r0, [pc, #76]	; (80036c0 <.text_19>)
 8003672:	e00d      	b.n	8003690 <ai_buffer_to_array_fmt+0x94>
 8003674:	4820      	ldr	r0, [pc, #128]	; (80036f8 <.text_33>)
 8003676:	e00b      	b.n	8003690 <ai_buffer_to_array_fmt+0x94>
 8003678:	4820      	ldr	r0, [pc, #128]	; (80036fc <.text_34>)
 800367a:	e009      	b.n	8003690 <ai_buffer_to_array_fmt+0x94>
 800367c:	f3c2 51c0 	ubfx	r1, r2, #23, #1
 8003680:	f3c2 000d 	ubfx	r0, r2, #0, #14
 8003684:	2900      	cmp	r1, #0
 8003686:	bf14      	ite	ne
 8003688:	f440 0004 	orrne.w	r0, r0, #8650752	; 0x840000
 800368c:	f440 2080 	orreq.w	r0, r0, #262144	; 0x40000
 8003690:	0051      	lsls	r1, r2, #1
 8003692:	bf48      	it	mi
 8003694:	f040 4080 	orrmi.w	r0, r0, #1073741824	; 0x40000000
 8003698:	0091      	lsls	r1, r2, #2
 800369a:	bf48      	it	mi
 800369c:	f040 5000 	orrmi.w	r0, r0, #536870912	; 0x20000000
 80036a0:	0111      	lsls	r1, r2, #4
 80036a2:	bf48      	it	mi
 80036a4:	f040 6000 	orrmi.w	r0, r0, #134217728	; 0x8000000
 80036a8:	4770      	bx	lr
	...

080036ac <.text_14>:
 80036ac:	00000000 	.word	0x00000000

080036b0 <.text_15>:
 80036b0:	002be80f 	.word	0x002be80f

080036b4 <.text_16>:
 80036b4:	003bf7f1 	.word	0x003bf7f1

080036b8 <.text_17>:
 80036b8:	00b9fff1 	.word	0x00b9fff1

080036bc <.text_18>:
 80036bc:	004df000 	.word	0x004df000

080036c0 <.text_19>:
 80036c0:	00040040 	.word	0x00040040

080036c4 <.text_20>:
 80036c4:	00840040 	.word	0x00840040

080036c8 <.text_21>:
 80036c8:	0800af54 	.word	0x0800af54

080036cc <.text_22>:
 80036cc:	007ff7f1 	.word	0x007ff7f1

080036d0 <.text_23>:
 80036d0:	00fe07f1 	.word	0x00fe07f1

080036d4 <.text_24>:
 80036d4:	0800afc4 	.word	0x0800afc4

080036d8 <.text_25>:
 80036d8:	00803fff 	.word	0x00803fff

080036dc <.text_26>:
 80036dc:	01821040 	.word	0x01821040

080036e0 <.text_27>:
 80036e0:	00040440 	.word	0x00040440

080036e4 <.text_28>:
 80036e4:	00040840 	.word	0x00040840

080036e8 <.text_29>:
 80036e8:	00840440 	.word	0x00840440

080036ec <.text_30>:
 80036ec:	00840840 	.word	0x00840840

080036f0 <.text_31>:
 80036f0:	00840447 	.word	0x00840447

080036f4 <.text_32>:
 80036f4:	0084084f 	.word	0x0084084f

080036f8 <.text_33>:
 80036f8:	00040447 	.word	0x00040447

080036fc <.text_34>:
 80036fc:	0004084f 	.word	0x0004084f

08003700 <ai_array_get_byte_size>:
 8003700:	b909      	cbnz	r1, 8003706 <ai_array_get_byte_size+0x6>
 8003702:	2000      	movs	r0, #0
 8003704:	4770      	bx	lr
 8003706:	11c2      	asrs	r2, r0, #7
 8003708:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800370c:	f3c0 3382 	ubfx	r3, r0, #14, #3
 8003710:	189b      	adds	r3, r3, r2
 8003712:	4359      	muls	r1, r3
 8003714:	1dc9      	adds	r1, r1, #7
 8003716:	08c9      	lsrs	r1, r1, #3
 8003718:	1543      	asrs	r3, r0, #21
 800371a:	00c9      	lsls	r1, r1, #3
 800371c:	f003 0303 	and.w	r3, r3, #3
 8003720:	ea4f 4c60 	mov.w	ip, r0, asr #17
 8003724:	40d9      	lsrs	r1, r3
 8003726:	f00c 0c0f 	and.w	ip, ip, #15
 800372a:	f1bc 0f04 	cmp.w	ip, #4
 800372e:	d00a      	beq.n	8003746 <ai_array_get_byte_size+0x46>
 8003730:	f1bc 0f08 	cmp.w	ip, #8
 8003734:	bf02      	ittt	eq
 8003736:	f3c0 3082 	ubfxeq	r0, r0, #14, #3
 800373a:	1882      	addeq	r2, r0, r2
 800373c:	eb01 2102 	addeq.w	r1, r1, r2, lsl #8
 8003740:	1dc9      	adds	r1, r1, #7
 8003742:	08c8      	lsrs	r0, r1, #3
 8003744:	4770      	bx	lr
 8003746:	f3c0 3082 	ubfx	r0, r0, #14, #3
 800374a:	1882      	adds	r2, r0, r2
 800374c:	eb01 1102 	add.w	r1, r1, r2, lsl #4
 8003750:	1dc9      	adds	r1, r1, #7
 8003752:	08c8      	lsrs	r0, r1, #3
 8003754:	4770      	bx	lr

08003756 <ai_array_get_data_byte_size>:
 8003756:	b909      	cbnz	r1, 800375c <ai_array_get_data_byte_size+0x6>
 8003758:	2000      	movs	r0, #0
 800375a:	4770      	bx	lr
 800375c:	11c2      	asrs	r2, r0, #7
 800375e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003762:	f3c0 3382 	ubfx	r3, r0, #14, #3
 8003766:	189a      	adds	r2, r3, r2
 8003768:	4351      	muls	r1, r2
 800376a:	1dc9      	adds	r1, r1, #7
 800376c:	08c9      	lsrs	r1, r1, #3
 800376e:	1540      	asrs	r0, r0, #21
 8003770:	00c9      	lsls	r1, r1, #3
 8003772:	f000 0003 	and.w	r0, r0, #3
 8003776:	40c1      	lsrs	r1, r0
 8003778:	1dc9      	adds	r1, r1, #7
 800377a:	08c8      	lsrs	r0, r1, #3
 800377c:	4770      	bx	lr

0800377e <ai_array_get_elems_from_size>:
 800377e:	b909      	cbnz	r1, 8003784 <ai_array_get_elems_from_size+0x6>
 8003780:	2000      	movs	r0, #0
 8003782:	4770      	bx	lr
 8003784:	1442      	asrs	r2, r0, #17
 8003786:	00c9      	lsls	r1, r1, #3
 8003788:	f002 020f 	and.w	r2, r2, #15
 800378c:	2a04      	cmp	r2, #4
 800378e:	d002      	beq.n	8003796 <ai_array_get_elems_from_size+0x18>
 8003790:	2a08      	cmp	r2, #8
 8003792:	d009      	beq.n	80037a8 <ai_array_get_elems_from_size+0x2a>
 8003794:	e010      	b.n	80037b8 <ai_array_get_elems_from_size+0x3a>
 8003796:	11c3      	asrs	r3, r0, #7
 8003798:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800379c:	f3c0 3282 	ubfx	r2, r0, #14, #3
 80037a0:	18d2      	adds	r2, r2, r3
 80037a2:	eba1 1102 	sub.w	r1, r1, r2, lsl #4
 80037a6:	e007      	b.n	80037b8 <ai_array_get_elems_from_size+0x3a>
 80037a8:	11c2      	asrs	r2, r0, #7
 80037aa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80037ae:	f3c0 3382 	ubfx	r3, r0, #14, #3
 80037b2:	189a      	adds	r2, r3, r2
 80037b4:	eba1 2102 	sub.w	r1, r1, r2, lsl #8
 80037b8:	1542      	asrs	r2, r0, #21
 80037ba:	f002 0203 	and.w	r2, r2, #3
 80037be:	4091      	lsls	r1, r2
 80037c0:	1dc9      	adds	r1, r1, #7
 80037c2:	11c2      	asrs	r2, r0, #7
 80037c4:	08c9      	lsrs	r1, r1, #3
 80037c6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80037ca:	f3c0 3082 	ubfx	r0, r0, #14, #3
 80037ce:	00c9      	lsls	r1, r1, #3
 80037d0:	1880      	adds	r0, r0, r2
 80037d2:	fbb1 f0f0 	udiv	r0, r1, r0
 80037d6:	4770      	bx	lr

080037d8 <.text_38>:
 80037d8:	5f544d46 	.word	0x5f544d46
 80037dc:	454e4f4e 	.word	0x454e4f4e
 80037e0:	00000000 	.word	0x00000000

080037e4 <.text_39>:
 80037e4:	5f544d46 	.word	0x5f544d46
 80037e8:	414f4c46 	.word	0x414f4c46
 80037ec:	0054      	.short	0x0054
	...

080037f0 <.text_40>:
 80037f0:	5f544d46 	.word	0x5f544d46
 80037f4:	414f4c46 	.word	0x414f4c46
 80037f8:	00343654 	.word	0x00343654

080037fc <.text_41>:
 80037fc:	5f544d46 	.word	0x5f544d46
 8003800:	414f4c46 	.word	0x414f4c46
 8003804:	00363154 	.word	0x00363154

08003808 <.text_42>:
 8003808:	5f544d46 	.word	0x5f544d46
 800380c:	3855      	.short	0x3855
	...

08003810 <.text_43>:
 8003810:	5f544d46 	.word	0x5f544d46
 8003814:	00363155 	.word	0x00363155

08003818 <.text_44>:
 8003818:	5f544d46 	.word	0x5f544d46
 800381c:	00323355 	.word	0x00323355

08003820 <.text_45>:
 8003820:	5f544d46 	.word	0x5f544d46
 8003824:	00343655 	.word	0x00343655

08003828 <.text_46>:
 8003828:	5f544d46 	.word	0x5f544d46
 800382c:	3455      	.short	0x3455
	...

08003830 <.text_47>:
 8003830:	5f544d46 	.word	0x5f544d46
 8003834:	3853      	.short	0x3853
	...

08003838 <.text_48>:
 8003838:	5f544d46 	.word	0x5f544d46
 800383c:	00363153 	.word	0x00363153

08003840 <.text_49>:
 8003840:	5f544d46 	.word	0x5f544d46
 8003844:	00323353 	.word	0x00323353

08003848 <.text_50>:
 8003848:	5f544d46 	.word	0x5f544d46
 800384c:	00343653 	.word	0x00343653

08003850 <.text_51>:
 8003850:	5f544d46 	.word	0x5f544d46
 8003854:	3453      	.short	0x3453
	...

08003858 <.text_52>:
 8003858:	5f544d46 	.word	0x5f544d46
 800385c:	0051      	.short	0x0051
	...

08003860 <.text_53>:
 8003860:	5f544d46 	.word	0x5f544d46
 8003864:	3751      	.short	0x3751
	...

08003868 <.text_54>:
 8003868:	5f544d46 	.word	0x5f544d46
 800386c:	00353151 	.word	0x00353151

08003870 <.text_55>:
 8003870:	5f544d46 	.word	0x5f544d46
 8003874:	00313351 	.word	0x00313351

08003878 <.text_56>:
 8003878:	5f544d46 	.word	0x5f544d46
 800387c:	5155      	.short	0x5155
	...

08003880 <.text_57>:
 8003880:	5f544d46 	.word	0x5f544d46
 8003884:	00375155 	.word	0x00375155

08003888 <.text_58>:
 8003888:	5f544d46 	.word	0x5f544d46
 800388c:	35315155 	.word	0x35315155
 8003890:	00000000 	.word	0x00000000

08003894 <.text_59>:
 8003894:	5f544d46 	.word	0x5f544d46
 8003898:	31335155 	.word	0x31335155
 800389c:	00000000 	.word	0x00000000

080038a0 <.text_60>:
 80038a0:	5f544d46 	.word	0x5f544d46
 80038a4:	3454554c 	.word	0x3454554c
 80038a8:	4f4c465f 	.word	0x4f4c465f
 80038ac:	5441      	.short	0x5441
	...

080038b0 <.text_61>:
 80038b0:	5f544d46 	.word	0x5f544d46
 80038b4:	3854554c 	.word	0x3854554c
 80038b8:	4f4c465f 	.word	0x4f4c465f
 80038bc:	5441      	.short	0x5441
	...

080038c0 <.text_62>:
 80038c0:	5f544d46 	.word	0x5f544d46
 80038c4:	3454554c 	.word	0x3454554c
 80038c8:	3531515f 	.word	0x3531515f
 80038cc:	00000000 	.word	0x00000000

080038d0 <.text_63>:
 80038d0:	5f544d46 	.word	0x5f544d46
 80038d4:	3854554c 	.word	0x3854554c
 80038d8:	3531515f 	.word	0x3531515f
 80038dc:	00000000 	.word	0x00000000

080038e0 <.text_64>:
 80038e0:	5f544d46 	.word	0x5f544d46
 80038e4:	3454554c 	.word	0x3454554c
 80038e8:	3151555f 	.word	0x3151555f
 80038ec:	0035      	.short	0x0035
	...

080038f0 <.text_65>:
 80038f0:	5f544d46 	.word	0x5f544d46
 80038f4:	3854554c 	.word	0x3854554c
 80038f8:	3151555f 	.word	0x3151555f
 80038fc:	0035      	.short	0x0035
	...

08003900 <.text_66>:
 8003900:	415f4941 	.word	0x415f4941
 8003904:	59415252 	.word	0x59415252
 8003908:	524f465f 	.word	0x524f465f
 800390c:	5f54414d 	.word	0x5f54414d
 8003910:	454e4f4e 	.word	0x454e4f4e
 8003914:	00000000 	.word	0x00000000

08003918 <.text_67>:
 8003918:	415f4941 	.word	0x415f4941
 800391c:	59415252 	.word	0x59415252
 8003920:	524f465f 	.word	0x524f465f
 8003924:	5f54414d 	.word	0x5f54414d
 8003928:	0051      	.short	0x0051
	...

0800392c <.text_68>:
 800392c:	415f4941 	.word	0x415f4941
 8003930:	59415252 	.word	0x59415252
 8003934:	524f465f 	.word	0x524f465f
 8003938:	5f54414d 	.word	0x5f54414d
 800393c:	5155      	.short	0x5155
	...

08003940 <.text_69>:
 8003940:	425f4941 	.word	0x425f4941
 8003944:	45464655 	.word	0x45464655
 8003948:	4f465f52 	.word	0x4f465f52
 800394c:	54414d52 	.word	0x54414d52
 8003950:	4e4f4e5f 	.word	0x4e4f4e5f
 8003954:	0045      	.short	0x0045
	...

08003958 <.text_70>:
 8003958:	425f4941 	.word	0x425f4941
 800395c:	45464655 	.word	0x45464655
 8003960:	4f465f52 	.word	0x4f465f52
 8003964:	54414d52 	.word	0x54414d52
 8003968:	515f      	.short	0x515f
	...

0800396c <.text_71>:
 800396c:	425f4941 	.word	0x425f4941
 8003970:	45464655 	.word	0x45464655
 8003974:	4f465f52 	.word	0x4f465f52
 8003978:	54414d52 	.word	0x54414d52
 800397c:	0051555f 	.word	0x0051555f

08003980 <ai_math_dot_array>:
 8003980:	b530      	push	{r4, r5, lr}
 8003982:	4604      	mov	r4, r0
 8003984:	4608      	mov	r0, r1
 8003986:	b081      	sub	sp, #4
 8003988:	4611      	mov	r1, r2
 800398a:	461a      	mov	r2, r3
 800398c:	2500      	movs	r5, #0
 800398e:	9500      	str	r5, [sp, #0]
 8003990:	466b      	mov	r3, sp
 8003992:	f000 ff1d 	bl	80047d0 <arm_dot_prod_f32>
 8003996:	ed94 0a00 	vldr	s0, [r4]
 800399a:	eddd 0a00 	vldr	s1, [sp]
 800399e:	ee70 0a20 	vadd.f32	s1, s0, s1
 80039a2:	edc4 0a00 	vstr	s1, [r4]
 80039a6:	b001      	add	sp, #4
 80039a8:	bd30      	pop	{r4, r5, pc}
	...

080039ac <ai_math_sqrt>:
 80039ac:	eef0 0a40 	vmov.f32	s1, s0
 80039b0:	eef5 0a40 	vcmp.f32	s1, #0.0
 80039b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039b8:	ed9f 0a28 	vldr	s0, [pc, #160]	; 8003a5c <.text_12>
 80039bc:	db01      	blt.n	80039c2 <ai_math_sqrt+0x16>
 80039be:	eeb1 0ae0 	vsqrt.f32	s0, s1
 80039c2:	4770      	bx	lr

080039c4 <ai_math_exp>:
 80039c4:	f006 b98c 	b.w	8009ce0 <expf>

080039c8 <ai_math_pow>:
 80039c8:	f006 ba7a 	b.w	8009ec0 <powf>

080039cc <ai_math_tanh>:
 80039cc:	f006 b936 	b.w	8009c3c <tanhf>

080039d0 <ai_math_relu>:
 80039d0:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80039d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039d8:	bf48      	it	mi
 80039da:	ed9f 0a20 	vldrmi	s0, [pc, #128]	; 8003a5c <.text_12>
 80039de:	4770      	bx	lr

080039e0 <ai_math_prelu>:
 80039e0:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80039e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039e8:	bf48      	it	mi
 80039ea:	ee20 0a20 	vmulmi.f32	s0, s0, s1
 80039ee:	4770      	bx	lr

080039f0 <ai_math_sigmoid>:
 80039f0:	b500      	push	{lr}
 80039f2:	b081      	sub	sp, #4
 80039f4:	eeb1 0a40 	vneg.f32	s0, s0
 80039f8:	f006 f972 	bl	8009ce0 <expf>
 80039fc:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003a00:	ee30 0a20 	vadd.f32	s0, s0, s1
 8003a04:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8003a08:	ee81 0a00 	vdiv.f32	s0, s2, s0
 8003a0c:	b001      	add	sp, #4
 8003a0e:	bd00      	pop	{pc}

08003a10 <ai_math_hard_sigmoid>:
 8003a10:	eef0 0a40 	vmov.f32	s1, s0
 8003a14:	ed9f 1a12 	vldr	s2, [pc, #72]	; 8003a60 <.text_13>
 8003a18:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8003a1c:	ee00 0a81 	vmla.f32	s0, s1, s2
 8003a20:	eddf 0a10 	vldr	s1, [pc, #64]	; 8003a64 <.text_14>
 8003a24:	eeb4 0a60 	vcmp.f32	s0, s1
 8003a28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a2c:	da07      	bge.n	8003a3e <ai_math_hard_sigmoid+0x2e>
 8003a2e:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8003a32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a36:	d504      	bpl.n	8003a42 <ai_math_hard_sigmoid+0x32>
 8003a38:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8003a5c <.text_12>
 8003a3c:	4770      	bx	lr
 8003a3e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003a42:	4770      	bx	lr

08003a44 <ai_math_sign>:
 8003a44:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8003a48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a4c:	bfcc      	ite	gt
 8003a4e:	ed9f 0a06 	vldrgt	s0, [pc, #24]	; 8003a68 <.text_15>
 8003a52:	ed9f 0a06 	vldrle	s0, [pc, #24]	; 8003a6c <.text_16>
 8003a56:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8003a5a:	4770      	bx	lr

08003a5c <.text_12>:
 8003a5c:	00000000 	.word	0x00000000

08003a60 <.text_13>:
 8003a60:	3e4ccccd 	.word	0x3e4ccccd

08003a64 <.text_14>:
 8003a64:	3f800001 	.word	0x3f800001

08003a68 <.text_15>:
 8003a68:	00000001 	.word	0x00000001

08003a6c <.text_16>:
 8003a6c:	ffffffff 	.word	0xffffffff

08003a70 <ai_sum>:
 8003a70:	ee30 0a20 	vadd.f32	s0, s0, s1
 8003a74:	4770      	bx	lr

08003a76 <ai_sub>:
 8003a76:	ee30 0a60 	vsub.f32	s0, s0, s1
 8003a7a:	4770      	bx	lr

08003a7c <ai_mul>:
 8003a7c:	ee20 0a20 	vmul.f32	s0, s0, s1
 8003a80:	4770      	bx	lr

08003a82 <ai_div>:
 8003a82:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8003a86:	4770      	bx	lr

08003a88 <ai_max>:
 8003a88:	eef4 0a40 	vcmp.f32	s1, s0
 8003a8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a90:	bf58      	it	pl
 8003a92:	eeb0 0a60 	vmovpl.f32	s0, s1
 8003a96:	4770      	bx	lr

08003a98 <ai_min>:
 8003a98:	eeb4 0a60 	vcmp.f32	s0, s1
 8003a9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003aa0:	bf58      	it	pl
 8003aa2:	eeb0 0a60 	vmovpl.f32	s0, s1
 8003aa6:	4770      	bx	lr

08003aa8 <__aeabi_memset>:
 8003aa8:	b470      	push	{r4, r5, r6}
 8003aaa:	0784      	lsls	r4, r0, #30
 8003aac:	d046      	beq.n	8003b3c <__aeabi_memset+0x94>
 8003aae:	1e4c      	subs	r4, r1, #1
 8003ab0:	2900      	cmp	r1, #0
 8003ab2:	d041      	beq.n	8003b38 <__aeabi_memset+0x90>
 8003ab4:	b2d5      	uxtb	r5, r2
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	e002      	b.n	8003ac0 <__aeabi_memset+0x18>
 8003aba:	1e61      	subs	r1, r4, #1
 8003abc:	b3e4      	cbz	r4, 8003b38 <__aeabi_memset+0x90>
 8003abe:	460c      	mov	r4, r1
 8003ac0:	f803 5b01 	strb.w	r5, [r3], #1
 8003ac4:	0799      	lsls	r1, r3, #30
 8003ac6:	d1f8      	bne.n	8003aba <__aeabi_memset+0x12>
 8003ac8:	2c03      	cmp	r4, #3
 8003aca:	d92e      	bls.n	8003b2a <__aeabi_memset+0x82>
 8003acc:	b2d5      	uxtb	r5, r2
 8003ace:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8003ad2:	2c0f      	cmp	r4, #15
 8003ad4:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8003ad8:	d919      	bls.n	8003b0e <__aeabi_memset+0x66>
 8003ada:	4626      	mov	r6, r4
 8003adc:	f103 0110 	add.w	r1, r3, #16
 8003ae0:	3e10      	subs	r6, #16
 8003ae2:	2e0f      	cmp	r6, #15
 8003ae4:	f841 5c10 	str.w	r5, [r1, #-16]
 8003ae8:	f841 5c0c 	str.w	r5, [r1, #-12]
 8003aec:	f841 5c08 	str.w	r5, [r1, #-8]
 8003af0:	f841 5c04 	str.w	r5, [r1, #-4]
 8003af4:	f101 0110 	add.w	r1, r1, #16
 8003af8:	d8f2      	bhi.n	8003ae0 <__aeabi_memset+0x38>
 8003afa:	f1a4 0110 	sub.w	r1, r4, #16
 8003afe:	f021 010f 	bic.w	r1, r1, #15
 8003b02:	f004 040f 	and.w	r4, r4, #15
 8003b06:	3110      	adds	r1, #16
 8003b08:	2c03      	cmp	r4, #3
 8003b0a:	440b      	add	r3, r1
 8003b0c:	d90d      	bls.n	8003b2a <__aeabi_memset+0x82>
 8003b0e:	461e      	mov	r6, r3
 8003b10:	4621      	mov	r1, r4
 8003b12:	3904      	subs	r1, #4
 8003b14:	2903      	cmp	r1, #3
 8003b16:	f846 5b04 	str.w	r5, [r6], #4
 8003b1a:	d8fa      	bhi.n	8003b12 <__aeabi_memset+0x6a>
 8003b1c:	1f21      	subs	r1, r4, #4
 8003b1e:	f021 0103 	bic.w	r1, r1, #3
 8003b22:	3104      	adds	r1, #4
 8003b24:	440b      	add	r3, r1
 8003b26:	f004 0403 	and.w	r4, r4, #3
 8003b2a:	b12c      	cbz	r4, 8003b38 <__aeabi_memset+0x90>
 8003b2c:	b2d2      	uxtb	r2, r2
 8003b2e:	441c      	add	r4, r3
 8003b30:	f803 2b01 	strb.w	r2, [r3], #1
 8003b34:	42a3      	cmp	r3, r4
 8003b36:	d1fb      	bne.n	8003b30 <__aeabi_memset+0x88>
 8003b38:	bc70      	pop	{r4, r5, r6}
 8003b3a:	4770      	bx	lr
 8003b3c:	460c      	mov	r4, r1
 8003b3e:	4603      	mov	r3, r0
 8003b40:	e7c2      	b.n	8003ac8 <__aeabi_memset+0x20>
	...

08003b44 <__aeabi_drsub>:
 8003b44:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8003b48:	e002      	b.n	8003b50 <__adddf3>
 8003b4a:	bf00      	nop

08003b4c <__aeabi_dsub>:
 8003b4c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08003b50 <__adddf3>:
 8003b50:	b530      	push	{r4, r5, lr}
 8003b52:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8003b56:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8003b5a:	ea94 0f05 	teq	r4, r5
 8003b5e:	bf08      	it	eq
 8003b60:	ea90 0f02 	teqeq	r0, r2
 8003b64:	bf1f      	itttt	ne
 8003b66:	ea54 0c00 	orrsne.w	ip, r4, r0
 8003b6a:	ea55 0c02 	orrsne.w	ip, r5, r2
 8003b6e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8003b72:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8003b76:	f000 80e2 	beq.w	8003d3e <__adddf3+0x1ee>
 8003b7a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8003b7e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8003b82:	bfb8      	it	lt
 8003b84:	426d      	neglt	r5, r5
 8003b86:	dd0c      	ble.n	8003ba2 <__adddf3+0x52>
 8003b88:	442c      	add	r4, r5
 8003b8a:	ea80 0202 	eor.w	r2, r0, r2
 8003b8e:	ea81 0303 	eor.w	r3, r1, r3
 8003b92:	ea82 0000 	eor.w	r0, r2, r0
 8003b96:	ea83 0101 	eor.w	r1, r3, r1
 8003b9a:	ea80 0202 	eor.w	r2, r0, r2
 8003b9e:	ea81 0303 	eor.w	r3, r1, r3
 8003ba2:	2d36      	cmp	r5, #54	; 0x36
 8003ba4:	bf88      	it	hi
 8003ba6:	bd30      	pophi	{r4, r5, pc}
 8003ba8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8003bac:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8003bb0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8003bb4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8003bb8:	d002      	beq.n	8003bc0 <__adddf3+0x70>
 8003bba:	4240      	negs	r0, r0
 8003bbc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8003bc0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8003bc4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8003bc8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8003bcc:	d002      	beq.n	8003bd4 <__adddf3+0x84>
 8003bce:	4252      	negs	r2, r2
 8003bd0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8003bd4:	ea94 0f05 	teq	r4, r5
 8003bd8:	f000 80a7 	beq.w	8003d2a <__adddf3+0x1da>
 8003bdc:	f1a4 0401 	sub.w	r4, r4, #1
 8003be0:	f1d5 0e20 	rsbs	lr, r5, #32
 8003be4:	db0d      	blt.n	8003c02 <__adddf3+0xb2>
 8003be6:	fa02 fc0e 	lsl.w	ip, r2, lr
 8003bea:	fa22 f205 	lsr.w	r2, r2, r5
 8003bee:	1880      	adds	r0, r0, r2
 8003bf0:	f141 0100 	adc.w	r1, r1, #0
 8003bf4:	fa03 f20e 	lsl.w	r2, r3, lr
 8003bf8:	1880      	adds	r0, r0, r2
 8003bfa:	fa43 f305 	asr.w	r3, r3, r5
 8003bfe:	4159      	adcs	r1, r3
 8003c00:	e00e      	b.n	8003c20 <__adddf3+0xd0>
 8003c02:	f1a5 0520 	sub.w	r5, r5, #32
 8003c06:	f10e 0e20 	add.w	lr, lr, #32
 8003c0a:	2a01      	cmp	r2, #1
 8003c0c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8003c10:	bf28      	it	cs
 8003c12:	f04c 0c02 	orrcs.w	ip, ip, #2
 8003c16:	fa43 f305 	asr.w	r3, r3, r5
 8003c1a:	18c0      	adds	r0, r0, r3
 8003c1c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8003c20:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8003c24:	d507      	bpl.n	8003c36 <__adddf3+0xe6>
 8003c26:	f04f 0e00 	mov.w	lr, #0
 8003c2a:	f1dc 0c00 	rsbs	ip, ip, #0
 8003c2e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8003c32:	eb6e 0101 	sbc.w	r1, lr, r1
 8003c36:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8003c3a:	d31b      	bcc.n	8003c74 <__adddf3+0x124>
 8003c3c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8003c40:	d30c      	bcc.n	8003c5c <__adddf3+0x10c>
 8003c42:	0849      	lsrs	r1, r1, #1
 8003c44:	ea5f 0030 	movs.w	r0, r0, rrx
 8003c48:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8003c4c:	f104 0401 	add.w	r4, r4, #1
 8003c50:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8003c54:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8003c58:	f080 809a 	bcs.w	8003d90 <__adddf3+0x240>
 8003c5c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8003c60:	bf08      	it	eq
 8003c62:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8003c66:	f150 0000 	adcs.w	r0, r0, #0
 8003c6a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8003c6e:	ea41 0105 	orr.w	r1, r1, r5
 8003c72:	bd30      	pop	{r4, r5, pc}
 8003c74:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8003c78:	4140      	adcs	r0, r0
 8003c7a:	eb41 0101 	adc.w	r1, r1, r1
 8003c7e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8003c82:	f1a4 0401 	sub.w	r4, r4, #1
 8003c86:	d1e9      	bne.n	8003c5c <__adddf3+0x10c>
 8003c88:	f091 0f00 	teq	r1, #0
 8003c8c:	bf04      	itt	eq
 8003c8e:	4601      	moveq	r1, r0
 8003c90:	2000      	moveq	r0, #0
 8003c92:	fab1 f381 	clz	r3, r1
 8003c96:	bf08      	it	eq
 8003c98:	3320      	addeq	r3, #32
 8003c9a:	f1a3 030b 	sub.w	r3, r3, #11
 8003c9e:	f1b3 0220 	subs.w	r2, r3, #32
 8003ca2:	da0c      	bge.n	8003cbe <__adddf3+0x16e>
 8003ca4:	320c      	adds	r2, #12
 8003ca6:	dd08      	ble.n	8003cba <__adddf3+0x16a>
 8003ca8:	f102 0c14 	add.w	ip, r2, #20
 8003cac:	f1c2 020c 	rsb	r2, r2, #12
 8003cb0:	fa01 f00c 	lsl.w	r0, r1, ip
 8003cb4:	fa21 f102 	lsr.w	r1, r1, r2
 8003cb8:	e00c      	b.n	8003cd4 <__adddf3+0x184>
 8003cba:	f102 0214 	add.w	r2, r2, #20
 8003cbe:	bfd8      	it	le
 8003cc0:	f1c2 0c20 	rsble	ip, r2, #32
 8003cc4:	fa01 f102 	lsl.w	r1, r1, r2
 8003cc8:	fa20 fc0c 	lsr.w	ip, r0, ip
 8003ccc:	bfdc      	itt	le
 8003cce:	ea41 010c 	orrle.w	r1, r1, ip
 8003cd2:	4090      	lslle	r0, r2
 8003cd4:	1ae4      	subs	r4, r4, r3
 8003cd6:	bfa2      	ittt	ge
 8003cd8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8003cdc:	4329      	orrge	r1, r5
 8003cde:	bd30      	popge	{r4, r5, pc}
 8003ce0:	ea6f 0404 	mvn.w	r4, r4
 8003ce4:	3c1f      	subs	r4, #31
 8003ce6:	da1c      	bge.n	8003d22 <__adddf3+0x1d2>
 8003ce8:	340c      	adds	r4, #12
 8003cea:	dc0e      	bgt.n	8003d0a <__adddf3+0x1ba>
 8003cec:	f104 0414 	add.w	r4, r4, #20
 8003cf0:	f1c4 0220 	rsb	r2, r4, #32
 8003cf4:	fa20 f004 	lsr.w	r0, r0, r4
 8003cf8:	fa01 f302 	lsl.w	r3, r1, r2
 8003cfc:	ea40 0003 	orr.w	r0, r0, r3
 8003d00:	fa21 f304 	lsr.w	r3, r1, r4
 8003d04:	ea45 0103 	orr.w	r1, r5, r3
 8003d08:	bd30      	pop	{r4, r5, pc}
 8003d0a:	f1c4 040c 	rsb	r4, r4, #12
 8003d0e:	f1c4 0220 	rsb	r2, r4, #32
 8003d12:	fa20 f002 	lsr.w	r0, r0, r2
 8003d16:	fa01 f304 	lsl.w	r3, r1, r4
 8003d1a:	ea40 0003 	orr.w	r0, r0, r3
 8003d1e:	4629      	mov	r1, r5
 8003d20:	bd30      	pop	{r4, r5, pc}
 8003d22:	fa21 f004 	lsr.w	r0, r1, r4
 8003d26:	4629      	mov	r1, r5
 8003d28:	bd30      	pop	{r4, r5, pc}
 8003d2a:	f094 0f00 	teq	r4, #0
 8003d2e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8003d32:	bf06      	itte	eq
 8003d34:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8003d38:	3401      	addeq	r4, #1
 8003d3a:	3d01      	subne	r5, #1
 8003d3c:	e74e      	b.n	8003bdc <__adddf3+0x8c>
 8003d3e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8003d42:	bf18      	it	ne
 8003d44:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8003d48:	d029      	beq.n	8003d9e <__adddf3+0x24e>
 8003d4a:	ea94 0f05 	teq	r4, r5
 8003d4e:	bf08      	it	eq
 8003d50:	ea90 0f02 	teqeq	r0, r2
 8003d54:	d005      	beq.n	8003d62 <__adddf3+0x212>
 8003d56:	ea54 0c00 	orrs.w	ip, r4, r0
 8003d5a:	bf04      	itt	eq
 8003d5c:	4619      	moveq	r1, r3
 8003d5e:	4610      	moveq	r0, r2
 8003d60:	bd30      	pop	{r4, r5, pc}
 8003d62:	ea91 0f03 	teq	r1, r3
 8003d66:	bf1e      	ittt	ne
 8003d68:	2100      	movne	r1, #0
 8003d6a:	2000      	movne	r0, #0
 8003d6c:	bd30      	popne	{r4, r5, pc}
 8003d6e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8003d72:	d105      	bne.n	8003d80 <__adddf3+0x230>
 8003d74:	0040      	lsls	r0, r0, #1
 8003d76:	4149      	adcs	r1, r1
 8003d78:	bf28      	it	cs
 8003d7a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8003d7e:	bd30      	pop	{r4, r5, pc}
 8003d80:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8003d84:	bf3c      	itt	cc
 8003d86:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8003d8a:	bd30      	popcc	{r4, r5, pc}
 8003d8c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8003d90:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8003d94:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003d98:	f04f 0000 	mov.w	r0, #0
 8003d9c:	bd30      	pop	{r4, r5, pc}
 8003d9e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8003da2:	bf1a      	itte	ne
 8003da4:	4619      	movne	r1, r3
 8003da6:	4610      	movne	r0, r2
 8003da8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8003dac:	bf1c      	itt	ne
 8003dae:	460b      	movne	r3, r1
 8003db0:	4602      	movne	r2, r0
 8003db2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8003db6:	bf06      	itte	eq
 8003db8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8003dbc:	ea91 0f03 	teqeq	r1, r3
 8003dc0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8003dc4:	bd30      	pop	{r4, r5, pc}
 8003dc6:	bf00      	nop

08003dc8 <__aeabi_ui2d>:
 8003dc8:	f090 0f00 	teq	r0, #0
 8003dcc:	bf04      	itt	eq
 8003dce:	2100      	moveq	r1, #0
 8003dd0:	4770      	bxeq	lr
 8003dd2:	b530      	push	{r4, r5, lr}
 8003dd4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8003dd8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8003ddc:	f04f 0500 	mov.w	r5, #0
 8003de0:	f04f 0100 	mov.w	r1, #0
 8003de4:	e750      	b.n	8003c88 <__adddf3+0x138>
 8003de6:	bf00      	nop

08003de8 <__aeabi_i2d>:
 8003de8:	f090 0f00 	teq	r0, #0
 8003dec:	bf04      	itt	eq
 8003dee:	2100      	moveq	r1, #0
 8003df0:	4770      	bxeq	lr
 8003df2:	b530      	push	{r4, r5, lr}
 8003df4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8003df8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8003dfc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8003e00:	bf48      	it	mi
 8003e02:	4240      	negmi	r0, r0
 8003e04:	f04f 0100 	mov.w	r1, #0
 8003e08:	e73e      	b.n	8003c88 <__adddf3+0x138>
 8003e0a:	bf00      	nop

08003e0c <__aeabi_f2d>:
 8003e0c:	0042      	lsls	r2, r0, #1
 8003e0e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8003e12:	ea4f 0131 	mov.w	r1, r1, rrx
 8003e16:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8003e1a:	bf1f      	itttt	ne
 8003e1c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8003e20:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8003e24:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8003e28:	4770      	bxne	lr
 8003e2a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8003e2e:	bf08      	it	eq
 8003e30:	4770      	bxeq	lr
 8003e32:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8003e36:	bf04      	itt	eq
 8003e38:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8003e3c:	4770      	bxeq	lr
 8003e3e:	b530      	push	{r4, r5, lr}
 8003e40:	f44f 7460 	mov.w	r4, #896	; 0x380
 8003e44:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8003e48:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8003e4c:	e71c      	b.n	8003c88 <__adddf3+0x138>
 8003e4e:	bf00      	nop

08003e50 <__aeabi_ul2d>:
 8003e50:	ea50 0201 	orrs.w	r2, r0, r1
 8003e54:	bf08      	it	eq
 8003e56:	4770      	bxeq	lr
 8003e58:	b530      	push	{r4, r5, lr}
 8003e5a:	f04f 0500 	mov.w	r5, #0
 8003e5e:	e00a      	b.n	8003e76 <__aeabi_l2d+0x16>

08003e60 <__aeabi_l2d>:
 8003e60:	ea50 0201 	orrs.w	r2, r0, r1
 8003e64:	bf08      	it	eq
 8003e66:	4770      	bxeq	lr
 8003e68:	b530      	push	{r4, r5, lr}
 8003e6a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8003e6e:	d502      	bpl.n	8003e76 <__aeabi_l2d+0x16>
 8003e70:	4240      	negs	r0, r0
 8003e72:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8003e76:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8003e7a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8003e7e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8003e82:	f43f aed8 	beq.w	8003c36 <__adddf3+0xe6>
 8003e86:	f04f 0203 	mov.w	r2, #3
 8003e8a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8003e8e:	bf18      	it	ne
 8003e90:	3203      	addne	r2, #3
 8003e92:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8003e96:	bf18      	it	ne
 8003e98:	3203      	addne	r2, #3
 8003e9a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8003e9e:	f1c2 0320 	rsb	r3, r2, #32
 8003ea2:	fa00 fc03 	lsl.w	ip, r0, r3
 8003ea6:	fa20 f002 	lsr.w	r0, r0, r2
 8003eaa:	fa01 fe03 	lsl.w	lr, r1, r3
 8003eae:	ea40 000e 	orr.w	r0, r0, lr
 8003eb2:	fa21 f102 	lsr.w	r1, r1, r2
 8003eb6:	4414      	add	r4, r2
 8003eb8:	e6bd      	b.n	8003c36 <__adddf3+0xe6>
 8003eba:	bf00      	nop

08003ebc <__aeabi_dmul>:
 8003ebc:	b570      	push	{r4, r5, r6, lr}
 8003ebe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8003ec2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8003ec6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8003eca:	bf1d      	ittte	ne
 8003ecc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8003ed0:	ea94 0f0c 	teqne	r4, ip
 8003ed4:	ea95 0f0c 	teqne	r5, ip
 8003ed8:	f000 f8de 	bleq	8004098 <__aeabi_dmul+0x1dc>
 8003edc:	442c      	add	r4, r5
 8003ede:	ea81 0603 	eor.w	r6, r1, r3
 8003ee2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8003ee6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8003eea:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8003eee:	bf18      	it	ne
 8003ef0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8003ef4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8003ef8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003efc:	d038      	beq.n	8003f70 <__aeabi_dmul+0xb4>
 8003efe:	fba0 ce02 	umull	ip, lr, r0, r2
 8003f02:	f04f 0500 	mov.w	r5, #0
 8003f06:	fbe1 e502 	umlal	lr, r5, r1, r2
 8003f0a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8003f0e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8003f12:	f04f 0600 	mov.w	r6, #0
 8003f16:	fbe1 5603 	umlal	r5, r6, r1, r3
 8003f1a:	f09c 0f00 	teq	ip, #0
 8003f1e:	bf18      	it	ne
 8003f20:	f04e 0e01 	orrne.w	lr, lr, #1
 8003f24:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8003f28:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8003f2c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8003f30:	d204      	bcs.n	8003f3c <__aeabi_dmul+0x80>
 8003f32:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8003f36:	416d      	adcs	r5, r5
 8003f38:	eb46 0606 	adc.w	r6, r6, r6
 8003f3c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8003f40:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8003f44:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8003f48:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8003f4c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8003f50:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8003f54:	bf88      	it	hi
 8003f56:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8003f5a:	d81e      	bhi.n	8003f9a <__aeabi_dmul+0xde>
 8003f5c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8003f60:	bf08      	it	eq
 8003f62:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8003f66:	f150 0000 	adcs.w	r0, r0, #0
 8003f6a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8003f6e:	bd70      	pop	{r4, r5, r6, pc}
 8003f70:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8003f74:	ea46 0101 	orr.w	r1, r6, r1
 8003f78:	ea40 0002 	orr.w	r0, r0, r2
 8003f7c:	ea81 0103 	eor.w	r1, r1, r3
 8003f80:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8003f84:	bfc2      	ittt	gt
 8003f86:	ebd4 050c 	rsbsgt	r5, r4, ip
 8003f8a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8003f8e:	bd70      	popgt	{r4, r5, r6, pc}
 8003f90:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8003f94:	f04f 0e00 	mov.w	lr, #0
 8003f98:	3c01      	subs	r4, #1
 8003f9a:	f300 80ab 	bgt.w	80040f4 <__aeabi_dmul+0x238>
 8003f9e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8003fa2:	bfde      	ittt	le
 8003fa4:	2000      	movle	r0, #0
 8003fa6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8003faa:	bd70      	pople	{r4, r5, r6, pc}
 8003fac:	f1c4 0400 	rsb	r4, r4, #0
 8003fb0:	3c20      	subs	r4, #32
 8003fb2:	da35      	bge.n	8004020 <__aeabi_dmul+0x164>
 8003fb4:	340c      	adds	r4, #12
 8003fb6:	dc1b      	bgt.n	8003ff0 <__aeabi_dmul+0x134>
 8003fb8:	f104 0414 	add.w	r4, r4, #20
 8003fbc:	f1c4 0520 	rsb	r5, r4, #32
 8003fc0:	fa00 f305 	lsl.w	r3, r0, r5
 8003fc4:	fa20 f004 	lsr.w	r0, r0, r4
 8003fc8:	fa01 f205 	lsl.w	r2, r1, r5
 8003fcc:	ea40 0002 	orr.w	r0, r0, r2
 8003fd0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8003fd4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8003fd8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8003fdc:	fa21 f604 	lsr.w	r6, r1, r4
 8003fe0:	eb42 0106 	adc.w	r1, r2, r6
 8003fe4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8003fe8:	bf08      	it	eq
 8003fea:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8003fee:	bd70      	pop	{r4, r5, r6, pc}
 8003ff0:	f1c4 040c 	rsb	r4, r4, #12
 8003ff4:	f1c4 0520 	rsb	r5, r4, #32
 8003ff8:	fa00 f304 	lsl.w	r3, r0, r4
 8003ffc:	fa20 f005 	lsr.w	r0, r0, r5
 8004000:	fa01 f204 	lsl.w	r2, r1, r4
 8004004:	ea40 0002 	orr.w	r0, r0, r2
 8004008:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800400c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8004010:	f141 0100 	adc.w	r1, r1, #0
 8004014:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8004018:	bf08      	it	eq
 800401a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800401e:	bd70      	pop	{r4, r5, r6, pc}
 8004020:	f1c4 0520 	rsb	r5, r4, #32
 8004024:	fa00 f205 	lsl.w	r2, r0, r5
 8004028:	ea4e 0e02 	orr.w	lr, lr, r2
 800402c:	fa20 f304 	lsr.w	r3, r0, r4
 8004030:	fa01 f205 	lsl.w	r2, r1, r5
 8004034:	ea43 0302 	orr.w	r3, r3, r2
 8004038:	fa21 f004 	lsr.w	r0, r1, r4
 800403c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8004040:	fa21 f204 	lsr.w	r2, r1, r4
 8004044:	ea20 0002 	bic.w	r0, r0, r2
 8004048:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800404c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8004050:	bf08      	it	eq
 8004052:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8004056:	bd70      	pop	{r4, r5, r6, pc}
 8004058:	f094 0f00 	teq	r4, #0
 800405c:	d10f      	bne.n	800407e <__aeabi_dmul+0x1c2>
 800405e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8004062:	0040      	lsls	r0, r0, #1
 8004064:	eb41 0101 	adc.w	r1, r1, r1
 8004068:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800406c:	bf08      	it	eq
 800406e:	3c01      	subeq	r4, #1
 8004070:	d0f7      	beq.n	8004062 <__aeabi_dmul+0x1a6>
 8004072:	ea41 0106 	orr.w	r1, r1, r6
 8004076:	f095 0f00 	teq	r5, #0
 800407a:	bf18      	it	ne
 800407c:	4770      	bxne	lr
 800407e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8004082:	0052      	lsls	r2, r2, #1
 8004084:	eb43 0303 	adc.w	r3, r3, r3
 8004088:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800408c:	bf08      	it	eq
 800408e:	3d01      	subeq	r5, #1
 8004090:	d0f7      	beq.n	8004082 <__aeabi_dmul+0x1c6>
 8004092:	ea43 0306 	orr.w	r3, r3, r6
 8004096:	4770      	bx	lr
 8004098:	ea94 0f0c 	teq	r4, ip
 800409c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80040a0:	bf18      	it	ne
 80040a2:	ea95 0f0c 	teqne	r5, ip
 80040a6:	d00c      	beq.n	80040c2 <__aeabi_dmul+0x206>
 80040a8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80040ac:	bf18      	it	ne
 80040ae:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80040b2:	d1d1      	bne.n	8004058 <__aeabi_dmul+0x19c>
 80040b4:	ea81 0103 	eor.w	r1, r1, r3
 80040b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80040bc:	f04f 0000 	mov.w	r0, #0
 80040c0:	bd70      	pop	{r4, r5, r6, pc}
 80040c2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80040c6:	bf06      	itte	eq
 80040c8:	4610      	moveq	r0, r2
 80040ca:	4619      	moveq	r1, r3
 80040cc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80040d0:	d019      	beq.n	8004106 <__aeabi_dmul+0x24a>
 80040d2:	ea94 0f0c 	teq	r4, ip
 80040d6:	d102      	bne.n	80040de <__aeabi_dmul+0x222>
 80040d8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80040dc:	d113      	bne.n	8004106 <__aeabi_dmul+0x24a>
 80040de:	ea95 0f0c 	teq	r5, ip
 80040e2:	d105      	bne.n	80040f0 <__aeabi_dmul+0x234>
 80040e4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80040e8:	bf1c      	itt	ne
 80040ea:	4610      	movne	r0, r2
 80040ec:	4619      	movne	r1, r3
 80040ee:	d10a      	bne.n	8004106 <__aeabi_dmul+0x24a>
 80040f0:	ea81 0103 	eor.w	r1, r1, r3
 80040f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80040f8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80040fc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004100:	f04f 0000 	mov.w	r0, #0
 8004104:	bd70      	pop	{r4, r5, r6, pc}
 8004106:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800410a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800410e:	bd70      	pop	{r4, r5, r6, pc}

08004110 <__aeabi_ddiv>:
 8004110:	b570      	push	{r4, r5, r6, lr}
 8004112:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8004116:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800411a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800411e:	bf1d      	ittte	ne
 8004120:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8004124:	ea94 0f0c 	teqne	r4, ip
 8004128:	ea95 0f0c 	teqne	r5, ip
 800412c:	f000 f8a7 	bleq	800427e <__aeabi_ddiv+0x16e>
 8004130:	eba4 0405 	sub.w	r4, r4, r5
 8004134:	ea81 0e03 	eor.w	lr, r1, r3
 8004138:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800413c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8004140:	f000 8088 	beq.w	8004254 <__aeabi_ddiv+0x144>
 8004144:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8004148:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800414c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8004150:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8004154:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8004158:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800415c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8004160:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8004164:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8004168:	429d      	cmp	r5, r3
 800416a:	bf08      	it	eq
 800416c:	4296      	cmpeq	r6, r2
 800416e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8004172:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8004176:	d202      	bcs.n	800417e <__aeabi_ddiv+0x6e>
 8004178:	085b      	lsrs	r3, r3, #1
 800417a:	ea4f 0232 	mov.w	r2, r2, rrx
 800417e:	1ab6      	subs	r6, r6, r2
 8004180:	eb65 0503 	sbc.w	r5, r5, r3
 8004184:	085b      	lsrs	r3, r3, #1
 8004186:	ea4f 0232 	mov.w	r2, r2, rrx
 800418a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800418e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8004192:	ebb6 0e02 	subs.w	lr, r6, r2
 8004196:	eb75 0e03 	sbcs.w	lr, r5, r3
 800419a:	bf22      	ittt	cs
 800419c:	1ab6      	subcs	r6, r6, r2
 800419e:	4675      	movcs	r5, lr
 80041a0:	ea40 000c 	orrcs.w	r0, r0, ip
 80041a4:	085b      	lsrs	r3, r3, #1
 80041a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80041aa:	ebb6 0e02 	subs.w	lr, r6, r2
 80041ae:	eb75 0e03 	sbcs.w	lr, r5, r3
 80041b2:	bf22      	ittt	cs
 80041b4:	1ab6      	subcs	r6, r6, r2
 80041b6:	4675      	movcs	r5, lr
 80041b8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80041bc:	085b      	lsrs	r3, r3, #1
 80041be:	ea4f 0232 	mov.w	r2, r2, rrx
 80041c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80041c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80041ca:	bf22      	ittt	cs
 80041cc:	1ab6      	subcs	r6, r6, r2
 80041ce:	4675      	movcs	r5, lr
 80041d0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80041d4:	085b      	lsrs	r3, r3, #1
 80041d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80041da:	ebb6 0e02 	subs.w	lr, r6, r2
 80041de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80041e2:	bf22      	ittt	cs
 80041e4:	1ab6      	subcs	r6, r6, r2
 80041e6:	4675      	movcs	r5, lr
 80041e8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80041ec:	ea55 0e06 	orrs.w	lr, r5, r6
 80041f0:	d018      	beq.n	8004224 <__aeabi_ddiv+0x114>
 80041f2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80041f6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80041fa:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80041fe:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8004202:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8004206:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800420a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800420e:	d1c0      	bne.n	8004192 <__aeabi_ddiv+0x82>
 8004210:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8004214:	d10b      	bne.n	800422e <__aeabi_ddiv+0x11e>
 8004216:	ea41 0100 	orr.w	r1, r1, r0
 800421a:	f04f 0000 	mov.w	r0, #0
 800421e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8004222:	e7b6      	b.n	8004192 <__aeabi_ddiv+0x82>
 8004224:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8004228:	bf04      	itt	eq
 800422a:	4301      	orreq	r1, r0
 800422c:	2000      	moveq	r0, #0
 800422e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8004232:	bf88      	it	hi
 8004234:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8004238:	f63f aeaf 	bhi.w	8003f9a <__aeabi_dmul+0xde>
 800423c:	ebb5 0c03 	subs.w	ip, r5, r3
 8004240:	bf04      	itt	eq
 8004242:	ebb6 0c02 	subseq.w	ip, r6, r2
 8004246:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800424a:	f150 0000 	adcs.w	r0, r0, #0
 800424e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8004252:	bd70      	pop	{r4, r5, r6, pc}
 8004254:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8004258:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800425c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8004260:	bfc2      	ittt	gt
 8004262:	ebd4 050c 	rsbsgt	r5, r4, ip
 8004266:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800426a:	bd70      	popgt	{r4, r5, r6, pc}
 800426c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8004270:	f04f 0e00 	mov.w	lr, #0
 8004274:	3c01      	subs	r4, #1
 8004276:	e690      	b.n	8003f9a <__aeabi_dmul+0xde>
 8004278:	ea45 0e06 	orr.w	lr, r5, r6
 800427c:	e68d      	b.n	8003f9a <__aeabi_dmul+0xde>
 800427e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8004282:	ea94 0f0c 	teq	r4, ip
 8004286:	bf08      	it	eq
 8004288:	ea95 0f0c 	teqeq	r5, ip
 800428c:	f43f af3b 	beq.w	8004106 <__aeabi_dmul+0x24a>
 8004290:	ea94 0f0c 	teq	r4, ip
 8004294:	d10a      	bne.n	80042ac <__aeabi_ddiv+0x19c>
 8004296:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800429a:	f47f af34 	bne.w	8004106 <__aeabi_dmul+0x24a>
 800429e:	ea95 0f0c 	teq	r5, ip
 80042a2:	f47f af25 	bne.w	80040f0 <__aeabi_dmul+0x234>
 80042a6:	4610      	mov	r0, r2
 80042a8:	4619      	mov	r1, r3
 80042aa:	e72c      	b.n	8004106 <__aeabi_dmul+0x24a>
 80042ac:	ea95 0f0c 	teq	r5, ip
 80042b0:	d106      	bne.n	80042c0 <__aeabi_ddiv+0x1b0>
 80042b2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80042b6:	f43f aefd 	beq.w	80040b4 <__aeabi_dmul+0x1f8>
 80042ba:	4610      	mov	r0, r2
 80042bc:	4619      	mov	r1, r3
 80042be:	e722      	b.n	8004106 <__aeabi_dmul+0x24a>
 80042c0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80042c4:	bf18      	it	ne
 80042c6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80042ca:	f47f aec5 	bne.w	8004058 <__aeabi_dmul+0x19c>
 80042ce:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80042d2:	f47f af0d 	bne.w	80040f0 <__aeabi_dmul+0x234>
 80042d6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80042da:	f47f aeeb 	bne.w	80040b4 <__aeabi_dmul+0x1f8>
 80042de:	e712      	b.n	8004106 <__aeabi_dmul+0x24a>

080042e0 <__gedf2>:
 80042e0:	f04f 3cff 	mov.w	ip, #4294967295
 80042e4:	e006      	b.n	80042f4 <__cmpdf2+0x4>
 80042e6:	bf00      	nop

080042e8 <__ledf2>:
 80042e8:	f04f 0c01 	mov.w	ip, #1
 80042ec:	e002      	b.n	80042f4 <__cmpdf2+0x4>
 80042ee:	bf00      	nop

080042f0 <__cmpdf2>:
 80042f0:	f04f 0c01 	mov.w	ip, #1
 80042f4:	f84d cd04 	str.w	ip, [sp, #-4]!
 80042f8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80042fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8004300:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8004304:	bf18      	it	ne
 8004306:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800430a:	d01b      	beq.n	8004344 <__cmpdf2+0x54>
 800430c:	b001      	add	sp, #4
 800430e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8004312:	bf0c      	ite	eq
 8004314:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8004318:	ea91 0f03 	teqne	r1, r3
 800431c:	bf02      	ittt	eq
 800431e:	ea90 0f02 	teqeq	r0, r2
 8004322:	2000      	moveq	r0, #0
 8004324:	4770      	bxeq	lr
 8004326:	f110 0f00 	cmn.w	r0, #0
 800432a:	ea91 0f03 	teq	r1, r3
 800432e:	bf58      	it	pl
 8004330:	4299      	cmppl	r1, r3
 8004332:	bf08      	it	eq
 8004334:	4290      	cmpeq	r0, r2
 8004336:	bf2c      	ite	cs
 8004338:	17d8      	asrcs	r0, r3, #31
 800433a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800433e:	f040 0001 	orr.w	r0, r0, #1
 8004342:	4770      	bx	lr
 8004344:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8004348:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800434c:	d102      	bne.n	8004354 <__cmpdf2+0x64>
 800434e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8004352:	d107      	bne.n	8004364 <__cmpdf2+0x74>
 8004354:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8004358:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800435c:	d1d6      	bne.n	800430c <__cmpdf2+0x1c>
 800435e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8004362:	d0d3      	beq.n	800430c <__cmpdf2+0x1c>
 8004364:	f85d 0b04 	ldr.w	r0, [sp], #4
 8004368:	4770      	bx	lr
 800436a:	bf00      	nop

0800436c <__aeabi_cdrcmple>:
 800436c:	4684      	mov	ip, r0
 800436e:	4610      	mov	r0, r2
 8004370:	4662      	mov	r2, ip
 8004372:	468c      	mov	ip, r1
 8004374:	4619      	mov	r1, r3
 8004376:	4663      	mov	r3, ip
 8004378:	e000      	b.n	800437c <__aeabi_cdcmpeq>
 800437a:	bf00      	nop

0800437c <__aeabi_cdcmpeq>:
 800437c:	b501      	push	{r0, lr}
 800437e:	f7ff ffb7 	bl	80042f0 <__cmpdf2>
 8004382:	2800      	cmp	r0, #0
 8004384:	bf48      	it	mi
 8004386:	f110 0f00 	cmnmi.w	r0, #0
 800438a:	bd01      	pop	{r0, pc}

0800438c <__aeabi_dcmpeq>:
 800438c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8004390:	f7ff fff4 	bl	800437c <__aeabi_cdcmpeq>
 8004394:	bf0c      	ite	eq
 8004396:	2001      	moveq	r0, #1
 8004398:	2000      	movne	r0, #0
 800439a:	f85d fb08 	ldr.w	pc, [sp], #8
 800439e:	bf00      	nop

080043a0 <__aeabi_dcmplt>:
 80043a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80043a4:	f7ff ffea 	bl	800437c <__aeabi_cdcmpeq>
 80043a8:	bf34      	ite	cc
 80043aa:	2001      	movcc	r0, #1
 80043ac:	2000      	movcs	r0, #0
 80043ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80043b2:	bf00      	nop

080043b4 <__aeabi_dcmple>:
 80043b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80043b8:	f7ff ffe0 	bl	800437c <__aeabi_cdcmpeq>
 80043bc:	bf94      	ite	ls
 80043be:	2001      	movls	r0, #1
 80043c0:	2000      	movhi	r0, #0
 80043c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80043c6:	bf00      	nop

080043c8 <__aeabi_dcmpge>:
 80043c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80043cc:	f7ff ffce 	bl	800436c <__aeabi_cdrcmple>
 80043d0:	bf94      	ite	ls
 80043d2:	2001      	movls	r0, #1
 80043d4:	2000      	movhi	r0, #0
 80043d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80043da:	bf00      	nop

080043dc <__aeabi_dcmpgt>:
 80043dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80043e0:	f7ff ffc4 	bl	800436c <__aeabi_cdrcmple>
 80043e4:	bf34      	ite	cc
 80043e6:	2001      	movcc	r0, #1
 80043e8:	2000      	movcs	r0, #0
 80043ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80043ee:	bf00      	nop

080043f0 <__aeabi_d2uiz>:
 80043f0:	004a      	lsls	r2, r1, #1
 80043f2:	d211      	bcs.n	8004418 <__aeabi_d2uiz+0x28>
 80043f4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80043f8:	d211      	bcs.n	800441e <__aeabi_d2uiz+0x2e>
 80043fa:	d50d      	bpl.n	8004418 <__aeabi_d2uiz+0x28>
 80043fc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8004400:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8004404:	d40e      	bmi.n	8004424 <__aeabi_d2uiz+0x34>
 8004406:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800440a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800440e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8004412:	fa23 f002 	lsr.w	r0, r3, r2
 8004416:	4770      	bx	lr
 8004418:	f04f 0000 	mov.w	r0, #0
 800441c:	4770      	bx	lr
 800441e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8004422:	d102      	bne.n	800442a <__aeabi_d2uiz+0x3a>
 8004424:	f04f 30ff 	mov.w	r0, #4294967295
 8004428:	4770      	bx	lr
 800442a:	f04f 0000 	mov.w	r0, #0
 800442e:	4770      	bx	lr

08004430 <__aeabi_d2f>:
 8004430:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8004434:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8004438:	bf24      	itt	cs
 800443a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800443e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8004442:	d90d      	bls.n	8004460 <__aeabi_d2f+0x30>
 8004444:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8004448:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 800444c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8004450:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8004454:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8004458:	bf08      	it	eq
 800445a:	f020 0001 	biceq.w	r0, r0, #1
 800445e:	4770      	bx	lr
 8004460:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8004464:	d121      	bne.n	80044aa <__aeabi_d2f+0x7a>
 8004466:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800446a:	bfbc      	itt	lt
 800446c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8004470:	4770      	bxlt	lr
 8004472:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8004476:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800447a:	f1c2 0218 	rsb	r2, r2, #24
 800447e:	f1c2 0c20 	rsb	ip, r2, #32
 8004482:	fa10 f30c 	lsls.w	r3, r0, ip
 8004486:	fa20 f002 	lsr.w	r0, r0, r2
 800448a:	bf18      	it	ne
 800448c:	f040 0001 	orrne.w	r0, r0, #1
 8004490:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8004494:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8004498:	fa03 fc0c 	lsl.w	ip, r3, ip
 800449c:	ea40 000c 	orr.w	r0, r0, ip
 80044a0:	fa23 f302 	lsr.w	r3, r3, r2
 80044a4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80044a8:	e7cc      	b.n	8004444 <__aeabi_d2f+0x14>
 80044aa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80044ae:	d107      	bne.n	80044c0 <__aeabi_d2f+0x90>
 80044b0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80044b4:	bf1e      	ittt	ne
 80044b6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80044ba:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80044be:	4770      	bxne	lr
 80044c0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80044c4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80044c8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80044cc:	4770      	bx	lr
 80044ce:	bf00      	nop

080044d0 <__aeabi_uldivmod>:
 80044d0:	b953      	cbnz	r3, 80044e8 <__aeabi_uldivmod+0x18>
 80044d2:	b94a      	cbnz	r2, 80044e8 <__aeabi_uldivmod+0x18>
 80044d4:	2900      	cmp	r1, #0
 80044d6:	bf08      	it	eq
 80044d8:	2800      	cmpeq	r0, #0
 80044da:	bf1c      	itt	ne
 80044dc:	f04f 31ff 	movne.w	r1, #4294967295
 80044e0:	f04f 30ff 	movne.w	r0, #4294967295
 80044e4:	f000 b972 	b.w	80047cc <__aeabi_idiv0>
 80044e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80044ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80044f0:	f000 f806 	bl	8004500 <__udivmoddi4>
 80044f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80044f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80044fc:	b004      	add	sp, #16
 80044fe:	4770      	bx	lr

08004500 <__udivmoddi4>:
 8004500:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004504:	9e08      	ldr	r6, [sp, #32]
 8004506:	4604      	mov	r4, r0
 8004508:	4688      	mov	r8, r1
 800450a:	2b00      	cmp	r3, #0
 800450c:	d14b      	bne.n	80045a6 <__udivmoddi4+0xa6>
 800450e:	428a      	cmp	r2, r1
 8004510:	4615      	mov	r5, r2
 8004512:	d967      	bls.n	80045e4 <__udivmoddi4+0xe4>
 8004514:	fab2 f282 	clz	r2, r2
 8004518:	b14a      	cbz	r2, 800452e <__udivmoddi4+0x2e>
 800451a:	f1c2 0720 	rsb	r7, r2, #32
 800451e:	fa01 f302 	lsl.w	r3, r1, r2
 8004522:	fa20 f707 	lsr.w	r7, r0, r7
 8004526:	4095      	lsls	r5, r2
 8004528:	ea47 0803 	orr.w	r8, r7, r3
 800452c:	4094      	lsls	r4, r2
 800452e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8004532:	0c23      	lsrs	r3, r4, #16
 8004534:	fbb8 f7fe 	udiv	r7, r8, lr
 8004538:	fa1f fc85 	uxth.w	ip, r5
 800453c:	fb0e 8817 	mls	r8, lr, r7, r8
 8004540:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8004544:	fb07 f10c 	mul.w	r1, r7, ip
 8004548:	4299      	cmp	r1, r3
 800454a:	d909      	bls.n	8004560 <__udivmoddi4+0x60>
 800454c:	18eb      	adds	r3, r5, r3
 800454e:	f107 30ff 	add.w	r0, r7, #4294967295
 8004552:	f080 811b 	bcs.w	800478c <__udivmoddi4+0x28c>
 8004556:	4299      	cmp	r1, r3
 8004558:	f240 8118 	bls.w	800478c <__udivmoddi4+0x28c>
 800455c:	3f02      	subs	r7, #2
 800455e:	442b      	add	r3, r5
 8004560:	1a5b      	subs	r3, r3, r1
 8004562:	b2a4      	uxth	r4, r4
 8004564:	fbb3 f0fe 	udiv	r0, r3, lr
 8004568:	fb0e 3310 	mls	r3, lr, r0, r3
 800456c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8004570:	fb00 fc0c 	mul.w	ip, r0, ip
 8004574:	45a4      	cmp	ip, r4
 8004576:	d909      	bls.n	800458c <__udivmoddi4+0x8c>
 8004578:	192c      	adds	r4, r5, r4
 800457a:	f100 33ff 	add.w	r3, r0, #4294967295
 800457e:	f080 8107 	bcs.w	8004790 <__udivmoddi4+0x290>
 8004582:	45a4      	cmp	ip, r4
 8004584:	f240 8104 	bls.w	8004790 <__udivmoddi4+0x290>
 8004588:	3802      	subs	r0, #2
 800458a:	442c      	add	r4, r5
 800458c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8004590:	eba4 040c 	sub.w	r4, r4, ip
 8004594:	2700      	movs	r7, #0
 8004596:	b11e      	cbz	r6, 80045a0 <__udivmoddi4+0xa0>
 8004598:	40d4      	lsrs	r4, r2
 800459a:	2300      	movs	r3, #0
 800459c:	e9c6 4300 	strd	r4, r3, [r6]
 80045a0:	4639      	mov	r1, r7
 80045a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045a6:	428b      	cmp	r3, r1
 80045a8:	d909      	bls.n	80045be <__udivmoddi4+0xbe>
 80045aa:	2e00      	cmp	r6, #0
 80045ac:	f000 80eb 	beq.w	8004786 <__udivmoddi4+0x286>
 80045b0:	2700      	movs	r7, #0
 80045b2:	e9c6 0100 	strd	r0, r1, [r6]
 80045b6:	4638      	mov	r0, r7
 80045b8:	4639      	mov	r1, r7
 80045ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045be:	fab3 f783 	clz	r7, r3
 80045c2:	2f00      	cmp	r7, #0
 80045c4:	d147      	bne.n	8004656 <__udivmoddi4+0x156>
 80045c6:	428b      	cmp	r3, r1
 80045c8:	d302      	bcc.n	80045d0 <__udivmoddi4+0xd0>
 80045ca:	4282      	cmp	r2, r0
 80045cc:	f200 80fa 	bhi.w	80047c4 <__udivmoddi4+0x2c4>
 80045d0:	1a84      	subs	r4, r0, r2
 80045d2:	eb61 0303 	sbc.w	r3, r1, r3
 80045d6:	2001      	movs	r0, #1
 80045d8:	4698      	mov	r8, r3
 80045da:	2e00      	cmp	r6, #0
 80045dc:	d0e0      	beq.n	80045a0 <__udivmoddi4+0xa0>
 80045de:	e9c6 4800 	strd	r4, r8, [r6]
 80045e2:	e7dd      	b.n	80045a0 <__udivmoddi4+0xa0>
 80045e4:	b902      	cbnz	r2, 80045e8 <__udivmoddi4+0xe8>
 80045e6:	deff      	udf	#255	; 0xff
 80045e8:	fab2 f282 	clz	r2, r2
 80045ec:	2a00      	cmp	r2, #0
 80045ee:	f040 808f 	bne.w	8004710 <__udivmoddi4+0x210>
 80045f2:	1b49      	subs	r1, r1, r5
 80045f4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80045f8:	fa1f f885 	uxth.w	r8, r5
 80045fc:	2701      	movs	r7, #1
 80045fe:	fbb1 fcfe 	udiv	ip, r1, lr
 8004602:	0c23      	lsrs	r3, r4, #16
 8004604:	fb0e 111c 	mls	r1, lr, ip, r1
 8004608:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800460c:	fb08 f10c 	mul.w	r1, r8, ip
 8004610:	4299      	cmp	r1, r3
 8004612:	d907      	bls.n	8004624 <__udivmoddi4+0x124>
 8004614:	18eb      	adds	r3, r5, r3
 8004616:	f10c 30ff 	add.w	r0, ip, #4294967295
 800461a:	d202      	bcs.n	8004622 <__udivmoddi4+0x122>
 800461c:	4299      	cmp	r1, r3
 800461e:	f200 80cd 	bhi.w	80047bc <__udivmoddi4+0x2bc>
 8004622:	4684      	mov	ip, r0
 8004624:	1a59      	subs	r1, r3, r1
 8004626:	b2a3      	uxth	r3, r4
 8004628:	fbb1 f0fe 	udiv	r0, r1, lr
 800462c:	fb0e 1410 	mls	r4, lr, r0, r1
 8004630:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8004634:	fb08 f800 	mul.w	r8, r8, r0
 8004638:	45a0      	cmp	r8, r4
 800463a:	d907      	bls.n	800464c <__udivmoddi4+0x14c>
 800463c:	192c      	adds	r4, r5, r4
 800463e:	f100 33ff 	add.w	r3, r0, #4294967295
 8004642:	d202      	bcs.n	800464a <__udivmoddi4+0x14a>
 8004644:	45a0      	cmp	r8, r4
 8004646:	f200 80b6 	bhi.w	80047b6 <__udivmoddi4+0x2b6>
 800464a:	4618      	mov	r0, r3
 800464c:	eba4 0408 	sub.w	r4, r4, r8
 8004650:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8004654:	e79f      	b.n	8004596 <__udivmoddi4+0x96>
 8004656:	f1c7 0c20 	rsb	ip, r7, #32
 800465a:	40bb      	lsls	r3, r7
 800465c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8004660:	ea4e 0e03 	orr.w	lr, lr, r3
 8004664:	fa01 f407 	lsl.w	r4, r1, r7
 8004668:	fa20 f50c 	lsr.w	r5, r0, ip
 800466c:	fa21 f30c 	lsr.w	r3, r1, ip
 8004670:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8004674:	4325      	orrs	r5, r4
 8004676:	fbb3 f9f8 	udiv	r9, r3, r8
 800467a:	0c2c      	lsrs	r4, r5, #16
 800467c:	fb08 3319 	mls	r3, r8, r9, r3
 8004680:	fa1f fa8e 	uxth.w	sl, lr
 8004684:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8004688:	fb09 f40a 	mul.w	r4, r9, sl
 800468c:	429c      	cmp	r4, r3
 800468e:	fa02 f207 	lsl.w	r2, r2, r7
 8004692:	fa00 f107 	lsl.w	r1, r0, r7
 8004696:	d90b      	bls.n	80046b0 <__udivmoddi4+0x1b0>
 8004698:	eb1e 0303 	adds.w	r3, lr, r3
 800469c:	f109 30ff 	add.w	r0, r9, #4294967295
 80046a0:	f080 8087 	bcs.w	80047b2 <__udivmoddi4+0x2b2>
 80046a4:	429c      	cmp	r4, r3
 80046a6:	f240 8084 	bls.w	80047b2 <__udivmoddi4+0x2b2>
 80046aa:	f1a9 0902 	sub.w	r9, r9, #2
 80046ae:	4473      	add	r3, lr
 80046b0:	1b1b      	subs	r3, r3, r4
 80046b2:	b2ad      	uxth	r5, r5
 80046b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80046b8:	fb08 3310 	mls	r3, r8, r0, r3
 80046bc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80046c0:	fb00 fa0a 	mul.w	sl, r0, sl
 80046c4:	45a2      	cmp	sl, r4
 80046c6:	d908      	bls.n	80046da <__udivmoddi4+0x1da>
 80046c8:	eb1e 0404 	adds.w	r4, lr, r4
 80046cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80046d0:	d26b      	bcs.n	80047aa <__udivmoddi4+0x2aa>
 80046d2:	45a2      	cmp	sl, r4
 80046d4:	d969      	bls.n	80047aa <__udivmoddi4+0x2aa>
 80046d6:	3802      	subs	r0, #2
 80046d8:	4474      	add	r4, lr
 80046da:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80046de:	fba0 8902 	umull	r8, r9, r0, r2
 80046e2:	eba4 040a 	sub.w	r4, r4, sl
 80046e6:	454c      	cmp	r4, r9
 80046e8:	46c2      	mov	sl, r8
 80046ea:	464b      	mov	r3, r9
 80046ec:	d354      	bcc.n	8004798 <__udivmoddi4+0x298>
 80046ee:	d051      	beq.n	8004794 <__udivmoddi4+0x294>
 80046f0:	2e00      	cmp	r6, #0
 80046f2:	d069      	beq.n	80047c8 <__udivmoddi4+0x2c8>
 80046f4:	ebb1 050a 	subs.w	r5, r1, sl
 80046f8:	eb64 0403 	sbc.w	r4, r4, r3
 80046fc:	fa04 fc0c 	lsl.w	ip, r4, ip
 8004700:	40fd      	lsrs	r5, r7
 8004702:	40fc      	lsrs	r4, r7
 8004704:	ea4c 0505 	orr.w	r5, ip, r5
 8004708:	e9c6 5400 	strd	r5, r4, [r6]
 800470c:	2700      	movs	r7, #0
 800470e:	e747      	b.n	80045a0 <__udivmoddi4+0xa0>
 8004710:	f1c2 0320 	rsb	r3, r2, #32
 8004714:	fa20 f703 	lsr.w	r7, r0, r3
 8004718:	4095      	lsls	r5, r2
 800471a:	fa01 f002 	lsl.w	r0, r1, r2
 800471e:	fa21 f303 	lsr.w	r3, r1, r3
 8004722:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8004726:	4338      	orrs	r0, r7
 8004728:	0c01      	lsrs	r1, r0, #16
 800472a:	fbb3 f7fe 	udiv	r7, r3, lr
 800472e:	fa1f f885 	uxth.w	r8, r5
 8004732:	fb0e 3317 	mls	r3, lr, r7, r3
 8004736:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800473a:	fb07 f308 	mul.w	r3, r7, r8
 800473e:	428b      	cmp	r3, r1
 8004740:	fa04 f402 	lsl.w	r4, r4, r2
 8004744:	d907      	bls.n	8004756 <__udivmoddi4+0x256>
 8004746:	1869      	adds	r1, r5, r1
 8004748:	f107 3cff 	add.w	ip, r7, #4294967295
 800474c:	d22f      	bcs.n	80047ae <__udivmoddi4+0x2ae>
 800474e:	428b      	cmp	r3, r1
 8004750:	d92d      	bls.n	80047ae <__udivmoddi4+0x2ae>
 8004752:	3f02      	subs	r7, #2
 8004754:	4429      	add	r1, r5
 8004756:	1acb      	subs	r3, r1, r3
 8004758:	b281      	uxth	r1, r0
 800475a:	fbb3 f0fe 	udiv	r0, r3, lr
 800475e:	fb0e 3310 	mls	r3, lr, r0, r3
 8004762:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8004766:	fb00 f308 	mul.w	r3, r0, r8
 800476a:	428b      	cmp	r3, r1
 800476c:	d907      	bls.n	800477e <__udivmoddi4+0x27e>
 800476e:	1869      	adds	r1, r5, r1
 8004770:	f100 3cff 	add.w	ip, r0, #4294967295
 8004774:	d217      	bcs.n	80047a6 <__udivmoddi4+0x2a6>
 8004776:	428b      	cmp	r3, r1
 8004778:	d915      	bls.n	80047a6 <__udivmoddi4+0x2a6>
 800477a:	3802      	subs	r0, #2
 800477c:	4429      	add	r1, r5
 800477e:	1ac9      	subs	r1, r1, r3
 8004780:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8004784:	e73b      	b.n	80045fe <__udivmoddi4+0xfe>
 8004786:	4637      	mov	r7, r6
 8004788:	4630      	mov	r0, r6
 800478a:	e709      	b.n	80045a0 <__udivmoddi4+0xa0>
 800478c:	4607      	mov	r7, r0
 800478e:	e6e7      	b.n	8004560 <__udivmoddi4+0x60>
 8004790:	4618      	mov	r0, r3
 8004792:	e6fb      	b.n	800458c <__udivmoddi4+0x8c>
 8004794:	4541      	cmp	r1, r8
 8004796:	d2ab      	bcs.n	80046f0 <__udivmoddi4+0x1f0>
 8004798:	ebb8 0a02 	subs.w	sl, r8, r2
 800479c:	eb69 020e 	sbc.w	r2, r9, lr
 80047a0:	3801      	subs	r0, #1
 80047a2:	4613      	mov	r3, r2
 80047a4:	e7a4      	b.n	80046f0 <__udivmoddi4+0x1f0>
 80047a6:	4660      	mov	r0, ip
 80047a8:	e7e9      	b.n	800477e <__udivmoddi4+0x27e>
 80047aa:	4618      	mov	r0, r3
 80047ac:	e795      	b.n	80046da <__udivmoddi4+0x1da>
 80047ae:	4667      	mov	r7, ip
 80047b0:	e7d1      	b.n	8004756 <__udivmoddi4+0x256>
 80047b2:	4681      	mov	r9, r0
 80047b4:	e77c      	b.n	80046b0 <__udivmoddi4+0x1b0>
 80047b6:	3802      	subs	r0, #2
 80047b8:	442c      	add	r4, r5
 80047ba:	e747      	b.n	800464c <__udivmoddi4+0x14c>
 80047bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80047c0:	442b      	add	r3, r5
 80047c2:	e72f      	b.n	8004624 <__udivmoddi4+0x124>
 80047c4:	4638      	mov	r0, r7
 80047c6:	e708      	b.n	80045da <__udivmoddi4+0xda>
 80047c8:	4637      	mov	r7, r6
 80047ca:	e6e9      	b.n	80045a0 <__udivmoddi4+0xa0>

080047cc <__aeabi_idiv0>:
 80047cc:	4770      	bx	lr
 80047ce:	bf00      	nop

080047d0 <arm_dot_prod_f32>:
void arm_dot_prod_f32(
  float32_t * pSrcA,
  float32_t * pSrcB,
  uint32_t blockSize,
  float32_t * result)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b087      	sub	sp, #28
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	60f8      	str	r0, [r7, #12]
 80047d8:	60b9      	str	r1, [r7, #8]
 80047da:	607a      	str	r2, [r7, #4]
 80047dc:	603b      	str	r3, [r7, #0]
  float32_t sum = 0.0f;                          /* Temporary result storage */
 80047de:	f04f 0300 	mov.w	r3, #0
 80047e2:	617b      	str	r3, [r7, #20]

#if defined (ARM_MATH_DSP)

/* Run the below code for Cortex-M4 and Cortex-M3 */
  /*loop Unrolling */
  blkCnt = blockSize >> 2U;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	089b      	lsrs	r3, r3, #2
 80047e8:	613b      	str	r3, [r7, #16]

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
   ** a second loop below computes the remaining 1 to 3 samples. */
  while (blkCnt > 0U)
 80047ea:	e04a      	b.n	8004882 <arm_dot_prod_f32+0xb2>
  {
    /* C = A[0]* B[0] + A[1]* B[1] + A[2]* B[2] + .....+ A[blockSize-1]* B[blockSize-1] */
    /* Calculate dot product and then store the result in a temporary buffer */
    sum += (*pSrcA++) * (*pSrcB++);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	1d1a      	adds	r2, r3, #4
 80047f0:	60fa      	str	r2, [r7, #12]
 80047f2:	ed93 7a00 	vldr	s14, [r3]
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	1d1a      	adds	r2, r3, #4
 80047fa:	60ba      	str	r2, [r7, #8]
 80047fc:	edd3 7a00 	vldr	s15, [r3]
 8004800:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004804:	ed97 7a05 	vldr	s14, [r7, #20]
 8004808:	ee77 7a27 	vadd.f32	s15, s14, s15
 800480c:	edc7 7a05 	vstr	s15, [r7, #20]
    sum += (*pSrcA++) * (*pSrcB++);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	1d1a      	adds	r2, r3, #4
 8004814:	60fa      	str	r2, [r7, #12]
 8004816:	ed93 7a00 	vldr	s14, [r3]
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	1d1a      	adds	r2, r3, #4
 800481e:	60ba      	str	r2, [r7, #8]
 8004820:	edd3 7a00 	vldr	s15, [r3]
 8004824:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004828:	ed97 7a05 	vldr	s14, [r7, #20]
 800482c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004830:	edc7 7a05 	vstr	s15, [r7, #20]
    sum += (*pSrcA++) * (*pSrcB++);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	1d1a      	adds	r2, r3, #4
 8004838:	60fa      	str	r2, [r7, #12]
 800483a:	ed93 7a00 	vldr	s14, [r3]
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	1d1a      	adds	r2, r3, #4
 8004842:	60ba      	str	r2, [r7, #8]
 8004844:	edd3 7a00 	vldr	s15, [r3]
 8004848:	ee67 7a27 	vmul.f32	s15, s14, s15
 800484c:	ed97 7a05 	vldr	s14, [r7, #20]
 8004850:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004854:	edc7 7a05 	vstr	s15, [r7, #20]
    sum += (*pSrcA++) * (*pSrcB++);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	1d1a      	adds	r2, r3, #4
 800485c:	60fa      	str	r2, [r7, #12]
 800485e:	ed93 7a00 	vldr	s14, [r3]
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	1d1a      	adds	r2, r3, #4
 8004866:	60ba      	str	r2, [r7, #8]
 8004868:	edd3 7a00 	vldr	s15, [r3]
 800486c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004870:	ed97 7a05 	vldr	s14, [r7, #20]
 8004874:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004878:	edc7 7a05 	vstr	s15, [r7, #20]

    /* Decrement the loop counter */
    blkCnt--;
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	3b01      	subs	r3, #1
 8004880:	613b      	str	r3, [r7, #16]
  while (blkCnt > 0U)
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d1b1      	bne.n	80047ec <arm_dot_prod_f32+0x1c>
  }

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.
   ** No loop unrolling is used. */
  blkCnt = blockSize % 0x4U;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	f003 0303 	and.w	r3, r3, #3
 800488e:	613b      	str	r3, [r7, #16]
  blkCnt = blockSize;

#endif /* #if defined (ARM_MATH_DSP) */


  while (blkCnt > 0U)
 8004890:	e014      	b.n	80048bc <arm_dot_prod_f32+0xec>
  {
    /* C = A[0]* B[0] + A[1]* B[1] + A[2]* B[2] + .....+ A[blockSize-1]* B[blockSize-1] */
    /* Calculate dot product and then store the result in a temporary buffer. */
    sum += (*pSrcA++) * (*pSrcB++);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	1d1a      	adds	r2, r3, #4
 8004896:	60fa      	str	r2, [r7, #12]
 8004898:	ed93 7a00 	vldr	s14, [r3]
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	1d1a      	adds	r2, r3, #4
 80048a0:	60ba      	str	r2, [r7, #8]
 80048a2:	edd3 7a00 	vldr	s15, [r3]
 80048a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048aa:	ed97 7a05 	vldr	s14, [r7, #20]
 80048ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80048b2:	edc7 7a05 	vstr	s15, [r7, #20]

    /* Decrement the loop counter */
    blkCnt--;
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	3b01      	subs	r3, #1
 80048ba:	613b      	str	r3, [r7, #16]
  while (blkCnt > 0U)
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d1e7      	bne.n	8004892 <arm_dot_prod_f32+0xc2>
  }
  /* Store the result back in the destination buffer */
  *result = sum;
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	697a      	ldr	r2, [r7, #20]
 80048c6:	601a      	str	r2, [r3, #0]
}
 80048c8:	bf00      	nop
 80048ca:	371c      	adds	r7, #28
 80048cc:	46bd      	mov	sp, r7
 80048ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d2:	4770      	bx	lr

080048d4 <arm_mat_init_f32>:
void arm_mat_init_f32(
  arm_matrix_instance_f32 * S,
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b085      	sub	sp, #20
 80048d8:	af00      	add	r7, sp, #0
 80048da:	60f8      	str	r0, [r7, #12]
 80048dc:	607b      	str	r3, [r7, #4]
 80048de:	460b      	mov	r3, r1
 80048e0:	817b      	strh	r3, [r7, #10]
 80048e2:	4613      	mov	r3, r2
 80048e4:	813b      	strh	r3, [r7, #8]
  /* Assign Number of Rows */
  S->numRows = nRows;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	897a      	ldrh	r2, [r7, #10]
 80048ea:	801a      	strh	r2, [r3, #0]

  /* Assign Number of Columns */
  S->numCols = nColumns;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	893a      	ldrh	r2, [r7, #8]
 80048f0:	805a      	strh	r2, [r3, #2]

  /* Assign Data pointer */
  S->pData = pData;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	687a      	ldr	r2, [r7, #4]
 80048f6:	605a      	str	r2, [r3, #4]
}
 80048f8:	bf00      	nop
 80048fa:	3714      	adds	r7, #20
 80048fc:	46bd      	mov	sp, r7
 80048fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004902:	4770      	bx	lr

08004904 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004908:	4b0e      	ldr	r3, [pc, #56]	; (8004944 <HAL_Init+0x40>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a0d      	ldr	r2, [pc, #52]	; (8004944 <HAL_Init+0x40>)
 800490e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004912:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004914:	4b0b      	ldr	r3, [pc, #44]	; (8004944 <HAL_Init+0x40>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a0a      	ldr	r2, [pc, #40]	; (8004944 <HAL_Init+0x40>)
 800491a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800491e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004920:	4b08      	ldr	r3, [pc, #32]	; (8004944 <HAL_Init+0x40>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a07      	ldr	r2, [pc, #28]	; (8004944 <HAL_Init+0x40>)
 8004926:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800492a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800492c:	2003      	movs	r0, #3
 800492e:	f000 f94d 	bl	8004bcc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004932:	2000      	movs	r0, #0
 8004934:	f000 f808 	bl	8004948 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004938:	f004 fab8 	bl	8008eac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800493c:	2300      	movs	r3, #0
}
 800493e:	4618      	mov	r0, r3
 8004940:	bd80      	pop	{r7, pc}
 8004942:	bf00      	nop
 8004944:	40023c00 	.word	0x40023c00

08004948 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b082      	sub	sp, #8
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004950:	4b12      	ldr	r3, [pc, #72]	; (800499c <HAL_InitTick+0x54>)
 8004952:	681a      	ldr	r2, [r3, #0]
 8004954:	4b12      	ldr	r3, [pc, #72]	; (80049a0 <HAL_InitTick+0x58>)
 8004956:	781b      	ldrb	r3, [r3, #0]
 8004958:	4619      	mov	r1, r3
 800495a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800495e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004962:	fbb2 f3f3 	udiv	r3, r2, r3
 8004966:	4618      	mov	r0, r3
 8004968:	f000 f965 	bl	8004c36 <HAL_SYSTICK_Config>
 800496c:	4603      	mov	r3, r0
 800496e:	2b00      	cmp	r3, #0
 8004970:	d001      	beq.n	8004976 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	e00e      	b.n	8004994 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2b0f      	cmp	r3, #15
 800497a:	d80a      	bhi.n	8004992 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800497c:	2200      	movs	r2, #0
 800497e:	6879      	ldr	r1, [r7, #4]
 8004980:	f04f 30ff 	mov.w	r0, #4294967295
 8004984:	f000 f92d 	bl	8004be2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004988:	4a06      	ldr	r2, [pc, #24]	; (80049a4 <HAL_InitTick+0x5c>)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800498e:	2300      	movs	r3, #0
 8004990:	e000      	b.n	8004994 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004992:	2301      	movs	r3, #1
}
 8004994:	4618      	mov	r0, r3
 8004996:	3708      	adds	r7, #8
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}
 800499c:	20000478 	.word	0x20000478
 80049a0:	20000004 	.word	0x20000004
 80049a4:	20000000 	.word	0x20000000

080049a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80049a8:	b480      	push	{r7}
 80049aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80049ac:	4b06      	ldr	r3, [pc, #24]	; (80049c8 <HAL_IncTick+0x20>)
 80049ae:	781b      	ldrb	r3, [r3, #0]
 80049b0:	461a      	mov	r2, r3
 80049b2:	4b06      	ldr	r3, [pc, #24]	; (80049cc <HAL_IncTick+0x24>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4413      	add	r3, r2
 80049b8:	4a04      	ldr	r2, [pc, #16]	; (80049cc <HAL_IncTick+0x24>)
 80049ba:	6013      	str	r3, [r2, #0]
}
 80049bc:	bf00      	nop
 80049be:	46bd      	mov	sp, r7
 80049c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c4:	4770      	bx	lr
 80049c6:	bf00      	nop
 80049c8:	20000004 	.word	0x20000004
 80049cc:	200019f4 	.word	0x200019f4

080049d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80049d0:	b480      	push	{r7}
 80049d2:	af00      	add	r7, sp, #0
  return uwTick;
 80049d4:	4b03      	ldr	r3, [pc, #12]	; (80049e4 <HAL_GetTick+0x14>)
 80049d6:	681b      	ldr	r3, [r3, #0]
}
 80049d8:	4618      	mov	r0, r3
 80049da:	46bd      	mov	sp, r7
 80049dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e0:	4770      	bx	lr
 80049e2:	bf00      	nop
 80049e4:	200019f4 	.word	0x200019f4

080049e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b084      	sub	sp, #16
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80049f0:	f7ff ffee 	bl	80049d0 <HAL_GetTick>
 80049f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a00:	d005      	beq.n	8004a0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004a02:	4b09      	ldr	r3, [pc, #36]	; (8004a28 <HAL_Delay+0x40>)
 8004a04:	781b      	ldrb	r3, [r3, #0]
 8004a06:	461a      	mov	r2, r3
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	4413      	add	r3, r2
 8004a0c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004a0e:	bf00      	nop
 8004a10:	f7ff ffde 	bl	80049d0 <HAL_GetTick>
 8004a14:	4602      	mov	r2, r0
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	1ad3      	subs	r3, r2, r3
 8004a1a:	68fa      	ldr	r2, [r7, #12]
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	d8f7      	bhi.n	8004a10 <HAL_Delay+0x28>
  {
  }
}
 8004a20:	bf00      	nop
 8004a22:	3710      	adds	r7, #16
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}
 8004a28:	20000004 	.word	0x20000004

08004a2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b085      	sub	sp, #20
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	f003 0307 	and.w	r3, r3, #7
 8004a3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004a3c:	4b0c      	ldr	r3, [pc, #48]	; (8004a70 <__NVIC_SetPriorityGrouping+0x44>)
 8004a3e:	68db      	ldr	r3, [r3, #12]
 8004a40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004a42:	68ba      	ldr	r2, [r7, #8]
 8004a44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004a48:	4013      	ands	r3, r2
 8004a4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004a54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004a58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004a5e:	4a04      	ldr	r2, [pc, #16]	; (8004a70 <__NVIC_SetPriorityGrouping+0x44>)
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	60d3      	str	r3, [r2, #12]
}
 8004a64:	bf00      	nop
 8004a66:	3714      	adds	r7, #20
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6e:	4770      	bx	lr
 8004a70:	e000ed00 	.word	0xe000ed00

08004a74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004a74:	b480      	push	{r7}
 8004a76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004a78:	4b04      	ldr	r3, [pc, #16]	; (8004a8c <__NVIC_GetPriorityGrouping+0x18>)
 8004a7a:	68db      	ldr	r3, [r3, #12]
 8004a7c:	0a1b      	lsrs	r3, r3, #8
 8004a7e:	f003 0307 	and.w	r3, r3, #7
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	46bd      	mov	sp, r7
 8004a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8a:	4770      	bx	lr
 8004a8c:	e000ed00 	.word	0xe000ed00

08004a90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b083      	sub	sp, #12
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	4603      	mov	r3, r0
 8004a98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	db0b      	blt.n	8004aba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004aa2:	79fb      	ldrb	r3, [r7, #7]
 8004aa4:	f003 021f 	and.w	r2, r3, #31
 8004aa8:	4907      	ldr	r1, [pc, #28]	; (8004ac8 <__NVIC_EnableIRQ+0x38>)
 8004aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004aae:	095b      	lsrs	r3, r3, #5
 8004ab0:	2001      	movs	r0, #1
 8004ab2:	fa00 f202 	lsl.w	r2, r0, r2
 8004ab6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004aba:	bf00      	nop
 8004abc:	370c      	adds	r7, #12
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac4:	4770      	bx	lr
 8004ac6:	bf00      	nop
 8004ac8:	e000e100 	.word	0xe000e100

08004acc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004acc:	b480      	push	{r7}
 8004ace:	b083      	sub	sp, #12
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	6039      	str	r1, [r7, #0]
 8004ad6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ad8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	db0a      	blt.n	8004af6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	b2da      	uxtb	r2, r3
 8004ae4:	490c      	ldr	r1, [pc, #48]	; (8004b18 <__NVIC_SetPriority+0x4c>)
 8004ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004aea:	0112      	lsls	r2, r2, #4
 8004aec:	b2d2      	uxtb	r2, r2
 8004aee:	440b      	add	r3, r1
 8004af0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004af4:	e00a      	b.n	8004b0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	b2da      	uxtb	r2, r3
 8004afa:	4908      	ldr	r1, [pc, #32]	; (8004b1c <__NVIC_SetPriority+0x50>)
 8004afc:	79fb      	ldrb	r3, [r7, #7]
 8004afe:	f003 030f 	and.w	r3, r3, #15
 8004b02:	3b04      	subs	r3, #4
 8004b04:	0112      	lsls	r2, r2, #4
 8004b06:	b2d2      	uxtb	r2, r2
 8004b08:	440b      	add	r3, r1
 8004b0a:	761a      	strb	r2, [r3, #24]
}
 8004b0c:	bf00      	nop
 8004b0e:	370c      	adds	r7, #12
 8004b10:	46bd      	mov	sp, r7
 8004b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b16:	4770      	bx	lr
 8004b18:	e000e100 	.word	0xe000e100
 8004b1c:	e000ed00 	.word	0xe000ed00

08004b20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b089      	sub	sp, #36	; 0x24
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	60f8      	str	r0, [r7, #12]
 8004b28:	60b9      	str	r1, [r7, #8]
 8004b2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	f003 0307 	and.w	r3, r3, #7
 8004b32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004b34:	69fb      	ldr	r3, [r7, #28]
 8004b36:	f1c3 0307 	rsb	r3, r3, #7
 8004b3a:	2b04      	cmp	r3, #4
 8004b3c:	bf28      	it	cs
 8004b3e:	2304      	movcs	r3, #4
 8004b40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004b42:	69fb      	ldr	r3, [r7, #28]
 8004b44:	3304      	adds	r3, #4
 8004b46:	2b06      	cmp	r3, #6
 8004b48:	d902      	bls.n	8004b50 <NVIC_EncodePriority+0x30>
 8004b4a:	69fb      	ldr	r3, [r7, #28]
 8004b4c:	3b03      	subs	r3, #3
 8004b4e:	e000      	b.n	8004b52 <NVIC_EncodePriority+0x32>
 8004b50:	2300      	movs	r3, #0
 8004b52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b54:	f04f 32ff 	mov.w	r2, #4294967295
 8004b58:	69bb      	ldr	r3, [r7, #24]
 8004b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b5e:	43da      	mvns	r2, r3
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	401a      	ands	r2, r3
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004b68:	f04f 31ff 	mov.w	r1, #4294967295
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	fa01 f303 	lsl.w	r3, r1, r3
 8004b72:	43d9      	mvns	r1, r3
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b78:	4313      	orrs	r3, r2
         );
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	3724      	adds	r7, #36	; 0x24
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b84:	4770      	bx	lr
	...

08004b88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b082      	sub	sp, #8
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	3b01      	subs	r3, #1
 8004b94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004b98:	d301      	bcc.n	8004b9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e00f      	b.n	8004bbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004b9e:	4a0a      	ldr	r2, [pc, #40]	; (8004bc8 <SysTick_Config+0x40>)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	3b01      	subs	r3, #1
 8004ba4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004ba6:	210f      	movs	r1, #15
 8004ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8004bac:	f7ff ff8e 	bl	8004acc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004bb0:	4b05      	ldr	r3, [pc, #20]	; (8004bc8 <SysTick_Config+0x40>)
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004bb6:	4b04      	ldr	r3, [pc, #16]	; (8004bc8 <SysTick_Config+0x40>)
 8004bb8:	2207      	movs	r2, #7
 8004bba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004bbc:	2300      	movs	r3, #0
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	3708      	adds	r7, #8
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}
 8004bc6:	bf00      	nop
 8004bc8:	e000e010 	.word	0xe000e010

08004bcc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b082      	sub	sp, #8
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004bd4:	6878      	ldr	r0, [r7, #4]
 8004bd6:	f7ff ff29 	bl	8004a2c <__NVIC_SetPriorityGrouping>
}
 8004bda:	bf00      	nop
 8004bdc:	3708      	adds	r7, #8
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}

08004be2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004be2:	b580      	push	{r7, lr}
 8004be4:	b086      	sub	sp, #24
 8004be6:	af00      	add	r7, sp, #0
 8004be8:	4603      	mov	r3, r0
 8004bea:	60b9      	str	r1, [r7, #8]
 8004bec:	607a      	str	r2, [r7, #4]
 8004bee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004bf4:	f7ff ff3e 	bl	8004a74 <__NVIC_GetPriorityGrouping>
 8004bf8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004bfa:	687a      	ldr	r2, [r7, #4]
 8004bfc:	68b9      	ldr	r1, [r7, #8]
 8004bfe:	6978      	ldr	r0, [r7, #20]
 8004c00:	f7ff ff8e 	bl	8004b20 <NVIC_EncodePriority>
 8004c04:	4602      	mov	r2, r0
 8004c06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c0a:	4611      	mov	r1, r2
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	f7ff ff5d 	bl	8004acc <__NVIC_SetPriority>
}
 8004c12:	bf00      	nop
 8004c14:	3718      	adds	r7, #24
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}

08004c1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c1a:	b580      	push	{r7, lr}
 8004c1c:	b082      	sub	sp, #8
 8004c1e:	af00      	add	r7, sp, #0
 8004c20:	4603      	mov	r3, r0
 8004c22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004c24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c28:	4618      	mov	r0, r3
 8004c2a:	f7ff ff31 	bl	8004a90 <__NVIC_EnableIRQ>
}
 8004c2e:	bf00      	nop
 8004c30:	3708      	adds	r7, #8
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}

08004c36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004c36:	b580      	push	{r7, lr}
 8004c38:	b082      	sub	sp, #8
 8004c3a:	af00      	add	r7, sp, #0
 8004c3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f7ff ffa2 	bl	8004b88 <SysTick_Config>
 8004c44:	4603      	mov	r3, r0
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3708      	adds	r7, #8
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}
	...

08004c50 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b083      	sub	sp, #12
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2b04      	cmp	r3, #4
 8004c5c:	d106      	bne.n	8004c6c <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8004c5e:	4b09      	ldr	r3, [pc, #36]	; (8004c84 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a08      	ldr	r2, [pc, #32]	; (8004c84 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8004c64:	f043 0304 	orr.w	r3, r3, #4
 8004c68:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8004c6a:	e005      	b.n	8004c78 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8004c6c:	4b05      	ldr	r3, [pc, #20]	; (8004c84 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a04      	ldr	r2, [pc, #16]	; (8004c84 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8004c72:	f023 0304 	bic.w	r3, r3, #4
 8004c76:	6013      	str	r3, [r2, #0]
}
 8004c78:	bf00      	nop
 8004c7a:	370c      	adds	r7, #12
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c82:	4770      	bx	lr
 8004c84:	e000e010 	.word	0xe000e010

08004c88 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b082      	sub	sp, #8
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d101      	bne.n	8004c9a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	e011      	b.n	8004cbe <HAL_CRC_Init+0x36>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	795b      	ldrb	r3, [r3, #5]
 8004c9e:	b2db      	uxtb	r3, r3
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d105      	bne.n	8004cb0 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f004 f926 	bl	8008efc <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2202      	movs	r2, #2
 8004cb4:	715a      	strb	r2, [r3, #5]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2201      	movs	r2, #1
 8004cba:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004cbc:	2300      	movs	r3, #0
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3708      	adds	r7, #8
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}

08004cc6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004cc6:	b480      	push	{r7}
 8004cc8:	b083      	sub	sp, #12
 8004cca:	af00      	add	r7, sp, #0
 8004ccc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004cd4:	b2db      	uxtb	r3, r3
 8004cd6:	2b02      	cmp	r3, #2
 8004cd8:	d004      	beq.n	8004ce4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2280      	movs	r2, #128	; 0x80
 8004cde:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	e00c      	b.n	8004cfe <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2205      	movs	r2, #5
 8004ce8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f022 0201 	bic.w	r2, r2, #1
 8004cfa:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004cfc:	2300      	movs	r3, #0
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	370c      	adds	r7, #12
 8004d02:	46bd      	mov	sp, r7
 8004d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d08:	4770      	bx	lr
	...

08004d0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b089      	sub	sp, #36	; 0x24
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
 8004d14:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004d16:	2300      	movs	r3, #0
 8004d18:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004d22:	2300      	movs	r3, #0
 8004d24:	61fb      	str	r3, [r7, #28]
 8004d26:	e16b      	b.n	8005000 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004d28:	2201      	movs	r2, #1
 8004d2a:	69fb      	ldr	r3, [r7, #28]
 8004d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d30:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	697a      	ldr	r2, [r7, #20]
 8004d38:	4013      	ands	r3, r2
 8004d3a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004d3c:	693a      	ldr	r2, [r7, #16]
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	429a      	cmp	r2, r3
 8004d42:	f040 815a 	bne.w	8004ffa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	2b02      	cmp	r3, #2
 8004d4c:	d003      	beq.n	8004d56 <HAL_GPIO_Init+0x4a>
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	2b12      	cmp	r3, #18
 8004d54:	d123      	bne.n	8004d9e <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004d56:	69fb      	ldr	r3, [r7, #28]
 8004d58:	08da      	lsrs	r2, r3, #3
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	3208      	adds	r2, #8
 8004d5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004d64:	69fb      	ldr	r3, [r7, #28]
 8004d66:	f003 0307 	and.w	r3, r3, #7
 8004d6a:	009b      	lsls	r3, r3, #2
 8004d6c:	220f      	movs	r2, #15
 8004d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d72:	43db      	mvns	r3, r3
 8004d74:	69ba      	ldr	r2, [r7, #24]
 8004d76:	4013      	ands	r3, r2
 8004d78:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	691a      	ldr	r2, [r3, #16]
 8004d7e:	69fb      	ldr	r3, [r7, #28]
 8004d80:	f003 0307 	and.w	r3, r3, #7
 8004d84:	009b      	lsls	r3, r3, #2
 8004d86:	fa02 f303 	lsl.w	r3, r2, r3
 8004d8a:	69ba      	ldr	r2, [r7, #24]
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004d90:	69fb      	ldr	r3, [r7, #28]
 8004d92:	08da      	lsrs	r2, r3, #3
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	3208      	adds	r2, #8
 8004d98:	69b9      	ldr	r1, [r7, #24]
 8004d9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004da4:	69fb      	ldr	r3, [r7, #28]
 8004da6:	005b      	lsls	r3, r3, #1
 8004da8:	2203      	movs	r2, #3
 8004daa:	fa02 f303 	lsl.w	r3, r2, r3
 8004dae:	43db      	mvns	r3, r3
 8004db0:	69ba      	ldr	r2, [r7, #24]
 8004db2:	4013      	ands	r3, r2
 8004db4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	f003 0203 	and.w	r2, r3, #3
 8004dbe:	69fb      	ldr	r3, [r7, #28]
 8004dc0:	005b      	lsls	r3, r3, #1
 8004dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc6:	69ba      	ldr	r2, [r7, #24]
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	69ba      	ldr	r2, [r7, #24]
 8004dd0:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	2b01      	cmp	r3, #1
 8004dd8:	d00b      	beq.n	8004df2 <HAL_GPIO_Init+0xe6>
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	2b02      	cmp	r3, #2
 8004de0:	d007      	beq.n	8004df2 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004de6:	2b11      	cmp	r3, #17
 8004de8:	d003      	beq.n	8004df2 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	2b12      	cmp	r3, #18
 8004df0:	d130      	bne.n	8004e54 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004df8:	69fb      	ldr	r3, [r7, #28]
 8004dfa:	005b      	lsls	r3, r3, #1
 8004dfc:	2203      	movs	r2, #3
 8004dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8004e02:	43db      	mvns	r3, r3
 8004e04:	69ba      	ldr	r2, [r7, #24]
 8004e06:	4013      	ands	r3, r2
 8004e08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	68da      	ldr	r2, [r3, #12]
 8004e0e:	69fb      	ldr	r3, [r7, #28]
 8004e10:	005b      	lsls	r3, r3, #1
 8004e12:	fa02 f303 	lsl.w	r3, r2, r3
 8004e16:	69ba      	ldr	r2, [r7, #24]
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	69ba      	ldr	r2, [r7, #24]
 8004e20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004e28:	2201      	movs	r2, #1
 8004e2a:	69fb      	ldr	r3, [r7, #28]
 8004e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e30:	43db      	mvns	r3, r3
 8004e32:	69ba      	ldr	r2, [r7, #24]
 8004e34:	4013      	ands	r3, r2
 8004e36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	091b      	lsrs	r3, r3, #4
 8004e3e:	f003 0201 	and.w	r2, r3, #1
 8004e42:	69fb      	ldr	r3, [r7, #28]
 8004e44:	fa02 f303 	lsl.w	r3, r2, r3
 8004e48:	69ba      	ldr	r2, [r7, #24]
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	69ba      	ldr	r2, [r7, #24]
 8004e52:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	68db      	ldr	r3, [r3, #12]
 8004e58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004e5a:	69fb      	ldr	r3, [r7, #28]
 8004e5c:	005b      	lsls	r3, r3, #1
 8004e5e:	2203      	movs	r2, #3
 8004e60:	fa02 f303 	lsl.w	r3, r2, r3
 8004e64:	43db      	mvns	r3, r3
 8004e66:	69ba      	ldr	r2, [r7, #24]
 8004e68:	4013      	ands	r3, r2
 8004e6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	689a      	ldr	r2, [r3, #8]
 8004e70:	69fb      	ldr	r3, [r7, #28]
 8004e72:	005b      	lsls	r3, r3, #1
 8004e74:	fa02 f303 	lsl.w	r3, r2, r3
 8004e78:	69ba      	ldr	r2, [r7, #24]
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	69ba      	ldr	r2, [r7, #24]
 8004e82:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	f000 80b4 	beq.w	8004ffa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e92:	2300      	movs	r3, #0
 8004e94:	60fb      	str	r3, [r7, #12]
 8004e96:	4b5f      	ldr	r3, [pc, #380]	; (8005014 <HAL_GPIO_Init+0x308>)
 8004e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e9a:	4a5e      	ldr	r2, [pc, #376]	; (8005014 <HAL_GPIO_Init+0x308>)
 8004e9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004ea0:	6453      	str	r3, [r2, #68]	; 0x44
 8004ea2:	4b5c      	ldr	r3, [pc, #368]	; (8005014 <HAL_GPIO_Init+0x308>)
 8004ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ea6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004eaa:	60fb      	str	r3, [r7, #12]
 8004eac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004eae:	4a5a      	ldr	r2, [pc, #360]	; (8005018 <HAL_GPIO_Init+0x30c>)
 8004eb0:	69fb      	ldr	r3, [r7, #28]
 8004eb2:	089b      	lsrs	r3, r3, #2
 8004eb4:	3302      	adds	r3, #2
 8004eb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004eba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004ebc:	69fb      	ldr	r3, [r7, #28]
 8004ebe:	f003 0303 	and.w	r3, r3, #3
 8004ec2:	009b      	lsls	r3, r3, #2
 8004ec4:	220f      	movs	r2, #15
 8004ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8004eca:	43db      	mvns	r3, r3
 8004ecc:	69ba      	ldr	r2, [r7, #24]
 8004ece:	4013      	ands	r3, r2
 8004ed0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	4a51      	ldr	r2, [pc, #324]	; (800501c <HAL_GPIO_Init+0x310>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d02b      	beq.n	8004f32 <HAL_GPIO_Init+0x226>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	4a50      	ldr	r2, [pc, #320]	; (8005020 <HAL_GPIO_Init+0x314>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d025      	beq.n	8004f2e <HAL_GPIO_Init+0x222>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	4a4f      	ldr	r2, [pc, #316]	; (8005024 <HAL_GPIO_Init+0x318>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d01f      	beq.n	8004f2a <HAL_GPIO_Init+0x21e>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	4a4e      	ldr	r2, [pc, #312]	; (8005028 <HAL_GPIO_Init+0x31c>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d019      	beq.n	8004f26 <HAL_GPIO_Init+0x21a>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	4a4d      	ldr	r2, [pc, #308]	; (800502c <HAL_GPIO_Init+0x320>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d013      	beq.n	8004f22 <HAL_GPIO_Init+0x216>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	4a4c      	ldr	r2, [pc, #304]	; (8005030 <HAL_GPIO_Init+0x324>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d00d      	beq.n	8004f1e <HAL_GPIO_Init+0x212>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	4a4b      	ldr	r2, [pc, #300]	; (8005034 <HAL_GPIO_Init+0x328>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d007      	beq.n	8004f1a <HAL_GPIO_Init+0x20e>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	4a4a      	ldr	r2, [pc, #296]	; (8005038 <HAL_GPIO_Init+0x32c>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d101      	bne.n	8004f16 <HAL_GPIO_Init+0x20a>
 8004f12:	2307      	movs	r3, #7
 8004f14:	e00e      	b.n	8004f34 <HAL_GPIO_Init+0x228>
 8004f16:	2308      	movs	r3, #8
 8004f18:	e00c      	b.n	8004f34 <HAL_GPIO_Init+0x228>
 8004f1a:	2306      	movs	r3, #6
 8004f1c:	e00a      	b.n	8004f34 <HAL_GPIO_Init+0x228>
 8004f1e:	2305      	movs	r3, #5
 8004f20:	e008      	b.n	8004f34 <HAL_GPIO_Init+0x228>
 8004f22:	2304      	movs	r3, #4
 8004f24:	e006      	b.n	8004f34 <HAL_GPIO_Init+0x228>
 8004f26:	2303      	movs	r3, #3
 8004f28:	e004      	b.n	8004f34 <HAL_GPIO_Init+0x228>
 8004f2a:	2302      	movs	r3, #2
 8004f2c:	e002      	b.n	8004f34 <HAL_GPIO_Init+0x228>
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e000      	b.n	8004f34 <HAL_GPIO_Init+0x228>
 8004f32:	2300      	movs	r3, #0
 8004f34:	69fa      	ldr	r2, [r7, #28]
 8004f36:	f002 0203 	and.w	r2, r2, #3
 8004f3a:	0092      	lsls	r2, r2, #2
 8004f3c:	4093      	lsls	r3, r2
 8004f3e:	69ba      	ldr	r2, [r7, #24]
 8004f40:	4313      	orrs	r3, r2
 8004f42:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004f44:	4934      	ldr	r1, [pc, #208]	; (8005018 <HAL_GPIO_Init+0x30c>)
 8004f46:	69fb      	ldr	r3, [r7, #28]
 8004f48:	089b      	lsrs	r3, r3, #2
 8004f4a:	3302      	adds	r3, #2
 8004f4c:	69ba      	ldr	r2, [r7, #24]
 8004f4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004f52:	4b3a      	ldr	r3, [pc, #232]	; (800503c <HAL_GPIO_Init+0x330>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	43db      	mvns	r3, r3
 8004f5c:	69ba      	ldr	r2, [r7, #24]
 8004f5e:	4013      	ands	r3, r2
 8004f60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d003      	beq.n	8004f76 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004f6e:	69ba      	ldr	r2, [r7, #24]
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	4313      	orrs	r3, r2
 8004f74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004f76:	4a31      	ldr	r2, [pc, #196]	; (800503c <HAL_GPIO_Init+0x330>)
 8004f78:	69bb      	ldr	r3, [r7, #24]
 8004f7a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004f7c:	4b2f      	ldr	r3, [pc, #188]	; (800503c <HAL_GPIO_Init+0x330>)
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	43db      	mvns	r3, r3
 8004f86:	69ba      	ldr	r2, [r7, #24]
 8004f88:	4013      	ands	r3, r2
 8004f8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d003      	beq.n	8004fa0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004f98:	69ba      	ldr	r2, [r7, #24]
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004fa0:	4a26      	ldr	r2, [pc, #152]	; (800503c <HAL_GPIO_Init+0x330>)
 8004fa2:	69bb      	ldr	r3, [r7, #24]
 8004fa4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004fa6:	4b25      	ldr	r3, [pc, #148]	; (800503c <HAL_GPIO_Init+0x330>)
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	43db      	mvns	r3, r3
 8004fb0:	69ba      	ldr	r2, [r7, #24]
 8004fb2:	4013      	ands	r3, r2
 8004fb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d003      	beq.n	8004fca <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004fc2:	69ba      	ldr	r2, [r7, #24]
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004fca:	4a1c      	ldr	r2, [pc, #112]	; (800503c <HAL_GPIO_Init+0x330>)
 8004fcc:	69bb      	ldr	r3, [r7, #24]
 8004fce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004fd0:	4b1a      	ldr	r3, [pc, #104]	; (800503c <HAL_GPIO_Init+0x330>)
 8004fd2:	68db      	ldr	r3, [r3, #12]
 8004fd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	43db      	mvns	r3, r3
 8004fda:	69ba      	ldr	r2, [r7, #24]
 8004fdc:	4013      	ands	r3, r2
 8004fde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d003      	beq.n	8004ff4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004fec:	69ba      	ldr	r2, [r7, #24]
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004ff4:	4a11      	ldr	r2, [pc, #68]	; (800503c <HAL_GPIO_Init+0x330>)
 8004ff6:	69bb      	ldr	r3, [r7, #24]
 8004ff8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004ffa:	69fb      	ldr	r3, [r7, #28]
 8004ffc:	3301      	adds	r3, #1
 8004ffe:	61fb      	str	r3, [r7, #28]
 8005000:	69fb      	ldr	r3, [r7, #28]
 8005002:	2b0f      	cmp	r3, #15
 8005004:	f67f ae90 	bls.w	8004d28 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005008:	bf00      	nop
 800500a:	3724      	adds	r7, #36	; 0x24
 800500c:	46bd      	mov	sp, r7
 800500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005012:	4770      	bx	lr
 8005014:	40023800 	.word	0x40023800
 8005018:	40013800 	.word	0x40013800
 800501c:	40020000 	.word	0x40020000
 8005020:	40020400 	.word	0x40020400
 8005024:	40020800 	.word	0x40020800
 8005028:	40020c00 	.word	0x40020c00
 800502c:	40021000 	.word	0x40021000
 8005030:	40021400 	.word	0x40021400
 8005034:	40021800 	.word	0x40021800
 8005038:	40021c00 	.word	0x40021c00
 800503c:	40013c00 	.word	0x40013c00

08005040 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005040:	b480      	push	{r7}
 8005042:	b085      	sub	sp, #20
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
 8005048:	460b      	mov	r3, r1
 800504a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	691a      	ldr	r2, [r3, #16]
 8005050:	887b      	ldrh	r3, [r7, #2]
 8005052:	4013      	ands	r3, r2
 8005054:	2b00      	cmp	r3, #0
 8005056:	d002      	beq.n	800505e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005058:	2301      	movs	r3, #1
 800505a:	73fb      	strb	r3, [r7, #15]
 800505c:	e001      	b.n	8005062 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800505e:	2300      	movs	r3, #0
 8005060:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005062:	7bfb      	ldrb	r3, [r7, #15]
}
 8005064:	4618      	mov	r0, r3
 8005066:	3714      	adds	r7, #20
 8005068:	46bd      	mov	sp, r7
 800506a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506e:	4770      	bx	lr

08005070 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005070:	b480      	push	{r7}
 8005072:	b083      	sub	sp, #12
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
 8005078:	460b      	mov	r3, r1
 800507a:	807b      	strh	r3, [r7, #2]
 800507c:	4613      	mov	r3, r2
 800507e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005080:	787b      	ldrb	r3, [r7, #1]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d003      	beq.n	800508e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005086:	887a      	ldrh	r2, [r7, #2]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800508c:	e003      	b.n	8005096 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800508e:	887b      	ldrh	r3, [r7, #2]
 8005090:	041a      	lsls	r2, r3, #16
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	619a      	str	r2, [r3, #24]
}
 8005096:	bf00      	nop
 8005098:	370c      	adds	r7, #12
 800509a:	46bd      	mov	sp, r7
 800509c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a0:	4770      	bx	lr
	...

080050a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b086      	sub	sp, #24
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d101      	bne.n	80050b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80050b2:	2301      	movs	r3, #1
 80050b4:	e22d      	b.n	8005512 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f003 0301 	and.w	r3, r3, #1
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d075      	beq.n	80051ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80050c2:	4ba3      	ldr	r3, [pc, #652]	; (8005350 <HAL_RCC_OscConfig+0x2ac>)
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	f003 030c 	and.w	r3, r3, #12
 80050ca:	2b04      	cmp	r3, #4
 80050cc:	d00c      	beq.n	80050e8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80050ce:	4ba0      	ldr	r3, [pc, #640]	; (8005350 <HAL_RCC_OscConfig+0x2ac>)
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80050d6:	2b08      	cmp	r3, #8
 80050d8:	d112      	bne.n	8005100 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80050da:	4b9d      	ldr	r3, [pc, #628]	; (8005350 <HAL_RCC_OscConfig+0x2ac>)
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80050e6:	d10b      	bne.n	8005100 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050e8:	4b99      	ldr	r3, [pc, #612]	; (8005350 <HAL_RCC_OscConfig+0x2ac>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d05b      	beq.n	80051ac <HAL_RCC_OscConfig+0x108>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d157      	bne.n	80051ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80050fc:	2301      	movs	r3, #1
 80050fe:	e208      	b.n	8005512 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005108:	d106      	bne.n	8005118 <HAL_RCC_OscConfig+0x74>
 800510a:	4b91      	ldr	r3, [pc, #580]	; (8005350 <HAL_RCC_OscConfig+0x2ac>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a90      	ldr	r2, [pc, #576]	; (8005350 <HAL_RCC_OscConfig+0x2ac>)
 8005110:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005114:	6013      	str	r3, [r2, #0]
 8005116:	e01d      	b.n	8005154 <HAL_RCC_OscConfig+0xb0>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005120:	d10c      	bne.n	800513c <HAL_RCC_OscConfig+0x98>
 8005122:	4b8b      	ldr	r3, [pc, #556]	; (8005350 <HAL_RCC_OscConfig+0x2ac>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a8a      	ldr	r2, [pc, #552]	; (8005350 <HAL_RCC_OscConfig+0x2ac>)
 8005128:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800512c:	6013      	str	r3, [r2, #0]
 800512e:	4b88      	ldr	r3, [pc, #544]	; (8005350 <HAL_RCC_OscConfig+0x2ac>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a87      	ldr	r2, [pc, #540]	; (8005350 <HAL_RCC_OscConfig+0x2ac>)
 8005134:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005138:	6013      	str	r3, [r2, #0]
 800513a:	e00b      	b.n	8005154 <HAL_RCC_OscConfig+0xb0>
 800513c:	4b84      	ldr	r3, [pc, #528]	; (8005350 <HAL_RCC_OscConfig+0x2ac>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a83      	ldr	r2, [pc, #524]	; (8005350 <HAL_RCC_OscConfig+0x2ac>)
 8005142:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005146:	6013      	str	r3, [r2, #0]
 8005148:	4b81      	ldr	r3, [pc, #516]	; (8005350 <HAL_RCC_OscConfig+0x2ac>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a80      	ldr	r2, [pc, #512]	; (8005350 <HAL_RCC_OscConfig+0x2ac>)
 800514e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005152:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d013      	beq.n	8005184 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800515c:	f7ff fc38 	bl	80049d0 <HAL_GetTick>
 8005160:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005162:	e008      	b.n	8005176 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005164:	f7ff fc34 	bl	80049d0 <HAL_GetTick>
 8005168:	4602      	mov	r2, r0
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	1ad3      	subs	r3, r2, r3
 800516e:	2b64      	cmp	r3, #100	; 0x64
 8005170:	d901      	bls.n	8005176 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005172:	2303      	movs	r3, #3
 8005174:	e1cd      	b.n	8005512 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005176:	4b76      	ldr	r3, [pc, #472]	; (8005350 <HAL_RCC_OscConfig+0x2ac>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800517e:	2b00      	cmp	r3, #0
 8005180:	d0f0      	beq.n	8005164 <HAL_RCC_OscConfig+0xc0>
 8005182:	e014      	b.n	80051ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005184:	f7ff fc24 	bl	80049d0 <HAL_GetTick>
 8005188:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800518a:	e008      	b.n	800519e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800518c:	f7ff fc20 	bl	80049d0 <HAL_GetTick>
 8005190:	4602      	mov	r2, r0
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	1ad3      	subs	r3, r2, r3
 8005196:	2b64      	cmp	r3, #100	; 0x64
 8005198:	d901      	bls.n	800519e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800519a:	2303      	movs	r3, #3
 800519c:	e1b9      	b.n	8005512 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800519e:	4b6c      	ldr	r3, [pc, #432]	; (8005350 <HAL_RCC_OscConfig+0x2ac>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d1f0      	bne.n	800518c <HAL_RCC_OscConfig+0xe8>
 80051aa:	e000      	b.n	80051ae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f003 0302 	and.w	r3, r3, #2
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d063      	beq.n	8005282 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80051ba:	4b65      	ldr	r3, [pc, #404]	; (8005350 <HAL_RCC_OscConfig+0x2ac>)
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	f003 030c 	and.w	r3, r3, #12
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d00b      	beq.n	80051de <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80051c6:	4b62      	ldr	r3, [pc, #392]	; (8005350 <HAL_RCC_OscConfig+0x2ac>)
 80051c8:	689b      	ldr	r3, [r3, #8]
 80051ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80051ce:	2b08      	cmp	r3, #8
 80051d0:	d11c      	bne.n	800520c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80051d2:	4b5f      	ldr	r3, [pc, #380]	; (8005350 <HAL_RCC_OscConfig+0x2ac>)
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d116      	bne.n	800520c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051de:	4b5c      	ldr	r3, [pc, #368]	; (8005350 <HAL_RCC_OscConfig+0x2ac>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f003 0302 	and.w	r3, r3, #2
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d005      	beq.n	80051f6 <HAL_RCC_OscConfig+0x152>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	68db      	ldr	r3, [r3, #12]
 80051ee:	2b01      	cmp	r3, #1
 80051f0:	d001      	beq.n	80051f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80051f2:	2301      	movs	r3, #1
 80051f4:	e18d      	b.n	8005512 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051f6:	4b56      	ldr	r3, [pc, #344]	; (8005350 <HAL_RCC_OscConfig+0x2ac>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	691b      	ldr	r3, [r3, #16]
 8005202:	00db      	lsls	r3, r3, #3
 8005204:	4952      	ldr	r1, [pc, #328]	; (8005350 <HAL_RCC_OscConfig+0x2ac>)
 8005206:	4313      	orrs	r3, r2
 8005208:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800520a:	e03a      	b.n	8005282 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	68db      	ldr	r3, [r3, #12]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d020      	beq.n	8005256 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005214:	4b4f      	ldr	r3, [pc, #316]	; (8005354 <HAL_RCC_OscConfig+0x2b0>)
 8005216:	2201      	movs	r2, #1
 8005218:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800521a:	f7ff fbd9 	bl	80049d0 <HAL_GetTick>
 800521e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005220:	e008      	b.n	8005234 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005222:	f7ff fbd5 	bl	80049d0 <HAL_GetTick>
 8005226:	4602      	mov	r2, r0
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	1ad3      	subs	r3, r2, r3
 800522c:	2b02      	cmp	r3, #2
 800522e:	d901      	bls.n	8005234 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005230:	2303      	movs	r3, #3
 8005232:	e16e      	b.n	8005512 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005234:	4b46      	ldr	r3, [pc, #280]	; (8005350 <HAL_RCC_OscConfig+0x2ac>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f003 0302 	and.w	r3, r3, #2
 800523c:	2b00      	cmp	r3, #0
 800523e:	d0f0      	beq.n	8005222 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005240:	4b43      	ldr	r3, [pc, #268]	; (8005350 <HAL_RCC_OscConfig+0x2ac>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	691b      	ldr	r3, [r3, #16]
 800524c:	00db      	lsls	r3, r3, #3
 800524e:	4940      	ldr	r1, [pc, #256]	; (8005350 <HAL_RCC_OscConfig+0x2ac>)
 8005250:	4313      	orrs	r3, r2
 8005252:	600b      	str	r3, [r1, #0]
 8005254:	e015      	b.n	8005282 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005256:	4b3f      	ldr	r3, [pc, #252]	; (8005354 <HAL_RCC_OscConfig+0x2b0>)
 8005258:	2200      	movs	r2, #0
 800525a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800525c:	f7ff fbb8 	bl	80049d0 <HAL_GetTick>
 8005260:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005262:	e008      	b.n	8005276 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005264:	f7ff fbb4 	bl	80049d0 <HAL_GetTick>
 8005268:	4602      	mov	r2, r0
 800526a:	693b      	ldr	r3, [r7, #16]
 800526c:	1ad3      	subs	r3, r2, r3
 800526e:	2b02      	cmp	r3, #2
 8005270:	d901      	bls.n	8005276 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005272:	2303      	movs	r3, #3
 8005274:	e14d      	b.n	8005512 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005276:	4b36      	ldr	r3, [pc, #216]	; (8005350 <HAL_RCC_OscConfig+0x2ac>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f003 0302 	and.w	r3, r3, #2
 800527e:	2b00      	cmp	r3, #0
 8005280:	d1f0      	bne.n	8005264 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f003 0308 	and.w	r3, r3, #8
 800528a:	2b00      	cmp	r3, #0
 800528c:	d030      	beq.n	80052f0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	695b      	ldr	r3, [r3, #20]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d016      	beq.n	80052c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005296:	4b30      	ldr	r3, [pc, #192]	; (8005358 <HAL_RCC_OscConfig+0x2b4>)
 8005298:	2201      	movs	r2, #1
 800529a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800529c:	f7ff fb98 	bl	80049d0 <HAL_GetTick>
 80052a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052a2:	e008      	b.n	80052b6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80052a4:	f7ff fb94 	bl	80049d0 <HAL_GetTick>
 80052a8:	4602      	mov	r2, r0
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	1ad3      	subs	r3, r2, r3
 80052ae:	2b02      	cmp	r3, #2
 80052b0:	d901      	bls.n	80052b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80052b2:	2303      	movs	r3, #3
 80052b4:	e12d      	b.n	8005512 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052b6:	4b26      	ldr	r3, [pc, #152]	; (8005350 <HAL_RCC_OscConfig+0x2ac>)
 80052b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052ba:	f003 0302 	and.w	r3, r3, #2
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d0f0      	beq.n	80052a4 <HAL_RCC_OscConfig+0x200>
 80052c2:	e015      	b.n	80052f0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80052c4:	4b24      	ldr	r3, [pc, #144]	; (8005358 <HAL_RCC_OscConfig+0x2b4>)
 80052c6:	2200      	movs	r2, #0
 80052c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052ca:	f7ff fb81 	bl	80049d0 <HAL_GetTick>
 80052ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052d0:	e008      	b.n	80052e4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80052d2:	f7ff fb7d 	bl	80049d0 <HAL_GetTick>
 80052d6:	4602      	mov	r2, r0
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	1ad3      	subs	r3, r2, r3
 80052dc:	2b02      	cmp	r3, #2
 80052de:	d901      	bls.n	80052e4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80052e0:	2303      	movs	r3, #3
 80052e2:	e116      	b.n	8005512 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052e4:	4b1a      	ldr	r3, [pc, #104]	; (8005350 <HAL_RCC_OscConfig+0x2ac>)
 80052e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052e8:	f003 0302 	and.w	r3, r3, #2
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d1f0      	bne.n	80052d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f003 0304 	and.w	r3, r3, #4
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	f000 80a0 	beq.w	800543e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80052fe:	2300      	movs	r3, #0
 8005300:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005302:	4b13      	ldr	r3, [pc, #76]	; (8005350 <HAL_RCC_OscConfig+0x2ac>)
 8005304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005306:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800530a:	2b00      	cmp	r3, #0
 800530c:	d10f      	bne.n	800532e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800530e:	2300      	movs	r3, #0
 8005310:	60fb      	str	r3, [r7, #12]
 8005312:	4b0f      	ldr	r3, [pc, #60]	; (8005350 <HAL_RCC_OscConfig+0x2ac>)
 8005314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005316:	4a0e      	ldr	r2, [pc, #56]	; (8005350 <HAL_RCC_OscConfig+0x2ac>)
 8005318:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800531c:	6413      	str	r3, [r2, #64]	; 0x40
 800531e:	4b0c      	ldr	r3, [pc, #48]	; (8005350 <HAL_RCC_OscConfig+0x2ac>)
 8005320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005322:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005326:	60fb      	str	r3, [r7, #12]
 8005328:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800532a:	2301      	movs	r3, #1
 800532c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800532e:	4b0b      	ldr	r3, [pc, #44]	; (800535c <HAL_RCC_OscConfig+0x2b8>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005336:	2b00      	cmp	r3, #0
 8005338:	d121      	bne.n	800537e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800533a:	4b08      	ldr	r3, [pc, #32]	; (800535c <HAL_RCC_OscConfig+0x2b8>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a07      	ldr	r2, [pc, #28]	; (800535c <HAL_RCC_OscConfig+0x2b8>)
 8005340:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005344:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005346:	f7ff fb43 	bl	80049d0 <HAL_GetTick>
 800534a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800534c:	e011      	b.n	8005372 <HAL_RCC_OscConfig+0x2ce>
 800534e:	bf00      	nop
 8005350:	40023800 	.word	0x40023800
 8005354:	42470000 	.word	0x42470000
 8005358:	42470e80 	.word	0x42470e80
 800535c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005360:	f7ff fb36 	bl	80049d0 <HAL_GetTick>
 8005364:	4602      	mov	r2, r0
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	1ad3      	subs	r3, r2, r3
 800536a:	2b02      	cmp	r3, #2
 800536c:	d901      	bls.n	8005372 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800536e:	2303      	movs	r3, #3
 8005370:	e0cf      	b.n	8005512 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005372:	4b6a      	ldr	r3, [pc, #424]	; (800551c <HAL_RCC_OscConfig+0x478>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800537a:	2b00      	cmp	r3, #0
 800537c:	d0f0      	beq.n	8005360 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	689b      	ldr	r3, [r3, #8]
 8005382:	2b01      	cmp	r3, #1
 8005384:	d106      	bne.n	8005394 <HAL_RCC_OscConfig+0x2f0>
 8005386:	4b66      	ldr	r3, [pc, #408]	; (8005520 <HAL_RCC_OscConfig+0x47c>)
 8005388:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800538a:	4a65      	ldr	r2, [pc, #404]	; (8005520 <HAL_RCC_OscConfig+0x47c>)
 800538c:	f043 0301 	orr.w	r3, r3, #1
 8005390:	6713      	str	r3, [r2, #112]	; 0x70
 8005392:	e01c      	b.n	80053ce <HAL_RCC_OscConfig+0x32a>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	689b      	ldr	r3, [r3, #8]
 8005398:	2b05      	cmp	r3, #5
 800539a:	d10c      	bne.n	80053b6 <HAL_RCC_OscConfig+0x312>
 800539c:	4b60      	ldr	r3, [pc, #384]	; (8005520 <HAL_RCC_OscConfig+0x47c>)
 800539e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053a0:	4a5f      	ldr	r2, [pc, #380]	; (8005520 <HAL_RCC_OscConfig+0x47c>)
 80053a2:	f043 0304 	orr.w	r3, r3, #4
 80053a6:	6713      	str	r3, [r2, #112]	; 0x70
 80053a8:	4b5d      	ldr	r3, [pc, #372]	; (8005520 <HAL_RCC_OscConfig+0x47c>)
 80053aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053ac:	4a5c      	ldr	r2, [pc, #368]	; (8005520 <HAL_RCC_OscConfig+0x47c>)
 80053ae:	f043 0301 	orr.w	r3, r3, #1
 80053b2:	6713      	str	r3, [r2, #112]	; 0x70
 80053b4:	e00b      	b.n	80053ce <HAL_RCC_OscConfig+0x32a>
 80053b6:	4b5a      	ldr	r3, [pc, #360]	; (8005520 <HAL_RCC_OscConfig+0x47c>)
 80053b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053ba:	4a59      	ldr	r2, [pc, #356]	; (8005520 <HAL_RCC_OscConfig+0x47c>)
 80053bc:	f023 0301 	bic.w	r3, r3, #1
 80053c0:	6713      	str	r3, [r2, #112]	; 0x70
 80053c2:	4b57      	ldr	r3, [pc, #348]	; (8005520 <HAL_RCC_OscConfig+0x47c>)
 80053c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053c6:	4a56      	ldr	r2, [pc, #344]	; (8005520 <HAL_RCC_OscConfig+0x47c>)
 80053c8:	f023 0304 	bic.w	r3, r3, #4
 80053cc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	689b      	ldr	r3, [r3, #8]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d015      	beq.n	8005402 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053d6:	f7ff fafb 	bl	80049d0 <HAL_GetTick>
 80053da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053dc:	e00a      	b.n	80053f4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80053de:	f7ff faf7 	bl	80049d0 <HAL_GetTick>
 80053e2:	4602      	mov	r2, r0
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	1ad3      	subs	r3, r2, r3
 80053e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d901      	bls.n	80053f4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80053f0:	2303      	movs	r3, #3
 80053f2:	e08e      	b.n	8005512 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053f4:	4b4a      	ldr	r3, [pc, #296]	; (8005520 <HAL_RCC_OscConfig+0x47c>)
 80053f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053f8:	f003 0302 	and.w	r3, r3, #2
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d0ee      	beq.n	80053de <HAL_RCC_OscConfig+0x33a>
 8005400:	e014      	b.n	800542c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005402:	f7ff fae5 	bl	80049d0 <HAL_GetTick>
 8005406:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005408:	e00a      	b.n	8005420 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800540a:	f7ff fae1 	bl	80049d0 <HAL_GetTick>
 800540e:	4602      	mov	r2, r0
 8005410:	693b      	ldr	r3, [r7, #16]
 8005412:	1ad3      	subs	r3, r2, r3
 8005414:	f241 3288 	movw	r2, #5000	; 0x1388
 8005418:	4293      	cmp	r3, r2
 800541a:	d901      	bls.n	8005420 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800541c:	2303      	movs	r3, #3
 800541e:	e078      	b.n	8005512 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005420:	4b3f      	ldr	r3, [pc, #252]	; (8005520 <HAL_RCC_OscConfig+0x47c>)
 8005422:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005424:	f003 0302 	and.w	r3, r3, #2
 8005428:	2b00      	cmp	r3, #0
 800542a:	d1ee      	bne.n	800540a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800542c:	7dfb      	ldrb	r3, [r7, #23]
 800542e:	2b01      	cmp	r3, #1
 8005430:	d105      	bne.n	800543e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005432:	4b3b      	ldr	r3, [pc, #236]	; (8005520 <HAL_RCC_OscConfig+0x47c>)
 8005434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005436:	4a3a      	ldr	r2, [pc, #232]	; (8005520 <HAL_RCC_OscConfig+0x47c>)
 8005438:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800543c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	699b      	ldr	r3, [r3, #24]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d064      	beq.n	8005510 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005446:	4b36      	ldr	r3, [pc, #216]	; (8005520 <HAL_RCC_OscConfig+0x47c>)
 8005448:	689b      	ldr	r3, [r3, #8]
 800544a:	f003 030c 	and.w	r3, r3, #12
 800544e:	2b08      	cmp	r3, #8
 8005450:	d05c      	beq.n	800550c <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	699b      	ldr	r3, [r3, #24]
 8005456:	2b02      	cmp	r3, #2
 8005458:	d141      	bne.n	80054de <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800545a:	4b32      	ldr	r3, [pc, #200]	; (8005524 <HAL_RCC_OscConfig+0x480>)
 800545c:	2200      	movs	r2, #0
 800545e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005460:	f7ff fab6 	bl	80049d0 <HAL_GetTick>
 8005464:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005466:	e008      	b.n	800547a <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005468:	f7ff fab2 	bl	80049d0 <HAL_GetTick>
 800546c:	4602      	mov	r2, r0
 800546e:	693b      	ldr	r3, [r7, #16]
 8005470:	1ad3      	subs	r3, r2, r3
 8005472:	2b02      	cmp	r3, #2
 8005474:	d901      	bls.n	800547a <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8005476:	2303      	movs	r3, #3
 8005478:	e04b      	b.n	8005512 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800547a:	4b29      	ldr	r3, [pc, #164]	; (8005520 <HAL_RCC_OscConfig+0x47c>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005482:	2b00      	cmp	r3, #0
 8005484:	d1f0      	bne.n	8005468 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	69da      	ldr	r2, [r3, #28]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6a1b      	ldr	r3, [r3, #32]
 800548e:	431a      	orrs	r2, r3
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005494:	019b      	lsls	r3, r3, #6
 8005496:	431a      	orrs	r2, r3
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800549c:	085b      	lsrs	r3, r3, #1
 800549e:	3b01      	subs	r3, #1
 80054a0:	041b      	lsls	r3, r3, #16
 80054a2:	431a      	orrs	r2, r3
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054a8:	061b      	lsls	r3, r3, #24
 80054aa:	491d      	ldr	r1, [pc, #116]	; (8005520 <HAL_RCC_OscConfig+0x47c>)
 80054ac:	4313      	orrs	r3, r2
 80054ae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80054b0:	4b1c      	ldr	r3, [pc, #112]	; (8005524 <HAL_RCC_OscConfig+0x480>)
 80054b2:	2201      	movs	r2, #1
 80054b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054b6:	f7ff fa8b 	bl	80049d0 <HAL_GetTick>
 80054ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054bc:	e008      	b.n	80054d0 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054be:	f7ff fa87 	bl	80049d0 <HAL_GetTick>
 80054c2:	4602      	mov	r2, r0
 80054c4:	693b      	ldr	r3, [r7, #16]
 80054c6:	1ad3      	subs	r3, r2, r3
 80054c8:	2b02      	cmp	r3, #2
 80054ca:	d901      	bls.n	80054d0 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80054cc:	2303      	movs	r3, #3
 80054ce:	e020      	b.n	8005512 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054d0:	4b13      	ldr	r3, [pc, #76]	; (8005520 <HAL_RCC_OscConfig+0x47c>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d0f0      	beq.n	80054be <HAL_RCC_OscConfig+0x41a>
 80054dc:	e018      	b.n	8005510 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054de:	4b11      	ldr	r3, [pc, #68]	; (8005524 <HAL_RCC_OscConfig+0x480>)
 80054e0:	2200      	movs	r2, #0
 80054e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054e4:	f7ff fa74 	bl	80049d0 <HAL_GetTick>
 80054e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054ea:	e008      	b.n	80054fe <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054ec:	f7ff fa70 	bl	80049d0 <HAL_GetTick>
 80054f0:	4602      	mov	r2, r0
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	1ad3      	subs	r3, r2, r3
 80054f6:	2b02      	cmp	r3, #2
 80054f8:	d901      	bls.n	80054fe <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 80054fa:	2303      	movs	r3, #3
 80054fc:	e009      	b.n	8005512 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054fe:	4b08      	ldr	r3, [pc, #32]	; (8005520 <HAL_RCC_OscConfig+0x47c>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005506:	2b00      	cmp	r3, #0
 8005508:	d1f0      	bne.n	80054ec <HAL_RCC_OscConfig+0x448>
 800550a:	e001      	b.n	8005510 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800550c:	2301      	movs	r3, #1
 800550e:	e000      	b.n	8005512 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8005510:	2300      	movs	r3, #0
}
 8005512:	4618      	mov	r0, r3
 8005514:	3718      	adds	r7, #24
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}
 800551a:	bf00      	nop
 800551c:	40007000 	.word	0x40007000
 8005520:	40023800 	.word	0x40023800
 8005524:	42470060 	.word	0x42470060

08005528 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b084      	sub	sp, #16
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
 8005530:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d101      	bne.n	800553c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005538:	2301      	movs	r3, #1
 800553a:	e0ca      	b.n	80056d2 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800553c:	4b67      	ldr	r3, [pc, #412]	; (80056dc <HAL_RCC_ClockConfig+0x1b4>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f003 030f 	and.w	r3, r3, #15
 8005544:	683a      	ldr	r2, [r7, #0]
 8005546:	429a      	cmp	r2, r3
 8005548:	d90c      	bls.n	8005564 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800554a:	4b64      	ldr	r3, [pc, #400]	; (80056dc <HAL_RCC_ClockConfig+0x1b4>)
 800554c:	683a      	ldr	r2, [r7, #0]
 800554e:	b2d2      	uxtb	r2, r2
 8005550:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005552:	4b62      	ldr	r3, [pc, #392]	; (80056dc <HAL_RCC_ClockConfig+0x1b4>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f003 030f 	and.w	r3, r3, #15
 800555a:	683a      	ldr	r2, [r7, #0]
 800555c:	429a      	cmp	r2, r3
 800555e:	d001      	beq.n	8005564 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005560:	2301      	movs	r3, #1
 8005562:	e0b6      	b.n	80056d2 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f003 0302 	and.w	r3, r3, #2
 800556c:	2b00      	cmp	r3, #0
 800556e:	d020      	beq.n	80055b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f003 0304 	and.w	r3, r3, #4
 8005578:	2b00      	cmp	r3, #0
 800557a:	d005      	beq.n	8005588 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800557c:	4b58      	ldr	r3, [pc, #352]	; (80056e0 <HAL_RCC_ClockConfig+0x1b8>)
 800557e:	689b      	ldr	r3, [r3, #8]
 8005580:	4a57      	ldr	r2, [pc, #348]	; (80056e0 <HAL_RCC_ClockConfig+0x1b8>)
 8005582:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005586:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f003 0308 	and.w	r3, r3, #8
 8005590:	2b00      	cmp	r3, #0
 8005592:	d005      	beq.n	80055a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005594:	4b52      	ldr	r3, [pc, #328]	; (80056e0 <HAL_RCC_ClockConfig+0x1b8>)
 8005596:	689b      	ldr	r3, [r3, #8]
 8005598:	4a51      	ldr	r2, [pc, #324]	; (80056e0 <HAL_RCC_ClockConfig+0x1b8>)
 800559a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800559e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80055a0:	4b4f      	ldr	r3, [pc, #316]	; (80056e0 <HAL_RCC_ClockConfig+0x1b8>)
 80055a2:	689b      	ldr	r3, [r3, #8]
 80055a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	689b      	ldr	r3, [r3, #8]
 80055ac:	494c      	ldr	r1, [pc, #304]	; (80056e0 <HAL_RCC_ClockConfig+0x1b8>)
 80055ae:	4313      	orrs	r3, r2
 80055b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f003 0301 	and.w	r3, r3, #1
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d044      	beq.n	8005648 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	685b      	ldr	r3, [r3, #4]
 80055c2:	2b01      	cmp	r3, #1
 80055c4:	d107      	bne.n	80055d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055c6:	4b46      	ldr	r3, [pc, #280]	; (80056e0 <HAL_RCC_ClockConfig+0x1b8>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d119      	bne.n	8005606 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055d2:	2301      	movs	r3, #1
 80055d4:	e07d      	b.n	80056d2 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	2b02      	cmp	r3, #2
 80055dc:	d003      	beq.n	80055e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80055e2:	2b03      	cmp	r3, #3
 80055e4:	d107      	bne.n	80055f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055e6:	4b3e      	ldr	r3, [pc, #248]	; (80056e0 <HAL_RCC_ClockConfig+0x1b8>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d109      	bne.n	8005606 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055f2:	2301      	movs	r3, #1
 80055f4:	e06d      	b.n	80056d2 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055f6:	4b3a      	ldr	r3, [pc, #232]	; (80056e0 <HAL_RCC_ClockConfig+0x1b8>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f003 0302 	and.w	r3, r3, #2
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d101      	bne.n	8005606 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005602:	2301      	movs	r3, #1
 8005604:	e065      	b.n	80056d2 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005606:	4b36      	ldr	r3, [pc, #216]	; (80056e0 <HAL_RCC_ClockConfig+0x1b8>)
 8005608:	689b      	ldr	r3, [r3, #8]
 800560a:	f023 0203 	bic.w	r2, r3, #3
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	4933      	ldr	r1, [pc, #204]	; (80056e0 <HAL_RCC_ClockConfig+0x1b8>)
 8005614:	4313      	orrs	r3, r2
 8005616:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005618:	f7ff f9da 	bl	80049d0 <HAL_GetTick>
 800561c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800561e:	e00a      	b.n	8005636 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005620:	f7ff f9d6 	bl	80049d0 <HAL_GetTick>
 8005624:	4602      	mov	r2, r0
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	1ad3      	subs	r3, r2, r3
 800562a:	f241 3288 	movw	r2, #5000	; 0x1388
 800562e:	4293      	cmp	r3, r2
 8005630:	d901      	bls.n	8005636 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005632:	2303      	movs	r3, #3
 8005634:	e04d      	b.n	80056d2 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005636:	4b2a      	ldr	r3, [pc, #168]	; (80056e0 <HAL_RCC_ClockConfig+0x1b8>)
 8005638:	689b      	ldr	r3, [r3, #8]
 800563a:	f003 020c 	and.w	r2, r3, #12
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	009b      	lsls	r3, r3, #2
 8005644:	429a      	cmp	r2, r3
 8005646:	d1eb      	bne.n	8005620 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005648:	4b24      	ldr	r3, [pc, #144]	; (80056dc <HAL_RCC_ClockConfig+0x1b4>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f003 030f 	and.w	r3, r3, #15
 8005650:	683a      	ldr	r2, [r7, #0]
 8005652:	429a      	cmp	r2, r3
 8005654:	d20c      	bcs.n	8005670 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005656:	4b21      	ldr	r3, [pc, #132]	; (80056dc <HAL_RCC_ClockConfig+0x1b4>)
 8005658:	683a      	ldr	r2, [r7, #0]
 800565a:	b2d2      	uxtb	r2, r2
 800565c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800565e:	4b1f      	ldr	r3, [pc, #124]	; (80056dc <HAL_RCC_ClockConfig+0x1b4>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f003 030f 	and.w	r3, r3, #15
 8005666:	683a      	ldr	r2, [r7, #0]
 8005668:	429a      	cmp	r2, r3
 800566a:	d001      	beq.n	8005670 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800566c:	2301      	movs	r3, #1
 800566e:	e030      	b.n	80056d2 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f003 0304 	and.w	r3, r3, #4
 8005678:	2b00      	cmp	r3, #0
 800567a:	d008      	beq.n	800568e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800567c:	4b18      	ldr	r3, [pc, #96]	; (80056e0 <HAL_RCC_ClockConfig+0x1b8>)
 800567e:	689b      	ldr	r3, [r3, #8]
 8005680:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	68db      	ldr	r3, [r3, #12]
 8005688:	4915      	ldr	r1, [pc, #84]	; (80056e0 <HAL_RCC_ClockConfig+0x1b8>)
 800568a:	4313      	orrs	r3, r2
 800568c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f003 0308 	and.w	r3, r3, #8
 8005696:	2b00      	cmp	r3, #0
 8005698:	d009      	beq.n	80056ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800569a:	4b11      	ldr	r3, [pc, #68]	; (80056e0 <HAL_RCC_ClockConfig+0x1b8>)
 800569c:	689b      	ldr	r3, [r3, #8]
 800569e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	691b      	ldr	r3, [r3, #16]
 80056a6:	00db      	lsls	r3, r3, #3
 80056a8:	490d      	ldr	r1, [pc, #52]	; (80056e0 <HAL_RCC_ClockConfig+0x1b8>)
 80056aa:	4313      	orrs	r3, r2
 80056ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80056ae:	f000 f81d 	bl	80056ec <HAL_RCC_GetSysClockFreq>
 80056b2:	4601      	mov	r1, r0
 80056b4:	4b0a      	ldr	r3, [pc, #40]	; (80056e0 <HAL_RCC_ClockConfig+0x1b8>)
 80056b6:	689b      	ldr	r3, [r3, #8]
 80056b8:	091b      	lsrs	r3, r3, #4
 80056ba:	f003 030f 	and.w	r3, r3, #15
 80056be:	4a09      	ldr	r2, [pc, #36]	; (80056e4 <HAL_RCC_ClockConfig+0x1bc>)
 80056c0:	5cd3      	ldrb	r3, [r2, r3]
 80056c2:	fa21 f303 	lsr.w	r3, r1, r3
 80056c6:	4a08      	ldr	r2, [pc, #32]	; (80056e8 <HAL_RCC_ClockConfig+0x1c0>)
 80056c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 80056ca:	2000      	movs	r0, #0
 80056cc:	f7ff f93c 	bl	8004948 <HAL_InitTick>

  return HAL_OK;
 80056d0:	2300      	movs	r3, #0
}
 80056d2:	4618      	mov	r0, r3
 80056d4:	3710      	adds	r7, #16
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd80      	pop	{r7, pc}
 80056da:	bf00      	nop
 80056dc:	40023c00 	.word	0x40023c00
 80056e0:	40023800 	.word	0x40023800
 80056e4:	08070568 	.word	0x08070568
 80056e8:	20000478 	.word	0x20000478

080056ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80056ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80056ee:	b085      	sub	sp, #20
 80056f0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80056f2:	2300      	movs	r3, #0
 80056f4:	607b      	str	r3, [r7, #4]
 80056f6:	2300      	movs	r3, #0
 80056f8:	60fb      	str	r3, [r7, #12]
 80056fa:	2300      	movs	r3, #0
 80056fc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80056fe:	2300      	movs	r3, #0
 8005700:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005702:	4b50      	ldr	r3, [pc, #320]	; (8005844 <HAL_RCC_GetSysClockFreq+0x158>)
 8005704:	689b      	ldr	r3, [r3, #8]
 8005706:	f003 030c 	and.w	r3, r3, #12
 800570a:	2b04      	cmp	r3, #4
 800570c:	d007      	beq.n	800571e <HAL_RCC_GetSysClockFreq+0x32>
 800570e:	2b08      	cmp	r3, #8
 8005710:	d008      	beq.n	8005724 <HAL_RCC_GetSysClockFreq+0x38>
 8005712:	2b00      	cmp	r3, #0
 8005714:	f040 808d 	bne.w	8005832 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005718:	4b4b      	ldr	r3, [pc, #300]	; (8005848 <HAL_RCC_GetSysClockFreq+0x15c>)
 800571a:	60bb      	str	r3, [r7, #8]
       break;
 800571c:	e08c      	b.n	8005838 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800571e:	4b4b      	ldr	r3, [pc, #300]	; (800584c <HAL_RCC_GetSysClockFreq+0x160>)
 8005720:	60bb      	str	r3, [r7, #8]
      break;
 8005722:	e089      	b.n	8005838 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005724:	4b47      	ldr	r3, [pc, #284]	; (8005844 <HAL_RCC_GetSysClockFreq+0x158>)
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800572c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800572e:	4b45      	ldr	r3, [pc, #276]	; (8005844 <HAL_RCC_GetSysClockFreq+0x158>)
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005736:	2b00      	cmp	r3, #0
 8005738:	d023      	beq.n	8005782 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800573a:	4b42      	ldr	r3, [pc, #264]	; (8005844 <HAL_RCC_GetSysClockFreq+0x158>)
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	099b      	lsrs	r3, r3, #6
 8005740:	f04f 0400 	mov.w	r4, #0
 8005744:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005748:	f04f 0200 	mov.w	r2, #0
 800574c:	ea03 0501 	and.w	r5, r3, r1
 8005750:	ea04 0602 	and.w	r6, r4, r2
 8005754:	4a3d      	ldr	r2, [pc, #244]	; (800584c <HAL_RCC_GetSysClockFreq+0x160>)
 8005756:	fb02 f106 	mul.w	r1, r2, r6
 800575a:	2200      	movs	r2, #0
 800575c:	fb02 f205 	mul.w	r2, r2, r5
 8005760:	440a      	add	r2, r1
 8005762:	493a      	ldr	r1, [pc, #232]	; (800584c <HAL_RCC_GetSysClockFreq+0x160>)
 8005764:	fba5 0101 	umull	r0, r1, r5, r1
 8005768:	1853      	adds	r3, r2, r1
 800576a:	4619      	mov	r1, r3
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	f04f 0400 	mov.w	r4, #0
 8005772:	461a      	mov	r2, r3
 8005774:	4623      	mov	r3, r4
 8005776:	f7fe feab 	bl	80044d0 <__aeabi_uldivmod>
 800577a:	4603      	mov	r3, r0
 800577c:	460c      	mov	r4, r1
 800577e:	60fb      	str	r3, [r7, #12]
 8005780:	e049      	b.n	8005816 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005782:	4b30      	ldr	r3, [pc, #192]	; (8005844 <HAL_RCC_GetSysClockFreq+0x158>)
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	099b      	lsrs	r3, r3, #6
 8005788:	f04f 0400 	mov.w	r4, #0
 800578c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005790:	f04f 0200 	mov.w	r2, #0
 8005794:	ea03 0501 	and.w	r5, r3, r1
 8005798:	ea04 0602 	and.w	r6, r4, r2
 800579c:	4629      	mov	r1, r5
 800579e:	4632      	mov	r2, r6
 80057a0:	f04f 0300 	mov.w	r3, #0
 80057a4:	f04f 0400 	mov.w	r4, #0
 80057a8:	0154      	lsls	r4, r2, #5
 80057aa:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80057ae:	014b      	lsls	r3, r1, #5
 80057b0:	4619      	mov	r1, r3
 80057b2:	4622      	mov	r2, r4
 80057b4:	1b49      	subs	r1, r1, r5
 80057b6:	eb62 0206 	sbc.w	r2, r2, r6
 80057ba:	f04f 0300 	mov.w	r3, #0
 80057be:	f04f 0400 	mov.w	r4, #0
 80057c2:	0194      	lsls	r4, r2, #6
 80057c4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80057c8:	018b      	lsls	r3, r1, #6
 80057ca:	1a5b      	subs	r3, r3, r1
 80057cc:	eb64 0402 	sbc.w	r4, r4, r2
 80057d0:	f04f 0100 	mov.w	r1, #0
 80057d4:	f04f 0200 	mov.w	r2, #0
 80057d8:	00e2      	lsls	r2, r4, #3
 80057da:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80057de:	00d9      	lsls	r1, r3, #3
 80057e0:	460b      	mov	r3, r1
 80057e2:	4614      	mov	r4, r2
 80057e4:	195b      	adds	r3, r3, r5
 80057e6:	eb44 0406 	adc.w	r4, r4, r6
 80057ea:	f04f 0100 	mov.w	r1, #0
 80057ee:	f04f 0200 	mov.w	r2, #0
 80057f2:	02a2      	lsls	r2, r4, #10
 80057f4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80057f8:	0299      	lsls	r1, r3, #10
 80057fa:	460b      	mov	r3, r1
 80057fc:	4614      	mov	r4, r2
 80057fe:	4618      	mov	r0, r3
 8005800:	4621      	mov	r1, r4
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	f04f 0400 	mov.w	r4, #0
 8005808:	461a      	mov	r2, r3
 800580a:	4623      	mov	r3, r4
 800580c:	f7fe fe60 	bl	80044d0 <__aeabi_uldivmod>
 8005810:	4603      	mov	r3, r0
 8005812:	460c      	mov	r4, r1
 8005814:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005816:	4b0b      	ldr	r3, [pc, #44]	; (8005844 <HAL_RCC_GetSysClockFreq+0x158>)
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	0c1b      	lsrs	r3, r3, #16
 800581c:	f003 0303 	and.w	r3, r3, #3
 8005820:	3301      	adds	r3, #1
 8005822:	005b      	lsls	r3, r3, #1
 8005824:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005826:	68fa      	ldr	r2, [r7, #12]
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	fbb2 f3f3 	udiv	r3, r2, r3
 800582e:	60bb      	str	r3, [r7, #8]
      break;
 8005830:	e002      	b.n	8005838 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005832:	4b05      	ldr	r3, [pc, #20]	; (8005848 <HAL_RCC_GetSysClockFreq+0x15c>)
 8005834:	60bb      	str	r3, [r7, #8]
      break;
 8005836:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005838:	68bb      	ldr	r3, [r7, #8]
}
 800583a:	4618      	mov	r0, r3
 800583c:	3714      	adds	r7, #20
 800583e:	46bd      	mov	sp, r7
 8005840:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005842:	bf00      	nop
 8005844:	40023800 	.word	0x40023800
 8005848:	00f42400 	.word	0x00f42400
 800584c:	017d7840 	.word	0x017d7840

08005850 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005850:	b480      	push	{r7}
 8005852:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005854:	4b03      	ldr	r3, [pc, #12]	; (8005864 <HAL_RCC_GetHCLKFreq+0x14>)
 8005856:	681b      	ldr	r3, [r3, #0]
}
 8005858:	4618      	mov	r0, r3
 800585a:	46bd      	mov	sp, r7
 800585c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005860:	4770      	bx	lr
 8005862:	bf00      	nop
 8005864:	20000478 	.word	0x20000478

08005868 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800586c:	f7ff fff0 	bl	8005850 <HAL_RCC_GetHCLKFreq>
 8005870:	4601      	mov	r1, r0
 8005872:	4b05      	ldr	r3, [pc, #20]	; (8005888 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005874:	689b      	ldr	r3, [r3, #8]
 8005876:	0a9b      	lsrs	r3, r3, #10
 8005878:	f003 0307 	and.w	r3, r3, #7
 800587c:	4a03      	ldr	r2, [pc, #12]	; (800588c <HAL_RCC_GetPCLK1Freq+0x24>)
 800587e:	5cd3      	ldrb	r3, [r2, r3]
 8005880:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005884:	4618      	mov	r0, r3
 8005886:	bd80      	pop	{r7, pc}
 8005888:	40023800 	.word	0x40023800
 800588c:	08070578 	.word	0x08070578

08005890 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005894:	f7ff ffdc 	bl	8005850 <HAL_RCC_GetHCLKFreq>
 8005898:	4601      	mov	r1, r0
 800589a:	4b05      	ldr	r3, [pc, #20]	; (80058b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800589c:	689b      	ldr	r3, [r3, #8]
 800589e:	0b5b      	lsrs	r3, r3, #13
 80058a0:	f003 0307 	and.w	r3, r3, #7
 80058a4:	4a03      	ldr	r2, [pc, #12]	; (80058b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80058a6:	5cd3      	ldrb	r3, [r2, r3]
 80058a8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80058ac:	4618      	mov	r0, r3
 80058ae:	bd80      	pop	{r7, pc}
 80058b0:	40023800 	.word	0x40023800
 80058b4:	08070578 	.word	0x08070578

080058b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b082      	sub	sp, #8
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d101      	bne.n	80058ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80058c6:	2301      	movs	r3, #1
 80058c8:	e056      	b.n	8005978 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2200      	movs	r2, #0
 80058ce:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80058d6:	b2db      	uxtb	r3, r3
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d106      	bne.n	80058ea <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2200      	movs	r2, #0
 80058e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80058e4:	6878      	ldr	r0, [r7, #4]
 80058e6:	f003 fb2b 	bl	8008f40 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2202      	movs	r2, #2
 80058ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	681a      	ldr	r2, [r3, #0]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005900:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	685a      	ldr	r2, [r3, #4]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	689b      	ldr	r3, [r3, #8]
 800590a:	431a      	orrs	r2, r3
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	68db      	ldr	r3, [r3, #12]
 8005910:	431a      	orrs	r2, r3
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	691b      	ldr	r3, [r3, #16]
 8005916:	431a      	orrs	r2, r3
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	695b      	ldr	r3, [r3, #20]
 800591c:	431a      	orrs	r2, r3
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	699b      	ldr	r3, [r3, #24]
 8005922:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005926:	431a      	orrs	r2, r3
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	69db      	ldr	r3, [r3, #28]
 800592c:	431a      	orrs	r2, r3
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6a1b      	ldr	r3, [r3, #32]
 8005932:	ea42 0103 	orr.w	r1, r2, r3
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	430a      	orrs	r2, r1
 8005940:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	699b      	ldr	r3, [r3, #24]
 8005946:	0c1b      	lsrs	r3, r3, #16
 8005948:	f003 0104 	and.w	r1, r3, #4
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	430a      	orrs	r2, r1
 8005956:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	69da      	ldr	r2, [r3, #28]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005966:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2200      	movs	r2, #0
 800596c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2201      	movs	r2, #1
 8005972:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005976:	2300      	movs	r3, #0
}
 8005978:	4618      	mov	r0, r3
 800597a:	3708      	adds	r7, #8
 800597c:	46bd      	mov	sp, r7
 800597e:	bd80      	pop	{r7, pc}

08005980 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b088      	sub	sp, #32
 8005984:	af00      	add	r7, sp, #0
 8005986:	60f8      	str	r0, [r7, #12]
 8005988:	60b9      	str	r1, [r7, #8]
 800598a:	603b      	str	r3, [r7, #0]
 800598c:	4613      	mov	r3, r2
 800598e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005990:	2300      	movs	r3, #0
 8005992:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800599a:	2b01      	cmp	r3, #1
 800599c:	d101      	bne.n	80059a2 <HAL_SPI_Transmit+0x22>
 800599e:	2302      	movs	r3, #2
 80059a0:	e11e      	b.n	8005be0 <HAL_SPI_Transmit+0x260>
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2201      	movs	r2, #1
 80059a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80059aa:	f7ff f811 	bl	80049d0 <HAL_GetTick>
 80059ae:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80059b0:	88fb      	ldrh	r3, [r7, #6]
 80059b2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80059ba:	b2db      	uxtb	r3, r3
 80059bc:	2b01      	cmp	r3, #1
 80059be:	d002      	beq.n	80059c6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80059c0:	2302      	movs	r3, #2
 80059c2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80059c4:	e103      	b.n	8005bce <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d002      	beq.n	80059d2 <HAL_SPI_Transmit+0x52>
 80059cc:	88fb      	ldrh	r3, [r7, #6]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d102      	bne.n	80059d8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80059d2:	2301      	movs	r3, #1
 80059d4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80059d6:	e0fa      	b.n	8005bce <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	2203      	movs	r2, #3
 80059dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	2200      	movs	r2, #0
 80059e4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	68ba      	ldr	r2, [r7, #8]
 80059ea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	88fa      	ldrh	r2, [r7, #6]
 80059f0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	88fa      	ldrh	r2, [r7, #6]
 80059f6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2200      	movs	r2, #0
 80059fc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	2200      	movs	r2, #0
 8005a02:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	2200      	movs	r2, #0
 8005a08:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	2200      	movs	r2, #0
 8005a14:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	689b      	ldr	r3, [r3, #8]
 8005a1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a1e:	d107      	bne.n	8005a30 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	681a      	ldr	r2, [r3, #0]
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005a2e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a3a:	2b40      	cmp	r3, #64	; 0x40
 8005a3c:	d007      	beq.n	8005a4e <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	681a      	ldr	r2, [r3, #0]
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a4c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	68db      	ldr	r3, [r3, #12]
 8005a52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a56:	d14b      	bne.n	8005af0 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d002      	beq.n	8005a66 <HAL_SPI_Transmit+0xe6>
 8005a60:	8afb      	ldrh	r3, [r7, #22]
 8005a62:	2b01      	cmp	r3, #1
 8005a64:	d13e      	bne.n	8005ae4 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a6a:	881a      	ldrh	r2, [r3, #0]
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a76:	1c9a      	adds	r2, r3, #2
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a80:	b29b      	uxth	r3, r3
 8005a82:	3b01      	subs	r3, #1
 8005a84:	b29a      	uxth	r2, r3
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005a8a:	e02b      	b.n	8005ae4 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	f003 0302 	and.w	r3, r3, #2
 8005a96:	2b02      	cmp	r3, #2
 8005a98:	d112      	bne.n	8005ac0 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a9e:	881a      	ldrh	r2, [r3, #0]
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aaa:	1c9a      	adds	r2, r3, #2
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ab4:	b29b      	uxth	r3, r3
 8005ab6:	3b01      	subs	r3, #1
 8005ab8:	b29a      	uxth	r2, r3
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	86da      	strh	r2, [r3, #54]	; 0x36
 8005abe:	e011      	b.n	8005ae4 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ac0:	f7fe ff86 	bl	80049d0 <HAL_GetTick>
 8005ac4:	4602      	mov	r2, r0
 8005ac6:	69bb      	ldr	r3, [r7, #24]
 8005ac8:	1ad3      	subs	r3, r2, r3
 8005aca:	683a      	ldr	r2, [r7, #0]
 8005acc:	429a      	cmp	r2, r3
 8005ace:	d803      	bhi.n	8005ad8 <HAL_SPI_Transmit+0x158>
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ad6:	d102      	bne.n	8005ade <HAL_SPI_Transmit+0x15e>
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d102      	bne.n	8005ae4 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8005ade:	2303      	movs	r3, #3
 8005ae0:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005ae2:	e074      	b.n	8005bce <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ae8:	b29b      	uxth	r3, r3
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d1ce      	bne.n	8005a8c <HAL_SPI_Transmit+0x10c>
 8005aee:	e04c      	b.n	8005b8a <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	685b      	ldr	r3, [r3, #4]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d002      	beq.n	8005afe <HAL_SPI_Transmit+0x17e>
 8005af8:	8afb      	ldrh	r3, [r7, #22]
 8005afa:	2b01      	cmp	r3, #1
 8005afc:	d140      	bne.n	8005b80 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	330c      	adds	r3, #12
 8005b08:	7812      	ldrb	r2, [r2, #0]
 8005b0a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b10:	1c5a      	adds	r2, r3, #1
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b1a:	b29b      	uxth	r3, r3
 8005b1c:	3b01      	subs	r3, #1
 8005b1e:	b29a      	uxth	r2, r3
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005b24:	e02c      	b.n	8005b80 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	689b      	ldr	r3, [r3, #8]
 8005b2c:	f003 0302 	and.w	r3, r3, #2
 8005b30:	2b02      	cmp	r3, #2
 8005b32:	d113      	bne.n	8005b5c <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	330c      	adds	r3, #12
 8005b3e:	7812      	ldrb	r2, [r2, #0]
 8005b40:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b46:	1c5a      	adds	r2, r3, #1
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b50:	b29b      	uxth	r3, r3
 8005b52:	3b01      	subs	r3, #1
 8005b54:	b29a      	uxth	r2, r3
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	86da      	strh	r2, [r3, #54]	; 0x36
 8005b5a:	e011      	b.n	8005b80 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b5c:	f7fe ff38 	bl	80049d0 <HAL_GetTick>
 8005b60:	4602      	mov	r2, r0
 8005b62:	69bb      	ldr	r3, [r7, #24]
 8005b64:	1ad3      	subs	r3, r2, r3
 8005b66:	683a      	ldr	r2, [r7, #0]
 8005b68:	429a      	cmp	r2, r3
 8005b6a:	d803      	bhi.n	8005b74 <HAL_SPI_Transmit+0x1f4>
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b72:	d102      	bne.n	8005b7a <HAL_SPI_Transmit+0x1fa>
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d102      	bne.n	8005b80 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8005b7a:	2303      	movs	r3, #3
 8005b7c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005b7e:	e026      	b.n	8005bce <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b84:	b29b      	uxth	r3, r3
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d1cd      	bne.n	8005b26 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005b8a:	69ba      	ldr	r2, [r7, #24]
 8005b8c:	6839      	ldr	r1, [r7, #0]
 8005b8e:	68f8      	ldr	r0, [r7, #12]
 8005b90:	f000 fba4 	bl	80062dc <SPI_EndRxTxTransaction>
 8005b94:	4603      	mov	r3, r0
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d002      	beq.n	8005ba0 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	2220      	movs	r2, #32
 8005b9e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	689b      	ldr	r3, [r3, #8]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d10a      	bne.n	8005bbe <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005ba8:	2300      	movs	r3, #0
 8005baa:	613b      	str	r3, [r7, #16]
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	68db      	ldr	r3, [r3, #12]
 8005bb2:	613b      	str	r3, [r7, #16]
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	689b      	ldr	r3, [r3, #8]
 8005bba:	613b      	str	r3, [r7, #16]
 8005bbc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d002      	beq.n	8005bcc <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	77fb      	strb	r3, [r7, #31]
 8005bca:	e000      	b.n	8005bce <HAL_SPI_Transmit+0x24e>
  }

error:
 8005bcc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2201      	movs	r2, #1
 8005bd2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005bde:	7ffb      	ldrb	r3, [r7, #31]
}
 8005be0:	4618      	mov	r0, r3
 8005be2:	3720      	adds	r7, #32
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd80      	pop	{r7, pc}

08005be8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b088      	sub	sp, #32
 8005bec:	af02      	add	r7, sp, #8
 8005bee:	60f8      	str	r0, [r7, #12]
 8005bf0:	60b9      	str	r1, [r7, #8]
 8005bf2:	603b      	str	r3, [r7, #0]
 8005bf4:	4613      	mov	r3, r2
 8005bf6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c04:	d112      	bne.n	8005c2c <HAL_SPI_Receive+0x44>
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	689b      	ldr	r3, [r3, #8]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d10e      	bne.n	8005c2c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2204      	movs	r2, #4
 8005c12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005c16:	88fa      	ldrh	r2, [r7, #6]
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	9300      	str	r3, [sp, #0]
 8005c1c:	4613      	mov	r3, r2
 8005c1e:	68ba      	ldr	r2, [r7, #8]
 8005c20:	68b9      	ldr	r1, [r7, #8]
 8005c22:	68f8      	ldr	r0, [r7, #12]
 8005c24:	f000 f8e9 	bl	8005dfa <HAL_SPI_TransmitReceive>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	e0e2      	b.n	8005df2 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005c32:	2b01      	cmp	r3, #1
 8005c34:	d101      	bne.n	8005c3a <HAL_SPI_Receive+0x52>
 8005c36:	2302      	movs	r3, #2
 8005c38:	e0db      	b.n	8005df2 <HAL_SPI_Receive+0x20a>
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	2201      	movs	r2, #1
 8005c3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005c42:	f7fe fec5 	bl	80049d0 <HAL_GetTick>
 8005c46:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005c4e:	b2db      	uxtb	r3, r3
 8005c50:	2b01      	cmp	r3, #1
 8005c52:	d002      	beq.n	8005c5a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005c54:	2302      	movs	r3, #2
 8005c56:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005c58:	e0c2      	b.n	8005de0 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d002      	beq.n	8005c66 <HAL_SPI_Receive+0x7e>
 8005c60:	88fb      	ldrh	r3, [r7, #6]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d102      	bne.n	8005c6c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005c66:	2301      	movs	r3, #1
 8005c68:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005c6a:	e0b9      	b.n	8005de0 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	2204      	movs	r2, #4
 8005c70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	2200      	movs	r2, #0
 8005c78:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	68ba      	ldr	r2, [r7, #8]
 8005c7e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	88fa      	ldrh	r2, [r7, #6]
 8005c84:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	88fa      	ldrh	r2, [r7, #6]
 8005c8a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	2200      	movs	r2, #0
 8005c96:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	689b      	ldr	r3, [r3, #8]
 8005cae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005cb2:	d107      	bne.n	8005cc4 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	681a      	ldr	r2, [r3, #0]
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005cc2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cce:	2b40      	cmp	r3, #64	; 0x40
 8005cd0:	d007      	beq.n	8005ce2 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	681a      	ldr	r2, [r3, #0]
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ce0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	68db      	ldr	r3, [r3, #12]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d162      	bne.n	8005db0 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005cea:	e02e      	b.n	8005d4a <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	689b      	ldr	r3, [r3, #8]
 8005cf2:	f003 0301 	and.w	r3, r3, #1
 8005cf6:	2b01      	cmp	r3, #1
 8005cf8:	d115      	bne.n	8005d26 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f103 020c 	add.w	r2, r3, #12
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d06:	7812      	ldrb	r2, [r2, #0]
 8005d08:	b2d2      	uxtb	r2, r2
 8005d0a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d10:	1c5a      	adds	r2, r3, #1
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d1a:	b29b      	uxth	r3, r3
 8005d1c:	3b01      	subs	r3, #1
 8005d1e:	b29a      	uxth	r2, r3
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005d24:	e011      	b.n	8005d4a <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d26:	f7fe fe53 	bl	80049d0 <HAL_GetTick>
 8005d2a:	4602      	mov	r2, r0
 8005d2c:	693b      	ldr	r3, [r7, #16]
 8005d2e:	1ad3      	subs	r3, r2, r3
 8005d30:	683a      	ldr	r2, [r7, #0]
 8005d32:	429a      	cmp	r2, r3
 8005d34:	d803      	bhi.n	8005d3e <HAL_SPI_Receive+0x156>
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d3c:	d102      	bne.n	8005d44 <HAL_SPI_Receive+0x15c>
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d102      	bne.n	8005d4a <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8005d44:	2303      	movs	r3, #3
 8005d46:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005d48:	e04a      	b.n	8005de0 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d4e:	b29b      	uxth	r3, r3
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d1cb      	bne.n	8005cec <HAL_SPI_Receive+0x104>
 8005d54:	e031      	b.n	8005dba <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	689b      	ldr	r3, [r3, #8]
 8005d5c:	f003 0301 	and.w	r3, r3, #1
 8005d60:	2b01      	cmp	r3, #1
 8005d62:	d113      	bne.n	8005d8c <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	68da      	ldr	r2, [r3, #12]
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d6e:	b292      	uxth	r2, r2
 8005d70:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d76:	1c9a      	adds	r2, r3, #2
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d80:	b29b      	uxth	r3, r3
 8005d82:	3b01      	subs	r3, #1
 8005d84:	b29a      	uxth	r2, r3
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005d8a:	e011      	b.n	8005db0 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d8c:	f7fe fe20 	bl	80049d0 <HAL_GetTick>
 8005d90:	4602      	mov	r2, r0
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	1ad3      	subs	r3, r2, r3
 8005d96:	683a      	ldr	r2, [r7, #0]
 8005d98:	429a      	cmp	r2, r3
 8005d9a:	d803      	bhi.n	8005da4 <HAL_SPI_Receive+0x1bc>
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005da2:	d102      	bne.n	8005daa <HAL_SPI_Receive+0x1c2>
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d102      	bne.n	8005db0 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8005daa:	2303      	movs	r3, #3
 8005dac:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005dae:	e017      	b.n	8005de0 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005db4:	b29b      	uxth	r3, r3
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d1cd      	bne.n	8005d56 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005dba:	693a      	ldr	r2, [r7, #16]
 8005dbc:	6839      	ldr	r1, [r7, #0]
 8005dbe:	68f8      	ldr	r0, [r7, #12]
 8005dc0:	f000 fa27 	bl	8006212 <SPI_EndRxTransaction>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d002      	beq.n	8005dd0 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	2220      	movs	r2, #32
 8005dce:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d002      	beq.n	8005dde <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8005dd8:	2301      	movs	r3, #1
 8005dda:	75fb      	strb	r3, [r7, #23]
 8005ddc:	e000      	b.n	8005de0 <HAL_SPI_Receive+0x1f8>
  }

error :
 8005dde:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	2201      	movs	r2, #1
 8005de4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	2200      	movs	r2, #0
 8005dec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005df0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005df2:	4618      	mov	r0, r3
 8005df4:	3718      	adds	r7, #24
 8005df6:	46bd      	mov	sp, r7
 8005df8:	bd80      	pop	{r7, pc}

08005dfa <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005dfa:	b580      	push	{r7, lr}
 8005dfc:	b08c      	sub	sp, #48	; 0x30
 8005dfe:	af00      	add	r7, sp, #0
 8005e00:	60f8      	str	r0, [r7, #12]
 8005e02:	60b9      	str	r1, [r7, #8]
 8005e04:	607a      	str	r2, [r7, #4]
 8005e06:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005e08:	2301      	movs	r3, #1
 8005e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005e18:	2b01      	cmp	r3, #1
 8005e1a:	d101      	bne.n	8005e20 <HAL_SPI_TransmitReceive+0x26>
 8005e1c:	2302      	movs	r3, #2
 8005e1e:	e18a      	b.n	8006136 <HAL_SPI_TransmitReceive+0x33c>
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	2201      	movs	r2, #1
 8005e24:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005e28:	f7fe fdd2 	bl	80049d0 <HAL_GetTick>
 8005e2c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005e34:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005e3e:	887b      	ldrh	r3, [r7, #2]
 8005e40:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005e42:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005e46:	2b01      	cmp	r3, #1
 8005e48:	d00f      	beq.n	8005e6a <HAL_SPI_TransmitReceive+0x70>
 8005e4a:	69fb      	ldr	r3, [r7, #28]
 8005e4c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e50:	d107      	bne.n	8005e62 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	689b      	ldr	r3, [r3, #8]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d103      	bne.n	8005e62 <HAL_SPI_TransmitReceive+0x68>
 8005e5a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005e5e:	2b04      	cmp	r3, #4
 8005e60:	d003      	beq.n	8005e6a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005e62:	2302      	movs	r3, #2
 8005e64:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005e68:	e15b      	b.n	8006122 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d005      	beq.n	8005e7c <HAL_SPI_TransmitReceive+0x82>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d002      	beq.n	8005e7c <HAL_SPI_TransmitReceive+0x82>
 8005e76:	887b      	ldrh	r3, [r7, #2]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d103      	bne.n	8005e84 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005e82:	e14e      	b.n	8006122 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005e8a:	b2db      	uxtb	r3, r3
 8005e8c:	2b04      	cmp	r3, #4
 8005e8e:	d003      	beq.n	8005e98 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	2205      	movs	r2, #5
 8005e94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	687a      	ldr	r2, [r7, #4]
 8005ea2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	887a      	ldrh	r2, [r7, #2]
 8005ea8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	887a      	ldrh	r2, [r7, #2]
 8005eae:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	68ba      	ldr	r2, [r7, #8]
 8005eb4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	887a      	ldrh	r2, [r7, #2]
 8005eba:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	887a      	ldrh	r2, [r7, #2]
 8005ec0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ed8:	2b40      	cmp	r3, #64	; 0x40
 8005eda:	d007      	beq.n	8005eec <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	681a      	ldr	r2, [r3, #0]
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005eea:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	68db      	ldr	r3, [r3, #12]
 8005ef0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ef4:	d178      	bne.n	8005fe8 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	685b      	ldr	r3, [r3, #4]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d002      	beq.n	8005f04 <HAL_SPI_TransmitReceive+0x10a>
 8005efe:	8b7b      	ldrh	r3, [r7, #26]
 8005f00:	2b01      	cmp	r3, #1
 8005f02:	d166      	bne.n	8005fd2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f08:	881a      	ldrh	r2, [r3, #0]
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f14:	1c9a      	adds	r2, r3, #2
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f1e:	b29b      	uxth	r3, r3
 8005f20:	3b01      	subs	r3, #1
 8005f22:	b29a      	uxth	r2, r3
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f28:	e053      	b.n	8005fd2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	689b      	ldr	r3, [r3, #8]
 8005f30:	f003 0302 	and.w	r3, r3, #2
 8005f34:	2b02      	cmp	r3, #2
 8005f36:	d11b      	bne.n	8005f70 <HAL_SPI_TransmitReceive+0x176>
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f3c:	b29b      	uxth	r3, r3
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d016      	beq.n	8005f70 <HAL_SPI_TransmitReceive+0x176>
 8005f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f44:	2b01      	cmp	r3, #1
 8005f46:	d113      	bne.n	8005f70 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f4c:	881a      	ldrh	r2, [r3, #0]
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f58:	1c9a      	adds	r2, r3, #2
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f62:	b29b      	uxth	r3, r3
 8005f64:	3b01      	subs	r3, #1
 8005f66:	b29a      	uxth	r2, r3
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	689b      	ldr	r3, [r3, #8]
 8005f76:	f003 0301 	and.w	r3, r3, #1
 8005f7a:	2b01      	cmp	r3, #1
 8005f7c:	d119      	bne.n	8005fb2 <HAL_SPI_TransmitReceive+0x1b8>
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f82:	b29b      	uxth	r3, r3
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d014      	beq.n	8005fb2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	68da      	ldr	r2, [r3, #12]
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f92:	b292      	uxth	r2, r2
 8005f94:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f9a:	1c9a      	adds	r2, r3, #2
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fa4:	b29b      	uxth	r3, r3
 8005fa6:	3b01      	subs	r3, #1
 8005fa8:	b29a      	uxth	r2, r3
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005fae:	2301      	movs	r3, #1
 8005fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005fb2:	f7fe fd0d 	bl	80049d0 <HAL_GetTick>
 8005fb6:	4602      	mov	r2, r0
 8005fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fba:	1ad3      	subs	r3, r2, r3
 8005fbc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005fbe:	429a      	cmp	r2, r3
 8005fc0:	d807      	bhi.n	8005fd2 <HAL_SPI_TransmitReceive+0x1d8>
 8005fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fc8:	d003      	beq.n	8005fd2 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005fca:	2303      	movs	r3, #3
 8005fcc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005fd0:	e0a7      	b.n	8006122 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005fd6:	b29b      	uxth	r3, r3
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d1a6      	bne.n	8005f2a <HAL_SPI_TransmitReceive+0x130>
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fe0:	b29b      	uxth	r3, r3
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d1a1      	bne.n	8005f2a <HAL_SPI_TransmitReceive+0x130>
 8005fe6:	e07c      	b.n	80060e2 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	685b      	ldr	r3, [r3, #4]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d002      	beq.n	8005ff6 <HAL_SPI_TransmitReceive+0x1fc>
 8005ff0:	8b7b      	ldrh	r3, [r7, #26]
 8005ff2:	2b01      	cmp	r3, #1
 8005ff4:	d16b      	bne.n	80060ce <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	330c      	adds	r3, #12
 8006000:	7812      	ldrb	r2, [r2, #0]
 8006002:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006008:	1c5a      	adds	r2, r3, #1
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006012:	b29b      	uxth	r3, r3
 8006014:	3b01      	subs	r3, #1
 8006016:	b29a      	uxth	r2, r3
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800601c:	e057      	b.n	80060ce <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	689b      	ldr	r3, [r3, #8]
 8006024:	f003 0302 	and.w	r3, r3, #2
 8006028:	2b02      	cmp	r3, #2
 800602a:	d11c      	bne.n	8006066 <HAL_SPI_TransmitReceive+0x26c>
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006030:	b29b      	uxth	r3, r3
 8006032:	2b00      	cmp	r3, #0
 8006034:	d017      	beq.n	8006066 <HAL_SPI_TransmitReceive+0x26c>
 8006036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006038:	2b01      	cmp	r3, #1
 800603a:	d114      	bne.n	8006066 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	330c      	adds	r3, #12
 8006046:	7812      	ldrb	r2, [r2, #0]
 8006048:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800604e:	1c5a      	adds	r2, r3, #1
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006058:	b29b      	uxth	r3, r3
 800605a:	3b01      	subs	r3, #1
 800605c:	b29a      	uxth	r2, r3
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006062:	2300      	movs	r3, #0
 8006064:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	689b      	ldr	r3, [r3, #8]
 800606c:	f003 0301 	and.w	r3, r3, #1
 8006070:	2b01      	cmp	r3, #1
 8006072:	d119      	bne.n	80060a8 <HAL_SPI_TransmitReceive+0x2ae>
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006078:	b29b      	uxth	r3, r3
 800607a:	2b00      	cmp	r3, #0
 800607c:	d014      	beq.n	80060a8 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	68da      	ldr	r2, [r3, #12]
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006088:	b2d2      	uxtb	r2, r2
 800608a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006090:	1c5a      	adds	r2, r3, #1
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800609a:	b29b      	uxth	r3, r3
 800609c:	3b01      	subs	r3, #1
 800609e:	b29a      	uxth	r2, r3
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80060a4:	2301      	movs	r3, #1
 80060a6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80060a8:	f7fe fc92 	bl	80049d0 <HAL_GetTick>
 80060ac:	4602      	mov	r2, r0
 80060ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b0:	1ad3      	subs	r3, r2, r3
 80060b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80060b4:	429a      	cmp	r2, r3
 80060b6:	d803      	bhi.n	80060c0 <HAL_SPI_TransmitReceive+0x2c6>
 80060b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060be:	d102      	bne.n	80060c6 <HAL_SPI_TransmitReceive+0x2cc>
 80060c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d103      	bne.n	80060ce <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80060c6:	2303      	movs	r3, #3
 80060c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80060cc:	e029      	b.n	8006122 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060d2:	b29b      	uxth	r3, r3
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d1a2      	bne.n	800601e <HAL_SPI_TransmitReceive+0x224>
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060dc:	b29b      	uxth	r3, r3
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d19d      	bne.n	800601e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80060e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060e4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80060e6:	68f8      	ldr	r0, [r7, #12]
 80060e8:	f000 f8f8 	bl	80062dc <SPI_EndRxTxTransaction>
 80060ec:	4603      	mov	r3, r0
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d006      	beq.n	8006100 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80060f2:	2301      	movs	r3, #1
 80060f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	2220      	movs	r2, #32
 80060fc:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80060fe:	e010      	b.n	8006122 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	689b      	ldr	r3, [r3, #8]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d10b      	bne.n	8006120 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006108:	2300      	movs	r3, #0
 800610a:	617b      	str	r3, [r7, #20]
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	68db      	ldr	r3, [r3, #12]
 8006112:	617b      	str	r3, [r7, #20]
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	689b      	ldr	r3, [r3, #8]
 800611a:	617b      	str	r3, [r7, #20]
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	e000      	b.n	8006122 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006120:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	2201      	movs	r2, #1
 8006126:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	2200      	movs	r2, #0
 800612e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006132:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006136:	4618      	mov	r0, r3
 8006138:	3730      	adds	r7, #48	; 0x30
 800613a:	46bd      	mov	sp, r7
 800613c:	bd80      	pop	{r7, pc}

0800613e <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800613e:	b580      	push	{r7, lr}
 8006140:	b084      	sub	sp, #16
 8006142:	af00      	add	r7, sp, #0
 8006144:	60f8      	str	r0, [r7, #12]
 8006146:	60b9      	str	r1, [r7, #8]
 8006148:	603b      	str	r3, [r7, #0]
 800614a:	4613      	mov	r3, r2
 800614c:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800614e:	e04c      	b.n	80061ea <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006156:	d048      	beq.n	80061ea <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8006158:	f7fe fc3a 	bl	80049d0 <HAL_GetTick>
 800615c:	4602      	mov	r2, r0
 800615e:	69bb      	ldr	r3, [r7, #24]
 8006160:	1ad3      	subs	r3, r2, r3
 8006162:	683a      	ldr	r2, [r7, #0]
 8006164:	429a      	cmp	r2, r3
 8006166:	d902      	bls.n	800616e <SPI_WaitFlagStateUntilTimeout+0x30>
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d13d      	bne.n	80061ea <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	685a      	ldr	r2, [r3, #4]
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800617c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006186:	d111      	bne.n	80061ac <SPI_WaitFlagStateUntilTimeout+0x6e>
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	689b      	ldr	r3, [r3, #8]
 800618c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006190:	d004      	beq.n	800619c <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	689b      	ldr	r3, [r3, #8]
 8006196:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800619a:	d107      	bne.n	80061ac <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	681a      	ldr	r2, [r3, #0]
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80061aa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061b4:	d10f      	bne.n	80061d6 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	681a      	ldr	r2, [r3, #0]
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80061c4:	601a      	str	r2, [r3, #0]
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	681a      	ldr	r2, [r3, #0]
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80061d4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	2201      	movs	r2, #1
 80061da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2200      	movs	r2, #0
 80061e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80061e6:	2303      	movs	r3, #3
 80061e8:	e00f      	b.n	800620a <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	689a      	ldr	r2, [r3, #8]
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	4013      	ands	r3, r2
 80061f4:	68ba      	ldr	r2, [r7, #8]
 80061f6:	429a      	cmp	r2, r3
 80061f8:	bf0c      	ite	eq
 80061fa:	2301      	moveq	r3, #1
 80061fc:	2300      	movne	r3, #0
 80061fe:	b2db      	uxtb	r3, r3
 8006200:	461a      	mov	r2, r3
 8006202:	79fb      	ldrb	r3, [r7, #7]
 8006204:	429a      	cmp	r2, r3
 8006206:	d1a3      	bne.n	8006150 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8006208:	2300      	movs	r3, #0
}
 800620a:	4618      	mov	r0, r3
 800620c:	3710      	adds	r7, #16
 800620e:	46bd      	mov	sp, r7
 8006210:	bd80      	pop	{r7, pc}

08006212 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006212:	b580      	push	{r7, lr}
 8006214:	b086      	sub	sp, #24
 8006216:	af02      	add	r7, sp, #8
 8006218:	60f8      	str	r0, [r7, #12]
 800621a:	60b9      	str	r1, [r7, #8]
 800621c:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	685b      	ldr	r3, [r3, #4]
 8006222:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006226:	d111      	bne.n	800624c <SPI_EndRxTransaction+0x3a>
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	689b      	ldr	r3, [r3, #8]
 800622c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006230:	d004      	beq.n	800623c <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	689b      	ldr	r3, [r3, #8]
 8006236:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800623a:	d107      	bne.n	800624c <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	681a      	ldr	r2, [r3, #0]
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800624a:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006254:	d12a      	bne.n	80062ac <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	689b      	ldr	r3, [r3, #8]
 800625a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800625e:	d012      	beq.n	8006286 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	9300      	str	r3, [sp, #0]
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	2200      	movs	r2, #0
 8006268:	2180      	movs	r1, #128	; 0x80
 800626a:	68f8      	ldr	r0, [r7, #12]
 800626c:	f7ff ff67 	bl	800613e <SPI_WaitFlagStateUntilTimeout>
 8006270:	4603      	mov	r3, r0
 8006272:	2b00      	cmp	r3, #0
 8006274:	d02d      	beq.n	80062d2 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800627a:	f043 0220 	orr.w	r2, r3, #32
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006282:	2303      	movs	r3, #3
 8006284:	e026      	b.n	80062d4 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	9300      	str	r3, [sp, #0]
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	2200      	movs	r2, #0
 800628e:	2101      	movs	r1, #1
 8006290:	68f8      	ldr	r0, [r7, #12]
 8006292:	f7ff ff54 	bl	800613e <SPI_WaitFlagStateUntilTimeout>
 8006296:	4603      	mov	r3, r0
 8006298:	2b00      	cmp	r3, #0
 800629a:	d01a      	beq.n	80062d2 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062a0:	f043 0220 	orr.w	r2, r3, #32
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80062a8:	2303      	movs	r3, #3
 80062aa:	e013      	b.n	80062d4 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	9300      	str	r3, [sp, #0]
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	2200      	movs	r2, #0
 80062b4:	2101      	movs	r1, #1
 80062b6:	68f8      	ldr	r0, [r7, #12]
 80062b8:	f7ff ff41 	bl	800613e <SPI_WaitFlagStateUntilTimeout>
 80062bc:	4603      	mov	r3, r0
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d007      	beq.n	80062d2 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062c6:	f043 0220 	orr.w	r2, r3, #32
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80062ce:	2303      	movs	r3, #3
 80062d0:	e000      	b.n	80062d4 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80062d2:	2300      	movs	r3, #0
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	3710      	adds	r7, #16
 80062d8:	46bd      	mov	sp, r7
 80062da:	bd80      	pop	{r7, pc}

080062dc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b088      	sub	sp, #32
 80062e0:	af02      	add	r7, sp, #8
 80062e2:	60f8      	str	r0, [r7, #12]
 80062e4:	60b9      	str	r1, [r7, #8]
 80062e6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80062e8:	4b1b      	ldr	r3, [pc, #108]	; (8006358 <SPI_EndRxTxTransaction+0x7c>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a1b      	ldr	r2, [pc, #108]	; (800635c <SPI_EndRxTxTransaction+0x80>)
 80062ee:	fba2 2303 	umull	r2, r3, r2, r3
 80062f2:	0d5b      	lsrs	r3, r3, #21
 80062f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80062f8:	fb02 f303 	mul.w	r3, r2, r3
 80062fc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	685b      	ldr	r3, [r3, #4]
 8006302:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006306:	d112      	bne.n	800632e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	9300      	str	r3, [sp, #0]
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	2200      	movs	r2, #0
 8006310:	2180      	movs	r1, #128	; 0x80
 8006312:	68f8      	ldr	r0, [r7, #12]
 8006314:	f7ff ff13 	bl	800613e <SPI_WaitFlagStateUntilTimeout>
 8006318:	4603      	mov	r3, r0
 800631a:	2b00      	cmp	r3, #0
 800631c:	d016      	beq.n	800634c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006322:	f043 0220 	orr.w	r2, r3, #32
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800632a:	2303      	movs	r3, #3
 800632c:	e00f      	b.n	800634e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800632e:	697b      	ldr	r3, [r7, #20]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d00a      	beq.n	800634a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006334:	697b      	ldr	r3, [r7, #20]
 8006336:	3b01      	subs	r3, #1
 8006338:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	689b      	ldr	r3, [r3, #8]
 8006340:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006344:	2b80      	cmp	r3, #128	; 0x80
 8006346:	d0f2      	beq.n	800632e <SPI_EndRxTxTransaction+0x52>
 8006348:	e000      	b.n	800634c <SPI_EndRxTxTransaction+0x70>
        break;
 800634a:	bf00      	nop
  }

  return HAL_OK;
 800634c:	2300      	movs	r3, #0
}
 800634e:	4618      	mov	r0, r3
 8006350:	3718      	adds	r7, #24
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}
 8006356:	bf00      	nop
 8006358:	20000478 	.word	0x20000478
 800635c:	165e9f81 	.word	0x165e9f81

08006360 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8006360:	b580      	push	{r7, lr}
 8006362:	b084      	sub	sp, #16
 8006364:	af00      	add	r7, sp, #0
 8006366:	60f8      	str	r0, [r7, #12]
 8006368:	60b9      	str	r1, [r7, #8]
 800636a:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d101      	bne.n	8006376 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8006372:	2301      	movs	r3, #1
 8006374:	e034      	b.n	80063e0 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800637c:	b2db      	uxtb	r3, r3
 800637e:	2b00      	cmp	r3, #0
 8006380:	d106      	bne.n	8006390 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	2200      	movs	r2, #0
 8006386:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800638a:	68f8      	ldr	r0, [r7, #12]
 800638c:	f002 fec2 	bl	8009114 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681a      	ldr	r2, [r3, #0]
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	3308      	adds	r3, #8
 8006398:	4619      	mov	r1, r3
 800639a:	4610      	mov	r0, r2
 800639c:	f000 fcb8 	bl	8006d10 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	6818      	ldr	r0, [r3, #0]
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	689b      	ldr	r3, [r3, #8]
 80063a8:	461a      	mov	r2, r3
 80063aa:	68b9      	ldr	r1, [r7, #8]
 80063ac:	f000 fd02 	bl	8006db4 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	6858      	ldr	r0, [r3, #4]
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	689a      	ldr	r2, [r3, #8]
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063bc:	6879      	ldr	r1, [r7, #4]
 80063be:	f000 fd37 	bl	8006e30 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	68fa      	ldr	r2, [r7, #12]
 80063c8:	6892      	ldr	r2, [r2, #8]
 80063ca:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	68fa      	ldr	r2, [r7, #12]
 80063d4:	6892      	ldr	r2, [r2, #8]
 80063d6:	f041 0101 	orr.w	r1, r1, #1
 80063da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 80063de:	2300      	movs	r3, #0
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	3710      	adds	r7, #16
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}

080063e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b082      	sub	sp, #8
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d101      	bne.n	80063fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80063f6:	2301      	movs	r3, #1
 80063f8:	e03f      	b.n	800647a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006400:	b2db      	uxtb	r3, r3
 8006402:	2b00      	cmp	r3, #0
 8006404:	d106      	bne.n	8006414 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2200      	movs	r2, #0
 800640a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	f002 fdda 	bl	8008fc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2224      	movs	r2, #36	; 0x24
 8006418:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	68da      	ldr	r2, [r3, #12]
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800642a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800642c:	6878      	ldr	r0, [r7, #4]
 800642e:	f000 fa65 	bl	80068fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	691a      	ldr	r2, [r3, #16]
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006440:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	695a      	ldr	r2, [r3, #20]
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006450:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	68da      	ldr	r2, [r3, #12]
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006460:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2200      	movs	r2, #0
 8006466:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2220      	movs	r2, #32
 800646c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2220      	movs	r2, #32
 8006474:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8006478:	2300      	movs	r3, #0
}
 800647a:	4618      	mov	r0, r3
 800647c:	3708      	adds	r7, #8
 800647e:	46bd      	mov	sp, r7
 8006480:	bd80      	pop	{r7, pc}
	...

08006484 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b088      	sub	sp, #32
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	68db      	ldr	r3, [r3, #12]
 800649a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	695b      	ldr	r3, [r3, #20]
 80064a2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80064a4:	2300      	movs	r3, #0
 80064a6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80064a8:	2300      	movs	r3, #0
 80064aa:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80064ac:	69fb      	ldr	r3, [r7, #28]
 80064ae:	f003 030f 	and.w	r3, r3, #15
 80064b2:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80064b4:	693b      	ldr	r3, [r7, #16]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d10d      	bne.n	80064d6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80064ba:	69fb      	ldr	r3, [r7, #28]
 80064bc:	f003 0320 	and.w	r3, r3, #32
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d008      	beq.n	80064d6 <HAL_UART_IRQHandler+0x52>
 80064c4:	69bb      	ldr	r3, [r7, #24]
 80064c6:	f003 0320 	and.w	r3, r3, #32
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d003      	beq.n	80064d6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f000 f992 	bl	80067f8 <UART_Receive_IT>
      return;
 80064d4:	e0cc      	b.n	8006670 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	f000 80ab 	beq.w	8006634 <HAL_UART_IRQHandler+0x1b0>
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	f003 0301 	and.w	r3, r3, #1
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d105      	bne.n	80064f4 <HAL_UART_IRQHandler+0x70>
 80064e8:	69bb      	ldr	r3, [r7, #24]
 80064ea:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	f000 80a0 	beq.w	8006634 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80064f4:	69fb      	ldr	r3, [r7, #28]
 80064f6:	f003 0301 	and.w	r3, r3, #1
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d00a      	beq.n	8006514 <HAL_UART_IRQHandler+0x90>
 80064fe:	69bb      	ldr	r3, [r7, #24]
 8006500:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006504:	2b00      	cmp	r3, #0
 8006506:	d005      	beq.n	8006514 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800650c:	f043 0201 	orr.w	r2, r3, #1
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006514:	69fb      	ldr	r3, [r7, #28]
 8006516:	f003 0304 	and.w	r3, r3, #4
 800651a:	2b00      	cmp	r3, #0
 800651c:	d00a      	beq.n	8006534 <HAL_UART_IRQHandler+0xb0>
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	f003 0301 	and.w	r3, r3, #1
 8006524:	2b00      	cmp	r3, #0
 8006526:	d005      	beq.n	8006534 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800652c:	f043 0202 	orr.w	r2, r3, #2
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006534:	69fb      	ldr	r3, [r7, #28]
 8006536:	f003 0302 	and.w	r3, r3, #2
 800653a:	2b00      	cmp	r3, #0
 800653c:	d00a      	beq.n	8006554 <HAL_UART_IRQHandler+0xd0>
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	f003 0301 	and.w	r3, r3, #1
 8006544:	2b00      	cmp	r3, #0
 8006546:	d005      	beq.n	8006554 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800654c:	f043 0204 	orr.w	r2, r3, #4
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006554:	69fb      	ldr	r3, [r7, #28]
 8006556:	f003 0308 	and.w	r3, r3, #8
 800655a:	2b00      	cmp	r3, #0
 800655c:	d00a      	beq.n	8006574 <HAL_UART_IRQHandler+0xf0>
 800655e:	697b      	ldr	r3, [r7, #20]
 8006560:	f003 0301 	and.w	r3, r3, #1
 8006564:	2b00      	cmp	r3, #0
 8006566:	d005      	beq.n	8006574 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800656c:	f043 0208 	orr.w	r2, r3, #8
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006578:	2b00      	cmp	r3, #0
 800657a:	d078      	beq.n	800666e <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800657c:	69fb      	ldr	r3, [r7, #28]
 800657e:	f003 0320 	and.w	r3, r3, #32
 8006582:	2b00      	cmp	r3, #0
 8006584:	d007      	beq.n	8006596 <HAL_UART_IRQHandler+0x112>
 8006586:	69bb      	ldr	r3, [r7, #24]
 8006588:	f003 0320 	and.w	r3, r3, #32
 800658c:	2b00      	cmp	r3, #0
 800658e:	d002      	beq.n	8006596 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	f000 f931 	bl	80067f8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	695b      	ldr	r3, [r3, #20]
 800659c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065a0:	2b40      	cmp	r3, #64	; 0x40
 80065a2:	bf0c      	ite	eq
 80065a4:	2301      	moveq	r3, #1
 80065a6:	2300      	movne	r3, #0
 80065a8:	b2db      	uxtb	r3, r3
 80065aa:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065b0:	f003 0308 	and.w	r3, r3, #8
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d102      	bne.n	80065be <HAL_UART_IRQHandler+0x13a>
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d031      	beq.n	8006622 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	f000 f87a 	bl	80066b8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	695b      	ldr	r3, [r3, #20]
 80065ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065ce:	2b40      	cmp	r3, #64	; 0x40
 80065d0:	d123      	bne.n	800661a <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	695a      	ldr	r2, [r3, #20]
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80065e0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d013      	beq.n	8006612 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065ee:	4a22      	ldr	r2, [pc, #136]	; (8006678 <HAL_UART_IRQHandler+0x1f4>)
 80065f0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065f6:	4618      	mov	r0, r3
 80065f8:	f7fe fb65 	bl	8004cc6 <HAL_DMA_Abort_IT>
 80065fc:	4603      	mov	r3, r0
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d016      	beq.n	8006630 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006606:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006608:	687a      	ldr	r2, [r7, #4]
 800660a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800660c:	4610      	mov	r0, r2
 800660e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006610:	e00e      	b.n	8006630 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f000 f846 	bl	80066a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006618:	e00a      	b.n	8006630 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f000 f842 	bl	80066a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006620:	e006      	b.n	8006630 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	f000 f83e 	bl	80066a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2200      	movs	r2, #0
 800662c:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800662e:	e01e      	b.n	800666e <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006630:	bf00      	nop
    return;
 8006632:	e01c      	b.n	800666e <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006634:	69fb      	ldr	r3, [r7, #28]
 8006636:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800663a:	2b00      	cmp	r3, #0
 800663c:	d008      	beq.n	8006650 <HAL_UART_IRQHandler+0x1cc>
 800663e:	69bb      	ldr	r3, [r7, #24]
 8006640:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006644:	2b00      	cmp	r3, #0
 8006646:	d003      	beq.n	8006650 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8006648:	6878      	ldr	r0, [r7, #4]
 800664a:	f000 f867 	bl	800671c <UART_Transmit_IT>
    return;
 800664e:	e00f      	b.n	8006670 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006650:	69fb      	ldr	r3, [r7, #28]
 8006652:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006656:	2b00      	cmp	r3, #0
 8006658:	d00a      	beq.n	8006670 <HAL_UART_IRQHandler+0x1ec>
 800665a:	69bb      	ldr	r3, [r7, #24]
 800665c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006660:	2b00      	cmp	r3, #0
 8006662:	d005      	beq.n	8006670 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8006664:	6878      	ldr	r0, [r7, #4]
 8006666:	f000 f8af 	bl	80067c8 <UART_EndTransmit_IT>
    return;
 800666a:	bf00      	nop
 800666c:	e000      	b.n	8006670 <HAL_UART_IRQHandler+0x1ec>
    return;
 800666e:	bf00      	nop
  }
}
 8006670:	3720      	adds	r7, #32
 8006672:	46bd      	mov	sp, r7
 8006674:	bd80      	pop	{r7, pc}
 8006676:	bf00      	nop
 8006678:	080066f5 	.word	0x080066f5

0800667c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800667c:	b480      	push	{r7}
 800667e:	b083      	sub	sp, #12
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006684:	bf00      	nop
 8006686:	370c      	adds	r7, #12
 8006688:	46bd      	mov	sp, r7
 800668a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668e:	4770      	bx	lr

08006690 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006690:	b480      	push	{r7}
 8006692:	b083      	sub	sp, #12
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006698:	bf00      	nop
 800669a:	370c      	adds	r7, #12
 800669c:	46bd      	mov	sp, r7
 800669e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a2:	4770      	bx	lr

080066a4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80066a4:	b480      	push	{r7}
 80066a6:	b083      	sub	sp, #12
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80066ac:	bf00      	nop
 80066ae:	370c      	adds	r7, #12
 80066b0:	46bd      	mov	sp, r7
 80066b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b6:	4770      	bx	lr

080066b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80066b8:	b480      	push	{r7}
 80066ba:	b083      	sub	sp, #12
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	68da      	ldr	r2, [r3, #12]
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80066ce:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	695a      	ldr	r2, [r3, #20]
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f022 0201 	bic.w	r2, r2, #1
 80066de:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2220      	movs	r2, #32
 80066e4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80066e8:	bf00      	nop
 80066ea:	370c      	adds	r7, #12
 80066ec:	46bd      	mov	sp, r7
 80066ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f2:	4770      	bx	lr

080066f4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b084      	sub	sp, #16
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006700:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	2200      	movs	r2, #0
 8006706:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	2200      	movs	r2, #0
 800670c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800670e:	68f8      	ldr	r0, [r7, #12]
 8006710:	f7ff ffc8 	bl	80066a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006714:	bf00      	nop
 8006716:	3710      	adds	r7, #16
 8006718:	46bd      	mov	sp, r7
 800671a:	bd80      	pop	{r7, pc}

0800671c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800671c:	b480      	push	{r7}
 800671e:	b085      	sub	sp, #20
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800672a:	b2db      	uxtb	r3, r3
 800672c:	2b21      	cmp	r3, #33	; 0x21
 800672e:	d144      	bne.n	80067ba <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	689b      	ldr	r3, [r3, #8]
 8006734:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006738:	d11a      	bne.n	8006770 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6a1b      	ldr	r3, [r3, #32]
 800673e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	881b      	ldrh	r3, [r3, #0]
 8006744:	461a      	mov	r2, r3
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800674e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	691b      	ldr	r3, [r3, #16]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d105      	bne.n	8006764 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6a1b      	ldr	r3, [r3, #32]
 800675c:	1c9a      	adds	r2, r3, #2
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	621a      	str	r2, [r3, #32]
 8006762:	e00e      	b.n	8006782 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6a1b      	ldr	r3, [r3, #32]
 8006768:	1c5a      	adds	r2, r3, #1
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	621a      	str	r2, [r3, #32]
 800676e:	e008      	b.n	8006782 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6a1b      	ldr	r3, [r3, #32]
 8006774:	1c59      	adds	r1, r3, #1
 8006776:	687a      	ldr	r2, [r7, #4]
 8006778:	6211      	str	r1, [r2, #32]
 800677a:	781a      	ldrb	r2, [r3, #0]
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006786:	b29b      	uxth	r3, r3
 8006788:	3b01      	subs	r3, #1
 800678a:	b29b      	uxth	r3, r3
 800678c:	687a      	ldr	r2, [r7, #4]
 800678e:	4619      	mov	r1, r3
 8006790:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006792:	2b00      	cmp	r3, #0
 8006794:	d10f      	bne.n	80067b6 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	68da      	ldr	r2, [r3, #12]
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80067a4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	68da      	ldr	r2, [r3, #12]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80067b4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80067b6:	2300      	movs	r3, #0
 80067b8:	e000      	b.n	80067bc <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80067ba:	2302      	movs	r3, #2
  }
}
 80067bc:	4618      	mov	r0, r3
 80067be:	3714      	adds	r7, #20
 80067c0:	46bd      	mov	sp, r7
 80067c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c6:	4770      	bx	lr

080067c8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b082      	sub	sp, #8
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	68da      	ldr	r2, [r3, #12]
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067de:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2220      	movs	r2, #32
 80067e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80067e8:	6878      	ldr	r0, [r7, #4]
 80067ea:	f7ff ff47 	bl	800667c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80067ee:	2300      	movs	r3, #0
}
 80067f0:	4618      	mov	r0, r3
 80067f2:	3708      	adds	r7, #8
 80067f4:	46bd      	mov	sp, r7
 80067f6:	bd80      	pop	{r7, pc}

080067f8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b084      	sub	sp, #16
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006806:	b2db      	uxtb	r3, r3
 8006808:	2b22      	cmp	r3, #34	; 0x22
 800680a:	d171      	bne.n	80068f0 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	689b      	ldr	r3, [r3, #8]
 8006810:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006814:	d123      	bne.n	800685e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800681a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	691b      	ldr	r3, [r3, #16]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d10e      	bne.n	8006842 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	685b      	ldr	r3, [r3, #4]
 800682a:	b29b      	uxth	r3, r3
 800682c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006830:	b29a      	uxth	r2, r3
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800683a:	1c9a      	adds	r2, r3, #2
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	629a      	str	r2, [r3, #40]	; 0x28
 8006840:	e029      	b.n	8006896 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	685b      	ldr	r3, [r3, #4]
 8006848:	b29b      	uxth	r3, r3
 800684a:	b2db      	uxtb	r3, r3
 800684c:	b29a      	uxth	r2, r3
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006856:	1c5a      	adds	r2, r3, #1
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	629a      	str	r2, [r3, #40]	; 0x28
 800685c:	e01b      	b.n	8006896 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	691b      	ldr	r3, [r3, #16]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d10a      	bne.n	800687c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	6858      	ldr	r0, [r3, #4]
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006870:	1c59      	adds	r1, r3, #1
 8006872:	687a      	ldr	r2, [r7, #4]
 8006874:	6291      	str	r1, [r2, #40]	; 0x28
 8006876:	b2c2      	uxtb	r2, r0
 8006878:	701a      	strb	r2, [r3, #0]
 800687a:	e00c      	b.n	8006896 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	685b      	ldr	r3, [r3, #4]
 8006882:	b2da      	uxtb	r2, r3
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006888:	1c58      	adds	r0, r3, #1
 800688a:	6879      	ldr	r1, [r7, #4]
 800688c:	6288      	str	r0, [r1, #40]	; 0x28
 800688e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006892:	b2d2      	uxtb	r2, r2
 8006894:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800689a:	b29b      	uxth	r3, r3
 800689c:	3b01      	subs	r3, #1
 800689e:	b29b      	uxth	r3, r3
 80068a0:	687a      	ldr	r2, [r7, #4]
 80068a2:	4619      	mov	r1, r3
 80068a4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d120      	bne.n	80068ec <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	68da      	ldr	r2, [r3, #12]
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f022 0220 	bic.w	r2, r2, #32
 80068b8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	68da      	ldr	r2, [r3, #12]
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80068c8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	695a      	ldr	r2, [r3, #20]
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f022 0201 	bic.w	r2, r2, #1
 80068d8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2220      	movs	r2, #32
 80068de:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f7ff fed4 	bl	8006690 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80068e8:	2300      	movs	r3, #0
 80068ea:	e002      	b.n	80068f2 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80068ec:	2300      	movs	r3, #0
 80068ee:	e000      	b.n	80068f2 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80068f0:	2302      	movs	r3, #2
  }
}
 80068f2:	4618      	mov	r0, r3
 80068f4:	3710      	adds	r7, #16
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bd80      	pop	{r7, pc}
	...

080068fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80068fc:	b5b0      	push	{r4, r5, r7, lr}
 80068fe:	b084      	sub	sp, #16
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	691b      	ldr	r3, [r3, #16]
 800690a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	68da      	ldr	r2, [r3, #12]
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	430a      	orrs	r2, r1
 8006918:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	689a      	ldr	r2, [r3, #8]
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	691b      	ldr	r3, [r3, #16]
 8006922:	431a      	orrs	r2, r3
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	695b      	ldr	r3, [r3, #20]
 8006928:	431a      	orrs	r2, r3
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	69db      	ldr	r3, [r3, #28]
 800692e:	4313      	orrs	r3, r2
 8006930:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	68db      	ldr	r3, [r3, #12]
 8006938:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800693c:	f023 030c 	bic.w	r3, r3, #12
 8006940:	687a      	ldr	r2, [r7, #4]
 8006942:	6812      	ldr	r2, [r2, #0]
 8006944:	68f9      	ldr	r1, [r7, #12]
 8006946:	430b      	orrs	r3, r1
 8006948:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	695b      	ldr	r3, [r3, #20]
 8006950:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	699a      	ldr	r2, [r3, #24]
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	430a      	orrs	r2, r1
 800695e:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	69db      	ldr	r3, [r3, #28]
 8006964:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006968:	f040 80e4 	bne.w	8006b34 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4aab      	ldr	r2, [pc, #684]	; (8006c20 <UART_SetConfig+0x324>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d004      	beq.n	8006980 <UART_SetConfig+0x84>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	4aaa      	ldr	r2, [pc, #680]	; (8006c24 <UART_SetConfig+0x328>)
 800697c:	4293      	cmp	r3, r2
 800697e:	d16c      	bne.n	8006a5a <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8006980:	f7fe ff86 	bl	8005890 <HAL_RCC_GetPCLK2Freq>
 8006984:	4602      	mov	r2, r0
 8006986:	4613      	mov	r3, r2
 8006988:	009b      	lsls	r3, r3, #2
 800698a:	4413      	add	r3, r2
 800698c:	009a      	lsls	r2, r3, #2
 800698e:	441a      	add	r2, r3
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	685b      	ldr	r3, [r3, #4]
 8006994:	005b      	lsls	r3, r3, #1
 8006996:	fbb2 f3f3 	udiv	r3, r2, r3
 800699a:	4aa3      	ldr	r2, [pc, #652]	; (8006c28 <UART_SetConfig+0x32c>)
 800699c:	fba2 2303 	umull	r2, r3, r2, r3
 80069a0:	095b      	lsrs	r3, r3, #5
 80069a2:	011c      	lsls	r4, r3, #4
 80069a4:	f7fe ff74 	bl	8005890 <HAL_RCC_GetPCLK2Freq>
 80069a8:	4602      	mov	r2, r0
 80069aa:	4613      	mov	r3, r2
 80069ac:	009b      	lsls	r3, r3, #2
 80069ae:	4413      	add	r3, r2
 80069b0:	009a      	lsls	r2, r3, #2
 80069b2:	441a      	add	r2, r3
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	685b      	ldr	r3, [r3, #4]
 80069b8:	005b      	lsls	r3, r3, #1
 80069ba:	fbb2 f5f3 	udiv	r5, r2, r3
 80069be:	f7fe ff67 	bl	8005890 <HAL_RCC_GetPCLK2Freq>
 80069c2:	4602      	mov	r2, r0
 80069c4:	4613      	mov	r3, r2
 80069c6:	009b      	lsls	r3, r3, #2
 80069c8:	4413      	add	r3, r2
 80069ca:	009a      	lsls	r2, r3, #2
 80069cc:	441a      	add	r2, r3
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	685b      	ldr	r3, [r3, #4]
 80069d2:	005b      	lsls	r3, r3, #1
 80069d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80069d8:	4a93      	ldr	r2, [pc, #588]	; (8006c28 <UART_SetConfig+0x32c>)
 80069da:	fba2 2303 	umull	r2, r3, r2, r3
 80069de:	095b      	lsrs	r3, r3, #5
 80069e0:	2264      	movs	r2, #100	; 0x64
 80069e2:	fb02 f303 	mul.w	r3, r2, r3
 80069e6:	1aeb      	subs	r3, r5, r3
 80069e8:	00db      	lsls	r3, r3, #3
 80069ea:	3332      	adds	r3, #50	; 0x32
 80069ec:	4a8e      	ldr	r2, [pc, #568]	; (8006c28 <UART_SetConfig+0x32c>)
 80069ee:	fba2 2303 	umull	r2, r3, r2, r3
 80069f2:	095b      	lsrs	r3, r3, #5
 80069f4:	005b      	lsls	r3, r3, #1
 80069f6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80069fa:	441c      	add	r4, r3
 80069fc:	f7fe ff48 	bl	8005890 <HAL_RCC_GetPCLK2Freq>
 8006a00:	4602      	mov	r2, r0
 8006a02:	4613      	mov	r3, r2
 8006a04:	009b      	lsls	r3, r3, #2
 8006a06:	4413      	add	r3, r2
 8006a08:	009a      	lsls	r2, r3, #2
 8006a0a:	441a      	add	r2, r3
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	685b      	ldr	r3, [r3, #4]
 8006a10:	005b      	lsls	r3, r3, #1
 8006a12:	fbb2 f5f3 	udiv	r5, r2, r3
 8006a16:	f7fe ff3b 	bl	8005890 <HAL_RCC_GetPCLK2Freq>
 8006a1a:	4602      	mov	r2, r0
 8006a1c:	4613      	mov	r3, r2
 8006a1e:	009b      	lsls	r3, r3, #2
 8006a20:	4413      	add	r3, r2
 8006a22:	009a      	lsls	r2, r3, #2
 8006a24:	441a      	add	r2, r3
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	685b      	ldr	r3, [r3, #4]
 8006a2a:	005b      	lsls	r3, r3, #1
 8006a2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a30:	4a7d      	ldr	r2, [pc, #500]	; (8006c28 <UART_SetConfig+0x32c>)
 8006a32:	fba2 2303 	umull	r2, r3, r2, r3
 8006a36:	095b      	lsrs	r3, r3, #5
 8006a38:	2264      	movs	r2, #100	; 0x64
 8006a3a:	fb02 f303 	mul.w	r3, r2, r3
 8006a3e:	1aeb      	subs	r3, r5, r3
 8006a40:	00db      	lsls	r3, r3, #3
 8006a42:	3332      	adds	r3, #50	; 0x32
 8006a44:	4a78      	ldr	r2, [pc, #480]	; (8006c28 <UART_SetConfig+0x32c>)
 8006a46:	fba2 2303 	umull	r2, r3, r2, r3
 8006a4a:	095b      	lsrs	r3, r3, #5
 8006a4c:	f003 0207 	and.w	r2, r3, #7
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	4422      	add	r2, r4
 8006a56:	609a      	str	r2, [r3, #8]
 8006a58:	e154      	b.n	8006d04 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8006a5a:	f7fe ff05 	bl	8005868 <HAL_RCC_GetPCLK1Freq>
 8006a5e:	4602      	mov	r2, r0
 8006a60:	4613      	mov	r3, r2
 8006a62:	009b      	lsls	r3, r3, #2
 8006a64:	4413      	add	r3, r2
 8006a66:	009a      	lsls	r2, r3, #2
 8006a68:	441a      	add	r2, r3
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	685b      	ldr	r3, [r3, #4]
 8006a6e:	005b      	lsls	r3, r3, #1
 8006a70:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a74:	4a6c      	ldr	r2, [pc, #432]	; (8006c28 <UART_SetConfig+0x32c>)
 8006a76:	fba2 2303 	umull	r2, r3, r2, r3
 8006a7a:	095b      	lsrs	r3, r3, #5
 8006a7c:	011c      	lsls	r4, r3, #4
 8006a7e:	f7fe fef3 	bl	8005868 <HAL_RCC_GetPCLK1Freq>
 8006a82:	4602      	mov	r2, r0
 8006a84:	4613      	mov	r3, r2
 8006a86:	009b      	lsls	r3, r3, #2
 8006a88:	4413      	add	r3, r2
 8006a8a:	009a      	lsls	r2, r3, #2
 8006a8c:	441a      	add	r2, r3
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	685b      	ldr	r3, [r3, #4]
 8006a92:	005b      	lsls	r3, r3, #1
 8006a94:	fbb2 f5f3 	udiv	r5, r2, r3
 8006a98:	f7fe fee6 	bl	8005868 <HAL_RCC_GetPCLK1Freq>
 8006a9c:	4602      	mov	r2, r0
 8006a9e:	4613      	mov	r3, r2
 8006aa0:	009b      	lsls	r3, r3, #2
 8006aa2:	4413      	add	r3, r2
 8006aa4:	009a      	lsls	r2, r3, #2
 8006aa6:	441a      	add	r2, r3
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	685b      	ldr	r3, [r3, #4]
 8006aac:	005b      	lsls	r3, r3, #1
 8006aae:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ab2:	4a5d      	ldr	r2, [pc, #372]	; (8006c28 <UART_SetConfig+0x32c>)
 8006ab4:	fba2 2303 	umull	r2, r3, r2, r3
 8006ab8:	095b      	lsrs	r3, r3, #5
 8006aba:	2264      	movs	r2, #100	; 0x64
 8006abc:	fb02 f303 	mul.w	r3, r2, r3
 8006ac0:	1aeb      	subs	r3, r5, r3
 8006ac2:	00db      	lsls	r3, r3, #3
 8006ac4:	3332      	adds	r3, #50	; 0x32
 8006ac6:	4a58      	ldr	r2, [pc, #352]	; (8006c28 <UART_SetConfig+0x32c>)
 8006ac8:	fba2 2303 	umull	r2, r3, r2, r3
 8006acc:	095b      	lsrs	r3, r3, #5
 8006ace:	005b      	lsls	r3, r3, #1
 8006ad0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006ad4:	441c      	add	r4, r3
 8006ad6:	f7fe fec7 	bl	8005868 <HAL_RCC_GetPCLK1Freq>
 8006ada:	4602      	mov	r2, r0
 8006adc:	4613      	mov	r3, r2
 8006ade:	009b      	lsls	r3, r3, #2
 8006ae0:	4413      	add	r3, r2
 8006ae2:	009a      	lsls	r2, r3, #2
 8006ae4:	441a      	add	r2, r3
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	685b      	ldr	r3, [r3, #4]
 8006aea:	005b      	lsls	r3, r3, #1
 8006aec:	fbb2 f5f3 	udiv	r5, r2, r3
 8006af0:	f7fe feba 	bl	8005868 <HAL_RCC_GetPCLK1Freq>
 8006af4:	4602      	mov	r2, r0
 8006af6:	4613      	mov	r3, r2
 8006af8:	009b      	lsls	r3, r3, #2
 8006afa:	4413      	add	r3, r2
 8006afc:	009a      	lsls	r2, r3, #2
 8006afe:	441a      	add	r2, r3
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	685b      	ldr	r3, [r3, #4]
 8006b04:	005b      	lsls	r3, r3, #1
 8006b06:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b0a:	4a47      	ldr	r2, [pc, #284]	; (8006c28 <UART_SetConfig+0x32c>)
 8006b0c:	fba2 2303 	umull	r2, r3, r2, r3
 8006b10:	095b      	lsrs	r3, r3, #5
 8006b12:	2264      	movs	r2, #100	; 0x64
 8006b14:	fb02 f303 	mul.w	r3, r2, r3
 8006b18:	1aeb      	subs	r3, r5, r3
 8006b1a:	00db      	lsls	r3, r3, #3
 8006b1c:	3332      	adds	r3, #50	; 0x32
 8006b1e:	4a42      	ldr	r2, [pc, #264]	; (8006c28 <UART_SetConfig+0x32c>)
 8006b20:	fba2 2303 	umull	r2, r3, r2, r3
 8006b24:	095b      	lsrs	r3, r3, #5
 8006b26:	f003 0207 	and.w	r2, r3, #7
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	4422      	add	r2, r4
 8006b30:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8006b32:	e0e7      	b.n	8006d04 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4a39      	ldr	r2, [pc, #228]	; (8006c20 <UART_SetConfig+0x324>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d004      	beq.n	8006b48 <UART_SetConfig+0x24c>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	4a38      	ldr	r2, [pc, #224]	; (8006c24 <UART_SetConfig+0x328>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d171      	bne.n	8006c2c <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8006b48:	f7fe fea2 	bl	8005890 <HAL_RCC_GetPCLK2Freq>
 8006b4c:	4602      	mov	r2, r0
 8006b4e:	4613      	mov	r3, r2
 8006b50:	009b      	lsls	r3, r3, #2
 8006b52:	4413      	add	r3, r2
 8006b54:	009a      	lsls	r2, r3, #2
 8006b56:	441a      	add	r2, r3
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	685b      	ldr	r3, [r3, #4]
 8006b5c:	009b      	lsls	r3, r3, #2
 8006b5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b62:	4a31      	ldr	r2, [pc, #196]	; (8006c28 <UART_SetConfig+0x32c>)
 8006b64:	fba2 2303 	umull	r2, r3, r2, r3
 8006b68:	095b      	lsrs	r3, r3, #5
 8006b6a:	011c      	lsls	r4, r3, #4
 8006b6c:	f7fe fe90 	bl	8005890 <HAL_RCC_GetPCLK2Freq>
 8006b70:	4602      	mov	r2, r0
 8006b72:	4613      	mov	r3, r2
 8006b74:	009b      	lsls	r3, r3, #2
 8006b76:	4413      	add	r3, r2
 8006b78:	009a      	lsls	r2, r3, #2
 8006b7a:	441a      	add	r2, r3
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	685b      	ldr	r3, [r3, #4]
 8006b80:	009b      	lsls	r3, r3, #2
 8006b82:	fbb2 f5f3 	udiv	r5, r2, r3
 8006b86:	f7fe fe83 	bl	8005890 <HAL_RCC_GetPCLK2Freq>
 8006b8a:	4602      	mov	r2, r0
 8006b8c:	4613      	mov	r3, r2
 8006b8e:	009b      	lsls	r3, r3, #2
 8006b90:	4413      	add	r3, r2
 8006b92:	009a      	lsls	r2, r3, #2
 8006b94:	441a      	add	r2, r3
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	685b      	ldr	r3, [r3, #4]
 8006b9a:	009b      	lsls	r3, r3, #2
 8006b9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ba0:	4a21      	ldr	r2, [pc, #132]	; (8006c28 <UART_SetConfig+0x32c>)
 8006ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ba6:	095b      	lsrs	r3, r3, #5
 8006ba8:	2264      	movs	r2, #100	; 0x64
 8006baa:	fb02 f303 	mul.w	r3, r2, r3
 8006bae:	1aeb      	subs	r3, r5, r3
 8006bb0:	011b      	lsls	r3, r3, #4
 8006bb2:	3332      	adds	r3, #50	; 0x32
 8006bb4:	4a1c      	ldr	r2, [pc, #112]	; (8006c28 <UART_SetConfig+0x32c>)
 8006bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8006bba:	095b      	lsrs	r3, r3, #5
 8006bbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006bc0:	441c      	add	r4, r3
 8006bc2:	f7fe fe65 	bl	8005890 <HAL_RCC_GetPCLK2Freq>
 8006bc6:	4602      	mov	r2, r0
 8006bc8:	4613      	mov	r3, r2
 8006bca:	009b      	lsls	r3, r3, #2
 8006bcc:	4413      	add	r3, r2
 8006bce:	009a      	lsls	r2, r3, #2
 8006bd0:	441a      	add	r2, r3
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	685b      	ldr	r3, [r3, #4]
 8006bd6:	009b      	lsls	r3, r3, #2
 8006bd8:	fbb2 f5f3 	udiv	r5, r2, r3
 8006bdc:	f7fe fe58 	bl	8005890 <HAL_RCC_GetPCLK2Freq>
 8006be0:	4602      	mov	r2, r0
 8006be2:	4613      	mov	r3, r2
 8006be4:	009b      	lsls	r3, r3, #2
 8006be6:	4413      	add	r3, r2
 8006be8:	009a      	lsls	r2, r3, #2
 8006bea:	441a      	add	r2, r3
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	685b      	ldr	r3, [r3, #4]
 8006bf0:	009b      	lsls	r3, r3, #2
 8006bf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bf6:	4a0c      	ldr	r2, [pc, #48]	; (8006c28 <UART_SetConfig+0x32c>)
 8006bf8:	fba2 2303 	umull	r2, r3, r2, r3
 8006bfc:	095b      	lsrs	r3, r3, #5
 8006bfe:	2264      	movs	r2, #100	; 0x64
 8006c00:	fb02 f303 	mul.w	r3, r2, r3
 8006c04:	1aeb      	subs	r3, r5, r3
 8006c06:	011b      	lsls	r3, r3, #4
 8006c08:	3332      	adds	r3, #50	; 0x32
 8006c0a:	4a07      	ldr	r2, [pc, #28]	; (8006c28 <UART_SetConfig+0x32c>)
 8006c0c:	fba2 2303 	umull	r2, r3, r2, r3
 8006c10:	095b      	lsrs	r3, r3, #5
 8006c12:	f003 020f 	and.w	r2, r3, #15
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	4422      	add	r2, r4
 8006c1c:	609a      	str	r2, [r3, #8]
 8006c1e:	e071      	b.n	8006d04 <UART_SetConfig+0x408>
 8006c20:	40011000 	.word	0x40011000
 8006c24:	40011400 	.word	0x40011400
 8006c28:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8006c2c:	f7fe fe1c 	bl	8005868 <HAL_RCC_GetPCLK1Freq>
 8006c30:	4602      	mov	r2, r0
 8006c32:	4613      	mov	r3, r2
 8006c34:	009b      	lsls	r3, r3, #2
 8006c36:	4413      	add	r3, r2
 8006c38:	009a      	lsls	r2, r3, #2
 8006c3a:	441a      	add	r2, r3
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	685b      	ldr	r3, [r3, #4]
 8006c40:	009b      	lsls	r3, r3, #2
 8006c42:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c46:	4a31      	ldr	r2, [pc, #196]	; (8006d0c <UART_SetConfig+0x410>)
 8006c48:	fba2 2303 	umull	r2, r3, r2, r3
 8006c4c:	095b      	lsrs	r3, r3, #5
 8006c4e:	011c      	lsls	r4, r3, #4
 8006c50:	f7fe fe0a 	bl	8005868 <HAL_RCC_GetPCLK1Freq>
 8006c54:	4602      	mov	r2, r0
 8006c56:	4613      	mov	r3, r2
 8006c58:	009b      	lsls	r3, r3, #2
 8006c5a:	4413      	add	r3, r2
 8006c5c:	009a      	lsls	r2, r3, #2
 8006c5e:	441a      	add	r2, r3
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	685b      	ldr	r3, [r3, #4]
 8006c64:	009b      	lsls	r3, r3, #2
 8006c66:	fbb2 f5f3 	udiv	r5, r2, r3
 8006c6a:	f7fe fdfd 	bl	8005868 <HAL_RCC_GetPCLK1Freq>
 8006c6e:	4602      	mov	r2, r0
 8006c70:	4613      	mov	r3, r2
 8006c72:	009b      	lsls	r3, r3, #2
 8006c74:	4413      	add	r3, r2
 8006c76:	009a      	lsls	r2, r3, #2
 8006c78:	441a      	add	r2, r3
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	685b      	ldr	r3, [r3, #4]
 8006c7e:	009b      	lsls	r3, r3, #2
 8006c80:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c84:	4a21      	ldr	r2, [pc, #132]	; (8006d0c <UART_SetConfig+0x410>)
 8006c86:	fba2 2303 	umull	r2, r3, r2, r3
 8006c8a:	095b      	lsrs	r3, r3, #5
 8006c8c:	2264      	movs	r2, #100	; 0x64
 8006c8e:	fb02 f303 	mul.w	r3, r2, r3
 8006c92:	1aeb      	subs	r3, r5, r3
 8006c94:	011b      	lsls	r3, r3, #4
 8006c96:	3332      	adds	r3, #50	; 0x32
 8006c98:	4a1c      	ldr	r2, [pc, #112]	; (8006d0c <UART_SetConfig+0x410>)
 8006c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8006c9e:	095b      	lsrs	r3, r3, #5
 8006ca0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006ca4:	441c      	add	r4, r3
 8006ca6:	f7fe fddf 	bl	8005868 <HAL_RCC_GetPCLK1Freq>
 8006caa:	4602      	mov	r2, r0
 8006cac:	4613      	mov	r3, r2
 8006cae:	009b      	lsls	r3, r3, #2
 8006cb0:	4413      	add	r3, r2
 8006cb2:	009a      	lsls	r2, r3, #2
 8006cb4:	441a      	add	r2, r3
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	685b      	ldr	r3, [r3, #4]
 8006cba:	009b      	lsls	r3, r3, #2
 8006cbc:	fbb2 f5f3 	udiv	r5, r2, r3
 8006cc0:	f7fe fdd2 	bl	8005868 <HAL_RCC_GetPCLK1Freq>
 8006cc4:	4602      	mov	r2, r0
 8006cc6:	4613      	mov	r3, r2
 8006cc8:	009b      	lsls	r3, r3, #2
 8006cca:	4413      	add	r3, r2
 8006ccc:	009a      	lsls	r2, r3, #2
 8006cce:	441a      	add	r2, r3
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	685b      	ldr	r3, [r3, #4]
 8006cd4:	009b      	lsls	r3, r3, #2
 8006cd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cda:	4a0c      	ldr	r2, [pc, #48]	; (8006d0c <UART_SetConfig+0x410>)
 8006cdc:	fba2 2303 	umull	r2, r3, r2, r3
 8006ce0:	095b      	lsrs	r3, r3, #5
 8006ce2:	2264      	movs	r2, #100	; 0x64
 8006ce4:	fb02 f303 	mul.w	r3, r2, r3
 8006ce8:	1aeb      	subs	r3, r5, r3
 8006cea:	011b      	lsls	r3, r3, #4
 8006cec:	3332      	adds	r3, #50	; 0x32
 8006cee:	4a07      	ldr	r2, [pc, #28]	; (8006d0c <UART_SetConfig+0x410>)
 8006cf0:	fba2 2303 	umull	r2, r3, r2, r3
 8006cf4:	095b      	lsrs	r3, r3, #5
 8006cf6:	f003 020f 	and.w	r2, r3, #15
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	4422      	add	r2, r4
 8006d00:	609a      	str	r2, [r3, #8]
}
 8006d02:	e7ff      	b.n	8006d04 <UART_SetConfig+0x408>
 8006d04:	bf00      	nop
 8006d06:	3710      	adds	r7, #16
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bdb0      	pop	{r4, r5, r7, pc}
 8006d0c:	51eb851f 	.word	0x51eb851f

08006d10 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8006d10:	b480      	push	{r7}
 8006d12:	b085      	sub	sp, #20
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
 8006d18:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	681a      	ldr	r2, [r3, #0]
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d28:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 8006d2a:	68fa      	ldr	r2, [r7, #12]
 8006d2c:	4b20      	ldr	r3, [pc, #128]	; (8006db0 <FSMC_NORSRAM_Init+0xa0>)
 8006d2e:	4013      	ands	r3, r2
 8006d30:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8006d3a:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8006d40:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 8006d46:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8006d4c:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 8006d52:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 8006d58:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 8006d5e:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 8006d64:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 8006d6a:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 8006d70:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 8006d76:	431a      	orrs	r2, r3
                     Init->WriteBurst
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 8006d7c:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8006d7e:	68fa      	ldr	r2, [r7, #12]
 8006d80:	4313      	orrs	r3, r2
 8006d82:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	689b      	ldr	r3, [r3, #8]
 8006d88:	2b08      	cmp	r3, #8
 8006d8a:	d103      	bne.n	8006d94 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d92:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	681a      	ldr	r2, [r3, #0]
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	68f9      	ldr	r1, [r7, #12]
 8006d9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8006da0:	2300      	movs	r3, #0
}
 8006da2:	4618      	mov	r0, r3
 8006da4:	3714      	adds	r7, #20
 8006da6:	46bd      	mov	sp, r7
 8006da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dac:	4770      	bx	lr
 8006dae:	bf00      	nop
 8006db0:	fff00080 	.word	0xfff00080

08006db4 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006db4:	b480      	push	{r7}
 8006db6:	b087      	sub	sp, #28
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	60f8      	str	r0, [r7, #12]
 8006dbc:	60b9      	str	r1, [r7, #8]
 8006dbe:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	1c5a      	adds	r2, r3, #1
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dce:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8006dd0:	697b      	ldr	r3, [r7, #20]
 8006dd2:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8006dd6:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	685b      	ldr	r3, [r3, #4]
 8006de0:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006de2:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8006de4:	68bb      	ldr	r3, [r7, #8]
 8006de6:	689b      	ldr	r3, [r3, #8]
 8006de8:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 8006dea:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	68db      	ldr	r3, [r3, #12]
 8006df0:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 8006df2:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	691b      	ldr	r3, [r3, #16]
 8006df8:	3b01      	subs	r3, #1
 8006dfa:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8006dfc:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 8006dfe:	68bb      	ldr	r3, [r7, #8]
 8006e00:	695b      	ldr	r3, [r3, #20]
 8006e02:	3b02      	subs	r3, #2
 8006e04:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8006e06:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006e0c:	4313      	orrs	r3, r2
 8006e0e:	697a      	ldr	r2, [r7, #20]
 8006e10:	4313      	orrs	r3, r2
 8006e12:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	1c5a      	adds	r2, r3, #1
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	6979      	ldr	r1, [r7, #20]
 8006e1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8006e20:	2300      	movs	r3, #0
}
 8006e22:	4618      	mov	r0, r3
 8006e24:	371c      	adds	r7, #28
 8006e26:	46bd      	mov	sp, r7
 8006e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2c:	4770      	bx	lr
	...

08006e30 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8006e30:	b480      	push	{r7}
 8006e32:	b087      	sub	sp, #28
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	60f8      	str	r0, [r7, #12]
 8006e38:	60b9      	str	r1, [r7, #8]
 8006e3a:	607a      	str	r2, [r7, #4]
 8006e3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 8006e3e:	2300      	movs	r3, #0
 8006e40:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006e48:	d122      	bne.n	8006e90 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	687a      	ldr	r2, [r7, #4]
 8006e4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e52:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8006e54:	697a      	ldr	r2, [r7, #20]
 8006e56:	4b15      	ldr	r3, [pc, #84]	; (8006eac <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8006e58:	4013      	ands	r3, r2
 8006e5a:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	685b      	ldr	r3, [r3, #4]
 8006e64:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006e66:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	689b      	ldr	r3, [r3, #8]
 8006e6c:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 8006e6e:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	68db      	ldr	r3, [r3, #12]
 8006e74:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 8006e76:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8006e7c:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006e7e:	697a      	ldr	r2, [r7, #20]
 8006e80:	4313      	orrs	r3, r2
 8006e82:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	687a      	ldr	r2, [r7, #4]
 8006e88:	6979      	ldr	r1, [r7, #20]
 8006e8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006e8e:	e005      	b.n	8006e9c <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	687a      	ldr	r2, [r7, #4]
 8006e94:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8006e98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8006e9c:	2300      	movs	r3, #0
}
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	371c      	adds	r7, #28
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea8:	4770      	bx	lr
 8006eaa:	bf00      	nop
 8006eac:	cff00000 	.word	0xcff00000

08006eb0 <aiInit>:
   "Eight", "Nine"};
/*
 * Init function to create and initialize a NN.
 */
int aiInit(const ai_u8* activations)
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b08e      	sub	sp, #56	; 0x38
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
    ai_error err;

    /* 1 - Specific AI data structure to provide the references of the
     * activation/working memory chunk and the weights/bias parameters */
    const ai_network_params params = {
 8006eb8:	4b26      	ldr	r3, [pc, #152]	; (8006f54 <aiInit+0xa4>)
 8006eba:	60fb      	str	r3, [r7, #12]
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	823b      	strh	r3, [r7, #16]
 8006ec0:	2301      	movs	r3, #1
 8006ec2:	827b      	strh	r3, [r7, #18]
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	82bb      	strh	r3, [r7, #20]
 8006ec8:	4b23      	ldr	r3, [pc, #140]	; (8006f58 <aiInit+0xa8>)
 8006eca:	61bb      	str	r3, [r7, #24]
            AI_DIGITCLASSIFICATION_DATA_WEIGHTS(ai_digitclassification_data_weights_get()),
 8006ecc:	f000 fae6 	bl	800749c <ai_digitclassification_data_weights_get>
 8006ed0:	4603      	mov	r3, r0
    const ai_network_params params = {
 8006ed2:	61fb      	str	r3, [r7, #28]
 8006ed4:	4b21      	ldr	r3, [pc, #132]	; (8006f5c <aiInit+0xac>)
 8006ed6:	623b      	str	r3, [r7, #32]
 8006ed8:	2301      	movs	r3, #1
 8006eda:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006edc:	2301      	movs	r3, #1
 8006ede:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	853b      	strh	r3, [r7, #40]	; 0x28
 8006ee4:	f44f 730a 	mov.w	r3, #552	; 0x228
 8006ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	633b      	str	r3, [r7, #48]	; 0x30
            AI_DIGITCLASSIFICATION_DATA_ACTIVATIONS(activations)
    };

    /* 2 - Create an instance of the NN */
    err = ai_digitclassification_create(&digitclassification, AI_DIGITCLASSIFICATION_DATA_CONFIG);
 8006eee:	2100      	movs	r1, #0
 8006ef0:	481b      	ldr	r0, [pc, #108]	; (8006f60 <aiInit+0xb0>)
 8006ef2:	f000 fa6d 	bl	80073d0 <ai_digitclassification_create>
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	637b      	str	r3, [r7, #52]	; 0x34
    if (err.type != AI_ERROR_NONE) {
 8006efa:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d002      	beq.n	8006f08 <aiInit+0x58>
	    return -1;
 8006f02:	f04f 33ff 	mov.w	r3, #4294967295
 8006f06:	e020      	b.n	8006f4a <aiInit+0x9a>
    }

    /* 3 - Initialize the NN - Ready to be used */
    if (!ai_digitclassification_init(digitclassification, &params)) {
 8006f08:	4b15      	ldr	r3, [pc, #84]	; (8006f60 <aiInit+0xb0>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f107 020c 	add.w	r2, r7, #12
 8006f10:	4611      	mov	r1, r2
 8006f12:	4618      	mov	r0, r3
 8006f14:	f000 fa7e 	bl	8007414 <ai_digitclassification_init>
 8006f18:	4603      	mov	r3, r0
 8006f1a:	f083 0301 	eor.w	r3, r3, #1
 8006f1e:	b2db      	uxtb	r3, r3
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d011      	beq.n	8006f48 <aiInit+0x98>
        err = ai_digitclassification_get_error(digitclassification);
 8006f24:	4b0e      	ldr	r3, [pc, #56]	; (8006f60 <aiInit+0xb0>)
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	4618      	mov	r0, r3
 8006f2a:	f000 fa45 	bl	80073b8 <ai_digitclassification_get_error>
 8006f2e:	4603      	mov	r3, r0
 8006f30:	637b      	str	r3, [r7, #52]	; 0x34
        ai_digitclassification_destroy(digitclassification);
 8006f32:	4b0b      	ldr	r3, [pc, #44]	; (8006f60 <aiInit+0xb0>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	4618      	mov	r0, r3
 8006f38:	f000 fa60 	bl	80073fc <ai_digitclassification_destroy>
        digitclassification = AI_HANDLE_NULL;
 8006f3c:	4b08      	ldr	r3, [pc, #32]	; (8006f60 <aiInit+0xb0>)
 8006f3e:	2200      	movs	r2, #0
 8006f40:	601a      	str	r2, [r3, #0]
	    return -2;
 8006f42:	f06f 0301 	mvn.w	r3, #1
 8006f46:	e000      	b.n	8006f4a <aiInit+0x9a>
    }

    return 0;
 8006f48:	2300      	movs	r3, #0
}
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	3738      	adds	r7, #56	; 0x38
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	bd80      	pop	{r7, pc}
 8006f52:	bf00      	nop
 8006f54:	40040440 	.word	0x40040440
 8006f58:	00063628 	.word	0x00063628
 8006f5c:	00040440 	.word	0x00040440
 8006f60:	2000050c 	.word	0x2000050c

08006f64 <aiRun>:

/*
 * Run function to execute an inference.
 */
int aiRun(const void *in_data, void *out_data)
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b084      	sub	sp, #16
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
 8006f6c:	6039      	str	r1, [r7, #0]
    ai_i32 nbatch;
    ai_error err;

    /* Parameters checking */
    if (!in_data || !out_data || !digitclassification)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d006      	beq.n	8006f82 <aiRun+0x1e>
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d003      	beq.n	8006f82 <aiRun+0x1e>
 8006f7a:	4b17      	ldr	r3, [pc, #92]	; (8006fd8 <aiRun+0x74>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d102      	bne.n	8006f88 <aiRun+0x24>
        return -1;
 8006f82:	f04f 33ff 	mov.w	r3, #4294967295
 8006f86:	e022      	b.n	8006fce <aiRun+0x6a>

    /* Initialize input/output buffer handlers */
    ai_input[0].n_batches = 1;
 8006f88:	4b14      	ldr	r3, [pc, #80]	; (8006fdc <aiRun+0x78>)
 8006f8a:	2201      	movs	r2, #1
 8006f8c:	809a      	strh	r2, [r3, #4]
    ai_input[0].data = AI_HANDLE_PTR(in_data);
 8006f8e:	4a13      	ldr	r2, [pc, #76]	; (8006fdc <aiRun+0x78>)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6113      	str	r3, [r2, #16]
    ai_output[0].n_batches = 1;
 8006f94:	4b12      	ldr	r3, [pc, #72]	; (8006fe0 <aiRun+0x7c>)
 8006f96:	2201      	movs	r2, #1
 8006f98:	809a      	strh	r2, [r3, #4]
    ai_output[0].data = AI_HANDLE_PTR(out_data);
 8006f9a:	4a11      	ldr	r2, [pc, #68]	; (8006fe0 <aiRun+0x7c>)
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	6113      	str	r3, [r2, #16]

    /* 2 - Perform the inference */
    nbatch = ai_digitclassification_run(digitclassification, &ai_input[0], &ai_output[0]);
 8006fa0:	4b0d      	ldr	r3, [pc, #52]	; (8006fd8 <aiRun+0x74>)
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	4a0e      	ldr	r2, [pc, #56]	; (8006fe0 <aiRun+0x7c>)
 8006fa6:	490d      	ldr	r1, [pc, #52]	; (8006fdc <aiRun+0x78>)
 8006fa8:	4618      	mov	r0, r3
 8006faa:	f000 fa66 	bl	800747a <ai_digitclassification_run>
 8006fae:	60f8      	str	r0, [r7, #12]
    if (nbatch != 1) {
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	2b01      	cmp	r3, #1
 8006fb4:	d00a      	beq.n	8006fcc <aiRun+0x68>
        err = ai_digitclassification_get_error(digitclassification);
 8006fb6:	4b08      	ldr	r3, [pc, #32]	; (8006fd8 <aiRun+0x74>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	4618      	mov	r0, r3
 8006fbc:	f000 f9fc 	bl	80073b8 <ai_digitclassification_get_error>
 8006fc0:	4603      	mov	r3, r0
 8006fc2:	60bb      	str	r3, [r7, #8]
        // ...
        return err.code;
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8006fca:	e000      	b.n	8006fce <aiRun+0x6a>
    }

    return 0;
 8006fcc:	2300      	movs	r3, #0
}
 8006fce:	4618      	mov	r0, r3
 8006fd0:	3710      	adds	r7, #16
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd80      	pop	{r7, pc}
 8006fd6:	bf00      	nop
 8006fd8:	2000050c 	.word	0x2000050c
 8006fdc:	20000008 	.word	0x20000008
 8006fe0:	2000001c 	.word	0x2000001c

08006fe4 <MX_X_CUBE_AI_Init>:

/*************************************************************************
  *
  */
void MX_X_CUBE_AI_Init(void)
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	af00      	add	r7, sp, #0
    /* Activation/working buffer is allocated as a static memory chunk
     * (bss section) */
    AI_ALIGNED(4)
    static ai_u8 activations[AI_DIGITCLASSIFICATION_DATA_ACTIVATIONS_SIZE];

    aiInit(activations);
 8006fe8:	4802      	ldr	r0, [pc, #8]	; (8006ff4 <MX_X_CUBE_AI_Init+0x10>)
 8006fea:	f7ff ff61 	bl	8006eb0 <aiInit>
    /* USER CODE END 0 */
}
 8006fee:	bf00      	nop
 8006ff0:	bd80      	pop	{r7, pc}
 8006ff2:	bf00      	nop
 8006ff4:	20000510 	.word	0x20000510

08006ff8 <MX_X_CUBE_AI_Process>:

void MX_X_CUBE_AI_Process(void)
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b098      	sub	sp, #96	; 0x60
 8006ffc:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 1 */
	int nb_run = 2;
 8006ffe:	2302      	movs	r3, #2
 8007000:	65fb      	str	r3, [r7, #92]	; 0x5c
    int res;

    int ranking[OUTPUT_CLASS_NUMBER];

    for(int i=0; i<OUTPUT_CLASS_NUMBER;i++) ranking[i]=i;
 8007002:	2300      	movs	r3, #0
 8007004:	65bb      	str	r3, [r7, #88]	; 0x58
 8007006:	e00a      	b.n	800701e <MX_X_CUBE_AI_Process+0x26>
 8007008:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800700a:	009b      	lsls	r3, r3, #2
 800700c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8007010:	4413      	add	r3, r2
 8007012:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007014:	f843 2c5c 	str.w	r2, [r3, #-92]
 8007018:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800701a:	3301      	adds	r3, #1
 800701c:	65bb      	str	r3, [r7, #88]	; 0x58
 800701e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007020:	2b09      	cmp	r3, #9
 8007022:	ddf1      	ble.n	8007008 <MX_X_CUBE_AI_Process+0x10>

    AI_ALIGNED(4)
    static ai_i8 out_data[AI_DIGITCLASSIFICATION_OUT_1_SIZE_BYTES];

    /* Retrieve format/type of the first input tensor - index 0 */
    const ai_buffer_format fmt_ = AI_BUFFER_FORMAT(&ai_input[0]);
 8007024:	4b5f      	ldr	r3, [pc, #380]	; (80071a4 <MX_X_CUBE_AI_Process+0x1ac>)
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 800702c:	653b      	str	r3, [r7, #80]	; 0x50
    const uint32_t type_ = AI_BUFFER_FMT_GET_TYPE(fmt_);
 800702e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007030:	145b      	asrs	r3, r3, #17
 8007032:	f003 030f 	and.w	r3, r3, #15
 8007036:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Prepare parameters for float to Qmn conversion */
    const ai_i16 N_ = AI_BUFFER_FMT_GET_FBITS(fmt_);
 8007038:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800703a:	b2db      	uxtb	r3, r3
 800703c:	b29b      	uxth	r3, r3
 800703e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007042:	b29b      	uxth	r3, r3
 8007044:	3b40      	subs	r3, #64	; 0x40
 8007046:	b29b      	uxth	r3, r3
 8007048:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    const ai_float scale_ = (0x1U << N_);
 800704c:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8007050:	2201      	movs	r2, #1
 8007052:	fa02 f303 	lsl.w	r3, r2, r3
 8007056:	ee07 3a90 	vmov	s15, r3
 800705a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800705e:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    const ai_i16 M_ =  AI_BUFFER_FMT_GET_BITS(fmt_)
 8007062:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007064:	11db      	asrs	r3, r3, #7
 8007066:	b29b      	uxth	r3, r3
 8007068:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800706c:	b29a      	uxth	r2, r3
                       - AI_BUFFER_FMT_GET_SIGN(fmt_) - N_;
 800706e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007070:	15db      	asrs	r3, r3, #23
 8007072:	b29b      	uxth	r3, r3
 8007074:	f003 0301 	and.w	r3, r3, #1
 8007078:	b29b      	uxth	r3, r3
 800707a:	1ad3      	subs	r3, r2, r3
 800707c:	b29a      	uxth	r2, r3
 800707e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007082:	1ad3      	subs	r3, r2, r3
 8007084:	b29b      	uxth	r3, r3
    const ai_i16 M_ =  AI_BUFFER_FMT_GET_BITS(fmt_)
 8007086:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    const ai_float max_ = (ai_float)(0x1U << M_);
 800708a:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 800708e:	2201      	movs	r2, #1
 8007090:	fa02 f303 	lsl.w	r3, r2, r3
 8007094:	ee07 3a90 	vmov	s15, r3
 8007098:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800709c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    /* Perform nb_rub inferences (batch = 1) */
    while (--nb_run) {
 80070a0:	e076      	b.n	8007190 <MX_X_CUBE_AI_Process+0x198>

        /* ---------------------------------------- */
        /* Data generation and Pre-Process          */
        /* ---------------------------------------- */
        /* - fill the input buffer with random data */
        for (ai_size i=0;  i < AI_DIGITCLASSIFICATION_IN_1_SIZE; i++ ) {
 80070a2:	2300      	movs	r3, #0
 80070a4:	657b      	str	r3, [r7, #84]	; 0x54
 80070a6:	e056      	b.n	8007156 <MX_X_CUBE_AI_Process+0x15e>

            /* Generate random data in the range [-1, 1] */
            ai_float val = grayscale_image[i];
 80070a8:	4a3f      	ldr	r2, [pc, #252]	; (80071a8 <MX_X_CUBE_AI_Process+0x1b0>)
 80070aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80070ac:	4413      	add	r3, r2
 80070ae:	781b      	ldrb	r3, [r3, #0]
 80070b0:	ee07 3a90 	vmov	s15, r3
 80070b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070b8:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

            /* Convert the data if necessary */
            if (type_ == AI_BUFFER_FMT_TYPE_FLOAT) {
 80070bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070be:	2b01      	cmp	r3, #1
 80070c0:	d106      	bne.n	80070d0 <MX_X_CUBE_AI_Process+0xd8>
                ((ai_float *)in_data)[i] = val;
 80070c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80070c4:	009b      	lsls	r3, r3, #2
 80070c6:	4a39      	ldr	r2, [pc, #228]	; (80071ac <MX_X_CUBE_AI_Process+0x1b4>)
 80070c8:	4413      	add	r3, r2
 80070ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80070cc:	601a      	str	r2, [r3, #0]
 80070ce:	e03f      	b.n	8007150 <MX_X_CUBE_AI_Process+0x158>
            } else { /* AI_BUFFER_FMT_TYPE_Q */
                /* Scale the values in the range [-2^M, 2^M] */
                val *= max_;
 80070d0:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80070d4:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80070d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070dc:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
                /* Convert float to Qmn format */
                const ai_i32 tmp_ = AI_ROUND(val * scale_, ai_i32);
 80070e0:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80070e4:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80070e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070ec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80070f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070f4:	d50c      	bpl.n	8007110 <MX_X_CUBE_AI_Process+0x118>
 80070f6:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80070fa:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80070fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007102:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007106:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800710a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800710e:	e00b      	b.n	8007128 <MX_X_CUBE_AI_Process+0x130>
 8007110:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8007114:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8007118:	ee67 7a27 	vmul.f32	s15, s14, s15
 800711c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007120:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007124:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007128:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
                in_data[i] =  AI_CLAMP(tmp_, -128, 127, ai_i8);
 800712c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800712e:	2b7e      	cmp	r3, #126	; 0x7e
 8007130:	dc09      	bgt.n	8007146 <MX_X_CUBE_AI_Process+0x14e>
 8007132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007134:	f113 0f7f 	cmn.w	r3, #127	; 0x7f
 8007138:	db02      	blt.n	8007140 <MX_X_CUBE_AI_Process+0x148>
 800713a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800713c:	b25b      	sxtb	r3, r3
 800713e:	e003      	b.n	8007148 <MX_X_CUBE_AI_Process+0x150>
 8007140:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8007144:	e000      	b.n	8007148 <MX_X_CUBE_AI_Process+0x150>
 8007146:	237f      	movs	r3, #127	; 0x7f
 8007148:	4918      	ldr	r1, [pc, #96]	; (80071ac <MX_X_CUBE_AI_Process+0x1b4>)
 800714a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800714c:	440a      	add	r2, r1
 800714e:	7013      	strb	r3, [r2, #0]
        for (ai_size i=0;  i < AI_DIGITCLASSIFICATION_IN_1_SIZE; i++ ) {
 8007150:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007152:	3301      	adds	r3, #1
 8007154:	657b      	str	r3, [r7, #84]	; 0x54
 8007156:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007158:	f5b3 7f44 	cmp.w	r3, #784	; 0x310
 800715c:	d3a4      	bcc.n	80070a8 <MX_X_CUBE_AI_Process+0xb0>
            }
        }

        /* Perform the inference */
        res = aiRun(in_data, out_data);
 800715e:	4914      	ldr	r1, [pc, #80]	; (80071b0 <MX_X_CUBE_AI_Process+0x1b8>)
 8007160:	4812      	ldr	r0, [pc, #72]	; (80071ac <MX_X_CUBE_AI_Process+0x1b4>)
 8007162:	f7ff feff 	bl	8006f64 <aiRun>
 8007166:	63b8      	str	r0, [r7, #56]	; 0x38
        if(res==0)
 8007168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800716a:	2b00      	cmp	r3, #0
 800716c:	d110      	bne.n	8007190 <MX_X_CUBE_AI_Process+0x198>
               {
               	bubblesort(out_data,ranking,OUTPUT_CLASS_NUMBER);
 800716e:	1d3b      	adds	r3, r7, #4
 8007170:	220a      	movs	r2, #10
 8007172:	4619      	mov	r1, r3
 8007174:	480e      	ldr	r0, [pc, #56]	; (80071b0 <MX_X_CUBE_AI_Process+0x1b8>)
 8007176:	f000 f81f 	bl	80071b8 <bubblesort>
               	/* Print the classification result */
               	char* ptr=g_classes[ranking[0]];
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	4a0d      	ldr	r2, [pc, #52]	; (80071b4 <MX_X_CUBE_AI_Process+0x1bc>)
 800717e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007182:	637b      	str	r3, [r7, #52]	; 0x34
               	BSP_LCD_DisplayStringAt(230,120, ptr, 0x03);
 8007184:	2303      	movs	r3, #3
 8007186:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007188:	2178      	movs	r1, #120	; 0x78
 800718a:	20e6      	movs	r0, #230	; 0xe6
 800718c:	f001 faa4 	bl	80086d8 <BSP_LCD_DisplayStringAt>
    while (--nb_run) {
 8007190:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007192:	3b01      	subs	r3, #1
 8007194:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007196:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007198:	2b00      	cmp	r3, #0
 800719a:	d182      	bne.n	80070a2 <MX_X_CUBE_AI_Process+0xaa>

        /* Post-Process - process the output buffer */
        // ...
    }
    /* USER CODE END 1 */
}
 800719c:	bf00      	nop
 800719e:	3760      	adds	r7, #96	; 0x60
 80071a0:	46bd      	mov	sp, r7
 80071a2:	bd80      	pop	{r7, pc}
 80071a4:	20000008 	.word	0x20000008
 80071a8:	2000f680 	.word	0x2000f680
 80071ac:	20000738 	.word	0x20000738
 80071b0:	20001378 	.word	0x20001378
 80071b4:	20000030 	.word	0x20000030

080071b8 <bubblesort>:
  * @brief  Bubble sorting algorithm
  * @param  None
  * @retval None
  */
static void bubblesort(float *prob,int *classes, int size)
{
 80071b8:	b480      	push	{r7}
 80071ba:	b089      	sub	sp, #36	; 0x24
 80071bc:	af00      	add	r7, sp, #0
 80071be:	60f8      	str	r0, [r7, #12]
 80071c0:	60b9      	str	r1, [r7, #8]
 80071c2:	607a      	str	r2, [r7, #4]
  float p;
  int c;

  for(int i=0; i<size; i++)
 80071c4:	2300      	movs	r3, #0
 80071c6:	61fb      	str	r3, [r7, #28]
 80071c8:	e051      	b.n	800726e <bubblesort+0xb6>
  {
    for(int ii=0; ii<size-i-1; ii++)
 80071ca:	2300      	movs	r3, #0
 80071cc:	61bb      	str	r3, [r7, #24]
 80071ce:	e044      	b.n	800725a <bubblesort+0xa2>
    {
      if(prob[ii]<prob[ii+1])
 80071d0:	69bb      	ldr	r3, [r7, #24]
 80071d2:	009b      	lsls	r3, r3, #2
 80071d4:	68fa      	ldr	r2, [r7, #12]
 80071d6:	4413      	add	r3, r2
 80071d8:	ed93 7a00 	vldr	s14, [r3]
 80071dc:	69bb      	ldr	r3, [r7, #24]
 80071de:	3301      	adds	r3, #1
 80071e0:	009b      	lsls	r3, r3, #2
 80071e2:	68fa      	ldr	r2, [r7, #12]
 80071e4:	4413      	add	r3, r2
 80071e6:	edd3 7a00 	vldr	s15, [r3]
 80071ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80071ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071f2:	d52f      	bpl.n	8007254 <bubblesort+0x9c>
      {
        p=prob[ii];
 80071f4:	69bb      	ldr	r3, [r7, #24]
 80071f6:	009b      	lsls	r3, r3, #2
 80071f8:	68fa      	ldr	r2, [r7, #12]
 80071fa:	4413      	add	r3, r2
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	617b      	str	r3, [r7, #20]
        prob[ii]=prob[ii+1];
 8007200:	69bb      	ldr	r3, [r7, #24]
 8007202:	3301      	adds	r3, #1
 8007204:	009b      	lsls	r3, r3, #2
 8007206:	68fa      	ldr	r2, [r7, #12]
 8007208:	441a      	add	r2, r3
 800720a:	69bb      	ldr	r3, [r7, #24]
 800720c:	009b      	lsls	r3, r3, #2
 800720e:	68f9      	ldr	r1, [r7, #12]
 8007210:	440b      	add	r3, r1
 8007212:	6812      	ldr	r2, [r2, #0]
 8007214:	601a      	str	r2, [r3, #0]
        prob[ii+1]=p;
 8007216:	69bb      	ldr	r3, [r7, #24]
 8007218:	3301      	adds	r3, #1
 800721a:	009b      	lsls	r3, r3, #2
 800721c:	68fa      	ldr	r2, [r7, #12]
 800721e:	4413      	add	r3, r2
 8007220:	697a      	ldr	r2, [r7, #20]
 8007222:	601a      	str	r2, [r3, #0]
        c = classes[ii];
 8007224:	69bb      	ldr	r3, [r7, #24]
 8007226:	009b      	lsls	r3, r3, #2
 8007228:	68ba      	ldr	r2, [r7, #8]
 800722a:	4413      	add	r3, r2
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	613b      	str	r3, [r7, #16]
        classes[ii]=classes[ii+1];
 8007230:	69bb      	ldr	r3, [r7, #24]
 8007232:	3301      	adds	r3, #1
 8007234:	009b      	lsls	r3, r3, #2
 8007236:	68ba      	ldr	r2, [r7, #8]
 8007238:	441a      	add	r2, r3
 800723a:	69bb      	ldr	r3, [r7, #24]
 800723c:	009b      	lsls	r3, r3, #2
 800723e:	68b9      	ldr	r1, [r7, #8]
 8007240:	440b      	add	r3, r1
 8007242:	6812      	ldr	r2, [r2, #0]
 8007244:	601a      	str	r2, [r3, #0]
        classes[ii+1]=c;
 8007246:	69bb      	ldr	r3, [r7, #24]
 8007248:	3301      	adds	r3, #1
 800724a:	009b      	lsls	r3, r3, #2
 800724c:	68ba      	ldr	r2, [r7, #8]
 800724e:	4413      	add	r3, r2
 8007250:	693a      	ldr	r2, [r7, #16]
 8007252:	601a      	str	r2, [r3, #0]
    for(int ii=0; ii<size-i-1; ii++)
 8007254:	69bb      	ldr	r3, [r7, #24]
 8007256:	3301      	adds	r3, #1
 8007258:	61bb      	str	r3, [r7, #24]
 800725a:	687a      	ldr	r2, [r7, #4]
 800725c:	69fb      	ldr	r3, [r7, #28]
 800725e:	1ad3      	subs	r3, r2, r3
 8007260:	3b01      	subs	r3, #1
 8007262:	69ba      	ldr	r2, [r7, #24]
 8007264:	429a      	cmp	r2, r3
 8007266:	dbb3      	blt.n	80071d0 <bubblesort+0x18>
  for(int i=0; i<size; i++)
 8007268:	69fb      	ldr	r3, [r7, #28]
 800726a:	3301      	adds	r3, #1
 800726c:	61fb      	str	r3, [r7, #28]
 800726e:	69fa      	ldr	r2, [r7, #28]
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	429a      	cmp	r2, r3
 8007274:	dba9      	blt.n	80071ca <bubblesort+0x12>
      }
    }
  }
}
 8007276:	bf00      	nop
 8007278:	3724      	adds	r7, #36	; 0x24
 800727a:	46bd      	mov	sp, r7
 800727c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007280:	4770      	bx	lr
	...

08007284 <digitclassification_configure_activations>:


AI_DECLARE_STATIC
ai_bool digitclassification_configure_activations(
  ai_network* net_ctx, const ai_buffer* activation_buffer)
{
 8007284:	b480      	push	{r7}
 8007286:	b085      	sub	sp, #20
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
 800728c:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  activation_buffer && activation_buffer->data)

  ai_ptr activations = AI_PTR(AI_PTR_ALIGN(activation_buffer->data, 4));
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	691b      	ldr	r3, [r3, #16]
 8007292:	3303      	adds	r3, #3
 8007294:	f023 0303 	bic.w	r3, r3, #3
 8007298:	60fb      	str	r3, [r7, #12]
  AI_ASSERT( activations )

  {
    /* Updating activations (byte) offsets */
    input_0_output_array.data = AI_PTR(NULL);
 800729a:	4b14      	ldr	r3, [pc, #80]	; (80072ec <digitclassification_configure_activations+0x68>)
 800729c:	2200      	movs	r2, #0
 800729e:	609a      	str	r2, [r3, #8]
    input_0_output_array.data_start = AI_PTR(NULL);
 80072a0:	4b12      	ldr	r3, [pc, #72]	; (80072ec <digitclassification_configure_activations+0x68>)
 80072a2:	2200      	movs	r2, #0
 80072a4:	60da      	str	r2, [r3, #12]
    dense_1_output_array.data = AI_PTR(activations + 0);
 80072a6:	4a12      	ldr	r2, [pc, #72]	; (80072f0 <digitclassification_configure_activations+0x6c>)
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	6093      	str	r3, [r2, #8]
    dense_1_output_array.data_start = AI_PTR(activations + 0);
 80072ac:	4a10      	ldr	r2, [pc, #64]	; (80072f0 <digitclassification_configure_activations+0x6c>)
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	60d3      	str	r3, [r2, #12]
    dense_1_nl_output_array.data = AI_PTR(activations + 0);
 80072b2:	4a10      	ldr	r2, [pc, #64]	; (80072f4 <digitclassification_configure_activations+0x70>)
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	6093      	str	r3, [r2, #8]
    dense_1_nl_output_array.data_start = AI_PTR(activations + 0);
 80072b8:	4a0e      	ldr	r2, [pc, #56]	; (80072f4 <digitclassification_configure_activations+0x70>)
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	60d3      	str	r3, [r2, #12]
    dense_2_output_array.data = AI_PTR(activations + 512);
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80072c4:	4a0c      	ldr	r2, [pc, #48]	; (80072f8 <digitclassification_configure_activations+0x74>)
 80072c6:	6093      	str	r3, [r2, #8]
    dense_2_output_array.data_start = AI_PTR(activations + 512);
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80072ce:	4a0a      	ldr	r2, [pc, #40]	; (80072f8 <digitclassification_configure_activations+0x74>)
 80072d0:	60d3      	str	r3, [r2, #12]
    dense_2_nl_output_array.data = AI_PTR(NULL);
 80072d2:	4b0a      	ldr	r3, [pc, #40]	; (80072fc <digitclassification_configure_activations+0x78>)
 80072d4:	2200      	movs	r2, #0
 80072d6:	609a      	str	r2, [r3, #8]
    dense_2_nl_output_array.data_start = AI_PTR(NULL);
 80072d8:	4b08      	ldr	r3, [pc, #32]	; (80072fc <digitclassification_configure_activations+0x78>)
 80072da:	2200      	movs	r2, #0
 80072dc:	60da      	str	r2, [r3, #12]
    
  }
  return true;
 80072de:	2301      	movs	r3, #1
}
 80072e0:	4618      	mov	r0, r3
 80072e2:	3714      	adds	r7, #20
 80072e4:	46bd      	mov	sp, r7
 80072e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ea:	4770      	bx	lr
 80072ec:	200000e8 	.word	0x200000e8
 80072f0:	200000f8 	.word	0x200000f8
 80072f4:	20000108 	.word	0x20000108
 80072f8:	20000118 	.word	0x20000118
 80072fc:	20000128 	.word	0x20000128

08007300 <digitclassification_configure_weights>:


AI_DECLARE_STATIC
ai_bool digitclassification_configure_weights(
  ai_network* net_ctx, const ai_buffer* weights_buffer)
{
 8007300:	b480      	push	{r7}
 8007302:	b085      	sub	sp, #20
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
 8007308:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  weights_buffer && weights_buffer->data)

  ai_ptr weights = AI_PTR(weights_buffer->data);
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	691b      	ldr	r3, [r3, #16]
 800730e:	60fb      	str	r3, [r7, #12]
  AI_ASSERT( weights )

  {
    /* Updating weights (byte) offsets */
    dense_2_bias_array.format |= AI_FMT_FLAG_CONST;
 8007310:	4b25      	ldr	r3, [pc, #148]	; (80073a8 <digitclassification_configure_weights+0xa8>)
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007318:	4a23      	ldr	r2, [pc, #140]	; (80073a8 <digitclassification_configure_weights+0xa8>)
 800731a:	6013      	str	r3, [r2, #0]
    dense_2_bias_array.data = AI_PTR(weights + 407040);
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	f503 23c6 	add.w	r3, r3, #405504	; 0x63000
 8007322:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8007326:	4a20      	ldr	r2, [pc, #128]	; (80073a8 <digitclassification_configure_weights+0xa8>)
 8007328:	6093      	str	r3, [r2, #8]
    dense_2_bias_array.data_start = AI_PTR(weights + 407040);
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	f503 23c6 	add.w	r3, r3, #405504	; 0x63000
 8007330:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8007334:	4a1c      	ldr	r2, [pc, #112]	; (80073a8 <digitclassification_configure_weights+0xa8>)
 8007336:	60d3      	str	r3, [r2, #12]
  dense_2_weights_array.format |= AI_FMT_FLAG_CONST;
 8007338:	4b1c      	ldr	r3, [pc, #112]	; (80073ac <digitclassification_configure_weights+0xac>)
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007340:	4a1a      	ldr	r2, [pc, #104]	; (80073ac <digitclassification_configure_weights+0xac>)
 8007342:	6013      	str	r3, [r2, #0]
    dense_2_weights_array.data = AI_PTR(weights + 401920);
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	f503 23c4 	add.w	r3, r3, #401408	; 0x62000
 800734a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800734e:	4a17      	ldr	r2, [pc, #92]	; (80073ac <digitclassification_configure_weights+0xac>)
 8007350:	6093      	str	r3, [r2, #8]
    dense_2_weights_array.data_start = AI_PTR(weights + 401920);
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	f503 23c4 	add.w	r3, r3, #401408	; 0x62000
 8007358:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800735c:	4a13      	ldr	r2, [pc, #76]	; (80073ac <digitclassification_configure_weights+0xac>)
 800735e:	60d3      	str	r3, [r2, #12]
  dense_1_bias_array.format |= AI_FMT_FLAG_CONST;
 8007360:	4b13      	ldr	r3, [pc, #76]	; (80073b0 <digitclassification_configure_weights+0xb0>)
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007368:	4a11      	ldr	r2, [pc, #68]	; (80073b0 <digitclassification_configure_weights+0xb0>)
 800736a:	6013      	str	r3, [r2, #0]
    dense_1_bias_array.data = AI_PTR(weights + 401408);
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	f503 23c4 	add.w	r3, r3, #401408	; 0x62000
 8007372:	4a0f      	ldr	r2, [pc, #60]	; (80073b0 <digitclassification_configure_weights+0xb0>)
 8007374:	6093      	str	r3, [r2, #8]
    dense_1_bias_array.data_start = AI_PTR(weights + 401408);
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	f503 23c4 	add.w	r3, r3, #401408	; 0x62000
 800737c:	4a0c      	ldr	r2, [pc, #48]	; (80073b0 <digitclassification_configure_weights+0xb0>)
 800737e:	60d3      	str	r3, [r2, #12]
  dense_1_weights_array.format |= AI_FMT_FLAG_CONST;
 8007380:	4b0c      	ldr	r3, [pc, #48]	; (80073b4 <digitclassification_configure_weights+0xb4>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007388:	4a0a      	ldr	r2, [pc, #40]	; (80073b4 <digitclassification_configure_weights+0xb4>)
 800738a:	6013      	str	r3, [r2, #0]
    dense_1_weights_array.data = AI_PTR(weights + 0);
 800738c:	4a09      	ldr	r2, [pc, #36]	; (80073b4 <digitclassification_configure_weights+0xb4>)
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	6093      	str	r3, [r2, #8]
    dense_1_weights_array.data_start = AI_PTR(weights + 0);
 8007392:	4a08      	ldr	r2, [pc, #32]	; (80073b4 <digitclassification_configure_weights+0xb4>)
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	60d3      	str	r3, [r2, #12]
  
  }

  return true;
 8007398:	2301      	movs	r3, #1
}
 800739a:	4618      	mov	r0, r3
 800739c:	3714      	adds	r7, #20
 800739e:	46bd      	mov	sp, r7
 80073a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a4:	4770      	bx	lr
 80073a6:	bf00      	nop
 80073a8:	200000a8 	.word	0x200000a8
 80073ac:	200000b8 	.word	0x200000b8
 80073b0:	200000c8 	.word	0x200000c8
 80073b4:	200000d8 	.word	0x200000d8

080073b8 <ai_digitclassification_get_error>:
  return false;
}

AI_API_ENTRY
ai_error ai_digitclassification_get_error(ai_handle network)
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b082      	sub	sp, #8
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 80073c0:	6878      	ldr	r0, [r7, #4]
 80073c2:	f7f9 f949 	bl	8000658 <ai_platform_network_get_error>
 80073c6:	4603      	mov	r3, r0
}
 80073c8:	4618      	mov	r0, r3
 80073ca:	3708      	adds	r7, #8
 80073cc:	46bd      	mov	sp, r7
 80073ce:	bd80      	pop	{r7, pc}

080073d0 <ai_digitclassification_create>:

AI_API_ENTRY
ai_error ai_digitclassification_create(
  ai_handle* network, const ai_buffer* network_config)
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b084      	sub	sp, #16
 80073d4:	af02      	add	r7, sp, #8
 80073d6:	6078      	str	r0, [r7, #4]
 80073d8:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 80073da:	2300      	movs	r3, #0
 80073dc:	9301      	str	r3, [sp, #4]
 80073de:	2303      	movs	r3, #3
 80073e0:	9300      	str	r3, [sp, #0]
 80073e2:	2301      	movs	r3, #1
 80073e4:	4a04      	ldr	r2, [pc, #16]	; (80073f8 <ai_digitclassification_create+0x28>)
 80073e6:	6839      	ldr	r1, [r7, #0]
 80073e8:	6878      	ldr	r0, [r7, #4]
 80073ea:	f7f9 fa1b 	bl	8000824 <ai_platform_network_create>
 80073ee:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 80073f0:	4618      	mov	r0, r3
 80073f2:	3708      	adds	r7, #8
 80073f4:	46bd      	mov	sp, r7
 80073f6:	bd80      	pop	{r7, pc}
 80073f8:	20000058 	.word	0x20000058

080073fc <ai_digitclassification_destroy>:

AI_API_ENTRY
ai_handle ai_digitclassification_destroy(ai_handle network)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b082      	sub	sp, #8
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
  return ai_platform_network_destroy(network);
 8007404:	6878      	ldr	r0, [r7, #4]
 8007406:	f7f9 fa49 	bl	800089c <ai_platform_network_destroy>
 800740a:	4603      	mov	r3, r0
}
 800740c:	4618      	mov	r0, r3
 800740e:	3708      	adds	r7, #8
 8007410:	46bd      	mov	sp, r7
 8007412:	bd80      	pop	{r7, pc}

08007414 <ai_digitclassification_init>:

AI_API_ENTRY
ai_bool ai_digitclassification_init(
  ai_handle network, const ai_network_params* params)
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b084      	sub	sp, #16
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
 800741c:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 800741e:	6839      	ldr	r1, [r7, #0]
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	f7f9 fa5a 	bl	80008da <ai_platform_network_init>
 8007426:	60f8      	str	r0, [r7, #12]
  if ( !net_ctx ) return false;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d101      	bne.n	8007432 <ai_digitclassification_init+0x1e>
 800742e:	2300      	movs	r3, #0
 8007430:	e01f      	b.n	8007472 <ai_digitclassification_init+0x5e>

  ai_bool ok = true;
 8007432:	2301      	movs	r3, #1
 8007434:	72fb      	strb	r3, [r7, #11]
  ok &= digitclassification_configure_weights(net_ctx, &params->params);
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	4619      	mov	r1, r3
 800743a:	68f8      	ldr	r0, [r7, #12]
 800743c:	f7ff ff60 	bl	8007300 <digitclassification_configure_weights>
 8007440:	4603      	mov	r3, r0
 8007442:	461a      	mov	r2, r3
 8007444:	7afb      	ldrb	r3, [r7, #11]
 8007446:	4013      	ands	r3, r2
 8007448:	2b00      	cmp	r3, #0
 800744a:	bf14      	ite	ne
 800744c:	2301      	movne	r3, #1
 800744e:	2300      	moveq	r3, #0
 8007450:	72fb      	strb	r3, [r7, #11]
  ok &= digitclassification_configure_activations(net_ctx, &params->activations);
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	3314      	adds	r3, #20
 8007456:	4619      	mov	r1, r3
 8007458:	68f8      	ldr	r0, [r7, #12]
 800745a:	f7ff ff13 	bl	8007284 <digitclassification_configure_activations>
 800745e:	4603      	mov	r3, r0
 8007460:	461a      	mov	r2, r3
 8007462:	7afb      	ldrb	r3, [r7, #11]
 8007464:	4013      	ands	r3, r2
 8007466:	2b00      	cmp	r3, #0
 8007468:	bf14      	ite	ne
 800746a:	2301      	movne	r3, #1
 800746c:	2300      	moveq	r3, #0
 800746e:	72fb      	strb	r3, [r7, #11]

  return ok;
 8007470:	7afb      	ldrb	r3, [r7, #11]
}
 8007472:	4618      	mov	r0, r3
 8007474:	3710      	adds	r7, #16
 8007476:	46bd      	mov	sp, r7
 8007478:	bd80      	pop	{r7, pc}

0800747a <ai_digitclassification_run>:


AI_API_ENTRY
ai_i32 ai_digitclassification_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 800747a:	b580      	push	{r7, lr}
 800747c:	b084      	sub	sp, #16
 800747e:	af00      	add	r7, sp, #0
 8007480:	60f8      	str	r0, [r7, #12]
 8007482:	60b9      	str	r1, [r7, #8]
 8007484:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 8007486:	687a      	ldr	r2, [r7, #4]
 8007488:	68b9      	ldr	r1, [r7, #8]
 800748a:	68f8      	ldr	r0, [r7, #12]
 800748c:	f7f9 fa7b 	bl	8000986 <ai_platform_network_process>
 8007490:	4603      	mov	r3, r0
}
 8007492:	4618      	mov	r0, r3
 8007494:	3710      	adds	r7, #16
 8007496:	46bd      	mov	sp, r7
 8007498:	bd80      	pop	{r7, pc}
	...

0800749c <ai_digitclassification_data_weights_get>:
#include "digitclassification_data.h"

ai_handle ai_digitclassification_data_weights_get(void)
{
 800749c:	b480      	push	{r7}
 800749e:	af00      	add	r7, sp, #0
    0x9f, 0xbc, 0x27, 0x29, 0xcc, 0xbd, 0x35, 0x9d, 0x5c, 0x3d,
    0xb0, 0x06, 0x9f, 0x3d, 0x25, 0xf6, 0xe6, 0xbb, 0xf6, 0x5a,
    0x58, 0xbd, 0x37, 0x27, 0x38, 0x3e, 0x2e, 0xa3, 0xc3, 0xbc
  };

  return AI_HANDLE_PTR(s_digitclassification_weights);
 80074a0:	4b02      	ldr	r3, [pc, #8]	; (80074ac <ai_digitclassification_data_weights_get+0x10>)
}
 80074a2:	4618      	mov	r0, r3
 80074a4:	46bd      	mov	sp, r7
 80074a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074aa:	4770      	bx	lr
 80074ac:	0800b014 	.word	0x0800b014

080074b0 <LCD_IO_Init>:
/**
  * @brief  Configures the LCD_SPI interface.
  * @retval None
  */
void LCD_IO_Init(void)
{
 80074b0:	b480      	push	{r7}
 80074b2:	af00      	add	r7, sp, #0
//  HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_RESET);
//  HAL_Delay(100);
//  HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_SET);
//  HAL_Delay(300);

}
 80074b4:	bf00      	nop
 80074b6:	46bd      	mov	sp, r7
 80074b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074bc:	4770      	bx	lr
	...

080074c0 <LCD_IO_WriteMultipleData>:
  * @param  pData Pointer on the register value
  * @param  Size Size of byte to transmit to the register
  * @retval None
  */
void LCD_IO_WriteMultipleData(uint8_t *pData, uint32_t Size)
{
 80074c0:	b480      	push	{r7}
 80074c2:	b085      	sub	sp, #20
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
 80074c8:	6039      	str	r1, [r7, #0]
  uint32_t counter = 0;
 80074ca:	2300      	movs	r3, #0
 80074cc:	60fb      	str	r3, [r7, #12]

  for (counter = Size; counter != 0; counter--)
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	60fb      	str	r3, [r7, #12]
 80074d2:	e00c      	b.n	80074ee <LCD_IO_WriteMultipleData+0x2e>
  {
    /* Write 16-bit Data */
    LCD_RAM = *(uint16_t *)pData;
 80074d4:	4a0a      	ldr	r2, [pc, #40]	; (8007500 <LCD_IO_WriteMultipleData+0x40>)
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	881b      	ldrh	r3, [r3, #0]
 80074da:	8013      	strh	r3, [r2, #0]
    counter--;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	3b01      	subs	r3, #1
 80074e0:	60fb      	str	r3, [r7, #12]
    pData += 2;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	3302      	adds	r3, #2
 80074e6:	607b      	str	r3, [r7, #4]
  for (counter = Size; counter != 0; counter--)
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	3b01      	subs	r3, #1
 80074ec:	60fb      	str	r3, [r7, #12]
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d1ef      	bne.n	80074d4 <LCD_IO_WriteMultipleData+0x14>
  }
}
 80074f4:	bf00      	nop
 80074f6:	3714      	adds	r7, #20
 80074f8:	46bd      	mov	sp, r7
 80074fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fe:	4770      	bx	lr
 8007500:	60010000 	.word	0x60010000

08007504 <LCD_IO_WriteReg>:
  * @brief  register address.
  * @param  Reg
  * @retval None
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8007504:	b480      	push	{r7}
 8007506:	b083      	sub	sp, #12
 8007508:	af00      	add	r7, sp, #0
 800750a:	4603      	mov	r3, r0
 800750c:	71fb      	strb	r3, [r7, #7]
  /* Write 16-bit Data */
  LCD_REG  = (uint16_t)Reg;
 800750e:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8007512:	79fa      	ldrb	r2, [r7, #7]
 8007514:	b292      	uxth	r2, r2
 8007516:	801a      	strh	r2, [r3, #0]

}
 8007518:	bf00      	nop
 800751a:	370c      	adds	r7, #12
 800751c:	46bd      	mov	sp, r7
 800751e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007522:	4770      	bx	lr

08007524 <LCD_IO_ReadData>:
  * @brief  Read register value.
  * @param  Reg
  * @retval None
  */
uint16_t LCD_IO_ReadData(void) 
{
 8007524:	b480      	push	{r7}
 8007526:	af00      	add	r7, sp, #0
  /* Read 16-bit Reg */
  return (uint16_t)LCD_RAM;
 8007528:	4b03      	ldr	r3, [pc, #12]	; (8007538 <LCD_IO_ReadData+0x14>)
 800752a:	881b      	ldrh	r3, [r3, #0]
 800752c:	b29b      	uxth	r3, r3
  
}
 800752e:	4618      	mov	r0, r3
 8007530:	46bd      	mov	sp, r7
 8007532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007536:	4770      	bx	lr
 8007538:	60010000 	.word	0x60010000

0800753c <ili9325_Init>:
  * @brief  Initialize the ILI9325 LCD Component.
  * @param  None
  * @retval None
  */
void ili9325_Init(void)
{  
 800753c:	b580      	push	{r7, lr}
 800753e:	af00      	add	r7, sp, #0
  /* Initialize ILI9325 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8007540:	f7ff ffb6 	bl	80074b0 <LCD_IO_Init>
  
  /* Start Initial Sequence --------------------------------------------------*/
  ili9325_WriteReg(LCD_REG_0, 0x0001); /* Start internal OSC. */
 8007544:	2101      	movs	r1, #1
 8007546:	2000      	movs	r0, #0
 8007548:	f000 f9a7 	bl	800789a <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_1, 0x0100); /* Set SS and SM bit */
 800754c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007550:	2001      	movs	r0, #1
 8007552:	f000 f9a2 	bl	800789a <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_2, 0x0700); /* Set 1 line inversion */
 8007556:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 800755a:	2002      	movs	r0, #2
 800755c:	f000 f99d 	bl	800789a <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_3, 0x1018); /* Set GRAM write direction and BGR=1. */
 8007560:	f241 0118 	movw	r1, #4120	; 0x1018
 8007564:	2003      	movs	r0, #3
 8007566:	f000 f998 	bl	800789a <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_4, 0x0000); /* Resize register */
 800756a:	2100      	movs	r1, #0
 800756c:	2004      	movs	r0, #4
 800756e:	f000 f994 	bl	800789a <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_8, 0x0202); /* Set the back porch and front porch */
 8007572:	f240 2102 	movw	r1, #514	; 0x202
 8007576:	2008      	movs	r0, #8
 8007578:	f000 f98f 	bl	800789a <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_9, 0x0000); /* Set non-display area refresh cycle ISC[3:0] */
 800757c:	2100      	movs	r1, #0
 800757e:	2009      	movs	r0, #9
 8007580:	f000 f98b 	bl	800789a <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_10, 0x0000); /* FMARK function */
 8007584:	2100      	movs	r1, #0
 8007586:	200a      	movs	r0, #10
 8007588:	f000 f987 	bl	800789a <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_12, 0x0000); /* RGB interface setting */
 800758c:	2100      	movs	r1, #0
 800758e:	200c      	movs	r0, #12
 8007590:	f000 f983 	bl	800789a <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_13, 0x0000); /* Frame marker Position */
 8007594:	2100      	movs	r1, #0
 8007596:	200d      	movs	r0, #13
 8007598:	f000 f97f 	bl	800789a <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_15, 0x0000); /* RGB interface polarity */
 800759c:	2100      	movs	r1, #0
 800759e:	200f      	movs	r0, #15
 80075a0:	f000 f97b 	bl	800789a <ili9325_WriteReg>
  
  /* Power On sequence -------------------------------------------------------*/
  ili9325_WriteReg(LCD_REG_16, 0x0000); /* SAP, BT[3:0], AP, DSTB, SLP, STB */
 80075a4:	2100      	movs	r1, #0
 80075a6:	2010      	movs	r0, #16
 80075a8:	f000 f977 	bl	800789a <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_17, 0x0000); /* DC1[2:0], DC0[2:0], VC[2:0] */
 80075ac:	2100      	movs	r1, #0
 80075ae:	2011      	movs	r0, #17
 80075b0:	f000 f973 	bl	800789a <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_18, 0x0000); /* VREG1OUT voltage */
 80075b4:	2100      	movs	r1, #0
 80075b6:	2012      	movs	r0, #18
 80075b8:	f000 f96f 	bl	800789a <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_19, 0x0000); /* VDV[4:0] for VCOM amplitude */
 80075bc:	2100      	movs	r1, #0
 80075be:	2013      	movs	r0, #19
 80075c0:	f000 f96b 	bl	800789a <ili9325_WriteReg>

  ili9325_WriteReg(LCD_REG_16, 0x17B0); /* SAP, BT[3:0], AP, DSTB, SLP, STB */
 80075c4:	f241 71b0 	movw	r1, #6064	; 0x17b0
 80075c8:	2010      	movs	r0, #16
 80075ca:	f000 f966 	bl	800789a <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_17, 0x0137); /* DC1[2:0], DC0[2:0], VC[2:0] */
 80075ce:	f240 1137 	movw	r1, #311	; 0x137
 80075d2:	2011      	movs	r0, #17
 80075d4:	f000 f961 	bl	800789a <ili9325_WriteReg>

  ili9325_WriteReg(LCD_REG_18, 0x0139); /* VREG1OUT voltage */
 80075d8:	f240 1139 	movw	r1, #313	; 0x139
 80075dc:	2012      	movs	r0, #18
 80075de:	f000 f95c 	bl	800789a <ili9325_WriteReg>

  ili9325_WriteReg(LCD_REG_19, 0x1d00); /* VDV[4:0] for VCOM amplitude */
 80075e2:	f44f 51e8 	mov.w	r1, #7424	; 0x1d00
 80075e6:	2013      	movs	r0, #19
 80075e8:	f000 f957 	bl	800789a <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_41, 0x0013); /* VCM[4:0] for VCOMH */
 80075ec:	2113      	movs	r1, #19
 80075ee:	2029      	movs	r0, #41	; 0x29
 80075f0:	f000 f953 	bl	800789a <ili9325_WriteReg>

  ili9325_WriteReg(LCD_REG_32, 0x0000); /* GRAM horizontal Address */
 80075f4:	2100      	movs	r1, #0
 80075f6:	2020      	movs	r0, #32
 80075f8:	f000 f94f 	bl	800789a <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_33, 0x0000); /* GRAM Vertical Address */
 80075fc:	2100      	movs	r1, #0
 80075fe:	2021      	movs	r0, #33	; 0x21
 8007600:	f000 f94b 	bl	800789a <ili9325_WriteReg>

  /* Adjust the Gamma Curve (ILI9325) ----------------------------------------*/
  ili9325_WriteReg(LCD_REG_48, 0x0007);
 8007604:	2107      	movs	r1, #7
 8007606:	2030      	movs	r0, #48	; 0x30
 8007608:	f000 f947 	bl	800789a <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_49, 0x0302);
 800760c:	f240 3102 	movw	r1, #770	; 0x302
 8007610:	2031      	movs	r0, #49	; 0x31
 8007612:	f000 f942 	bl	800789a <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_50, 0x0105);
 8007616:	f240 1105 	movw	r1, #261	; 0x105
 800761a:	2032      	movs	r0, #50	; 0x32
 800761c:	f000 f93d 	bl	800789a <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_53, 0x0206);
 8007620:	f240 2106 	movw	r1, #518	; 0x206
 8007624:	2035      	movs	r0, #53	; 0x35
 8007626:	f000 f938 	bl	800789a <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_54, 0x0808);
 800762a:	f640 0108 	movw	r1, #2056	; 0x808
 800762e:	2036      	movs	r0, #54	; 0x36
 8007630:	f000 f933 	bl	800789a <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_55, 0x0206);
 8007634:	f240 2106 	movw	r1, #518	; 0x206
 8007638:	2037      	movs	r0, #55	; 0x37
 800763a:	f000 f92e 	bl	800789a <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_56, 0x0504);
 800763e:	f240 5104 	movw	r1, #1284	; 0x504
 8007642:	2038      	movs	r0, #56	; 0x38
 8007644:	f000 f929 	bl	800789a <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_57, 0x0007);
 8007648:	2107      	movs	r1, #7
 800764a:	2039      	movs	r0, #57	; 0x39
 800764c:	f000 f925 	bl	800789a <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_60, 0x0105);
 8007650:	f240 1105 	movw	r1, #261	; 0x105
 8007654:	203c      	movs	r0, #60	; 0x3c
 8007656:	f000 f920 	bl	800789a <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_61, 0x0808);
 800765a:	f640 0108 	movw	r1, #2056	; 0x808
 800765e:	203d      	movs	r0, #61	; 0x3d
 8007660:	f000 f91b 	bl	800789a <ili9325_WriteReg>
  HAL_Delay(50); 
 8007664:	2032      	movs	r0, #50	; 0x32
 8007666:	f7fd f9bf 	bl	80049e8 <HAL_Delay>
  /* Set GRAM area -----------------------------------------------------------*/
  ili9325_WriteReg(LCD_REG_80, 0x0000); /* Horizontal GRAM Start Address */
 800766a:	2100      	movs	r1, #0
 800766c:	2050      	movs	r0, #80	; 0x50
 800766e:	f000 f914 	bl	800789a <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_81, 0x00EF); /* Horizontal GRAM End Address */
 8007672:	21ef      	movs	r1, #239	; 0xef
 8007674:	2051      	movs	r0, #81	; 0x51
 8007676:	f000 f910 	bl	800789a <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_82, 0x0000); /* Vertical GRAM Start Address */
 800767a:	2100      	movs	r1, #0
 800767c:	2052      	movs	r0, #82	; 0x52
 800767e:	f000 f90c 	bl	800789a <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_83, 0x013F); /* Vertical GRAM End Address */
 8007682:	f240 113f 	movw	r1, #319	; 0x13f
 8007686:	2053      	movs	r0, #83	; 0x53
 8007688:	f000 f907 	bl	800789a <ili9325_WriteReg>
  
  ili9325_WriteReg(LCD_REG_96,  0xA700); /* Gate Scan Line(GS=1, scan direction is G320~G1) */
 800768c:	f44f 4127 	mov.w	r1, #42752	; 0xa700
 8007690:	2060      	movs	r0, #96	; 0x60
 8007692:	f000 f902 	bl	800789a <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_97,  0x0001); /* NDL,VLE, REV */
 8007696:	2101      	movs	r1, #1
 8007698:	2061      	movs	r0, #97	; 0x61
 800769a:	f000 f8fe 	bl	800789a <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_106, 0x0000); /* set scrolling line */
 800769e:	2100      	movs	r1, #0
 80076a0:	206a      	movs	r0, #106	; 0x6a
 80076a2:	f000 f8fa 	bl	800789a <ili9325_WriteReg>
  
  /* Partial Display Control -------------------------------------------------*/
  ili9325_WriteReg(LCD_REG_128, 0x0000);
 80076a6:	2100      	movs	r1, #0
 80076a8:	2080      	movs	r0, #128	; 0x80
 80076aa:	f000 f8f6 	bl	800789a <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_129, 0x0000);
 80076ae:	2100      	movs	r1, #0
 80076b0:	2081      	movs	r0, #129	; 0x81
 80076b2:	f000 f8f2 	bl	800789a <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_130, 0x0000);
 80076b6:	2100      	movs	r1, #0
 80076b8:	2082      	movs	r0, #130	; 0x82
 80076ba:	f000 f8ee 	bl	800789a <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_131, 0x0000);
 80076be:	2100      	movs	r1, #0
 80076c0:	2083      	movs	r0, #131	; 0x83
 80076c2:	f000 f8ea 	bl	800789a <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_132, 0x0000);
 80076c6:	2100      	movs	r1, #0
 80076c8:	2084      	movs	r0, #132	; 0x84
 80076ca:	f000 f8e6 	bl	800789a <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_133, 0x0000);
 80076ce:	2100      	movs	r1, #0
 80076d0:	2085      	movs	r0, #133	; 0x85
 80076d2:	f000 f8e2 	bl	800789a <ili9325_WriteReg>
  
  /* Panel Control -----------------------------------------------------------*/
  ili9325_WriteReg(LCD_REG_144, 0x0010);
 80076d6:	2110      	movs	r1, #16
 80076d8:	2090      	movs	r0, #144	; 0x90
 80076da:	f000 f8de 	bl	800789a <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_146, 0x0000);
 80076de:	2100      	movs	r1, #0
 80076e0:	2092      	movs	r0, #146	; 0x92
 80076e2:	f000 f8da 	bl	800789a <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_147, 0x0003);
 80076e6:	2103      	movs	r1, #3
 80076e8:	2093      	movs	r0, #147	; 0x93
 80076ea:	f000 f8d6 	bl	800789a <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_149, 0x0110);
 80076ee:	f44f 7188 	mov.w	r1, #272	; 0x110
 80076f2:	2095      	movs	r0, #149	; 0x95
 80076f4:	f000 f8d1 	bl	800789a <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_151, 0x0000);
 80076f8:	2100      	movs	r1, #0
 80076fa:	2097      	movs	r0, #151	; 0x97
 80076fc:	f000 f8cd 	bl	800789a <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_152, 0x0000);
 8007700:	2100      	movs	r1, #0
 8007702:	2098      	movs	r0, #152	; 0x98
 8007704:	f000 f8c9 	bl	800789a <ili9325_WriteReg>
  
  /* set GRAM write direction and BGR = 1 */
  /* I/D=00 (Horizontal : increment, Vertical : decrement) */
  /* AM=1 (address is updated in vertical writing direction) */
  ili9325_WriteReg(LCD_REG_3, 0x1028);
 8007708:	f241 0128 	movw	r1, #4136	; 0x1028
 800770c:	2003      	movs	r0, #3
 800770e:	f000 f8c4 	bl	800789a <ili9325_WriteReg>
  
  /* 262K color and display ON */ 
  ili9325_WriteReg(LCD_REG_7, 0x0173);    
 8007712:	f240 1173 	movw	r1, #371	; 0x173
 8007716:	2007      	movs	r0, #7
 8007718:	f000 f8bf 	bl	800789a <ili9325_WriteReg>
  
  /* Set the Cursor */ 
  ili9325_SetCursor(0, 0);
 800771c:	2100      	movs	r1, #0
 800771e:	2000      	movs	r0, #0
 8007720:	f000 f86d 	bl	80077fe <ili9325_SetCursor>
  
  /* Prepare to write GRAM */
  LCD_IO_WriteReg(LCD_REG_34);
 8007724:	2022      	movs	r0, #34	; 0x22
 8007726:	f7ff feed 	bl	8007504 <LCD_IO_WriteReg>
}
 800772a:	bf00      	nop
 800772c:	bd80      	pop	{r7, pc}

0800772e <ili9325_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9325_DisplayOn(void)
{
 800772e:	b580      	push	{r7, lr}
 8007730:	af00      	add	r7, sp, #0
  /* Power On sequence -------------------------------------------------------*/
  ili9325_WriteReg(LCD_REG_16, 0x0000); /* SAP, BT[3:0], AP, DSTB, SLP, STB */
 8007732:	2100      	movs	r1, #0
 8007734:	2010      	movs	r0, #16
 8007736:	f000 f8b0 	bl	800789a <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_17, 0x0000); /* DC1[2:0], DC0[2:0], VC[2:0] */
 800773a:	2100      	movs	r1, #0
 800773c:	2011      	movs	r0, #17
 800773e:	f000 f8ac 	bl	800789a <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_18, 0x0000); /* VREG1OUT voltage */
 8007742:	2100      	movs	r1, #0
 8007744:	2012      	movs	r0, #18
 8007746:	f000 f8a8 	bl	800789a <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_19, 0x0000); /* VDV[4:0] for VCOM amplitude*/
 800774a:	2100      	movs	r1, #0
 800774c:	2013      	movs	r0, #19
 800774e:	f000 f8a4 	bl	800789a <ili9325_WriteReg>

  ili9325_WriteReg(LCD_REG_16, 0x17B0); /* SAP, BT[3:0], AP, DSTB, SLP, STB */
 8007752:	f241 71b0 	movw	r1, #6064	; 0x17b0
 8007756:	2010      	movs	r0, #16
 8007758:	f000 f89f 	bl	800789a <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_17, 0x0137); /* DC1[2:0], DC0[2:0], VC[2:0] */
 800775c:	f240 1137 	movw	r1, #311	; 0x137
 8007760:	2011      	movs	r0, #17
 8007762:	f000 f89a 	bl	800789a <ili9325_WriteReg>

  ili9325_WriteReg(LCD_REG_18, 0x0139); /* VREG1OUT voltage */
 8007766:	f240 1139 	movw	r1, #313	; 0x139
 800776a:	2012      	movs	r0, #18
 800776c:	f000 f895 	bl	800789a <ili9325_WriteReg>

  ili9325_WriteReg(LCD_REG_19, 0x1d00); /* VDV[4:0] for VCOM amplitude */
 8007770:	f44f 51e8 	mov.w	r1, #7424	; 0x1d00
 8007774:	2013      	movs	r0, #19
 8007776:	f000 f890 	bl	800789a <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_41, 0x0013); /* VCM[4:0] for VCOMH */
 800777a:	2113      	movs	r1, #19
 800777c:	2029      	movs	r0, #41	; 0x29
 800777e:	f000 f88c 	bl	800789a <ili9325_WriteReg>
 
  /* Display On */
  ili9325_WriteReg(LCD_REG_7, 0x0173); /* 262K color and display ON */
 8007782:	f240 1173 	movw	r1, #371	; 0x173
 8007786:	2007      	movs	r0, #7
 8007788:	f000 f887 	bl	800789a <ili9325_WriteReg>
}
 800778c:	bf00      	nop
 800778e:	bd80      	pop	{r7, pc}

08007790 <ili9325_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9325_DisplayOff(void)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	af00      	add	r7, sp, #0
  /* Power Off sequence ------------------------------------------------------*/
  ili9325_WriteReg(LCD_REG_16, 0x0000); /* SAP, BT[3:0], AP, DSTB, SLP, STB */
 8007794:	2100      	movs	r1, #0
 8007796:	2010      	movs	r0, #16
 8007798:	f000 f87f 	bl	800789a <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_17, 0x0000); /* DC1[2:0], DC0[2:0], VC[2:0] */
 800779c:	2100      	movs	r1, #0
 800779e:	2011      	movs	r0, #17
 80077a0:	f000 f87b 	bl	800789a <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_18, 0x0000); /* VREG1OUT voltage */
 80077a4:	2100      	movs	r1, #0
 80077a6:	2012      	movs	r0, #18
 80077a8:	f000 f877 	bl	800789a <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_19, 0x0000); /* VDV[4:0] for VCOM amplitude*/
 80077ac:	2100      	movs	r1, #0
 80077ae:	2013      	movs	r0, #19
 80077b0:	f000 f873 	bl	800789a <ili9325_WriteReg>
  
  ili9325_WriteReg(LCD_REG_41, 0x0000); /* VCM[4:0] for VCOMH */
 80077b4:	2100      	movs	r1, #0
 80077b6:	2029      	movs	r0, #41	; 0x29
 80077b8:	f000 f86f 	bl	800789a <ili9325_WriteReg>
  
  /* Display Off */
  ili9325_WriteReg(LCD_REG_7, 0x0); 
 80077bc:	2100      	movs	r1, #0
 80077be:	2007      	movs	r0, #7
 80077c0:	f000 f86b 	bl	800789a <ili9325_WriteReg>
}
 80077c4:	bf00      	nop
 80077c6:	bd80      	pop	{r7, pc}

080077c8 <ili9325_GetLcdPixelWidth>:
  * @brief  Get the LCD pixel Width.
  * @param  None
  * @retval The Lcd Pixel Width
  */
uint16_t ili9325_GetLcdPixelWidth(void)
{
 80077c8:	b480      	push	{r7}
 80077ca:	af00      	add	r7, sp, #0
 return (uint16_t)320;
 80077cc:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 80077d0:	4618      	mov	r0, r3
 80077d2:	46bd      	mov	sp, r7
 80077d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d8:	4770      	bx	lr

080077da <ili9325_GetLcdPixelHeight>:
  * @brief  Get the LCD pixel Height.
  * @param  None
  * @retval The Lcd Pixel Height
  */
uint16_t ili9325_GetLcdPixelHeight(void)
{
 80077da:	b480      	push	{r7}
 80077dc:	af00      	add	r7, sp, #0
 return (uint16_t)240;
 80077de:	23f0      	movs	r3, #240	; 0xf0
}
 80077e0:	4618      	mov	r0, r3
 80077e2:	46bd      	mov	sp, r7
 80077e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e8:	4770      	bx	lr

080077ea <ili9325_ReadID>:
  * @brief  Get the ILI9325 ID.
  * @param  None
  * @retval The ILI9325 ID 
  */
uint16_t ili9325_ReadID(void)
{
 80077ea:	b580      	push	{r7, lr}
 80077ec:	af00      	add	r7, sp, #0
  LCD_IO_Init(); 
 80077ee:	f7ff fe5f 	bl	80074b0 <LCD_IO_Init>
  return (ili9325_ReadReg(0x00));
 80077f2:	2000      	movs	r0, #0
 80077f4:	f000 f866 	bl	80078c4 <ili9325_ReadReg>
 80077f8:	4603      	mov	r3, r0
}
 80077fa:	4618      	mov	r0, r3
 80077fc:	bd80      	pop	{r7, pc}

080077fe <ili9325_SetCursor>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval None
  */
void ili9325_SetCursor(uint16_t Xpos, uint16_t Ypos)
{
 80077fe:	b580      	push	{r7, lr}
 8007800:	b082      	sub	sp, #8
 8007802:	af00      	add	r7, sp, #0
 8007804:	4603      	mov	r3, r0
 8007806:	460a      	mov	r2, r1
 8007808:	80fb      	strh	r3, [r7, #6]
 800780a:	4613      	mov	r3, r2
 800780c:	80bb      	strh	r3, [r7, #4]
//  ili9325_WriteReg(LCD_REG_32, Ypos);
//  ili9325_WriteReg(LCD_REG_33, (ILI9325_LCD_PIXEL_WIDTH - 1 - Xpos));

  ili9325_WriteReg(LCD_REG_32, (ILI9325_LCD_PIXEL_HEIGHT- 1 - Ypos));
 800780e:	88bb      	ldrh	r3, [r7, #4]
 8007810:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 8007814:	b29b      	uxth	r3, r3
 8007816:	4619      	mov	r1, r3
 8007818:	2020      	movs	r0, #32
 800781a:	f000 f83e 	bl	800789a <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_33, Xpos);
 800781e:	88fb      	ldrh	r3, [r7, #6]
 8007820:	4619      	mov	r1, r3
 8007822:	2021      	movs	r0, #33	; 0x21
 8007824:	f000 f839 	bl	800789a <ili9325_WriteReg>

}
 8007828:	bf00      	nop
 800782a:	3708      	adds	r7, #8
 800782c:	46bd      	mov	sp, r7
 800782e:	bd80      	pop	{r7, pc}

08007830 <ili9325_WritePixel>:
  * @param  Ypos: specifies the Y position.
  * @param  RGBCode: the RGB pixel color
  * @retval None
  */
void ili9325_WritePixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGBCode)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b082      	sub	sp, #8
 8007834:	af00      	add	r7, sp, #0
 8007836:	4603      	mov	r3, r0
 8007838:	80fb      	strh	r3, [r7, #6]
 800783a:	460b      	mov	r3, r1
 800783c:	80bb      	strh	r3, [r7, #4]
 800783e:	4613      	mov	r3, r2
 8007840:	807b      	strh	r3, [r7, #2]
  /* Set Cursor */
  ili9325_SetCursor(Xpos, Ypos);
 8007842:	88ba      	ldrh	r2, [r7, #4]
 8007844:	88fb      	ldrh	r3, [r7, #6]
 8007846:	4611      	mov	r1, r2
 8007848:	4618      	mov	r0, r3
 800784a:	f7ff ffd8 	bl	80077fe <ili9325_SetCursor>
  
  /* Prepare to write GRAM */
  LCD_IO_WriteReg(LCD_REG_34);
 800784e:	2022      	movs	r0, #34	; 0x22
 8007850:	f7ff fe58 	bl	8007504 <LCD_IO_WriteReg>

  /* Write 16-bit GRAM Reg */
  LCD_IO_WriteMultipleData((uint8_t*)&RGBCode, 2);
 8007854:	1cbb      	adds	r3, r7, #2
 8007856:	2102      	movs	r1, #2
 8007858:	4618      	mov	r0, r3
 800785a:	f7ff fe31 	bl	80074c0 <LCD_IO_WriteMultipleData>
}
 800785e:	bf00      	nop
 8007860:	3708      	adds	r7, #8
 8007862:	46bd      	mov	sp, r7
 8007864:	bd80      	pop	{r7, pc}

08007866 <ili9325_ReadPixel>:
  * @brief  Read pixel.
  * @param  None
  * @retval The RGB pixel color
  */
uint16_t ili9325_ReadPixel(uint16_t Xpos, uint16_t Ypos)
{
 8007866:	b580      	push	{r7, lr}
 8007868:	b082      	sub	sp, #8
 800786a:	af00      	add	r7, sp, #0
 800786c:	4603      	mov	r3, r0
 800786e:	460a      	mov	r2, r1
 8007870:	80fb      	strh	r3, [r7, #6]
 8007872:	4613      	mov	r3, r2
 8007874:	80bb      	strh	r3, [r7, #4]
  /* Set Cursor */
  ili9325_SetCursor(Xpos, Ypos);
 8007876:	88ba      	ldrh	r2, [r7, #4]
 8007878:	88fb      	ldrh	r3, [r7, #6]
 800787a:	4611      	mov	r1, r2
 800787c:	4618      	mov	r0, r3
 800787e:	f7ff ffbe 	bl	80077fe <ili9325_SetCursor>
  
  /* Prepare to write GRAM */
  LCD_IO_WriteReg(LCD_REG_34);
 8007882:	2022      	movs	r0, #34	; 0x22
 8007884:	f7ff fe3e 	bl	8007504 <LCD_IO_WriteReg>
  
  /* Dummy read */
  LCD_IO_ReadData();
 8007888:	f7ff fe4c 	bl	8007524 <LCD_IO_ReadData>
  
  /* Read 16-bit Reg */
  return (LCD_IO_ReadData());
 800788c:	f7ff fe4a 	bl	8007524 <LCD_IO_ReadData>
 8007890:	4603      	mov	r3, r0
}
 8007892:	4618      	mov	r0, r3
 8007894:	3708      	adds	r7, #8
 8007896:	46bd      	mov	sp, r7
 8007898:	bd80      	pop	{r7, pc}

0800789a <ili9325_WriteReg>:
  * @param  LCDReg: Address of the selected register.
  * @param  LCDRegValue: Value to write to the selected register.
  * @retval None
  */
void ili9325_WriteReg(uint8_t LCDReg, uint16_t LCDRegValue)
{
 800789a:	b580      	push	{r7, lr}
 800789c:	b082      	sub	sp, #8
 800789e:	af00      	add	r7, sp, #0
 80078a0:	4603      	mov	r3, r0
 80078a2:	460a      	mov	r2, r1
 80078a4:	71fb      	strb	r3, [r7, #7]
 80078a6:	4613      	mov	r3, r2
 80078a8:	80bb      	strh	r3, [r7, #4]
  LCD_IO_WriteReg(LCDReg);
 80078aa:	79fb      	ldrb	r3, [r7, #7]
 80078ac:	4618      	mov	r0, r3
 80078ae:	f7ff fe29 	bl	8007504 <LCD_IO_WriteReg>
  
  /* Write 16-bit GRAM Reg */
  LCD_IO_WriteMultipleData((uint8_t*)&LCDRegValue, 2);
 80078b2:	1d3b      	adds	r3, r7, #4
 80078b4:	2102      	movs	r1, #2
 80078b6:	4618      	mov	r0, r3
 80078b8:	f7ff fe02 	bl	80074c0 <LCD_IO_WriteMultipleData>
}
 80078bc:	bf00      	nop
 80078be:	3708      	adds	r7, #8
 80078c0:	46bd      	mov	sp, r7
 80078c2:	bd80      	pop	{r7, pc}

080078c4 <ili9325_ReadReg>:
  * @brief  Reads the selected LCD Register.
  * @param  LCDReg: address of the selected register.
  * @retval LCD Register Value.
  */
uint16_t ili9325_ReadReg(uint8_t LCDReg)
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b082      	sub	sp, #8
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	4603      	mov	r3, r0
 80078cc:	71fb      	strb	r3, [r7, #7]
  /* Write 16-bit Index (then Read Reg) */
  LCD_IO_WriteReg(LCDReg);
 80078ce:	79fb      	ldrb	r3, [r7, #7]
 80078d0:	4618      	mov	r0, r3
 80078d2:	f7ff fe17 	bl	8007504 <LCD_IO_WriteReg>

  /* Read 16-bit Reg */
  return (LCD_IO_ReadData());
 80078d6:	f7ff fe25 	bl	8007524 <LCD_IO_ReadData>
 80078da:	4603      	mov	r3, r0
}
 80078dc:	4618      	mov	r0, r3
 80078de:	3708      	adds	r7, #8
 80078e0:	46bd      	mov	sp, r7
 80078e2:	bd80      	pop	{r7, pc}

080078e4 <ili9325_SetDisplayWindow>:
  * @param  Height: display window height.
  * @param  Width:  display window width.
  * @retval None
  */
void ili9325_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 80078e4:	b590      	push	{r4, r7, lr}
 80078e6:	b083      	sub	sp, #12
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	4604      	mov	r4, r0
 80078ec:	4608      	mov	r0, r1
 80078ee:	4611      	mov	r1, r2
 80078f0:	461a      	mov	r2, r3
 80078f2:	4623      	mov	r3, r4
 80078f4:	80fb      	strh	r3, [r7, #6]
 80078f6:	4603      	mov	r3, r0
 80078f8:	80bb      	strh	r3, [r7, #4]
 80078fa:	460b      	mov	r3, r1
 80078fc:	807b      	strh	r3, [r7, #2]
 80078fe:	4613      	mov	r3, r2
 8007900:	803b      	strh	r3, [r7, #0]
//  ili9325_WriteReg(LCD_REG_82, ILI9325_LCD_PIXEL_WIDTH - Xpos - Width);
//  /* Vertical GRAM End Address */
//  ili9325_WriteReg(LCD_REG_83, ILI9325_LCD_PIXEL_WIDTH - Xpos - 1);   
  
  /* Horizontal GRAM Start Address */
  ili9325_WriteReg(LCD_REG_80, (ILI9325_LCD_PIXEL_HEIGHT - Ypos - Height));
 8007902:	88bb      	ldrh	r3, [r7, #4]
 8007904:	425b      	negs	r3, r3
 8007906:	b29a      	uxth	r2, r3
 8007908:	883b      	ldrh	r3, [r7, #0]
 800790a:	1ad3      	subs	r3, r2, r3
 800790c:	b29b      	uxth	r3, r3
 800790e:	33f0      	adds	r3, #240	; 0xf0
 8007910:	b29b      	uxth	r3, r3
 8007912:	4619      	mov	r1, r3
 8007914:	2050      	movs	r0, #80	; 0x50
 8007916:	f7ff ffc0 	bl	800789a <ili9325_WriteReg>
  /* Horizontal GRAM End Address */
  ili9325_WriteReg(LCD_REG_81, (ILI9325_LCD_PIXEL_HEIGHT - Ypos - 1));
 800791a:	88bb      	ldrh	r3, [r7, #4]
 800791c:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 8007920:	b29b      	uxth	r3, r3
 8007922:	4619      	mov	r1, r3
 8007924:	2051      	movs	r0, #81	; 0x51
 8007926:	f7ff ffb8 	bl	800789a <ili9325_WriteReg>
  
  /* Vertical GRAM Start Address */
  ili9325_WriteReg(LCD_REG_82,  Xpos);
 800792a:	88fb      	ldrh	r3, [r7, #6]
 800792c:	4619      	mov	r1, r3
 800792e:	2052      	movs	r0, #82	; 0x52
 8007930:	f7ff ffb3 	bl	800789a <ili9325_WriteReg>
  /* Vertical GRAM End Address */
  ili9325_WriteReg(LCD_REG_83, (Xpos + Width - 1));
 8007934:	88fa      	ldrh	r2, [r7, #6]
 8007936:	887b      	ldrh	r3, [r7, #2]
 8007938:	4413      	add	r3, r2
 800793a:	b29b      	uxth	r3, r3
 800793c:	3b01      	subs	r3, #1
 800793e:	b29b      	uxth	r3, r3
 8007940:	4619      	mov	r1, r3
 8007942:	2053      	movs	r0, #83	; 0x53
 8007944:	f7ff ffa9 	bl	800789a <ili9325_WriteReg>
  
}
 8007948:	bf00      	nop
 800794a:	370c      	adds	r7, #12
 800794c:	46bd      	mov	sp, r7
 800794e:	bd90      	pop	{r4, r7, pc}

08007950 <ili9325_DrawHLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.  
  * @retval None
  */
void ili9325_DrawHLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8007950:	b590      	push	{r4, r7, lr}
 8007952:	b085      	sub	sp, #20
 8007954:	af00      	add	r7, sp, #0
 8007956:	4604      	mov	r4, r0
 8007958:	4608      	mov	r0, r1
 800795a:	4611      	mov	r1, r2
 800795c:	461a      	mov	r2, r3
 800795e:	4623      	mov	r3, r4
 8007960:	80fb      	strh	r3, [r7, #6]
 8007962:	4603      	mov	r3, r0
 8007964:	80bb      	strh	r3, [r7, #4]
 8007966:	460b      	mov	r3, r1
 8007968:	807b      	strh	r3, [r7, #2]
 800796a:	4613      	mov	r3, r2
 800796c:	803b      	strh	r3, [r7, #0]
  uint16_t counter = 0;
 800796e:	2300      	movs	r3, #0
 8007970:	81fb      	strh	r3, [r7, #14]
  
  /* Set Cursor */
  ili9325_SetCursor(Xpos, Ypos); 
 8007972:	887a      	ldrh	r2, [r7, #2]
 8007974:	88bb      	ldrh	r3, [r7, #4]
 8007976:	4611      	mov	r1, r2
 8007978:	4618      	mov	r0, r3
 800797a:	f7ff ff40 	bl	80077fe <ili9325_SetCursor>
  
  /* Prepare to write GRAM */
  LCD_IO_WriteReg(LCD_REG_34);
 800797e:	2022      	movs	r0, #34	; 0x22
 8007980:	f7ff fdc0 	bl	8007504 <LCD_IO_WriteReg>

  /* Sent a complete line */
  for(counter = 0; counter < Length; counter++)
 8007984:	2300      	movs	r3, #0
 8007986:	81fb      	strh	r3, [r7, #14]
 8007988:	e007      	b.n	800799a <ili9325_DrawHLine+0x4a>
  {
    ArrayRGB[counter] = RGBCode;
 800798a:	89fb      	ldrh	r3, [r7, #14]
 800798c:	490a      	ldr	r1, [pc, #40]	; (80079b8 <ili9325_DrawHLine+0x68>)
 800798e:	88fa      	ldrh	r2, [r7, #6]
 8007990:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
  for(counter = 0; counter < Length; counter++)
 8007994:	89fb      	ldrh	r3, [r7, #14]
 8007996:	3301      	adds	r3, #1
 8007998:	81fb      	strh	r3, [r7, #14]
 800799a:	89fa      	ldrh	r2, [r7, #14]
 800799c:	883b      	ldrh	r3, [r7, #0]
 800799e:	429a      	cmp	r2, r3
 80079a0:	d3f3      	bcc.n	800798a <ili9325_DrawHLine+0x3a>
  }  

  LCD_IO_WriteMultipleData((uint8_t*)&ArrayRGB[0], Length * 2);
 80079a2:	883b      	ldrh	r3, [r7, #0]
 80079a4:	005b      	lsls	r3, r3, #1
 80079a6:	4619      	mov	r1, r3
 80079a8:	4803      	ldr	r0, [pc, #12]	; (80079b8 <ili9325_DrawHLine+0x68>)
 80079aa:	f7ff fd89 	bl	80074c0 <LCD_IO_WriteMultipleData>
}
 80079ae:	bf00      	nop
 80079b0:	3714      	adds	r7, #20
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bd90      	pop	{r4, r7, pc}
 80079b6:	bf00      	nop
 80079b8:	20001400 	.word	0x20001400

080079bc <ili9325_DrawVLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.  
  * @retval None
  */
void ili9325_DrawVLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 80079bc:	b590      	push	{r4, r7, lr}
 80079be:	b085      	sub	sp, #20
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	4604      	mov	r4, r0
 80079c4:	4608      	mov	r0, r1
 80079c6:	4611      	mov	r1, r2
 80079c8:	461a      	mov	r2, r3
 80079ca:	4623      	mov	r3, r4
 80079cc:	80fb      	strh	r3, [r7, #6]
 80079ce:	4603      	mov	r3, r0
 80079d0:	80bb      	strh	r3, [r7, #4]
 80079d2:	460b      	mov	r3, r1
 80079d4:	807b      	strh	r3, [r7, #2]
 80079d6:	4613      	mov	r3, r2
 80079d8:	803b      	strh	r3, [r7, #0]
  uint16_t counter = 0;
 80079da:	2300      	movs	r3, #0
 80079dc:	81fb      	strh	r3, [r7, #14]

  /* set GRAM write direction and BGR = 1 */
  /* I/D=00 (Horizontal : increment, Vertical : decrement) */
  /* AM=1 (address is updated in vertical writing direction) */
  ili9325_WriteReg(LCD_REG_3, 0x1020);
 80079de:	f44f 5181 	mov.w	r1, #4128	; 0x1020
 80079e2:	2003      	movs	r0, #3
 80079e4:	f7ff ff59 	bl	800789a <ili9325_WriteReg>
  
  /* Set Cursor */
  ili9325_SetCursor(Xpos, Ypos);
 80079e8:	887a      	ldrh	r2, [r7, #2]
 80079ea:	88bb      	ldrh	r3, [r7, #4]
 80079ec:	4611      	mov	r1, r2
 80079ee:	4618      	mov	r0, r3
 80079f0:	f7ff ff05 	bl	80077fe <ili9325_SetCursor>
  
  /* Prepare to write GRAM */
  LCD_IO_WriteReg(LCD_REG_34);
 80079f4:	2022      	movs	r0, #34	; 0x22
 80079f6:	f7ff fd85 	bl	8007504 <LCD_IO_WriteReg>

  /* Fill a complete vertical line */
  for(counter = 0; counter < Length; counter++)
 80079fa:	2300      	movs	r3, #0
 80079fc:	81fb      	strh	r3, [r7, #14]
 80079fe:	e007      	b.n	8007a10 <ili9325_DrawVLine+0x54>
  {
    ArrayRGB[counter] = RGBCode;
 8007a00:	89fb      	ldrh	r3, [r7, #14]
 8007a02:	490d      	ldr	r1, [pc, #52]	; (8007a38 <ili9325_DrawVLine+0x7c>)
 8007a04:	88fa      	ldrh	r2, [r7, #6]
 8007a06:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
  for(counter = 0; counter < Length; counter++)
 8007a0a:	89fb      	ldrh	r3, [r7, #14]
 8007a0c:	3301      	adds	r3, #1
 8007a0e:	81fb      	strh	r3, [r7, #14]
 8007a10:	89fa      	ldrh	r2, [r7, #14]
 8007a12:	883b      	ldrh	r3, [r7, #0]
 8007a14:	429a      	cmp	r2, r3
 8007a16:	d3f3      	bcc.n	8007a00 <ili9325_DrawVLine+0x44>
  }
  
  /* Write 16-bit GRAM Reg */
  LCD_IO_WriteMultipleData((uint8_t*)&ArrayRGB[0], Length * 2);
 8007a18:	883b      	ldrh	r3, [r7, #0]
 8007a1a:	005b      	lsls	r3, r3, #1
 8007a1c:	4619      	mov	r1, r3
 8007a1e:	4806      	ldr	r0, [pc, #24]	; (8007a38 <ili9325_DrawVLine+0x7c>)
 8007a20:	f7ff fd4e 	bl	80074c0 <LCD_IO_WriteMultipleData>
  
  /* set GRAM write direction and BGR = 1 */
  /* I/D=00 (Horizontal : increment, Vertical : decrement) */
  /* AM=1 (address is updated in vertical writing direction) */
  ili9325_WriteReg(LCD_REG_3, 0x1028);  
 8007a24:	f241 0128 	movw	r1, #4136	; 0x1028
 8007a28:	2003      	movs	r0, #3
 8007a2a:	f7ff ff36 	bl	800789a <ili9325_WriteReg>
}
 8007a2e:	bf00      	nop
 8007a30:	3714      	adds	r7, #20
 8007a32:	46bd      	mov	sp, r7
 8007a34:	bd90      	pop	{r4, r7, pc}
 8007a36:	bf00      	nop
 8007a38:	20001400 	.word	0x20001400

08007a3c <ili9325_DrawBitmap>:
  * @param  Xpos: Bmp X position in the LCD
  * @param  Ypos: Bmp Y position in the LCD    
  * @retval None
  */
void ili9325_DrawBitmap(uint16_t Xpos, uint16_t Ypos, uint8_t *pbmp)
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b084      	sub	sp, #16
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	4603      	mov	r3, r0
 8007a44:	603a      	str	r2, [r7, #0]
 8007a46:	80fb      	strh	r3, [r7, #6]
 8007a48:	460b      	mov	r3, r1
 8007a4a:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, size = 0;
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	60fb      	str	r3, [r7, #12]
 8007a50:	2300      	movs	r3, #0
 8007a52:	60bb      	str	r3, [r7, #8]
  /* Read bitmap size */
  size = *(volatile uint16_t *) (pbmp + 2);
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	3302      	adds	r3, #2
 8007a58:	881b      	ldrh	r3, [r3, #0]
 8007a5a:	b29b      	uxth	r3, r3
 8007a5c:	60bb      	str	r3, [r7, #8]
  size |= (*(volatile uint16_t *) (pbmp + 4)) << 16;
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	3304      	adds	r3, #4
 8007a62:	881b      	ldrh	r3, [r3, #0]
 8007a64:	b29b      	uxth	r3, r3
 8007a66:	041b      	lsls	r3, r3, #16
 8007a68:	461a      	mov	r2, r3
 8007a6a:	68bb      	ldr	r3, [r7, #8]
 8007a6c:	4313      	orrs	r3, r2
 8007a6e:	60bb      	str	r3, [r7, #8]
  /* Get bitmap data address offset */
  index = *(volatile uint16_t *) (pbmp + 10);
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	330a      	adds	r3, #10
 8007a74:	881b      	ldrh	r3, [r3, #0]
 8007a76:	b29b      	uxth	r3, r3
 8007a78:	60fb      	str	r3, [r7, #12]
  index |= (*(volatile uint16_t *) (pbmp + 12)) << 16;
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	330c      	adds	r3, #12
 8007a7e:	881b      	ldrh	r3, [r3, #0]
 8007a80:	b29b      	uxth	r3, r3
 8007a82:	041b      	lsls	r3, r3, #16
 8007a84:	461a      	mov	r2, r3
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	4313      	orrs	r3, r2
 8007a8a:	60fb      	str	r3, [r7, #12]
  size = (size - index)/2;
 8007a8c:	68ba      	ldr	r2, [r7, #8]
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	1ad3      	subs	r3, r2, r3
 8007a92:	085b      	lsrs	r3, r3, #1
 8007a94:	60bb      	str	r3, [r7, #8]
  pbmp += index;
 8007a96:	683a      	ldr	r2, [r7, #0]
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	4413      	add	r3, r2
 8007a9c:	603b      	str	r3, [r7, #0]
  /* Set GRAM write direction and BGR = 1 */
  /* I/D=00 (Horizontal : decrement, Vertical : decrement) */
  /* AM=1 (address is updated in vertical writing direction) */
  ili9325_WriteReg(LCD_REG_3, 0x1038);
 8007a9e:	f241 0138 	movw	r1, #4152	; 0x1038
 8007aa2:	2003      	movs	r0, #3
 8007aa4:	f7ff fef9 	bl	800789a <ili9325_WriteReg>

  /* Set Cursor */
  ili9325_SetCursor(Xpos, Ypos);  
 8007aa8:	88ba      	ldrh	r2, [r7, #4]
 8007aaa:	88fb      	ldrh	r3, [r7, #6]
 8007aac:	4611      	mov	r1, r2
 8007aae:	4618      	mov	r0, r3
 8007ab0:	f7ff fea5 	bl	80077fe <ili9325_SetCursor>
  
  /* Prepare to write GRAM */
  LCD_IO_WriteReg(LCD_REG_34);
 8007ab4:	2022      	movs	r0, #34	; 0x22
 8007ab6:	f7ff fd25 	bl	8007504 <LCD_IO_WriteReg>
 
  LCD_IO_WriteMultipleData((uint8_t*)pbmp, size*2);
 8007aba:	68bb      	ldr	r3, [r7, #8]
 8007abc:	005b      	lsls	r3, r3, #1
 8007abe:	4619      	mov	r1, r3
 8007ac0:	6838      	ldr	r0, [r7, #0]
 8007ac2:	f7ff fcfd 	bl	80074c0 <LCD_IO_WriteMultipleData>
 
  /* Set GRAM write direction and BGR = 1 */
  /* I/D = 01 (Horizontal : increment, Vertical : decrement) */
  /* AM = 1 (address is updated in vertical writing direction) */
  ili9325_WriteReg(LCD_REG_3, 0x1028);
 8007ac6:	f241 0128 	movw	r1, #4136	; 0x1028
 8007aca:	2003      	movs	r0, #3
 8007acc:	f7ff fee5 	bl	800789a <ili9325_WriteReg>
}
 8007ad0:	bf00      	nop
 8007ad2:	3710      	adds	r7, #16
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	bd80      	pop	{r7, pc}

08007ad8 <ili9325_DrawRGBImage>:
  * @param  Xsize: Image X size in the LCD
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  */
void ili9325_DrawRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint8_t *pdata)
{
 8007ad8:	b590      	push	{r4, r7, lr}
 8007ada:	b085      	sub	sp, #20
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	4604      	mov	r4, r0
 8007ae0:	4608      	mov	r0, r1
 8007ae2:	4611      	mov	r1, r2
 8007ae4:	461a      	mov	r2, r3
 8007ae6:	4623      	mov	r3, r4
 8007ae8:	80fb      	strh	r3, [r7, #6]
 8007aea:	4603      	mov	r3, r0
 8007aec:	80bb      	strh	r3, [r7, #4]
 8007aee:	460b      	mov	r3, r1
 8007af0:	807b      	strh	r3, [r7, #2]
 8007af2:	4613      	mov	r3, r2
 8007af4:	803b      	strh	r3, [r7, #0]
  uint32_t size = 0;
 8007af6:	2300      	movs	r3, #0
 8007af8:	60fb      	str	r3, [r7, #12]

  size = (Xsize * Ysize);
 8007afa:	887b      	ldrh	r3, [r7, #2]
 8007afc:	883a      	ldrh	r2, [r7, #0]
 8007afe:	fb02 f303 	mul.w	r3, r2, r3
 8007b02:	60fb      	str	r3, [r7, #12]

  /* Set Cursor */
  ili9325_SetCursor(Xpos, Ypos);  
 8007b04:	88ba      	ldrh	r2, [r7, #4]
 8007b06:	88fb      	ldrh	r3, [r7, #6]
 8007b08:	4611      	mov	r1, r2
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	f7ff fe77 	bl	80077fe <ili9325_SetCursor>
  
  /* Prepare to write GRAM */
  LCD_IO_WriteReg(LCD_REG_34);
 8007b10:	2022      	movs	r0, #34	; 0x22
 8007b12:	f7ff fcf7 	bl	8007504 <LCD_IO_WriteReg>
 
  LCD_IO_WriteMultipleData((uint8_t*)pdata, size*2);
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	005b      	lsls	r3, r3, #1
 8007b1a:	4619      	mov	r1, r3
 8007b1c:	6a38      	ldr	r0, [r7, #32]
 8007b1e:	f7ff fccf 	bl	80074c0 <LCD_IO_WriteMultipleData>
}
 8007b22:	bf00      	nop
 8007b24:	3714      	adds	r7, #20
 8007b26:	46bd      	mov	sp, r7
 8007b28:	bd90      	pop	{r4, r7, pc}
	...

08007b2c <ili9325_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void ili9325_Clear(uint16_t Color)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b084      	sub	sp, #16
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	4603      	mov	r3, r0
 8007b34:	80fb      	strh	r3, [r7, #6]
  uint32_t size = ILI9325_LCD_PIXEL_HEIGHT * ILI9325_LCD_PIXEL_WIDTH;
 8007b36:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8007b3a:	60fb      	str	r3, [r7, #12]
  
  /* Set Cursor */
  ili9325_SetCursor(0, 0);  
 8007b3c:	2100      	movs	r1, #0
 8007b3e:	2000      	movs	r0, #0
 8007b40:	f7ff fe5d 	bl	80077fe <ili9325_SetCursor>
  
  /* Prepare to write GRAM */
  LCD_IO_WriteReg(LCD_REG_34);
 8007b44:	2022      	movs	r0, #34	; 0x22
 8007b46:	f7ff fcdd 	bl	8007504 <LCD_IO_WriteReg>
  
  while((size--) != 0)
 8007b4a:	e002      	b.n	8007b52 <ili9325_Clear+0x26>
  {
    /* Write 16-bit Data */
    LCD_RAM = Color;
 8007b4c:	4a05      	ldr	r2, [pc, #20]	; (8007b64 <ili9325_Clear+0x38>)
 8007b4e:	88fb      	ldrh	r3, [r7, #6]
 8007b50:	8013      	strh	r3, [r2, #0]
  while((size--) != 0)
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	1e5a      	subs	r2, r3, #1
 8007b56:	60fa      	str	r2, [r7, #12]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d1f7      	bne.n	8007b4c <ili9325_Clear+0x20>
  }
}
 8007b5c:	bf00      	nop
 8007b5e:	3710      	adds	r7, #16
 8007b60:	46bd      	mov	sp, r7
 8007b62:	bd80      	pop	{r7, pc}
 8007b64:	60010000 	.word	0x60010000

08007b68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b08a      	sub	sp, #40	; 0x28
 8007b6c:	af08      	add	r7, sp, #32
  /* USER CODE BEGIN 1 */
	uint16_t linenum = 0;
 8007b6e:	2300      	movs	r3, #0
 8007b70:	80fb      	strh	r3, [r7, #6]
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007b72:	f7fc fec7 	bl	8004904 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007b76:	f000 f863 	bl	8007c40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007b7a:	f000 f945 	bl	8007e08 <MX_GPIO_Init>
  MX_CRC_Init();
 8007b7e:	f000 f8cf 	bl	8007d20 <MX_CRC_Init>
  MX_FSMC_Init();
 8007b82:	f000 fa27 	bl	8007fd4 <MX_FSMC_Init>
  MX_SPI3_Init();
 8007b86:	f000 f8df 	bl	8007d48 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8007b8a:	f000 f913 	bl	8007db4 <MX_USART1_UART_Init>
  MX_X_CUBE_AI_Init();
 8007b8e:	f7ff fa29 	bl	8006fe4 <MX_X_CUBE_AI_Init>
  /* USER CODE BEGIN 2 */
  /* Initialize the LCD */
  BSP_LCD_Init();
 8007b92:	f000 fcc5 	bl	8008520 <BSP_LCD_Init>
    /* Enable the LCD */
  BSP_LCD_DisplayOn();
 8007b96:	f001 f84f 	bl	8008c38 <BSP_LCD_DisplayOn>
    /* Touch Panel configuration */
  TouchPanel_Calibrate();
 8007b9a:	f001 ff77 	bl	8009a8c <TouchPanel_Calibrate>
  drawMenu();
 8007b9e:	f000 fc6d 	bl	800847c <drawMenu>
  while (1)
  {
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */

	  	  	getDisplayPoint(&display, Read_Ads7846(), &matrix );
 8007ba2:	f001 fbf9 	bl	8009398 <Read_Ads7846>
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	4a20      	ldr	r2, [pc, #128]	; (8007c2c <main+0xc4>)
 8007baa:	4619      	mov	r1, r3
 8007bac:	4820      	ldr	r0, [pc, #128]	; (8007c30 <main+0xc8>)
 8007bae:	f001 febe 	bl	800992e <getDisplayPoint>
	  	    if(((display.y < 190) && (display.y >= 2)))
 8007bb2:	4b1f      	ldr	r3, [pc, #124]	; (8007c30 <main+0xc8>)
 8007bb4:	885b      	ldrh	r3, [r3, #2]
 8007bb6:	2bbd      	cmp	r3, #189	; 0xbd
 8007bb8:	d814      	bhi.n	8007be4 <main+0x7c>
 8007bba:	4b1d      	ldr	r3, [pc, #116]	; (8007c30 <main+0xc8>)
 8007bbc:	885b      	ldrh	r3, [r3, #2]
 8007bbe:	2b01      	cmp	r3, #1
 8007bc0:	d910      	bls.n	8007be4 <main+0x7c>
	  	    {
	  	      if((display.x >= 318) || (display.x < 2))
 8007bc2:	4b1b      	ldr	r3, [pc, #108]	; (8007c30 <main+0xc8>)
 8007bc4:	881b      	ldrh	r3, [r3, #0]
 8007bc6:	f5b3 7f9f 	cmp.w	r3, #318	; 0x13e
 8007bca:	d20b      	bcs.n	8007be4 <main+0x7c>
 8007bcc:	4b18      	ldr	r3, [pc, #96]	; (8007c30 <main+0xc8>)
 8007bce:	881b      	ldrh	r3, [r3, #0]
 8007bd0:	2b01      	cmp	r3, #1
 8007bd2:	d907      	bls.n	8007be4 <main+0x7c>
	  	      {}
	  	      else
	  	      {
	  	        BSP_LCD_FillCircle(display.x, display.y, 2);
 8007bd4:	4b16      	ldr	r3, [pc, #88]	; (8007c30 <main+0xc8>)
 8007bd6:	8818      	ldrh	r0, [r3, #0]
 8007bd8:	4b15      	ldr	r3, [pc, #84]	; (8007c30 <main+0xc8>)
 8007bda:	885b      	ldrh	r3, [r3, #2]
 8007bdc:	2202      	movs	r2, #2
 8007bde:	4619      	mov	r1, r3
 8007be0:	f000 ff98 	bl	8008b14 <BSP_LCD_FillCircle>
	  	      }
	  	    }

	  	    if((HAL_GPIO_ReadPin(Push_button_GPIO_Port, Push_button_Pin))==GPIO_PIN_RESET)
 8007be4:	2101      	movs	r1, #1
 8007be6:	4813      	ldr	r0, [pc, #76]	; (8007c34 <main+0xcc>)
 8007be8:	f7fd fa2a 	bl	8005040 <HAL_GPIO_ReadPin>
 8007bec:	4603      	mov	r3, r0
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d1d7      	bne.n	8007ba2 <main+0x3a>
	  	    {
	  	    	loadImageIntoMemory();
 8007bf2:	f000 fc63 	bl	80084bc <loadImageIntoMemory>
	  	    	ImageResize((uint8_t*)original_image, 168, 168, 2, 0, 0, 0, 0,(uint8_t*)resized_image, 28, 28);
 8007bf6:	231c      	movs	r3, #28
 8007bf8:	9306      	str	r3, [sp, #24]
 8007bfa:	231c      	movs	r3, #28
 8007bfc:	9305      	str	r3, [sp, #20]
 8007bfe:	4b0e      	ldr	r3, [pc, #56]	; (8007c38 <main+0xd0>)
 8007c00:	9304      	str	r3, [sp, #16]
 8007c02:	2300      	movs	r3, #0
 8007c04:	9303      	str	r3, [sp, #12]
 8007c06:	2300      	movs	r3, #0
 8007c08:	9302      	str	r3, [sp, #8]
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	9301      	str	r3, [sp, #4]
 8007c0e:	2300      	movs	r3, #0
 8007c10:	9300      	str	r3, [sp, #0]
 8007c12:	2302      	movs	r3, #2
 8007c14:	22a8      	movs	r2, #168	; 0xa8
 8007c16:	21a8      	movs	r1, #168	; 0xa8
 8007c18:	4808      	ldr	r0, [pc, #32]	; (8007c3c <main+0xd4>)
 8007c1a:	f000 fa31 	bl	8008080 <ImageResize>
	  	    	convert_8Bit_Grayscale((uint16_t*)resized_image);
 8007c1e:	4806      	ldr	r0, [pc, #24]	; (8007c38 <main+0xd0>)
 8007c20:	f000 fb92 	bl	8008348 <convert_8Bit_Grayscale>
	  	    	MX_X_CUBE_AI_Process();
 8007c24:	f7ff f9e8 	bl	8006ff8 <MX_X_CUBE_AI_Process>
	  	  	getDisplayPoint(&display, Read_Ads7846(), &matrix );
 8007c28:	e7bb      	b.n	8007ba2 <main+0x3a>
 8007c2a:	bf00      	nop
 8007c2c:	200100b8 	.word	0x200100b8
 8007c30:	200100a8 	.word	0x200100a8
 8007c34:	40020000 	.word	0x40020000
 8007c38:	2000f990 	.word	0x2000f990
 8007c3c:	20001a00 	.word	0x20001a00

08007c40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b094      	sub	sp, #80	; 0x50
 8007c44:	af00      	add	r7, sp, #0
	 RCC_OscInitTypeDef RCC_OscInitStruct;
	  RCC_ClkInitTypeDef RCC_ClkInitStruct;

	    /**Configure the main internal regulator output voltage
	    */
	  __HAL_RCC_PWR_CLK_ENABLE();
 8007c46:	2300      	movs	r3, #0
 8007c48:	60bb      	str	r3, [r7, #8]
 8007c4a:	4b32      	ldr	r3, [pc, #200]	; (8007d14 <SystemClock_Config+0xd4>)
 8007c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c4e:	4a31      	ldr	r2, [pc, #196]	; (8007d14 <SystemClock_Config+0xd4>)
 8007c50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c54:	6413      	str	r3, [r2, #64]	; 0x40
 8007c56:	4b2f      	ldr	r3, [pc, #188]	; (8007d14 <SystemClock_Config+0xd4>)
 8007c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c5e:	60bb      	str	r3, [r7, #8]
 8007c60:	68bb      	ldr	r3, [r7, #8]

	  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8007c62:	2300      	movs	r3, #0
 8007c64:	607b      	str	r3, [r7, #4]
 8007c66:	4b2c      	ldr	r3, [pc, #176]	; (8007d18 <SystemClock_Config+0xd8>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	4a2b      	ldr	r2, [pc, #172]	; (8007d18 <SystemClock_Config+0xd8>)
 8007c6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007c70:	6013      	str	r3, [r2, #0]
 8007c72:	4b29      	ldr	r3, [pc, #164]	; (8007d18 <SystemClock_Config+0xd8>)
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007c7a:	607b      	str	r3, [r7, #4]
 8007c7c:	687b      	ldr	r3, [r7, #4]

	    /**Initializes the CPU, AHB and APB busses clocks
	    */
	  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8007c7e:	2302      	movs	r3, #2
 8007c80:	623b      	str	r3, [r7, #32]
	  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007c82:	2301      	movs	r3, #1
 8007c84:	62fb      	str	r3, [r7, #44]	; 0x2c
	  RCC_OscInitStruct.HSICalibrationValue = 16;
 8007c86:	2310      	movs	r3, #16
 8007c88:	633b      	str	r3, [r7, #48]	; 0x30
	  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007c8a:	2302      	movs	r3, #2
 8007c8c:	63bb      	str	r3, [r7, #56]	; 0x38
	  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8007c8e:	2300      	movs	r3, #0
 8007c90:	63fb      	str	r3, [r7, #60]	; 0x3c
	  RCC_OscInitStruct.PLL.PLLM = 8;
 8007c92:	2308      	movs	r3, #8
 8007c94:	643b      	str	r3, [r7, #64]	; 0x40
	  RCC_OscInitStruct.PLL.PLLN = 168;
 8007c96:	23a8      	movs	r3, #168	; 0xa8
 8007c98:	647b      	str	r3, [r7, #68]	; 0x44
	  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8007c9a:	2302      	movs	r3, #2
 8007c9c:	64bb      	str	r3, [r7, #72]	; 0x48
	  RCC_OscInitStruct.PLL.PLLQ = 4;
 8007c9e:	2304      	movs	r3, #4
 8007ca0:	64fb      	str	r3, [r7, #76]	; 0x4c
	  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007ca2:	f107 0320 	add.w	r3, r7, #32
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	f7fd f9fc 	bl	80050a4 <HAL_RCC_OscConfig>
 8007cac:	4603      	mov	r3, r0
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d001      	beq.n	8007cb6 <SystemClock_Config+0x76>
	  {
	    Error_Handler();
 8007cb2:	f000 fc2d 	bl	8008510 <Error_Handler>
	  }

	    /**Initializes the CPU, AHB and APB busses clocks
	    */
	  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007cb6:	230f      	movs	r3, #15
 8007cb8:	60fb      	str	r3, [r7, #12]
	                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007cba:	2302      	movs	r3, #2
 8007cbc:	613b      	str	r3, [r7, #16]
	  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	617b      	str	r3, [r7, #20]
	  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8007cc2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8007cc6:	61bb      	str	r3, [r7, #24]
	  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8007cc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007ccc:	61fb      	str	r3, [r7, #28]

	  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8007cce:	f107 030c 	add.w	r3, r7, #12
 8007cd2:	2105      	movs	r1, #5
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	f7fd fc27 	bl	8005528 <HAL_RCC_ClockConfig>
 8007cda:	4603      	mov	r3, r0
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d001      	beq.n	8007ce4 <SystemClock_Config+0xa4>
	  {
	    Error_Handler();
 8007ce0:	f000 fc16 	bl	8008510 <Error_Handler>
	  }

	    /**Configure the Systick interrupt time
	    */
	  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8007ce4:	f7fd fdb4 	bl	8005850 <HAL_RCC_GetHCLKFreq>
 8007ce8:	4602      	mov	r2, r0
 8007cea:	4b0c      	ldr	r3, [pc, #48]	; (8007d1c <SystemClock_Config+0xdc>)
 8007cec:	fba3 2302 	umull	r2, r3, r3, r2
 8007cf0:	099b      	lsrs	r3, r3, #6
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	f7fc ff9f 	bl	8004c36 <HAL_SYSTICK_Config>

	    /**Configure the Systick
	    */
	  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8007cf8:	2004      	movs	r0, #4
 8007cfa:	f7fc ffa9 	bl	8004c50 <HAL_SYSTICK_CLKSourceConfig>

	  /* SysTick_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8007cfe:	2200      	movs	r2, #0
 8007d00:	2100      	movs	r1, #0
 8007d02:	f04f 30ff 	mov.w	r0, #4294967295
 8007d06:	f7fc ff6c 	bl	8004be2 <HAL_NVIC_SetPriority>
}
 8007d0a:	bf00      	nop
 8007d0c:	3750      	adds	r7, #80	; 0x50
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	bd80      	pop	{r7, pc}
 8007d12:	bf00      	nop
 8007d14:	40023800 	.word	0x40023800
 8007d18:	40007000 	.word	0x40007000
 8007d1c:	10624dd3 	.word	0x10624dd3

08007d20 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8007d24:	4b06      	ldr	r3, [pc, #24]	; (8007d40 <MX_CRC_Init+0x20>)
 8007d26:	4a07      	ldr	r2, [pc, #28]	; (8007d44 <MX_CRC_Init+0x24>)
 8007d28:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8007d2a:	4805      	ldr	r0, [pc, #20]	; (8007d40 <MX_CRC_Init+0x20>)
 8007d2c:	f7fc ffac 	bl	8004c88 <HAL_CRC_Init>
 8007d30:	4603      	mov	r3, r0
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d001      	beq.n	8007d3a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8007d36:	f000 fbeb 	bl	8008510 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8007d3a:	bf00      	nop
 8007d3c:	bd80      	pop	{r7, pc}
 8007d3e:	bf00      	nop
 8007d40:	200019f8 	.word	0x200019f8
 8007d44:	40023000 	.word	0x40023000

08007d48 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
	 hspi3.Instance = SPI3;
 8007d4c:	4b17      	ldr	r3, [pc, #92]	; (8007dac <MX_SPI3_Init+0x64>)
 8007d4e:	4a18      	ldr	r2, [pc, #96]	; (8007db0 <MX_SPI3_Init+0x68>)
 8007d50:	601a      	str	r2, [r3, #0]
	  hspi3.Init.Mode = SPI_MODE_MASTER;
 8007d52:	4b16      	ldr	r3, [pc, #88]	; (8007dac <MX_SPI3_Init+0x64>)
 8007d54:	f44f 7282 	mov.w	r2, #260	; 0x104
 8007d58:	605a      	str	r2, [r3, #4]
	  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8007d5a:	4b14      	ldr	r3, [pc, #80]	; (8007dac <MX_SPI3_Init+0x64>)
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	609a      	str	r2, [r3, #8]
	  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8007d60:	4b12      	ldr	r3, [pc, #72]	; (8007dac <MX_SPI3_Init+0x64>)
 8007d62:	2200      	movs	r2, #0
 8007d64:	60da      	str	r2, [r3, #12]
	  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8007d66:	4b11      	ldr	r3, [pc, #68]	; (8007dac <MX_SPI3_Init+0x64>)
 8007d68:	2200      	movs	r2, #0
 8007d6a:	611a      	str	r2, [r3, #16]
	  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007d6c:	4b0f      	ldr	r3, [pc, #60]	; (8007dac <MX_SPI3_Init+0x64>)
 8007d6e:	2200      	movs	r2, #0
 8007d70:	615a      	str	r2, [r3, #20]
	  hspi3.Init.NSS = SPI_NSS_SOFT;
 8007d72:	4b0e      	ldr	r3, [pc, #56]	; (8007dac <MX_SPI3_Init+0x64>)
 8007d74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007d78:	619a      	str	r2, [r3, #24]
	  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8007d7a:	4b0c      	ldr	r3, [pc, #48]	; (8007dac <MX_SPI3_Init+0x64>)
 8007d7c:	2220      	movs	r2, #32
 8007d7e:	61da      	str	r2, [r3, #28]
	  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007d80:	4b0a      	ldr	r3, [pc, #40]	; (8007dac <MX_SPI3_Init+0x64>)
 8007d82:	2200      	movs	r2, #0
 8007d84:	621a      	str	r2, [r3, #32]
	  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8007d86:	4b09      	ldr	r3, [pc, #36]	; (8007dac <MX_SPI3_Init+0x64>)
 8007d88:	2200      	movs	r2, #0
 8007d8a:	625a      	str	r2, [r3, #36]	; 0x24
	  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007d8c:	4b07      	ldr	r3, [pc, #28]	; (8007dac <MX_SPI3_Init+0x64>)
 8007d8e:	2200      	movs	r2, #0
 8007d90:	629a      	str	r2, [r3, #40]	; 0x28
	  hspi3.Init.CRCPolynomial = 10;
 8007d92:	4b06      	ldr	r3, [pc, #24]	; (8007dac <MX_SPI3_Init+0x64>)
 8007d94:	220a      	movs	r2, #10
 8007d96:	62da      	str	r2, [r3, #44]	; 0x2c
	  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8007d98:	4804      	ldr	r0, [pc, #16]	; (8007dac <MX_SPI3_Init+0x64>)
 8007d9a:	f7fd fd8d 	bl	80058b8 <HAL_SPI_Init>
 8007d9e:	4603      	mov	r3, r0
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d001      	beq.n	8007da8 <MX_SPI3_Init+0x60>
	  {
	    Error_Handler();
 8007da4:	f000 fbb4 	bl	8008510 <Error_Handler>
	  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8007da8:	bf00      	nop
 8007daa:	bd80      	pop	{r7, pc}
 8007dac:	20010000 	.word	0x20010000
 8007db0:	40003c00 	.word	0x40003c00

08007db4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8007db8:	4b11      	ldr	r3, [pc, #68]	; (8007e00 <MX_USART1_UART_Init+0x4c>)
 8007dba:	4a12      	ldr	r2, [pc, #72]	; (8007e04 <MX_USART1_UART_Init+0x50>)
 8007dbc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8007dbe:	4b10      	ldr	r3, [pc, #64]	; (8007e00 <MX_USART1_UART_Init+0x4c>)
 8007dc0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007dc4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8007dc6:	4b0e      	ldr	r3, [pc, #56]	; (8007e00 <MX_USART1_UART_Init+0x4c>)
 8007dc8:	2200      	movs	r2, #0
 8007dca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8007dcc:	4b0c      	ldr	r3, [pc, #48]	; (8007e00 <MX_USART1_UART_Init+0x4c>)
 8007dce:	2200      	movs	r2, #0
 8007dd0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8007dd2:	4b0b      	ldr	r3, [pc, #44]	; (8007e00 <MX_USART1_UART_Init+0x4c>)
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8007dd8:	4b09      	ldr	r3, [pc, #36]	; (8007e00 <MX_USART1_UART_Init+0x4c>)
 8007dda:	220c      	movs	r2, #12
 8007ddc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007dde:	4b08      	ldr	r3, [pc, #32]	; (8007e00 <MX_USART1_UART_Init+0x4c>)
 8007de0:	2200      	movs	r2, #0
 8007de2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8007de4:	4b06      	ldr	r3, [pc, #24]	; (8007e00 <MX_USART1_UART_Init+0x4c>)
 8007de6:	2200      	movs	r2, #0
 8007de8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8007dea:	4805      	ldr	r0, [pc, #20]	; (8007e00 <MX_USART1_UART_Init+0x4c>)
 8007dec:	f7fe fafc 	bl	80063e8 <HAL_UART_Init>
 8007df0:	4603      	mov	r3, r0
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d001      	beq.n	8007dfa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8007df6:	f000 fb8b 	bl	8008510 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8007dfa:	bf00      	nop
 8007dfc:	bd80      	pop	{r7, pc}
 8007dfe:	bf00      	nop
 8007e00:	20010058 	.word	0x20010058
 8007e04:	40011000 	.word	0x40011000

08007e08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b08e      	sub	sp, #56	; 0x38
 8007e0c:	af00      	add	r7, sp, #0
	 GPIO_InitTypeDef GPIO_InitStruct;

	  /* GPIO Ports Clock Enable */
	  __HAL_RCC_GPIOE_CLK_ENABLE();
 8007e0e:	2300      	movs	r3, #0
 8007e10:	623b      	str	r3, [r7, #32]
 8007e12:	4b6a      	ldr	r3, [pc, #424]	; (8007fbc <MX_GPIO_Init+0x1b4>)
 8007e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e16:	4a69      	ldr	r2, [pc, #420]	; (8007fbc <MX_GPIO_Init+0x1b4>)
 8007e18:	f043 0310 	orr.w	r3, r3, #16
 8007e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8007e1e:	4b67      	ldr	r3, [pc, #412]	; (8007fbc <MX_GPIO_Init+0x1b4>)
 8007e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e22:	f003 0310 	and.w	r3, r3, #16
 8007e26:	623b      	str	r3, [r7, #32]
 8007e28:	6a3b      	ldr	r3, [r7, #32]
	  __HAL_RCC_GPIOF_CLK_ENABLE();
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	61fb      	str	r3, [r7, #28]
 8007e2e:	4b63      	ldr	r3, [pc, #396]	; (8007fbc <MX_GPIO_Init+0x1b4>)
 8007e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e32:	4a62      	ldr	r2, [pc, #392]	; (8007fbc <MX_GPIO_Init+0x1b4>)
 8007e34:	f043 0320 	orr.w	r3, r3, #32
 8007e38:	6313      	str	r3, [r2, #48]	; 0x30
 8007e3a:	4b60      	ldr	r3, [pc, #384]	; (8007fbc <MX_GPIO_Init+0x1b4>)
 8007e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e3e:	f003 0320 	and.w	r3, r3, #32
 8007e42:	61fb      	str	r3, [r7, #28]
 8007e44:	69fb      	ldr	r3, [r7, #28]
	  __HAL_RCC_GPIOH_CLK_ENABLE();
 8007e46:	2300      	movs	r3, #0
 8007e48:	61bb      	str	r3, [r7, #24]
 8007e4a:	4b5c      	ldr	r3, [pc, #368]	; (8007fbc <MX_GPIO_Init+0x1b4>)
 8007e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e4e:	4a5b      	ldr	r2, [pc, #364]	; (8007fbc <MX_GPIO_Init+0x1b4>)
 8007e50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e54:	6313      	str	r3, [r2, #48]	; 0x30
 8007e56:	4b59      	ldr	r3, [pc, #356]	; (8007fbc <MX_GPIO_Init+0x1b4>)
 8007e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e5e:	61bb      	str	r3, [r7, #24]
 8007e60:	69bb      	ldr	r3, [r7, #24]
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007e62:	2300      	movs	r3, #0
 8007e64:	617b      	str	r3, [r7, #20]
 8007e66:	4b55      	ldr	r3, [pc, #340]	; (8007fbc <MX_GPIO_Init+0x1b4>)
 8007e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e6a:	4a54      	ldr	r2, [pc, #336]	; (8007fbc <MX_GPIO_Init+0x1b4>)
 8007e6c:	f043 0304 	orr.w	r3, r3, #4
 8007e70:	6313      	str	r3, [r2, #48]	; 0x30
 8007e72:	4b52      	ldr	r3, [pc, #328]	; (8007fbc <MX_GPIO_Init+0x1b4>)
 8007e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e76:	f003 0304 	and.w	r3, r3, #4
 8007e7a:	617b      	str	r3, [r7, #20]
 8007e7c:	697b      	ldr	r3, [r7, #20]
	  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007e7e:	2300      	movs	r3, #0
 8007e80:	613b      	str	r3, [r7, #16]
 8007e82:	4b4e      	ldr	r3, [pc, #312]	; (8007fbc <MX_GPIO_Init+0x1b4>)
 8007e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e86:	4a4d      	ldr	r2, [pc, #308]	; (8007fbc <MX_GPIO_Init+0x1b4>)
 8007e88:	f043 0308 	orr.w	r3, r3, #8
 8007e8c:	6313      	str	r3, [r2, #48]	; 0x30
 8007e8e:	4b4b      	ldr	r3, [pc, #300]	; (8007fbc <MX_GPIO_Init+0x1b4>)
 8007e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e92:	f003 0308 	and.w	r3, r3, #8
 8007e96:	613b      	str	r3, [r7, #16]
 8007e98:	693b      	ldr	r3, [r7, #16]
	  __HAL_RCC_GPIOG_CLK_ENABLE();
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	60fb      	str	r3, [r7, #12]
 8007e9e:	4b47      	ldr	r3, [pc, #284]	; (8007fbc <MX_GPIO_Init+0x1b4>)
 8007ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ea2:	4a46      	ldr	r2, [pc, #280]	; (8007fbc <MX_GPIO_Init+0x1b4>)
 8007ea4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ea8:	6313      	str	r3, [r2, #48]	; 0x30
 8007eaa:	4b44      	ldr	r3, [pc, #272]	; (8007fbc <MX_GPIO_Init+0x1b4>)
 8007eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007eae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007eb2:	60fb      	str	r3, [r7, #12]
 8007eb4:	68fb      	ldr	r3, [r7, #12]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	60bb      	str	r3, [r7, #8]
 8007eba:	4b40      	ldr	r3, [pc, #256]	; (8007fbc <MX_GPIO_Init+0x1b4>)
 8007ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ebe:	4a3f      	ldr	r2, [pc, #252]	; (8007fbc <MX_GPIO_Init+0x1b4>)
 8007ec0:	f043 0301 	orr.w	r3, r3, #1
 8007ec4:	6313      	str	r3, [r2, #48]	; 0x30
 8007ec6:	4b3d      	ldr	r3, [pc, #244]	; (8007fbc <MX_GPIO_Init+0x1b4>)
 8007ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007eca:	f003 0301 	and.w	r3, r3, #1
 8007ece:	60bb      	str	r3, [r7, #8]
 8007ed0:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	607b      	str	r3, [r7, #4]
 8007ed6:	4b39      	ldr	r3, [pc, #228]	; (8007fbc <MX_GPIO_Init+0x1b4>)
 8007ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007eda:	4a38      	ldr	r2, [pc, #224]	; (8007fbc <MX_GPIO_Init+0x1b4>)
 8007edc:	f043 0302 	orr.w	r3, r3, #2
 8007ee0:	6313      	str	r3, [r2, #48]	; 0x30
 8007ee2:	4b36      	ldr	r3, [pc, #216]	; (8007fbc <MX_GPIO_Init+0x1b4>)
 8007ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ee6:	f003 0302 	and.w	r3, r3, #2
 8007eea:	607b      	str	r3, [r7, #4]
 8007eec:	687b      	ldr	r3, [r7, #4]

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(A23_GPIO_Port, A23_Pin, GPIO_PIN_SET);
 8007eee:	2201      	movs	r2, #1
 8007ef0:	2104      	movs	r1, #4
 8007ef2:	4833      	ldr	r0, [pc, #204]	; (8007fc0 <MX_GPIO_Init+0x1b8>)
 8007ef4:	f7fd f8bc 	bl	8005070 <HAL_GPIO_WritePin>

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(BL_PWM_GPIO_Port, BL_PWM_Pin, GPIO_PIN_SET);
 8007ef8:	2201      	movs	r2, #1
 8007efa:	2180      	movs	r1, #128	; 0x80
 8007efc:	4831      	ldr	r0, [pc, #196]	; (8007fc4 <MX_GPIO_Init+0x1bc>)
 8007efe:	f7fd f8b7 	bl	8005070 <HAL_GPIO_WritePin>

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(LCDTP_CS_GPIO_Port, LCDTP_CS_Pin, GPIO_PIN_RESET);
 8007f02:	2200      	movs	r2, #0
 8007f04:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007f08:	482f      	ldr	r0, [pc, #188]	; (8007fc8 <MX_GPIO_Init+0x1c0>)
 8007f0a:	f7fd f8b1 	bl	8005070 <HAL_GPIO_WritePin>

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8007f0e:	2200      	movs	r2, #0
 8007f10:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007f14:	482d      	ldr	r0, [pc, #180]	; (8007fcc <MX_GPIO_Init+0x1c4>)
 8007f16:	f7fd f8ab 	bl	8005070 <HAL_GPIO_WritePin>

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(A24_GPIO_Port, A24_Pin, GPIO_PIN_SET);
 8007f1a:	2201      	movs	r2, #1
 8007f1c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007f20:	482a      	ldr	r0, [pc, #168]	; (8007fcc <MX_GPIO_Init+0x1c4>)
 8007f22:	f7fd f8a5 	bl	8005070 <HAL_GPIO_WritePin>

	  /*Configure GPIO pin : PtPin */
	  GPIO_InitStruct.Pin = A23_Pin;
 8007f26:	2304      	movs	r3, #4
 8007f28:	627b      	str	r3, [r7, #36]	; 0x24
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007f2a:	2301      	movs	r3, #1
 8007f2c:	62bb      	str	r3, [r7, #40]	; 0x28
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f2e:	2300      	movs	r3, #0
 8007f30:	62fb      	str	r3, [r7, #44]	; 0x2c
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007f32:	2300      	movs	r3, #0
 8007f34:	633b      	str	r3, [r7, #48]	; 0x30
	  HAL_GPIO_Init(A23_GPIO_Port, &GPIO_InitStruct);
 8007f36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007f3a:	4619      	mov	r1, r3
 8007f3c:	4820      	ldr	r0, [pc, #128]	; (8007fc0 <MX_GPIO_Init+0x1b8>)
 8007f3e:	f7fc fee5 	bl	8004d0c <HAL_GPIO_Init>

	  /*Configure GPIO pin : PtPin */
	  GPIO_InitStruct.Pin = BL_PWM_Pin;
 8007f42:	2380      	movs	r3, #128	; 0x80
 8007f44:	627b      	str	r3, [r7, #36]	; 0x24
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007f46:	2301      	movs	r3, #1
 8007f48:	62bb      	str	r3, [r7, #40]	; 0x28
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	62fb      	str	r3, [r7, #44]	; 0x2c
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007f4e:	2300      	movs	r3, #0
 8007f50:	633b      	str	r3, [r7, #48]	; 0x30
	  HAL_GPIO_Init(BL_PWM_GPIO_Port, &GPIO_InitStruct);
 8007f52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007f56:	4619      	mov	r1, r3
 8007f58:	481a      	ldr	r0, [pc, #104]	; (8007fc4 <MX_GPIO_Init+0x1bc>)
 8007f5a:	f7fc fed7 	bl	8004d0c <HAL_GPIO_Init>

	  /*Configure GPIO pin : PtPin */
	  GPIO_InitStruct.Pin = LCDTP_IRQ_Pin;
 8007f5e:	2320      	movs	r3, #32
 8007f60:	627b      	str	r3, [r7, #36]	; 0x24
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007f62:	2300      	movs	r3, #0
 8007f64:	62bb      	str	r3, [r7, #40]	; 0x28
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f66:	2300      	movs	r3, #0
 8007f68:	62fb      	str	r3, [r7, #44]	; 0x2c
	  HAL_GPIO_Init(LCDTP_IRQ_GPIO_Port, &GPIO_InitStruct);
 8007f6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007f6e:	4619      	mov	r1, r3
 8007f70:	4817      	ldr	r0, [pc, #92]	; (8007fd0 <MX_GPIO_Init+0x1c8>)
 8007f72:	f7fc fecb 	bl	8004d0c <HAL_GPIO_Init>

	  /*Configure GPIO pin : PtPin */
	  GPIO_InitStruct.Pin = LCDTP_CS_Pin;
 8007f76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f7a:	627b      	str	r3, [r7, #36]	; 0x24
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007f7c:	2301      	movs	r3, #1
 8007f7e:	62bb      	str	r3, [r7, #40]	; 0x28
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f80:	2300      	movs	r3, #0
 8007f82:	62fb      	str	r3, [r7, #44]	; 0x2c
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007f84:	2300      	movs	r3, #0
 8007f86:	633b      	str	r3, [r7, #48]	; 0x30
	  HAL_GPIO_Init(LCDTP_CS_GPIO_Port, &GPIO_InitStruct);
 8007f88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007f8c:	4619      	mov	r1, r3
 8007f8e:	480e      	ldr	r0, [pc, #56]	; (8007fc8 <MX_GPIO_Init+0x1c0>)
 8007f90:	f7fc febc 	bl	8004d0c <HAL_GPIO_Init>

	  /*Configure GPIO pins : PGPin PGPin */
	  GPIO_InitStruct.Pin = LCD_CS_Pin|A24_Pin;
 8007f94:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8007f98:	627b      	str	r3, [r7, #36]	; 0x24
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007f9a:	2301      	movs	r3, #1
 8007f9c:	62bb      	str	r3, [r7, #40]	; 0x28
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	633b      	str	r3, [r7, #48]	; 0x30
	  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8007fa6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007faa:	4619      	mov	r1, r3
 8007fac:	4807      	ldr	r0, [pc, #28]	; (8007fcc <MX_GPIO_Init+0x1c4>)
 8007fae:	f7fc fead 	bl	8004d0c <HAL_GPIO_Init>

}
 8007fb2:	bf00      	nop
 8007fb4:	3738      	adds	r7, #56	; 0x38
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	bd80      	pop	{r7, pc}
 8007fba:	bf00      	nop
 8007fbc:	40023800 	.word	0x40023800
 8007fc0:	40021000 	.word	0x40021000
 8007fc4:	40021400 	.word	0x40021400
 8007fc8:	40020000 	.word	0x40020000
 8007fcc:	40021800 	.word	0x40021800
 8007fd0:	40020800 	.word	0x40020800

08007fd4 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b088      	sub	sp, #32
 8007fd8:	af00      	add	r7, sp, #0

	  FSMC_NORSRAM_TimingTypeDef Timing;

	  /** Perform the SRAM1 memory initialization sequence
	  */
	  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8007fda:	4b27      	ldr	r3, [pc, #156]	; (8008078 <MX_FSMC_Init+0xa4>)
 8007fdc:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8007fe0:	601a      	str	r2, [r3, #0]
	  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8007fe2:	4b25      	ldr	r3, [pc, #148]	; (8008078 <MX_FSMC_Init+0xa4>)
 8007fe4:	4a25      	ldr	r2, [pc, #148]	; (800807c <MX_FSMC_Init+0xa8>)
 8007fe6:	605a      	str	r2, [r3, #4]
	  /* hsram1.Init */
	  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8007fe8:	4b23      	ldr	r3, [pc, #140]	; (8008078 <MX_FSMC_Init+0xa4>)
 8007fea:	2200      	movs	r2, #0
 8007fec:	609a      	str	r2, [r3, #8]
	  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8007fee:	4b22      	ldr	r3, [pc, #136]	; (8008078 <MX_FSMC_Init+0xa4>)
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	60da      	str	r2, [r3, #12]
	  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8007ff4:	4b20      	ldr	r3, [pc, #128]	; (8008078 <MX_FSMC_Init+0xa4>)
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	611a      	str	r2, [r3, #16]
	  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8007ffa:	4b1f      	ldr	r3, [pc, #124]	; (8008078 <MX_FSMC_Init+0xa4>)
 8007ffc:	2210      	movs	r2, #16
 8007ffe:	615a      	str	r2, [r3, #20]
	  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8008000:	4b1d      	ldr	r3, [pc, #116]	; (8008078 <MX_FSMC_Init+0xa4>)
 8008002:	2200      	movs	r2, #0
 8008004:	619a      	str	r2, [r3, #24]
	  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8008006:	4b1c      	ldr	r3, [pc, #112]	; (8008078 <MX_FSMC_Init+0xa4>)
 8008008:	2200      	movs	r2, #0
 800800a:	61da      	str	r2, [r3, #28]
	  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 800800c:	4b1a      	ldr	r3, [pc, #104]	; (8008078 <MX_FSMC_Init+0xa4>)
 800800e:	2200      	movs	r2, #0
 8008010:	621a      	str	r2, [r3, #32]
	  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8008012:	4b19      	ldr	r3, [pc, #100]	; (8008078 <MX_FSMC_Init+0xa4>)
 8008014:	2200      	movs	r2, #0
 8008016:	625a      	str	r2, [r3, #36]	; 0x24
	  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8008018:	4b17      	ldr	r3, [pc, #92]	; (8008078 <MX_FSMC_Init+0xa4>)
 800801a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800801e:	629a      	str	r2, [r3, #40]	; 0x28
	  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8008020:	4b15      	ldr	r3, [pc, #84]	; (8008078 <MX_FSMC_Init+0xa4>)
 8008022:	2200      	movs	r2, #0
 8008024:	62da      	str	r2, [r3, #44]	; 0x2c
	  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8008026:	4b14      	ldr	r3, [pc, #80]	; (8008078 <MX_FSMC_Init+0xa4>)
 8008028:	2200      	movs	r2, #0
 800802a:	631a      	str	r2, [r3, #48]	; 0x30
	  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 800802c:	4b12      	ldr	r3, [pc, #72]	; (8008078 <MX_FSMC_Init+0xa4>)
 800802e:	2200      	movs	r2, #0
 8008030:	635a      	str	r2, [r3, #52]	; 0x34
	  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8008032:	4b11      	ldr	r3, [pc, #68]	; (8008078 <MX_FSMC_Init+0xa4>)
 8008034:	2200      	movs	r2, #0
 8008036:	639a      	str	r2, [r3, #56]	; 0x38
	  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8008038:	4b0f      	ldr	r3, [pc, #60]	; (8008078 <MX_FSMC_Init+0xa4>)
 800803a:	2200      	movs	r2, #0
 800803c:	645a      	str	r2, [r3, #68]	; 0x44
	  /* Timing */
	  Timing.AddressSetupTime = 4;
 800803e:	2304      	movs	r3, #4
 8008040:	607b      	str	r3, [r7, #4]
	  Timing.AddressHoldTime = 15;
 8008042:	230f      	movs	r3, #15
 8008044:	60bb      	str	r3, [r7, #8]
	  Timing.DataSetupTime = 40;
 8008046:	2328      	movs	r3, #40	; 0x28
 8008048:	60fb      	str	r3, [r7, #12]
	  Timing.BusTurnAroundDuration = 0;
 800804a:	2300      	movs	r3, #0
 800804c:	613b      	str	r3, [r7, #16]
	  Timing.CLKDivision = 16;
 800804e:	2310      	movs	r3, #16
 8008050:	617b      	str	r3, [r7, #20]
	  Timing.DataLatency = 17;
 8008052:	2311      	movs	r3, #17
 8008054:	61bb      	str	r3, [r7, #24]
	  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8008056:	2300      	movs	r3, #0
 8008058:	61fb      	str	r3, [r7, #28]
	  /* ExtTiming */

	  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 800805a:	1d3b      	adds	r3, r7, #4
 800805c:	2200      	movs	r2, #0
 800805e:	4619      	mov	r1, r3
 8008060:	4805      	ldr	r0, [pc, #20]	; (8008078 <MX_FSMC_Init+0xa4>)
 8008062:	f7fe f97d 	bl	8006360 <HAL_SRAM_Init>
 8008066:	4603      	mov	r3, r0
 8008068:	2b00      	cmp	r3, #0
 800806a:	d001      	beq.n	8008070 <MX_FSMC_Init+0x9c>
	  {
	    Error_Handler();
 800806c:	f000 fa50 	bl	8008510 <Error_Handler>
	  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8008070:	bf00      	nop
 8008072:	3720      	adds	r7, #32
 8008074:	46bd      	mov	sp, r7
 8008076:	bd80      	pop	{r7, pc}
 8008078:	2000ffb0 	.word	0x2000ffb0
 800807c:	a0000104 	.word	0xa0000104

08008080 <ImageResize>:
  */
void ImageResize(uint8_t *srcImage, uint32_t srcW, uint32_t srcH,
                 uint32_t pixelSize, uint32_t roiX, uint32_t roiY,
                 uint32_t roiW, uint32_t roiH,  uint8_t *dstImage,
                 uint32_t dstW, uint32_t dstH)
{
 8008080:	b480      	push	{r7}
 8008082:	b0a1      	sub	sp, #132	; 0x84
 8008084:	af00      	add	r7, sp, #0
 8008086:	6178      	str	r0, [r7, #20]
 8008088:	6139      	str	r1, [r7, #16]
 800808a:	60fa      	str	r2, [r7, #12]
 800808c:	60bb      	str	r3, [r7, #8]
  uint8_t *p1, *p2, *p3, *p4;

  int32_t offset1;
  int32_t offset2;

  srcStride = pixelSize * srcW;
 800808e:	68bb      	ldr	r3, [r7, #8]
 8008090:	693a      	ldr	r2, [r7, #16]
 8008092:	fb02 f303 	mul.w	r3, r2, r3
 8008096:	663b      	str	r3, [r7, #96]	; 0x60

  widthRatio = ((roiW ? roiW : srcW) / (float) dstW);
 8008098:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800809c:	2b00      	cmp	r3, #0
 800809e:	d006      	beq.n	80080ae <ImageResize+0x2e>
 80080a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80080a4:	ee07 3a90 	vmov	s15, r3
 80080a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080ac:	e004      	b.n	80080b8 <ImageResize+0x38>
 80080ae:	693b      	ldr	r3, [r7, #16]
 80080b0:	ee07 3a90 	vmov	s15, r3
 80080b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80080bc:	ee07 3a10 	vmov	s14, r3
 80080c0:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80080c4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80080c8:	ed87 7a17 	vstr	s14, [r7, #92]	; 0x5c
  heightRatio = ((roiH ? roiH : srcH) / (float) dstH);
 80080cc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d006      	beq.n	80080e2 <ImageResize+0x62>
 80080d4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80080d8:	ee07 3a90 	vmov	s15, r3
 80080dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080e0:	e004      	b.n	80080ec <ImageResize+0x6c>
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	ee07 3a90 	vmov	s15, r3
 80080e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080ec:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80080f0:	ee07 3a10 	vmov	s14, r3
 80080f4:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80080f8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80080fc:	ed87 7a16 	vstr	s14, [r7, #88]	; 0x58

  /* Get horizontal and vertical limits. */
  maxWidth = (roiW ? roiW : srcW) - 1;
 8008100:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008104:	2b00      	cmp	r3, #0
 8008106:	d003      	beq.n	8008110 <ImageResize+0x90>
 8008108:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800810c:	3b01      	subs	r3, #1
 800810e:	e001      	b.n	8008114 <ImageResize+0x94>
 8008110:	693b      	ldr	r3, [r7, #16]
 8008112:	3b01      	subs	r3, #1
 8008114:	657b      	str	r3, [r7, #84]	; 0x54
  maxHeight = (roiH ? roiH : srcH) - 1;
 8008116:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800811a:	2b00      	cmp	r3, #0
 800811c:	d003      	beq.n	8008126 <ImageResize+0xa6>
 800811e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008122:	3b01      	subs	r3, #1
 8008124:	e001      	b.n	800812a <ImageResize+0xaa>
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	3b01      	subs	r3, #1
 800812a:	653b      	str	r3, [r7, #80]	; 0x50

  for (int32_t y = 0; y < dstH; y++)
 800812c:	2300      	movs	r3, #0
 800812e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008130:	e0fe      	b.n	8008330 <ImageResize+0x2b0>
  {
    /* Get Y from source. */
    srcY = ((float) y * heightRatio) + roiY;
 8008132:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008134:	ee07 3a90 	vmov	s15, r3
 8008138:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800813c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8008140:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008144:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008148:	ee07 3a90 	vmov	s15, r3
 800814c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008150:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008154:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    srcY1 = (int32_t) srcY;
 8008158:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800815c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008160:	ee17 3a90 	vmov	r3, s15
 8008164:	64bb      	str	r3, [r7, #72]	; 0x48
    srcY2 = (srcY1 == maxHeight) ? srcY1 : srcY1 + 1;
 8008166:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008168:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800816a:	429a      	cmp	r2, r3
 800816c:	d002      	beq.n	8008174 <ImageResize+0xf4>
 800816e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008170:	3301      	adds	r3, #1
 8008172:	e000      	b.n	8008176 <ImageResize+0xf6>
 8008174:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008176:	647b      	str	r3, [r7, #68]	; 0x44
    dY1 = srcY - (float) srcY1;
 8008178:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800817a:	ee07 3a90 	vmov	s15, r3
 800817e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008182:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8008186:	ee77 7a67 	vsub.f32	s15, s14, s15
 800818a:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    dY2 = 1.0f - dY1;
 800818e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008192:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8008196:	ee77 7a67 	vsub.f32	s15, s14, s15
 800819a:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    /* Calculates the pointers to the two needed lines of the source. */
    tmp1 = srcImage + srcY1 * srcStride;
 800819e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80081a0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80081a2:	fb02 f303 	mul.w	r3, r2, r3
 80081a6:	461a      	mov	r2, r3
 80081a8:	697b      	ldr	r3, [r7, #20]
 80081aa:	4413      	add	r3, r2
 80081ac:	63bb      	str	r3, [r7, #56]	; 0x38
    tmp2 = srcImage + srcY2 * srcStride;
 80081ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80081b0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80081b2:	fb02 f303 	mul.w	r3, r2, r3
 80081b6:	461a      	mov	r2, r3
 80081b8:	697b      	ldr	r3, [r7, #20]
 80081ba:	4413      	add	r3, r2
 80081bc:	637b      	str	r3, [r7, #52]	; 0x34

    for (int32_t x = 0; x < dstW; x++)
 80081be:	2300      	movs	r3, #0
 80081c0:	66bb      	str	r3, [r7, #104]	; 0x68
 80081c2:	e0ac      	b.n	800831e <ImageResize+0x29e>
    {
      /* Get X from source. */
      srcX = x * widthRatio + roiX;
 80081c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80081c6:	ee07 3a90 	vmov	s15, r3
 80081ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80081ce:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80081d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80081d6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80081da:	ee07 3a90 	vmov	s15, r3
 80081de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80081e6:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
      dstX1 = (int32_t) srcX;
 80081ea:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80081ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80081f2:	ee17 3a90 	vmov	r3, s15
 80081f6:	62fb      	str	r3, [r7, #44]	; 0x2c
      dstX2 = (dstX1 == maxWidth) ? dstX1 : dstX1 + 1;
 80081f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80081fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80081fc:	429a      	cmp	r2, r3
 80081fe:	d002      	beq.n	8008206 <ImageResize+0x186>
 8008200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008202:	3301      	adds	r3, #1
 8008204:	e000      	b.n	8008208 <ImageResize+0x188>
 8008206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008208:	62bb      	str	r3, [r7, #40]	; 0x28
      dX1 = srcX - /*(float32)*/dstX1;
 800820a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800820c:	ee07 3a90 	vmov	s15, r3
 8008210:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008214:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8008218:	ee77 7a67 	vsub.f32	s15, s14, s15
 800821c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      dX2 = 1.0f - dX1;
 8008220:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008224:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008228:	ee77 7a67 	vsub.f32	s15, s14, s15
 800822c:	edc7 7a08 	vstr	s15, [r7, #32]

      /* Calculates the four points (p1,p2, p3, p4) of the source. */
      offset1 = dstX1 * pixelSize;
 8008230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008232:	68ba      	ldr	r2, [r7, #8]
 8008234:	fb02 f303 	mul.w	r3, r2, r3
 8008238:	61fb      	str	r3, [r7, #28]
      offset2 = dstX2 * pixelSize;
 800823a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800823c:	68ba      	ldr	r2, [r7, #8]
 800823e:	fb02 f303 	mul.w	r3, r2, r3
 8008242:	61bb      	str	r3, [r7, #24]
      p1 = tmp1 + offset1;
 8008244:	69fb      	ldr	r3, [r7, #28]
 8008246:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008248:	4413      	add	r3, r2
 800824a:	67fb      	str	r3, [r7, #124]	; 0x7c
      p2 = tmp1 + offset2;
 800824c:	69bb      	ldr	r3, [r7, #24]
 800824e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008250:	4413      	add	r3, r2
 8008252:	67bb      	str	r3, [r7, #120]	; 0x78
      p3 = tmp2 + offset1;
 8008254:	69fb      	ldr	r3, [r7, #28]
 8008256:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008258:	4413      	add	r3, r2
 800825a:	677b      	str	r3, [r7, #116]	; 0x74
      p4 = tmp2 + offset2;
 800825c:	69bb      	ldr	r3, [r7, #24]
 800825e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008260:	4413      	add	r3, r2
 8008262:	673b      	str	r3, [r7, #112]	; 0x70
      /* For each channel, interpolate the four points. */
      for (int32_t ch = 0; ch < pixelSize; ch++, dstImage++, p1++, p2++, p3++, p4++)
 8008264:	2300      	movs	r3, #0
 8008266:	667b      	str	r3, [r7, #100]	; 0x64
 8008268:	e052      	b.n	8008310 <ImageResize+0x290>
      {
        *dstImage = (uint8_t)(dY2 * (dX2 * (*p1) + dX1 * (*p2)) + dY1 * (dX2 * (*p3) + dX1 * (*p4)));
 800826a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800826c:	781b      	ldrb	r3, [r3, #0]
 800826e:	ee07 3a90 	vmov	s15, r3
 8008272:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008276:	edd7 7a08 	vldr	s15, [r7, #32]
 800827a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800827e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008280:	781b      	ldrb	r3, [r3, #0]
 8008282:	ee07 3a90 	vmov	s15, r3
 8008286:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800828a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800828e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008292:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008296:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800829a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800829e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80082a0:	781b      	ldrb	r3, [r3, #0]
 80082a2:	ee07 3a90 	vmov	s15, r3
 80082a6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80082aa:	edd7 7a08 	vldr	s15, [r7, #32]
 80082ae:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80082b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80082b4:	781b      	ldrb	r3, [r3, #0]
 80082b6:	ee07 3a90 	vmov	s15, r3
 80082ba:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 80082be:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80082c2:	ee66 7a27 	vmul.f32	s15, s12, s15
 80082c6:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80082ca:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80082ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80082d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80082d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80082da:	edc7 7a01 	vstr	s15, [r7, #4]
 80082de:	793b      	ldrb	r3, [r7, #4]
 80082e0:	b2da      	uxtb	r2, r3
 80082e2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80082e6:	701a      	strb	r2, [r3, #0]
      for (int32_t ch = 0; ch < pixelSize; ch++, dstImage++, p1++, p2++, p3++, p4++)
 80082e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80082ea:	3301      	adds	r3, #1
 80082ec:	667b      	str	r3, [r7, #100]	; 0x64
 80082ee:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80082f2:	3301      	adds	r3, #1
 80082f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80082f8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80082fa:	3301      	adds	r3, #1
 80082fc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80082fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008300:	3301      	adds	r3, #1
 8008302:	67bb      	str	r3, [r7, #120]	; 0x78
 8008304:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008306:	3301      	adds	r3, #1
 8008308:	677b      	str	r3, [r7, #116]	; 0x74
 800830a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800830c:	3301      	adds	r3, #1
 800830e:	673b      	str	r3, [r7, #112]	; 0x70
 8008310:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008312:	68ba      	ldr	r2, [r7, #8]
 8008314:	429a      	cmp	r2, r3
 8008316:	d8a8      	bhi.n	800826a <ImageResize+0x1ea>
    for (int32_t x = 0; x < dstW; x++)
 8008318:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800831a:	3301      	adds	r3, #1
 800831c:	66bb      	str	r3, [r7, #104]	; 0x68
 800831e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008320:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8008324:	429a      	cmp	r2, r3
 8008326:	f63f af4d 	bhi.w	80081c4 <ImageResize+0x144>
  for (int32_t y = 0; y < dstH; y++)
 800832a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800832c:	3301      	adds	r3, #1
 800832e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008330:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008332:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8008336:	429a      	cmp	r2, r3
 8008338:	f63f aefb 	bhi.w	8008132 <ImageResize+0xb2>
      }
    }
  }
}
 800833c:	bf00      	nop
 800833e:	3784      	adds	r7, #132	; 0x84
 8008340:	46bd      	mov	sp, r7
 8008342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008346:	4770      	bx	lr

08008348 <convert_8Bit_Grayscale>:

// Convert to 8 bit grayscale
void convert_8Bit_Grayscale(uint16_t* buffer)
{
 8008348:	b5b0      	push	{r4, r5, r7, lr}
 800834a:	b084      	sub	sp, #16
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
	for(int16_t i=0; i< 784; i++)
 8008350:	2300      	movs	r3, #0
 8008352:	81fb      	strh	r3, [r7, #14]
 8008354:	e078      	b.n	8008448 <convert_8Bit_Grayscale+0x100>
		      {
		   	   uint16_t pixel = *buffer;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	881b      	ldrh	r3, [r3, #0]
 800835a:	81bb      	strh	r3, [r7, #12]
		   	   uint8_t red = ((pixel & 0xF800)>>11);
 800835c:	89bb      	ldrh	r3, [r7, #12]
 800835e:	0adb      	lsrs	r3, r3, #11
 8008360:	b29b      	uxth	r3, r3
 8008362:	72fb      	strb	r3, [r7, #11]
		   	   uint8_t green = ((pixel & 0x07E0)>>5);
 8008364:	89bb      	ldrh	r3, [r7, #12]
 8008366:	115b      	asrs	r3, r3, #5
 8008368:	b2db      	uxtb	r3, r3
 800836a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800836e:	72bb      	strb	r3, [r7, #10]
		   	   uint8_t blue = (pixel & 0x001F);
 8008370:	89bb      	ldrh	r3, [r7, #12]
 8008372:	b2db      	uxtb	r3, r3
 8008374:	f003 031f 	and.w	r3, r3, #31
 8008378:	727b      	strb	r3, [r7, #9]
		   	   grayscale_image[i] = (0.2126 * red) + (0.7152 * green / 2.0) + (0.0722 * blue);
 800837a:	7afb      	ldrb	r3, [r7, #11]
 800837c:	4618      	mov	r0, r3
 800837e:	f7fb fd33 	bl	8003de8 <__aeabi_i2d>
 8008382:	a338      	add	r3, pc, #224	; (adr r3, 8008464 <convert_8Bit_Grayscale+0x11c>)
 8008384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008388:	f7fb fd98 	bl	8003ebc <__aeabi_dmul>
 800838c:	4603      	mov	r3, r0
 800838e:	460c      	mov	r4, r1
 8008390:	4625      	mov	r5, r4
 8008392:	461c      	mov	r4, r3
 8008394:	7abb      	ldrb	r3, [r7, #10]
 8008396:	4618      	mov	r0, r3
 8008398:	f7fb fd26 	bl	8003de8 <__aeabi_i2d>
 800839c:	a333      	add	r3, pc, #204	; (adr r3, 800846c <convert_8Bit_Grayscale+0x124>)
 800839e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083a2:	f7fb fd8b 	bl	8003ebc <__aeabi_dmul>
 80083a6:	4602      	mov	r2, r0
 80083a8:	460b      	mov	r3, r1
 80083aa:	4610      	mov	r0, r2
 80083ac:	4619      	mov	r1, r3
 80083ae:	f04f 0200 	mov.w	r2, #0
 80083b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80083b6:	f7fb feab 	bl	8004110 <__aeabi_ddiv>
 80083ba:	4602      	mov	r2, r0
 80083bc:	460b      	mov	r3, r1
 80083be:	4620      	mov	r0, r4
 80083c0:	4629      	mov	r1, r5
 80083c2:	f7fb fbc5 	bl	8003b50 <__adddf3>
 80083c6:	4603      	mov	r3, r0
 80083c8:	460c      	mov	r4, r1
 80083ca:	4625      	mov	r5, r4
 80083cc:	461c      	mov	r4, r3
 80083ce:	7a7b      	ldrb	r3, [r7, #9]
 80083d0:	4618      	mov	r0, r3
 80083d2:	f7fb fd09 	bl	8003de8 <__aeabi_i2d>
 80083d6:	a327      	add	r3, pc, #156	; (adr r3, 8008474 <convert_8Bit_Grayscale+0x12c>)
 80083d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083dc:	f7fb fd6e 	bl	8003ebc <__aeabi_dmul>
 80083e0:	4602      	mov	r2, r0
 80083e2:	460b      	mov	r3, r1
 80083e4:	4620      	mov	r0, r4
 80083e6:	4629      	mov	r1, r5
 80083e8:	f7fb fbb2 	bl	8003b50 <__adddf3>
 80083ec:	4603      	mov	r3, r0
 80083ee:	460c      	mov	r4, r1
 80083f0:	461a      	mov	r2, r3
 80083f2:	4623      	mov	r3, r4
 80083f4:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 80083f8:	4610      	mov	r0, r2
 80083fa:	4619      	mov	r1, r3
 80083fc:	f7fb fff8 	bl	80043f0 <__aeabi_d2uiz>
 8008400:	4603      	mov	r3, r0
 8008402:	b2da      	uxtb	r2, r3
 8008404:	4b16      	ldr	r3, [pc, #88]	; (8008460 <convert_8Bit_Grayscale+0x118>)
 8008406:	551a      	strb	r2, [r3, r4]
		   	   if(grayscale_image[i] == 0x00)
 8008408:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800840c:	4a14      	ldr	r2, [pc, #80]	; (8008460 <convert_8Bit_Grayscale+0x118>)
 800840e:	5cd3      	ldrb	r3, [r2, r3]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d105      	bne.n	8008420 <convert_8Bit_Grayscale+0xd8>
		   		   grayscale_image[i] = 0XFF;
 8008414:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008418:	4a11      	ldr	r2, [pc, #68]	; (8008460 <convert_8Bit_Grayscale+0x118>)
 800841a:	21ff      	movs	r1, #255	; 0xff
 800841c:	54d1      	strb	r1, [r2, r3]
 800841e:	e00a      	b.n	8008436 <convert_8Bit_Grayscale+0xee>
		   	   else if(grayscale_image[i]==0x1F)
 8008420:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008424:	4a0e      	ldr	r2, [pc, #56]	; (8008460 <convert_8Bit_Grayscale+0x118>)
 8008426:	5cd3      	ldrb	r3, [r2, r3]
 8008428:	2b1f      	cmp	r3, #31
 800842a:	d104      	bne.n	8008436 <convert_8Bit_Grayscale+0xee>
		   		   grayscale_image[i]=0X00;
 800842c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008430:	4a0b      	ldr	r2, [pc, #44]	; (8008460 <convert_8Bit_Grayscale+0x118>)
 8008432:	2100      	movs	r1, #0
 8008434:	54d1      	strb	r1, [r2, r3]
		   	   buffer++;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	3302      	adds	r3, #2
 800843a:	607b      	str	r3, [r7, #4]
	for(int16_t i=0; i< 784; i++)
 800843c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008440:	b29b      	uxth	r3, r3
 8008442:	3301      	adds	r3, #1
 8008444:	b29b      	uxth	r3, r3
 8008446:	81fb      	strh	r3, [r7, #14]
 8008448:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800844c:	f5b3 7f44 	cmp.w	r3, #784	; 0x310
 8008450:	db81      	blt.n	8008356 <convert_8Bit_Grayscale+0xe>
		      }
}
 8008452:	bf00      	nop
 8008454:	3710      	adds	r7, #16
 8008456:	46bd      	mov	sp, r7
 8008458:	bdb0      	pop	{r4, r5, r7, pc}
 800845a:	bf00      	nop
 800845c:	f3af 8000 	nop.w
 8008460:	2000f680 	.word	0x2000f680
 8008464:	0f9096bc 	.word	0x0f9096bc
 8008468:	3fcb367a 	.word	0x3fcb367a
 800846c:	1c432ca5 	.word	0x1c432ca5
 8008470:	3fe6e2eb 	.word	0x3fe6e2eb
 8008474:	fec56d5d 	.word	0xfec56d5d
 8008478:	3fb27bb2 	.word	0x3fb27bb2

0800847c <drawMenu>:

// Draw the Menu screen
void drawMenu()
{
 800847c:	b580      	push	{r7, lr}
 800847e:	af00      	add	r7, sp, #0
	  BSP_LCD_Clear(LCD_COLOR_WHITE);
 8008480:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8008484:	f000 f8ca 	bl	800861c <BSP_LCD_Clear>
	  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8008488:	2000      	movs	r0, #0
 800848a:	f000 f89b 	bl	80085c4 <BSP_LCD_SetTextColor>
	  BSP_LCD_DrawHLine(50,30,170);
 800848e:	22aa      	movs	r2, #170	; 0xaa
 8008490:	211e      	movs	r1, #30
 8008492:	2032      	movs	r0, #50	; 0x32
 8008494:	f000 f9c2 	bl	800881c <BSP_LCD_DrawHLine>
	  BSP_LCD_DrawHLine(50,200,170);
 8008498:	22aa      	movs	r2, #170	; 0xaa
 800849a:	21c8      	movs	r1, #200	; 0xc8
 800849c:	2032      	movs	r0, #50	; 0x32
 800849e:	f000 f9bd 	bl	800881c <BSP_LCD_DrawHLine>
	  BSP_LCD_DrawVLine(50, 30, 170);
 80084a2:	22aa      	movs	r2, #170	; 0xaa
 80084a4:	211e      	movs	r1, #30
 80084a6:	2032      	movs	r0, #50	; 0x32
 80084a8:	f000 f9f2 	bl	8008890 <BSP_LCD_DrawVLine>
	  BSP_LCD_DrawVLine(220, 30, 170);
 80084ac:	22aa      	movs	r2, #170	; 0xaa
 80084ae:	211e      	movs	r1, #30
 80084b0:	20dc      	movs	r0, #220	; 0xdc
 80084b2:	f000 f9ed 	bl	8008890 <BSP_LCD_DrawVLine>
}
 80084b6:	bf00      	nop
 80084b8:	bd80      	pop	{r7, pc}
	...

080084bc <loadImageIntoMemory>:

// Load LCD Pixel values to Memory
void loadImageIntoMemory()
{
 80084bc:	b590      	push	{r4, r7, lr}
 80084be:	b083      	sub	sp, #12
 80084c0:	af00      	add	r7, sp, #0
	for(uint16_t i=31; i<199; i++)
 80084c2:	231f      	movs	r3, #31
 80084c4:	80fb      	strh	r3, [r7, #6]
 80084c6:	e01a      	b.n	80084fe <loadImageIntoMemory+0x42>
	{
		for(uint16_t j=51;j<219;j++)
 80084c8:	2333      	movs	r3, #51	; 0x33
 80084ca:	80bb      	strh	r3, [r7, #4]
 80084cc:	e011      	b.n	80084f2 <loadImageIntoMemory+0x36>
		{
			*ptToImage = ili9325_ReadPixel(j, i);
 80084ce:	4b0f      	ldr	r3, [pc, #60]	; (800850c <loadImageIntoMemory+0x50>)
 80084d0:	681c      	ldr	r4, [r3, #0]
 80084d2:	88fa      	ldrh	r2, [r7, #6]
 80084d4:	88bb      	ldrh	r3, [r7, #4]
 80084d6:	4611      	mov	r1, r2
 80084d8:	4618      	mov	r0, r3
 80084da:	f7ff f9c4 	bl	8007866 <ili9325_ReadPixel>
 80084de:	4603      	mov	r3, r0
 80084e0:	8023      	strh	r3, [r4, #0]
			ptToImage++;
 80084e2:	4b0a      	ldr	r3, [pc, #40]	; (800850c <loadImageIntoMemory+0x50>)
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	3302      	adds	r3, #2
 80084e8:	4a08      	ldr	r2, [pc, #32]	; (800850c <loadImageIntoMemory+0x50>)
 80084ea:	6013      	str	r3, [r2, #0]
		for(uint16_t j=51;j<219;j++)
 80084ec:	88bb      	ldrh	r3, [r7, #4]
 80084ee:	3301      	adds	r3, #1
 80084f0:	80bb      	strh	r3, [r7, #4]
 80084f2:	88bb      	ldrh	r3, [r7, #4]
 80084f4:	2bda      	cmp	r3, #218	; 0xda
 80084f6:	d9ea      	bls.n	80084ce <loadImageIntoMemory+0x12>
	for(uint16_t i=31; i<199; i++)
 80084f8:	88fb      	ldrh	r3, [r7, #6]
 80084fa:	3301      	adds	r3, #1
 80084fc:	80fb      	strh	r3, [r7, #6]
 80084fe:	88fb      	ldrh	r3, [r7, #6]
 8008500:	2bc6      	cmp	r3, #198	; 0xc6
 8008502:	d9e1      	bls.n	80084c8 <loadImageIntoMemory+0xc>
		}
	}
}
 8008504:	bf00      	nop
 8008506:	370c      	adds	r7, #12
 8008508:	46bd      	mov	sp, r7
 800850a:	bd90      	pop	{r4, r7, pc}
 800850c:	20000464 	.word	0x20000464

08008510 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008510:	b480      	push	{r7}
 8008512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8008514:	bf00      	nop
 8008516:	46bd      	mov	sp, r7
 8008518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851c:	4770      	bx	lr
	...

08008520 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8008520:	b580      	push	{r7, lr}
 8008522:	b082      	sub	sp, #8
 8008524:	af00      	add	r7, sp, #0
  uint8_t ret = LCD_ERROR;
 8008526:	2301      	movs	r3, #1
 8008528:	71fb      	strb	r3, [r7, #7]
  
  /* Default value for draw propriety */
  DrawProp.BackColor = 0xFFFF;
 800852a:	4b16      	ldr	r3, [pc, #88]	; (8008584 <BSP_LCD_Init+0x64>)
 800852c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008530:	605a      	str	r2, [r3, #4]
  DrawProp.pFont     = &Font24;
 8008532:	4b14      	ldr	r3, [pc, #80]	; (8008584 <BSP_LCD_Init+0x64>)
 8008534:	4a14      	ldr	r2, [pc, #80]	; (8008588 <BSP_LCD_Init+0x68>)
 8008536:	609a      	str	r2, [r3, #8]
  DrawProp.TextColor = 0x0000;
 8008538:	4b12      	ldr	r3, [pc, #72]	; (8008584 <BSP_LCD_Init+0x64>)
 800853a:	2200      	movs	r2, #0
 800853c:	601a      	str	r2, [r3, #0]
  if(ili9325_drv.ReadID() == ILI9325_ID || ili9325_drv.ReadID() == ILI9328_ID)
 800853e:	4b13      	ldr	r3, [pc, #76]	; (800858c <BSP_LCD_Init+0x6c>)
 8008540:	685b      	ldr	r3, [r3, #4]
 8008542:	4798      	blx	r3
 8008544:	4603      	mov	r3, r0
 8008546:	461a      	mov	r2, r3
 8008548:	f249 3325 	movw	r3, #37669	; 0x9325
 800854c:	429a      	cmp	r2, r3
 800854e:	d008      	beq.n	8008562 <BSP_LCD_Init+0x42>
 8008550:	4b0e      	ldr	r3, [pc, #56]	; (800858c <BSP_LCD_Init+0x6c>)
 8008552:	685b      	ldr	r3, [r3, #4]
 8008554:	4798      	blx	r3
 8008556:	4603      	mov	r3, r0
 8008558:	461a      	mov	r2, r3
 800855a:	f249 3328 	movw	r3, #37672	; 0x9328
 800855e:	429a      	cmp	r2, r3
 8008560:	d10b      	bne.n	800857a <BSP_LCD_Init+0x5a>
  {
    lcd_drv = &ili9325_drv;
 8008562:	4b0b      	ldr	r3, [pc, #44]	; (8008590 <BSP_LCD_Init+0x70>)
 8008564:	4a09      	ldr	r2, [pc, #36]	; (800858c <BSP_LCD_Init+0x6c>)
 8008566:	601a      	str	r2, [r3, #0]

    /* LCD Init */   
    lcd_drv->Init();
 8008568:	4b09      	ldr	r3, [pc, #36]	; (8008590 <BSP_LCD_Init+0x70>)
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	4798      	blx	r3
    
    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8008570:	4805      	ldr	r0, [pc, #20]	; (8008588 <BSP_LCD_Init+0x68>)
 8008572:	f000 f837 	bl	80085e4 <BSP_LCD_SetFont>

    ret = LCD_OK;
 8008576:	2300      	movs	r3, #0
 8008578:	71fb      	strb	r3, [r7, #7]
  }
  
  return ret;
 800857a:	79fb      	ldrb	r3, [r7, #7]
}
 800857c:	4618      	mov	r0, r3
 800857e:	3708      	adds	r7, #8
 8008580:	46bd      	mov	sp, r7
 8008582:	bd80      	pop	{r7, pc}
 8008584:	20010098 	.word	0x20010098
 8008588:	20000468 	.word	0x20000468
 800858c:	20000428 	.word	0x20000428
 8008590:	20001680 	.word	0x20001680

08008594 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	af00      	add	r7, sp, #0
  return(lcd_drv->GetLcdPixelWidth());
 8008598:	4b03      	ldr	r3, [pc, #12]	; (80085a8 <BSP_LCD_GetXSize+0x14>)
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800859e:	4798      	blx	r3
 80085a0:	4603      	mov	r3, r0
}
 80085a2:	4618      	mov	r0, r3
 80085a4:	bd80      	pop	{r7, pc}
 80085a6:	bf00      	nop
 80085a8:	20001680 	.word	0x20001680

080085ac <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	af00      	add	r7, sp, #0
  return(lcd_drv->GetLcdPixelHeight());
 80085b0:	4b03      	ldr	r3, [pc, #12]	; (80085c0 <BSP_LCD_GetYSize+0x14>)
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085b6:	4798      	blx	r3
 80085b8:	4603      	mov	r3, r0
}
 80085ba:	4618      	mov	r0, r3
 80085bc:	bd80      	pop	{r7, pc}
 80085be:	bf00      	nop
 80085c0:	20001680 	.word	0x20001680

080085c4 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code RGB(5-6-5)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint16_t Color)
{
 80085c4:	b480      	push	{r7}
 80085c6:	b083      	sub	sp, #12
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	4603      	mov	r3, r0
 80085cc:	80fb      	strh	r3, [r7, #6]
  DrawProp.TextColor = Color;
 80085ce:	88fb      	ldrh	r3, [r7, #6]
 80085d0:	4a03      	ldr	r2, [pc, #12]	; (80085e0 <BSP_LCD_SetTextColor+0x1c>)
 80085d2:	6013      	str	r3, [r2, #0]
}
 80085d4:	bf00      	nop
 80085d6:	370c      	adds	r7, #12
 80085d8:	46bd      	mov	sp, r7
 80085da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085de:	4770      	bx	lr
 80085e0:	20010098 	.word	0x20010098

080085e4 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  pFonts: Font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 80085e4:	b480      	push	{r7}
 80085e6:	b083      	sub	sp, #12
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
  DrawProp.pFont = pFonts;
 80085ec:	4a04      	ldr	r2, [pc, #16]	; (8008600 <BSP_LCD_SetFont+0x1c>)
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	6093      	str	r3, [r2, #8]
}
 80085f2:	bf00      	nop
 80085f4:	370c      	adds	r7, #12
 80085f6:	46bd      	mov	sp, r7
 80085f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fc:	4770      	bx	lr
 80085fe:	bf00      	nop
 8008600:	20010098 	.word	0x20010098

08008604 <BSP_LCD_GetFont>:
/**
  * @brief  Gets the LCD text font.
  * @retval Used font
  */
sFONT *BSP_LCD_GetFont(void)
{
 8008604:	b480      	push	{r7}
 8008606:	af00      	add	r7, sp, #0
  return DrawProp.pFont;
 8008608:	4b03      	ldr	r3, [pc, #12]	; (8008618 <BSP_LCD_GetFont+0x14>)
 800860a:	689b      	ldr	r3, [r3, #8]
}
 800860c:	4618      	mov	r0, r3
 800860e:	46bd      	mov	sp, r7
 8008610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008614:	4770      	bx	lr
 8008616:	bf00      	nop
 8008618:	20010098 	.word	0x20010098

0800861c <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint16_t Color)
{ 
 800861c:	b590      	push	{r4, r7, lr}
 800861e:	b085      	sub	sp, #20
 8008620:	af00      	add	r7, sp, #0
 8008622:	4603      	mov	r3, r0
 8008624:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8008626:	2300      	movs	r3, #0
 8008628:	60fb      	str	r3, [r7, #12]
  
  uint32_t color_backup = DrawProp.TextColor; 
 800862a:	4b15      	ldr	r3, [pc, #84]	; (8008680 <BSP_LCD_Clear+0x64>)
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	60bb      	str	r3, [r7, #8]
  DrawProp.TextColor = Color;
 8008630:	88fb      	ldrh	r3, [r7, #6]
 8008632:	4a13      	ldr	r2, [pc, #76]	; (8008680 <BSP_LCD_Clear+0x64>)
 8008634:	6013      	str	r3, [r2, #0]
  
  for(counter = 0; counter < BSP_LCD_GetYSize(); counter++)
 8008636:	2300      	movs	r3, #0
 8008638:	60fb      	str	r3, [r7, #12]
 800863a:	e00d      	b.n	8008658 <BSP_LCD_Clear+0x3c>
  {
    BSP_LCD_DrawHLine(0, counter, BSP_LCD_GetXSize());
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	b29c      	uxth	r4, r3
 8008640:	f7ff ffa8 	bl	8008594 <BSP_LCD_GetXSize>
 8008644:	4603      	mov	r3, r0
 8008646:	b29b      	uxth	r3, r3
 8008648:	461a      	mov	r2, r3
 800864a:	4621      	mov	r1, r4
 800864c:	2000      	movs	r0, #0
 800864e:	f000 f8e5 	bl	800881c <BSP_LCD_DrawHLine>
  for(counter = 0; counter < BSP_LCD_GetYSize(); counter++)
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	3301      	adds	r3, #1
 8008656:	60fb      	str	r3, [r7, #12]
 8008658:	f7ff ffa8 	bl	80085ac <BSP_LCD_GetYSize>
 800865c:	4602      	mov	r2, r0
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	4293      	cmp	r3, r2
 8008662:	d3eb      	bcc.n	800863c <BSP_LCD_Clear+0x20>
  }

  DrawProp.TextColor = color_backup; 
 8008664:	4a06      	ldr	r2, [pc, #24]	; (8008680 <BSP_LCD_Clear+0x64>)
 8008666:	68bb      	ldr	r3, [r7, #8]
 8008668:	6013      	str	r3, [r2, #0]
  BSP_LCD_SetTextColor(DrawProp.TextColor);
 800866a:	4b05      	ldr	r3, [pc, #20]	; (8008680 <BSP_LCD_Clear+0x64>)
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	b29b      	uxth	r3, r3
 8008670:	4618      	mov	r0, r3
 8008672:	f7ff ffa7 	bl	80085c4 <BSP_LCD_SetTextColor>
}
 8008676:	bf00      	nop
 8008678:	3714      	adds	r7, #20
 800867a:	46bd      	mov	sp, r7
 800867c:	bd90      	pop	{r4, r7, pc}
 800867e:	bf00      	nop
 8008680:	20010098 	.word	0x20010098

08008684 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8008684:	b580      	push	{r7, lr}
 8008686:	b082      	sub	sp, #8
 8008688:	af00      	add	r7, sp, #0
 800868a:	4603      	mov	r3, r0
 800868c:	80fb      	strh	r3, [r7, #6]
 800868e:	460b      	mov	r3, r1
 8008690:	80bb      	strh	r3, [r7, #4]
 8008692:	4613      	mov	r3, r2
 8008694:	70fb      	strb	r3, [r7, #3]
  LCD_DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 8008696:	4b0f      	ldr	r3, [pc, #60]	; (80086d4 <BSP_LCD_DisplayChar+0x50>)
 8008698:	689b      	ldr	r3, [r3, #8]
 800869a:	681a      	ldr	r2, [r3, #0]
 800869c:	78fb      	ldrb	r3, [r7, #3]
 800869e:	3b20      	subs	r3, #32
    DrawProp.pFont->Height * ((DrawProp.pFont->Width + 7) / 8)]);
 80086a0:	490c      	ldr	r1, [pc, #48]	; (80086d4 <BSP_LCD_DisplayChar+0x50>)
 80086a2:	6889      	ldr	r1, [r1, #8]
 80086a4:	88c9      	ldrh	r1, [r1, #6]
  LCD_DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 80086a6:	fb01 f103 	mul.w	r1, r1, r3
    DrawProp.pFont->Height * ((DrawProp.pFont->Width + 7) / 8)]);
 80086aa:	4b0a      	ldr	r3, [pc, #40]	; (80086d4 <BSP_LCD_DisplayChar+0x50>)
 80086ac:	689b      	ldr	r3, [r3, #8]
 80086ae:	889b      	ldrh	r3, [r3, #4]
 80086b0:	3307      	adds	r3, #7
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	da00      	bge.n	80086b8 <BSP_LCD_DisplayChar+0x34>
 80086b6:	3307      	adds	r3, #7
 80086b8:	10db      	asrs	r3, r3, #3
 80086ba:	fb03 f301 	mul.w	r3, r3, r1
  LCD_DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 80086be:	441a      	add	r2, r3
 80086c0:	88b9      	ldrh	r1, [r7, #4]
 80086c2:	88fb      	ldrh	r3, [r7, #6]
 80086c4:	4618      	mov	r0, r3
 80086c6:	f000 fadd 	bl	8008c84 <LCD_DrawChar>
}
 80086ca:	bf00      	nop
 80086cc:	3708      	adds	r7, #8
 80086ce:	46bd      	mov	sp, r7
 80086d0:	bd80      	pop	{r7, pc}
 80086d2:	bf00      	nop
 80086d4:	20010098 	.word	0x20010098

080086d8 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *pText, Line_ModeTypdef Mode)
{
 80086d8:	b590      	push	{r4, r7, lr}
 80086da:	b089      	sub	sp, #36	; 0x24
 80086dc:	af00      	add	r7, sp, #0
 80086de:	60ba      	str	r2, [r7, #8]
 80086e0:	461a      	mov	r2, r3
 80086e2:	4603      	mov	r3, r0
 80086e4:	81fb      	strh	r3, [r7, #14]
 80086e6:	460b      	mov	r3, r1
 80086e8:	81bb      	strh	r3, [r7, #12]
 80086ea:	4613      	mov	r3, r2
 80086ec:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, counter = 0;
 80086ee:	2301      	movs	r3, #1
 80086f0:	83fb      	strh	r3, [r7, #30]
 80086f2:	2300      	movs	r3, #0
 80086f4:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 80086f6:	2300      	movs	r3, #0
 80086f8:	61bb      	str	r3, [r7, #24]
 80086fa:	2300      	movs	r3, #0
 80086fc:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 80086fe:	68bb      	ldr	r3, [r7, #8]
 8008700:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8008702:	e002      	b.n	800870a <BSP_LCD_DisplayStringAt+0x32>
 8008704:	69bb      	ldr	r3, [r7, #24]
 8008706:	3301      	adds	r3, #1
 8008708:	61bb      	str	r3, [r7, #24]
 800870a:	697b      	ldr	r3, [r7, #20]
 800870c:	1c5a      	adds	r2, r3, #1
 800870e:	617a      	str	r2, [r7, #20]
 8008710:	781b      	ldrb	r3, [r3, #0]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d1f6      	bne.n	8008704 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp.pFont->Width);
 8008716:	f7ff ff3d 	bl	8008594 <BSP_LCD_GetXSize>
 800871a:	4602      	mov	r2, r0
 800871c:	4b32      	ldr	r3, [pc, #200]	; (80087e8 <BSP_LCD_DisplayStringAt+0x110>)
 800871e:	689b      	ldr	r3, [r3, #8]
 8008720:	889b      	ldrh	r3, [r3, #4]
 8008722:	fbb2 f3f3 	udiv	r3, r2, r3
 8008726:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 8008728:	79fb      	ldrb	r3, [r7, #7]
 800872a:	2b02      	cmp	r3, #2
 800872c:	d014      	beq.n	8008758 <BSP_LCD_DisplayStringAt+0x80>
 800872e:	2b03      	cmp	r3, #3
 8008730:	d00f      	beq.n	8008752 <BSP_LCD_DisplayStringAt+0x7a>
 8008732:	2b01      	cmp	r3, #1
 8008734:	d11e      	bne.n	8008774 <BSP_LCD_DisplayStringAt+0x9c>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp.pFont->Width) / 2;
 8008736:	693a      	ldr	r2, [r7, #16]
 8008738:	69bb      	ldr	r3, [r7, #24]
 800873a:	1ad3      	subs	r3, r2, r3
 800873c:	4a2a      	ldr	r2, [pc, #168]	; (80087e8 <BSP_LCD_DisplayStringAt+0x110>)
 800873e:	6892      	ldr	r2, [r2, #8]
 8008740:	8892      	ldrh	r2, [r2, #4]
 8008742:	fb02 f303 	mul.w	r3, r2, r3
 8008746:	085b      	lsrs	r3, r3, #1
 8008748:	b29a      	uxth	r2, r3
 800874a:	89fb      	ldrh	r3, [r7, #14]
 800874c:	4413      	add	r3, r2
 800874e:	83fb      	strh	r3, [r7, #30]
      break;
 8008750:	e013      	b.n	800877a <BSP_LCD_DisplayStringAt+0xa2>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
 8008752:	89fb      	ldrh	r3, [r7, #14]
 8008754:	83fb      	strh	r3, [r7, #30]
      break;
 8008756:	e010      	b.n	800877a <BSP_LCD_DisplayStringAt+0xa2>
    }
  case RIGHT_MODE:
    {
      refcolumn =  - Xpos + ((xsize - size)*DrawProp.pFont->Width);
 8008758:	693a      	ldr	r2, [r7, #16]
 800875a:	69bb      	ldr	r3, [r7, #24]
 800875c:	1ad3      	subs	r3, r2, r3
 800875e:	b29a      	uxth	r2, r3
 8008760:	4b21      	ldr	r3, [pc, #132]	; (80087e8 <BSP_LCD_DisplayStringAt+0x110>)
 8008762:	689b      	ldr	r3, [r3, #8]
 8008764:	889b      	ldrh	r3, [r3, #4]
 8008766:	fb12 f303 	smulbb	r3, r2, r3
 800876a:	b29a      	uxth	r2, r3
 800876c:	89fb      	ldrh	r3, [r7, #14]
 800876e:	1ad3      	subs	r3, r2, r3
 8008770:	83fb      	strh	r3, [r7, #30]
      break;
 8008772:	e002      	b.n	800877a <BSP_LCD_DisplayStringAt+0xa2>
    }    
  default:
    {
      refcolumn = Xpos;
 8008774:	89fb      	ldrh	r3, [r7, #14]
 8008776:	83fb      	strh	r3, [r7, #30]
      break;
 8008778:	bf00      	nop
    }
  }
  
  /* Send the string character by character on lCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (counter*DrawProp.pFont->Width)) & 0xFFFF) >= DrawProp.pFont->Width))
 800877a:	e012      	b.n	80087a2 <BSP_LCD_DisplayStringAt+0xca>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Ypos, *pText);
 800877c:	68bb      	ldr	r3, [r7, #8]
 800877e:	781a      	ldrb	r2, [r3, #0]
 8008780:	89b9      	ldrh	r1, [r7, #12]
 8008782:	8bfb      	ldrh	r3, [r7, #30]
 8008784:	4618      	mov	r0, r3
 8008786:	f7ff ff7d 	bl	8008684 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp.pFont->Width;
 800878a:	4b17      	ldr	r3, [pc, #92]	; (80087e8 <BSP_LCD_DisplayStringAt+0x110>)
 800878c:	689b      	ldr	r3, [r3, #8]
 800878e:	889a      	ldrh	r2, [r3, #4]
 8008790:	8bfb      	ldrh	r3, [r7, #30]
 8008792:	4413      	add	r3, r2
 8008794:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 8008796:	68bb      	ldr	r3, [r7, #8]
 8008798:	3301      	adds	r3, #1
 800879a:	60bb      	str	r3, [r7, #8]
    counter++;
 800879c:	8bbb      	ldrh	r3, [r7, #28]
 800879e:	3301      	adds	r3, #1
 80087a0:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (counter*DrawProp.pFont->Width)) & 0xFFFF) >= DrawProp.pFont->Width))
 80087a2:	68bb      	ldr	r3, [r7, #8]
 80087a4:	781b      	ldrb	r3, [r3, #0]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	bf14      	ite	ne
 80087aa:	2301      	movne	r3, #1
 80087ac:	2300      	moveq	r3, #0
 80087ae:	b2dc      	uxtb	r4, r3
 80087b0:	f7ff fef0 	bl	8008594 <BSP_LCD_GetXSize>
 80087b4:	4601      	mov	r1, r0
 80087b6:	8bbb      	ldrh	r3, [r7, #28]
 80087b8:	4a0b      	ldr	r2, [pc, #44]	; (80087e8 <BSP_LCD_DisplayStringAt+0x110>)
 80087ba:	6892      	ldr	r2, [r2, #8]
 80087bc:	8892      	ldrh	r2, [r2, #4]
 80087be:	fb02 f303 	mul.w	r3, r2, r3
 80087c2:	1acb      	subs	r3, r1, r3
 80087c4:	b29b      	uxth	r3, r3
 80087c6:	4a08      	ldr	r2, [pc, #32]	; (80087e8 <BSP_LCD_DisplayStringAt+0x110>)
 80087c8:	6892      	ldr	r2, [r2, #8]
 80087ca:	8892      	ldrh	r2, [r2, #4]
 80087cc:	4293      	cmp	r3, r2
 80087ce:	bf2c      	ite	cs
 80087d0:	2301      	movcs	r3, #1
 80087d2:	2300      	movcc	r3, #0
 80087d4:	b2db      	uxtb	r3, r3
 80087d6:	4023      	ands	r3, r4
 80087d8:	b2db      	uxtb	r3, r3
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d1ce      	bne.n	800877c <BSP_LCD_DisplayStringAt+0xa4>
  }
}
 80087de:	bf00      	nop
 80087e0:	3724      	adds	r7, #36	; 0x24
 80087e2:	46bd      	mov	sp, r7
 80087e4:	bd90      	pop	{r4, r7, pc}
 80087e6:	bf00      	nop
 80087e8:	20010098 	.word	0x20010098

080087ec <BSP_LCD_DisplayStringAtLine>:
  *            @arg  0..29: if the Current fonts is Font8x8
  * @param  pText: Pointer to string to display on LCD
  * @retval None
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *pText)
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b082      	sub	sp, #8
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	4603      	mov	r3, r0
 80087f4:	6039      	str	r1, [r7, #0]
 80087f6:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line),pText, LEFT_MODE);
 80087f8:	f7ff ff04 	bl	8008604 <BSP_LCD_GetFont>
 80087fc:	4603      	mov	r3, r0
 80087fe:	88db      	ldrh	r3, [r3, #6]
 8008800:	88fa      	ldrh	r2, [r7, #6]
 8008802:	fb12 f303 	smulbb	r3, r2, r3
 8008806:	b299      	uxth	r1, r3
 8008808:	2303      	movs	r3, #3
 800880a:	683a      	ldr	r2, [r7, #0]
 800880c:	2000      	movs	r0, #0
 800880e:	f7ff ff63 	bl	80086d8 <BSP_LCD_DisplayStringAt>
}
 8008812:	bf00      	nop
 8008814:	3708      	adds	r7, #8
 8008816:	46bd      	mov	sp, r7
 8008818:	bd80      	pop	{r7, pc}
	...

0800881c <BSP_LCD_DrawHLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 800881c:	b590      	push	{r4, r7, lr}
 800881e:	b085      	sub	sp, #20
 8008820:	af00      	add	r7, sp, #0
 8008822:	4603      	mov	r3, r0
 8008824:	80fb      	strh	r3, [r7, #6]
 8008826:	460b      	mov	r3, r1
 8008828:	80bb      	strh	r3, [r7, #4]
 800882a:	4613      	mov	r3, r2
 800882c:	807b      	strh	r3, [r7, #2]
  uint32_t index = 0;
 800882e:	2300      	movs	r3, #0
 8008830:	60fb      	str	r3, [r7, #12]
  
  if(lcd_drv->DrawHLine != NULL)
 8008832:	4b15      	ldr	r3, [pc, #84]	; (8008888 <BSP_LCD_DrawHLine+0x6c>)
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	6a1b      	ldr	r3, [r3, #32]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d00a      	beq.n	8008852 <BSP_LCD_DrawHLine+0x36>
  {
    lcd_drv->DrawHLine(DrawProp.TextColor, Xpos, Ypos, Length);
 800883c:	4b12      	ldr	r3, [pc, #72]	; (8008888 <BSP_LCD_DrawHLine+0x6c>)
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	6a1c      	ldr	r4, [r3, #32]
 8008842:	4b12      	ldr	r3, [pc, #72]	; (800888c <BSP_LCD_DrawHLine+0x70>)
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	b298      	uxth	r0, r3
 8008848:	887b      	ldrh	r3, [r7, #2]
 800884a:	88ba      	ldrh	r2, [r7, #4]
 800884c:	88f9      	ldrh	r1, [r7, #6]
 800884e:	47a0      	blx	r4
    for(index = 0; index < Length; index++)
    {
      LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
    }
  }
}
 8008850:	e015      	b.n	800887e <BSP_LCD_DrawHLine+0x62>
    for(index = 0; index < Length; index++)
 8008852:	2300      	movs	r3, #0
 8008854:	60fb      	str	r3, [r7, #12]
 8008856:	e00e      	b.n	8008876 <BSP_LCD_DrawHLine+0x5a>
      LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	b29a      	uxth	r2, r3
 800885c:	88fb      	ldrh	r3, [r7, #6]
 800885e:	4413      	add	r3, r2
 8008860:	b298      	uxth	r0, r3
 8008862:	4b0a      	ldr	r3, [pc, #40]	; (800888c <BSP_LCD_DrawHLine+0x70>)
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	b29a      	uxth	r2, r3
 8008868:	88bb      	ldrh	r3, [r7, #4]
 800886a:	4619      	mov	r1, r3
 800886c:	f000 f9ee 	bl	8008c4c <LCD_DrawPixel>
    for(index = 0; index < Length; index++)
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	3301      	adds	r3, #1
 8008874:	60fb      	str	r3, [r7, #12]
 8008876:	887b      	ldrh	r3, [r7, #2]
 8008878:	68fa      	ldr	r2, [r7, #12]
 800887a:	429a      	cmp	r2, r3
 800887c:	d3ec      	bcc.n	8008858 <BSP_LCD_DrawHLine+0x3c>
}
 800887e:	bf00      	nop
 8008880:	3714      	adds	r7, #20
 8008882:	46bd      	mov	sp, r7
 8008884:	bd90      	pop	{r4, r7, pc}
 8008886:	bf00      	nop
 8008888:	20001680 	.word	0x20001680
 800888c:	20010098 	.word	0x20010098

08008890 <BSP_LCD_DrawVLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawVLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8008890:	b590      	push	{r4, r7, lr}
 8008892:	b085      	sub	sp, #20
 8008894:	af00      	add	r7, sp, #0
 8008896:	4603      	mov	r3, r0
 8008898:	80fb      	strh	r3, [r7, #6]
 800889a:	460b      	mov	r3, r1
 800889c:	80bb      	strh	r3, [r7, #4]
 800889e:	4613      	mov	r3, r2
 80088a0:	807b      	strh	r3, [r7, #2]
  uint32_t index = 0;
 80088a2:	2300      	movs	r3, #0
 80088a4:	60fb      	str	r3, [r7, #12]
  
  if(lcd_drv->DrawVLine != NULL)
 80088a6:	4b15      	ldr	r3, [pc, #84]	; (80088fc <BSP_LCD_DrawVLine+0x6c>)
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d00a      	beq.n	80088c6 <BSP_LCD_DrawVLine+0x36>
  {
    lcd_drv->DrawVLine(DrawProp.TextColor, Xpos, Ypos, Length);
 80088b0:	4b12      	ldr	r3, [pc, #72]	; (80088fc <BSP_LCD_DrawVLine+0x6c>)
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80088b6:	4b12      	ldr	r3, [pc, #72]	; (8008900 <BSP_LCD_DrawVLine+0x70>)
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	b298      	uxth	r0, r3
 80088bc:	887b      	ldrh	r3, [r7, #2]
 80088be:	88ba      	ldrh	r2, [r7, #4]
 80088c0:	88f9      	ldrh	r1, [r7, #6]
 80088c2:	47a0      	blx	r4
    for(index = 0; index < Length; index++)
    {
      LCD_DrawPixel(Xpos, Ypos + index, DrawProp.TextColor);
    }
  }
}
 80088c4:	e015      	b.n	80088f2 <BSP_LCD_DrawVLine+0x62>
    for(index = 0; index < Length; index++)
 80088c6:	2300      	movs	r3, #0
 80088c8:	60fb      	str	r3, [r7, #12]
 80088ca:	e00e      	b.n	80088ea <BSP_LCD_DrawVLine+0x5a>
      LCD_DrawPixel(Xpos, Ypos + index, DrawProp.TextColor);
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	b29a      	uxth	r2, r3
 80088d0:	88bb      	ldrh	r3, [r7, #4]
 80088d2:	4413      	add	r3, r2
 80088d4:	b299      	uxth	r1, r3
 80088d6:	4b0a      	ldr	r3, [pc, #40]	; (8008900 <BSP_LCD_DrawVLine+0x70>)
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	b29a      	uxth	r2, r3
 80088dc:	88fb      	ldrh	r3, [r7, #6]
 80088de:	4618      	mov	r0, r3
 80088e0:	f000 f9b4 	bl	8008c4c <LCD_DrawPixel>
    for(index = 0; index < Length; index++)
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	3301      	adds	r3, #1
 80088e8:	60fb      	str	r3, [r7, #12]
 80088ea:	887b      	ldrh	r3, [r7, #2]
 80088ec:	68fa      	ldr	r2, [r7, #12]
 80088ee:	429a      	cmp	r2, r3
 80088f0:	d3ec      	bcc.n	80088cc <BSP_LCD_DrawVLine+0x3c>
}
 80088f2:	bf00      	nop
 80088f4:	3714      	adds	r7, #20
 80088f6:	46bd      	mov	sp, r7
 80088f8:	bd90      	pop	{r4, r7, pc}
 80088fa:	bf00      	nop
 80088fc:	20001680 	.word	0x20001680
 8008900:	20010098 	.word	0x20010098

08008904 <BSP_LCD_DrawCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8008904:	b580      	push	{r7, lr}
 8008906:	b086      	sub	sp, #24
 8008908:	af00      	add	r7, sp, #0
 800890a:	4603      	mov	r3, r0
 800890c:	80fb      	strh	r3, [r7, #6]
 800890e:	460b      	mov	r3, r1
 8008910:	80bb      	strh	r3, [r7, #4]
 8008912:	4613      	mov	r3, r2
 8008914:	807b      	strh	r3, [r7, #2]
  int32_t  D;       /* Decision Variable */ 
  uint32_t  CurX;   /* Current X Value */
  uint32_t  CurY;   /* Current Y Value */ 
  
  D = 3 - (Radius << 1);
 8008916:	887b      	ldrh	r3, [r7, #2]
 8008918:	005b      	lsls	r3, r3, #1
 800891a:	f1c3 0303 	rsb	r3, r3, #3
 800891e:	617b      	str	r3, [r7, #20]
  CurX = 0;
 8008920:	2300      	movs	r3, #0
 8008922:	613b      	str	r3, [r7, #16]
  CurY = Radius;
 8008924:	887b      	ldrh	r3, [r7, #2]
 8008926:	60fb      	str	r3, [r7, #12]
  
  while (CurX <= CurY)
 8008928:	e09a      	b.n	8008a60 <BSP_LCD_DrawCircle+0x15c>
  {
    LCD_DrawPixel((Xpos + CurX), (Ypos - CurY), DrawProp.TextColor);
 800892a:	693b      	ldr	r3, [r7, #16]
 800892c:	b29a      	uxth	r2, r3
 800892e:	88fb      	ldrh	r3, [r7, #6]
 8008930:	4413      	add	r3, r2
 8008932:	b298      	uxth	r0, r3
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	b29b      	uxth	r3, r3
 8008938:	88ba      	ldrh	r2, [r7, #4]
 800893a:	1ad3      	subs	r3, r2, r3
 800893c:	b299      	uxth	r1, r3
 800893e:	4b4d      	ldr	r3, [pc, #308]	; (8008a74 <BSP_LCD_DrawCircle+0x170>)
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	b29b      	uxth	r3, r3
 8008944:	461a      	mov	r2, r3
 8008946:	f000 f981 	bl	8008c4c <LCD_DrawPixel>

    LCD_DrawPixel((Xpos - CurX), (Ypos - CurY), DrawProp.TextColor);
 800894a:	693b      	ldr	r3, [r7, #16]
 800894c:	b29b      	uxth	r3, r3
 800894e:	88fa      	ldrh	r2, [r7, #6]
 8008950:	1ad3      	subs	r3, r2, r3
 8008952:	b298      	uxth	r0, r3
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	b29b      	uxth	r3, r3
 8008958:	88ba      	ldrh	r2, [r7, #4]
 800895a:	1ad3      	subs	r3, r2, r3
 800895c:	b299      	uxth	r1, r3
 800895e:	4b45      	ldr	r3, [pc, #276]	; (8008a74 <BSP_LCD_DrawCircle+0x170>)
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	b29b      	uxth	r3, r3
 8008964:	461a      	mov	r2, r3
 8008966:	f000 f971 	bl	8008c4c <LCD_DrawPixel>

    LCD_DrawPixel((Xpos + CurY), (Ypos - CurX), DrawProp.TextColor);
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	b29a      	uxth	r2, r3
 800896e:	88fb      	ldrh	r3, [r7, #6]
 8008970:	4413      	add	r3, r2
 8008972:	b298      	uxth	r0, r3
 8008974:	693b      	ldr	r3, [r7, #16]
 8008976:	b29b      	uxth	r3, r3
 8008978:	88ba      	ldrh	r2, [r7, #4]
 800897a:	1ad3      	subs	r3, r2, r3
 800897c:	b299      	uxth	r1, r3
 800897e:	4b3d      	ldr	r3, [pc, #244]	; (8008a74 <BSP_LCD_DrawCircle+0x170>)
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	b29b      	uxth	r3, r3
 8008984:	461a      	mov	r2, r3
 8008986:	f000 f961 	bl	8008c4c <LCD_DrawPixel>

    LCD_DrawPixel((Xpos - CurY), (Ypos - CurX), DrawProp.TextColor);
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	b29b      	uxth	r3, r3
 800898e:	88fa      	ldrh	r2, [r7, #6]
 8008990:	1ad3      	subs	r3, r2, r3
 8008992:	b298      	uxth	r0, r3
 8008994:	693b      	ldr	r3, [r7, #16]
 8008996:	b29b      	uxth	r3, r3
 8008998:	88ba      	ldrh	r2, [r7, #4]
 800899a:	1ad3      	subs	r3, r2, r3
 800899c:	b299      	uxth	r1, r3
 800899e:	4b35      	ldr	r3, [pc, #212]	; (8008a74 <BSP_LCD_DrawCircle+0x170>)
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	b29b      	uxth	r3, r3
 80089a4:	461a      	mov	r2, r3
 80089a6:	f000 f951 	bl	8008c4c <LCD_DrawPixel>

    LCD_DrawPixel((Xpos + CurX), (Ypos + CurY), DrawProp.TextColor);
 80089aa:	693b      	ldr	r3, [r7, #16]
 80089ac:	b29a      	uxth	r2, r3
 80089ae:	88fb      	ldrh	r3, [r7, #6]
 80089b0:	4413      	add	r3, r2
 80089b2:	b298      	uxth	r0, r3
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	b29a      	uxth	r2, r3
 80089b8:	88bb      	ldrh	r3, [r7, #4]
 80089ba:	4413      	add	r3, r2
 80089bc:	b299      	uxth	r1, r3
 80089be:	4b2d      	ldr	r3, [pc, #180]	; (8008a74 <BSP_LCD_DrawCircle+0x170>)
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	b29b      	uxth	r3, r3
 80089c4:	461a      	mov	r2, r3
 80089c6:	f000 f941 	bl	8008c4c <LCD_DrawPixel>

    LCD_DrawPixel((Xpos - CurX), (Ypos + CurY), DrawProp.TextColor);
 80089ca:	693b      	ldr	r3, [r7, #16]
 80089cc:	b29b      	uxth	r3, r3
 80089ce:	88fa      	ldrh	r2, [r7, #6]
 80089d0:	1ad3      	subs	r3, r2, r3
 80089d2:	b298      	uxth	r0, r3
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	b29a      	uxth	r2, r3
 80089d8:	88bb      	ldrh	r3, [r7, #4]
 80089da:	4413      	add	r3, r2
 80089dc:	b299      	uxth	r1, r3
 80089de:	4b25      	ldr	r3, [pc, #148]	; (8008a74 <BSP_LCD_DrawCircle+0x170>)
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	b29b      	uxth	r3, r3
 80089e4:	461a      	mov	r2, r3
 80089e6:	f000 f931 	bl	8008c4c <LCD_DrawPixel>

    LCD_DrawPixel((Xpos + CurY), (Ypos + CurX), DrawProp.TextColor);
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	b29a      	uxth	r2, r3
 80089ee:	88fb      	ldrh	r3, [r7, #6]
 80089f0:	4413      	add	r3, r2
 80089f2:	b298      	uxth	r0, r3
 80089f4:	693b      	ldr	r3, [r7, #16]
 80089f6:	b29a      	uxth	r2, r3
 80089f8:	88bb      	ldrh	r3, [r7, #4]
 80089fa:	4413      	add	r3, r2
 80089fc:	b299      	uxth	r1, r3
 80089fe:	4b1d      	ldr	r3, [pc, #116]	; (8008a74 <BSP_LCD_DrawCircle+0x170>)
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	b29b      	uxth	r3, r3
 8008a04:	461a      	mov	r2, r3
 8008a06:	f000 f921 	bl	8008c4c <LCD_DrawPixel>

    LCD_DrawPixel((Xpos - CurY), (Ypos + CurX), DrawProp.TextColor);   
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	b29b      	uxth	r3, r3
 8008a0e:	88fa      	ldrh	r2, [r7, #6]
 8008a10:	1ad3      	subs	r3, r2, r3
 8008a12:	b298      	uxth	r0, r3
 8008a14:	693b      	ldr	r3, [r7, #16]
 8008a16:	b29a      	uxth	r2, r3
 8008a18:	88bb      	ldrh	r3, [r7, #4]
 8008a1a:	4413      	add	r3, r2
 8008a1c:	b299      	uxth	r1, r3
 8008a1e:	4b15      	ldr	r3, [pc, #84]	; (8008a74 <BSP_LCD_DrawCircle+0x170>)
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	b29b      	uxth	r3, r3
 8008a24:	461a      	mov	r2, r3
 8008a26:	f000 f911 	bl	8008c4c <LCD_DrawPixel>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8008a2a:	4813      	ldr	r0, [pc, #76]	; (8008a78 <BSP_LCD_DrawCircle+0x174>)
 8008a2c:	f7ff fdda 	bl	80085e4 <BSP_LCD_SetFont>

    if (D < 0)
 8008a30:	697b      	ldr	r3, [r7, #20]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	da06      	bge.n	8008a44 <BSP_LCD_DrawCircle+0x140>
    { 
      D += (CurX << 2) + 6;
 8008a36:	693b      	ldr	r3, [r7, #16]
 8008a38:	009a      	lsls	r2, r3, #2
 8008a3a:	697b      	ldr	r3, [r7, #20]
 8008a3c:	4413      	add	r3, r2
 8008a3e:	3306      	adds	r3, #6
 8008a40:	617b      	str	r3, [r7, #20]
 8008a42:	e00a      	b.n	8008a5a <BSP_LCD_DrawCircle+0x156>
    }
    else
    {
      D += ((CurX - CurY) << 2) + 10;
 8008a44:	693a      	ldr	r2, [r7, #16]
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	1ad3      	subs	r3, r2, r3
 8008a4a:	009a      	lsls	r2, r3, #2
 8008a4c:	697b      	ldr	r3, [r7, #20]
 8008a4e:	4413      	add	r3, r2
 8008a50:	330a      	adds	r3, #10
 8008a52:	617b      	str	r3, [r7, #20]
      CurY--;
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	3b01      	subs	r3, #1
 8008a58:	60fb      	str	r3, [r7, #12]
    }
    CurX++;
 8008a5a:	693b      	ldr	r3, [r7, #16]
 8008a5c:	3301      	adds	r3, #1
 8008a5e:	613b      	str	r3, [r7, #16]
  while (CurX <= CurY)
 8008a60:	693a      	ldr	r2, [r7, #16]
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	429a      	cmp	r2, r3
 8008a66:	f67f af60 	bls.w	800892a <BSP_LCD_DrawCircle+0x26>
  } 
}
 8008a6a:	bf00      	nop
 8008a6c:	3718      	adds	r7, #24
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	bd80      	pop	{r7, pc}
 8008a72:	bf00      	nop
 8008a74:	20010098 	.word	0x20010098
 8008a78:	20000468 	.word	0x20000468

08008a7c <BSP_LCD_DrawBitmap>:
  * @param  Ypos: Bmp Y position in the LCD
  * @param  pbmp: Pointer to Bmp picture address.
  * @retval None
  */
void BSP_LCD_DrawBitmap(uint16_t Xpos, uint16_t Ypos, uint8_t *pbmp)
{
 8008a7c:	b590      	push	{r4, r7, lr}
 8008a7e:	b085      	sub	sp, #20
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	4603      	mov	r3, r0
 8008a84:	603a      	str	r2, [r7, #0]
 8008a86:	80fb      	strh	r3, [r7, #6]
 8008a88:	460b      	mov	r3, r1
 8008a8a:	80bb      	strh	r3, [r7, #4]
  uint32_t height = 0;
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	60fb      	str	r3, [r7, #12]
  uint32_t width  = 0;
 8008a90:	2300      	movs	r3, #0
 8008a92:	60bb      	str	r3, [r7, #8]
  
  
  /* Read bitmap width */
  width = *(uint16_t *) (pbmp + 18);
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	3312      	adds	r3, #18
 8008a98:	881b      	ldrh	r3, [r3, #0]
 8008a9a:	60bb      	str	r3, [r7, #8]
  width |= (*(uint16_t *) (pbmp + 20)) << 16;
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	3314      	adds	r3, #20
 8008aa0:	881b      	ldrh	r3, [r3, #0]
 8008aa2:	041b      	lsls	r3, r3, #16
 8008aa4:	461a      	mov	r2, r3
 8008aa6:	68bb      	ldr	r3, [r7, #8]
 8008aa8:	4313      	orrs	r3, r2
 8008aaa:	60bb      	str	r3, [r7, #8]
  
  /* Read bitmap height */
  height = *(uint16_t *) (pbmp + 22);
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	3316      	adds	r3, #22
 8008ab0:	881b      	ldrh	r3, [r3, #0]
 8008ab2:	60fb      	str	r3, [r7, #12]
  height |= (*(uint16_t *) (pbmp + 24)) << 16; 
 8008ab4:	683b      	ldr	r3, [r7, #0]
 8008ab6:	3318      	adds	r3, #24
 8008ab8:	881b      	ldrh	r3, [r3, #0]
 8008aba:	041b      	lsls	r3, r3, #16
 8008abc:	461a      	mov	r2, r3
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	4313      	orrs	r3, r2
 8008ac2:	60fb      	str	r3, [r7, #12]
  
  LCD_SetDisplayWindow(Xpos, Ypos, width, height);
 8008ac4:	68bb      	ldr	r3, [r7, #8]
 8008ac6:	b29a      	uxth	r2, r3
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	b29b      	uxth	r3, r3
 8008acc:	88b9      	ldrh	r1, [r7, #4]
 8008ace:	88f8      	ldrh	r0, [r7, #6]
 8008ad0:	f000 f9ca 	bl	8008e68 <LCD_SetDisplayWindow>
  
  if(lcd_drv->DrawBitmap != NULL)
 8008ad4:	4b0e      	ldr	r3, [pc, #56]	; (8008b10 <BSP_LCD_DrawBitmap+0x94>)
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d006      	beq.n	8008aec <BSP_LCD_DrawBitmap+0x70>
  {
    lcd_drv->DrawBitmap(Xpos, Ypos, pbmp);
 8008ade:	4b0c      	ldr	r3, [pc, #48]	; (8008b10 <BSP_LCD_DrawBitmap+0x94>)
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ae4:	88b9      	ldrh	r1, [r7, #4]
 8008ae6:	88f8      	ldrh	r0, [r7, #6]
 8008ae8:	683a      	ldr	r2, [r7, #0]
 8008aea:	4798      	blx	r3
  } 
  LCD_SetDisplayWindow(0, 0, BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 8008aec:	f7ff fd52 	bl	8008594 <BSP_LCD_GetXSize>
 8008af0:	4603      	mov	r3, r0
 8008af2:	b29c      	uxth	r4, r3
 8008af4:	f7ff fd5a 	bl	80085ac <BSP_LCD_GetYSize>
 8008af8:	4603      	mov	r3, r0
 8008afa:	b29b      	uxth	r3, r3
 8008afc:	4622      	mov	r2, r4
 8008afe:	2100      	movs	r1, #0
 8008b00:	2000      	movs	r0, #0
 8008b02:	f000 f9b1 	bl	8008e68 <LCD_SetDisplayWindow>
}
 8008b06:	bf00      	nop
 8008b08:	3714      	adds	r7, #20
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	bd90      	pop	{r4, r7, pc}
 8008b0e:	bf00      	nop
 8008b10:	20001680 	.word	0x20001680

08008b14 <BSP_LCD_FillCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b086      	sub	sp, #24
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	4603      	mov	r3, r0
 8008b1c:	80fb      	strh	r3, [r7, #6]
 8008b1e:	460b      	mov	r3, r1
 8008b20:	80bb      	strh	r3, [r7, #4]
 8008b22:	4613      	mov	r3, r2
 8008b24:	807b      	strh	r3, [r7, #2]
  int32_t  D;        /* Decision Variable */ 
  uint32_t  CurX;    /* Current X Value */
  uint32_t  CurY;    /* Current Y Value */ 
  
  D = 3 - (Radius << 1);
 8008b26:	887b      	ldrh	r3, [r7, #2]
 8008b28:	005b      	lsls	r3, r3, #1
 8008b2a:	f1c3 0303 	rsb	r3, r3, #3
 8008b2e:	617b      	str	r3, [r7, #20]

  CurX = 0;
 8008b30:	2300      	movs	r3, #0
 8008b32:	613b      	str	r3, [r7, #16]
  CurY = Radius;
 8008b34:	887b      	ldrh	r3, [r7, #2]
 8008b36:	60fb      	str	r3, [r7, #12]
  
  BSP_LCD_SetTextColor(DrawProp.TextColor);
 8008b38:	4b3e      	ldr	r3, [pc, #248]	; (8008c34 <BSP_LCD_FillCircle+0x120>)
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	b29b      	uxth	r3, r3
 8008b3e:	4618      	mov	r0, r3
 8008b40:	f7ff fd40 	bl	80085c4 <BSP_LCD_SetTextColor>

  while (CurX <= CurY)
 8008b44:	e061      	b.n	8008c0a <BSP_LCD_FillCircle+0xf6>
  {
    if(CurY > 0) 
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d021      	beq.n	8008b90 <BSP_LCD_FillCircle+0x7c>
    {
      BSP_LCD_DrawHLine(Xpos - CurY, Ypos + CurX, 2*CurY);
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	b29b      	uxth	r3, r3
 8008b50:	88fa      	ldrh	r2, [r7, #6]
 8008b52:	1ad3      	subs	r3, r2, r3
 8008b54:	b298      	uxth	r0, r3
 8008b56:	693b      	ldr	r3, [r7, #16]
 8008b58:	b29a      	uxth	r2, r3
 8008b5a:	88bb      	ldrh	r3, [r7, #4]
 8008b5c:	4413      	add	r3, r2
 8008b5e:	b299      	uxth	r1, r3
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	b29b      	uxth	r3, r3
 8008b64:	005b      	lsls	r3, r3, #1
 8008b66:	b29b      	uxth	r3, r3
 8008b68:	461a      	mov	r2, r3
 8008b6a:	f7ff fe57 	bl	800881c <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - CurY, Ypos - CurX, 2*CurY);
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	b29b      	uxth	r3, r3
 8008b72:	88fa      	ldrh	r2, [r7, #6]
 8008b74:	1ad3      	subs	r3, r2, r3
 8008b76:	b298      	uxth	r0, r3
 8008b78:	693b      	ldr	r3, [r7, #16]
 8008b7a:	b29b      	uxth	r3, r3
 8008b7c:	88ba      	ldrh	r2, [r7, #4]
 8008b7e:	1ad3      	subs	r3, r2, r3
 8008b80:	b299      	uxth	r1, r3
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	b29b      	uxth	r3, r3
 8008b86:	005b      	lsls	r3, r3, #1
 8008b88:	b29b      	uxth	r3, r3
 8008b8a:	461a      	mov	r2, r3
 8008b8c:	f7ff fe46 	bl	800881c <BSP_LCD_DrawHLine>
    }

    if(CurX > 0) 
 8008b90:	693b      	ldr	r3, [r7, #16]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d021      	beq.n	8008bda <BSP_LCD_FillCircle+0xc6>
    {
      BSP_LCD_DrawHLine(Xpos - CurX, Ypos - CurY, 2*CurX);
 8008b96:	693b      	ldr	r3, [r7, #16]
 8008b98:	b29b      	uxth	r3, r3
 8008b9a:	88fa      	ldrh	r2, [r7, #6]
 8008b9c:	1ad3      	subs	r3, r2, r3
 8008b9e:	b298      	uxth	r0, r3
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	b29b      	uxth	r3, r3
 8008ba4:	88ba      	ldrh	r2, [r7, #4]
 8008ba6:	1ad3      	subs	r3, r2, r3
 8008ba8:	b299      	uxth	r1, r3
 8008baa:	693b      	ldr	r3, [r7, #16]
 8008bac:	b29b      	uxth	r3, r3
 8008bae:	005b      	lsls	r3, r3, #1
 8008bb0:	b29b      	uxth	r3, r3
 8008bb2:	461a      	mov	r2, r3
 8008bb4:	f7ff fe32 	bl	800881c <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - CurX, Ypos + CurY, 2*CurX);
 8008bb8:	693b      	ldr	r3, [r7, #16]
 8008bba:	b29b      	uxth	r3, r3
 8008bbc:	88fa      	ldrh	r2, [r7, #6]
 8008bbe:	1ad3      	subs	r3, r2, r3
 8008bc0:	b298      	uxth	r0, r3
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	b29a      	uxth	r2, r3
 8008bc6:	88bb      	ldrh	r3, [r7, #4]
 8008bc8:	4413      	add	r3, r2
 8008bca:	b299      	uxth	r1, r3
 8008bcc:	693b      	ldr	r3, [r7, #16]
 8008bce:	b29b      	uxth	r3, r3
 8008bd0:	005b      	lsls	r3, r3, #1
 8008bd2:	b29b      	uxth	r3, r3
 8008bd4:	461a      	mov	r2, r3
 8008bd6:	f7ff fe21 	bl	800881c <BSP_LCD_DrawHLine>
    }
    if (D < 0)
 8008bda:	697b      	ldr	r3, [r7, #20]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	da06      	bge.n	8008bee <BSP_LCD_FillCircle+0xda>
    { 
      D += (CurX << 2) + 6;
 8008be0:	693b      	ldr	r3, [r7, #16]
 8008be2:	009a      	lsls	r2, r3, #2
 8008be4:	697b      	ldr	r3, [r7, #20]
 8008be6:	4413      	add	r3, r2
 8008be8:	3306      	adds	r3, #6
 8008bea:	617b      	str	r3, [r7, #20]
 8008bec:	e00a      	b.n	8008c04 <BSP_LCD_FillCircle+0xf0>
    }
    else
    {
      D += ((CurX - CurY) << 2) + 10;
 8008bee:	693a      	ldr	r2, [r7, #16]
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	1ad3      	subs	r3, r2, r3
 8008bf4:	009a      	lsls	r2, r3, #2
 8008bf6:	697b      	ldr	r3, [r7, #20]
 8008bf8:	4413      	add	r3, r2
 8008bfa:	330a      	adds	r3, #10
 8008bfc:	617b      	str	r3, [r7, #20]
      CurY--;
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	3b01      	subs	r3, #1
 8008c02:	60fb      	str	r3, [r7, #12]
    }
    CurX++;
 8008c04:	693b      	ldr	r3, [r7, #16]
 8008c06:	3301      	adds	r3, #1
 8008c08:	613b      	str	r3, [r7, #16]
  while (CurX <= CurY)
 8008c0a:	693a      	ldr	r2, [r7, #16]
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	429a      	cmp	r2, r3
 8008c10:	d999      	bls.n	8008b46 <BSP_LCD_FillCircle+0x32>
  }

  BSP_LCD_SetTextColor(DrawProp.TextColor);
 8008c12:	4b08      	ldr	r3, [pc, #32]	; (8008c34 <BSP_LCD_FillCircle+0x120>)
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	b29b      	uxth	r3, r3
 8008c18:	4618      	mov	r0, r3
 8008c1a:	f7ff fcd3 	bl	80085c4 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 8008c1e:	887a      	ldrh	r2, [r7, #2]
 8008c20:	88b9      	ldrh	r1, [r7, #4]
 8008c22:	88fb      	ldrh	r3, [r7, #6]
 8008c24:	4618      	mov	r0, r3
 8008c26:	f7ff fe6d 	bl	8008904 <BSP_LCD_DrawCircle>
}
 8008c2a:	bf00      	nop
 8008c2c:	3718      	adds	r7, #24
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	bd80      	pop	{r7, pc}
 8008c32:	bf00      	nop
 8008c34:	20010098 	.word	0x20010098

08008c38 <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	af00      	add	r7, sp, #0
  lcd_drv->DisplayOn();
 8008c3c:	4b02      	ldr	r3, [pc, #8]	; (8008c48 <BSP_LCD_DisplayOn+0x10>)
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	689b      	ldr	r3, [r3, #8]
 8008c42:	4798      	blx	r3
}
 8008c44:	bf00      	nop
 8008c46:	bd80      	pop	{r7, pc}
 8008c48:	20001680 	.word	0x20001680

08008c4c <LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGBCode: Pixel color in RGB mode (5-6-5)  
  * @retval None
  */
static void LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGBCode)
{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b082      	sub	sp, #8
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	4603      	mov	r3, r0
 8008c54:	80fb      	strh	r3, [r7, #6]
 8008c56:	460b      	mov	r3, r1
 8008c58:	80bb      	strh	r3, [r7, #4]
 8008c5a:	4613      	mov	r3, r2
 8008c5c:	807b      	strh	r3, [r7, #2]
  if(lcd_drv->WritePixel != NULL)
 8008c5e:	4b08      	ldr	r3, [pc, #32]	; (8008c80 <LCD_DrawPixel+0x34>)
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	695b      	ldr	r3, [r3, #20]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d006      	beq.n	8008c76 <LCD_DrawPixel+0x2a>
  {
    lcd_drv->WritePixel(Xpos, Ypos, RGBCode);
 8008c68:	4b05      	ldr	r3, [pc, #20]	; (8008c80 <LCD_DrawPixel+0x34>)
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	695b      	ldr	r3, [r3, #20]
 8008c6e:	887a      	ldrh	r2, [r7, #2]
 8008c70:	88b9      	ldrh	r1, [r7, #4]
 8008c72:	88f8      	ldrh	r0, [r7, #6]
 8008c74:	4798      	blx	r3
  }
}
 8008c76:	bf00      	nop
 8008c78:	3708      	adds	r7, #8
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	bd80      	pop	{r7, pc}
 8008c7e:	bf00      	nop
 8008c80:	20001680 	.word	0x20001680

08008c84 <LCD_DrawChar>:
  * @param  Ypos: Start column address
  * @param  pChar: Pointer to the character data
  * @retval None
  */
static void LCD_DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *pChar)
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b08a      	sub	sp, #40	; 0x28
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	4603      	mov	r3, r0
 8008c8c:	603a      	str	r2, [r7, #0]
 8008c8e:	80fb      	strh	r3, [r7, #6]
 8008c90:	460b      	mov	r3, r1
 8008c92:	80bb      	strh	r3, [r7, #4]
  uint32_t counterh = 0, counterw = 0, index = 0;
 8008c94:	2300      	movs	r3, #0
 8008c96:	627b      	str	r3, [r7, #36]	; 0x24
 8008c98:	2300      	movs	r3, #0
 8008c9a:	623b      	str	r3, [r7, #32]
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	61bb      	str	r3, [r7, #24]
  uint16_t height = 0, width = 0;
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	82fb      	strh	r3, [r7, #22]
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	82bb      	strh	r3, [r7, #20]
  uint8_t offset = 0;
 8008ca8:	2300      	movs	r3, #0
 8008caa:	74fb      	strb	r3, [r7, #19]
  uint8_t *pchar = NULL;
 8008cac:	2300      	movs	r3, #0
 8008cae:	60fb      	str	r3, [r7, #12]
  uint32_t line = 0;
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	61fb      	str	r3, [r7, #28]
  
 
  height = DrawProp.pFont->Height;
 8008cb4:	4b63      	ldr	r3, [pc, #396]	; (8008e44 <LCD_DrawChar+0x1c0>)
 8008cb6:	689b      	ldr	r3, [r3, #8]
 8008cb8:	88db      	ldrh	r3, [r3, #6]
 8008cba:	82fb      	strh	r3, [r7, #22]
  width  = DrawProp.pFont->Width;
 8008cbc:	4b61      	ldr	r3, [pc, #388]	; (8008e44 <LCD_DrawChar+0x1c0>)
 8008cbe:	689b      	ldr	r3, [r3, #8]
 8008cc0:	889b      	ldrh	r3, [r3, #4]
 8008cc2:	82bb      	strh	r3, [r7, #20]
  
  /* Fill bitmap header*/
  *(uint16_t *) (bitmap + 2) = (uint16_t)(height*width*2+OFFSET_BITMAP);
 8008cc4:	8afa      	ldrh	r2, [r7, #22]
 8008cc6:	8abb      	ldrh	r3, [r7, #20]
 8008cc8:	fb12 f303 	smulbb	r3, r2, r3
 8008ccc:	b29b      	uxth	r3, r3
 8008cce:	331b      	adds	r3, #27
 8008cd0:	b29b      	uxth	r3, r3
 8008cd2:	4a5d      	ldr	r2, [pc, #372]	; (8008e48 <LCD_DrawChar+0x1c4>)
 8008cd4:	005b      	lsls	r3, r3, #1
 8008cd6:	b29b      	uxth	r3, r3
 8008cd8:	8013      	strh	r3, [r2, #0]
  *(uint16_t *) (bitmap + 4) = (uint16_t)((height*width*2+OFFSET_BITMAP)>>16);
 8008cda:	8afb      	ldrh	r3, [r7, #22]
 8008cdc:	8aba      	ldrh	r2, [r7, #20]
 8008cde:	fb02 f303 	mul.w	r3, r2, r3
 8008ce2:	331b      	adds	r3, #27
 8008ce4:	005b      	lsls	r3, r3, #1
 8008ce6:	141a      	asrs	r2, r3, #16
 8008ce8:	4b58      	ldr	r3, [pc, #352]	; (8008e4c <LCD_DrawChar+0x1c8>)
 8008cea:	b292      	uxth	r2, r2
 8008cec:	801a      	strh	r2, [r3, #0]
  *(uint16_t *) (bitmap + 10) = OFFSET_BITMAP;
 8008cee:	4b58      	ldr	r3, [pc, #352]	; (8008e50 <LCD_DrawChar+0x1cc>)
 8008cf0:	2236      	movs	r2, #54	; 0x36
 8008cf2:	801a      	strh	r2, [r3, #0]
  *(uint16_t *) (bitmap + 18) = (uint16_t)(width);
 8008cf4:	4a57      	ldr	r2, [pc, #348]	; (8008e54 <LCD_DrawChar+0x1d0>)
 8008cf6:	8abb      	ldrh	r3, [r7, #20]
 8008cf8:	8013      	strh	r3, [r2, #0]
  *(uint16_t *) (bitmap + 20) = (uint16_t)((width)>>16);
 8008cfa:	8abb      	ldrh	r3, [r7, #20]
 8008cfc:	141a      	asrs	r2, r3, #16
 8008cfe:	4b56      	ldr	r3, [pc, #344]	; (8008e58 <LCD_DrawChar+0x1d4>)
 8008d00:	b292      	uxth	r2, r2
 8008d02:	801a      	strh	r2, [r3, #0]
  *(uint16_t *) (bitmap + 22) = (uint16_t)(height);
 8008d04:	4a55      	ldr	r2, [pc, #340]	; (8008e5c <LCD_DrawChar+0x1d8>)
 8008d06:	8afb      	ldrh	r3, [r7, #22]
 8008d08:	8013      	strh	r3, [r2, #0]
  *(uint16_t *) (bitmap + 24) = (uint16_t)((height)>>16);
 8008d0a:	8afb      	ldrh	r3, [r7, #22]
 8008d0c:	141a      	asrs	r2, r3, #16
 8008d0e:	4b54      	ldr	r3, [pc, #336]	; (8008e60 <LCD_DrawChar+0x1dc>)
 8008d10:	b292      	uxth	r2, r2
 8008d12:	801a      	strh	r2, [r3, #0]

  offset =  8 *((width + 7)/8) -  width ;
 8008d14:	8abb      	ldrh	r3, [r7, #20]
 8008d16:	3307      	adds	r3, #7
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	da00      	bge.n	8008d1e <LCD_DrawChar+0x9a>
 8008d1c:	3307      	adds	r3, #7
 8008d1e:	10db      	asrs	r3, r3, #3
 8008d20:	b2db      	uxtb	r3, r3
 8008d22:	00db      	lsls	r3, r3, #3
 8008d24:	b2da      	uxtb	r2, r3
 8008d26:	8abb      	ldrh	r3, [r7, #20]
 8008d28:	b2db      	uxtb	r3, r3
 8008d2a:	1ad3      	subs	r3, r2, r3
 8008d2c:	74fb      	strb	r3, [r7, #19]
  
  for(counterh = 0; counterh < height; counterh++)
 8008d2e:	2300      	movs	r3, #0
 8008d30:	627b      	str	r3, [r7, #36]	; 0x24
 8008d32:	e078      	b.n	8008e26 <LCD_DrawChar+0x1a2>
  {
    pchar = ((uint8_t *)pChar + (width + 7)/8 * counterh);
 8008d34:	8abb      	ldrh	r3, [r7, #20]
 8008d36:	3307      	adds	r3, #7
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	da00      	bge.n	8008d3e <LCD_DrawChar+0xba>
 8008d3c:	3307      	adds	r3, #7
 8008d3e:	10db      	asrs	r3, r3, #3
 8008d40:	461a      	mov	r2, r3
 8008d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d44:	fb03 f302 	mul.w	r3, r3, r2
 8008d48:	683a      	ldr	r2, [r7, #0]
 8008d4a:	4413      	add	r3, r2
 8008d4c:	60fb      	str	r3, [r7, #12]
    
    if(((width + 7)/8) == 3)
 8008d4e:	8abb      	ldrh	r3, [r7, #20]
 8008d50:	3b11      	subs	r3, #17
 8008d52:	2b07      	cmp	r3, #7
 8008d54:	d80c      	bhi.n	8008d70 <LCD_DrawChar+0xec>
    {
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	781b      	ldrb	r3, [r3, #0]
 8008d5a:	041a      	lsls	r2, r3, #16
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	3301      	adds	r3, #1
 8008d60:	781b      	ldrb	r3, [r3, #0]
 8008d62:	021b      	lsls	r3, r3, #8
 8008d64:	4313      	orrs	r3, r2
 8008d66:	68fa      	ldr	r2, [r7, #12]
 8008d68:	3202      	adds	r2, #2
 8008d6a:	7812      	ldrb	r2, [r2, #0]
 8008d6c:	4313      	orrs	r3, r2
 8008d6e:	61fb      	str	r3, [r7, #28]
    }

    if(((width + 7)/8) == 2)
 8008d70:	8abb      	ldrh	r3, [r7, #20]
 8008d72:	3b09      	subs	r3, #9
 8008d74:	2b07      	cmp	r3, #7
 8008d76:	d807      	bhi.n	8008d88 <LCD_DrawChar+0x104>
    {
      line =  (pchar[0]<< 8) | pchar[1];
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	781b      	ldrb	r3, [r3, #0]
 8008d7c:	021b      	lsls	r3, r3, #8
 8008d7e:	68fa      	ldr	r2, [r7, #12]
 8008d80:	3201      	adds	r2, #1
 8008d82:	7812      	ldrb	r2, [r2, #0]
 8008d84:	4313      	orrs	r3, r2
 8008d86:	61fb      	str	r3, [r7, #28]
    }
      
    if(((width + 7)/8) == 1)
 8008d88:	8abb      	ldrh	r3, [r7, #20]
 8008d8a:	3b01      	subs	r3, #1
 8008d8c:	2b07      	cmp	r3, #7
 8008d8e:	d802      	bhi.n	8008d96 <LCD_DrawChar+0x112>
    {
      line =  pchar[0];
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	781b      	ldrb	r3, [r3, #0]
 8008d94:	61fb      	str	r3, [r7, #28]
    }  
    
    for (counterw = 0; counterw < width; counterw++)
 8008d96:	2300      	movs	r3, #0
 8008d98:	623b      	str	r3, [r7, #32]
 8008d9a:	e03d      	b.n	8008e18 <LCD_DrawChar+0x194>
    {
      /* Image in the bitmap is written from the bottom to the top */
      /* Need to invert image in the bitmap */
      index = (((height-counterh-1)*width)+(counterw))*2+OFFSET_BITMAP;
 8008d9c:	8afa      	ldrh	r2, [r7, #22]
 8008d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008da0:	1ad3      	subs	r3, r2, r3
 8008da2:	3b01      	subs	r3, #1
 8008da4:	8aba      	ldrh	r2, [r7, #20]
 8008da6:	fb02 f203 	mul.w	r2, r2, r3
 8008daa:	6a3b      	ldr	r3, [r7, #32]
 8008dac:	4413      	add	r3, r2
 8008dae:	331b      	adds	r3, #27
 8008db0:	005b      	lsls	r3, r3, #1
 8008db2:	61bb      	str	r3, [r7, #24]
      if(line & (1 << (width- counterw + offset- 1))) 
 8008db4:	8aba      	ldrh	r2, [r7, #20]
 8008db6:	6a3b      	ldr	r3, [r7, #32]
 8008db8:	1ad2      	subs	r2, r2, r3
 8008dba:	7cfb      	ldrb	r3, [r7, #19]
 8008dbc:	4413      	add	r3, r2
 8008dbe:	3b01      	subs	r3, #1
 8008dc0:	2201      	movs	r2, #1
 8008dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8008dc6:	461a      	mov	r2, r3
 8008dc8:	69fb      	ldr	r3, [r7, #28]
 8008dca:	4013      	ands	r3, r2
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d010      	beq.n	8008df2 <LCD_DrawChar+0x16e>
      {
        bitmap[index] = (uint8_t)DrawProp.TextColor;
 8008dd0:	4b1c      	ldr	r3, [pc, #112]	; (8008e44 <LCD_DrawChar+0x1c0>)
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	b2d9      	uxtb	r1, r3
 8008dd6:	4a23      	ldr	r2, [pc, #140]	; (8008e64 <LCD_DrawChar+0x1e0>)
 8008dd8:	69bb      	ldr	r3, [r7, #24]
 8008dda:	4413      	add	r3, r2
 8008ddc:	460a      	mov	r2, r1
 8008dde:	701a      	strb	r2, [r3, #0]
        bitmap[index+1] = (uint8_t)(DrawProp.TextColor >> 8);
 8008de0:	4b18      	ldr	r3, [pc, #96]	; (8008e44 <LCD_DrawChar+0x1c0>)
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	0a1a      	lsrs	r2, r3, #8
 8008de6:	69bb      	ldr	r3, [r7, #24]
 8008de8:	3301      	adds	r3, #1
 8008dea:	b2d1      	uxtb	r1, r2
 8008dec:	4a1d      	ldr	r2, [pc, #116]	; (8008e64 <LCD_DrawChar+0x1e0>)
 8008dee:	54d1      	strb	r1, [r2, r3]
 8008df0:	e00f      	b.n	8008e12 <LCD_DrawChar+0x18e>
      }
      else
      {
        bitmap[index] = (uint8_t)DrawProp.BackColor;
 8008df2:	4b14      	ldr	r3, [pc, #80]	; (8008e44 <LCD_DrawChar+0x1c0>)
 8008df4:	685b      	ldr	r3, [r3, #4]
 8008df6:	b2d9      	uxtb	r1, r3
 8008df8:	4a1a      	ldr	r2, [pc, #104]	; (8008e64 <LCD_DrawChar+0x1e0>)
 8008dfa:	69bb      	ldr	r3, [r7, #24]
 8008dfc:	4413      	add	r3, r2
 8008dfe:	460a      	mov	r2, r1
 8008e00:	701a      	strb	r2, [r3, #0]
        bitmap[index+1] = (uint8_t)(DrawProp.BackColor >> 8);
 8008e02:	4b10      	ldr	r3, [pc, #64]	; (8008e44 <LCD_DrawChar+0x1c0>)
 8008e04:	685b      	ldr	r3, [r3, #4]
 8008e06:	0a1a      	lsrs	r2, r3, #8
 8008e08:	69bb      	ldr	r3, [r7, #24]
 8008e0a:	3301      	adds	r3, #1
 8008e0c:	b2d1      	uxtb	r1, r2
 8008e0e:	4a15      	ldr	r2, [pc, #84]	; (8008e64 <LCD_DrawChar+0x1e0>)
 8008e10:	54d1      	strb	r1, [r2, r3]
    for (counterw = 0; counterw < width; counterw++)
 8008e12:	6a3b      	ldr	r3, [r7, #32]
 8008e14:	3301      	adds	r3, #1
 8008e16:	623b      	str	r3, [r7, #32]
 8008e18:	8abb      	ldrh	r3, [r7, #20]
 8008e1a:	6a3a      	ldr	r2, [r7, #32]
 8008e1c:	429a      	cmp	r2, r3
 8008e1e:	d3bd      	bcc.n	8008d9c <LCD_DrawChar+0x118>
  for(counterh = 0; counterh < height; counterh++)
 8008e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e22:	3301      	adds	r3, #1
 8008e24:	627b      	str	r3, [r7, #36]	; 0x24
 8008e26:	8afb      	ldrh	r3, [r7, #22]
 8008e28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e2a:	429a      	cmp	r2, r3
 8008e2c:	d382      	bcc.n	8008d34 <LCD_DrawChar+0xb0>
      } 
    }
  }

  BSP_LCD_DrawBitmap(Xpos, Ypos, bitmap);
 8008e2e:	88b9      	ldrh	r1, [r7, #4]
 8008e30:	88fb      	ldrh	r3, [r7, #6]
 8008e32:	4a0c      	ldr	r2, [pc, #48]	; (8008e64 <LCD_DrawChar+0x1e0>)
 8008e34:	4618      	mov	r0, r3
 8008e36:	f7ff fe21 	bl	8008a7c <BSP_LCD_DrawBitmap>
}
 8008e3a:	bf00      	nop
 8008e3c:	3728      	adds	r7, #40	; 0x28
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	bd80      	pop	{r7, pc}
 8008e42:	bf00      	nop
 8008e44:	20010098 	.word	0x20010098
 8008e48:	20001686 	.word	0x20001686
 8008e4c:	20001688 	.word	0x20001688
 8008e50:	2000168e 	.word	0x2000168e
 8008e54:	20001696 	.word	0x20001696
 8008e58:	20001698 	.word	0x20001698
 8008e5c:	2000169a 	.word	0x2000169a
 8008e60:	2000169c 	.word	0x2000169c
 8008e64:	20001684 	.word	0x20001684

08008e68 <LCD_SetDisplayWindow>:
  * @param  Width: LCD window width
  * @param  Height: LCD window height  
  * @retval None
  */
static void LCD_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8008e68:	b590      	push	{r4, r7, lr}
 8008e6a:	b083      	sub	sp, #12
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	4604      	mov	r4, r0
 8008e70:	4608      	mov	r0, r1
 8008e72:	4611      	mov	r1, r2
 8008e74:	461a      	mov	r2, r3
 8008e76:	4623      	mov	r3, r4
 8008e78:	80fb      	strh	r3, [r7, #6]
 8008e7a:	4603      	mov	r3, r0
 8008e7c:	80bb      	strh	r3, [r7, #4]
 8008e7e:	460b      	mov	r3, r1
 8008e80:	807b      	strh	r3, [r7, #2]
 8008e82:	4613      	mov	r3, r2
 8008e84:	803b      	strh	r3, [r7, #0]
  if(lcd_drv->SetDisplayWindow != NULL)
 8008e86:	4b08      	ldr	r3, [pc, #32]	; (8008ea8 <LCD_SetDisplayWindow+0x40>)
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	69db      	ldr	r3, [r3, #28]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d007      	beq.n	8008ea0 <LCD_SetDisplayWindow+0x38>
  {
    lcd_drv->SetDisplayWindow(Xpos, Ypos, Width, Height);
 8008e90:	4b05      	ldr	r3, [pc, #20]	; (8008ea8 <LCD_SetDisplayWindow+0x40>)
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	69dc      	ldr	r4, [r3, #28]
 8008e96:	883b      	ldrh	r3, [r7, #0]
 8008e98:	887a      	ldrh	r2, [r7, #2]
 8008e9a:	88b9      	ldrh	r1, [r7, #4]
 8008e9c:	88f8      	ldrh	r0, [r7, #6]
 8008e9e:	47a0      	blx	r4
  }  
}
 8008ea0:	bf00      	nop
 8008ea2:	370c      	adds	r7, #12
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	bd90      	pop	{r4, r7, pc}
 8008ea8:	20001680 	.word	0x20001680

08008eac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008eac:	b480      	push	{r7}
 8008eae:	b083      	sub	sp, #12
 8008eb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	607b      	str	r3, [r7, #4]
 8008eb6:	4b10      	ldr	r3, [pc, #64]	; (8008ef8 <HAL_MspInit+0x4c>)
 8008eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008eba:	4a0f      	ldr	r2, [pc, #60]	; (8008ef8 <HAL_MspInit+0x4c>)
 8008ebc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008ec0:	6453      	str	r3, [r2, #68]	; 0x44
 8008ec2:	4b0d      	ldr	r3, [pc, #52]	; (8008ef8 <HAL_MspInit+0x4c>)
 8008ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ec6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008eca:	607b      	str	r3, [r7, #4]
 8008ecc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008ece:	2300      	movs	r3, #0
 8008ed0:	603b      	str	r3, [r7, #0]
 8008ed2:	4b09      	ldr	r3, [pc, #36]	; (8008ef8 <HAL_MspInit+0x4c>)
 8008ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ed6:	4a08      	ldr	r2, [pc, #32]	; (8008ef8 <HAL_MspInit+0x4c>)
 8008ed8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008edc:	6413      	str	r3, [r2, #64]	; 0x40
 8008ede:	4b06      	ldr	r3, [pc, #24]	; (8008ef8 <HAL_MspInit+0x4c>)
 8008ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ee2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008ee6:	603b      	str	r3, [r7, #0]
 8008ee8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008eea:	bf00      	nop
 8008eec:	370c      	adds	r7, #12
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef4:	4770      	bx	lr
 8008ef6:	bf00      	nop
 8008ef8:	40023800 	.word	0x40023800

08008efc <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8008efc:	b480      	push	{r7}
 8008efe:	b085      	sub	sp, #20
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	4a0b      	ldr	r2, [pc, #44]	; (8008f38 <HAL_CRC_MspInit+0x3c>)
 8008f0a:	4293      	cmp	r3, r2
 8008f0c:	d10d      	bne.n	8008f2a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8008f0e:	2300      	movs	r3, #0
 8008f10:	60fb      	str	r3, [r7, #12]
 8008f12:	4b0a      	ldr	r3, [pc, #40]	; (8008f3c <HAL_CRC_MspInit+0x40>)
 8008f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f16:	4a09      	ldr	r2, [pc, #36]	; (8008f3c <HAL_CRC_MspInit+0x40>)
 8008f18:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008f1c:	6313      	str	r3, [r2, #48]	; 0x30
 8008f1e:	4b07      	ldr	r3, [pc, #28]	; (8008f3c <HAL_CRC_MspInit+0x40>)
 8008f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008f26:	60fb      	str	r3, [r7, #12]
 8008f28:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8008f2a:	bf00      	nop
 8008f2c:	3714      	adds	r7, #20
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f34:	4770      	bx	lr
 8008f36:	bf00      	nop
 8008f38:	40023000 	.word	0x40023000
 8008f3c:	40023800 	.word	0x40023800

08008f40 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b088      	sub	sp, #32
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
	  GPIO_InitTypeDef GPIO_InitStruct;
	  if(hspi->Instance==SPI3)
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	4a1a      	ldr	r2, [pc, #104]	; (8008fb8 <HAL_SPI_MspInit+0x78>)
 8008f4e:	4293      	cmp	r3, r2
 8008f50:	d12e      	bne.n	8008fb0 <HAL_SPI_MspInit+0x70>
	  {
	  /* USER CODE BEGIN SPI3_MspInit 0 */

	  /* USER CODE END SPI3_MspInit 0 */
	    /* Peripheral clock enable */
	    __HAL_RCC_SPI3_CLK_ENABLE();
 8008f52:	2300      	movs	r3, #0
 8008f54:	60bb      	str	r3, [r7, #8]
 8008f56:	4b19      	ldr	r3, [pc, #100]	; (8008fbc <HAL_SPI_MspInit+0x7c>)
 8008f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f5a:	4a18      	ldr	r2, [pc, #96]	; (8008fbc <HAL_SPI_MspInit+0x7c>)
 8008f5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008f60:	6413      	str	r3, [r2, #64]	; 0x40
 8008f62:	4b16      	ldr	r3, [pc, #88]	; (8008fbc <HAL_SPI_MspInit+0x7c>)
 8008f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008f6a:	60bb      	str	r3, [r7, #8]
 8008f6c:	68bb      	ldr	r3, [r7, #8]
	    /**SPI3 GPIO Configuration
	    PC12     ------> SPI3_MOSI
	    PB3     ------> SPI3_SCK
	    PB4     ------> SPI3_MISO
	    */
	    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8008f6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008f72:	60fb      	str	r3, [r7, #12]
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008f74:	2302      	movs	r3, #2
 8008f76:	613b      	str	r3, [r7, #16]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f78:	2300      	movs	r3, #0
 8008f7a:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008f7c:	2303      	movs	r3, #3
 8008f7e:	61bb      	str	r3, [r7, #24]
	    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8008f80:	2306      	movs	r3, #6
 8008f82:	61fb      	str	r3, [r7, #28]
	    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008f84:	f107 030c 	add.w	r3, r7, #12
 8008f88:	4619      	mov	r1, r3
 8008f8a:	480d      	ldr	r0, [pc, #52]	; (8008fc0 <HAL_SPI_MspInit+0x80>)
 8008f8c:	f7fb febe 	bl	8004d0c <HAL_GPIO_Init>

	    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8008f90:	2318      	movs	r3, #24
 8008f92:	60fb      	str	r3, [r7, #12]
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008f94:	2302      	movs	r3, #2
 8008f96:	613b      	str	r3, [r7, #16]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f98:	2300      	movs	r3, #0
 8008f9a:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008f9c:	2303      	movs	r3, #3
 8008f9e:	61bb      	str	r3, [r7, #24]
	    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8008fa0:	2306      	movs	r3, #6
 8008fa2:	61fb      	str	r3, [r7, #28]
	    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008fa4:	f107 030c 	add.w	r3, r7, #12
 8008fa8:	4619      	mov	r1, r3
 8008faa:	4806      	ldr	r0, [pc, #24]	; (8008fc4 <HAL_SPI_MspInit+0x84>)
 8008fac:	f7fb feae 	bl	8004d0c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8008fb0:	bf00      	nop
 8008fb2:	3720      	adds	r7, #32
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	bd80      	pop	{r7, pc}
 8008fb8:	40003c00 	.word	0x40003c00
 8008fbc:	40023800 	.word	0x40023800
 8008fc0:	40020800 	.word	0x40020800
 8008fc4:	40020400 	.word	0x40020400

08008fc8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b08a      	sub	sp, #40	; 0x28
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008fd0:	f107 0314 	add.w	r3, r7, #20
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	601a      	str	r2, [r3, #0]
 8008fd8:	605a      	str	r2, [r3, #4]
 8008fda:	609a      	str	r2, [r3, #8]
 8008fdc:	60da      	str	r2, [r3, #12]
 8008fde:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	4a1d      	ldr	r2, [pc, #116]	; (800905c <HAL_UART_MspInit+0x94>)
 8008fe6:	4293      	cmp	r3, r2
 8008fe8:	d134      	bne.n	8009054 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8008fea:	2300      	movs	r3, #0
 8008fec:	613b      	str	r3, [r7, #16]
 8008fee:	4b1c      	ldr	r3, [pc, #112]	; (8009060 <HAL_UART_MspInit+0x98>)
 8008ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ff2:	4a1b      	ldr	r2, [pc, #108]	; (8009060 <HAL_UART_MspInit+0x98>)
 8008ff4:	f043 0310 	orr.w	r3, r3, #16
 8008ff8:	6453      	str	r3, [r2, #68]	; 0x44
 8008ffa:	4b19      	ldr	r3, [pc, #100]	; (8009060 <HAL_UART_MspInit+0x98>)
 8008ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ffe:	f003 0310 	and.w	r3, r3, #16
 8009002:	613b      	str	r3, [r7, #16]
 8009004:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009006:	2300      	movs	r3, #0
 8009008:	60fb      	str	r3, [r7, #12]
 800900a:	4b15      	ldr	r3, [pc, #84]	; (8009060 <HAL_UART_MspInit+0x98>)
 800900c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800900e:	4a14      	ldr	r2, [pc, #80]	; (8009060 <HAL_UART_MspInit+0x98>)
 8009010:	f043 0301 	orr.w	r3, r3, #1
 8009014:	6313      	str	r3, [r2, #48]	; 0x30
 8009016:	4b12      	ldr	r3, [pc, #72]	; (8009060 <HAL_UART_MspInit+0x98>)
 8009018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800901a:	f003 0301 	and.w	r3, r3, #1
 800901e:	60fb      	str	r3, [r7, #12]
 8009020:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8009022:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8009026:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009028:	2302      	movs	r3, #2
 800902a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800902c:	2301      	movs	r3, #1
 800902e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009030:	2303      	movs	r3, #3
 8009032:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8009034:	2307      	movs	r3, #7
 8009036:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009038:	f107 0314 	add.w	r3, r7, #20
 800903c:	4619      	mov	r1, r3
 800903e:	4809      	ldr	r0, [pc, #36]	; (8009064 <HAL_UART_MspInit+0x9c>)
 8009040:	f7fb fe64 	bl	8004d0c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8009044:	2200      	movs	r2, #0
 8009046:	2100      	movs	r1, #0
 8009048:	2025      	movs	r0, #37	; 0x25
 800904a:	f7fb fdca 	bl	8004be2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800904e:	2025      	movs	r0, #37	; 0x25
 8009050:	f7fb fde3 	bl	8004c1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8009054:	bf00      	nop
 8009056:	3728      	adds	r7, #40	; 0x28
 8009058:	46bd      	mov	sp, r7
 800905a:	bd80      	pop	{r7, pc}
 800905c:	40011000 	.word	0x40011000
 8009060:	40023800 	.word	0x40023800
 8009064:	40020000 	.word	0x40020000

08009068 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8009068:	b580      	push	{r7, lr}
 800906a:	b086      	sub	sp, #24
 800906c:	af00      	add	r7, sp, #0
	 GPIO_InitTypeDef GPIO_InitStruct;
	  if (FSMC_Initialized) {
 800906e:	4b24      	ldr	r3, [pc, #144]	; (8009100 <HAL_FSMC_MspInit+0x98>)
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	2b00      	cmp	r3, #0
 8009074:	d140      	bne.n	80090f8 <HAL_FSMC_MspInit+0x90>
	    return;
	  }
	  FSMC_Initialized = 1;
 8009076:	4b22      	ldr	r3, [pc, #136]	; (8009100 <HAL_FSMC_MspInit+0x98>)
 8009078:	2201      	movs	r2, #1
 800907a:	601a      	str	r2, [r3, #0]
	  /* Peripheral clock enable */
	  __HAL_RCC_FSMC_CLK_ENABLE();
 800907c:	2300      	movs	r3, #0
 800907e:	603b      	str	r3, [r7, #0]
 8009080:	4b20      	ldr	r3, [pc, #128]	; (8009104 <HAL_FSMC_MspInit+0x9c>)
 8009082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009084:	4a1f      	ldr	r2, [pc, #124]	; (8009104 <HAL_FSMC_MspInit+0x9c>)
 8009086:	f043 0301 	orr.w	r3, r3, #1
 800908a:	6393      	str	r3, [r2, #56]	; 0x38
 800908c:	4b1d      	ldr	r3, [pc, #116]	; (8009104 <HAL_FSMC_MspInit+0x9c>)
 800908e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009090:	f003 0301 	and.w	r3, r3, #1
 8009094:	603b      	str	r3, [r7, #0]
 8009096:	683b      	ldr	r3, [r7, #0]
	  PD4   ------> FSMC_NOE
	  PD5   ------> FSMC_NWE
	  PD7   ------> FSMC_NE1
	  */
	  /* GPIO_InitStruct */
	  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8009098:	f64f 7380 	movw	r3, #65408	; 0xff80
 800909c:	607b      	str	r3, [r7, #4]
	                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
	                          |GPIO_PIN_15;
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800909e:	2302      	movs	r3, #2
 80090a0:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80090a2:	2300      	movs	r3, #0
 80090a4:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80090a6:	2303      	movs	r3, #3
 80090a8:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80090aa:	230c      	movs	r3, #12
 80090ac:	617b      	str	r3, [r7, #20]

	  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80090ae:	1d3b      	adds	r3, r7, #4
 80090b0:	4619      	mov	r1, r3
 80090b2:	4815      	ldr	r0, [pc, #84]	; (8009108 <HAL_FSMC_MspInit+0xa0>)
 80090b4:	f7fb fe2a 	bl	8004d0c <HAL_GPIO_Init>

	  /* GPIO_InitStruct */
	  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 80090b8:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 80090bc:	607b      	str	r3, [r7, #4]
	                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
	                          |GPIO_PIN_5|GPIO_PIN_7;
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80090be:	2302      	movs	r3, #2
 80090c0:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80090c2:	2300      	movs	r3, #0
 80090c4:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80090c6:	2303      	movs	r3, #3
 80090c8:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80090ca:	230c      	movs	r3, #12
 80090cc:	617b      	str	r3, [r7, #20]

	  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80090ce:	1d3b      	adds	r3, r7, #4
 80090d0:	4619      	mov	r1, r3
 80090d2:	480e      	ldr	r0, [pc, #56]	; (800910c <HAL_FSMC_MspInit+0xa4>)
 80090d4:	f7fb fe1a 	bl	8004d0c <HAL_GPIO_Init>

	  /* GPIO_InitStruct */
	  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80090d8:	2320      	movs	r3, #32
 80090da:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80090dc:	2302      	movs	r3, #2
 80090de:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80090e0:	2300      	movs	r3, #0
 80090e2:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80090e4:	2303      	movs	r3, #3
 80090e6:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80090e8:	230c      	movs	r3, #12
 80090ea:	617b      	str	r3, [r7, #20]

	  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80090ec:	1d3b      	adds	r3, r7, #4
 80090ee:	4619      	mov	r1, r3
 80090f0:	4807      	ldr	r0, [pc, #28]	; (8009110 <HAL_FSMC_MspInit+0xa8>)
 80090f2:	f7fb fe0b 	bl	8004d0c <HAL_GPIO_Init>
 80090f6:	e000      	b.n	80090fa <HAL_FSMC_MspInit+0x92>
	    return;
 80090f8:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80090fa:	3718      	adds	r7, #24
 80090fc:	46bd      	mov	sp, r7
 80090fe:	bd80      	pop	{r7, pc}
 8009100:	200019ec 	.word	0x200019ec
 8009104:	40023800 	.word	0x40023800
 8009108:	40021000 	.word	0x40021000
 800910c:	40020c00 	.word	0x40020c00
 8009110:	40021800 	.word	0x40021800

08009114 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8009114:	b580      	push	{r7, lr}
 8009116:	b082      	sub	sp, #8
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 800911c:	f7ff ffa4 	bl	8009068 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8009120:	bf00      	nop
 8009122:	3708      	adds	r7, #8
 8009124:	46bd      	mov	sp, r7
 8009126:	bd80      	pop	{r7, pc}

08009128 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8009128:	b480      	push	{r7}
 800912a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800912c:	bf00      	nop
 800912e:	46bd      	mov	sp, r7
 8009130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009134:	4770      	bx	lr

08009136 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8009136:	b480      	push	{r7}
 8009138:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800913a:	e7fe      	b.n	800913a <HardFault_Handler+0x4>

0800913c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800913c:	b480      	push	{r7}
 800913e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8009140:	e7fe      	b.n	8009140 <MemManage_Handler+0x4>

08009142 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8009142:	b480      	push	{r7}
 8009144:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8009146:	e7fe      	b.n	8009146 <BusFault_Handler+0x4>

08009148 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8009148:	b480      	push	{r7}
 800914a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800914c:	e7fe      	b.n	800914c <UsageFault_Handler+0x4>

0800914e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800914e:	b480      	push	{r7}
 8009150:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8009152:	bf00      	nop
 8009154:	46bd      	mov	sp, r7
 8009156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915a:	4770      	bx	lr

0800915c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800915c:	b480      	push	{r7}
 800915e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8009160:	bf00      	nop
 8009162:	46bd      	mov	sp, r7
 8009164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009168:	4770      	bx	lr

0800916a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800916a:	b480      	push	{r7}
 800916c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800916e:	bf00      	nop
 8009170:	46bd      	mov	sp, r7
 8009172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009176:	4770      	bx	lr

08009178 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8009178:	b580      	push	{r7, lr}
 800917a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800917c:	f7fb fc14 	bl	80049a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8009180:	bf00      	nop
 8009182:	bd80      	pop	{r7, pc}

08009184 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8009184:	b580      	push	{r7, lr}
 8009186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8009188:	4802      	ldr	r0, [pc, #8]	; (8009194 <USART1_IRQHandler+0x10>)
 800918a:	f7fd f97b 	bl	8006484 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800918e:	bf00      	nop
 8009190:	bd80      	pop	{r7, pc}
 8009192:	bf00      	nop
 8009194:	20010058 	.word	0x20010058

08009198 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8009198:	b480      	push	{r7}
 800919a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800919c:	4b16      	ldr	r3, [pc, #88]	; (80091f8 <SystemInit+0x60>)
 800919e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80091a2:	4a15      	ldr	r2, [pc, #84]	; (80091f8 <SystemInit+0x60>)
 80091a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80091a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80091ac:	4b13      	ldr	r3, [pc, #76]	; (80091fc <SystemInit+0x64>)
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	4a12      	ldr	r2, [pc, #72]	; (80091fc <SystemInit+0x64>)
 80091b2:	f043 0301 	orr.w	r3, r3, #1
 80091b6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80091b8:	4b10      	ldr	r3, [pc, #64]	; (80091fc <SystemInit+0x64>)
 80091ba:	2200      	movs	r2, #0
 80091bc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80091be:	4b0f      	ldr	r3, [pc, #60]	; (80091fc <SystemInit+0x64>)
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	4a0e      	ldr	r2, [pc, #56]	; (80091fc <SystemInit+0x64>)
 80091c4:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80091c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80091cc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80091ce:	4b0b      	ldr	r3, [pc, #44]	; (80091fc <SystemInit+0x64>)
 80091d0:	4a0b      	ldr	r2, [pc, #44]	; (8009200 <SystemInit+0x68>)
 80091d2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80091d4:	4b09      	ldr	r3, [pc, #36]	; (80091fc <SystemInit+0x64>)
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	4a08      	ldr	r2, [pc, #32]	; (80091fc <SystemInit+0x64>)
 80091da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80091de:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80091e0:	4b06      	ldr	r3, [pc, #24]	; (80091fc <SystemInit+0x64>)
 80091e2:	2200      	movs	r2, #0
 80091e4:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80091e6:	4b04      	ldr	r3, [pc, #16]	; (80091f8 <SystemInit+0x60>)
 80091e8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80091ec:	609a      	str	r2, [r3, #8]
#endif
}
 80091ee:	bf00      	nop
 80091f0:	46bd      	mov	sp, r7
 80091f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f6:	4770      	bx	lr
 80091f8:	e000ed00 	.word	0xe000ed00
 80091fc:	40023800 	.word	0x40023800
 8009200:	24003010 	.word	0x24003010

08009204 <DelayUS>:
* Output         : None
* Return         : None
* Attention      : None
*******************************************************************************/
void DelayUS(uint32_t cnt)
{
 8009204:	b480      	push	{r7}
 8009206:	b085      	sub	sp, #20
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
  uint32_t i;
  i = cnt * 4;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	009b      	lsls	r3, r3, #2
 8009210:	60fb      	str	r3, [r7, #12]
  while(i--);
 8009212:	bf00      	nop
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	1e5a      	subs	r2, r3, #1
 8009218:	60fa      	str	r2, [r7, #12]
 800921a:	2b00      	cmp	r3, #0
 800921c:	d1fa      	bne.n	8009214 <DelayUS+0x10>
}
 800921e:	bf00      	nop
 8009220:	3714      	adds	r7, #20
 8009222:	46bd      	mov	sp, r7
 8009224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009228:	4770      	bx	lr
	...

0800922c <WR_CMD>:
* Output         : None
* Return         : None
* Attention      : None
*******************************************************************************/
static void WR_CMD (uint8_t cmd)  
{ 
 800922c:	b580      	push	{r7, lr}
 800922e:	b082      	sub	sp, #8
 8009230:	af00      	add	r7, sp, #0
 8009232:	4603      	mov	r3, r0
 8009234:	71fb      	strb	r3, [r7, #7]
  HAL_SPI_Transmit(&TP_hspi,&cmd,1,1000);
 8009236:	1df9      	adds	r1, r7, #7
 8009238:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800923c:	2201      	movs	r2, #1
 800923e:	4803      	ldr	r0, [pc, #12]	; (800924c <WR_CMD+0x20>)
 8009240:	f7fc fb9e 	bl	8005980 <HAL_SPI_Transmit>
} 
 8009244:	bf00      	nop
 8009246:	3708      	adds	r7, #8
 8009248:	46bd      	mov	sp, r7
 800924a:	bd80      	pop	{r7, pc}
 800924c:	20010000 	.word	0x20010000

08009250 <RD_AD>:
* Output         : None
* Return         : 
* Attention      : None
*******************************************************************************/
static int RD_AD(void)  
{ 
 8009250:	b580      	push	{r7, lr}
 8009252:	b082      	sub	sp, #8
 8009254:	af00      	add	r7, sp, #0
  uint8_t buf[2];
  int value;
  HAL_SPI_Receive(&TP_hspi,buf,2,1000);
 8009256:	4639      	mov	r1, r7
 8009258:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800925c:	2202      	movs	r2, #2
 800925e:	4809      	ldr	r0, [pc, #36]	; (8009284 <RD_AD+0x34>)
 8009260:	f7fc fcc2 	bl	8005be8 <HAL_SPI_Receive>
  value = (uint16_t)((buf[0] << 8) + buf[1]) >> 3;
 8009264:	783b      	ldrb	r3, [r7, #0]
 8009266:	b29b      	uxth	r3, r3
 8009268:	021b      	lsls	r3, r3, #8
 800926a:	b29a      	uxth	r2, r3
 800926c:	787b      	ldrb	r3, [r7, #1]
 800926e:	b29b      	uxth	r3, r3
 8009270:	4413      	add	r3, r2
 8009272:	b29b      	uxth	r3, r3
 8009274:	08db      	lsrs	r3, r3, #3
 8009276:	b29b      	uxth	r3, r3
 8009278:	607b      	str	r3, [r7, #4]
  return value;
 800927a:	687b      	ldr	r3, [r7, #4]
} 
 800927c:	4618      	mov	r0, r3
 800927e:	3708      	adds	r7, #8
 8009280:	46bd      	mov	sp, r7
 8009282:	bd80      	pop	{r7, pc}
 8009284:	20010000 	.word	0x20010000

08009288 <Read_X>:
* Output         : None
* Return         : 
* Attention      : None
*******************************************************************************/
int Read_X(void)  
{  
 8009288:	b580      	push	{r7, lr}
 800928a:	b082      	sub	sp, #8
 800928c:	af00      	add	r7, sp, #0
  int i; 
  TP_CS(0); 
 800928e:	2200      	movs	r2, #0
 8009290:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009294:	480c      	ldr	r0, [pc, #48]	; (80092c8 <Read_X+0x40>)
 8009296:	f7fb feeb 	bl	8005070 <HAL_GPIO_WritePin>
  DelayUS(1); 
 800929a:	2001      	movs	r0, #1
 800929c:	f7ff ffb2 	bl	8009204 <DelayUS>
  WR_CMD(CHX); 
 80092a0:	2090      	movs	r0, #144	; 0x90
 80092a2:	f7ff ffc3 	bl	800922c <WR_CMD>
  DelayUS(1); 
 80092a6:	2001      	movs	r0, #1
 80092a8:	f7ff ffac 	bl	8009204 <DelayUS>
  i=RD_AD(); 
 80092ac:	f7ff ffd0 	bl	8009250 <RD_AD>
 80092b0:	6078      	str	r0, [r7, #4]
  TP_CS(1); 
 80092b2:	2201      	movs	r2, #1
 80092b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80092b8:	4803      	ldr	r0, [pc, #12]	; (80092c8 <Read_X+0x40>)
 80092ba:	f7fb fed9 	bl	8005070 <HAL_GPIO_WritePin>
  return i;    
 80092be:	687b      	ldr	r3, [r7, #4]
} 
 80092c0:	4618      	mov	r0, r3
 80092c2:	3708      	adds	r7, #8
 80092c4:	46bd      	mov	sp, r7
 80092c6:	bd80      	pop	{r7, pc}
 80092c8:	40020000 	.word	0x40020000

080092cc <Read_Y>:
* Output         : None
* Return         : 
* Attention      : None
*******************************************************************************/
int Read_Y(void)  
{  
 80092cc:	b580      	push	{r7, lr}
 80092ce:	b082      	sub	sp, #8
 80092d0:	af00      	add	r7, sp, #0
  int i; 
  TP_CS(0); 
 80092d2:	2200      	movs	r2, #0
 80092d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80092d8:	480c      	ldr	r0, [pc, #48]	; (800930c <Read_Y+0x40>)
 80092da:	f7fb fec9 	bl	8005070 <HAL_GPIO_WritePin>
  DelayUS(1); 
 80092de:	2001      	movs	r0, #1
 80092e0:	f7ff ff90 	bl	8009204 <DelayUS>
  WR_CMD(CHY); 
 80092e4:	20d0      	movs	r0, #208	; 0xd0
 80092e6:	f7ff ffa1 	bl	800922c <WR_CMD>
  DelayUS(1); 
 80092ea:	2001      	movs	r0, #1
 80092ec:	f7ff ff8a 	bl	8009204 <DelayUS>
  i=RD_AD(); 
 80092f0:	f7ff ffae 	bl	8009250 <RD_AD>
 80092f4:	6078      	str	r0, [r7, #4]
  TP_CS(1); 
 80092f6:	2201      	movs	r2, #1
 80092f8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80092fc:	4803      	ldr	r0, [pc, #12]	; (800930c <Read_Y+0x40>)
 80092fe:	f7fb feb7 	bl	8005070 <HAL_GPIO_WritePin>
  return i;     
 8009302:	687b      	ldr	r3, [r7, #4]
} 
 8009304:	4618      	mov	r0, r3
 8009306:	3708      	adds	r7, #8
 8009308:	46bd      	mov	sp, r7
 800930a:	bd80      	pop	{r7, pc}
 800930c:	40020000 	.word	0x40020000

08009310 <TP_GetAdXY>:
* Output         : None
* Return         : 
* Attention      : None
*******************************************************************************/
void TP_GetAdXY(int *x,int *y)  
{ 
 8009310:	b580      	push	{r7, lr}
 8009312:	b084      	sub	sp, #16
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
 8009318:	6039      	str	r1, [r7, #0]
  int adx,ady; 
  adx=Read_X(); 
 800931a:	f7ff ffb5 	bl	8009288 <Read_X>
 800931e:	60f8      	str	r0, [r7, #12]
  DelayUS(1); 
 8009320:	2001      	movs	r0, #1
 8009322:	f7ff ff6f 	bl	8009204 <DelayUS>
  ady=Read_Y(); 
 8009326:	f7ff ffd1 	bl	80092cc <Read_Y>
 800932a:	60b8      	str	r0, [r7, #8]
  *x=adx; 
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	68fa      	ldr	r2, [r7, #12]
 8009330:	601a      	str	r2, [r3, #0]
  *y=ady; 
 8009332:	683b      	ldr	r3, [r7, #0]
 8009334:	68ba      	ldr	r2, [r7, #8]
 8009336:	601a      	str	r2, [r3, #0]
} 
 8009338:	bf00      	nop
 800933a:	3710      	adds	r7, #16
 800933c:	46bd      	mov	sp, r7
 800933e:	bd80      	pop	{r7, pc}

08009340 <DrawCross>:
* Output         : None
* Return         : None
* Attention      : None
*******************************************************************************/
void DrawCross(uint16_t Xpos,uint16_t Ypos)
{
 8009340:	b580      	push	{r7, lr}
 8009342:	b082      	sub	sp, #8
 8009344:	af00      	add	r7, sp, #0
 8009346:	4603      	mov	r3, r0
 8009348:	460a      	mov	r2, r1
 800934a:	80fb      	strh	r3, [r7, #6]
 800934c:	4613      	mov	r3, r2
 800934e:	80bb      	strh	r3, [r7, #4]
  BSP_LCD_DrawHLine(Xpos-13, Ypos, 10);
 8009350:	88fb      	ldrh	r3, [r7, #6]
 8009352:	3b0d      	subs	r3, #13
 8009354:	b29b      	uxth	r3, r3
 8009356:	88b9      	ldrh	r1, [r7, #4]
 8009358:	220a      	movs	r2, #10
 800935a:	4618      	mov	r0, r3
 800935c:	f7ff fa5e 	bl	800881c <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(Xpos+4, Ypos, 10);
 8009360:	88fb      	ldrh	r3, [r7, #6]
 8009362:	3304      	adds	r3, #4
 8009364:	b29b      	uxth	r3, r3
 8009366:	88b9      	ldrh	r1, [r7, #4]
 8009368:	220a      	movs	r2, #10
 800936a:	4618      	mov	r0, r3
 800936c:	f7ff fa56 	bl	800881c <BSP_LCD_DrawHLine>
  BSP_LCD_DrawVLine(Xpos, Ypos-13, 10);
 8009370:	88bb      	ldrh	r3, [r7, #4]
 8009372:	3b0d      	subs	r3, #13
 8009374:	b299      	uxth	r1, r3
 8009376:	88fb      	ldrh	r3, [r7, #6]
 8009378:	220a      	movs	r2, #10
 800937a:	4618      	mov	r0, r3
 800937c:	f7ff fa88 	bl	8008890 <BSP_LCD_DrawVLine>
  BSP_LCD_DrawVLine(Xpos, Ypos+4, 10);  
 8009380:	88bb      	ldrh	r3, [r7, #4]
 8009382:	3304      	adds	r3, #4
 8009384:	b299      	uxth	r1, r3
 8009386:	88fb      	ldrh	r3, [r7, #6]
 8009388:	220a      	movs	r2, #10
 800938a:	4618      	mov	r0, r3
 800938c:	f7ff fa80 	bl	8008890 <BSP_LCD_DrawVLine>

}  
 8009390:	bf00      	nop
 8009392:	3708      	adds	r7, #8
 8009394:	46bd      	mov	sp, r7
 8009396:	bd80      	pop	{r7, pc}

08009398 <Read_Ads7846>:
* Output         : None
* Return         : Coordinate *
* Attention      : None
*******************************************************************************/
Coordinate *Read_Ads7846(void)
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b09c      	sub	sp, #112	; 0x70
 800939c:	af00      	add	r7, sp, #0
  static Coordinate  screen;
  int m0,m1,m2,TP_X[1],TP_Y[1],temp[3];
  uint8_t count=0;
 800939e:	2300      	movs	r3, #0
 80093a0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  int buffer[2][9]={{0},{0}};
 80093a4:	1d3b      	adds	r3, r7, #4
 80093a6:	2248      	movs	r2, #72	; 0x48
 80093a8:	2100      	movs	r1, #0
 80093aa:	4618      	mov	r0, r3
 80093ac:	f000 fc3e 	bl	8009c2c <memset>
  
  do
  {       
    TP_GetAdXY(TP_X,TP_Y);  
 80093b0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80093b4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80093b8:	4611      	mov	r1, r2
 80093ba:	4618      	mov	r0, r3
 80093bc:	f7ff ffa8 	bl	8009310 <TP_GetAdXY>
    buffer[0][count]=TP_X[0];  
 80093c0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80093c4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80093c6:	009b      	lsls	r3, r3, #2
 80093c8:	f107 0170 	add.w	r1, r7, #112	; 0x70
 80093cc:	440b      	add	r3, r1
 80093ce:	f843 2c6c 	str.w	r2, [r3, #-108]
    buffer[1][count]=TP_Y[0];
 80093d2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80093d6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80093d8:	3309      	adds	r3, #9
 80093da:	009b      	lsls	r3, r3, #2
 80093dc:	f107 0170 	add.w	r1, r7, #112	; 0x70
 80093e0:	440b      	add	r3, r1
 80093e2:	f843 2c6c 	str.w	r2, [r3, #-108]
    count++;  
 80093e6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80093ea:	3301      	adds	r3, #1
 80093ec:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  }
  while(!TP_INT_IN&& count<9);  /* TP_INT_IN  */
 80093f0:	2120      	movs	r1, #32
 80093f2:	4885      	ldr	r0, [pc, #532]	; (8009608 <Read_Ads7846+0x270>)
 80093f4:	f7fb fe24 	bl	8005040 <HAL_GPIO_ReadPin>
 80093f8:	4603      	mov	r3, r0
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d103      	bne.n	8009406 <Read_Ads7846+0x6e>
 80093fe:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8009402:	2b08      	cmp	r3, #8
 8009404:	d9d4      	bls.n	80093b0 <Read_Ads7846+0x18>
  if(count==9)   /* Average X Y  */ 
 8009406:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800940a:	2b09      	cmp	r3, #9
 800940c:	f040 80f6 	bne.w	80095fc <Read_Ads7846+0x264>
  {
    /* Average X  */
    temp[0]=(buffer[0][0]+buffer[0][1]+buffer[0][2])/3;
 8009410:	687a      	ldr	r2, [r7, #4]
 8009412:	68bb      	ldr	r3, [r7, #8]
 8009414:	441a      	add	r2, r3
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	4413      	add	r3, r2
 800941a:	4a7c      	ldr	r2, [pc, #496]	; (800960c <Read_Ads7846+0x274>)
 800941c:	fb82 1203 	smull	r1, r2, r2, r3
 8009420:	17db      	asrs	r3, r3, #31
 8009422:	1ad3      	subs	r3, r2, r3
 8009424:	64fb      	str	r3, [r7, #76]	; 0x4c
    temp[1]=(buffer[0][3]+buffer[0][4]+buffer[0][5])/3;
 8009426:	693a      	ldr	r2, [r7, #16]
 8009428:	697b      	ldr	r3, [r7, #20]
 800942a:	441a      	add	r2, r3
 800942c:	69bb      	ldr	r3, [r7, #24]
 800942e:	4413      	add	r3, r2
 8009430:	4a76      	ldr	r2, [pc, #472]	; (800960c <Read_Ads7846+0x274>)
 8009432:	fb82 1203 	smull	r1, r2, r2, r3
 8009436:	17db      	asrs	r3, r3, #31
 8009438:	1ad3      	subs	r3, r2, r3
 800943a:	653b      	str	r3, [r7, #80]	; 0x50
    temp[2]=(buffer[0][6]+buffer[0][7]+buffer[0][8])/3;
 800943c:	69fa      	ldr	r2, [r7, #28]
 800943e:	6a3b      	ldr	r3, [r7, #32]
 8009440:	441a      	add	r2, r3
 8009442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009444:	4413      	add	r3, r2
 8009446:	4a71      	ldr	r2, [pc, #452]	; (800960c <Read_Ads7846+0x274>)
 8009448:	fb82 1203 	smull	r1, r2, r2, r3
 800944c:	17db      	asrs	r3, r3, #31
 800944e:	1ad3      	subs	r3, r2, r3
 8009450:	657b      	str	r3, [r7, #84]	; 0x54
   
    m0=temp[0]-temp[1];
 8009452:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009454:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009456:	1ad3      	subs	r3, r2, r3
 8009458:	66bb      	str	r3, [r7, #104]	; 0x68
    m1=temp[1]-temp[2];
 800945a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800945c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800945e:	1ad3      	subs	r3, r2, r3
 8009460:	667b      	str	r3, [r7, #100]	; 0x64
    m2=temp[2]-temp[0];
 8009462:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009464:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009466:	1ad3      	subs	r3, r2, r3
 8009468:	663b      	str	r3, [r7, #96]	; 0x60
   
    m0=m0>0?m0:(-m0);
 800946a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800946c:	2b00      	cmp	r3, #0
 800946e:	bfb8      	it	lt
 8009470:	425b      	neglt	r3, r3
 8009472:	66bb      	str	r3, [r7, #104]	; 0x68
    m1=m1>0?m1:(-m1);
 8009474:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009476:	2b00      	cmp	r3, #0
 8009478:	bfb8      	it	lt
 800947a:	425b      	neglt	r3, r3
 800947c:	667b      	str	r3, [r7, #100]	; 0x64
    m2=m2>0?m2:(-m2);
 800947e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009480:	2b00      	cmp	r3, #0
 8009482:	bfb8      	it	lt
 8009484:	425b      	neglt	r3, r3
 8009486:	663b      	str	r3, [r7, #96]	; 0x60
   
    if( m0>THRESHOLD  &&  m1>THRESHOLD  &&  m2>THRESHOLD ) return 0;
 8009488:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800948a:	2b02      	cmp	r3, #2
 800948c:	dd07      	ble.n	800949e <Read_Ads7846+0x106>
 800948e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009490:	2b02      	cmp	r3, #2
 8009492:	dd04      	ble.n	800949e <Read_Ads7846+0x106>
 8009494:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009496:	2b02      	cmp	r3, #2
 8009498:	dd01      	ble.n	800949e <Read_Ads7846+0x106>
 800949a:	2300      	movs	r3, #0
 800949c:	e0af      	b.n	80095fe <Read_Ads7846+0x266>
   
    if(m0<m1)
 800949e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80094a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80094a2:	429a      	cmp	r2, r3
 80094a4:	da17      	bge.n	80094d6 <Read_Ads7846+0x13e>
    {
      if(m2<m0) 
 80094a6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80094a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80094aa:	429a      	cmp	r2, r3
 80094ac:	da09      	bge.n	80094c2 <Read_Ads7846+0x12a>
        screen.x=(temp[0]+temp[2])/2;
 80094ae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80094b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80094b2:	4413      	add	r3, r2
 80094b4:	0fda      	lsrs	r2, r3, #31
 80094b6:	4413      	add	r3, r2
 80094b8:	105b      	asrs	r3, r3, #1
 80094ba:	b29a      	uxth	r2, r3
 80094bc:	4b54      	ldr	r3, [pc, #336]	; (8009610 <Read_Ads7846+0x278>)
 80094be:	801a      	strh	r2, [r3, #0]
 80094c0:	e020      	b.n	8009504 <Read_Ads7846+0x16c>
      else 
        screen.x=(temp[0]+temp[1])/2;  
 80094c2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80094c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80094c6:	4413      	add	r3, r2
 80094c8:	0fda      	lsrs	r2, r3, #31
 80094ca:	4413      	add	r3, r2
 80094cc:	105b      	asrs	r3, r3, #1
 80094ce:	b29a      	uxth	r2, r3
 80094d0:	4b4f      	ldr	r3, [pc, #316]	; (8009610 <Read_Ads7846+0x278>)
 80094d2:	801a      	strh	r2, [r3, #0]
 80094d4:	e016      	b.n	8009504 <Read_Ads7846+0x16c>
    }
    else if(m2<m1) 
 80094d6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80094d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80094da:	429a      	cmp	r2, r3
 80094dc:	da09      	bge.n	80094f2 <Read_Ads7846+0x15a>
      screen.x=(temp[0]+temp[2])/2;
 80094de:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80094e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80094e2:	4413      	add	r3, r2
 80094e4:	0fda      	lsrs	r2, r3, #31
 80094e6:	4413      	add	r3, r2
 80094e8:	105b      	asrs	r3, r3, #1
 80094ea:	b29a      	uxth	r2, r3
 80094ec:	4b48      	ldr	r3, [pc, #288]	; (8009610 <Read_Ads7846+0x278>)
 80094ee:	801a      	strh	r2, [r3, #0]
 80094f0:	e008      	b.n	8009504 <Read_Ads7846+0x16c>
    else 
      screen.x=(temp[1]+temp[2])/2;
 80094f2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80094f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80094f6:	4413      	add	r3, r2
 80094f8:	0fda      	lsrs	r2, r3, #31
 80094fa:	4413      	add	r3, r2
 80094fc:	105b      	asrs	r3, r3, #1
 80094fe:	b29a      	uxth	r2, r3
 8009500:	4b43      	ldr	r3, [pc, #268]	; (8009610 <Read_Ads7846+0x278>)
 8009502:	801a      	strh	r2, [r3, #0]
   
    /* Average Y  */
    temp[0]=(buffer[1][0]+buffer[1][1]+buffer[1][2])/3;
 8009504:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009508:	441a      	add	r2, r3
 800950a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800950c:	4413      	add	r3, r2
 800950e:	4a3f      	ldr	r2, [pc, #252]	; (800960c <Read_Ads7846+0x274>)
 8009510:	fb82 1203 	smull	r1, r2, r2, r3
 8009514:	17db      	asrs	r3, r3, #31
 8009516:	1ad3      	subs	r3, r2, r3
 8009518:	64fb      	str	r3, [r7, #76]	; 0x4c
    temp[1]=(buffer[1][3]+buffer[1][4]+buffer[1][5])/3;
 800951a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800951c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800951e:	441a      	add	r2, r3
 8009520:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009522:	4413      	add	r3, r2
 8009524:	4a39      	ldr	r2, [pc, #228]	; (800960c <Read_Ads7846+0x274>)
 8009526:	fb82 1203 	smull	r1, r2, r2, r3
 800952a:	17db      	asrs	r3, r3, #31
 800952c:	1ad3      	subs	r3, r2, r3
 800952e:	653b      	str	r3, [r7, #80]	; 0x50
    temp[2]=(buffer[1][6]+buffer[1][7]+buffer[1][8])/3;
 8009530:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009532:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009534:	441a      	add	r2, r3
 8009536:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009538:	4413      	add	r3, r2
 800953a:	4a34      	ldr	r2, [pc, #208]	; (800960c <Read_Ads7846+0x274>)
 800953c:	fb82 1203 	smull	r1, r2, r2, r3
 8009540:	17db      	asrs	r3, r3, #31
 8009542:	1ad3      	subs	r3, r2, r3
 8009544:	657b      	str	r3, [r7, #84]	; 0x54
    m0=temp[0]-temp[1];
 8009546:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009548:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800954a:	1ad3      	subs	r3, r2, r3
 800954c:	66bb      	str	r3, [r7, #104]	; 0x68
    m1=temp[1]-temp[2];
 800954e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009550:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009552:	1ad3      	subs	r3, r2, r3
 8009554:	667b      	str	r3, [r7, #100]	; 0x64
    m2=temp[2]-temp[0];
 8009556:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009558:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800955a:	1ad3      	subs	r3, r2, r3
 800955c:	663b      	str	r3, [r7, #96]	; 0x60
    m0=m0>0?m0:(-m0);
 800955e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009560:	2b00      	cmp	r3, #0
 8009562:	bfb8      	it	lt
 8009564:	425b      	neglt	r3, r3
 8009566:	66bb      	str	r3, [r7, #104]	; 0x68
    m1=m1>0?m1:(-m1);
 8009568:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800956a:	2b00      	cmp	r3, #0
 800956c:	bfb8      	it	lt
 800956e:	425b      	neglt	r3, r3
 8009570:	667b      	str	r3, [r7, #100]	; 0x64
    m2=m2>0?m2:(-m2);
 8009572:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009574:	2b00      	cmp	r3, #0
 8009576:	bfb8      	it	lt
 8009578:	425b      	neglt	r3, r3
 800957a:	663b      	str	r3, [r7, #96]	; 0x60
    if(m0>THRESHOLD&&m1>THRESHOLD&&m2>THRESHOLD) return 0;
 800957c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800957e:	2b02      	cmp	r3, #2
 8009580:	dd07      	ble.n	8009592 <Read_Ads7846+0x1fa>
 8009582:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009584:	2b02      	cmp	r3, #2
 8009586:	dd04      	ble.n	8009592 <Read_Ads7846+0x1fa>
 8009588:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800958a:	2b02      	cmp	r3, #2
 800958c:	dd01      	ble.n	8009592 <Read_Ads7846+0x1fa>
 800958e:	2300      	movs	r3, #0
 8009590:	e035      	b.n	80095fe <Read_Ads7846+0x266>
   
    if(m0<m1)
 8009592:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009594:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009596:	429a      	cmp	r2, r3
 8009598:	da17      	bge.n	80095ca <Read_Ads7846+0x232>
    {
      if(m2<m0) 
 800959a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800959c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800959e:	429a      	cmp	r2, r3
 80095a0:	da09      	bge.n	80095b6 <Read_Ads7846+0x21e>
        screen.y=(temp[0]+temp[2])/2;
 80095a2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80095a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80095a6:	4413      	add	r3, r2
 80095a8:	0fda      	lsrs	r2, r3, #31
 80095aa:	4413      	add	r3, r2
 80095ac:	105b      	asrs	r3, r3, #1
 80095ae:	b29a      	uxth	r2, r3
 80095b0:	4b17      	ldr	r3, [pc, #92]	; (8009610 <Read_Ads7846+0x278>)
 80095b2:	805a      	strh	r2, [r3, #2]
 80095b4:	e020      	b.n	80095f8 <Read_Ads7846+0x260>
      else 
        screen.y=(temp[0]+temp[1])/2;  
 80095b6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80095b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80095ba:	4413      	add	r3, r2
 80095bc:	0fda      	lsrs	r2, r3, #31
 80095be:	4413      	add	r3, r2
 80095c0:	105b      	asrs	r3, r3, #1
 80095c2:	b29a      	uxth	r2, r3
 80095c4:	4b12      	ldr	r3, [pc, #72]	; (8009610 <Read_Ads7846+0x278>)
 80095c6:	805a      	strh	r2, [r3, #2]
 80095c8:	e016      	b.n	80095f8 <Read_Ads7846+0x260>
      }
    else if(m2<m1) 
 80095ca:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80095cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80095ce:	429a      	cmp	r2, r3
 80095d0:	da09      	bge.n	80095e6 <Read_Ads7846+0x24e>
       screen.y=(temp[0]+temp[2])/2;
 80095d2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80095d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80095d6:	4413      	add	r3, r2
 80095d8:	0fda      	lsrs	r2, r3, #31
 80095da:	4413      	add	r3, r2
 80095dc:	105b      	asrs	r3, r3, #1
 80095de:	b29a      	uxth	r2, r3
 80095e0:	4b0b      	ldr	r3, [pc, #44]	; (8009610 <Read_Ads7846+0x278>)
 80095e2:	805a      	strh	r2, [r3, #2]
 80095e4:	e008      	b.n	80095f8 <Read_Ads7846+0x260>
    else
       screen.y=(temp[1]+temp[2])/2;
 80095e6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80095e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80095ea:	4413      	add	r3, r2
 80095ec:	0fda      	lsrs	r2, r3, #31
 80095ee:	4413      	add	r3, r2
 80095f0:	105b      	asrs	r3, r3, #1
 80095f2:	b29a      	uxth	r2, r3
 80095f4:	4b06      	ldr	r3, [pc, #24]	; (8009610 <Read_Ads7846+0x278>)
 80095f6:	805a      	strh	r2, [r3, #2]
   
    return &screen;
 80095f8:	4b05      	ldr	r3, [pc, #20]	; (8009610 <Read_Ads7846+0x278>)
 80095fa:	e000      	b.n	80095fe <Read_Ads7846+0x266>
  }
  return 0; 
 80095fc:	2300      	movs	r3, #0
}
 80095fe:	4618      	mov	r0, r3
 8009600:	3770      	adds	r7, #112	; 0x70
 8009602:	46bd      	mov	sp, r7
 8009604:	bd80      	pop	{r7, pc}
 8009606:	bf00      	nop
 8009608:	40020800 	.word	0x40020800
 800960c:	55555556 	.word	0x55555556
 8009610:	200019f0 	.word	0x200019f0

08009614 <setCalibrationMatrix>:
* Attention      : None
*******************************************************************************/
FunctionalState setCalibrationMatrix( Coordinate * displayPtr,
                          Coordinate * screenPtr,
                          Matrix * matrixPtr)
{
 8009614:	b590      	push	{r4, r7, lr}
 8009616:	b087      	sub	sp, #28
 8009618:	af00      	add	r7, sp, #0
 800961a:	60f8      	str	r0, [r7, #12]
 800961c:	60b9      	str	r1, [r7, #8]
 800961e:	607a      	str	r2, [r7, #4]

  FunctionalState retTHRESHOLD = ENABLE ;
 8009620:	2301      	movs	r3, #1
 8009622:	75fb      	strb	r3, [r7, #23]
  /* K=(X0-X2) (Y1-Y2)-(X1-X2) (Y0-Y2) */
  matrixPtr->Divider = ((screenPtr[0].x - screenPtr[2].x) * (screenPtr[1].y - screenPtr[2].y)) - 
 8009624:	68bb      	ldr	r3, [r7, #8]
 8009626:	881b      	ldrh	r3, [r3, #0]
 8009628:	461a      	mov	r2, r3
 800962a:	68bb      	ldr	r3, [r7, #8]
 800962c:	3308      	adds	r3, #8
 800962e:	881b      	ldrh	r3, [r3, #0]
 8009630:	1ad3      	subs	r3, r2, r3
 8009632:	68ba      	ldr	r2, [r7, #8]
 8009634:	3204      	adds	r2, #4
 8009636:	8852      	ldrh	r2, [r2, #2]
 8009638:	4611      	mov	r1, r2
 800963a:	68ba      	ldr	r2, [r7, #8]
 800963c:	3208      	adds	r2, #8
 800963e:	8852      	ldrh	r2, [r2, #2]
 8009640:	1a8a      	subs	r2, r1, r2
 8009642:	fb02 f203 	mul.w	r2, r2, r3
                       ((screenPtr[1].x - screenPtr[2].x) * (screenPtr[0].y - screenPtr[2].y)) ;
 8009646:	68bb      	ldr	r3, [r7, #8]
 8009648:	3304      	adds	r3, #4
 800964a:	881b      	ldrh	r3, [r3, #0]
 800964c:	4619      	mov	r1, r3
 800964e:	68bb      	ldr	r3, [r7, #8]
 8009650:	3308      	adds	r3, #8
 8009652:	881b      	ldrh	r3, [r3, #0]
 8009654:	1acb      	subs	r3, r1, r3
 8009656:	68b9      	ldr	r1, [r7, #8]
 8009658:	8849      	ldrh	r1, [r1, #2]
 800965a:	4608      	mov	r0, r1
 800965c:	68b9      	ldr	r1, [r7, #8]
 800965e:	3108      	adds	r1, #8
 8009660:	8849      	ldrh	r1, [r1, #2]
 8009662:	1a41      	subs	r1, r0, r1
 8009664:	fb01 f303 	mul.w	r3, r1, r3
  matrixPtr->Divider = ((screenPtr[0].x - screenPtr[2].x) * (screenPtr[1].y - screenPtr[2].y)) - 
 8009668:	1ad3      	subs	r3, r2, r3
 800966a:	4618      	mov	r0, r3
 800966c:	f7fa fbbc 	bl	8003de8 <__aeabi_i2d>
 8009670:	4603      	mov	r3, r0
 8009672:	460c      	mov	r4, r1
 8009674:	687a      	ldr	r2, [r7, #4]
 8009676:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
  if( matrixPtr->Divider == 0 )
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8009680:	f04f 0200 	mov.w	r2, #0
 8009684:	f04f 0300 	mov.w	r3, #0
 8009688:	f7fa fe80 	bl	800438c <__aeabi_dcmpeq>
 800968c:	4603      	mov	r3, r0
 800968e:	2b00      	cmp	r3, #0
 8009690:	d002      	beq.n	8009698 <setCalibrationMatrix+0x84>
  {
    retTHRESHOLD = DISABLE;
 8009692:	2300      	movs	r3, #0
 8009694:	75fb      	strb	r3, [r7, #23]
 8009696:	e145      	b.n	8009924 <setCalibrationMatrix+0x310>
  }
  else
  {
    /* A=((XD0-XD2) (Y1-Y2)-(XD1-XD2) (Y0-Y2))/K  */
    matrixPtr->An = ((displayPtr[0].x - displayPtr[2].x) * (screenPtr[1].y - screenPtr[2].y)) - 
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	881b      	ldrh	r3, [r3, #0]
 800969c:	461a      	mov	r2, r3
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	3308      	adds	r3, #8
 80096a2:	881b      	ldrh	r3, [r3, #0]
 80096a4:	1ad3      	subs	r3, r2, r3
 80096a6:	68ba      	ldr	r2, [r7, #8]
 80096a8:	3204      	adds	r2, #4
 80096aa:	8852      	ldrh	r2, [r2, #2]
 80096ac:	4611      	mov	r1, r2
 80096ae:	68ba      	ldr	r2, [r7, #8]
 80096b0:	3208      	adds	r2, #8
 80096b2:	8852      	ldrh	r2, [r2, #2]
 80096b4:	1a8a      	subs	r2, r1, r2
 80096b6:	fb02 f203 	mul.w	r2, r2, r3
                    ((displayPtr[1].x - displayPtr[2].x) * (screenPtr[0].y - screenPtr[2].y)) ;
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	3304      	adds	r3, #4
 80096be:	881b      	ldrh	r3, [r3, #0]
 80096c0:	4619      	mov	r1, r3
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	3308      	adds	r3, #8
 80096c6:	881b      	ldrh	r3, [r3, #0]
 80096c8:	1acb      	subs	r3, r1, r3
 80096ca:	68b9      	ldr	r1, [r7, #8]
 80096cc:	8849      	ldrh	r1, [r1, #2]
 80096ce:	4608      	mov	r0, r1
 80096d0:	68b9      	ldr	r1, [r7, #8]
 80096d2:	3108      	adds	r1, #8
 80096d4:	8849      	ldrh	r1, [r1, #2]
 80096d6:	1a41      	subs	r1, r0, r1
 80096d8:	fb01 f303 	mul.w	r3, r1, r3
    matrixPtr->An = ((displayPtr[0].x - displayPtr[2].x) * (screenPtr[1].y - screenPtr[2].y)) - 
 80096dc:	1ad3      	subs	r3, r2, r3
 80096de:	4618      	mov	r0, r3
 80096e0:	f7fa fb82 	bl	8003de8 <__aeabi_i2d>
 80096e4:	4603      	mov	r3, r0
 80096e6:	460c      	mov	r4, r1
 80096e8:	687a      	ldr	r2, [r7, #4]
 80096ea:	e9c2 3400 	strd	r3, r4, [r2]
  /* B=((X0-X2) (XD1-XD2)-(XD0-XD2) (X1-X2))/K  */
    matrixPtr->Bn = ((screenPtr[0].x - screenPtr[2].x) * (displayPtr[1].x - displayPtr[2].x)) - 
 80096ee:	68bb      	ldr	r3, [r7, #8]
 80096f0:	881b      	ldrh	r3, [r3, #0]
 80096f2:	461a      	mov	r2, r3
 80096f4:	68bb      	ldr	r3, [r7, #8]
 80096f6:	3308      	adds	r3, #8
 80096f8:	881b      	ldrh	r3, [r3, #0]
 80096fa:	1ad3      	subs	r3, r2, r3
 80096fc:	68fa      	ldr	r2, [r7, #12]
 80096fe:	3204      	adds	r2, #4
 8009700:	8812      	ldrh	r2, [r2, #0]
 8009702:	4611      	mov	r1, r2
 8009704:	68fa      	ldr	r2, [r7, #12]
 8009706:	3208      	adds	r2, #8
 8009708:	8812      	ldrh	r2, [r2, #0]
 800970a:	1a8a      	subs	r2, r1, r2
 800970c:	fb02 f203 	mul.w	r2, r2, r3
                    ((displayPtr[0].x - displayPtr[2].x) * (screenPtr[1].x - screenPtr[2].x)) ;
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	881b      	ldrh	r3, [r3, #0]
 8009714:	4619      	mov	r1, r3
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	3308      	adds	r3, #8
 800971a:	881b      	ldrh	r3, [r3, #0]
 800971c:	1acb      	subs	r3, r1, r3
 800971e:	68b9      	ldr	r1, [r7, #8]
 8009720:	3104      	adds	r1, #4
 8009722:	8809      	ldrh	r1, [r1, #0]
 8009724:	4608      	mov	r0, r1
 8009726:	68b9      	ldr	r1, [r7, #8]
 8009728:	3108      	adds	r1, #8
 800972a:	8809      	ldrh	r1, [r1, #0]
 800972c:	1a41      	subs	r1, r0, r1
 800972e:	fb01 f303 	mul.w	r3, r1, r3
    matrixPtr->Bn = ((screenPtr[0].x - screenPtr[2].x) * (displayPtr[1].x - displayPtr[2].x)) - 
 8009732:	1ad3      	subs	r3, r2, r3
 8009734:	4618      	mov	r0, r3
 8009736:	f7fa fb57 	bl	8003de8 <__aeabi_i2d>
 800973a:	4603      	mov	r3, r0
 800973c:	460c      	mov	r4, r1
 800973e:	687a      	ldr	r2, [r7, #4]
 8009740:	e9c2 3402 	strd	r3, r4, [r2, #8]
    /* C=(Y0(X2XD1-X1XD2)+Y1(X0XD2-X2XD0)+Y2(X1XD0-X0XD1))/K */
    matrixPtr->Cn = (screenPtr[2].x * displayPtr[1].x - screenPtr[1].x * displayPtr[2].x) * screenPtr[0].y +
 8009744:	68bb      	ldr	r3, [r7, #8]
 8009746:	3308      	adds	r3, #8
 8009748:	881b      	ldrh	r3, [r3, #0]
 800974a:	461a      	mov	r2, r3
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	3304      	adds	r3, #4
 8009750:	881b      	ldrh	r3, [r3, #0]
 8009752:	fb03 f202 	mul.w	r2, r3, r2
 8009756:	68bb      	ldr	r3, [r7, #8]
 8009758:	3304      	adds	r3, #4
 800975a:	881b      	ldrh	r3, [r3, #0]
 800975c:	4619      	mov	r1, r3
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	3308      	adds	r3, #8
 8009762:	881b      	ldrh	r3, [r3, #0]
 8009764:	fb03 f301 	mul.w	r3, r3, r1
 8009768:	1ad3      	subs	r3, r2, r3
 800976a:	68ba      	ldr	r2, [r7, #8]
 800976c:	8852      	ldrh	r2, [r2, #2]
 800976e:	fb02 f203 	mul.w	r2, r2, r3
                    (screenPtr[0].x * displayPtr[2].x - screenPtr[2].x * displayPtr[0].x) * screenPtr[1].y +
 8009772:	68bb      	ldr	r3, [r7, #8]
 8009774:	881b      	ldrh	r3, [r3, #0]
 8009776:	4619      	mov	r1, r3
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	3308      	adds	r3, #8
 800977c:	881b      	ldrh	r3, [r3, #0]
 800977e:	fb03 f101 	mul.w	r1, r3, r1
 8009782:	68bb      	ldr	r3, [r7, #8]
 8009784:	3308      	adds	r3, #8
 8009786:	881b      	ldrh	r3, [r3, #0]
 8009788:	4618      	mov	r0, r3
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	881b      	ldrh	r3, [r3, #0]
 800978e:	fb03 f300 	mul.w	r3, r3, r0
 8009792:	1acb      	subs	r3, r1, r3
 8009794:	68b9      	ldr	r1, [r7, #8]
 8009796:	3104      	adds	r1, #4
 8009798:	8849      	ldrh	r1, [r1, #2]
 800979a:	fb01 f303 	mul.w	r3, r1, r3
    matrixPtr->Cn = (screenPtr[2].x * displayPtr[1].x - screenPtr[1].x * displayPtr[2].x) * screenPtr[0].y +
 800979e:	441a      	add	r2, r3
                    (screenPtr[1].x * displayPtr[0].x - screenPtr[0].x * displayPtr[1].x) * screenPtr[2].y ;
 80097a0:	68bb      	ldr	r3, [r7, #8]
 80097a2:	3304      	adds	r3, #4
 80097a4:	881b      	ldrh	r3, [r3, #0]
 80097a6:	4619      	mov	r1, r3
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	881b      	ldrh	r3, [r3, #0]
 80097ac:	fb03 f101 	mul.w	r1, r3, r1
 80097b0:	68bb      	ldr	r3, [r7, #8]
 80097b2:	881b      	ldrh	r3, [r3, #0]
 80097b4:	4618      	mov	r0, r3
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	3304      	adds	r3, #4
 80097ba:	881b      	ldrh	r3, [r3, #0]
 80097bc:	fb03 f300 	mul.w	r3, r3, r0
 80097c0:	1acb      	subs	r3, r1, r3
 80097c2:	68b9      	ldr	r1, [r7, #8]
 80097c4:	3108      	adds	r1, #8
 80097c6:	8849      	ldrh	r1, [r1, #2]
 80097c8:	fb01 f303 	mul.w	r3, r1, r3
                    (screenPtr[0].x * displayPtr[2].x - screenPtr[2].x * displayPtr[0].x) * screenPtr[1].y +
 80097cc:	4413      	add	r3, r2
    matrixPtr->Cn = (screenPtr[2].x * displayPtr[1].x - screenPtr[1].x * displayPtr[2].x) * screenPtr[0].y +
 80097ce:	4618      	mov	r0, r3
 80097d0:	f7fa fb0a 	bl	8003de8 <__aeabi_i2d>
 80097d4:	4603      	mov	r3, r0
 80097d6:	460c      	mov	r4, r1
 80097d8:	687a      	ldr	r2, [r7, #4]
 80097da:	e9c2 3404 	strd	r3, r4, [r2, #16]
    /* D=((YD0-YD2) (Y1-Y2)-(YD1-YD2) (Y0-Y2))/K  */
    matrixPtr->Dn = ((displayPtr[0].y - displayPtr[2].y) * (screenPtr[1].y - screenPtr[2].y)) - 
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	885b      	ldrh	r3, [r3, #2]
 80097e2:	461a      	mov	r2, r3
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	3308      	adds	r3, #8
 80097e8:	885b      	ldrh	r3, [r3, #2]
 80097ea:	1ad3      	subs	r3, r2, r3
 80097ec:	68ba      	ldr	r2, [r7, #8]
 80097ee:	3204      	adds	r2, #4
 80097f0:	8852      	ldrh	r2, [r2, #2]
 80097f2:	4611      	mov	r1, r2
 80097f4:	68ba      	ldr	r2, [r7, #8]
 80097f6:	3208      	adds	r2, #8
 80097f8:	8852      	ldrh	r2, [r2, #2]
 80097fa:	1a8a      	subs	r2, r1, r2
 80097fc:	fb02 f203 	mul.w	r2, r2, r3
                    ((displayPtr[1].y - displayPtr[2].y) * (screenPtr[0].y - screenPtr[2].y)) ;
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	3304      	adds	r3, #4
 8009804:	885b      	ldrh	r3, [r3, #2]
 8009806:	4619      	mov	r1, r3
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	3308      	adds	r3, #8
 800980c:	885b      	ldrh	r3, [r3, #2]
 800980e:	1acb      	subs	r3, r1, r3
 8009810:	68b9      	ldr	r1, [r7, #8]
 8009812:	8849      	ldrh	r1, [r1, #2]
 8009814:	4608      	mov	r0, r1
 8009816:	68b9      	ldr	r1, [r7, #8]
 8009818:	3108      	adds	r1, #8
 800981a:	8849      	ldrh	r1, [r1, #2]
 800981c:	1a41      	subs	r1, r0, r1
 800981e:	fb01 f303 	mul.w	r3, r1, r3
    matrixPtr->Dn = ((displayPtr[0].y - displayPtr[2].y) * (screenPtr[1].y - screenPtr[2].y)) - 
 8009822:	1ad3      	subs	r3, r2, r3
 8009824:	4618      	mov	r0, r3
 8009826:	f7fa fadf 	bl	8003de8 <__aeabi_i2d>
 800982a:	4603      	mov	r3, r0
 800982c:	460c      	mov	r4, r1
 800982e:	687a      	ldr	r2, [r7, #4]
 8009830:	e9c2 3406 	strd	r3, r4, [r2, #24]
    /* E=((X0-X2) (YD1-YD2)-(YD0-YD2) (X1-X2))/K  */
    matrixPtr->En = ((screenPtr[0].x - screenPtr[2].x) * (displayPtr[1].y - displayPtr[2].y)) - 
 8009834:	68bb      	ldr	r3, [r7, #8]
 8009836:	881b      	ldrh	r3, [r3, #0]
 8009838:	461a      	mov	r2, r3
 800983a:	68bb      	ldr	r3, [r7, #8]
 800983c:	3308      	adds	r3, #8
 800983e:	881b      	ldrh	r3, [r3, #0]
 8009840:	1ad3      	subs	r3, r2, r3
 8009842:	68fa      	ldr	r2, [r7, #12]
 8009844:	3204      	adds	r2, #4
 8009846:	8852      	ldrh	r2, [r2, #2]
 8009848:	4611      	mov	r1, r2
 800984a:	68fa      	ldr	r2, [r7, #12]
 800984c:	3208      	adds	r2, #8
 800984e:	8852      	ldrh	r2, [r2, #2]
 8009850:	1a8a      	subs	r2, r1, r2
 8009852:	fb02 f203 	mul.w	r2, r2, r3
                    ((displayPtr[0].y - displayPtr[2].y) * (screenPtr[1].x - screenPtr[2].x)) ;
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	885b      	ldrh	r3, [r3, #2]
 800985a:	4619      	mov	r1, r3
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	3308      	adds	r3, #8
 8009860:	885b      	ldrh	r3, [r3, #2]
 8009862:	1acb      	subs	r3, r1, r3
 8009864:	68b9      	ldr	r1, [r7, #8]
 8009866:	3104      	adds	r1, #4
 8009868:	8809      	ldrh	r1, [r1, #0]
 800986a:	4608      	mov	r0, r1
 800986c:	68b9      	ldr	r1, [r7, #8]
 800986e:	3108      	adds	r1, #8
 8009870:	8809      	ldrh	r1, [r1, #0]
 8009872:	1a41      	subs	r1, r0, r1
 8009874:	fb01 f303 	mul.w	r3, r1, r3
    matrixPtr->En = ((screenPtr[0].x - screenPtr[2].x) * (displayPtr[1].y - displayPtr[2].y)) - 
 8009878:	1ad3      	subs	r3, r2, r3
 800987a:	4618      	mov	r0, r3
 800987c:	f7fa fab4 	bl	8003de8 <__aeabi_i2d>
 8009880:	4603      	mov	r3, r0
 8009882:	460c      	mov	r4, r1
 8009884:	687a      	ldr	r2, [r7, #4]
 8009886:	e9c2 3408 	strd	r3, r4, [r2, #32]
    /* F=(Y0(X2YD1-X1YD2)+Y1(X0YD2-X2YD0)+Y2(X1YD0-X0YD1))/K */
    matrixPtr->Fn = (screenPtr[2].x * displayPtr[1].y - screenPtr[1].x * displayPtr[2].y) * screenPtr[0].y +
 800988a:	68bb      	ldr	r3, [r7, #8]
 800988c:	3308      	adds	r3, #8
 800988e:	881b      	ldrh	r3, [r3, #0]
 8009890:	461a      	mov	r2, r3
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	3304      	adds	r3, #4
 8009896:	885b      	ldrh	r3, [r3, #2]
 8009898:	fb03 f202 	mul.w	r2, r3, r2
 800989c:	68bb      	ldr	r3, [r7, #8]
 800989e:	3304      	adds	r3, #4
 80098a0:	881b      	ldrh	r3, [r3, #0]
 80098a2:	4619      	mov	r1, r3
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	3308      	adds	r3, #8
 80098a8:	885b      	ldrh	r3, [r3, #2]
 80098aa:	fb03 f301 	mul.w	r3, r3, r1
 80098ae:	1ad3      	subs	r3, r2, r3
 80098b0:	68ba      	ldr	r2, [r7, #8]
 80098b2:	8852      	ldrh	r2, [r2, #2]
 80098b4:	fb02 f203 	mul.w	r2, r2, r3
                    (screenPtr[0].x * displayPtr[2].y - screenPtr[2].x * displayPtr[0].y) * screenPtr[1].y +
 80098b8:	68bb      	ldr	r3, [r7, #8]
 80098ba:	881b      	ldrh	r3, [r3, #0]
 80098bc:	4619      	mov	r1, r3
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	3308      	adds	r3, #8
 80098c2:	885b      	ldrh	r3, [r3, #2]
 80098c4:	fb03 f101 	mul.w	r1, r3, r1
 80098c8:	68bb      	ldr	r3, [r7, #8]
 80098ca:	3308      	adds	r3, #8
 80098cc:	881b      	ldrh	r3, [r3, #0]
 80098ce:	4618      	mov	r0, r3
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	885b      	ldrh	r3, [r3, #2]
 80098d4:	fb03 f300 	mul.w	r3, r3, r0
 80098d8:	1acb      	subs	r3, r1, r3
 80098da:	68b9      	ldr	r1, [r7, #8]
 80098dc:	3104      	adds	r1, #4
 80098de:	8849      	ldrh	r1, [r1, #2]
 80098e0:	fb01 f303 	mul.w	r3, r1, r3
    matrixPtr->Fn = (screenPtr[2].x * displayPtr[1].y - screenPtr[1].x * displayPtr[2].y) * screenPtr[0].y +
 80098e4:	441a      	add	r2, r3
                    (screenPtr[1].x * displayPtr[0].y - screenPtr[0].x * displayPtr[1].y) * screenPtr[2].y ;
 80098e6:	68bb      	ldr	r3, [r7, #8]
 80098e8:	3304      	adds	r3, #4
 80098ea:	881b      	ldrh	r3, [r3, #0]
 80098ec:	4619      	mov	r1, r3
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	885b      	ldrh	r3, [r3, #2]
 80098f2:	fb03 f101 	mul.w	r1, r3, r1
 80098f6:	68bb      	ldr	r3, [r7, #8]
 80098f8:	881b      	ldrh	r3, [r3, #0]
 80098fa:	4618      	mov	r0, r3
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	3304      	adds	r3, #4
 8009900:	885b      	ldrh	r3, [r3, #2]
 8009902:	fb03 f300 	mul.w	r3, r3, r0
 8009906:	1acb      	subs	r3, r1, r3
 8009908:	68b9      	ldr	r1, [r7, #8]
 800990a:	3108      	adds	r1, #8
 800990c:	8849      	ldrh	r1, [r1, #2]
 800990e:	fb01 f303 	mul.w	r3, r1, r3
                    (screenPtr[0].x * displayPtr[2].y - screenPtr[2].x * displayPtr[0].y) * screenPtr[1].y +
 8009912:	4413      	add	r3, r2
    matrixPtr->Fn = (screenPtr[2].x * displayPtr[1].y - screenPtr[1].x * displayPtr[2].y) * screenPtr[0].y +
 8009914:	4618      	mov	r0, r3
 8009916:	f7fa fa67 	bl	8003de8 <__aeabi_i2d>
 800991a:	4603      	mov	r3, r0
 800991c:	460c      	mov	r4, r1
 800991e:	687a      	ldr	r2, [r7, #4]
 8009920:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
  }
  return( retTHRESHOLD ) ;
 8009924:	7dfb      	ldrb	r3, [r7, #23]
}
 8009926:	4618      	mov	r0, r3
 8009928:	371c      	adds	r7, #28
 800992a:	46bd      	mov	sp, r7
 800992c:	bd90      	pop	{r4, r7, pc}

0800992e <getDisplayPoint>:
* Attention      : None
*******************************************************************************/
FunctionalState getDisplayPoint(Coordinate * displayPtr,
                     Coordinate * screenPtr,
                     Matrix * matrixPtr )
{
 800992e:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8009932:	b086      	sub	sp, #24
 8009934:	af00      	add	r7, sp, #0
 8009936:	60f8      	str	r0, [r7, #12]
 8009938:	60b9      	str	r1, [r7, #8]
 800993a:	607a      	str	r2, [r7, #4]
  FunctionalState retTHRESHOLD =ENABLE ;
 800993c:	2301      	movs	r3, #1
 800993e:	75fb      	strb	r3, [r7, #23]
  /*
  An=168
  */
  if( matrixPtr->Divider != 0 )
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8009946:	f04f 0200 	mov.w	r2, #0
 800994a:	f04f 0300 	mov.w	r3, #0
 800994e:	f7fa fd1d 	bl	800438c <__aeabi_dcmpeq>
 8009952:	4603      	mov	r3, r0
 8009954:	2b00      	cmp	r3, #0
 8009956:	f040 8091 	bne.w	8009a7c <getDisplayPoint+0x14e>
  {
    /* XD = AX+BY+C */        
    displayPtr->x = ( (matrixPtr->An * screenPtr->x) + 
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8009960:	68bb      	ldr	r3, [r7, #8]
 8009962:	881b      	ldrh	r3, [r3, #0]
 8009964:	4618      	mov	r0, r3
 8009966:	f7fa fa3f 	bl	8003de8 <__aeabi_i2d>
 800996a:	4602      	mov	r2, r0
 800996c:	460b      	mov	r3, r1
 800996e:	4620      	mov	r0, r4
 8009970:	4629      	mov	r1, r5
 8009972:	f7fa faa3 	bl	8003ebc <__aeabi_dmul>
 8009976:	4603      	mov	r3, r0
 8009978:	460c      	mov	r4, r1
 800997a:	4698      	mov	r8, r3
 800997c:	46a1      	mov	r9, r4
                      (matrixPtr->Bn * screenPtr->y) + 
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8009984:	68bb      	ldr	r3, [r7, #8]
 8009986:	885b      	ldrh	r3, [r3, #2]
 8009988:	4618      	mov	r0, r3
 800998a:	f7fa fa2d 	bl	8003de8 <__aeabi_i2d>
 800998e:	4602      	mov	r2, r0
 8009990:	460b      	mov	r3, r1
 8009992:	4620      	mov	r0, r4
 8009994:	4629      	mov	r1, r5
 8009996:	f7fa fa91 	bl	8003ebc <__aeabi_dmul>
 800999a:	4603      	mov	r3, r0
 800999c:	460c      	mov	r4, r1
    displayPtr->x = ( (matrixPtr->An * screenPtr->x) + 
 800999e:	461a      	mov	r2, r3
 80099a0:	4623      	mov	r3, r4
 80099a2:	4640      	mov	r0, r8
 80099a4:	4649      	mov	r1, r9
 80099a6:	f7fa f8d3 	bl	8003b50 <__adddf3>
 80099aa:	4603      	mov	r3, r0
 80099ac:	460c      	mov	r4, r1
 80099ae:	4618      	mov	r0, r3
 80099b0:	4621      	mov	r1, r4
                       matrixPtr->Cn 
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
                      (matrixPtr->Bn * screenPtr->y) + 
 80099b8:	461a      	mov	r2, r3
 80099ba:	4623      	mov	r3, r4
 80099bc:	f7fa f8c8 	bl	8003b50 <__adddf3>
 80099c0:	4603      	mov	r3, r0
 80099c2:	460c      	mov	r4, r1
 80099c4:	4618      	mov	r0, r3
 80099c6:	4621      	mov	r1, r4
                    ) / matrixPtr->Divider ;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 80099ce:	461a      	mov	r2, r3
 80099d0:	4623      	mov	r3, r4
 80099d2:	f7fa fb9d 	bl	8004110 <__aeabi_ddiv>
 80099d6:	4603      	mov	r3, r0
 80099d8:	460c      	mov	r4, r1
    displayPtr->x = ( (matrixPtr->An * screenPtr->x) + 
 80099da:	4618      	mov	r0, r3
 80099dc:	4621      	mov	r1, r4
 80099de:	f7fa fd07 	bl	80043f0 <__aeabi_d2uiz>
 80099e2:	4603      	mov	r3, r0
 80099e4:	b29a      	uxth	r2, r3
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	801a      	strh	r2, [r3, #0]
    /* YD = DX+EY+F */        
    displayPtr->y = ( (matrixPtr->Dn * screenPtr->x) + 
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80099f0:	68bb      	ldr	r3, [r7, #8]
 80099f2:	881b      	ldrh	r3, [r3, #0]
 80099f4:	4618      	mov	r0, r3
 80099f6:	f7fa f9f7 	bl	8003de8 <__aeabi_i2d>
 80099fa:	4602      	mov	r2, r0
 80099fc:	460b      	mov	r3, r1
 80099fe:	4620      	mov	r0, r4
 8009a00:	4629      	mov	r1, r5
 8009a02:	f7fa fa5b 	bl	8003ebc <__aeabi_dmul>
 8009a06:	4603      	mov	r3, r0
 8009a08:	460c      	mov	r4, r1
 8009a0a:	4698      	mov	r8, r3
 8009a0c:	46a1      	mov	r9, r4
                      (matrixPtr->En * screenPtr->y) + 
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8009a14:	68bb      	ldr	r3, [r7, #8]
 8009a16:	885b      	ldrh	r3, [r3, #2]
 8009a18:	4618      	mov	r0, r3
 8009a1a:	f7fa f9e5 	bl	8003de8 <__aeabi_i2d>
 8009a1e:	4602      	mov	r2, r0
 8009a20:	460b      	mov	r3, r1
 8009a22:	4620      	mov	r0, r4
 8009a24:	4629      	mov	r1, r5
 8009a26:	f7fa fa49 	bl	8003ebc <__aeabi_dmul>
 8009a2a:	4603      	mov	r3, r0
 8009a2c:	460c      	mov	r4, r1
    displayPtr->y = ( (matrixPtr->Dn * screenPtr->x) + 
 8009a2e:	461a      	mov	r2, r3
 8009a30:	4623      	mov	r3, r4
 8009a32:	4640      	mov	r0, r8
 8009a34:	4649      	mov	r1, r9
 8009a36:	f7fa f88b 	bl	8003b50 <__adddf3>
 8009a3a:	4603      	mov	r3, r0
 8009a3c:	460c      	mov	r4, r1
 8009a3e:	4618      	mov	r0, r3
 8009a40:	4621      	mov	r1, r4
                       matrixPtr->Fn 
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
                      (matrixPtr->En * screenPtr->y) + 
 8009a48:	461a      	mov	r2, r3
 8009a4a:	4623      	mov	r3, r4
 8009a4c:	f7fa f880 	bl	8003b50 <__adddf3>
 8009a50:	4603      	mov	r3, r0
 8009a52:	460c      	mov	r4, r1
 8009a54:	4618      	mov	r0, r3
 8009a56:	4621      	mov	r1, r4
                    ) / matrixPtr->Divider ;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 8009a5e:	461a      	mov	r2, r3
 8009a60:	4623      	mov	r3, r4
 8009a62:	f7fa fb55 	bl	8004110 <__aeabi_ddiv>
 8009a66:	4603      	mov	r3, r0
 8009a68:	460c      	mov	r4, r1
    displayPtr->y = ( (matrixPtr->Dn * screenPtr->x) + 
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	4621      	mov	r1, r4
 8009a6e:	f7fa fcbf 	bl	80043f0 <__aeabi_d2uiz>
 8009a72:	4603      	mov	r3, r0
 8009a74:	b29a      	uxth	r2, r3
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	805a      	strh	r2, [r3, #2]
 8009a7a:	e001      	b.n	8009a80 <getDisplayPoint+0x152>
  }
  else
  {
    retTHRESHOLD = DISABLE;
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	75fb      	strb	r3, [r7, #23]
  }
  return(retTHRESHOLD);
 8009a80:	7dfb      	ldrb	r3, [r7, #23]
} 
 8009a82:	4618      	mov	r0, r3
 8009a84:	3718      	adds	r7, #24
 8009a86:	46bd      	mov	sp, r7
 8009a88:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08009a8c <TouchPanel_Calibrate>:
* Output         : None
* Return         : None
* Attention      : None
*******************************************************************************/
void TouchPanel_Calibrate(void)
{
 8009a8c:	b580      	push	{r7, lr}
 8009a8e:	b082      	sub	sp, #8
 8009a90:	af00      	add	r7, sp, #0
  uint8_t i;
  Coordinate * Ptr;

  for(i=0;i<3;i++)
 8009a92:	2300      	movs	r3, #0
 8009a94:	71fb      	strb	r3, [r7, #7]
 8009a96:	e03a      	b.n	8009b0e <TouchPanel_Calibrate+0x82>
  {
    BSP_LCD_SetFont(&Font12);
 8009a98:	4824      	ldr	r0, [pc, #144]	; (8009b2c <TouchPanel_Calibrate+0xa0>)
 8009a9a:	f7fe fda3 	bl	80085e4 <BSP_LCD_SetFont>
    BSP_LCD_Clear(LCD_COLOR_WHITE);
 8009a9e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8009aa2:	f7fe fdbb 	bl	800861c <BSP_LCD_Clear>
    BSP_LCD_SetTextColor(LCD_COLOR_BLUE); 
 8009aa6:	201f      	movs	r0, #31
 8009aa8:	f7fe fd8c 	bl	80085c4 <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAtLine(1, (uint8_t*)"        Touch crosshair to calibrate");
 8009aac:	4920      	ldr	r1, [pc, #128]	; (8009b30 <TouchPanel_Calibrate+0xa4>)
 8009aae:	2001      	movs	r0, #1
 8009ab0:	f7fe fe9c 	bl	80087ec <BSP_LCD_DisplayStringAtLine>
    BSP_LCD_SetFont(&Font24);
 8009ab4:	481f      	ldr	r0, [pc, #124]	; (8009b34 <TouchPanel_Calibrate+0xa8>)
 8009ab6:	f7fe fd95 	bl	80085e4 <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAtLine(5, (uint8_t*)"   Waveshare LCD");
 8009aba:	491f      	ldr	r1, [pc, #124]	; (8009b38 <TouchPanel_Calibrate+0xac>)
 8009abc:	2005      	movs	r0, #5
 8009abe:	f7fe fe95 	bl	80087ec <BSP_LCD_DisplayStringAtLine>
    HAL_Delay(200);
 8009ac2:	20c8      	movs	r0, #200	; 0xc8
 8009ac4:	f7fa ff90 	bl	80049e8 <HAL_Delay>
    DrawCross(DisplaySample[i].x,DisplaySample[i].y);
 8009ac8:	79fb      	ldrb	r3, [r7, #7]
 8009aca:	4a1c      	ldr	r2, [pc, #112]	; (8009b3c <TouchPanel_Calibrate+0xb0>)
 8009acc:	f832 0023 	ldrh.w	r0, [r2, r3, lsl #2]
 8009ad0:	79fb      	ldrb	r3, [r7, #7]
 8009ad2:	4a1a      	ldr	r2, [pc, #104]	; (8009b3c <TouchPanel_Calibrate+0xb0>)
 8009ad4:	009b      	lsls	r3, r3, #2
 8009ad6:	4413      	add	r3, r2
 8009ad8:	885b      	ldrh	r3, [r3, #2]
 8009ada:	4619      	mov	r1, r3
 8009adc:	f7ff fc30 	bl	8009340 <DrawCross>
    do
    {
      Ptr=Read_Ads7846();
 8009ae0:	f7ff fc5a 	bl	8009398 <Read_Ads7846>
 8009ae4:	6038      	str	r0, [r7, #0]
    }
    while( Ptr == (void*)0 );
 8009ae6:	683b      	ldr	r3, [r7, #0]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d0f9      	beq.n	8009ae0 <TouchPanel_Calibrate+0x54>
    ScreenSample[i].x= Ptr->x; ScreenSample[i].y= Ptr->y;
 8009aec:	79fb      	ldrb	r3, [r7, #7]
 8009aee:	683a      	ldr	r2, [r7, #0]
 8009af0:	8811      	ldrh	r1, [r2, #0]
 8009af2:	4a13      	ldr	r2, [pc, #76]	; (8009b40 <TouchPanel_Calibrate+0xb4>)
 8009af4:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
 8009af8:	79fb      	ldrb	r3, [r7, #7]
 8009afa:	683a      	ldr	r2, [r7, #0]
 8009afc:	8851      	ldrh	r1, [r2, #2]
 8009afe:	4a10      	ldr	r2, [pc, #64]	; (8009b40 <TouchPanel_Calibrate+0xb4>)
 8009b00:	009b      	lsls	r3, r3, #2
 8009b02:	4413      	add	r3, r2
 8009b04:	460a      	mov	r2, r1
 8009b06:	805a      	strh	r2, [r3, #2]
  for(i=0;i<3;i++)
 8009b08:	79fb      	ldrb	r3, [r7, #7]
 8009b0a:	3301      	adds	r3, #1
 8009b0c:	71fb      	strb	r3, [r7, #7]
 8009b0e:	79fb      	ldrb	r3, [r7, #7]
 8009b10:	2b02      	cmp	r3, #2
 8009b12:	d9c1      	bls.n	8009a98 <TouchPanel_Calibrate+0xc>
  }
  setCalibrationMatrix( &DisplaySample[0],&ScreenSample[0],&matrix );
 8009b14:	4a0b      	ldr	r2, [pc, #44]	; (8009b44 <TouchPanel_Calibrate+0xb8>)
 8009b16:	490a      	ldr	r1, [pc, #40]	; (8009b40 <TouchPanel_Calibrate+0xb4>)
 8009b18:	4808      	ldr	r0, [pc, #32]	; (8009b3c <TouchPanel_Calibrate+0xb0>)
 8009b1a:	f7ff fd7b 	bl	8009614 <setCalibrationMatrix>
  BSP_LCD_Clear(LCD_COLOR_BLACK);
 8009b1e:	2000      	movs	r0, #0
 8009b20:	f7fe fd7c 	bl	800861c <BSP_LCD_Clear>
} 
 8009b24:	bf00      	nop
 8009b26:	3708      	adds	r7, #8
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	bd80      	pop	{r7, pc}
 8009b2c:	20000470 	.word	0x20000470
 8009b30:	0800af18 	.word	0x0800af18
 8009b34:	20000468 	.word	0x20000468
 8009b38:	0800af40 	.word	0x0800af40
 8009b3c:	2000047c 	.word	0x2000047c
 8009b40:	200100ac 	.word	0x200100ac
 8009b44:	200100b8 	.word	0x200100b8

08009b48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8009b48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009b80 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8009b4c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8009b4e:	e003      	b.n	8009b58 <LoopCopyDataInit>

08009b50 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8009b50:	4b0c      	ldr	r3, [pc, #48]	; (8009b84 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8009b52:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8009b54:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8009b56:	3104      	adds	r1, #4

08009b58 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8009b58:	480b      	ldr	r0, [pc, #44]	; (8009b88 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8009b5a:	4b0c      	ldr	r3, [pc, #48]	; (8009b8c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8009b5c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8009b5e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8009b60:	d3f6      	bcc.n	8009b50 <CopyDataInit>
  ldr  r2, =_sbss
 8009b62:	4a0b      	ldr	r2, [pc, #44]	; (8009b90 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8009b64:	e002      	b.n	8009b6c <LoopFillZerobss>

08009b66 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8009b66:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8009b68:	f842 3b04 	str.w	r3, [r2], #4

08009b6c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8009b6c:	4b09      	ldr	r3, [pc, #36]	; (8009b94 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8009b6e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8009b70:	d3f9      	bcc.n	8009b66 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8009b72:	f7ff fb11 	bl	8009198 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8009b76:	f000 f81b 	bl	8009bb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8009b7a:	f7fd fff5 	bl	8007b68 <main>
  bx  lr    
 8009b7e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8009b80:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8009b84:	080705d8 	.word	0x080705d8
  ldr  r0, =_sdata
 8009b88:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8009b8c:	200004f0 	.word	0x200004f0
  ldr  r2, =_sbss
 8009b90:	200004f0 	.word	0x200004f0
  ldr  r3, = _ebss
 8009b94:	200100f0 	.word	0x200100f0

08009b98 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009b98:	e7fe      	b.n	8009b98 <ADC_IRQHandler>

08009b9a <__aeabi_memclr>:
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	f7f9 bf84 	b.w	8003aa8 <__aeabi_memset>

08009ba0 <__aeabi_memcpy>:
 8009ba0:	f000 b839 	b.w	8009c16 <memcpy>

08009ba4 <__errno>:
 8009ba4:	4b01      	ldr	r3, [pc, #4]	; (8009bac <__errno+0x8>)
 8009ba6:	6818      	ldr	r0, [r3, #0]
 8009ba8:	4770      	bx	lr
 8009baa:	bf00      	nop
 8009bac:	20000488 	.word	0x20000488

08009bb0 <__libc_init_array>:
 8009bb0:	b570      	push	{r4, r5, r6, lr}
 8009bb2:	4e0d      	ldr	r6, [pc, #52]	; (8009be8 <__libc_init_array+0x38>)
 8009bb4:	4c0d      	ldr	r4, [pc, #52]	; (8009bec <__libc_init_array+0x3c>)
 8009bb6:	1ba4      	subs	r4, r4, r6
 8009bb8:	10a4      	asrs	r4, r4, #2
 8009bba:	2500      	movs	r5, #0
 8009bbc:	42a5      	cmp	r5, r4
 8009bbe:	d109      	bne.n	8009bd4 <__libc_init_array+0x24>
 8009bc0:	4e0b      	ldr	r6, [pc, #44]	; (8009bf0 <__libc_init_array+0x40>)
 8009bc2:	4c0c      	ldr	r4, [pc, #48]	; (8009bf4 <__libc_init_array+0x44>)
 8009bc4:	f001 f97a 	bl	800aebc <_init>
 8009bc8:	1ba4      	subs	r4, r4, r6
 8009bca:	10a4      	asrs	r4, r4, #2
 8009bcc:	2500      	movs	r5, #0
 8009bce:	42a5      	cmp	r5, r4
 8009bd0:	d105      	bne.n	8009bde <__libc_init_array+0x2e>
 8009bd2:	bd70      	pop	{r4, r5, r6, pc}
 8009bd4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009bd8:	4798      	blx	r3
 8009bda:	3501      	adds	r5, #1
 8009bdc:	e7ee      	b.n	8009bbc <__libc_init_array+0xc>
 8009bde:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009be2:	4798      	blx	r3
 8009be4:	3501      	adds	r5, #1
 8009be6:	e7f2      	b.n	8009bce <__libc_init_array+0x1e>
 8009be8:	080705d0 	.word	0x080705d0
 8009bec:	080705d0 	.word	0x080705d0
 8009bf0:	080705d0 	.word	0x080705d0
 8009bf4:	080705d4 	.word	0x080705d4

08009bf8 <memcmp>:
 8009bf8:	b530      	push	{r4, r5, lr}
 8009bfa:	2400      	movs	r4, #0
 8009bfc:	42a2      	cmp	r2, r4
 8009bfe:	d101      	bne.n	8009c04 <memcmp+0xc>
 8009c00:	2000      	movs	r0, #0
 8009c02:	e007      	b.n	8009c14 <memcmp+0x1c>
 8009c04:	5d03      	ldrb	r3, [r0, r4]
 8009c06:	3401      	adds	r4, #1
 8009c08:	190d      	adds	r5, r1, r4
 8009c0a:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8009c0e:	42ab      	cmp	r3, r5
 8009c10:	d0f4      	beq.n	8009bfc <memcmp+0x4>
 8009c12:	1b58      	subs	r0, r3, r5
 8009c14:	bd30      	pop	{r4, r5, pc}

08009c16 <memcpy>:
 8009c16:	b510      	push	{r4, lr}
 8009c18:	1e43      	subs	r3, r0, #1
 8009c1a:	440a      	add	r2, r1
 8009c1c:	4291      	cmp	r1, r2
 8009c1e:	d100      	bne.n	8009c22 <memcpy+0xc>
 8009c20:	bd10      	pop	{r4, pc}
 8009c22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009c26:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009c2a:	e7f7      	b.n	8009c1c <memcpy+0x6>

08009c2c <memset>:
 8009c2c:	4402      	add	r2, r0
 8009c2e:	4603      	mov	r3, r0
 8009c30:	4293      	cmp	r3, r2
 8009c32:	d100      	bne.n	8009c36 <memset+0xa>
 8009c34:	4770      	bx	lr
 8009c36:	f803 1b01 	strb.w	r1, [r3], #1
 8009c3a:	e7f9      	b.n	8009c30 <memset+0x4>

08009c3c <tanhf>:
 8009c3c:	b510      	push	{r4, lr}
 8009c3e:	ee10 4a10 	vmov	r4, s0
 8009c42:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8009c46:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8009c4a:	ed2d 8b02 	vpush	{d8}
 8009c4e:	eef0 7a40 	vmov.f32	s15, s0
 8009c52:	db0c      	blt.n	8009c6e <tanhf+0x32>
 8009c54:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009c58:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8009c5c:	2c00      	cmp	r4, #0
 8009c5e:	bfac      	ite	ge
 8009c60:	ee30 0a07 	vaddge.f32	s0, s0, s14
 8009c64:	ee30 0a47 	vsublt.f32	s0, s0, s14
 8009c68:	ecbd 8b02 	vpop	{d8}
 8009c6c:	bd10      	pop	{r4, pc}
 8009c6e:	4a1b      	ldr	r2, [pc, #108]	; (8009cdc <tanhf+0xa0>)
 8009c70:	4293      	cmp	r3, r2
 8009c72:	dc30      	bgt.n	8009cd6 <tanhf+0x9a>
 8009c74:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
 8009c78:	da06      	bge.n	8009c88 <tanhf+0x4c>
 8009c7a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8009c7e:	ee37 0a80 	vadd.f32	s0, s15, s0
 8009c82:	ee20 0a27 	vmul.f32	s0, s0, s15
 8009c86:	e7ef      	b.n	8009c68 <tanhf+0x2c>
 8009c88:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8009c8c:	eeb0 8a00 	vmov.f32	s16, #0	; 0x40000000  2.0
 8009c90:	db12      	blt.n	8009cb8 <tanhf+0x7c>
 8009c92:	f001 f835 	bl	800ad00 <fabsf>
 8009c96:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009c9a:	f000 ff05 	bl	800aaa8 <expm1f>
 8009c9e:	ee30 0a08 	vadd.f32	s0, s0, s16
 8009ca2:	eec8 7a00 	vdiv.f32	s15, s16, s0
 8009ca6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8009caa:	ee30 0a67 	vsub.f32	s0, s0, s15
 8009cae:	2c00      	cmp	r4, #0
 8009cb0:	bfb8      	it	lt
 8009cb2:	eeb1 0a40 	vneglt.f32	s0, s0
 8009cb6:	e7d7      	b.n	8009c68 <tanhf+0x2c>
 8009cb8:	f001 f822 	bl	800ad00 <fabsf>
 8009cbc:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
 8009cc0:	ee20 0a27 	vmul.f32	s0, s0, s15
 8009cc4:	f000 fef0 	bl	800aaa8 <expm1f>
 8009cc8:	ee70 7a08 	vadd.f32	s15, s0, s16
 8009ccc:	eeb1 7a40 	vneg.f32	s14, s0
 8009cd0:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8009cd4:	e7eb      	b.n	8009cae <tanhf+0x72>
 8009cd6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8009cda:	e7e8      	b.n	8009cae <tanhf+0x72>
 8009cdc:	41afffff 	.word	0x41afffff

08009ce0 <expf>:
 8009ce0:	b530      	push	{r4, r5, lr}
 8009ce2:	ed2d 8b02 	vpush	{d8}
 8009ce6:	4d35      	ldr	r5, [pc, #212]	; (8009dbc <expf+0xdc>)
 8009ce8:	b08b      	sub	sp, #44	; 0x2c
 8009cea:	eeb0 8a40 	vmov.f32	s16, s0
 8009cee:	f000 fa4b 	bl	800a188 <__ieee754_expf>
 8009cf2:	f995 3000 	ldrsb.w	r3, [r5]
 8009cf6:	3301      	adds	r3, #1
 8009cf8:	ee10 4a10 	vmov	r4, s0
 8009cfc:	d030      	beq.n	8009d60 <expf+0x80>
 8009cfe:	eeb0 0a48 	vmov.f32	s0, s16
 8009d02:	f001 f804 	bl	800ad0e <finitef>
 8009d06:	b358      	cbz	r0, 8009d60 <expf+0x80>
 8009d08:	eddf 7a2d 	vldr	s15, [pc, #180]	; 8009dc0 <expf+0xe0>
 8009d0c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8009d10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d14:	dd35      	ble.n	8009d82 <expf+0xa2>
 8009d16:	2303      	movs	r3, #3
 8009d18:	9300      	str	r3, [sp, #0]
 8009d1a:	4b2a      	ldr	r3, [pc, #168]	; (8009dc4 <expf+0xe4>)
 8009d1c:	9301      	str	r3, [sp, #4]
 8009d1e:	ee18 0a10 	vmov	r0, s16
 8009d22:	2300      	movs	r3, #0
 8009d24:	9308      	str	r3, [sp, #32]
 8009d26:	f7fa f871 	bl	8003e0c <__aeabi_f2d>
 8009d2a:	f995 3000 	ldrsb.w	r3, [r5]
 8009d2e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009d32:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009d36:	b9cb      	cbnz	r3, 8009d6c <expf+0x8c>
 8009d38:	4b23      	ldr	r3, [pc, #140]	; (8009dc8 <expf+0xe8>)
 8009d3a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8009d3e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009d42:	4668      	mov	r0, sp
 8009d44:	f000 fea5 	bl	800aa92 <matherr>
 8009d48:	b1b0      	cbz	r0, 8009d78 <expf+0x98>
 8009d4a:	9b08      	ldr	r3, [sp, #32]
 8009d4c:	b11b      	cbz	r3, 8009d56 <expf+0x76>
 8009d4e:	f7ff ff29 	bl	8009ba4 <__errno>
 8009d52:	9b08      	ldr	r3, [sp, #32]
 8009d54:	6003      	str	r3, [r0, #0]
 8009d56:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009d5a:	f7fa fb69 	bl	8004430 <__aeabi_d2f>
 8009d5e:	4604      	mov	r4, r0
 8009d60:	ee00 4a10 	vmov	s0, r4
 8009d64:	b00b      	add	sp, #44	; 0x2c
 8009d66:	ecbd 8b02 	vpop	{d8}
 8009d6a:	bd30      	pop	{r4, r5, pc}
 8009d6c:	4917      	ldr	r1, [pc, #92]	; (8009dcc <expf+0xec>)
 8009d6e:	2000      	movs	r0, #0
 8009d70:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009d74:	2b02      	cmp	r3, #2
 8009d76:	d1e4      	bne.n	8009d42 <expf+0x62>
 8009d78:	f7ff ff14 	bl	8009ba4 <__errno>
 8009d7c:	2322      	movs	r3, #34	; 0x22
 8009d7e:	6003      	str	r3, [r0, #0]
 8009d80:	e7e3      	b.n	8009d4a <expf+0x6a>
 8009d82:	eddf 7a13 	vldr	s15, [pc, #76]	; 8009dd0 <expf+0xf0>
 8009d86:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8009d8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d8e:	d5e7      	bpl.n	8009d60 <expf+0x80>
 8009d90:	2304      	movs	r3, #4
 8009d92:	9300      	str	r3, [sp, #0]
 8009d94:	4b0b      	ldr	r3, [pc, #44]	; (8009dc4 <expf+0xe4>)
 8009d96:	9301      	str	r3, [sp, #4]
 8009d98:	ee18 0a10 	vmov	r0, s16
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	9308      	str	r3, [sp, #32]
 8009da0:	f7fa f834 	bl	8003e0c <__aeabi_f2d>
 8009da4:	2300      	movs	r3, #0
 8009da6:	2200      	movs	r2, #0
 8009da8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009dac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009db0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009db4:	f995 3000 	ldrsb.w	r3, [r5]
 8009db8:	e7dc      	b.n	8009d74 <expf+0x94>
 8009dba:	bf00      	nop
 8009dbc:	200004ec 	.word	0x200004ec
 8009dc0:	42b17180 	.word	0x42b17180
 8009dc4:	08070580 	.word	0x08070580
 8009dc8:	47efffff 	.word	0x47efffff
 8009dcc:	7ff00000 	.word	0x7ff00000
 8009dd0:	c2cff1b5 	.word	0xc2cff1b5

08009dd4 <logf>:
 8009dd4:	b510      	push	{r4, lr}
 8009dd6:	ed2d 8b02 	vpush	{d8}
 8009dda:	b08a      	sub	sp, #40	; 0x28
 8009ddc:	eeb0 8a40 	vmov.f32	s16, s0
 8009de0:	f000 faa6 	bl	800a330 <__ieee754_logf>
 8009de4:	4b31      	ldr	r3, [pc, #196]	; (8009eac <logf+0xd8>)
 8009de6:	f993 4000 	ldrsb.w	r4, [r3]
 8009dea:	1c63      	adds	r3, r4, #1
 8009dec:	d059      	beq.n	8009ea2 <logf+0xce>
 8009dee:	eeb4 8a48 	vcmp.f32	s16, s16
 8009df2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009df6:	d654      	bvs.n	8009ea2 <logf+0xce>
 8009df8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8009dfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e00:	dc4f      	bgt.n	8009ea2 <logf+0xce>
 8009e02:	4b2b      	ldr	r3, [pc, #172]	; (8009eb0 <logf+0xdc>)
 8009e04:	9301      	str	r3, [sp, #4]
 8009e06:	ee18 0a10 	vmov	r0, s16
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	9308      	str	r3, [sp, #32]
 8009e0e:	f7f9 fffd 	bl	8003e0c <__aeabi_f2d>
 8009e12:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009e16:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009e1a:	b994      	cbnz	r4, 8009e42 <logf+0x6e>
 8009e1c:	4b25      	ldr	r3, [pc, #148]	; (8009eb4 <logf+0xe0>)
 8009e1e:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8009e22:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8009e26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e2a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009e2e:	d025      	beq.n	8009e7c <logf+0xa8>
 8009e30:	2301      	movs	r3, #1
 8009e32:	2c02      	cmp	r4, #2
 8009e34:	9300      	str	r3, [sp, #0]
 8009e36:	d116      	bne.n	8009e66 <logf+0x92>
 8009e38:	f7ff feb4 	bl	8009ba4 <__errno>
 8009e3c:	2321      	movs	r3, #33	; 0x21
 8009e3e:	6003      	str	r3, [r0, #0]
 8009e40:	e016      	b.n	8009e70 <logf+0x9c>
 8009e42:	4b1d      	ldr	r3, [pc, #116]	; (8009eb8 <logf+0xe4>)
 8009e44:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8009e48:	2200      	movs	r2, #0
 8009e4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e4e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009e52:	d1ed      	bne.n	8009e30 <logf+0x5c>
 8009e54:	2302      	movs	r3, #2
 8009e56:	429c      	cmp	r4, r3
 8009e58:	9300      	str	r3, [sp, #0]
 8009e5a:	d111      	bne.n	8009e80 <logf+0xac>
 8009e5c:	f7ff fea2 	bl	8009ba4 <__errno>
 8009e60:	2322      	movs	r3, #34	; 0x22
 8009e62:	6003      	str	r3, [r0, #0]
 8009e64:	e011      	b.n	8009e8a <logf+0xb6>
 8009e66:	4668      	mov	r0, sp
 8009e68:	f000 fe13 	bl	800aa92 <matherr>
 8009e6c:	2800      	cmp	r0, #0
 8009e6e:	d0e3      	beq.n	8009e38 <logf+0x64>
 8009e70:	4812      	ldr	r0, [pc, #72]	; (8009ebc <logf+0xe8>)
 8009e72:	f000 fe11 	bl	800aa98 <nan>
 8009e76:	ed8d 0b06 	vstr	d0, [sp, #24]
 8009e7a:	e006      	b.n	8009e8a <logf+0xb6>
 8009e7c:	2302      	movs	r3, #2
 8009e7e:	9300      	str	r3, [sp, #0]
 8009e80:	4668      	mov	r0, sp
 8009e82:	f000 fe06 	bl	800aa92 <matherr>
 8009e86:	2800      	cmp	r0, #0
 8009e88:	d0e8      	beq.n	8009e5c <logf+0x88>
 8009e8a:	9b08      	ldr	r3, [sp, #32]
 8009e8c:	b11b      	cbz	r3, 8009e96 <logf+0xc2>
 8009e8e:	f7ff fe89 	bl	8009ba4 <__errno>
 8009e92:	9b08      	ldr	r3, [sp, #32]
 8009e94:	6003      	str	r3, [r0, #0]
 8009e96:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009e9a:	f7fa fac9 	bl	8004430 <__aeabi_d2f>
 8009e9e:	ee00 0a10 	vmov	s0, r0
 8009ea2:	b00a      	add	sp, #40	; 0x28
 8009ea4:	ecbd 8b02 	vpop	{d8}
 8009ea8:	bd10      	pop	{r4, pc}
 8009eaa:	bf00      	nop
 8009eac:	200004ec 	.word	0x200004ec
 8009eb0:	08070585 	.word	0x08070585
 8009eb4:	c7efffff 	.word	0xc7efffff
 8009eb8:	fff00000 	.word	0xfff00000
 8009ebc:	08070589 	.word	0x08070589

08009ec0 <powf>:
 8009ec0:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 8009ec4:	ed2d 8b04 	vpush	{d8-d9}
 8009ec8:	4ca7      	ldr	r4, [pc, #668]	; (800a168 <powf+0x2a8>)
 8009eca:	b08a      	sub	sp, #40	; 0x28
 8009ecc:	eef0 8a40 	vmov.f32	s17, s0
 8009ed0:	eeb0 8a60 	vmov.f32	s16, s1
 8009ed4:	f000 fb1a 	bl	800a50c <__ieee754_powf>
 8009ed8:	f994 5000 	ldrsb.w	r5, [r4]
 8009edc:	1c6b      	adds	r3, r5, #1
 8009ede:	eeb0 9a40 	vmov.f32	s18, s0
 8009ee2:	4626      	mov	r6, r4
 8009ee4:	d05f      	beq.n	8009fa6 <powf+0xe6>
 8009ee6:	eeb4 8a48 	vcmp.f32	s16, s16
 8009eea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009eee:	d65a      	bvs.n	8009fa6 <powf+0xe6>
 8009ef0:	eef4 8a68 	vcmp.f32	s17, s17
 8009ef4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ef8:	d721      	bvc.n	8009f3e <powf+0x7e>
 8009efa:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8009efe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f02:	d150      	bne.n	8009fa6 <powf+0xe6>
 8009f04:	2301      	movs	r3, #1
 8009f06:	9300      	str	r3, [sp, #0]
 8009f08:	4b98      	ldr	r3, [pc, #608]	; (800a16c <powf+0x2ac>)
 8009f0a:	9301      	str	r3, [sp, #4]
 8009f0c:	ee18 0a90 	vmov	r0, s17
 8009f10:	2300      	movs	r3, #0
 8009f12:	9308      	str	r3, [sp, #32]
 8009f14:	f7f9 ff7a 	bl	8003e0c <__aeabi_f2d>
 8009f18:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009f1c:	ee18 0a10 	vmov	r0, s16
 8009f20:	f7f9 ff74 	bl	8003e0c <__aeabi_f2d>
 8009f24:	4b92      	ldr	r3, [pc, #584]	; (800a170 <powf+0x2b0>)
 8009f26:	2200      	movs	r2, #0
 8009f28:	2d02      	cmp	r5, #2
 8009f2a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009f2e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009f32:	d032      	beq.n	8009f9a <powf+0xda>
 8009f34:	4668      	mov	r0, sp
 8009f36:	f000 fdac 	bl	800aa92 <matherr>
 8009f3a:	bb40      	cbnz	r0, 8009f8e <powf+0xce>
 8009f3c:	e065      	b.n	800a00a <powf+0x14a>
 8009f3e:	eddf 9a8d 	vldr	s19, [pc, #564]	; 800a174 <powf+0x2b4>
 8009f42:	eef4 8a69 	vcmp.f32	s17, s19
 8009f46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f4a:	d163      	bne.n	800a014 <powf+0x154>
 8009f4c:	eeb4 8a69 	vcmp.f32	s16, s19
 8009f50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f54:	d12e      	bne.n	8009fb4 <powf+0xf4>
 8009f56:	2301      	movs	r3, #1
 8009f58:	9300      	str	r3, [sp, #0]
 8009f5a:	4b84      	ldr	r3, [pc, #528]	; (800a16c <powf+0x2ac>)
 8009f5c:	9301      	str	r3, [sp, #4]
 8009f5e:	ee18 0a90 	vmov	r0, s17
 8009f62:	2300      	movs	r3, #0
 8009f64:	9308      	str	r3, [sp, #32]
 8009f66:	f7f9 ff51 	bl	8003e0c <__aeabi_f2d>
 8009f6a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009f6e:	ee18 0a10 	vmov	r0, s16
 8009f72:	f7f9 ff4b 	bl	8003e0c <__aeabi_f2d>
 8009f76:	2200      	movs	r2, #0
 8009f78:	2300      	movs	r3, #0
 8009f7a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009f7e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009f82:	2d00      	cmp	r5, #0
 8009f84:	d0d6      	beq.n	8009f34 <powf+0x74>
 8009f86:	4b7a      	ldr	r3, [pc, #488]	; (800a170 <powf+0x2b0>)
 8009f88:	2200      	movs	r2, #0
 8009f8a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009f8e:	9b08      	ldr	r3, [sp, #32]
 8009f90:	b11b      	cbz	r3, 8009f9a <powf+0xda>
 8009f92:	f7ff fe07 	bl	8009ba4 <__errno>
 8009f96:	9b08      	ldr	r3, [sp, #32]
 8009f98:	6003      	str	r3, [r0, #0]
 8009f9a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009f9e:	f7fa fa47 	bl	8004430 <__aeabi_d2f>
 8009fa2:	ee09 0a10 	vmov	s18, r0
 8009fa6:	eeb0 0a49 	vmov.f32	s0, s18
 8009faa:	b00a      	add	sp, #40	; 0x28
 8009fac:	ecbd 8b04 	vpop	{d8-d9}
 8009fb0:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8009fb4:	eeb0 0a48 	vmov.f32	s0, s16
 8009fb8:	f000 fea9 	bl	800ad0e <finitef>
 8009fbc:	2800      	cmp	r0, #0
 8009fbe:	d0f2      	beq.n	8009fa6 <powf+0xe6>
 8009fc0:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8009fc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009fc8:	d5ed      	bpl.n	8009fa6 <powf+0xe6>
 8009fca:	2301      	movs	r3, #1
 8009fcc:	9300      	str	r3, [sp, #0]
 8009fce:	4b67      	ldr	r3, [pc, #412]	; (800a16c <powf+0x2ac>)
 8009fd0:	9301      	str	r3, [sp, #4]
 8009fd2:	ee18 0a90 	vmov	r0, s17
 8009fd6:	2300      	movs	r3, #0
 8009fd8:	9308      	str	r3, [sp, #32]
 8009fda:	f7f9 ff17 	bl	8003e0c <__aeabi_f2d>
 8009fde:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009fe2:	ee18 0a10 	vmov	r0, s16
 8009fe6:	f7f9 ff11 	bl	8003e0c <__aeabi_f2d>
 8009fea:	f994 3000 	ldrsb.w	r3, [r4]
 8009fee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009ff2:	b923      	cbnz	r3, 8009ffe <powf+0x13e>
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	2300      	movs	r3, #0
 8009ff8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009ffc:	e79a      	b.n	8009f34 <powf+0x74>
 8009ffe:	495e      	ldr	r1, [pc, #376]	; (800a178 <powf+0x2b8>)
 800a000:	2000      	movs	r0, #0
 800a002:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a006:	2b02      	cmp	r3, #2
 800a008:	d194      	bne.n	8009f34 <powf+0x74>
 800a00a:	f7ff fdcb 	bl	8009ba4 <__errno>
 800a00e:	2321      	movs	r3, #33	; 0x21
 800a010:	6003      	str	r3, [r0, #0]
 800a012:	e7bc      	b.n	8009f8e <powf+0xce>
 800a014:	f000 fe7b 	bl	800ad0e <finitef>
 800a018:	4605      	mov	r5, r0
 800a01a:	2800      	cmp	r0, #0
 800a01c:	d173      	bne.n	800a106 <powf+0x246>
 800a01e:	eeb0 0a68 	vmov.f32	s0, s17
 800a022:	f000 fe74 	bl	800ad0e <finitef>
 800a026:	2800      	cmp	r0, #0
 800a028:	d06d      	beq.n	800a106 <powf+0x246>
 800a02a:	eeb0 0a48 	vmov.f32	s0, s16
 800a02e:	f000 fe6e 	bl	800ad0e <finitef>
 800a032:	2800      	cmp	r0, #0
 800a034:	d067      	beq.n	800a106 <powf+0x246>
 800a036:	ee18 0a90 	vmov	r0, s17
 800a03a:	f7f9 fee7 	bl	8003e0c <__aeabi_f2d>
 800a03e:	4680      	mov	r8, r0
 800a040:	ee18 0a10 	vmov	r0, s16
 800a044:	4689      	mov	r9, r1
 800a046:	f7f9 fee1 	bl	8003e0c <__aeabi_f2d>
 800a04a:	eeb4 9a49 	vcmp.f32	s18, s18
 800a04e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a052:	f994 4000 	ldrsb.w	r4, [r4]
 800a056:	4b45      	ldr	r3, [pc, #276]	; (800a16c <powf+0x2ac>)
 800a058:	d713      	bvc.n	800a082 <powf+0x1c2>
 800a05a:	2201      	movs	r2, #1
 800a05c:	e9cd 2300 	strd	r2, r3, [sp]
 800a060:	9508      	str	r5, [sp, #32]
 800a062:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800a066:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a06a:	2c00      	cmp	r4, #0
 800a06c:	d0c2      	beq.n	8009ff4 <powf+0x134>
 800a06e:	eec9 7aa9 	vdiv.f32	s15, s19, s19
 800a072:	ee17 0a90 	vmov	r0, s15
 800a076:	f7f9 fec9 	bl	8003e0c <__aeabi_f2d>
 800a07a:	2c02      	cmp	r4, #2
 800a07c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a080:	e7c2      	b.n	800a008 <powf+0x148>
 800a082:	2203      	movs	r2, #3
 800a084:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800a088:	e9cd 2300 	strd	r2, r3, [sp]
 800a08c:	9508      	str	r5, [sp, #32]
 800a08e:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800a092:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a096:	ee28 8a27 	vmul.f32	s16, s16, s15
 800a09a:	b9fc      	cbnz	r4, 800a0dc <powf+0x21c>
 800a09c:	4b37      	ldr	r3, [pc, #220]	; (800a17c <powf+0x2bc>)
 800a09e:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 800a0a2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800a0a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0aa:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a0ae:	d553      	bpl.n	800a158 <powf+0x298>
 800a0b0:	eeb0 0a48 	vmov.f32	s0, s16
 800a0b4:	f000 fe3c 	bl	800ad30 <rintf>
 800a0b8:	eeb4 0a48 	vcmp.f32	s0, s16
 800a0bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0c0:	d004      	beq.n	800a0cc <powf+0x20c>
 800a0c2:	4b2f      	ldr	r3, [pc, #188]	; (800a180 <powf+0x2c0>)
 800a0c4:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800a0c8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a0cc:	f996 3000 	ldrsb.w	r3, [r6]
 800a0d0:	2b02      	cmp	r3, #2
 800a0d2:	d141      	bne.n	800a158 <powf+0x298>
 800a0d4:	f7ff fd66 	bl	8009ba4 <__errno>
 800a0d8:	2322      	movs	r3, #34	; 0x22
 800a0da:	e799      	b.n	800a010 <powf+0x150>
 800a0dc:	4b29      	ldr	r3, [pc, #164]	; (800a184 <powf+0x2c4>)
 800a0de:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 800a0e2:	2200      	movs	r2, #0
 800a0e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0e8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a0ec:	d5ee      	bpl.n	800a0cc <powf+0x20c>
 800a0ee:	eeb0 0a48 	vmov.f32	s0, s16
 800a0f2:	f000 fe1d 	bl	800ad30 <rintf>
 800a0f6:	eeb4 0a48 	vcmp.f32	s0, s16
 800a0fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0fe:	d0e5      	beq.n	800a0cc <powf+0x20c>
 800a100:	2200      	movs	r2, #0
 800a102:	4b1d      	ldr	r3, [pc, #116]	; (800a178 <powf+0x2b8>)
 800a104:	e7e0      	b.n	800a0c8 <powf+0x208>
 800a106:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800a10a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a10e:	f47f af4a 	bne.w	8009fa6 <powf+0xe6>
 800a112:	eeb0 0a68 	vmov.f32	s0, s17
 800a116:	f000 fdfa 	bl	800ad0e <finitef>
 800a11a:	2800      	cmp	r0, #0
 800a11c:	f43f af43 	beq.w	8009fa6 <powf+0xe6>
 800a120:	eeb0 0a48 	vmov.f32	s0, s16
 800a124:	f000 fdf3 	bl	800ad0e <finitef>
 800a128:	2800      	cmp	r0, #0
 800a12a:	f43f af3c 	beq.w	8009fa6 <powf+0xe6>
 800a12e:	2304      	movs	r3, #4
 800a130:	9300      	str	r3, [sp, #0]
 800a132:	4b0e      	ldr	r3, [pc, #56]	; (800a16c <powf+0x2ac>)
 800a134:	9301      	str	r3, [sp, #4]
 800a136:	ee18 0a90 	vmov	r0, s17
 800a13a:	2300      	movs	r3, #0
 800a13c:	9308      	str	r3, [sp, #32]
 800a13e:	f7f9 fe65 	bl	8003e0c <__aeabi_f2d>
 800a142:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a146:	ee18 0a10 	vmov	r0, s16
 800a14a:	f7f9 fe5f 	bl	8003e0c <__aeabi_f2d>
 800a14e:	2200      	movs	r2, #0
 800a150:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a154:	2300      	movs	r3, #0
 800a156:	e7b7      	b.n	800a0c8 <powf+0x208>
 800a158:	4668      	mov	r0, sp
 800a15a:	f000 fc9a 	bl	800aa92 <matherr>
 800a15e:	2800      	cmp	r0, #0
 800a160:	f47f af15 	bne.w	8009f8e <powf+0xce>
 800a164:	e7b6      	b.n	800a0d4 <powf+0x214>
 800a166:	bf00      	nop
 800a168:	200004ec 	.word	0x200004ec
 800a16c:	0807058a 	.word	0x0807058a
 800a170:	3ff00000 	.word	0x3ff00000
 800a174:	00000000 	.word	0x00000000
 800a178:	fff00000 	.word	0xfff00000
 800a17c:	47efffff 	.word	0x47efffff
 800a180:	c7efffff 	.word	0xc7efffff
 800a184:	7ff00000 	.word	0x7ff00000

0800a188 <__ieee754_expf>:
 800a188:	ee10 2a10 	vmov	r2, s0
 800a18c:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800a190:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800a194:	d902      	bls.n	800a19c <__ieee754_expf+0x14>
 800a196:	ee30 0a00 	vadd.f32	s0, s0, s0
 800a19a:	4770      	bx	lr
 800a19c:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 800a1a0:	d106      	bne.n	800a1b0 <__ieee754_expf+0x28>
 800a1a2:	eddf 7a51 	vldr	s15, [pc, #324]	; 800a2e8 <__ieee754_expf+0x160>
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	bf18      	it	ne
 800a1aa:	eeb0 0a67 	vmovne.f32	s0, s15
 800a1ae:	4770      	bx	lr
 800a1b0:	484e      	ldr	r0, [pc, #312]	; (800a2ec <__ieee754_expf+0x164>)
 800a1b2:	4282      	cmp	r2, r0
 800a1b4:	dd04      	ble.n	800a1c0 <__ieee754_expf+0x38>
 800a1b6:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 800a2f0 <__ieee754_expf+0x168>
 800a1ba:	ee20 0a00 	vmul.f32	s0, s0, s0
 800a1be:	4770      	bx	lr
 800a1c0:	2a00      	cmp	r2, #0
 800a1c2:	da03      	bge.n	800a1cc <__ieee754_expf+0x44>
 800a1c4:	4a4b      	ldr	r2, [pc, #300]	; (800a2f4 <__ieee754_expf+0x16c>)
 800a1c6:	4291      	cmp	r1, r2
 800a1c8:	f200 808a 	bhi.w	800a2e0 <__ieee754_expf+0x158>
 800a1cc:	4a4a      	ldr	r2, [pc, #296]	; (800a2f8 <__ieee754_expf+0x170>)
 800a1ce:	4291      	cmp	r1, r2
 800a1d0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800a1d4:	d954      	bls.n	800a280 <__ieee754_expf+0xf8>
 800a1d6:	4a49      	ldr	r2, [pc, #292]	; (800a2fc <__ieee754_expf+0x174>)
 800a1d8:	4291      	cmp	r1, r2
 800a1da:	ea4f 0283 	mov.w	r2, r3, lsl #2
 800a1de:	d836      	bhi.n	800a24e <__ieee754_expf+0xc6>
 800a1e0:	4947      	ldr	r1, [pc, #284]	; (800a300 <__ieee754_expf+0x178>)
 800a1e2:	4411      	add	r1, r2
 800a1e4:	ed91 7a00 	vldr	s14, [r1]
 800a1e8:	4946      	ldr	r1, [pc, #280]	; (800a304 <__ieee754_expf+0x17c>)
 800a1ea:	440a      	add	r2, r1
 800a1ec:	edd2 7a00 	vldr	s15, [r2]
 800a1f0:	ee30 7a47 	vsub.f32	s14, s0, s14
 800a1f4:	f1c3 0201 	rsb	r2, r3, #1
 800a1f8:	1ad2      	subs	r2, r2, r3
 800a1fa:	ee37 0a67 	vsub.f32	s0, s14, s15
 800a1fe:	ee60 6a00 	vmul.f32	s13, s0, s0
 800a202:	eddf 5a41 	vldr	s11, [pc, #260]	; 800a308 <__ieee754_expf+0x180>
 800a206:	ed9f 5a41 	vldr	s10, [pc, #260]	; 800a30c <__ieee754_expf+0x184>
 800a20a:	eea6 5aa5 	vfma.f32	s10, s13, s11
 800a20e:	eddf 5a40 	vldr	s11, [pc, #256]	; 800a310 <__ieee754_expf+0x188>
 800a212:	eee5 5a26 	vfma.f32	s11, s10, s13
 800a216:	ed9f 5a3f 	vldr	s10, [pc, #252]	; 800a314 <__ieee754_expf+0x18c>
 800a21a:	eea5 5aa6 	vfma.f32	s10, s11, s13
 800a21e:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800a318 <__ieee754_expf+0x190>
 800a222:	eee5 5a26 	vfma.f32	s11, s10, s13
 800a226:	eeb0 5a40 	vmov.f32	s10, s0
 800a22a:	eea5 5ae6 	vfms.f32	s10, s11, s13
 800a22e:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800a232:	eef0 6a45 	vmov.f32	s13, s10
 800a236:	ee20 5a05 	vmul.f32	s10, s0, s10
 800a23a:	bb92      	cbnz	r2, 800a2a2 <__ieee754_expf+0x11a>
 800a23c:	ee76 6ae5 	vsub.f32	s13, s13, s11
 800a240:	eec5 7a26 	vdiv.f32	s15, s10, s13
 800a244:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800a248:	ee36 0a40 	vsub.f32	s0, s12, s0
 800a24c:	4770      	bx	lr
 800a24e:	4b33      	ldr	r3, [pc, #204]	; (800a31c <__ieee754_expf+0x194>)
 800a250:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800a320 <__ieee754_expf+0x198>
 800a254:	4413      	add	r3, r2
 800a256:	edd3 7a00 	vldr	s15, [r3]
 800a25a:	eee0 7a07 	vfma.f32	s15, s0, s14
 800a25e:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800a324 <__ieee754_expf+0x19c>
 800a262:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a266:	ee17 2a90 	vmov	r2, s15
 800a26a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a26e:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800a272:	eeb0 7a40 	vmov.f32	s14, s0
 800a276:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 800a328 <__ieee754_expf+0x1a0>
 800a27a:	ee67 7a80 	vmul.f32	s15, s15, s0
 800a27e:	e7bc      	b.n	800a1fa <__ieee754_expf+0x72>
 800a280:	f1b1 5f46 	cmp.w	r1, #830472192	; 0x31800000
 800a284:	d20b      	bcs.n	800a29e <__ieee754_expf+0x116>
 800a286:	eddf 6a1a 	vldr	s13, [pc, #104]	; 800a2f0 <__ieee754_expf+0x168>
 800a28a:	ee70 6a26 	vadd.f32	s13, s0, s13
 800a28e:	eef4 6ac6 	vcmpe.f32	s13, s12
 800a292:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a296:	dd02      	ble.n	800a29e <__ieee754_expf+0x116>
 800a298:	ee30 0a06 	vadd.f32	s0, s0, s12
 800a29c:	4770      	bx	lr
 800a29e:	2200      	movs	r2, #0
 800a2a0:	e7ad      	b.n	800a1fe <__ieee754_expf+0x76>
 800a2a2:	ee75 6ae6 	vsub.f32	s13, s11, s13
 800a2a6:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 800a2aa:	ee85 0a26 	vdiv.f32	s0, s10, s13
 800a2ae:	bfb8      	it	lt
 800a2b0:	3264      	addlt	r2, #100	; 0x64
 800a2b2:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800a2b6:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800a2ba:	ee76 7a40 	vsub.f32	s15, s12, s0
 800a2be:	ee17 3a90 	vmov	r3, s15
 800a2c2:	bfab      	itete	ge
 800a2c4:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 800a2c8:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 800a2cc:	ee00 3a10 	vmovge	s0, r3
 800a2d0:	eddf 7a16 	vldrlt	s15, [pc, #88]	; 800a32c <__ieee754_expf+0x1a4>
 800a2d4:	bfbc      	itt	lt
 800a2d6:	ee00 3a10 	vmovlt	s0, r3
 800a2da:	ee20 0a27 	vmullt.f32	s0, s0, s15
 800a2de:	4770      	bx	lr
 800a2e0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a2e8 <__ieee754_expf+0x160>
 800a2e4:	4770      	bx	lr
 800a2e6:	bf00      	nop
 800a2e8:	00000000 	.word	0x00000000
 800a2ec:	42b17217 	.word	0x42b17217
 800a2f0:	7149f2ca 	.word	0x7149f2ca
 800a2f4:	42cff1b5 	.word	0x42cff1b5
 800a2f8:	3eb17218 	.word	0x3eb17218
 800a2fc:	3f851591 	.word	0x3f851591
 800a300:	08070598 	.word	0x08070598
 800a304:	080705a0 	.word	0x080705a0
 800a308:	3331bb4c 	.word	0x3331bb4c
 800a30c:	b5ddea0e 	.word	0xb5ddea0e
 800a310:	388ab355 	.word	0x388ab355
 800a314:	bb360b61 	.word	0xbb360b61
 800a318:	3e2aaaab 	.word	0x3e2aaaab
 800a31c:	08070590 	.word	0x08070590
 800a320:	3fb8aa3b 	.word	0x3fb8aa3b
 800a324:	3f317180 	.word	0x3f317180
 800a328:	3717f7d1 	.word	0x3717f7d1
 800a32c:	0d800000 	.word	0x0d800000

0800a330 <__ieee754_logf>:
 800a330:	ee10 3a10 	vmov	r3, s0
 800a334:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800a338:	d106      	bne.n	800a348 <__ieee754_logf+0x18>
 800a33a:	ed9f 7a65 	vldr	s14, [pc, #404]	; 800a4d0 <__ieee754_logf+0x1a0>
 800a33e:	eddf 7a65 	vldr	s15, [pc, #404]	; 800a4d4 <__ieee754_logf+0x1a4>
 800a342:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800a346:	4770      	bx	lr
 800a348:	2b00      	cmp	r3, #0
 800a34a:	da02      	bge.n	800a352 <__ieee754_logf+0x22>
 800a34c:	ee30 7a40 	vsub.f32	s14, s0, s0
 800a350:	e7f5      	b.n	800a33e <__ieee754_logf+0xe>
 800a352:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a356:	db02      	blt.n	800a35e <__ieee754_logf+0x2e>
 800a358:	ee30 0a00 	vadd.f32	s0, s0, s0
 800a35c:	4770      	bx	lr
 800a35e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a362:	bfbf      	itttt	lt
 800a364:	eddf 7a5c 	vldrlt	s15, [pc, #368]	; 800a4d8 <__ieee754_logf+0x1a8>
 800a368:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800a36c:	f06f 0118 	mvnlt.w	r1, #24
 800a370:	ee17 3a90 	vmovlt	r3, s15
 800a374:	ea4f 52e3 	mov.w	r2, r3, asr #23
 800a378:	bfa8      	it	ge
 800a37a:	2100      	movge	r1, #0
 800a37c:	3a7f      	subs	r2, #127	; 0x7f
 800a37e:	440a      	add	r2, r1
 800a380:	4956      	ldr	r1, [pc, #344]	; (800a4dc <__ieee754_logf+0x1ac>)
 800a382:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800a386:	4419      	add	r1, r3
 800a388:	f401 0100 	and.w	r1, r1, #8388608	; 0x800000
 800a38c:	eb02 52d1 	add.w	r2, r2, r1, lsr #23
 800a390:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 800a394:	4319      	orrs	r1, r3
 800a396:	ee07 1a90 	vmov	s15, r1
 800a39a:	f103 010f 	add.w	r1, r3, #15
 800a39e:	f3c1 0116 	ubfx	r1, r1, #0, #23
 800a3a2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800a3a6:	290f      	cmp	r1, #15
 800a3a8:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800a3ac:	dc31      	bgt.n	800a412 <__ieee754_logf+0xe2>
 800a3ae:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800a3b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3b6:	d10f      	bne.n	800a3d8 <__ieee754_logf+0xa8>
 800a3b8:	2a00      	cmp	r2, #0
 800a3ba:	f000 8085 	beq.w	800a4c8 <__ieee754_logf+0x198>
 800a3be:	ee07 2a90 	vmov	s15, r2
 800a3c2:	ed9f 0a47 	vldr	s0, [pc, #284]	; 800a4e0 <__ieee754_logf+0x1b0>
 800a3c6:	ed9f 7a47 	vldr	s14, [pc, #284]	; 800a4e4 <__ieee754_logf+0x1b4>
 800a3ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a3ce:	ee27 0a80 	vmul.f32	s0, s15, s0
 800a3d2:	eea7 0a87 	vfma.f32	s0, s15, s14
 800a3d6:	4770      	bx	lr
 800a3d8:	eddf 7a43 	vldr	s15, [pc, #268]	; 800a4e8 <__ieee754_logf+0x1b8>
 800a3dc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800a3e0:	eea0 7a67 	vfms.f32	s14, s0, s15
 800a3e4:	ee60 7a00 	vmul.f32	s15, s0, s0
 800a3e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a3ec:	b912      	cbnz	r2, 800a3f4 <__ieee754_logf+0xc4>
 800a3ee:	ee30 0a47 	vsub.f32	s0, s0, s14
 800a3f2:	4770      	bx	lr
 800a3f4:	ee07 2a90 	vmov	s15, r2
 800a3f8:	eddf 6a39 	vldr	s13, [pc, #228]	; 800a4e0 <__ieee754_logf+0x1b0>
 800a3fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a400:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800a404:	ee37 0a40 	vsub.f32	s0, s14, s0
 800a408:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800a4e4 <__ieee754_logf+0x1b4>
 800a40c:	ee97 0a87 	vfnms.f32	s0, s15, s14
 800a410:	4770      	bx	lr
 800a412:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800a416:	ee70 7a27 	vadd.f32	s15, s0, s15
 800a41a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a4ec <__ieee754_logf+0x1bc>
 800a41e:	eddf 4a34 	vldr	s9, [pc, #208]	; 800a4f0 <__ieee754_logf+0x1c0>
 800a422:	4934      	ldr	r1, [pc, #208]	; (800a4f4 <__ieee754_logf+0x1c4>)
 800a424:	ee80 6a27 	vdiv.f32	s12, s0, s15
 800a428:	4419      	add	r1, r3
 800a42a:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 800a42e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800a432:	430b      	orrs	r3, r1
 800a434:	2b00      	cmp	r3, #0
 800a436:	ee07 2a90 	vmov	s15, r2
 800a43a:	ee26 5a06 	vmul.f32	s10, s12, s12
 800a43e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a442:	ee25 7a05 	vmul.f32	s14, s10, s10
 800a446:	eddf 7a2c 	vldr	s15, [pc, #176]	; 800a4f8 <__ieee754_logf+0x1c8>
 800a44a:	eee7 7a25 	vfma.f32	s15, s14, s11
 800a44e:	eddf 5a2b 	vldr	s11, [pc, #172]	; 800a4fc <__ieee754_logf+0x1cc>
 800a452:	eee7 5a87 	vfma.f32	s11, s15, s14
 800a456:	eddf 7a2a 	vldr	s15, [pc, #168]	; 800a500 <__ieee754_logf+0x1d0>
 800a45a:	eee7 7a24 	vfma.f32	s15, s14, s9
 800a45e:	eddf 4a29 	vldr	s9, [pc, #164]	; 800a504 <__ieee754_logf+0x1d4>
 800a462:	eee7 4a87 	vfma.f32	s9, s15, s14
 800a466:	eddf 7a28 	vldr	s15, [pc, #160]	; 800a508 <__ieee754_logf+0x1d8>
 800a46a:	eee4 7a87 	vfma.f32	s15, s9, s14
 800a46e:	ee67 7a85 	vmul.f32	s15, s15, s10
 800a472:	eee5 7a87 	vfma.f32	s15, s11, s14
 800a476:	dd1c      	ble.n	800a4b2 <__ieee754_logf+0x182>
 800a478:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800a47c:	ee20 7a07 	vmul.f32	s14, s0, s14
 800a480:	ee27 7a00 	vmul.f32	s14, s14, s0
 800a484:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a488:	ee67 7a86 	vmul.f32	s15, s15, s12
 800a48c:	b922      	cbnz	r2, 800a498 <__ieee754_logf+0x168>
 800a48e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a492:	ee30 0a67 	vsub.f32	s0, s0, s15
 800a496:	4770      	bx	lr
 800a498:	ed9f 6a11 	vldr	s12, [pc, #68]	; 800a4e0 <__ieee754_logf+0x1b0>
 800a49c:	eee6 7a86 	vfma.f32	s15, s13, s12
 800a4a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a4a4:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800a4a8:	eddf 7a0e 	vldr	s15, [pc, #56]	; 800a4e4 <__ieee754_logf+0x1b4>
 800a4ac:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 800a4b0:	4770      	bx	lr
 800a4b2:	ee70 7a67 	vsub.f32	s15, s0, s15
 800a4b6:	ee67 7a86 	vmul.f32	s15, s15, s12
 800a4ba:	2a00      	cmp	r2, #0
 800a4bc:	d0e9      	beq.n	800a492 <__ieee754_logf+0x162>
 800a4be:	ed9f 7a08 	vldr	s14, [pc, #32]	; 800a4e0 <__ieee754_logf+0x1b0>
 800a4c2:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800a4c6:	e7ed      	b.n	800a4a4 <__ieee754_logf+0x174>
 800a4c8:	ed9f 0a02 	vldr	s0, [pc, #8]	; 800a4d4 <__ieee754_logf+0x1a4>
 800a4cc:	4770      	bx	lr
 800a4ce:	bf00      	nop
 800a4d0:	cc000000 	.word	0xcc000000
 800a4d4:	00000000 	.word	0x00000000
 800a4d8:	4c000000 	.word	0x4c000000
 800a4dc:	004afb20 	.word	0x004afb20
 800a4e0:	3717f7d1 	.word	0x3717f7d1
 800a4e4:	3f317180 	.word	0x3f317180
 800a4e8:	3eaaaaab 	.word	0x3eaaaaab
 800a4ec:	3e1cd04f 	.word	0x3e1cd04f
 800a4f0:	3e178897 	.word	0x3e178897
 800a4f4:	ffcf5c30 	.word	0xffcf5c30
 800a4f8:	3e638e29 	.word	0x3e638e29
 800a4fc:	3ecccccd 	.word	0x3ecccccd
 800a500:	3e3a3325 	.word	0x3e3a3325
 800a504:	3e924925 	.word	0x3e924925
 800a508:	3f2aaaab 	.word	0x3f2aaaab

0800a50c <__ieee754_powf>:
 800a50c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a510:	ee10 5a90 	vmov	r5, s1
 800a514:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 800a518:	ed2d 8b02 	vpush	{d8}
 800a51c:	eeb0 8a40 	vmov.f32	s16, s0
 800a520:	eef0 8a60 	vmov.f32	s17, s1
 800a524:	f000 8293 	beq.w	800aa4e <__ieee754_powf+0x542>
 800a528:	ee10 8a10 	vmov	r8, s0
 800a52c:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 800a530:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800a534:	dc06      	bgt.n	800a544 <__ieee754_powf+0x38>
 800a536:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 800a53a:	dd0a      	ble.n	800a552 <__ieee754_powf+0x46>
 800a53c:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800a540:	f000 8285 	beq.w	800aa4e <__ieee754_powf+0x542>
 800a544:	ecbd 8b02 	vpop	{d8}
 800a548:	48d9      	ldr	r0, [pc, #868]	; (800a8b0 <__ieee754_powf+0x3a4>)
 800a54a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a54e:	f000 bbe9 	b.w	800ad24 <nanf>
 800a552:	f1b8 0f00 	cmp.w	r8, #0
 800a556:	da1d      	bge.n	800a594 <__ieee754_powf+0x88>
 800a558:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 800a55c:	da2c      	bge.n	800a5b8 <__ieee754_powf+0xac>
 800a55e:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800a562:	db30      	blt.n	800a5c6 <__ieee754_powf+0xba>
 800a564:	15fb      	asrs	r3, r7, #23
 800a566:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800a56a:	fa47 f603 	asr.w	r6, r7, r3
 800a56e:	fa06 f303 	lsl.w	r3, r6, r3
 800a572:	42bb      	cmp	r3, r7
 800a574:	d127      	bne.n	800a5c6 <__ieee754_powf+0xba>
 800a576:	f006 0601 	and.w	r6, r6, #1
 800a57a:	f1c6 0602 	rsb	r6, r6, #2
 800a57e:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800a582:	d122      	bne.n	800a5ca <__ieee754_powf+0xbe>
 800a584:	2d00      	cmp	r5, #0
 800a586:	f280 8268 	bge.w	800aa5a <__ieee754_powf+0x54e>
 800a58a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800a58e:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800a592:	e00d      	b.n	800a5b0 <__ieee754_powf+0xa4>
 800a594:	2600      	movs	r6, #0
 800a596:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 800a59a:	d1f0      	bne.n	800a57e <__ieee754_powf+0x72>
 800a59c:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800a5a0:	f000 8255 	beq.w	800aa4e <__ieee754_powf+0x542>
 800a5a4:	dd0a      	ble.n	800a5bc <__ieee754_powf+0xb0>
 800a5a6:	2d00      	cmp	r5, #0
 800a5a8:	f280 8254 	bge.w	800aa54 <__ieee754_powf+0x548>
 800a5ac:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 800a8b4 <__ieee754_powf+0x3a8>
 800a5b0:	ecbd 8b02 	vpop	{d8}
 800a5b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5b8:	2602      	movs	r6, #2
 800a5ba:	e7ec      	b.n	800a596 <__ieee754_powf+0x8a>
 800a5bc:	2d00      	cmp	r5, #0
 800a5be:	daf5      	bge.n	800a5ac <__ieee754_powf+0xa0>
 800a5c0:	eeb1 0a68 	vneg.f32	s0, s17
 800a5c4:	e7f4      	b.n	800a5b0 <__ieee754_powf+0xa4>
 800a5c6:	2600      	movs	r6, #0
 800a5c8:	e7d9      	b.n	800a57e <__ieee754_powf+0x72>
 800a5ca:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 800a5ce:	d102      	bne.n	800a5d6 <__ieee754_powf+0xca>
 800a5d0:	ee28 0a08 	vmul.f32	s0, s16, s16
 800a5d4:	e7ec      	b.n	800a5b0 <__ieee754_powf+0xa4>
 800a5d6:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 800a5da:	eeb0 0a48 	vmov.f32	s0, s16
 800a5de:	d108      	bne.n	800a5f2 <__ieee754_powf+0xe6>
 800a5e0:	f1b8 0f00 	cmp.w	r8, #0
 800a5e4:	db05      	blt.n	800a5f2 <__ieee754_powf+0xe6>
 800a5e6:	ecbd 8b02 	vpop	{d8}
 800a5ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a5ee:	f000 ba4d 	b.w	800aa8c <__ieee754_sqrtf>
 800a5f2:	f000 fb85 	bl	800ad00 <fabsf>
 800a5f6:	b124      	cbz	r4, 800a602 <__ieee754_powf+0xf6>
 800a5f8:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 800a5fc:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800a600:	d117      	bne.n	800a632 <__ieee754_powf+0x126>
 800a602:	2d00      	cmp	r5, #0
 800a604:	bfbc      	itt	lt
 800a606:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 800a60a:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800a60e:	f1b8 0f00 	cmp.w	r8, #0
 800a612:	dacd      	bge.n	800a5b0 <__ieee754_powf+0xa4>
 800a614:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 800a618:	ea54 0306 	orrs.w	r3, r4, r6
 800a61c:	d104      	bne.n	800a628 <__ieee754_powf+0x11c>
 800a61e:	ee70 7a40 	vsub.f32	s15, s0, s0
 800a622:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800a626:	e7c3      	b.n	800a5b0 <__ieee754_powf+0xa4>
 800a628:	2e01      	cmp	r6, #1
 800a62a:	d1c1      	bne.n	800a5b0 <__ieee754_powf+0xa4>
 800a62c:	eeb1 0a40 	vneg.f32	s0, s0
 800a630:	e7be      	b.n	800a5b0 <__ieee754_powf+0xa4>
 800a632:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 800a636:	3801      	subs	r0, #1
 800a638:	ea56 0300 	orrs.w	r3, r6, r0
 800a63c:	d104      	bne.n	800a648 <__ieee754_powf+0x13c>
 800a63e:	ee38 8a48 	vsub.f32	s16, s16, s16
 800a642:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800a646:	e7b3      	b.n	800a5b0 <__ieee754_powf+0xa4>
 800a648:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 800a64c:	dd6d      	ble.n	800a72a <__ieee754_powf+0x21e>
 800a64e:	4b9a      	ldr	r3, [pc, #616]	; (800a8b8 <__ieee754_powf+0x3ac>)
 800a650:	429c      	cmp	r4, r3
 800a652:	dc06      	bgt.n	800a662 <__ieee754_powf+0x156>
 800a654:	2d00      	cmp	r5, #0
 800a656:	daa9      	bge.n	800a5ac <__ieee754_powf+0xa0>
 800a658:	ed9f 0a98 	vldr	s0, [pc, #608]	; 800a8bc <__ieee754_powf+0x3b0>
 800a65c:	ee20 0a00 	vmul.f32	s0, s0, s0
 800a660:	e7a6      	b.n	800a5b0 <__ieee754_powf+0xa4>
 800a662:	4b97      	ldr	r3, [pc, #604]	; (800a8c0 <__ieee754_powf+0x3b4>)
 800a664:	429c      	cmp	r4, r3
 800a666:	dd02      	ble.n	800a66e <__ieee754_powf+0x162>
 800a668:	2d00      	cmp	r5, #0
 800a66a:	dcf5      	bgt.n	800a658 <__ieee754_powf+0x14c>
 800a66c:	e79e      	b.n	800a5ac <__ieee754_powf+0xa0>
 800a66e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800a672:	ee30 0a67 	vsub.f32	s0, s0, s15
 800a676:	ed9f 7a93 	vldr	s14, [pc, #588]	; 800a8c4 <__ieee754_powf+0x3b8>
 800a67a:	eef1 6a40 	vneg.f32	s13, s0
 800a67e:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800a682:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a686:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800a68a:	eee7 7a40 	vfms.f32	s15, s14, s0
 800a68e:	ee60 0a00 	vmul.f32	s1, s0, s0
 800a692:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 800a8c8 <__ieee754_powf+0x3bc>
 800a696:	ee67 0aa0 	vmul.f32	s1, s15, s1
 800a69a:	eddf 7a8c 	vldr	s15, [pc, #560]	; 800a8cc <__ieee754_powf+0x3c0>
 800a69e:	ee67 7ae0 	vnmul.f32	s15, s15, s1
 800a6a2:	eee0 7a07 	vfma.f32	s15, s0, s14
 800a6a6:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 800a8d0 <__ieee754_powf+0x3c4>
 800a6aa:	eeb0 6a67 	vmov.f32	s12, s15
 800a6ae:	eea0 6a07 	vfma.f32	s12, s0, s14
 800a6b2:	ee16 3a10 	vmov	r3, s12
 800a6b6:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800a6ba:	f023 030f 	bic.w	r3, r3, #15
 800a6be:	ee00 3a90 	vmov	s1, r3
 800a6c2:	eee6 0a87 	vfma.f32	s1, s13, s14
 800a6c6:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800a6ca:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 800a6ce:	f025 050f 	bic.w	r5, r5, #15
 800a6d2:	ee07 5a10 	vmov	s14, r5
 800a6d6:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800a6da:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800a6de:	ee07 3a90 	vmov	s15, r3
 800a6e2:	eee7 0a27 	vfma.f32	s1, s14, s15
 800a6e6:	3e01      	subs	r6, #1
 800a6e8:	ea56 0200 	orrs.w	r2, r6, r0
 800a6ec:	ee07 5a10 	vmov	s14, r5
 800a6f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a6f4:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800a6f8:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800a6fc:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800a700:	ee17 4a10 	vmov	r4, s14
 800a704:	bf08      	it	eq
 800a706:	eeb0 8a40 	vmoveq.f32	s16, s0
 800a70a:	2c00      	cmp	r4, #0
 800a70c:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800a710:	f340 8184 	ble.w	800aa1c <__ieee754_powf+0x510>
 800a714:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 800a718:	f340 80fc 	ble.w	800a914 <__ieee754_powf+0x408>
 800a71c:	eddf 7a67 	vldr	s15, [pc, #412]	; 800a8bc <__ieee754_powf+0x3b0>
 800a720:	ee28 0a27 	vmul.f32	s0, s16, s15
 800a724:	ee20 0a27 	vmul.f32	s0, s0, s15
 800a728:	e742      	b.n	800a5b0 <__ieee754_powf+0xa4>
 800a72a:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
 800a72e:	bfbf      	itttt	lt
 800a730:	eddf 7a68 	vldrlt	s15, [pc, #416]	; 800a8d4 <__ieee754_powf+0x3c8>
 800a734:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800a738:	f06f 0217 	mvnlt.w	r2, #23
 800a73c:	ee17 4a90 	vmovlt	r4, s15
 800a740:	ea4f 53e4 	mov.w	r3, r4, asr #23
 800a744:	bfa8      	it	ge
 800a746:	2200      	movge	r2, #0
 800a748:	3b7f      	subs	r3, #127	; 0x7f
 800a74a:	4413      	add	r3, r2
 800a74c:	4a62      	ldr	r2, [pc, #392]	; (800a8d8 <__ieee754_powf+0x3cc>)
 800a74e:	f3c4 0416 	ubfx	r4, r4, #0, #23
 800a752:	4294      	cmp	r4, r2
 800a754:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 800a758:	dd06      	ble.n	800a768 <__ieee754_powf+0x25c>
 800a75a:	4a60      	ldr	r2, [pc, #384]	; (800a8dc <__ieee754_powf+0x3d0>)
 800a75c:	4294      	cmp	r4, r2
 800a75e:	f340 80a5 	ble.w	800a8ac <__ieee754_powf+0x3a0>
 800a762:	3301      	adds	r3, #1
 800a764:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800a768:	2400      	movs	r4, #0
 800a76a:	4a5d      	ldr	r2, [pc, #372]	; (800a8e0 <__ieee754_powf+0x3d4>)
 800a76c:	00a7      	lsls	r7, r4, #2
 800a76e:	443a      	add	r2, r7
 800a770:	ee07 1a90 	vmov	s15, r1
 800a774:	ed92 7a00 	vldr	s14, [r2]
 800a778:	4a5a      	ldr	r2, [pc, #360]	; (800a8e4 <__ieee754_powf+0x3d8>)
 800a77a:	ee37 6a27 	vadd.f32	s12, s14, s15
 800a77e:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 800a782:	eec5 6a06 	vdiv.f32	s13, s10, s12
 800a786:	1049      	asrs	r1, r1, #1
 800a788:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 800a78c:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 800a790:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 800a794:	ee77 5ac7 	vsub.f32	s11, s15, s14
 800a798:	ee06 1a10 	vmov	s12, r1
 800a79c:	ee65 4aa6 	vmul.f32	s9, s11, s13
 800a7a0:	ee14 ca90 	vmov	ip, s9
 800a7a4:	ea02 0c0c 	and.w	ip, r2, ip
 800a7a8:	ee05 ca10 	vmov	s10, ip
 800a7ac:	eeb1 4a45 	vneg.f32	s8, s10
 800a7b0:	eee4 5a06 	vfma.f32	s11, s8, s12
 800a7b4:	ee36 6a47 	vsub.f32	s12, s12, s14
 800a7b8:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 800a8e8 <__ieee754_powf+0x3dc>
 800a7bc:	ee37 6ac6 	vsub.f32	s12, s15, s12
 800a7c0:	ee64 7aa4 	vmul.f32	s15, s9, s9
 800a7c4:	eee4 5a06 	vfma.f32	s11, s8, s12
 800a7c8:	ee67 3aa7 	vmul.f32	s7, s15, s15
 800a7cc:	ee25 6aa6 	vmul.f32	s12, s11, s13
 800a7d0:	eddf 5a46 	vldr	s11, [pc, #280]	; 800a8ec <__ieee754_powf+0x3e0>
 800a7d4:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800a7d8:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a8f0 <__ieee754_powf+0x3e4>
 800a7dc:	eee7 5a27 	vfma.f32	s11, s14, s15
 800a7e0:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800a8c4 <__ieee754_powf+0x3b8>
 800a7e4:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800a7e8:	eddf 5a42 	vldr	s11, [pc, #264]	; 800a8f4 <__ieee754_powf+0x3e8>
 800a7ec:	eee7 5a27 	vfma.f32	s11, s14, s15
 800a7f0:	ed9f 7a41 	vldr	s14, [pc, #260]	; 800a8f8 <__ieee754_powf+0x3ec>
 800a7f4:	ee75 6a24 	vadd.f32	s13, s10, s9
 800a7f8:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800a7fc:	ee66 6a86 	vmul.f32	s13, s13, s12
 800a800:	eef0 5a08 	vmov.f32	s11, #8	; 0x40400000  3.0
 800a804:	eef0 7a65 	vmov.f32	s15, s11
 800a808:	eee3 6a87 	vfma.f32	s13, s7, s14
 800a80c:	eee5 7a05 	vfma.f32	s15, s10, s10
 800a810:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a814:	ee17 1a90 	vmov	r1, s15
 800a818:	4011      	ands	r1, r2
 800a81a:	ee07 1a90 	vmov	s15, r1
 800a81e:	ee37 7ae5 	vsub.f32	s14, s15, s11
 800a822:	eddf 5a36 	vldr	s11, [pc, #216]	; 800a8fc <__ieee754_powf+0x3f0>
 800a826:	eea4 7a05 	vfma.f32	s14, s8, s10
 800a82a:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800a82e:	ee27 7a24 	vmul.f32	s14, s14, s9
 800a832:	eea7 7a86 	vfma.f32	s14, s15, s12
 800a836:	eeb0 6a47 	vmov.f32	s12, s14
 800a83a:	eea5 6a27 	vfma.f32	s12, s10, s15
 800a83e:	ee16 1a10 	vmov	r1, s12
 800a842:	4011      	ands	r1, r2
 800a844:	ee06 1a90 	vmov	s13, r1
 800a848:	eee4 6a27 	vfma.f32	s13, s8, s15
 800a84c:	eddf 7a2c 	vldr	s15, [pc, #176]	; 800a900 <__ieee754_powf+0x3f4>
 800a850:	ee37 7a66 	vsub.f32	s14, s14, s13
 800a854:	ee06 1a10 	vmov	s12, r1
 800a858:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a85c:	eddf 7a29 	vldr	s15, [pc, #164]	; 800a904 <__ieee754_powf+0x3f8>
 800a860:	4929      	ldr	r1, [pc, #164]	; (800a908 <__ieee754_powf+0x3fc>)
 800a862:	eea6 7a27 	vfma.f32	s14, s12, s15
 800a866:	4439      	add	r1, r7
 800a868:	edd1 7a00 	vldr	s15, [r1]
 800a86c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a870:	ee07 3a90 	vmov	s15, r3
 800a874:	eef0 0a47 	vmov.f32	s1, s14
 800a878:	4b24      	ldr	r3, [pc, #144]	; (800a90c <__ieee754_powf+0x400>)
 800a87a:	eee6 0a25 	vfma.f32	s1, s12, s11
 800a87e:	443b      	add	r3, r7
 800a880:	ed93 5a00 	vldr	s10, [r3]
 800a884:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a888:	ee70 0a85 	vadd.f32	s1, s1, s10
 800a88c:	ee70 7aa6 	vadd.f32	s15, s1, s13
 800a890:	ee17 3a90 	vmov	r3, s15
 800a894:	4013      	ands	r3, r2
 800a896:	ee07 3a90 	vmov	s15, r3
 800a89a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a89e:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800a8a2:	eee6 7a65 	vfms.f32	s15, s12, s11
 800a8a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a8aa:	e70e      	b.n	800a6ca <__ieee754_powf+0x1be>
 800a8ac:	2401      	movs	r4, #1
 800a8ae:	e75c      	b.n	800a76a <__ieee754_powf+0x25e>
 800a8b0:	08070589 	.word	0x08070589
 800a8b4:	00000000 	.word	0x00000000
 800a8b8:	3f7ffff7 	.word	0x3f7ffff7
 800a8bc:	7149f2ca 	.word	0x7149f2ca
 800a8c0:	3f800007 	.word	0x3f800007
 800a8c4:	3eaaaaab 	.word	0x3eaaaaab
 800a8c8:	36eca570 	.word	0x36eca570
 800a8cc:	3fb8aa3b 	.word	0x3fb8aa3b
 800a8d0:	3fb8aa00 	.word	0x3fb8aa00
 800a8d4:	4b800000 	.word	0x4b800000
 800a8d8:	001cc471 	.word	0x001cc471
 800a8dc:	005db3d6 	.word	0x005db3d6
 800a8e0:	080705a8 	.word	0x080705a8
 800a8e4:	fffff000 	.word	0xfffff000
 800a8e8:	3e6c3255 	.word	0x3e6c3255
 800a8ec:	3e53f142 	.word	0x3e53f142
 800a8f0:	3e8ba305 	.word	0x3e8ba305
 800a8f4:	3edb6db7 	.word	0x3edb6db7
 800a8f8:	3f19999a 	.word	0x3f19999a
 800a8fc:	3f763800 	.word	0x3f763800
 800a900:	3f76384f 	.word	0x3f76384f
 800a904:	369dc3a0 	.word	0x369dc3a0
 800a908:	080705b8 	.word	0x080705b8
 800a90c:	080705b0 	.word	0x080705b0
 800a910:	3338aa3c 	.word	0x3338aa3c
 800a914:	f040 8092 	bne.w	800aa3c <__ieee754_powf+0x530>
 800a918:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 800a910 <__ieee754_powf+0x404>
 800a91c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a920:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800a924:	eef4 6ac7 	vcmpe.f32	s13, s14
 800a928:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a92c:	f73f aef6 	bgt.w	800a71c <__ieee754_powf+0x210>
 800a930:	15db      	asrs	r3, r3, #23
 800a932:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 800a936:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800a93a:	4103      	asrs	r3, r0
 800a93c:	4423      	add	r3, r4
 800a93e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800a942:	4947      	ldr	r1, [pc, #284]	; (800aa60 <__ieee754_powf+0x554>)
 800a944:	3a7f      	subs	r2, #127	; 0x7f
 800a946:	4111      	asrs	r1, r2
 800a948:	ea23 0101 	bic.w	r1, r3, r1
 800a94c:	f3c3 0016 	ubfx	r0, r3, #0, #23
 800a950:	ee07 1a10 	vmov	s14, r1
 800a954:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800a958:	f1c2 0217 	rsb	r2, r2, #23
 800a95c:	4110      	asrs	r0, r2
 800a95e:	2c00      	cmp	r4, #0
 800a960:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a964:	bfb8      	it	lt
 800a966:	4240      	neglt	r0, r0
 800a968:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800a96c:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800aa64 <__ieee754_powf+0x558>
 800a970:	ee17 3a10 	vmov	r3, s14
 800a974:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800a978:	f023 030f 	bic.w	r3, r3, #15
 800a97c:	ee07 3a10 	vmov	s14, r3
 800a980:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a984:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800a988:	eddf 7a37 	vldr	s15, [pc, #220]	; 800aa68 <__ieee754_powf+0x55c>
 800a98c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a990:	eee0 7aa6 	vfma.f32	s15, s1, s13
 800a994:	eddf 6a35 	vldr	s13, [pc, #212]	; 800aa6c <__ieee754_powf+0x560>
 800a998:	eeb0 0a67 	vmov.f32	s0, s15
 800a99c:	eea7 0a26 	vfma.f32	s0, s14, s13
 800a9a0:	eeb0 6a40 	vmov.f32	s12, s0
 800a9a4:	eea7 6a66 	vfms.f32	s12, s14, s13
 800a9a8:	ee20 7a00 	vmul.f32	s14, s0, s0
 800a9ac:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800a9b0:	eddf 6a2f 	vldr	s13, [pc, #188]	; 800aa70 <__ieee754_powf+0x564>
 800a9b4:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 800aa74 <__ieee754_powf+0x568>
 800a9b8:	eea7 6a26 	vfma.f32	s12, s14, s13
 800a9bc:	eddf 6a2e 	vldr	s13, [pc, #184]	; 800aa78 <__ieee754_powf+0x56c>
 800a9c0:	eee6 6a07 	vfma.f32	s13, s12, s14
 800a9c4:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 800aa7c <__ieee754_powf+0x570>
 800a9c8:	eea6 6a87 	vfma.f32	s12, s13, s14
 800a9cc:	eddf 6a2c 	vldr	s13, [pc, #176]	; 800aa80 <__ieee754_powf+0x574>
 800a9d0:	eee6 6a07 	vfma.f32	s13, s12, s14
 800a9d4:	eeb0 6a40 	vmov.f32	s12, s0
 800a9d8:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800a9dc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800a9e0:	eeb0 7a46 	vmov.f32	s14, s12
 800a9e4:	ee77 6a66 	vsub.f32	s13, s14, s13
 800a9e8:	ee20 6a06 	vmul.f32	s12, s0, s12
 800a9ec:	eee0 7a27 	vfma.f32	s15, s0, s15
 800a9f0:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800a9f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a9f8:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800a9fc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800aa00:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800aa04:	ee10 3a10 	vmov	r3, s0
 800aa08:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800aa0c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800aa10:	da1a      	bge.n	800aa48 <__ieee754_powf+0x53c>
 800aa12:	f000 f9e7 	bl	800ade4 <scalbnf>
 800aa16:	ee20 0a08 	vmul.f32	s0, s0, s16
 800aa1a:	e5c9      	b.n	800a5b0 <__ieee754_powf+0xa4>
 800aa1c:	4a19      	ldr	r2, [pc, #100]	; (800aa84 <__ieee754_powf+0x578>)
 800aa1e:	4293      	cmp	r3, r2
 800aa20:	dd02      	ble.n	800aa28 <__ieee754_powf+0x51c>
 800aa22:	eddf 7a19 	vldr	s15, [pc, #100]	; 800aa88 <__ieee754_powf+0x57c>
 800aa26:	e67b      	b.n	800a720 <__ieee754_powf+0x214>
 800aa28:	d108      	bne.n	800aa3c <__ieee754_powf+0x530>
 800aa2a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800aa2e:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800aa32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa36:	f6ff af7b 	blt.w	800a930 <__ieee754_powf+0x424>
 800aa3a:	e7f2      	b.n	800aa22 <__ieee754_powf+0x516>
 800aa3c:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 800aa40:	f73f af76 	bgt.w	800a930 <__ieee754_powf+0x424>
 800aa44:	2000      	movs	r0, #0
 800aa46:	e78f      	b.n	800a968 <__ieee754_powf+0x45c>
 800aa48:	ee00 3a10 	vmov	s0, r3
 800aa4c:	e7e3      	b.n	800aa16 <__ieee754_powf+0x50a>
 800aa4e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800aa52:	e5ad      	b.n	800a5b0 <__ieee754_powf+0xa4>
 800aa54:	eeb0 0a68 	vmov.f32	s0, s17
 800aa58:	e5aa      	b.n	800a5b0 <__ieee754_powf+0xa4>
 800aa5a:	eeb0 0a48 	vmov.f32	s0, s16
 800aa5e:	e5a7      	b.n	800a5b0 <__ieee754_powf+0xa4>
 800aa60:	007fffff 	.word	0x007fffff
 800aa64:	3f317218 	.word	0x3f317218
 800aa68:	35bfbe8c 	.word	0x35bfbe8c
 800aa6c:	3f317200 	.word	0x3f317200
 800aa70:	3331bb4c 	.word	0x3331bb4c
 800aa74:	b5ddea0e 	.word	0xb5ddea0e
 800aa78:	388ab355 	.word	0x388ab355
 800aa7c:	bb360b61 	.word	0xbb360b61
 800aa80:	3e2aaaab 	.word	0x3e2aaaab
 800aa84:	43160000 	.word	0x43160000
 800aa88:	0da24260 	.word	0x0da24260

0800aa8c <__ieee754_sqrtf>:
 800aa8c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800aa90:	4770      	bx	lr

0800aa92 <matherr>:
 800aa92:	2000      	movs	r0, #0
 800aa94:	4770      	bx	lr
	...

0800aa98 <nan>:
 800aa98:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800aaa0 <nan+0x8>
 800aa9c:	4770      	bx	lr
 800aa9e:	bf00      	nop
 800aaa0:	00000000 	.word	0x00000000
 800aaa4:	7ff80000 	.word	0x7ff80000

0800aaa8 <expm1f>:
 800aaa8:	ee10 2a10 	vmov	r2, s0
 800aaac:	4985      	ldr	r1, [pc, #532]	; (800acc4 <expm1f+0x21c>)
 800aaae:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800aab2:	428b      	cmp	r3, r1
 800aab4:	d924      	bls.n	800ab00 <expm1f+0x58>
 800aab6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800aaba:	d902      	bls.n	800aac2 <expm1f+0x1a>
 800aabc:	ee30 0a00 	vadd.f32	s0, s0, s0
 800aac0:	4770      	bx	lr
 800aac2:	d106      	bne.n	800aad2 <expm1f+0x2a>
 800aac4:	2a00      	cmp	r2, #0
 800aac6:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800aaca:	bfb8      	it	lt
 800aacc:	eeb0 0a67 	vmovlt.f32	s0, s15
 800aad0:	4770      	bx	lr
 800aad2:	2a00      	cmp	r2, #0
 800aad4:	db08      	blt.n	800aae8 <expm1f+0x40>
 800aad6:	4a7c      	ldr	r2, [pc, #496]	; (800acc8 <expm1f+0x220>)
 800aad8:	4293      	cmp	r3, r2
 800aada:	f240 80eb 	bls.w	800acb4 <expm1f+0x20c>
 800aade:	ed9f 0a7b 	vldr	s0, [pc, #492]	; 800accc <expm1f+0x224>
 800aae2:	ee20 0a00 	vmul.f32	s0, s0, s0
 800aae6:	4770      	bx	lr
 800aae8:	eddf 7a79 	vldr	s15, [pc, #484]	; 800acd0 <expm1f+0x228>
 800aaec:	ee70 7a27 	vadd.f32	s15, s0, s15
 800aaf0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800aaf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aaf8:	d554      	bpl.n	800aba4 <expm1f+0xfc>
 800aafa:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800aafe:	4770      	bx	lr
 800ab00:	4974      	ldr	r1, [pc, #464]	; (800acd4 <expm1f+0x22c>)
 800ab02:	428b      	cmp	r3, r1
 800ab04:	d96d      	bls.n	800abe2 <expm1f+0x13a>
 800ab06:	4974      	ldr	r1, [pc, #464]	; (800acd8 <expm1f+0x230>)
 800ab08:	428b      	cmp	r3, r1
 800ab0a:	d84b      	bhi.n	800aba4 <expm1f+0xfc>
 800ab0c:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800acdc <expm1f+0x234>
 800ab10:	2a00      	cmp	r2, #0
 800ab12:	bfa7      	ittee	ge
 800ab14:	ee30 7a47 	vsubge.f32	s14, s0, s14
 800ab18:	eddf 7a71 	vldrge	s15, [pc, #452]	; 800ace0 <expm1f+0x238>
 800ab1c:	eddf 7a71 	vldrlt	s15, [pc, #452]	; 800ace4 <expm1f+0x23c>
 800ab20:	ee30 7a07 	vaddlt.f32	s14, s0, s14
 800ab24:	bfac      	ite	ge
 800ab26:	2301      	movge	r3, #1
 800ab28:	f04f 33ff 	movlt.w	r3, #4294967295
 800ab2c:	ee37 0a67 	vsub.f32	s0, s14, s15
 800ab30:	ee37 7a40 	vsub.f32	s14, s14, s0
 800ab34:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ab38:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 800ab3c:	ee20 5a25 	vmul.f32	s10, s0, s11
 800ab40:	eddf 6a69 	vldr	s13, [pc, #420]	; 800ace8 <expm1f+0x240>
 800ab44:	ed9f 6a69 	vldr	s12, [pc, #420]	; 800acec <expm1f+0x244>
 800ab48:	ee20 7a05 	vmul.f32	s14, s0, s10
 800ab4c:	eea7 6a26 	vfma.f32	s12, s14, s13
 800ab50:	eddf 6a67 	vldr	s13, [pc, #412]	; 800acf0 <expm1f+0x248>
 800ab54:	eee6 6a07 	vfma.f32	s13, s12, s14
 800ab58:	ed9f 6a66 	vldr	s12, [pc, #408]	; 800acf4 <expm1f+0x24c>
 800ab5c:	eea6 6a87 	vfma.f32	s12, s13, s14
 800ab60:	eddf 6a65 	vldr	s13, [pc, #404]	; 800acf8 <expm1f+0x250>
 800ab64:	eee6 6a07 	vfma.f32	s13, s12, s14
 800ab68:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800ab6c:	eef0 4a46 	vmov.f32	s9, s12
 800ab70:	eee6 4a87 	vfma.f32	s9, s13, s14
 800ab74:	eef0 6a64 	vmov.f32	s13, s9
 800ab78:	eef0 4a08 	vmov.f32	s9, #8	; 0x40400000  3.0
 800ab7c:	eee5 4a66 	vfms.f32	s9, s10, s13
 800ab80:	ee36 5ae4 	vsub.f32	s10, s13, s9
 800ab84:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 800ab88:	eee0 6a64 	vfms.f32	s13, s0, s9
 800ab8c:	eef0 4a66 	vmov.f32	s9, s13
 800ab90:	eec5 6a24 	vdiv.f32	s13, s10, s9
 800ab94:	ee66 6a87 	vmul.f32	s13, s13, s14
 800ab98:	bb8b      	cbnz	r3, 800abfe <expm1f+0x156>
 800ab9a:	eef0 7a47 	vmov.f32	s15, s14
 800ab9e:	eed0 7a26 	vfnms.f32	s15, s0, s13
 800aba2:	e027      	b.n	800abf4 <expm1f+0x14c>
 800aba4:	eddf 7a55 	vldr	s15, [pc, #340]	; 800acfc <expm1f+0x254>
 800aba8:	2a00      	cmp	r2, #0
 800abaa:	ee20 7a27 	vmul.f32	s14, s0, s15
 800abae:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800abb2:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 800abb6:	bfa8      	it	ge
 800abb8:	eef0 7a66 	vmovge.f32	s15, s13
 800abbc:	ee77 7a87 	vadd.f32	s15, s15, s14
 800abc0:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800acdc <expm1f+0x234>
 800abc4:	eddf 6a46 	vldr	s13, [pc, #280]	; 800ace0 <expm1f+0x238>
 800abc8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800abcc:	ee17 3a90 	vmov	r3, s15
 800abd0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800abd4:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800abd8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800abdc:	eeb0 7a40 	vmov.f32	s14, s0
 800abe0:	e7a4      	b.n	800ab2c <expm1f+0x84>
 800abe2:	f1b3 5f4c 	cmp.w	r3, #855638016	; 0x33000000
 800abe6:	d208      	bcs.n	800abfa <expm1f+0x152>
 800abe8:	eddf 7a38 	vldr	s15, [pc, #224]	; 800accc <expm1f+0x224>
 800abec:	ee70 7a27 	vadd.f32	s15, s0, s15
 800abf0:	ee77 7ae7 	vsub.f32	s15, s15, s15
 800abf4:	ee30 0a67 	vsub.f32	s0, s0, s15
 800abf8:	4770      	bx	lr
 800abfa:	2300      	movs	r3, #0
 800abfc:	e79c      	b.n	800ab38 <expm1f+0x90>
 800abfe:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800ac02:	1c5a      	adds	r2, r3, #1
 800ac04:	eed6 7a80 	vfnms.f32	s15, s13, s0
 800ac08:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ac0c:	d106      	bne.n	800ac1c <expm1f+0x174>
 800ac0e:	ee70 7a67 	vsub.f32	s15, s0, s15
 800ac12:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 800ac16:	eea7 0aa5 	vfma.f32	s0, s15, s11
 800ac1a:	4770      	bx	lr
 800ac1c:	2b01      	cmp	r3, #1
 800ac1e:	d118      	bne.n	800ac52 <expm1f+0x1aa>
 800ac20:	eebd 7a00 	vmov.f32	s14, #208	; 0xbe800000 -0.250
 800ac24:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800ac28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac2c:	bf41      	itttt	mi
 800ac2e:	ee30 0a25 	vaddmi.f32	s0, s0, s11
 800ac32:	ee37 0ac0 	vsubmi.f32	s0, s15, s0
 800ac36:	eef8 7a00 	vmovmi.f32	s15, #128	; 0xc0000000 -2.0
 800ac3a:	ee20 0a27 	vmulmi.f32	s0, s0, s15
 800ac3e:	bf5f      	itttt	pl
 800ac40:	ee30 0a67 	vsubpl.f32	s0, s0, s15
 800ac44:	eef0 7a00 	vmovpl.f32	s15, #0	; 0x40000000  2.0
 800ac48:	eea0 6a27 	vfmapl.f32	s12, s0, s15
 800ac4c:	eeb0 0a46 	vmovpl.f32	s0, s12
 800ac50:	4770      	bx	lr
 800ac52:	1c5a      	adds	r2, r3, #1
 800ac54:	2a39      	cmp	r2, #57	; 0x39
 800ac56:	ea4f 51c3 	mov.w	r1, r3, lsl #23
 800ac5a:	d90b      	bls.n	800ac74 <expm1f+0x1cc>
 800ac5c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800ac60:	ee36 0a40 	vsub.f32	s0, s12, s0
 800ac64:	ee10 3a10 	vmov	r3, s0
 800ac68:	440b      	add	r3, r1
 800ac6a:	ee00 3a10 	vmov	s0, r3
 800ac6e:	ee30 0a46 	vsub.f32	s0, s0, s12
 800ac72:	4770      	bx	lr
 800ac74:	2b16      	cmp	r3, #22
 800ac76:	dc11      	bgt.n	800ac9c <expm1f+0x1f4>
 800ac78:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ac7c:	fa42 f303 	asr.w	r3, r2, r3
 800ac80:	f1c3 537e 	rsb	r3, r3, #1065353216	; 0x3f800000
 800ac84:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800ac88:	ee07 3a90 	vmov	s15, r3
 800ac8c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800ac90:	ee10 3a10 	vmov	r3, s0
 800ac94:	440b      	add	r3, r1
 800ac96:	ee00 3a10 	vmov	s0, r3
 800ac9a:	4770      	bx	lr
 800ac9c:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 800aca0:	05db      	lsls	r3, r3, #23
 800aca2:	ee07 3a10 	vmov	s14, r3
 800aca6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800acaa:	ee30 0a67 	vsub.f32	s0, s0, s15
 800acae:	ee30 0a06 	vadd.f32	s0, s0, s12
 800acb2:	e7ed      	b.n	800ac90 <expm1f+0x1e8>
 800acb4:	eddf 7a11 	vldr	s15, [pc, #68]	; 800acfc <expm1f+0x254>
 800acb8:	ee20 7a27 	vmul.f32	s14, s0, s15
 800acbc:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800acc0:	e77c      	b.n	800abbc <expm1f+0x114>
 800acc2:	bf00      	nop
 800acc4:	4195b843 	.word	0x4195b843
 800acc8:	42b17217 	.word	0x42b17217
 800accc:	7149f2ca 	.word	0x7149f2ca
 800acd0:	0da24260 	.word	0x0da24260
 800acd4:	3eb17218 	.word	0x3eb17218
 800acd8:	3f851591 	.word	0x3f851591
 800acdc:	3f317180 	.word	0x3f317180
 800ace0:	3717f7d1 	.word	0x3717f7d1
 800ace4:	b717f7d1 	.word	0xb717f7d1
 800ace8:	b457edbb 	.word	0xb457edbb
 800acec:	36867e54 	.word	0x36867e54
 800acf0:	b8a670cd 	.word	0xb8a670cd
 800acf4:	3ad00d01 	.word	0x3ad00d01
 800acf8:	bd088889 	.word	0xbd088889
 800acfc:	3fb8aa3b 	.word	0x3fb8aa3b

0800ad00 <fabsf>:
 800ad00:	ee10 3a10 	vmov	r3, s0
 800ad04:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ad08:	ee00 3a10 	vmov	s0, r3
 800ad0c:	4770      	bx	lr

0800ad0e <finitef>:
 800ad0e:	ee10 3a10 	vmov	r3, s0
 800ad12:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 800ad16:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800ad1a:	bfac      	ite	ge
 800ad1c:	2000      	movge	r0, #0
 800ad1e:	2001      	movlt	r0, #1
 800ad20:	4770      	bx	lr
	...

0800ad24 <nanf>:
 800ad24:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800ad2c <nanf+0x8>
 800ad28:	4770      	bx	lr
 800ad2a:	bf00      	nop
 800ad2c:	7fc00000 	.word	0x7fc00000

0800ad30 <rintf>:
 800ad30:	b513      	push	{r0, r1, r4, lr}
 800ad32:	ee10 1a10 	vmov	r1, s0
 800ad36:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ad3a:	0ddc      	lsrs	r4, r3, #23
 800ad3c:	3c7f      	subs	r4, #127	; 0x7f
 800ad3e:	2c16      	cmp	r4, #22
 800ad40:	dc46      	bgt.n	800add0 <rintf+0xa0>
 800ad42:	b32b      	cbz	r3, 800ad90 <rintf+0x60>
 800ad44:	2c00      	cmp	r4, #0
 800ad46:	ee10 2a10 	vmov	r2, s0
 800ad4a:	ea4f 70d1 	mov.w	r0, r1, lsr #31
 800ad4e:	da21      	bge.n	800ad94 <rintf+0x64>
 800ad50:	f3c1 0316 	ubfx	r3, r1, #0, #23
 800ad54:	425b      	negs	r3, r3
 800ad56:	4a21      	ldr	r2, [pc, #132]	; (800addc <rintf+0xac>)
 800ad58:	0a5b      	lsrs	r3, r3, #9
 800ad5a:	0d09      	lsrs	r1, r1, #20
 800ad5c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ad60:	0509      	lsls	r1, r1, #20
 800ad62:	430b      	orrs	r3, r1
 800ad64:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 800ad68:	ee07 3a90 	vmov	s15, r3
 800ad6c:	edd2 6a00 	vldr	s13, [r2]
 800ad70:	ee36 7aa7 	vadd.f32	s14, s13, s15
 800ad74:	ed8d 7a01 	vstr	s14, [sp, #4]
 800ad78:	eddd 7a01 	vldr	s15, [sp, #4]
 800ad7c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800ad80:	ee17 3a90 	vmov	r3, s15
 800ad84:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ad88:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 800ad8c:	ee00 3a10 	vmov	s0, r3
 800ad90:	b002      	add	sp, #8
 800ad92:	bd10      	pop	{r4, pc}
 800ad94:	4b12      	ldr	r3, [pc, #72]	; (800ade0 <rintf+0xb0>)
 800ad96:	4123      	asrs	r3, r4
 800ad98:	4219      	tst	r1, r3
 800ad9a:	d0f9      	beq.n	800ad90 <rintf+0x60>
 800ad9c:	085b      	lsrs	r3, r3, #1
 800ad9e:	4219      	tst	r1, r3
 800ada0:	d006      	beq.n	800adb0 <rintf+0x80>
 800ada2:	ea21 0203 	bic.w	r2, r1, r3
 800ada6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800adaa:	fa43 f404 	asr.w	r4, r3, r4
 800adae:	4322      	orrs	r2, r4
 800adb0:	4b0a      	ldr	r3, [pc, #40]	; (800addc <rintf+0xac>)
 800adb2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800adb6:	ed90 7a00 	vldr	s14, [r0]
 800adba:	ee07 2a90 	vmov	s15, r2
 800adbe:	ee77 7a27 	vadd.f32	s15, s14, s15
 800adc2:	edcd 7a01 	vstr	s15, [sp, #4]
 800adc6:	ed9d 0a01 	vldr	s0, [sp, #4]
 800adca:	ee30 0a47 	vsub.f32	s0, s0, s14
 800adce:	e7df      	b.n	800ad90 <rintf+0x60>
 800add0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800add4:	d3dc      	bcc.n	800ad90 <rintf+0x60>
 800add6:	ee30 0a00 	vadd.f32	s0, s0, s0
 800adda:	e7d9      	b.n	800ad90 <rintf+0x60>
 800addc:	080705c0 	.word	0x080705c0
 800ade0:	007fffff 	.word	0x007fffff

0800ade4 <scalbnf>:
 800ade4:	b508      	push	{r3, lr}
 800ade6:	ee10 2a10 	vmov	r2, s0
 800adea:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 800adee:	ed2d 8b02 	vpush	{d8}
 800adf2:	eef0 0a40 	vmov.f32	s1, s0
 800adf6:	d004      	beq.n	800ae02 <scalbnf+0x1e>
 800adf8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800adfc:	d306      	bcc.n	800ae0c <scalbnf+0x28>
 800adfe:	ee70 0a00 	vadd.f32	s1, s0, s0
 800ae02:	ecbd 8b02 	vpop	{d8}
 800ae06:	eeb0 0a60 	vmov.f32	s0, s1
 800ae0a:	bd08      	pop	{r3, pc}
 800ae0c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ae10:	d21c      	bcs.n	800ae4c <scalbnf+0x68>
 800ae12:	4b1f      	ldr	r3, [pc, #124]	; (800ae90 <scalbnf+0xac>)
 800ae14:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800ae94 <scalbnf+0xb0>
 800ae18:	4298      	cmp	r0, r3
 800ae1a:	ee60 0a27 	vmul.f32	s1, s0, s15
 800ae1e:	db10      	blt.n	800ae42 <scalbnf+0x5e>
 800ae20:	ee10 2a90 	vmov	r2, s1
 800ae24:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 800ae28:	3b19      	subs	r3, #25
 800ae2a:	4403      	add	r3, r0
 800ae2c:	2bfe      	cmp	r3, #254	; 0xfe
 800ae2e:	dd0f      	ble.n	800ae50 <scalbnf+0x6c>
 800ae30:	ed9f 8a19 	vldr	s16, [pc, #100]	; 800ae98 <scalbnf+0xb4>
 800ae34:	eeb0 0a48 	vmov.f32	s0, s16
 800ae38:	f000 f834 	bl	800aea4 <copysignf>
 800ae3c:	ee60 0a08 	vmul.f32	s1, s0, s16
 800ae40:	e7df      	b.n	800ae02 <scalbnf+0x1e>
 800ae42:	eddf 7a16 	vldr	s15, [pc, #88]	; 800ae9c <scalbnf+0xb8>
 800ae46:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800ae4a:	e7da      	b.n	800ae02 <scalbnf+0x1e>
 800ae4c:	0ddb      	lsrs	r3, r3, #23
 800ae4e:	e7ec      	b.n	800ae2a <scalbnf+0x46>
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	dd06      	ble.n	800ae62 <scalbnf+0x7e>
 800ae54:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800ae58:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800ae5c:	ee00 3a90 	vmov	s1, r3
 800ae60:	e7cf      	b.n	800ae02 <scalbnf+0x1e>
 800ae62:	f113 0f16 	cmn.w	r3, #22
 800ae66:	da06      	bge.n	800ae76 <scalbnf+0x92>
 800ae68:	f24c 3350 	movw	r3, #50000	; 0xc350
 800ae6c:	4298      	cmp	r0, r3
 800ae6e:	dcdf      	bgt.n	800ae30 <scalbnf+0x4c>
 800ae70:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 800ae9c <scalbnf+0xb8>
 800ae74:	e7de      	b.n	800ae34 <scalbnf+0x50>
 800ae76:	3319      	adds	r3, #25
 800ae78:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800ae7c:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800ae80:	eddf 7a07 	vldr	s15, [pc, #28]	; 800aea0 <scalbnf+0xbc>
 800ae84:	ee07 3a10 	vmov	s14, r3
 800ae88:	ee67 0a27 	vmul.f32	s1, s14, s15
 800ae8c:	e7b9      	b.n	800ae02 <scalbnf+0x1e>
 800ae8e:	bf00      	nop
 800ae90:	ffff3cb0 	.word	0xffff3cb0
 800ae94:	4c000000 	.word	0x4c000000
 800ae98:	7149f2ca 	.word	0x7149f2ca
 800ae9c:	0da24260 	.word	0x0da24260
 800aea0:	33000000 	.word	0x33000000

0800aea4 <copysignf>:
 800aea4:	ee10 3a10 	vmov	r3, s0
 800aea8:	ee10 2a90 	vmov	r2, s1
 800aeac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800aeb0:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800aeb4:	4313      	orrs	r3, r2
 800aeb6:	ee00 3a10 	vmov	s0, r3
 800aeba:	4770      	bx	lr

0800aebc <_init>:
 800aebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aebe:	bf00      	nop
 800aec0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aec2:	bc08      	pop	{r3}
 800aec4:	469e      	mov	lr, r3
 800aec6:	4770      	bx	lr

0800aec8 <_fini>:
 800aec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aeca:	bf00      	nop
 800aecc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aece:	bc08      	pop	{r3}
 800aed0:	469e      	mov	lr, r3
 800aed2:	4770      	bx	lr
