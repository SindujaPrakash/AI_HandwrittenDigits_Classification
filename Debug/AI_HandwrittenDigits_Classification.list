
AI_HandwrittenDigits_Classification.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000be84  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000657ac  0800c014  0800c014  0001c014  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080717c0  080717c0  000904f0  2**0
                  CONTENTS
  4 .ARM          00000008  080717c0  080717c0  000817c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080717c8  080717c8  000904f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080717c8  080717c8  000817c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080717cc  080717cc  000817cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000004f0  20000000  080717d0  00090000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000fc0c  200004f0  08071cc0  000904f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200100fc  08071cc0  000a00fc  2**0
                  ALLOC
 11 .ARM.attributes 00000034  00000000  00000000  000904f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000125e7  00000000  00000000  00090524  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000030bd  00000000  00000000  000a2b0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e88  00000000  00000000  000a5bc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d00  00000000  00000000  000a6a50  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024285  00000000  00000000  000a7750  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d6dc  00000000  00000000  000cb9d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d2091  00000000  00000000  000d90b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      00001b20  00000000  00000000  001ab142  2**0
                  CONTENTS, READONLY
 20 .iar.rtmodel  0000017e  00000000  00000000  001acc62  2**0
                  CONTENTS, READONLY
 21 .iar_vfe_header 0000001c  00000000  00000000  001acde0  2**2
                  CONTENTS, READONLY
 22 .debug_frame  0000764c  00000000  00000000  001acdfc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200004f0 	.word	0x200004f0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800bffc 	.word	0x0800bffc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200004f4 	.word	0x200004f4
 80001cc:	0800bffc 	.word	0x0800bffc

080001d0 <_ai_platform_get_io_buffers>:
 80001d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80001d4:	b081      	sub	sp, #4
 80001d6:	468b      	mov	fp, r1
 80001d8:	6801      	ldr	r1, [r0, #0]
 80001da:	680f      	ldr	r7, [r1, #0]
 80001dc:	8901      	ldrh	r1, [r0, #8]
 80001de:	2600      	movs	r6, #0
 80001e0:	46b0      	mov	r8, r6
 80001e2:	f04f 0904 	mov.w	r9, #4
 80001e6:	46b2      	mov	sl, r6
 80001e8:	b339      	cbz	r1, 800023a <_ai_platform_get_io_buffers+0x6a>
 80001ea:	4604      	mov	r4, r0
 80001ec:	6860      	ldr	r0, [r4, #4]
 80001ee:	683a      	ldr	r2, [r7, #0]
 80001f0:	6841      	ldr	r1, [r0, #4]
 80001f2:	6810      	ldr	r0, [r2, #0]
 80001f4:	eb01 050a 	add.w	r5, r1, sl
 80001f8:	f003 f9ae 	bl	8003558 <ai_array_to_buffer_fmt>
 80001fc:	6028      	str	r0, [r5, #0]
 80001fe:	2101      	movs	r1, #1
 8000200:	80a9      	strh	r1, [r5, #4]
 8000202:	1c76      	adds	r6, r6, #1
 8000204:	6938      	ldr	r0, [r7, #16]
 8000206:	80e8      	strh	r0, [r5, #6]
 8000208:	f108 0801 	add.w	r8, r8, #1
 800020c:	68f9      	ldr	r1, [r7, #12]
 800020e:	8129      	strh	r1, [r5, #8]
 8000210:	f10a 0a14 	add.w	sl, sl, #20
 8000214:	68b8      	ldr	r0, [r7, #8]
 8000216:	60e8      	str	r0, [r5, #12]
 8000218:	6839      	ldr	r1, [r7, #0]
 800021a:	6888      	ldr	r0, [r1, #8]
 800021c:	6128      	str	r0, [r5, #16]
 800021e:	6820      	ldr	r0, [r4, #0]
 8000220:	f850 7009 	ldr.w	r7, [r0, r9]
 8000224:	8920      	ldrh	r0, [r4, #8]
 8000226:	4580      	cmp	r8, r0
 8000228:	f109 0904 	add.w	r9, r9, #4
 800022c:	d3de      	bcc.n	80001ec <_ai_platform_get_io_buffers+0x1c>
 800022e:	b2b0      	uxth	r0, r6
 8000230:	b118      	cbz	r0, 800023a <_ai_platform_get_io_buffers+0x6a>
 8000232:	6860      	ldr	r0, [r4, #4]
 8000234:	6841      	ldr	r1, [r0, #4]
 8000236:	f8cb 1000 	str.w	r1, [fp]
 800023a:	b2b0      	uxth	r0, r6
 800023c:	b001      	add	sp, #4
 800023e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000242 <_platform_network_state_setup>:
 8000242:	b430      	push	{r4, r5}
 8000244:	6914      	ldr	r4, [r2, #16]
 8000246:	6a13      	ldr	r3, [r2, #32]
 8000248:	435c      	muls	r4, r3
 800024a:	6084      	str	r4, [r0, #8]
 800024c:	888d      	ldrh	r5, [r1, #4]
 800024e:	436c      	muls	r4, r5
 8000250:	60c4      	str	r4, [r0, #12]
 8000252:	6909      	ldr	r1, [r1, #16]
 8000254:	68c3      	ldr	r3, [r0, #12]
 8000256:	6041      	str	r1, [r0, #4]
 8000258:	4419      	add	r1, r3
 800025a:	6001      	str	r1, [r0, #0]
 800025c:	6812      	ldr	r2, [r2, #0]
 800025e:	6814      	ldr	r4, [r2, #0]
 8000260:	00a1      	lsls	r1, r4, #2
 8000262:	d407      	bmi.n	8000274 <_platform_network_state_setup+0x32>
 8000264:	6894      	ldr	r4, [r2, #8]
 8000266:	68d1      	ldr	r1, [r2, #12]
 8000268:	6843      	ldr	r3, [r0, #4]
 800026a:	1a64      	subs	r4, r4, r1
 800026c:	1919      	adds	r1, r3, r4
 800026e:	6091      	str	r1, [r2, #8]
 8000270:	6840      	ldr	r0, [r0, #4]
 8000272:	60d0      	str	r0, [r2, #12]
 8000274:	bc30      	pop	{r4, r5}
 8000276:	4770      	bx	lr

08000278 <_platform_network_state_update_input>:
 8000278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800027c:	4605      	mov	r5, r0
 800027e:	2600      	movs	r6, #0
 8000280:	6828      	ldr	r0, [r5, #0]
 8000282:	6801      	ldr	r1, [r0, #0]
 8000284:	8928      	ldrh	r0, [r5, #8]
 8000286:	2704      	movs	r7, #4
 8000288:	46b0      	mov	r8, r6
 800028a:	b338      	cbz	r0, 80002dc <_platform_network_state_update_input+0x64>
 800028c:	6868      	ldr	r0, [r5, #4]
 800028e:	6802      	ldr	r2, [r0, #0]
 8000290:	eb02 0408 	add.w	r4, r2, r8
 8000294:	680a      	ldr	r2, [r1, #0]
 8000296:	6813      	ldr	r3, [r2, #0]
 8000298:	6890      	ldr	r0, [r2, #8]
 800029a:	6861      	ldr	r1, [r4, #4]
 800029c:	009b      	lsls	r3, r3, #2
 800029e:	d503      	bpl.n	80002a8 <_platform_network_state_update_input+0x30>
 80002a0:	68a2      	ldr	r2, [r4, #8]
 80002a2:	f009 fe39 	bl	8009f18 <__aeabi_memcpy>
 80002a6:	e005      	b.n	80002b4 <_platform_network_state_update_input+0x3c>
 80002a8:	68d3      	ldr	r3, [r2, #12]
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	180b      	adds	r3, r1, r0
 80002ae:	6093      	str	r3, [r2, #8]
 80002b0:	6860      	ldr	r0, [r4, #4]
 80002b2:	60d0      	str	r0, [r2, #12]
 80002b4:	6860      	ldr	r0, [r4, #4]
 80002b6:	68a1      	ldr	r1, [r4, #8]
 80002b8:	4408      	add	r0, r1
 80002ba:	6821      	ldr	r1, [r4, #0]
 80002bc:	6060      	str	r0, [r4, #4]
 80002be:	4288      	cmp	r0, r1
 80002c0:	d302      	bcc.n	80002c8 <_platform_network_state_update_input+0x50>
 80002c2:	68e0      	ldr	r0, [r4, #12]
 80002c4:	4240      	negs	r0, r0
 80002c6:	4408      	add	r0, r1
 80002c8:	6060      	str	r0, [r4, #4]
 80002ca:	1c76      	adds	r6, r6, #1
 80002cc:	6828      	ldr	r0, [r5, #0]
 80002ce:	59c1      	ldr	r1, [r0, r7]
 80002d0:	8928      	ldrh	r0, [r5, #8]
 80002d2:	1d3f      	adds	r7, r7, #4
 80002d4:	4286      	cmp	r6, r0
 80002d6:	f108 0810 	add.w	r8, r8, #16
 80002da:	d3d7      	bcc.n	800028c <_platform_network_state_update_input+0x14>
 80002dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080002e0 <_platform_network_state_update_output>:
 80002e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80002e4:	4605      	mov	r5, r0
 80002e6:	2600      	movs	r6, #0
 80002e8:	6828      	ldr	r0, [r5, #0]
 80002ea:	6801      	ldr	r1, [r0, #0]
 80002ec:	8928      	ldrh	r0, [r5, #8]
 80002ee:	2704      	movs	r7, #4
 80002f0:	46b0      	mov	r8, r6
 80002f2:	b388      	cbz	r0, 8000358 <_platform_network_state_update_output+0x78>
 80002f4:	6868      	ldr	r0, [r5, #4]
 80002f6:	6809      	ldr	r1, [r1, #0]
 80002f8:	6802      	ldr	r2, [r0, #0]
 80002fa:	680b      	ldr	r3, [r1, #0]
 80002fc:	eb02 0408 	add.w	r4, r2, r8
 8000300:	009b      	lsls	r3, r3, #2
 8000302:	6860      	ldr	r0, [r4, #4]
 8000304:	68a2      	ldr	r2, [r4, #8]
 8000306:	d50e      	bpl.n	8000326 <_platform_network_state_update_output+0x46>
 8000308:	6889      	ldr	r1, [r1, #8]
 800030a:	f009 fe05 	bl	8009f18 <__aeabi_memcpy>
 800030e:	6862      	ldr	r2, [r4, #4]
 8000310:	68a0      	ldr	r0, [r4, #8]
 8000312:	6821      	ldr	r1, [r4, #0]
 8000314:	4410      	add	r0, r2
 8000316:	4288      	cmp	r0, r1
 8000318:	6060      	str	r0, [r4, #4]
 800031a:	d302      	bcc.n	8000322 <_platform_network_state_update_output+0x42>
 800031c:	68e0      	ldr	r0, [r4, #12]
 800031e:	4240      	negs	r0, r0
 8000320:	4408      	add	r0, r1
 8000322:	6060      	str	r0, [r4, #4]
 8000324:	e00f      	b.n	8000346 <_platform_network_state_update_output+0x66>
 8000326:	4410      	add	r0, r2
 8000328:	6822      	ldr	r2, [r4, #0]
 800032a:	6060      	str	r0, [r4, #4]
 800032c:	4290      	cmp	r0, r2
 800032e:	d302      	bcc.n	8000336 <_platform_network_state_update_output+0x56>
 8000330:	68e0      	ldr	r0, [r4, #12]
 8000332:	4240      	negs	r0, r0
 8000334:	4410      	add	r0, r2
 8000336:	6060      	str	r0, [r4, #4]
 8000338:	688a      	ldr	r2, [r1, #8]
 800033a:	68cb      	ldr	r3, [r1, #12]
 800033c:	1ad2      	subs	r2, r2, r3
 800033e:	4410      	add	r0, r2
 8000340:	6088      	str	r0, [r1, #8]
 8000342:	6862      	ldr	r2, [r4, #4]
 8000344:	60ca      	str	r2, [r1, #12]
 8000346:	1c76      	adds	r6, r6, #1
 8000348:	6828      	ldr	r0, [r5, #0]
 800034a:	59c1      	ldr	r1, [r0, r7]
 800034c:	8928      	ldrh	r0, [r5, #8]
 800034e:	1d3f      	adds	r7, r7, #4
 8000350:	4286      	cmp	r6, r0
 8000352:	f108 0810 	add.w	r8, r8, #16
 8000356:	d3cd      	bcc.n	80002f4 <_platform_network_state_update_output+0x14>
 8000358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800035c <_platform_network_io_bind>:
 800035c:	2800      	cmp	r0, #0
 800035e:	d100      	bne.n	8000362 <_platform_network_io_bind+0x6>
 8000360:	4770      	bx	lr
 8000362:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000366:	b081      	sub	sp, #4
 8000368:	2300      	movs	r3, #0
 800036a:	b405      	push	{r0, r2}
 800036c:	b081      	sub	sp, #4
 800036e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8000370:	8243      	strh	r3, [r0, #18]
 8000372:	9801      	ldr	r0, [sp, #4]
 8000374:	8203      	strh	r3, [r0, #16]
 8000376:	9b01      	ldr	r3, [sp, #4]
 8000378:	7a18      	ldrb	r0, [r3, #8]
 800037a:	f000 0003 	and.w	r0, r0, #3
 800037e:	2803      	cmp	r0, #3
 8000380:	d004      	beq.n	800038c <_platform_network_io_bind+0x30>
 8000382:	2230      	movs	r2, #48	; 0x30
 8000384:	2111      	movs	r1, #17
 8000386:	f103 000c 	add.w	r0, r3, #12
 800038a:	e0ce      	b.n	800052a <_platform_network_io_bind+0x1ce>
 800038c:	2900      	cmp	r1, #0
 800038e:	bf1c      	itt	ne
 8000390:	8910      	ldrhne	r0, [r2, #8]
 8000392:	2800      	cmpne	r0, #0
 8000394:	f000 80c3 	beq.w	800051e <_platform_network_io_bind+0x1c2>
 8000398:	6810      	ldr	r0, [r2, #0]
 800039a:	f8b1 a004 	ldrh.w	sl, [r1, #4]
 800039e:	6804      	ldr	r4, [r0, #0]
 80003a0:	9200      	str	r2, [sp, #0]
 80003a2:	2700      	movs	r7, #0
 80003a4:	2504      	movs	r5, #4
 80003a6:	46b9      	mov	r9, r7
 80003a8:	1d0e      	adds	r6, r1, #4
 80003aa:	9800      	ldr	r0, [sp, #0]
 80003ac:	8901      	ldrh	r1, [r0, #8]
 80003ae:	428f      	cmp	r7, r1
 80003b0:	f080 80b1 	bcs.w	8000516 <_platform_network_io_bind+0x1ba>
 80003b4:	6841      	ldr	r1, [r0, #4]
 80003b6:	680a      	ldr	r2, [r1, #0]
 80003b8:	eb02 0809 	add.w	r8, r2, r9
 80003bc:	2c00      	cmp	r4, #0
 80003be:	bf18      	it	ne
 80003c0:	f1b8 0f00 	cmpne.w	r8, #0
 80003c4:	f000 80ab 	beq.w	800051e <_platform_network_io_bind+0x1c2>
 80003c8:	6820      	ldr	r0, [r4, #0]
 80003ca:	8873      	ldrh	r3, [r6, #2]
 80003cc:	f8b6 c004 	ldrh.w	ip, [r6, #4]
 80003d0:	68b2      	ldr	r2, [r6, #8]
 80003d2:	6841      	ldr	r1, [r0, #4]
 80003d4:	fb03 fe0c 	mul.w	lr, r3, ip
 80003d8:	fb02 fe0e 	mul.w	lr, r2, lr
 80003dc:	4571      	cmp	r1, lr
 80003de:	f0c0 80a0 	bcc.w	8000522 <_platform_network_io_bind+0x1c6>
 80003e2:	f8d4 e010 	ldr.w	lr, [r4, #16]
 80003e6:	459e      	cmp	lr, r3
 80003e8:	bf04      	itt	eq
 80003ea:	68e3      	ldreq	r3, [r4, #12]
 80003ec:	4563      	cmpeq	r3, ip
 80003ee:	bf04      	itt	eq
 80003f0:	68a3      	ldreq	r3, [r4, #8]
 80003f2:	4293      	cmpeq	r3, r2
 80003f4:	f040 8095 	bne.w	8000522 <_platform_network_io_bind+0x1c6>
 80003f8:	6800      	ldr	r0, [r0, #0]
 80003fa:	f003 f985 	bl	8003708 <ai_array_get_byte_size>
 80003fe:	6921      	ldr	r1, [r4, #16]
 8000400:	6a22      	ldr	r2, [r4, #32]
 8000402:	4351      	muls	r1, r2
 8000404:	4288      	cmp	r0, r1
 8000406:	f0c0 808c 	bcc.w	8000522 <_platform_network_io_bind+0x1c6>
 800040a:	6820      	ldr	r0, [r4, #0]
 800040c:	6800      	ldr	r0, [r0, #0]
 800040e:	f003 f8a3 	bl	8003558 <ai_array_to_buffer_fmt>
 8000412:	f856 1c04 	ldr.w	r1, [r6, #-4]
 8000416:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 800041a:	f021 417e 	bic.w	r1, r1, #4261412864	; 0xfe000000
 800041e:	4288      	cmp	r0, r1
 8000420:	d115      	bne.n	800044e <_platform_network_io_bind+0xf2>
 8000422:	68f0      	ldr	r0, [r6, #12]
 8000424:	2800      	cmp	r0, #0
 8000426:	d07a      	beq.n	800051e <_platform_network_io_bind+0x1c2>
 8000428:	8830      	ldrh	r0, [r6, #0]
 800042a:	b190      	cbz	r0, 8000452 <_platform_network_io_bind+0xf6>
 800042c:	4550      	cmp	r0, sl
 800042e:	bf28      	it	cs
 8000430:	4682      	movcs	sl, r0
 8000432:	4622      	mov	r2, r4
 8000434:	1f31      	subs	r1, r6, #4
 8000436:	4640      	mov	r0, r8
 8000438:	f7ff ff03 	bl	8000242 <_platform_network_state_setup>
 800043c:	9800      	ldr	r0, [sp, #0]
 800043e:	6801      	ldr	r1, [r0, #0]
 8000440:	594c      	ldr	r4, [r1, r5]
 8000442:	1c7f      	adds	r7, r7, #1
 8000444:	3614      	adds	r6, #20
 8000446:	f109 0910 	add.w	r9, r9, #16
 800044a:	1d2d      	adds	r5, r5, #4
 800044c:	e7ad      	b.n	80003aa <_platform_network_io_bind+0x4e>
 800044e:	2219      	movs	r2, #25
 8000450:	e068      	b.n	8000524 <_platform_network_io_bind+0x1c8>
 8000452:	2221      	movs	r2, #33	; 0x21
 8000454:	e066      	b.n	8000524 <_platform_network_io_bind+0x1c8>
 8000456:	9901      	ldr	r1, [sp, #4]
 8000458:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 800045a:	320c      	adds	r2, #12
 800045c:	8911      	ldrh	r1, [r2, #8]
 800045e:	2900      	cmp	r1, #0
 8000460:	d073      	beq.n	800054a <_platform_network_io_bind+0x1ee>
 8000462:	6813      	ldr	r3, [r2, #0]
 8000464:	681c      	ldr	r4, [r3, #0]
 8000466:	9200      	str	r2, [sp, #0]
 8000468:	2700      	movs	r7, #0
 800046a:	2504      	movs	r5, #4
 800046c:	46b9      	mov	r9, r7
 800046e:	1d06      	adds	r6, r0, #4
 8000470:	9800      	ldr	r0, [sp, #0]
 8000472:	8901      	ldrh	r1, [r0, #8]
 8000474:	428f      	cmp	r7, r1
 8000476:	d25e      	bcs.n	8000536 <_platform_network_io_bind+0x1da>
 8000478:	6841      	ldr	r1, [r0, #4]
 800047a:	680a      	ldr	r2, [r1, #0]
 800047c:	eb02 0809 	add.w	r8, r2, r9
 8000480:	2c00      	cmp	r4, #0
 8000482:	bf18      	it	ne
 8000484:	f1b8 0f00 	cmpne.w	r8, #0
 8000488:	d05c      	beq.n	8000544 <_platform_network_io_bind+0x1e8>
 800048a:	6820      	ldr	r0, [r4, #0]
 800048c:	8873      	ldrh	r3, [r6, #2]
 800048e:	f8b6 c004 	ldrh.w	ip, [r6, #4]
 8000492:	68b2      	ldr	r2, [r6, #8]
 8000494:	6841      	ldr	r1, [r0, #4]
 8000496:	fb03 fe0c 	mul.w	lr, r3, ip
 800049a:	fb02 fe0e 	mul.w	lr, r2, lr
 800049e:	4571      	cmp	r1, lr
 80004a0:	d353      	bcc.n	800054a <_platform_network_io_bind+0x1ee>
 80004a2:	f8d4 e010 	ldr.w	lr, [r4, #16]
 80004a6:	459e      	cmp	lr, r3
 80004a8:	bf04      	itt	eq
 80004aa:	68e3      	ldreq	r3, [r4, #12]
 80004ac:	4563      	cmpeq	r3, ip
 80004ae:	bf04      	itt	eq
 80004b0:	68a3      	ldreq	r3, [r4, #8]
 80004b2:	4293      	cmpeq	r3, r2
 80004b4:	d149      	bne.n	800054a <_platform_network_io_bind+0x1ee>
 80004b6:	6800      	ldr	r0, [r0, #0]
 80004b8:	f003 f926 	bl	8003708 <ai_array_get_byte_size>
 80004bc:	6921      	ldr	r1, [r4, #16]
 80004be:	6a22      	ldr	r2, [r4, #32]
 80004c0:	4351      	muls	r1, r2
 80004c2:	4288      	cmp	r0, r1
 80004c4:	d341      	bcc.n	800054a <_platform_network_io_bind+0x1ee>
 80004c6:	6820      	ldr	r0, [r4, #0]
 80004c8:	6800      	ldr	r0, [r0, #0]
 80004ca:	f003 f845 	bl	8003558 <ai_array_to_buffer_fmt>
 80004ce:	f856 1c04 	ldr.w	r1, [r6, #-4]
 80004d2:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 80004d6:	f021 417e 	bic.w	r1, r1, #4261412864	; 0xfe000000
 80004da:	4288      	cmp	r0, r1
 80004dc:	d115      	bne.n	800050a <_platform_network_io_bind+0x1ae>
 80004de:	68f0      	ldr	r0, [r6, #12]
 80004e0:	2800      	cmp	r0, #0
 80004e2:	d02f      	beq.n	8000544 <_platform_network_io_bind+0x1e8>
 80004e4:	8830      	ldrh	r0, [r6, #0]
 80004e6:	b198      	cbz	r0, 8000510 <_platform_network_io_bind+0x1b4>
 80004e8:	4550      	cmp	r0, sl
 80004ea:	bf28      	it	cs
 80004ec:	4682      	movcs	sl, r0
 80004ee:	4622      	mov	r2, r4
 80004f0:	1f31      	subs	r1, r6, #4
 80004f2:	4640      	mov	r0, r8
 80004f4:	f7ff fea5 	bl	8000242 <_platform_network_state_setup>
 80004f8:	9800      	ldr	r0, [sp, #0]
 80004fa:	6801      	ldr	r1, [r0, #0]
 80004fc:	594c      	ldr	r4, [r1, r5]
 80004fe:	1c7f      	adds	r7, r7, #1
 8000500:	3614      	adds	r6, #20
 8000502:	f109 0910 	add.w	r9, r9, #16
 8000506:	1d2d      	adds	r5, r5, #4
 8000508:	e7b2      	b.n	8000470 <_platform_network_io_bind+0x114>
 800050a:	2219      	movs	r2, #25
 800050c:	2113      	movs	r1, #19
 800050e:	e00a      	b.n	8000526 <_platform_network_io_bind+0x1ca>
 8000510:	2221      	movs	r2, #33	; 0x21
 8000512:	2113      	movs	r1, #19
 8000514:	e007      	b.n	8000526 <_platform_network_io_bind+0x1ca>
 8000516:	9802      	ldr	r0, [sp, #8]
 8000518:	2800      	cmp	r0, #0
 800051a:	d19c      	bne.n	8000456 <_platform_network_io_bind+0xfa>
 800051c:	e00e      	b.n	800053c <_platform_network_io_bind+0x1e0>
 800051e:	2217      	movs	r2, #23
 8000520:	e000      	b.n	8000524 <_platform_network_io_bind+0x1c8>
 8000522:	2218      	movs	r2, #24
 8000524:	2112      	movs	r1, #18
 8000526:	9801      	ldr	r0, [sp, #4]
 8000528:	300c      	adds	r0, #12
 800052a:	f000 fa8e 	bl	8000a4a <core_set_error>
 800052e:	2000      	movs	r0, #0
 8000530:	b004      	add	sp, #16
 8000532:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000536:	9801      	ldr	r0, [sp, #4]
 8000538:	f8a0 a010 	strh.w	sl, [r0, #16]
 800053c:	2001      	movs	r0, #1
 800053e:	b004      	add	sp, #16
 8000540:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000544:	2217      	movs	r2, #23
 8000546:	2113      	movs	r1, #19
 8000548:	e7ed      	b.n	8000526 <_platform_network_io_bind+0x1ca>
 800054a:	2218      	movs	r2, #24
 800054c:	2113      	movs	r1, #19
 800054e:	e7ea      	b.n	8000526 <_platform_network_io_bind+0x1ca>

08000550 <ai_platform_runtime_get_revision>:
 8000550:	f8df 04a8 	ldr.w	r0, [pc, #1192]	; 80009fc <.text_21>
 8000554:	6801      	ldr	r1, [r0, #0]
 8000556:	0849      	lsrs	r1, r1, #1
 8000558:	0049      	lsls	r1, r1, #1
 800055a:	6001      	str	r1, [r0, #0]
 800055c:	2001      	movs	r0, #1
 800055e:	f8df 14a0 	ldr.w	r1, [pc, #1184]	; 8000a00 <.text_22>
 8000562:	6088      	str	r0, [r1, #8]
 8000564:	6888      	ldr	r0, [r1, #8]
 8000566:	2800      	cmp	r0, #0
 8000568:	d1fc      	bne.n	8000564 <ai_platform_runtime_get_revision+0x14>
 800056a:	f8df 2498 	ldr.w	r2, [pc, #1176]	; 8000a04 <.text_23>
 800056e:	600a      	str	r2, [r1, #0]
 8000570:	6808      	ldr	r0, [r1, #0]
 8000572:	f8df 1494 	ldr.w	r1, [pc, #1172]	; 8000a08 <.text_24>
 8000576:	4288      	cmp	r0, r1
 8000578:	d000      	beq.n	800057c <ai_platform_runtime_get_revision+0x2c>
 800057a:	e7fe      	b.n	800057a <ai_platform_runtime_get_revision+0x2a>
 800057c:	a0aa      	add	r0, pc, #680	; (adr r0, 8000828 <.text_16>)
 800057e:	4770      	bx	lr

08000580 <ai_platform_runtime_get_version>:
 8000580:	f8df 0478 	ldr.w	r0, [pc, #1144]	; 80009fc <.text_21>
 8000584:	6801      	ldr	r1, [r0, #0]
 8000586:	0849      	lsrs	r1, r1, #1
 8000588:	0049      	lsls	r1, r1, #1
 800058a:	6001      	str	r1, [r0, #0]
 800058c:	2001      	movs	r0, #1
 800058e:	f8df 1470 	ldr.w	r1, [pc, #1136]	; 8000a00 <.text_22>
 8000592:	6088      	str	r0, [r1, #8]
 8000594:	6888      	ldr	r0, [r1, #8]
 8000596:	2800      	cmp	r0, #0
 8000598:	d1fc      	bne.n	8000594 <ai_platform_runtime_get_version+0x14>
 800059a:	f8df 2468 	ldr.w	r2, [pc, #1128]	; 8000a04 <.text_23>
 800059e:	600a      	str	r2, [r1, #0]
 80005a0:	6808      	ldr	r0, [r1, #0]
 80005a2:	f8df 1464 	ldr.w	r1, [pc, #1124]	; 8000a08 <.text_24>
 80005a6:	4288      	cmp	r0, r1
 80005a8:	d000      	beq.n	80005ac <ai_platform_runtime_get_version+0x2c>
 80005aa:	e7fe      	b.n	80005aa <ai_platform_runtime_get_version+0x2a>
 80005ac:	f20f 4264 	addw	r2, pc, #1124	; 0x464
 80005b0:	6810      	ldr	r0, [r2, #0]
 80005b2:	4770      	bx	lr

080005b4 <ai_platform_api_get_version>:
 80005b4:	f8df 0444 	ldr.w	r0, [pc, #1092]	; 80009fc <.text_21>
 80005b8:	6801      	ldr	r1, [r0, #0]
 80005ba:	0849      	lsrs	r1, r1, #1
 80005bc:	0049      	lsls	r1, r1, #1
 80005be:	6001      	str	r1, [r0, #0]
 80005c0:	2001      	movs	r0, #1
 80005c2:	f8df 143c 	ldr.w	r1, [pc, #1084]	; 8000a00 <.text_22>
 80005c6:	6088      	str	r0, [r1, #8]
 80005c8:	6888      	ldr	r0, [r1, #8]
 80005ca:	2800      	cmp	r0, #0
 80005cc:	d1fc      	bne.n	80005c8 <ai_platform_api_get_version+0x14>
 80005ce:	f8df 2434 	ldr.w	r2, [pc, #1076]	; 8000a04 <.text_23>
 80005d2:	600a      	str	r2, [r1, #0]
 80005d4:	6808      	ldr	r0, [r1, #0]
 80005d6:	f8df 1430 	ldr.w	r1, [pc, #1072]	; 8000a08 <.text_24>
 80005da:	4288      	cmp	r0, r1
 80005dc:	d000      	beq.n	80005e0 <ai_platform_api_get_version+0x2c>
 80005de:	e7fe      	b.n	80005de <ai_platform_api_get_version+0x2a>
 80005e0:	f20f 4234 	addw	r2, pc, #1076	; 0x434
 80005e4:	6810      	ldr	r0, [r2, #0]
 80005e6:	4770      	bx	lr

080005e8 <ai_platform_interface_api_get_version>:
 80005e8:	f8df 0410 	ldr.w	r0, [pc, #1040]	; 80009fc <.text_21>
 80005ec:	6801      	ldr	r1, [r0, #0]
 80005ee:	0849      	lsrs	r1, r1, #1
 80005f0:	0049      	lsls	r1, r1, #1
 80005f2:	6001      	str	r1, [r0, #0]
 80005f4:	2001      	movs	r0, #1
 80005f6:	f8df 1408 	ldr.w	r1, [pc, #1032]	; 8000a00 <.text_22>
 80005fa:	6088      	str	r0, [r1, #8]
 80005fc:	6888      	ldr	r0, [r1, #8]
 80005fe:	2800      	cmp	r0, #0
 8000600:	d1fc      	bne.n	80005fc <ai_platform_interface_api_get_version+0x14>
 8000602:	f8df 2400 	ldr.w	r2, [pc, #1024]	; 8000a04 <.text_23>
 8000606:	600a      	str	r2, [r1, #0]
 8000608:	6808      	ldr	r0, [r1, #0]
 800060a:	f8df 13fc 	ldr.w	r1, [pc, #1020]	; 8000a08 <.text_24>
 800060e:	4288      	cmp	r0, r1
 8000610:	d000      	beq.n	8000614 <ai_platform_interface_api_get_version+0x2c>
 8000612:	e7fe      	b.n	8000612 <ai_platform_interface_api_get_version+0x2a>
 8000614:	f20f 4204 	addw	r2, pc, #1028	; 0x404
 8000618:	6810      	ldr	r0, [r2, #0]
 800061a:	4770      	bx	lr

0800061c <ai_platform_context_acquire>:
 800061c:	b120      	cbz	r0, 8000628 <ai_platform_context_acquire+0xc>
 800061e:	6801      	ldr	r1, [r0, #0]
 8000620:	f8df 23e8 	ldr.w	r2, [pc, #1000]	; 8000a0c <.text_25>
 8000624:	4291      	cmp	r1, r2
 8000626:	d000      	beq.n	800062a <ai_platform_context_acquire+0xe>
 8000628:	2000      	movs	r0, #0
 800062a:	f8df 13d0 	ldr.w	r1, [pc, #976]	; 80009fc <.text_21>
 800062e:	680a      	ldr	r2, [r1, #0]
 8000630:	0852      	lsrs	r2, r2, #1
 8000632:	0052      	lsls	r2, r2, #1
 8000634:	600a      	str	r2, [r1, #0]
 8000636:	2101      	movs	r1, #1
 8000638:	f8df 23c4 	ldr.w	r2, [pc, #964]	; 8000a00 <.text_22>
 800063c:	6091      	str	r1, [r2, #8]
 800063e:	6891      	ldr	r1, [r2, #8]
 8000640:	2900      	cmp	r1, #0
 8000642:	d1fc      	bne.n	800063e <ai_platform_context_acquire+0x22>
 8000644:	f8df 33bc 	ldr.w	r3, [pc, #956]	; 8000a04 <.text_23>
 8000648:	6013      	str	r3, [r2, #0]
 800064a:	6811      	ldr	r1, [r2, #0]
 800064c:	f8df 23b8 	ldr.w	r2, [pc, #952]	; 8000a08 <.text_24>
 8000650:	4291      	cmp	r1, r2
 8000652:	d000      	beq.n	8000656 <ai_platform_context_acquire+0x3a>
 8000654:	e7fe      	b.n	8000654 <ai_platform_context_acquire+0x38>
 8000656:	4770      	bx	lr

08000658 <ai_platform_context_release>:
 8000658:	f8df 13b0 	ldr.w	r1, [pc, #944]	; 8000a0c <.text_25>
 800065c:	6001      	str	r1, [r0, #0]
 800065e:	4770      	bx	lr

08000660 <ai_platform_network_get_error>:
 8000660:	b120      	cbz	r0, 800066c <ai_platform_network_get_error+0xc>
 8000662:	6801      	ldr	r1, [r0, #0]
 8000664:	f8df 23a4 	ldr.w	r2, [pc, #932]	; 8000a0c <.text_25>
 8000668:	4291      	cmp	r1, r2
 800066a:	d000      	beq.n	800066e <ai_platform_network_get_error+0xe>
 800066c:	2000      	movs	r0, #0
 800066e:	f8df 138c 	ldr.w	r1, [pc, #908]	; 80009fc <.text_21>
 8000672:	680a      	ldr	r2, [r1, #0]
 8000674:	0852      	lsrs	r2, r2, #1
 8000676:	0052      	lsls	r2, r2, #1
 8000678:	600a      	str	r2, [r1, #0]
 800067a:	2101      	movs	r1, #1
 800067c:	f8df 2380 	ldr.w	r2, [pc, #896]	; 8000a00 <.text_22>
 8000680:	6091      	str	r1, [r2, #8]
 8000682:	6891      	ldr	r1, [r2, #8]
 8000684:	2900      	cmp	r1, #0
 8000686:	d1fc      	bne.n	8000682 <ai_platform_network_get_error+0x22>
 8000688:	f8df 3378 	ldr.w	r3, [pc, #888]	; 8000a04 <.text_23>
 800068c:	6013      	str	r3, [r2, #0]
 800068e:	6811      	ldr	r1, [r2, #0]
 8000690:	f8df 2374 	ldr.w	r2, [pc, #884]	; 8000a08 <.text_24>
 8000694:	4291      	cmp	r1, r2
 8000696:	d000      	beq.n	800069a <ai_platform_network_get_error+0x3a>
 8000698:	e7fe      	b.n	8000698 <ai_platform_network_get_error+0x38>
 800069a:	2800      	cmp	r0, #0
 800069c:	bf1c      	itt	ne
 800069e:	300c      	addne	r0, #12
 80006a0:	f000 b9ce 	bne.w	8000a40 <core_get_error>
 80006a4:	f20f 3088 	addw	r0, pc, #904	; 0x388
 80006a8:	6800      	ldr	r0, [r0, #0]
 80006aa:	4770      	bx	lr

080006ac <ai_platform_network_set_error>:
 80006ac:	2800      	cmp	r0, #0
 80006ae:	bf1c      	itt	ne
 80006b0:	300c      	addne	r0, #12
 80006b2:	f000 b9ca 	bne.w	8000a4a <core_set_error>
 80006b6:	4770      	bx	lr

080006b8 <ai_platform_api_get_network_report>:
 80006b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80006bc:	ea5f 0900 	movs.w	r9, r0
 80006c0:	b081      	sub	sp, #4
 80006c2:	460c      	mov	r4, r1
 80006c4:	d005      	beq.n	80006d2 <ai_platform_api_get_network_report+0x1a>
 80006c6:	f8d9 0000 	ldr.w	r0, [r9]
 80006ca:	f8df 1340 	ldr.w	r1, [pc, #832]	; 8000a0c <.text_25>
 80006ce:	4288      	cmp	r0, r1
 80006d0:	d001      	beq.n	80006d6 <ai_platform_api_get_network_report+0x1e>
 80006d2:	f04f 0900 	mov.w	r9, #0
 80006d6:	f8df 5324 	ldr.w	r5, [pc, #804]	; 80009fc <.text_21>
 80006da:	f8df 6324 	ldr.w	r6, [pc, #804]	; 8000a00 <.text_22>
 80006de:	6828      	ldr	r0, [r5, #0]
 80006e0:	0840      	lsrs	r0, r0, #1
 80006e2:	0040      	lsls	r0, r0, #1
 80006e4:	6028      	str	r0, [r5, #0]
 80006e6:	2101      	movs	r1, #1
 80006e8:	60b1      	str	r1, [r6, #8]
 80006ea:	68b0      	ldr	r0, [r6, #8]
 80006ec:	2800      	cmp	r0, #0
 80006ee:	d1fc      	bne.n	80006ea <ai_platform_api_get_network_report+0x32>
 80006f0:	f8df 7310 	ldr.w	r7, [pc, #784]	; 8000a04 <.text_23>
 80006f4:	f8df 8310 	ldr.w	r8, [pc, #784]	; 8000a08 <.text_24>
 80006f8:	6037      	str	r7, [r6, #0]
 80006fa:	6830      	ldr	r0, [r6, #0]
 80006fc:	4540      	cmp	r0, r8
 80006fe:	d000      	beq.n	8000702 <ai_platform_api_get_network_report+0x4a>
 8000700:	e7fe      	b.n	8000700 <ai_platform_api_get_network_report+0x48>
 8000702:	f1b9 0f00 	cmp.w	r9, #0
 8000706:	bf18      	it	ne
 8000708:	2c00      	cmpne	r4, #0
 800070a:	f000 8088 	beq.w	800081e <ai_platform_api_get_network_report+0x166>
 800070e:	2000      	movs	r0, #0
 8000710:	6660      	str	r0, [r4, #100]	; 0x64
 8000712:	f8d9 2044 	ldr.w	r2, [r9, #68]	; 0x44
 8000716:	2a00      	cmp	r2, #0
 8000718:	f000 807b 	beq.w	8000812 <ai_platform_api_get_network_report+0x15a>
 800071c:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800071e:	1c49      	adds	r1, r1, #1
 8000720:	6661      	str	r1, [r4, #100]	; 0x64
 8000722:	6890      	ldr	r0, [r2, #8]
 8000724:	4282      	cmp	r2, r0
 8000726:	bf1c      	itt	ne
 8000728:	2800      	cmpne	r0, #0
 800072a:	4602      	movne	r2, r0
 800072c:	d1f6      	bne.n	800071c <ai_platform_api_get_network_report+0x64>
 800072e:	e06e      	b.n	800080e <ai_platform_api_get_network_report+0x156>
 8000730:	f8d9 003c 	ldr.w	r0, [r9, #60]	; 0x3c
 8000734:	f104 0134 	add.w	r1, r4, #52	; 0x34
 8000738:	f7ff fd4a 	bl	80001d0 <_ai_platform_get_io_buffers>
 800073c:	8620      	strh	r0, [r4, #48]	; 0x30
 800073e:	b910      	cbnz	r0, 8000746 <ai_platform_api_get_network_report+0x8e>
 8000740:	2218      	movs	r2, #24
 8000742:	2112      	movs	r1, #18
 8000744:	e067      	b.n	8000816 <ai_platform_api_get_network_report+0x15e>
 8000746:	f8d9 003c 	ldr.w	r0, [r9, #60]	; 0x3c
 800074a:	f104 0138 	add.w	r1, r4, #56	; 0x38
 800074e:	300c      	adds	r0, #12
 8000750:	f7ff fd3e 	bl	80001d0 <_ai_platform_get_io_buffers>
 8000754:	8660      	strh	r0, [r4, #50]	; 0x32
 8000756:	b910      	cbnz	r0, 800075e <ai_platform_api_get_network_report+0xa6>
 8000758:	2218      	movs	r2, #24
 800075a:	2113      	movs	r1, #19
 800075c:	e05b      	b.n	8000816 <ai_platform_api_get_network_report+0x15e>
 800075e:	f8d9 0004 	ldr.w	r0, [r9, #4]
 8000762:	66a0      	str	r0, [r4, #104]	; 0x68
 8000764:	f109 0228 	add.w	r2, r9, #40	; 0x28
 8000768:	e892 5c08 	ldmia.w	r2, {r3, sl, fp, ip, lr}
 800076c:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 8000770:	f109 0914 	add.w	r9, r9, #20
 8000774:	e881 5c08 	stmia.w	r1, {r3, sl, fp, ip, lr}
 8000778:	e899 500e 	ldmia.w	r9, {r1, r2, r3, ip, lr}
 800077c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8000780:	e880 500e 	stmia.w	r0, {r1, r2, r3, ip, lr}
 8000784:	6828      	ldr	r0, [r5, #0]
 8000786:	0840      	lsrs	r0, r0, #1
 8000788:	0040      	lsls	r0, r0, #1
 800078a:	6028      	str	r0, [r5, #0]
 800078c:	2301      	movs	r3, #1
 800078e:	60b3      	str	r3, [r6, #8]
 8000790:	68b0      	ldr	r0, [r6, #8]
 8000792:	2800      	cmp	r0, #0
 8000794:	d1fc      	bne.n	8000790 <ai_platform_api_get_network_report+0xd8>
 8000796:	6037      	str	r7, [r6, #0]
 8000798:	6831      	ldr	r1, [r6, #0]
 800079a:	4541      	cmp	r1, r8
 800079c:	d000      	beq.n	80007a0 <ai_platform_api_get_network_report+0xe8>
 800079e:	e7fe      	b.n	800079e <ai_platform_api_get_network_report+0xe6>
 80007a0:	a021      	add	r0, pc, #132	; (adr r0, 8000828 <.text_16>)
 80007a2:	6120      	str	r0, [r4, #16]
 80007a4:	6829      	ldr	r1, [r5, #0]
 80007a6:	0849      	lsrs	r1, r1, #1
 80007a8:	0049      	lsls	r1, r1, #1
 80007aa:	6029      	str	r1, [r5, #0]
 80007ac:	60b3      	str	r3, [r6, #8]
 80007ae:	68b0      	ldr	r0, [r6, #8]
 80007b0:	2800      	cmp	r0, #0
 80007b2:	d1fc      	bne.n	80007ae <ai_platform_api_get_network_report+0xf6>
 80007b4:	6037      	str	r7, [r6, #0]
 80007b6:	6831      	ldr	r1, [r6, #0]
 80007b8:	4541      	cmp	r1, r8
 80007ba:	d000      	beq.n	80007be <ai_platform_api_get_network_report+0x106>
 80007bc:	e7fe      	b.n	80007bc <ai_platform_api_get_network_report+0x104>
 80007be:	f20f 2054 	addw	r0, pc, #596	; 0x254
 80007c2:	6802      	ldr	r2, [r0, #0]
 80007c4:	6162      	str	r2, [r4, #20]
 80007c6:	6829      	ldr	r1, [r5, #0]
 80007c8:	0849      	lsrs	r1, r1, #1
 80007ca:	0049      	lsls	r1, r1, #1
 80007cc:	6029      	str	r1, [r5, #0]
 80007ce:	60b3      	str	r3, [r6, #8]
 80007d0:	68b0      	ldr	r0, [r6, #8]
 80007d2:	2800      	cmp	r0, #0
 80007d4:	d1fc      	bne.n	80007d0 <ai_platform_api_get_network_report+0x118>
 80007d6:	6037      	str	r7, [r6, #0]
 80007d8:	6831      	ldr	r1, [r6, #0]
 80007da:	4541      	cmp	r1, r8
 80007dc:	d000      	beq.n	80007e0 <ai_platform_api_get_network_report+0x128>
 80007de:	e7fe      	b.n	80007de <ai_platform_api_get_network_report+0x126>
 80007e0:	a08d      	add	r0, pc, #564	; (adr r0, 8000a18 <.text_28>)
 80007e2:	6802      	ldr	r2, [r0, #0]
 80007e4:	6262      	str	r2, [r4, #36]	; 0x24
 80007e6:	6829      	ldr	r1, [r5, #0]
 80007e8:	0849      	lsrs	r1, r1, #1
 80007ea:	0049      	lsls	r1, r1, #1
 80007ec:	6029      	str	r1, [r5, #0]
 80007ee:	60b3      	str	r3, [r6, #8]
 80007f0:	68b0      	ldr	r0, [r6, #8]
 80007f2:	2800      	cmp	r0, #0
 80007f4:	d1fc      	bne.n	80007f0 <ai_platform_api_get_network_report+0x138>
 80007f6:	6037      	str	r7, [r6, #0]
 80007f8:	6831      	ldr	r1, [r6, #0]
 80007fa:	4541      	cmp	r1, r8
 80007fc:	d000      	beq.n	8000800 <ai_platform_api_get_network_report+0x148>
 80007fe:	e7fe      	b.n	80007fe <ai_platform_api_get_network_report+0x146>
 8000800:	a086      	add	r0, pc, #536	; (adr r0, 8000a1c <.text_29>)
 8000802:	6802      	ldr	r2, [r0, #0]
 8000804:	62a2      	str	r2, [r4, #40]	; 0x28
 8000806:	2001      	movs	r0, #1
 8000808:	b001      	add	sp, #4
 800080a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800080e:	2900      	cmp	r1, #0
 8000810:	d18e      	bne.n	8000730 <ai_platform_api_get_network_report+0x78>
 8000812:	2218      	movs	r2, #24
 8000814:	2111      	movs	r1, #17
 8000816:	f109 000c 	add.w	r0, r9, #12
 800081a:	f000 f916 	bl	8000a4a <core_set_error>
 800081e:	2000      	movs	r0, #0
 8000820:	b001      	add	sp, #4
 8000822:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08000828 <.text_16>:
 8000828:	00000000 	.word	0x00000000

0800082c <ai_platform_network_create>:
 800082c:	b570      	push	{r4, r5, r6, lr}
 800082e:	9d04      	ldr	r5, [sp, #16]
 8000830:	4604      	mov	r4, r0
 8000832:	9805      	ldr	r0, [sp, #20]
 8000834:	b2db      	uxtb	r3, r3
 8000836:	042d      	lsls	r5, r5, #16
 8000838:	ea45 6503 	orr.w	r5, r5, r3, lsl #24
 800083c:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
 8000840:	a07c      	add	r0, pc, #496	; (adr r0, 8000a34 <.text_35>)
 8000842:	6806      	ldr	r6, [r0, #0]
 8000844:	486d      	ldr	r0, [pc, #436]	; (80009fc <.text_21>)
 8000846:	6801      	ldr	r1, [r0, #0]
 8000848:	0849      	lsrs	r1, r1, #1
 800084a:	0049      	lsls	r1, r1, #1
 800084c:	6001      	str	r1, [r0, #0]
 800084e:	2001      	movs	r0, #1
 8000850:	496b      	ldr	r1, [pc, #428]	; (8000a00 <.text_22>)
 8000852:	6088      	str	r0, [r1, #8]
 8000854:	6888      	ldr	r0, [r1, #8]
 8000856:	2800      	cmp	r0, #0
 8000858:	d1fc      	bne.n	8000854 <ai_platform_network_create+0x28>
 800085a:	4b6a      	ldr	r3, [pc, #424]	; (8000a04 <.text_23>)
 800085c:	600b      	str	r3, [r1, #0]
 800085e:	6808      	ldr	r0, [r1, #0]
 8000860:	4969      	ldr	r1, [pc, #420]	; (8000a08 <.text_24>)
 8000862:	4288      	cmp	r0, r1
 8000864:	d000      	beq.n	8000868 <ai_platform_network_create+0x3c>
 8000866:	e7fe      	b.n	8000866 <ai_platform_network_create+0x3a>
 8000868:	b91c      	cbnz	r4, 8000872 <ai_platform_network_create+0x46>
 800086a:	bf00      	nop
 800086c:	a072      	add	r0, pc, #456	; (adr r0, 8000a38 <.text_36>)
 800086e:	6800      	ldr	r0, [r0, #0]
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	4966      	ldr	r1, [pc, #408]	; (8000a0c <.text_25>)
 8000874:	6011      	str	r1, [r2, #0]
 8000876:	f8c4 2000 	str.w	r2, [r4]
 800087a:	f000 f8df 	bl	8000a3c <core_init>
 800087e:	b908      	cbnz	r0, 8000884 <ai_platform_network_create+0x58>
 8000880:	a067      	add	r0, pc, #412	; (adr r0, 8000a20 <.text_30>)
 8000882:	e00a      	b.n	800089a <ai_platform_network_create+0x6e>
 8000884:	4962      	ldr	r1, [pc, #392]	; (8000a10 <.text_26>)
 8000886:	428d      	cmp	r5, r1
 8000888:	bf28      	it	cs
 800088a:	f20f 1098 	addwcs	r0, pc, #408	; 0x198
 800088e:	d204      	bcs.n	800089a <ai_platform_network_create+0x6e>
 8000890:	a065      	add	r0, pc, #404	; (adr r0, 8000a28 <_platform_network_sanity_check{5}::signatures>)
 8000892:	f000 f8ef 	bl	8000a74 <ai_check_custom_types>
 8000896:	b918      	cbnz	r0, 80008a0 <ai_platform_network_create+0x74>
 8000898:	a064      	add	r0, pc, #400	; (adr r0, 8000a2c <.text_33>)
 800089a:	6806      	ldr	r6, [r0, #0]
 800089c:	2100      	movs	r1, #0
 800089e:	6021      	str	r1, [r4, #0]
 80008a0:	4630      	mov	r0, r6
 80008a2:	bd70      	pop	{r4, r5, r6, pc}

080008a4 <ai_platform_network_destroy>:
 80008a4:	b128      	cbz	r0, 80008b2 <ai_platform_network_destroy+0xe>
 80008a6:	6801      	ldr	r1, [r0, #0]
 80008a8:	4a58      	ldr	r2, [pc, #352]	; (8000a0c <.text_25>)
 80008aa:	4291      	cmp	r1, r2
 80008ac:	bf08      	it	eq
 80008ae:	4602      	moveq	r2, r0
 80008b0:	d000      	beq.n	80008b4 <ai_platform_network_destroy+0x10>
 80008b2:	2200      	movs	r2, #0
 80008b4:	4951      	ldr	r1, [pc, #324]	; (80009fc <.text_21>)
 80008b6:	680b      	ldr	r3, [r1, #0]
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	005b      	lsls	r3, r3, #1
 80008bc:	600b      	str	r3, [r1, #0]
 80008be:	2101      	movs	r1, #1
 80008c0:	4b4f      	ldr	r3, [pc, #316]	; (8000a00 <.text_22>)
 80008c2:	6099      	str	r1, [r3, #8]
 80008c4:	6899      	ldr	r1, [r3, #8]
 80008c6:	2900      	cmp	r1, #0
 80008c8:	d1fc      	bne.n	80008c4 <ai_platform_network_destroy+0x20>
 80008ca:	f8df c138 	ldr.w	ip, [pc, #312]	; 8000a04 <.text_23>
 80008ce:	f8c3 c000 	str.w	ip, [r3]
 80008d2:	6819      	ldr	r1, [r3, #0]
 80008d4:	4b4c      	ldr	r3, [pc, #304]	; (8000a08 <.text_24>)
 80008d6:	4299      	cmp	r1, r3
 80008d8:	d000      	beq.n	80008dc <ai_platform_network_destroy+0x38>
 80008da:	e7fe      	b.n	80008da <ai_platform_network_destroy+0x36>
 80008dc:	b102      	cbz	r2, 80008e0 <ai_platform_network_destroy+0x3c>
 80008de:	2000      	movs	r0, #0
 80008e0:	4770      	bx	lr

080008e2 <ai_platform_network_init>:
 80008e2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80008e6:	b081      	sub	sp, #4
 80008e8:	460a      	mov	r2, r1
 80008ea:	b118      	cbz	r0, 80008f4 <ai_platform_network_init+0x12>
 80008ec:	6801      	ldr	r1, [r0, #0]
 80008ee:	4b47      	ldr	r3, [pc, #284]	; (8000a0c <.text_25>)
 80008f0:	4299      	cmp	r1, r3
 80008f2:	d000      	beq.n	80008f6 <ai_platform_network_init+0x14>
 80008f4:	2000      	movs	r0, #0
 80008f6:	4941      	ldr	r1, [pc, #260]	; (80009fc <.text_21>)
 80008f8:	680b      	ldr	r3, [r1, #0]
 80008fa:	085b      	lsrs	r3, r3, #1
 80008fc:	005b      	lsls	r3, r3, #1
 80008fe:	600b      	str	r3, [r1, #0]
 8000900:	2101      	movs	r1, #1
 8000902:	4b3f      	ldr	r3, [pc, #252]	; (8000a00 <.text_22>)
 8000904:	6099      	str	r1, [r3, #8]
 8000906:	6899      	ldr	r1, [r3, #8]
 8000908:	2900      	cmp	r1, #0
 800090a:	d1fc      	bne.n	8000906 <ai_platform_network_init+0x24>
 800090c:	4c3d      	ldr	r4, [pc, #244]	; (8000a04 <.text_23>)
 800090e:	601c      	str	r4, [r3, #0]
 8000910:	6819      	ldr	r1, [r3, #0]
 8000912:	4b3d      	ldr	r3, [pc, #244]	; (8000a08 <.text_24>)
 8000914:	4299      	cmp	r1, r3
 8000916:	d000      	beq.n	800091a <ai_platform_network_init+0x38>
 8000918:	e7fe      	b.n	8000918 <ai_platform_network_init+0x36>
 800091a:	2800      	cmp	r0, #0
 800091c:	d034      	beq.n	8000988 <ai_platform_network_init+0xa6>
 800091e:	b90a      	cbnz	r2, 8000924 <ai_platform_network_init+0x42>
 8000920:	2211      	movs	r2, #17
 8000922:	e012      	b.n	800094a <ai_platform_network_init+0x68>
 8000924:	6913      	ldr	r3, [r2, #16]
 8000926:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8000928:	b939      	cbnz	r1, 800093a <ai_platform_network_init+0x58>
 800092a:	8b91      	ldrh	r1, [r2, #28]
 800092c:	8b55      	ldrh	r5, [r2, #26]
 800092e:	6a14      	ldr	r4, [r2, #32]
 8000930:	4369      	muls	r1, r5
 8000932:	4361      	muls	r1, r4
 8000934:	bf18      	it	ne
 8000936:	2213      	movne	r2, #19
 8000938:	d107      	bne.n	800094a <ai_platform_network_init+0x68>
 800093a:	b973      	cbnz	r3, 800095a <ai_platform_network_init+0x78>
 800093c:	8911      	ldrh	r1, [r2, #8]
 800093e:	88d4      	ldrh	r4, [r2, #6]
 8000940:	68d3      	ldr	r3, [r2, #12]
 8000942:	4361      	muls	r1, r4
 8000944:	4359      	muls	r1, r3
 8000946:	d008      	beq.n	800095a <ai_platform_network_init+0x78>
 8000948:	2212      	movs	r2, #18
 800094a:	2110      	movs	r1, #16
 800094c:	300c      	adds	r0, #12
 800094e:	f000 f87c 	bl	8000a4a <core_set_error>
 8000952:	2000      	movs	r0, #0
 8000954:	b001      	add	sp, #4
 8000956:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800095a:	caf8      	ldmia	r2!, {r3, r4, r5, r6, r7}
 800095c:	f100 0114 	add.w	r1, r0, #20
 8000960:	f100 0c28 	add.w	ip, r0, #40	; 0x28
 8000964:	e881 00f8 	stmia.w	r1, {r3, r4, r5, r6, r7}
 8000968:	e892 4f00 	ldmia.w	r2, {r8, r9, sl, fp, lr}
 800096c:	e88c 4f00 	stmia.w	ip, {r8, r9, sl, fp, lr}
 8000970:	2103      	movs	r1, #3
 8000972:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8000974:	6081      	str	r1, [r0, #8]
 8000976:	b13a      	cbz	r2, 8000988 <ai_platform_network_init+0xa6>
 8000978:	6891      	ldr	r1, [r2, #8]
 800097a:	6050      	str	r0, [r2, #4]
 800097c:	428a      	cmp	r2, r1
 800097e:	bf18      	it	ne
 8000980:	2900      	cmpne	r1, #0
 8000982:	bf18      	it	ne
 8000984:	460a      	movne	r2, r1
 8000986:	d1f7      	bne.n	8000978 <ai_platform_network_init+0x96>
 8000988:	b001      	add	sp, #4
 800098a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800098e <ai_platform_network_process>:
 800098e:	b570      	push	{r4, r5, r6, lr}
 8000990:	0004      	movs	r4, r0
 8000992:	d003      	beq.n	800099c <ai_platform_network_process+0xe>
 8000994:	6820      	ldr	r0, [r4, #0]
 8000996:	4b1d      	ldr	r3, [pc, #116]	; (8000a0c <.text_25>)
 8000998:	4298      	cmp	r0, r3
 800099a:	d000      	beq.n	800099e <ai_platform_network_process+0x10>
 800099c:	2400      	movs	r4, #0
 800099e:	4817      	ldr	r0, [pc, #92]	; (80009fc <.text_21>)
 80009a0:	6803      	ldr	r3, [r0, #0]
 80009a2:	085b      	lsrs	r3, r3, #1
 80009a4:	005b      	lsls	r3, r3, #1
 80009a6:	6003      	str	r3, [r0, #0]
 80009a8:	2001      	movs	r0, #1
 80009aa:	4b15      	ldr	r3, [pc, #84]	; (8000a00 <.text_22>)
 80009ac:	6098      	str	r0, [r3, #8]
 80009ae:	6898      	ldr	r0, [r3, #8]
 80009b0:	2800      	cmp	r0, #0
 80009b2:	d1fc      	bne.n	80009ae <ai_platform_network_process+0x20>
 80009b4:	4d13      	ldr	r5, [pc, #76]	; (8000a04 <.text_23>)
 80009b6:	601d      	str	r5, [r3, #0]
 80009b8:	6818      	ldr	r0, [r3, #0]
 80009ba:	4b13      	ldr	r3, [pc, #76]	; (8000a08 <.text_24>)
 80009bc:	4298      	cmp	r0, r3
 80009be:	d000      	beq.n	80009c2 <ai_platform_network_process+0x34>
 80009c0:	e7fe      	b.n	80009c0 <ai_platform_network_process+0x32>
 80009c2:	4620      	mov	r0, r4
 80009c4:	f7ff fcca 	bl	800035c <_platform_network_io_bind>
 80009c8:	b1b8      	cbz	r0, 80009fa <ai_platform_network_process+0x6c>
 80009ca:	8a60      	ldrh	r0, [r4, #18]
 80009cc:	8a21      	ldrh	r1, [r4, #16]
 80009ce:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 80009d0:	4288      	cmp	r0, r1
 80009d2:	f105 060c 	add.w	r6, r5, #12
 80009d6:	d20f      	bcs.n	80009f8 <ai_platform_network_process+0x6a>
 80009d8:	4628      	mov	r0, r5
 80009da:	f7ff fc4d 	bl	8000278 <_platform_network_state_update_input>
 80009de:	4620      	mov	r0, r4
 80009e0:	f000 f8f2 	bl	8000bc8 <ai_layers_forward_all>
 80009e4:	4630      	mov	r0, r6
 80009e6:	f7ff fc7b 	bl	80002e0 <_platform_network_state_update_output>
 80009ea:	8a60      	ldrh	r0, [r4, #18]
 80009ec:	8a21      	ldrh	r1, [r4, #16]
 80009ee:	1c40      	adds	r0, r0, #1
 80009f0:	8260      	strh	r0, [r4, #18]
 80009f2:	b280      	uxth	r0, r0
 80009f4:	4288      	cmp	r0, r1
 80009f6:	d3ef      	bcc.n	80009d8 <ai_platform_network_process+0x4a>
 80009f8:	8a60      	ldrh	r0, [r4, #18]
 80009fa:	bd70      	pop	{r4, r5, r6, pc}

080009fc <.text_21>:
 80009fc:	e0002000 	.word	0xe0002000

08000a00 <.text_22>:
 8000a00:	40023000 	.word	0x40023000

08000a04 <.text_23>:
 8000a04:	f407a5c2 	.word	0xf407a5c2

08000a08 <.text_24>:
 8000a08:	b5e8b5cd 	.word	0xb5e8b5cd

08000a0c <.text_25>:
 8000a0c:	a1c00100 	.word	0xa1c00100

08000a10 <.text_26>:
 8000a10:	01030001 	.word	0x01030001

08000a14 <.text_27>:
 8000a14:	00000004 	.word	0x00000004

08000a18 <.text_28>:
 8000a18:	00000101 	.word	0x00000101

08000a1c <.text_29>:
 8000a1c:	00000301 	.word	0x00000301

08000a20 <.text_30>:
 8000a20:	00001030 	.word	0x00001030

08000a24 <.text_31>:
 8000a24:	00001001 	.word	0x00001001

08000a28 <_platform_network_sanity_check{5}::signatures>:
 8000a28:	84048403                                ....

08000a2c <.text_33>:
 8000a2c:	00001002 	.word	0x00001002

08000a30 <.text_34>:
 8000a30:	00001010 	.word	0x00001010

08000a34 <.text_35>:
 8000a34:	00000000 	.word	0x00000000

08000a38 <.text_36>:
 8000a38:	00001010 	.word	0x00001010

08000a3c <core_init>:
 8000a3c:	2001      	movs	r0, #1
 8000a3e:	4770      	bx	lr

08000a40 <core_get_error>:
 8000a40:	4601      	mov	r1, r0
 8000a42:	2200      	movs	r2, #0
 8000a44:	6808      	ldr	r0, [r1, #0]
 8000a46:	600a      	str	r2, [r1, #0]
 8000a48:	4770      	bx	lr

08000a4a <core_set_error>:
 8000a4a:	7803      	ldrb	r3, [r0, #0]
 8000a4c:	ea5f 6c03 	movs.w	ip, r3, lsl #24
 8000a50:	d104      	bne.n	8000a5c <core_set_error+0x12>
 8000a52:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 8000a56:	6001      	str	r1, [r0, #0]
 8000a58:	2001      	movs	r0, #1
 8000a5a:	4770      	bx	lr
 8000a5c:	2000      	movs	r0, #0
 8000a5e:	4770      	bx	lr

08000a60 <ai_layers_forward_layer>:
 8000a60:	b510      	push	{r4, lr}
 8000a62:	4604      	mov	r4, r0
 8000a64:	68e1      	ldr	r1, [r4, #12]
 8000a66:	4788      	blx	r1
 8000a68:	68a0      	ldr	r0, [r4, #8]
 8000a6a:	42a0      	cmp	r0, r4
 8000a6c:	bf08      	it	eq
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	bd10      	pop	{r4, pc}
	...

08000a74 <ai_check_custom_types>:
 8000a74:	b500      	push	{lr}
 8000a76:	b081      	sub	sp, #4
 8000a78:	b160      	cbz	r0, 8000a94 <ai_check_custom_types+0x20>
 8000a7a:	7801      	ldrb	r1, [r0, #0]
 8000a7c:	2903      	cmp	r1, #3
 8000a7e:	d109      	bne.n	8000a94 <ai_check_custom_types+0x20>
 8000a80:	f05f 0204 	movs.w	r2, #4
 8000a84:	a18c      	add	r1, pc, #560	; (adr r1, 8000cb8 <ai_check_custom_types::ref_signatures>)
 8000a86:	f009 fa73 	bl	8009f70 <memcmp>
 8000a8a:	1e40      	subs	r0, r0, #1
 8000a8c:	4180      	sbcs	r0, r0
 8000a8e:	0fc0      	lsrs	r0, r0, #31
 8000a90:	b001      	add	sp, #4
 8000a92:	bd00      	pop	{pc}
 8000a94:	2000      	movs	r0, #0
 8000a96:	b001      	add	sp, #4
 8000a98:	bd00      	pop	{pc}
	...

08000a9c <ai_layer_type_name>:
 8000a9c:	f242 7211 	movw	r2, #10001	; 0x2711
 8000aa0:	1a81      	subs	r1, r0, r2
 8000aa2:	2901      	cmp	r1, #1
 8000aa4:	bf81      	itttt	hi
 8000aa6:	1ec9      	subhi	r1, r1, #3
 8000aa8:	290d      	cmphi	r1, #13
 8000aaa:	390f      	subhi	r1, #15
 8000aac:	2909      	cmphi	r1, #9
 8000aae:	f200 806b 	bhi.w	8000b88 <ai_layer_type_name+0xec>
 8000ab2:	1a80      	subs	r0, r0, r2
 8000ab4:	d033      	beq.n	8000b1e <ai_layer_type_name+0x82>
 8000ab6:	1e40      	subs	r0, r0, #1
 8000ab8:	d033      	beq.n	8000b22 <ai_layer_type_name+0x86>
 8000aba:	1e80      	subs	r0, r0, #2
 8000abc:	d033      	beq.n	8000b26 <ai_layer_type_name+0x8a>
 8000abe:	1e40      	subs	r0, r0, #1
 8000ac0:	d034      	beq.n	8000b2c <ai_layer_type_name+0x90>
 8000ac2:	1e40      	subs	r0, r0, #1
 8000ac4:	d034      	beq.n	8000b30 <ai_layer_type_name+0x94>
 8000ac6:	1e40      	subs	r0, r0, #1
 8000ac8:	d034      	beq.n	8000b34 <ai_layer_type_name+0x98>
 8000aca:	1e40      	subs	r0, r0, #1
 8000acc:	d034      	beq.n	8000b38 <ai_layer_type_name+0x9c>
 8000ace:	1e40      	subs	r0, r0, #1
 8000ad0:	d034      	beq.n	8000b3c <ai_layer_type_name+0xa0>
 8000ad2:	1e40      	subs	r0, r0, #1
 8000ad4:	d034      	beq.n	8000b40 <ai_layer_type_name+0xa4>
 8000ad6:	1e40      	subs	r0, r0, #1
 8000ad8:	d034      	beq.n	8000b44 <ai_layer_type_name+0xa8>
 8000ada:	1e40      	subs	r0, r0, #1
 8000adc:	d034      	beq.n	8000b48 <ai_layer_type_name+0xac>
 8000ade:	1e40      	subs	r0, r0, #1
 8000ae0:	d034      	beq.n	8000b4c <ai_layer_type_name+0xb0>
 8000ae2:	1e40      	subs	r0, r0, #1
 8000ae4:	d034      	beq.n	8000b50 <ai_layer_type_name+0xb4>
 8000ae6:	1e40      	subs	r0, r0, #1
 8000ae8:	d034      	beq.n	8000b54 <ai_layer_type_name+0xb8>
 8000aea:	1e40      	subs	r0, r0, #1
 8000aec:	d034      	beq.n	8000b58 <ai_layer_type_name+0xbc>
 8000aee:	1e40      	subs	r0, r0, #1
 8000af0:	d034      	beq.n	8000b5c <ai_layer_type_name+0xc0>
 8000af2:	1e80      	subs	r0, r0, #2
 8000af4:	d034      	beq.n	8000b60 <ai_layer_type_name+0xc4>
 8000af6:	1e40      	subs	r0, r0, #1
 8000af8:	d034      	beq.n	8000b64 <ai_layer_type_name+0xc8>
 8000afa:	1e40      	subs	r0, r0, #1
 8000afc:	d034      	beq.n	8000b68 <ai_layer_type_name+0xcc>
 8000afe:	1e40      	subs	r0, r0, #1
 8000b00:	d034      	beq.n	8000b6c <ai_layer_type_name+0xd0>
 8000b02:	1e40      	subs	r0, r0, #1
 8000b04:	d034      	beq.n	8000b70 <ai_layer_type_name+0xd4>
 8000b06:	1e40      	subs	r0, r0, #1
 8000b08:	d034      	beq.n	8000b74 <ai_layer_type_name+0xd8>
 8000b0a:	1e40      	subs	r0, r0, #1
 8000b0c:	d034      	beq.n	8000b78 <ai_layer_type_name+0xdc>
 8000b0e:	1e40      	subs	r0, r0, #1
 8000b10:	d034      	beq.n	8000b7c <ai_layer_type_name+0xe0>
 8000b12:	1e40      	subs	r0, r0, #1
 8000b14:	d034      	beq.n	8000b80 <ai_layer_type_name+0xe4>
 8000b16:	1e40      	subs	r0, r0, #1
 8000b18:	d034      	beq.n	8000b84 <ai_layer_type_name+0xe8>
 8000b1a:	a01c      	add	r0, pc, #112	; (adr r0, 8000b8c <.text_5>)
 8000b1c:	4770      	bx	lr
 8000b1e:	a01c      	add	r0, pc, #112	; (adr r0, 8000b90 <.text_6>)
 8000b20:	4770      	bx	lr
 8000b22:	a01c      	add	r0, pc, #112	; (adr r0, 8000b94 <.text_7>)
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	a031      	add	r0, pc, #196	; (adr r0, 8000bf0 <.text_15>)
 8000b2a:	4770      	bx	lr
 8000b2c:	a032      	add	r0, pc, #200	; (adr r0, 8000bf8 <.text_16>)
 8000b2e:	4770      	bx	lr
 8000b30:	a019      	add	r0, pc, #100	; (adr r0, 8000b98 <.text_8>)
 8000b32:	4770      	bx	lr
 8000b34:	a019      	add	r0, pc, #100	; (adr r0, 8000b9c <.text_9>)
 8000b36:	4770      	bx	lr
 8000b38:	a031      	add	r0, pc, #196	; (adr r0, 8000c00 <.text_17>)
 8000b3a:	4770      	bx	lr
 8000b3c:	a018      	add	r0, pc, #96	; (adr r0, 8000ba0 <.text_10>)
 8000b3e:	4770      	bx	lr
 8000b40:	a031      	add	r0, pc, #196	; (adr r0, 8000c08 <.text_18>)
 8000b42:	4770      	bx	lr
 8000b44:	a032      	add	r0, pc, #200	; (adr r0, 8000c10 <.text_19>)
 8000b46:	4770      	bx	lr
 8000b48:	a036      	add	r0, pc, #216	; (adr r0, 8000c24 <.text_20>)
 8000b4a:	4770      	bx	lr
 8000b4c:	a037      	add	r0, pc, #220	; (adr r0, 8000c2c <.text_21>)
 8000b4e:	4770      	bx	lr
 8000b50:	a014      	add	r0, pc, #80	; (adr r0, 8000ba4 <.text_11>)
 8000b52:	4770      	bx	lr
 8000b54:	a037      	add	r0, pc, #220	; (adr r0, 8000c34 <.text_22>)
 8000b56:	4770      	bx	lr
 8000b58:	a038      	add	r0, pc, #224	; (adr r0, 8000c3c <.text_23>)
 8000b5a:	4770      	bx	lr
 8000b5c:	a03a      	add	r0, pc, #232	; (adr r0, 8000c48 <.text_24>)
 8000b5e:	4770      	bx	lr
 8000b60:	a03e      	add	r0, pc, #248	; (adr r0, 8000c5c <.text_25>)
 8000b62:	4770      	bx	lr
 8000b64:	a03f      	add	r0, pc, #252	; (adr r0, 8000c64 <.text_26>)
 8000b66:	4770      	bx	lr
 8000b68:	a040      	add	r0, pc, #256	; (adr r0, 8000c6c <.text_27>)
 8000b6a:	4770      	bx	lr
 8000b6c:	a042      	add	r0, pc, #264	; (adr r0, 8000c78 <.text_28>)
 8000b6e:	4770      	bx	lr
 8000b70:	a043      	add	r0, pc, #268	; (adr r0, 8000c80 <.text_29>)
 8000b72:	4770      	bx	lr
 8000b74:	a044      	add	r0, pc, #272	; (adr r0, 8000c88 <.text_30>)
 8000b76:	4770      	bx	lr
 8000b78:	a00b      	add	r0, pc, #44	; (adr r0, 8000ba8 <.text_12>)
 8000b7a:	4770      	bx	lr
 8000b7c:	a048      	add	r0, pc, #288	; (adr r0, 8000ca0 <.text_31>)
 8000b7e:	4770      	bx	lr
 8000b80:	a049      	add	r0, pc, #292	; (adr r0, 8000ca8 <.text_32>)
 8000b82:	4770      	bx	lr
 8000b84:	a04a      	add	r0, pc, #296	; (adr r0, 8000cb0 <.text_33>)
 8000b86:	4770      	bx	lr
 8000b88:	a000      	add	r0, pc, #0	; (adr r0, 8000b8c <.text_5>)
 8000b8a:	4770      	bx	lr

08000b8c <.text_5>:
 8000b8c:	00000000 	.word	0x00000000

08000b90 <.text_6>:
 8000b90:	00444441 	.word	0x00444441

08000b94 <.text_7>:
 8000b94:	00004e42 	.word	0x00004e42

08000b98 <.text_8>:
 8000b98:	00555247 	.word	0x00555247

08000b9c <.text_9>:
 8000b9c:	004e524c 	.word	0x004e524c

08000ba0 <.text_10>:
 8000ba0:	00004c4e 	.word	0x00004c4e

08000ba4 <.text_11>:
 8000ba4:	00004d53 	.word	0x00004d53

08000ba8 <.text_12>:
 8000ba8:	00444150 	.word	0x00444150

08000bac <ai_layer_type_is_valid>:
 8000bac:	f242 7111 	movw	r1, #10001	; 0x2711
 8000bb0:	1a40      	subs	r0, r0, r1
 8000bb2:	2801      	cmp	r0, #1
 8000bb4:	bf81      	itttt	hi
 8000bb6:	1ec0      	subhi	r0, r0, #3
 8000bb8:	280d      	cmphi	r0, #13
 8000bba:	380f      	subhi	r0, #15
 8000bbc:	2809      	cmphi	r0, #9
 8000bbe:	d801      	bhi.n	8000bc4 <ai_layer_type_is_valid+0x18>
 8000bc0:	2001      	movs	r0, #1
 8000bc2:	4770      	bx	lr
 8000bc4:	2000      	movs	r0, #0
 8000bc6:	4770      	bx	lr

08000bc8 <ai_layers_forward_all>:
 8000bc8:	b530      	push	{r4, r5, lr}
 8000bca:	4604      	mov	r4, r0
 8000bcc:	b081      	sub	sp, #4
 8000bce:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8000bd0:	b158      	cbz	r0, 8000bea <ai_layers_forward_all+0x22>
 8000bd2:	64a0      	str	r0, [r4, #72]	; 0x48
 8000bd4:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8000bd6:	68e9      	ldr	r1, [r5, #12]
 8000bd8:	4628      	mov	r0, r5
 8000bda:	4788      	blx	r1
 8000bdc:	68a8      	ldr	r0, [r5, #8]
 8000bde:	42a8      	cmp	r0, r5
 8000be0:	bf08      	it	eq
 8000be2:	2000      	moveq	r0, #0
 8000be4:	2800      	cmp	r0, #0
 8000be6:	64a0      	str	r0, [r4, #72]	; 0x48
 8000be8:	d1f4      	bne.n	8000bd4 <ai_layers_forward_all+0xc>
 8000bea:	b001      	add	sp, #4
 8000bec:	bd30      	pop	{r4, r5, pc}
	...

08000bf0 <.text_15>:
 8000bf0:	564e4f43 	.word	0x564e4f43
 8000bf4:	4432      	.short	0x4432
	...

08000bf8 <.text_16>:
 8000bf8:	534e4544 	.word	0x534e4544
 8000bfc:	0045      	.short	0x0045
	...

08000c00 <.text_17>:
 8000c00:	4d54534c 	.word	0x4d54534c
 8000c04:	00000000 	.word	0x00000000

08000c08 <.text_18>:
 8000c08:	4d524f4e 	.word	0x4d524f4e
 8000c0c:	00000000 	.word	0x00000000

08000c10 <.text_19>:
 8000c10:	4954504f 	.word	0x4954504f
 8000c14:	455a494d 	.word	0x455a494d
 8000c18:	4f435f44 	.word	0x4f435f44
 8000c1c:	4432564e 	.word	0x4432564e
 8000c20:	00000000 	.word	0x00000000

08000c24 <.text_20>:
 8000c24:	4d524550 	.word	0x4d524550
 8000c28:	00455455 	.word	0x00455455

08000c2c <.text_21>:
 8000c2c:	4c4f4f50 	.word	0x4c4f4f50
 8000c30:	00000000 	.word	0x00000000

08000c34 <.text_22>:
 8000c34:	494c5053 	.word	0x494c5053
 8000c38:	0054      	.short	0x0054
	...

08000c3c <.text_23>:
 8000c3c:	454d4954 	.word	0x454d4954
 8000c40:	4c45445f 	.word	0x4c45445f
 8000c44:	5941      	.short	0x5941
	...

08000c48 <.text_24>:
 8000c48:	454d4954 	.word	0x454d4954
 8000c4c:	5349445f 	.word	0x5349445f
 8000c50:	42495254 	.word	0x42495254
 8000c54:	44455455 	.word	0x44455455
 8000c58:	00000000 	.word	0x00000000

08000c5c <.text_25>:
 8000c5c:	434e4f43 	.word	0x434e4f43
 8000c60:	5441      	.short	0x5441
	...

08000c64 <.text_26>:
 8000c64:	4d4d4547 	.word	0x4d4d4547
 8000c68:	00000000 	.word	0x00000000

08000c6c <.text_27>:
 8000c6c:	41535055 	.word	0x41535055
 8000c70:	454c504d 	.word	0x454c504d
 8000c74:	00000000 	.word	0x00000000

08000c78 <.text_28>:
 8000c78:	57544c45 	.word	0x57544c45
 8000c7c:	00455349 	.word	0x00455349

08000c80 <.text_29>:
 8000c80:	454e4547 	.word	0x454e4547
 8000c84:	00434952 	.word	0x00434952

08000c88 <.text_30>:
 8000c88:	54534e49 	.word	0x54534e49
 8000c8c:	45434e41 	.word	0x45434e41
 8000c90:	4d524f4e 	.word	0x4d524f4e
 8000c94:	5a494c41 	.word	0x5a494c41
 8000c98:	4f495441 	.word	0x4f495441
 8000c9c:	004e      	.short	0x004e
	...

08000ca0 <.text_31>:
 8000ca0:	43494c53 	.word	0x43494c53
 8000ca4:	0045      	.short	0x0045
	...

08000ca8 <.text_32>:
 8000ca8:	454c4954 	.word	0x454c4954
 8000cac:	00000000 	.word	0x00000000

08000cb0 <.text_33>:
 8000cb0:	55444552 	.word	0x55444552
 8000cb4:	4543      	.short	0x4543
	...

08000cb8 <ai_check_custom_types::ref_signatures>:
 8000cb8:	8403 8404                                   ....

08000cbc <ai_conv2d_kernel_simple_f32>:
 8000cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000cc0:	b081      	sub	sp, #4
 8000cc2:	468b      	mov	fp, r1
 8000cc4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8000cc6:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8000cca:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8000ccc:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000cd0:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8000cd2:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
 8000cd6:	f8dd 904c 	ldr.w	r9, [sp, #76]	; 0x4c
 8000cda:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8000cde:	4619      	mov	r1, r3
 8000ce0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8000ce2:	eba5 0709 	sub.w	r7, r5, r9
 8000ce6:	fb07 f708 	mul.w	r7, r7, r8
 8000cea:	9700      	str	r7, [sp, #0]
 8000cec:	1ae4      	subs	r4, r4, r3
 8000cee:	fb05 f708 	mul.w	r7, r5, r8
 8000cf2:	fb05 650e 	mla	r5, r5, lr, r6
 8000cf6:	fb08 f505 	mul.w	r5, r8, r5
 8000cfa:	437c      	muls	r4, r7
 8000cfc:	eb01 0685 	add.w	r6, r1, r5, lsl #2
 8000d00:	45da      	cmp	sl, fp
 8000d02:	990c      	ldr	r1, [sp, #48]	; 0x30
 8000d04:	ebac 0009 	sub.w	r0, ip, r9
 8000d08:	bf0c      	ite	eq
 8000d0a:	ed9f 0aab 	vldreq	s0, [pc, #684]	; 8000fb8 <.text_4>
 8000d0e:	eeb7 0a00 	vmovne.f32	s0, #112	; 0x3f800000  1.0
 8000d12:	fb0c f50e 	mul.w	r5, ip, lr
 8000d16:	fb00 f008 	mul.w	r0, r0, r8
 8000d1a:	fb09 f908 	mul.w	r9, r9, r8
 8000d1e:	fb08 f505 	mul.w	r5, r8, r5
 8000d22:	2900      	cmp	r1, #0
 8000d24:	eb02 0885 	add.w	r8, r2, r5, lsl #2
 8000d28:	f000 8070 	beq.w	8000e0c <ai_conv2d_kernel_simple_f32+0x150>
 8000d2c:	f029 0203 	bic.w	r2, r9, #3
 8000d30:	edda 0a00 	vldr	s1, [sl]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	ee60 0a80 	vmul.f32	s1, s1, s0
 8000d3a:	46c4      	mov	ip, r8
 8000d3c:	dd5c      	ble.n	8000df8 <ai_conv2d_kernel_simple_f32+0x13c>
 8000d3e:	9d00      	ldr	r5, [sp, #0]
 8000d40:	469e      	mov	lr, r3
 8000d42:	2700      	movs	r7, #0
 8000d44:	2a00      	cmp	r2, #0
 8000d46:	dd1d      	ble.n	8000d84 <ai_conv2d_kernel_simple_f32+0xc8>
 8000d48:	ed96 4a00 	vldr	s8, [r6]
 8000d4c:	eddc 4a00 	vldr	s9, [ip]
 8000d50:	ed96 3a01 	vldr	s6, [r6, #4]
 8000d54:	eddc 3a01 	vldr	s7, [ip, #4]
 8000d58:	ed96 2a02 	vldr	s4, [r6, #8]
 8000d5c:	eddc 2a02 	vldr	s5, [ip, #8]
 8000d60:	ed96 1a03 	vldr	s2, [r6, #12]
 8000d64:	eddc 1a03 	vldr	s3, [ip, #12]
 8000d68:	ee44 0a24 	vmla.f32	s1, s8, s9
 8000d6c:	ee43 0a23 	vmla.f32	s1, s6, s7
 8000d70:	3610      	adds	r6, #16
 8000d72:	1d3f      	adds	r7, r7, #4
 8000d74:	ee42 0a22 	vmla.f32	s1, s4, s5
 8000d78:	4297      	cmp	r7, r2
 8000d7a:	ee41 0a21 	vmla.f32	s1, s2, s3
 8000d7e:	f10c 0c10 	add.w	ip, ip, #16
 8000d82:	dbe1      	blt.n	8000d48 <ai_conv2d_kernel_simple_f32+0x8c>
 8000d84:	454f      	cmp	r7, r9
 8000d86:	da2f      	bge.n	8000de8 <ai_conv2d_kernel_simple_f32+0x12c>
 8000d88:	1c7f      	adds	r7, r7, #1
 8000d8a:	ed96 1a00 	vldr	s2, [r6]
 8000d8e:	eddc 1a00 	vldr	s3, [ip]
 8000d92:	1d36      	adds	r6, r6, #4
 8000d94:	454f      	cmp	r7, r9
 8000d96:	ee41 0a21 	vmla.f32	s1, s2, s3
 8000d9a:	f10c 0c04 	add.w	ip, ip, #4
 8000d9e:	da23      	bge.n	8000de8 <ai_conv2d_kernel_simple_f32+0x12c>
 8000da0:	1c7f      	adds	r7, r7, #1
 8000da2:	ed96 1a00 	vldr	s2, [r6]
 8000da6:	eddc 1a00 	vldr	s3, [ip]
 8000daa:	1d36      	adds	r6, r6, #4
 8000dac:	454f      	cmp	r7, r9
 8000dae:	ee41 0a21 	vmla.f32	s1, s2, s3
 8000db2:	f10c 0c04 	add.w	ip, ip, #4
 8000db6:	da17      	bge.n	8000de8 <ai_conv2d_kernel_simple_f32+0x12c>
 8000db8:	1c7f      	adds	r7, r7, #1
 8000dba:	ed96 1a00 	vldr	s2, [r6]
 8000dbe:	eddc 1a00 	vldr	s3, [ip]
 8000dc2:	1d36      	adds	r6, r6, #4
 8000dc4:	454f      	cmp	r7, r9
 8000dc6:	ee41 0a21 	vmla.f32	s1, s2, s3
 8000dca:	f10c 0c04 	add.w	ip, ip, #4
 8000dce:	da0b      	bge.n	8000de8 <ai_conv2d_kernel_simple_f32+0x12c>
 8000dd0:	1c7f      	adds	r7, r7, #1
 8000dd2:	ed96 1a00 	vldr	s2, [r6]
 8000dd6:	eddc 1a00 	vldr	s3, [ip]
 8000dda:	1d36      	adds	r6, r6, #4
 8000ddc:	454f      	cmp	r7, r9
 8000dde:	ee41 0a21 	vmla.f32	s1, s2, s3
 8000de2:	f10c 0c04 	add.w	ip, ip, #4
 8000de6:	dbcf      	blt.n	8000d88 <ai_conv2d_kernel_simple_f32+0xcc>
 8000de8:	f1be 0e01 	subs.w	lr, lr, #1
 8000dec:	eb0c 0c80 	add.w	ip, ip, r0, lsl #2
 8000df0:	eb06 0685 	add.w	r6, r6, r5, lsl #2
 8000df4:	d1a5      	bne.n	8000d42 <ai_conv2d_kernel_simple_f32+0x86>
 8000df6:	9500      	str	r5, [sp, #0]
 8000df8:	edcb 0a00 	vstr	s1, [fp]
 8000dfc:	1e49      	subs	r1, r1, #1
 8000dfe:	eb06 0684 	add.w	r6, r6, r4, lsl #2
 8000e02:	f10b 0b04 	add.w	fp, fp, #4
 8000e06:	f10a 0a04 	add.w	sl, sl, #4
 8000e0a:	d191      	bne.n	8000d30 <ai_conv2d_kernel_simple_f32+0x74>
 8000e0c:	b001      	add	sp, #4
 8000e0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08000e14 <ai_conv2d_kernel_depthwise_f32>:
 8000e14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e18:	b081      	sub	sp, #4
 8000e1a:	b402      	push	{r1}
 8000e1c:	b084      	sub	sp, #16
 8000e1e:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8000e20:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
 8000e24:	f8dd 8044 	ldr.w	r8, [sp, #68]	; 0x44
 8000e28:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8000e2a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8000e2c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8000e2e:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
 8000e32:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8000e34:	f8dd e050 	ldr.w	lr, [sp, #80]	; 0x50
 8000e38:	9f16      	ldr	r7, [sp, #88]	; 0x58
 8000e3a:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8000e3e:	fbb6 f6fa 	udiv	r6, r6, sl
 8000e42:	eba8 0a00 	sub.w	sl, r8, r0
 8000e46:	fb0c fa0a 	mul.w	sl, ip, sl
 8000e4a:	1b09      	subs	r1, r1, r4
 8000e4c:	eba5 0c00 	sub.w	ip, r5, r0
 8000e50:	4369      	muls	r1, r5
 8000e52:	fb05 750e 	mla	r5, r5, lr, r7
 8000e56:	eb03 0785 	add.w	r7, r3, r5, lsl #2
 8000e5a:	9b04      	ldr	r3, [sp, #16]
 8000e5c:	4599      	cmp	r9, r3
 8000e5e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8000e60:	bf0c      	ite	eq
 8000e62:	ed9f 0a55 	vldreq	s0, [pc, #340]	; 8000fb8 <.text_4>
 8000e66:	eeb7 0a00 	vmovne.f32	s0, #112	; 0x3f800000  1.0
 8000e6a:	fb08 f50e 	mul.w	r5, r8, lr
 8000e6e:	435d      	muls	r5, r3
 8000e70:	eb02 0e85 	add.w	lr, r2, r5, lsl #2
 8000e74:	eb0e 0583 	add.w	r5, lr, r3, lsl #2
 8000e78:	45ae      	cmp	lr, r5
 8000e7a:	f04f 0800 	mov.w	r8, #0
 8000e7e:	9500      	str	r5, [sp, #0]
 8000e80:	f080 8097 	bcs.w	8000fb2 <ai_conv2d_kernel_depthwise_f32+0x19e>
 8000e84:	f020 0303 	bic.w	r3, r0, #3
 8000e88:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8000e8c:	9603      	str	r6, [sp, #12]
 8000e8e:	9a03      	ldr	r2, [sp, #12]
 8000e90:	2a00      	cmp	r2, #0
 8000e92:	f000 8088 	beq.w	8000fa6 <ai_conv2d_kernel_depthwise_f32+0x192>
 8000e96:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8000e98:	9e04      	ldr	r6, [sp, #16]
 8000e9a:	eb02 0988 	add.w	r9, r2, r8, lsl #2
 8000e9e:	9a03      	ldr	r2, [sp, #12]
 8000ea0:	9415      	str	r4, [sp, #84]	; 0x54
 8000ea2:	eb06 0688 	add.w	r6, r6, r8, lsl #2
 8000ea6:	9102      	str	r1, [sp, #8]
 8000ea8:	f8cd e004 	str.w	lr, [sp, #4]
 8000eac:	9915      	ldr	r1, [sp, #84]	; 0x54
 8000eae:	edd9 0a00 	vldr	s1, [r9]
 8000eb2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000eb6:	2900      	cmp	r1, #0
 8000eb8:	ee60 0a80 	vmul.f32	s1, s1, s0
 8000ebc:	dd63      	ble.n	8000f86 <ai_conv2d_kernel_depthwise_f32+0x172>
 8000ebe:	2400      	movs	r4, #0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	dd26      	ble.n	8000f12 <ai_conv2d_kernel_depthwise_f32+0xfe>
 8000ec4:	f8dd 503c 	ldr.w	r5, [sp, #60]	; 0x3c
 8000ec8:	ed97 1a00 	vldr	s2, [r7]
 8000ecc:	edde 1a00 	vldr	s3, [lr]
 8000ed0:	eb0e 0e85 	add.w	lr, lr, r5, lsl #2
 8000ed4:	ee41 0a21 	vmla.f32	s1, s2, s3
 8000ed8:	ed97 1a01 	vldr	s2, [r7, #4]
 8000edc:	edde 1a00 	vldr	s3, [lr]
 8000ee0:	eb0e 0e85 	add.w	lr, lr, r5, lsl #2
 8000ee4:	ee41 0a21 	vmla.f32	s1, s2, s3
 8000ee8:	ed97 1a02 	vldr	s2, [r7, #8]
 8000eec:	edde 1a00 	vldr	s3, [lr]
 8000ef0:	eb0e 0e85 	add.w	lr, lr, r5, lsl #2
 8000ef4:	ee41 0a21 	vmla.f32	s1, s2, s3
 8000ef8:	1d24      	adds	r4, r4, #4
 8000efa:	ed97 1a03 	vldr	s2, [r7, #12]
 8000efe:	edde 1a00 	vldr	s3, [lr]
 8000f02:	3710      	adds	r7, #16
 8000f04:	429c      	cmp	r4, r3
 8000f06:	ee41 0a21 	vmla.f32	s1, s2, s3
 8000f0a:	eb0e 0e85 	add.w	lr, lr, r5, lsl #2
 8000f0e:	dbdb      	blt.n	8000ec8 <ai_conv2d_kernel_depthwise_f32+0xb4>
 8000f10:	950f      	str	r5, [sp, #60]	; 0x3c
 8000f12:	4284      	cmp	r4, r0
 8000f14:	da31      	bge.n	8000f7a <ai_conv2d_kernel_depthwise_f32+0x166>
 8000f16:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8000f18:	1c64      	adds	r4, r4, #1
 8000f1a:	ed97 1a00 	vldr	s2, [r7]
 8000f1e:	edde 1a00 	vldr	s3, [lr]
 8000f22:	1d3f      	adds	r7, r7, #4
 8000f24:	4284      	cmp	r4, r0
 8000f26:	ee41 0a21 	vmla.f32	s1, s2, s3
 8000f2a:	eb0e 0e85 	add.w	lr, lr, r5, lsl #2
 8000f2e:	da23      	bge.n	8000f78 <ai_conv2d_kernel_depthwise_f32+0x164>
 8000f30:	1c64      	adds	r4, r4, #1
 8000f32:	ed97 1a00 	vldr	s2, [r7]
 8000f36:	edde 1a00 	vldr	s3, [lr]
 8000f3a:	1d3f      	adds	r7, r7, #4
 8000f3c:	4284      	cmp	r4, r0
 8000f3e:	ee41 0a21 	vmla.f32	s1, s2, s3
 8000f42:	eb0e 0e85 	add.w	lr, lr, r5, lsl #2
 8000f46:	da17      	bge.n	8000f78 <ai_conv2d_kernel_depthwise_f32+0x164>
 8000f48:	1c64      	adds	r4, r4, #1
 8000f4a:	ed97 1a00 	vldr	s2, [r7]
 8000f4e:	edde 1a00 	vldr	s3, [lr]
 8000f52:	1d3f      	adds	r7, r7, #4
 8000f54:	4284      	cmp	r4, r0
 8000f56:	ee41 0a21 	vmla.f32	s1, s2, s3
 8000f5a:	eb0e 0e85 	add.w	lr, lr, r5, lsl #2
 8000f5e:	da0b      	bge.n	8000f78 <ai_conv2d_kernel_depthwise_f32+0x164>
 8000f60:	1c64      	adds	r4, r4, #1
 8000f62:	ed97 1a00 	vldr	s2, [r7]
 8000f66:	edde 1a00 	vldr	s3, [lr]
 8000f6a:	1d3f      	adds	r7, r7, #4
 8000f6c:	4284      	cmp	r4, r0
 8000f6e:	ee41 0a21 	vmla.f32	s1, s2, s3
 8000f72:	eb0e 0e85 	add.w	lr, lr, r5, lsl #2
 8000f76:	dbcf      	blt.n	8000f18 <ai_conv2d_kernel_depthwise_f32+0x104>
 8000f78:	950f      	str	r5, [sp, #60]	; 0x3c
 8000f7a:	1e49      	subs	r1, r1, #1
 8000f7c:	eb0e 0e8a 	add.w	lr, lr, sl, lsl #2
 8000f80:	eb07 078c 	add.w	r7, r7, ip, lsl #2
 8000f84:	d19b      	bne.n	8000ebe <ai_conv2d_kernel_depthwise_f32+0xaa>
 8000f86:	9902      	ldr	r1, [sp, #8]
 8000f88:	edc6 0a00 	vstr	s1, [r6]
 8000f8c:	1d36      	adds	r6, r6, #4
 8000f8e:	1e52      	subs	r2, r2, #1
 8000f90:	eb07 0781 	add.w	r7, r7, r1, lsl #2
 8000f94:	f108 0801 	add.w	r8, r8, #1
 8000f98:	f109 0904 	add.w	r9, r9, #4
 8000f9c:	d186      	bne.n	8000eac <ai_conv2d_kernel_depthwise_f32+0x98>
 8000f9e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8000fa0:	9902      	ldr	r1, [sp, #8]
 8000fa2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000fa6:	9a00      	ldr	r2, [sp, #0]
 8000fa8:	f10e 0e04 	add.w	lr, lr, #4
 8000fac:	4596      	cmp	lr, r2
 8000fae:	f4ff af6e 	bcc.w	8000e8e <ai_conv2d_kernel_depthwise_f32+0x7a>
 8000fb2:	b006      	add	sp, #24
 8000fb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08000fb8 <.text_4>:
 8000fb8:	00000000 	.word	0x00000000

08000fbc <ai_conv2d_kernel_group_f32>:
 8000fbc:	e92d 4ffa 	stmdb	sp!, {r1, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000fc0:	b085      	sub	sp, #20
 8000fc2:	4693      	mov	fp, r2
 8000fc4:	f9bd 9050 	ldrsh.w	r9, [sp, #80]	; 0x50
 8000fc8:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 8000fca:	9912      	ldr	r1, [sp, #72]	; 0x48
 8000fcc:	f9bd 8054 	ldrsh.w	r8, [sp, #84]	; 0x54
 8000fd0:	f8dd e05c 	ldr.w	lr, [sp, #92]	; 0x5c
 8000fd4:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8000fd6:	9f19      	ldr	r7, [sp, #100]	; 0x64
 8000fd8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8000fda:	981c      	ldr	r0, [sp, #112]	; 0x70
 8000fdc:	46ca      	mov	sl, r9
 8000fde:	4655      	mov	r5, sl
 8000fe0:	ebaa 0c04 	sub.w	ip, sl, r4
 8000fe4:	fb94 f6f5 	sdiv	r6, r4, r5
 8000fe8:	fb05 c506 	mla	r5, r5, r6, ip
 8000fec:	fb95 fcfa 	sdiv	ip, r5, sl
 8000ff0:	fb0a 551c 	mls	r5, sl, ip, r5
 8000ff4:	9501      	str	r5, [sp, #4]
 8000ff6:	4454      	add	r4, sl
 8000ff8:	4645      	mov	r5, r8
 8000ffa:	1bee      	subs	r6, r5, r7
 8000ffc:	fb97 fcf5 	sdiv	ip, r7, r5
 8001000:	fb05 6c0c 	mla	ip, r5, ip, r6
 8001004:	fb9c f6f5 	sdiv	r6, ip, r5
 8001008:	fb05 cc16 	mls	ip, r5, r6, ip
 800100c:	f8cd c000 	str.w	ip, [sp]
 8001010:	1e64      	subs	r4, r4, #1
 8001012:	9e01      	ldr	r6, [sp, #4]
 8001014:	1b80      	subs	r0, r0, r6
 8001016:	4450      	add	r0, sl
 8001018:	1e40      	subs	r0, r0, #1
 800101a:	fb90 f0fa 	sdiv	r0, r0, sl
 800101e:	9e00      	ldr	r6, [sp, #0]
 8001020:	1b9b      	subs	r3, r3, r6
 8001022:	fbb1 f6f2 	udiv	r6, r1, r2
 8001026:	18eb      	adds	r3, r5, r3
 8001028:	1e5b      	subs	r3, r3, #1
 800102a:	fb93 fcf5 	sdiv	ip, r3, r5
 800102e:	ebae 0e0c 	sub.w	lr, lr, ip
 8001032:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8001034:	9604      	str	r6, [sp, #16]
 8001036:	fbb3 f3f2 	udiv	r3, r3, r2
 800103a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800103c:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800103e:	fb01 f808 	mul.w	r8, r1, r8
 8001042:	fb00 881a 	mls	r8, r0, sl, r8
 8001046:	fb06 f808 	mul.w	r8, r6, r8
 800104a:	fb06 f109 	mul.w	r1, r6, r9
 800104e:	9e16      	ldr	r6, [sp, #88]	; 0x58
 8001050:	435e      	muls	r6, r3
 8001052:	fb0e fe06 	mul.w	lr, lr, r6
 8001056:	19ee      	adds	r6, r5, r7
 8001058:	1e76      	subs	r6, r6, #1
 800105a:	fb96 f5f5 	sdiv	r5, r6, r5
 800105e:	9e16      	ldr	r6, [sp, #88]	; 0x58
 8001060:	fb94 f4fa 	sdiv	r4, r4, sl
 8001064:	eba1 0903 	sub.w	r9, r1, r3
 8001068:	fb06 4405 	mla	r4, r6, r5, r4
 800106c:	9e06      	ldr	r6, [sp, #24]
 800106e:	9916      	ldr	r1, [sp, #88]	; 0x58
 8001070:	9d05      	ldr	r5, [sp, #20]
 8001072:	435c      	muls	r4, r3
 8001074:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8001078:	1a09      	subs	r1, r1, r0
 800107a:	9e10      	ldr	r6, [sp, #64]	; 0x40
 800107c:	4359      	muls	r1, r3
 800107e:	42ae      	cmp	r6, r5
 8001080:	9d00      	ldr	r5, [sp, #0]
 8001082:	9e01      	ldr	r6, [sp, #4]
 8001084:	442f      	add	r7, r5
 8001086:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8001088:	fb05 6507 	mla	r5, r5, r7, r6
 800108c:	9f11      	ldr	r7, [sp, #68]	; 0x44
 800108e:	bf0c      	ite	eq
 8001090:	ed9f 0a3d 	vldreq	s0, [pc, #244]	; 8001188 <.text_6>
 8001094:	eeb7 0a00 	vmovne.f32	s0, #112	; 0x3f800000  1.0
 8001098:	437d      	muls	r5, r7
 800109a:	2a00      	cmp	r2, #0
 800109c:	eb0b 0585 	add.w	r5, fp, r5, lsl #2
 80010a0:	f04f 0a00 	mov.w	sl, #0
 80010a4:	d06d      	beq.n	8001182 <ai_conv2d_kernel_group_f32+0x1c6>
 80010a6:	9200      	str	r2, [sp, #0]
 80010a8:	9a04      	ldr	r2, [sp, #16]
 80010aa:	2a00      	cmp	r2, #0
 80010ac:	d063      	beq.n	8001176 <ai_conv2d_kernel_group_f32+0x1ba>
 80010ae:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80010b0:	9f05      	ldr	r7, [sp, #20]
 80010b2:	f8cd c004 	str.w	ip, [sp, #4]
 80010b6:	eb02 0b8a 	add.w	fp, r2, sl, lsl #2
 80010ba:	9a04      	ldr	r2, [sp, #16]
 80010bc:	f8cd e00c 	str.w	lr, [sp, #12]
 80010c0:	eb07 078a 	add.w	r7, r7, sl, lsl #2
 80010c4:	f8cd 5008 	str.w	r5, [sp, #8]
 80010c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80010cc:	eddb 0a00 	vldr	s1, [fp]
 80010d0:	9d02      	ldr	r5, [sp, #8]
 80010d2:	f1be 0f01 	cmp.w	lr, #1
 80010d6:	ee60 0a80 	vmul.f32	s1, s1, s0
 80010da:	db3b      	blt.n	8001154 <ai_conv2d_kernel_group_f32+0x198>
 80010dc:	2801      	cmp	r0, #1
 80010de:	db32      	blt.n	8001146 <ai_conv2d_kernel_group_f32+0x18a>
 80010e0:	ea4f 0c00 	mov.w	ip, r0
 80010e4:	eb05 0683 	add.w	r6, r5, r3, lsl #2
 80010e8:	42b5      	cmp	r5, r6
 80010ea:	d227      	bcs.n	800113c <ai_conv2d_kernel_group_f32+0x180>
 80010ec:	ed94 1a00 	vldr	s2, [r4]
 80010f0:	edd5 1a00 	vldr	s3, [r5]
 80010f4:	1d24      	adds	r4, r4, #4
 80010f6:	1d2d      	adds	r5, r5, #4
 80010f8:	42b5      	cmp	r5, r6
 80010fa:	ee41 0a21 	vmla.f32	s1, s2, s3
 80010fe:	d21d      	bcs.n	800113c <ai_conv2d_kernel_group_f32+0x180>
 8001100:	ed94 1a00 	vldr	s2, [r4]
 8001104:	edd5 1a00 	vldr	s3, [r5]
 8001108:	1d24      	adds	r4, r4, #4
 800110a:	1d2d      	adds	r5, r5, #4
 800110c:	42b5      	cmp	r5, r6
 800110e:	ee41 0a21 	vmla.f32	s1, s2, s3
 8001112:	d213      	bcs.n	800113c <ai_conv2d_kernel_group_f32+0x180>
 8001114:	ed94 1a00 	vldr	s2, [r4]
 8001118:	edd5 1a00 	vldr	s3, [r5]
 800111c:	1d24      	adds	r4, r4, #4
 800111e:	1d2d      	adds	r5, r5, #4
 8001120:	42b5      	cmp	r5, r6
 8001122:	ee41 0a21 	vmla.f32	s1, s2, s3
 8001126:	d209      	bcs.n	800113c <ai_conv2d_kernel_group_f32+0x180>
 8001128:	ed94 1a00 	vldr	s2, [r4]
 800112c:	edd5 1a00 	vldr	s3, [r5]
 8001130:	1d24      	adds	r4, r4, #4
 8001132:	1d2d      	adds	r5, r5, #4
 8001134:	42b5      	cmp	r5, r6
 8001136:	ee41 0a21 	vmla.f32	s1, s2, s3
 800113a:	d3d7      	bcc.n	80010ec <ai_conv2d_kernel_group_f32+0x130>
 800113c:	f1bc 0c01 	subs.w	ip, ip, #1
 8001140:	eb05 0589 	add.w	r5, r5, r9, lsl #2
 8001144:	d1ce      	bne.n	80010e4 <ai_conv2d_kernel_group_f32+0x128>
 8001146:	f1be 0e01 	subs.w	lr, lr, #1
 800114a:	eb05 0588 	add.w	r5, r5, r8, lsl #2
 800114e:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8001152:	d1c3      	bne.n	80010dc <ai_conv2d_kernel_group_f32+0x120>
 8001154:	9d03      	ldr	r5, [sp, #12]
 8001156:	edc7 0a00 	vstr	s1, [r7]
 800115a:	1d3f      	adds	r7, r7, #4
 800115c:	1e52      	subs	r2, r2, #1
 800115e:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 8001162:	f10a 0a01 	add.w	sl, sl, #1
 8001166:	f10b 0b04 	add.w	fp, fp, #4
 800116a:	d1ad      	bne.n	80010c8 <ai_conv2d_kernel_group_f32+0x10c>
 800116c:	f8dd c004 	ldr.w	ip, [sp, #4]
 8001170:	f8dd e00c 	ldr.w	lr, [sp, #12]
 8001174:	9d02      	ldr	r5, [sp, #8]
 8001176:	9a00      	ldr	r2, [sp, #0]
 8001178:	1e52      	subs	r2, r2, #1
 800117a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 800117e:	9200      	str	r2, [sp, #0]
 8001180:	d192      	bne.n	80010a8 <ai_conv2d_kernel_group_f32+0xec>
 8001182:	b007      	add	sp, #28
 8001184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001188 <.text_6>:
 8001188:	00000000 	.word	0x00000000

0800118c <ai_conv2d_kernel_f32>:
 800118c:	e92d 4ff2 	stmdb	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001190:	b090      	sub	sp, #64	; 0x40
 8001192:	991a      	ldr	r1, [sp, #104]	; 0x68
 8001194:	b901      	cbnz	r1, 8001198 <ai_conv2d_kernel_f32+0xc>
 8001196:	9910      	ldr	r1, [sp, #64]	; 0x40
 8001198:	9c26      	ldr	r4, [sp, #152]	; 0x98
 800119a:	9e25      	ldr	r6, [sp, #148]	; 0x94
 800119c:	9d24      	ldr	r5, [sp, #144]	; 0x90
 800119e:	9f23      	ldr	r7, [sp, #140]	; 0x8c
 80011a0:	f8dd e088 	ldr.w	lr, [sp, #136]	; 0x88
 80011a4:	f9bd c078 	ldrsh.w	ip, [sp, #120]	; 0x78
 80011a8:	f9bd 807c 	ldrsh.w	r8, [sp, #124]	; 0x7c
 80011ac:	900f      	str	r0, [sp, #60]	; 0x3c
 80011ae:	1bed      	subs	r5, r5, r7
 80011b0:	1ba4      	subs	r4, r4, r6
 80011b2:	920e      	str	r2, [sp, #56]	; 0x38
 80011b4:	930d      	str	r3, [sp, #52]	; 0x34
 80011b6:	f1be 0f01 	cmp.w	lr, #1
 80011ba:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80011bc:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80011be:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80011c0:	f8dd 9080 	ldr.w	r9, [sp, #128]	; 0x80
 80011c4:	f8dd a084 	ldr.w	sl, [sp, #132]	; 0x84
 80011c8:	bf04      	itt	eq
 80011ca:	fb1c fb08 	smulbbeq	fp, ip, r8
 80011ce:	f1bb 0f01 	cmpeq.w	fp, #1
 80011d2:	d114      	bne.n	80011fe <ai_conv2d_kernel_f32+0x72>
 80011d4:	9303      	str	r3, [sp, #12]
 80011d6:	9202      	str	r2, [sp, #8]
 80011d8:	9001      	str	r0, [sp, #4]
 80011da:	9100      	str	r1, [sp, #0]
 80011dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80011de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80011e0:	9910      	ldr	r1, [sp, #64]	; 0x40
 80011e2:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80011e4:	9409      	str	r4, [sp, #36]	; 0x24
 80011e6:	9608      	str	r6, [sp, #32]
 80011e8:	9507      	str	r5, [sp, #28]
 80011ea:	9706      	str	r7, [sp, #24]
 80011ec:	f8cd a014 	str.w	sl, [sp, #20]
 80011f0:	f8cd 9010 	str.w	r9, [sp, #16]
 80011f4:	f7ff fd62 	bl	8000cbc <ai_conv2d_kernel_simple_f32>
 80011f8:	b011      	add	sp, #68	; 0x44
 80011fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80011fe:	4586      	cmp	lr, r0
 8001200:	bf04      	itt	eq
 8001202:	fb1c fb08 	smulbbeq	fp, ip, r8
 8001206:	f1bb 0f01 	cmpeq.w	fp, #1
 800120a:	d114      	bne.n	8001236 <ai_conv2d_kernel_f32+0xaa>
 800120c:	9303      	str	r3, [sp, #12]
 800120e:	9202      	str	r2, [sp, #8]
 8001210:	9001      	str	r0, [sp, #4]
 8001212:	9100      	str	r1, [sp, #0]
 8001214:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001216:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8001218:	9910      	ldr	r1, [sp, #64]	; 0x40
 800121a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800121c:	9409      	str	r4, [sp, #36]	; 0x24
 800121e:	9608      	str	r6, [sp, #32]
 8001220:	9507      	str	r5, [sp, #28]
 8001222:	9706      	str	r7, [sp, #24]
 8001224:	f8cd a014 	str.w	sl, [sp, #20]
 8001228:	f8cd 9010 	str.w	r9, [sp, #16]
 800122c:	f7ff fdf2 	bl	8000e14 <ai_conv2d_kernel_depthwise_f32>
 8001230:	b011      	add	sp, #68	; 0x44
 8001232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001236:	9303      	str	r3, [sp, #12]
 8001238:	9202      	str	r2, [sp, #8]
 800123a:	9001      	str	r0, [sp, #4]
 800123c:	9100      	str	r1, [sp, #0]
 800123e:	f8cd e020 	str.w	lr, [sp, #32]
 8001242:	f8cd c010 	str.w	ip, [sp, #16]
 8001246:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001248:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800124a:	9910      	ldr	r1, [sp, #64]	; 0x40
 800124c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800124e:	940c      	str	r4, [sp, #48]	; 0x30
 8001250:	960b      	str	r6, [sp, #44]	; 0x2c
 8001252:	950a      	str	r5, [sp, #40]	; 0x28
 8001254:	9709      	str	r7, [sp, #36]	; 0x24
 8001256:	f8cd a01c 	str.w	sl, [sp, #28]
 800125a:	f8cd 9018 	str.w	r9, [sp, #24]
 800125e:	f8cd 8014 	str.w	r8, [sp, #20]
 8001262:	f7ff feab 	bl	8000fbc <ai_conv2d_kernel_group_f32>
 8001266:	b011      	add	sp, #68	; 0x44
 8001268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800126c <ai_conv2d_stripe_f32>:
 800126c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001270:	b091      	sub	sp, #68	; 0x44
 8001272:	4604      	mov	r4, r0
 8001274:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8001278:	9d1e      	ldr	r5, [sp, #120]	; 0x78
 800127a:	f8dd b094 	ldr.w	fp, [sp, #148]	; 0x94
 800127e:	9826      	ldr	r0, [sp, #152]	; 0x98
 8001280:	fb08 b000 	mla	r0, r8, r0, fp
 8001284:	2d00      	cmp	r5, #0
 8001286:	9001      	str	r0, [sp, #4]
 8001288:	d05d      	beq.n	8001346 <ai_conv2d_stripe_f32+0xda>
 800128a:	9102      	str	r1, [sp, #8]
 800128c:	920e      	str	r2, [sp, #56]	; 0x38
 800128e:	9500      	str	r5, [sp, #0]
 8001290:	930d      	str	r3, [sp, #52]	; 0x34
 8001292:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8001294:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8001296:	971a      	str	r7, [sp, #104]	; 0x68
 8001298:	4625      	mov	r5, r4
 800129a:	950f      	str	r5, [sp, #60]	; 0x3c
 800129c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800129e:	9c20      	ldr	r4, [sp, #128]	; 0x80
 80012a0:	f8dd c088 	ldr.w	ip, [sp, #136]	; 0x88
 80012a4:	f8dd e08c 	ldr.w	lr, [sp, #140]	; 0x8c
 80012a8:	9821      	ldr	r0, [sp, #132]	; 0x84
 80012aa:	f8dd 906c 	ldr.w	r9, [sp, #108]	; 0x6c
 80012ae:	f9bd 10a0 	ldrsh.w	r1, [sp, #160]	; 0xa0
 80012b2:	f9bd 20a4 	ldrsh.w	r2, [sp, #164]	; 0xa4
 80012b6:	9d02      	ldr	r5, [sp, #8]
 80012b8:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 80012ba:	931f      	str	r3, [sp, #124]	; 0x7c
 80012bc:	9420      	str	r4, [sp, #128]	; 0x80
 80012be:	f8cd c088 	str.w	ip, [sp, #136]	; 0x88
 80012c2:	f8cd e08c 	str.w	lr, [sp, #140]	; 0x8c
 80012c6:	9624      	str	r6, [sp, #144]	; 0x90
 80012c8:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 80012ca:	f8dd a004 	ldr.w	sl, [sp, #4]
 80012ce:	9c00      	ldr	r4, [sp, #0]
 80012d0:	f8ad 10a0 	strh.w	r1, [sp, #160]	; 0xa0
 80012d4:	f8ad 20a4 	strh.w	r2, [sp, #164]	; 0xa4
 80012d8:	f8ad 0084 	strh.w	r0, [sp, #132]	; 0x84
 80012dc:	f1db 0000 	rsbs	r0, fp, #0
 80012e0:	bfd8      	it	le
 80012e2:	2000      	movle	r0, #0
 80012e4:	eba8 010b 	sub.w	r1, r8, fp
 80012e8:	42b1      	cmp	r1, r6
 80012ea:	bf28      	it	cs
 80012ec:	4631      	movcs	r1, r6
 80012ee:	910c      	str	r1, [sp, #48]	; 0x30
 80012f0:	900b      	str	r0, [sp, #44]	; 0x2c
 80012f2:	f8cd 800c 	str.w	r8, [sp, #12]
 80012f6:	9702      	str	r7, [sp, #8]
 80012f8:	f8cd 9004 	str.w	r9, [sp, #4]
 80012fc:	4450      	add	r0, sl
 80012fe:	9924      	ldr	r1, [sp, #144]	; 0x90
 8001300:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8001302:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001304:	910a      	str	r1, [sp, #40]	; 0x28
 8001306:	9209      	str	r2, [sp, #36]	; 0x24
 8001308:	fb00 f009 	mul.w	r0, r0, r9
 800130c:	9922      	ldr	r1, [sp, #136]	; 0x88
 800130e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8001310:	9108      	str	r1, [sp, #32]
 8001312:	9207      	str	r2, [sp, #28]
 8001314:	991f      	ldr	r1, [sp, #124]	; 0x7c
 8001316:	f9bd 20a4 	ldrsh.w	r2, [sp, #164]	; 0xa4
 800131a:	9106      	str	r1, [sp, #24]
 800131c:	9205      	str	r2, [sp, #20]
 800131e:	f9bd 10a0 	ldrsh.w	r1, [sp, #160]	; 0xa0
 8001322:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8001324:	9104      	str	r1, [sp, #16]
 8001326:	9200      	str	r2, [sp, #0]
 8001328:	990e      	ldr	r1, [sp, #56]	; 0x38
 800132a:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 800132e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8001330:	4629      	mov	r1, r5
 8001332:	f7ff ff2b 	bl	800118c <ai_conv2d_kernel_f32>
 8001336:	f8bd 0084 	ldrh.w	r0, [sp, #132]	; 0x84
 800133a:	1e64      	subs	r4, r4, #1
 800133c:	eb05 0587 	add.w	r5, r5, r7, lsl #2
 8001340:	4483      	add	fp, r0
 8001342:	4482      	add	sl, r0
 8001344:	d1ca      	bne.n	80012dc <ai_conv2d_stripe_f32+0x70>
 8001346:	b011      	add	sp, #68	; 0x44
 8001348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800134c <func_dummy>:
 800134c:	4770      	bx	lr
	...

08001350 <ai_dict8_dot_array_f32>:
 8001350:	b4f0      	push	{r4, r5, r6, r7}
 8001352:	4604      	mov	r4, r0
 8001354:	9804      	ldr	r0, [sp, #16]
 8001356:	eb03 0580 	add.w	r5, r3, r0, lsl #2
 800135a:	3d20      	subs	r5, #32
 800135c:	2808      	cmp	r0, #8
 800135e:	ed9f 0ad9 	vldr	s0, [pc, #868]	; 80016c4 <.text_12>
 8001362:	d22f      	bcs.n	80013c4 <ai_dict8_dot_array_f32+0x74>
 8001364:	3520      	adds	r5, #32
 8001366:	42ab      	cmp	r3, r5
 8001368:	d224      	bcs.n	80013b4 <ai_dict8_dot_array_f32+0x64>
 800136a:	7808      	ldrb	r0, [r1, #0]
 800136c:	ed93 1a00 	vldr	s2, [r3]
 8001370:	eb02 0680 	add.w	r6, r2, r0, lsl #2
 8001374:	1d18      	adds	r0, r3, #4
 8001376:	edd6 0a00 	vldr	s1, [r6]
 800137a:	42a8      	cmp	r0, r5
 800137c:	ee00 0a81 	vmla.f32	s0, s1, s2
 8001380:	d218      	bcs.n	80013b4 <ai_dict8_dot_array_f32+0x64>
 8001382:	784b      	ldrb	r3, [r1, #1]
 8001384:	ed90 1a00 	vldr	s2, [r0]
 8001388:	eb02 0683 	add.w	r6, r2, r3, lsl #2
 800138c:	1d00      	adds	r0, r0, #4
 800138e:	edd6 0a00 	vldr	s1, [r6]
 8001392:	42a8      	cmp	r0, r5
 8001394:	ee00 0a81 	vmla.f32	s0, s1, s2
 8001398:	d20c      	bcs.n	80013b4 <ai_dict8_dot_array_f32+0x64>
 800139a:	788b      	ldrb	r3, [r1, #2]
 800139c:	ed90 1a00 	vldr	s2, [r0]
 80013a0:	eb02 0683 	add.w	r6, r2, r3, lsl #2
 80013a4:	1d03      	adds	r3, r0, #4
 80013a6:	1cc9      	adds	r1, r1, #3
 80013a8:	edd6 0a00 	vldr	s1, [r6]
 80013ac:	42ab      	cmp	r3, r5
 80013ae:	ee00 0a81 	vmla.f32	s0, s1, s2
 80013b2:	d3da      	bcc.n	800136a <ai_dict8_dot_array_f32+0x1a>
 80013b4:	edd4 0a00 	vldr	s1, [r4]
 80013b8:	ee30 0a80 	vadd.f32	s0, s1, s0
 80013bc:	ed84 0a00 	vstr	s0, [r4]
 80013c0:	bcf0      	pop	{r4, r5, r6, r7}
 80013c2:	4770      	bx	lr
 80013c4:	f001 0003 	and.w	r0, r1, #3
 80013c8:	2803      	cmp	r0, #3
 80013ca:	d8f3      	bhi.n	80013b4 <ai_dict8_dot_array_f32+0x64>
 80013cc:	e8df f000 	tbb	[pc, r0]
 80013d0:	4c413603 	.word	0x4c413603
 80013d4:	e7ee      	b.n	80013b4 <ai_dict8_dot_array_f32+0x64>
 80013d6:	429d      	cmp	r5, r3
 80013d8:	f080 80d5 	bcs.w	8001586 <ai_dict8_dot_array_f32+0x236>
 80013dc:	3520      	adds	r5, #32
 80013de:	42ab      	cmp	r3, r5
 80013e0:	d2e8      	bcs.n	80013b4 <ai_dict8_dot_array_f32+0x64>
 80013e2:	7808      	ldrb	r0, [r1, #0]
 80013e4:	ed93 1a00 	vldr	s2, [r3]
 80013e8:	eb02 0680 	add.w	r6, r2, r0, lsl #2
 80013ec:	1d18      	adds	r0, r3, #4
 80013ee:	edd6 0a00 	vldr	s1, [r6]
 80013f2:	42a8      	cmp	r0, r5
 80013f4:	ee00 0a81 	vmla.f32	s0, s1, s2
 80013f8:	d2dc      	bcs.n	80013b4 <ai_dict8_dot_array_f32+0x64>
 80013fa:	784b      	ldrb	r3, [r1, #1]
 80013fc:	ed90 1a00 	vldr	s2, [r0]
 8001400:	eb02 0683 	add.w	r6, r2, r3, lsl #2
 8001404:	1d00      	adds	r0, r0, #4
 8001406:	edd6 0a00 	vldr	s1, [r6]
 800140a:	42a8      	cmp	r0, r5
 800140c:	ee00 0a81 	vmla.f32	s0, s1, s2
 8001410:	d2d0      	bcs.n	80013b4 <ai_dict8_dot_array_f32+0x64>
 8001412:	788b      	ldrb	r3, [r1, #2]
 8001414:	ed90 1a00 	vldr	s2, [r0]
 8001418:	eb02 0683 	add.w	r6, r2, r3, lsl #2
 800141c:	1d03      	adds	r3, r0, #4
 800141e:	1cc9      	adds	r1, r1, #3
 8001420:	edd6 0a00 	vldr	s1, [r6]
 8001424:	42ab      	cmp	r3, r5
 8001426:	ee00 0a81 	vmla.f32	s0, s1, s2
 800142a:	d3da      	bcc.n	80013e2 <ai_dict8_dot_array_f32+0x92>
 800142c:	edd4 0a00 	vldr	s1, [r4]
 8001430:	ee30 0a80 	vadd.f32	s0, s1, s0
 8001434:	ed84 0a00 	vstr	s0, [r4]
 8001438:	bcf0      	pop	{r4, r5, r6, r7}
 800143a:	4770      	bx	lr
 800143c:	f811 0b01 	ldrb.w	r0, [r1], #1
 8001440:	ed93 1a00 	vldr	s2, [r3]
 8001444:	eb02 0680 	add.w	r6, r2, r0, lsl #2
 8001448:	1d1b      	adds	r3, r3, #4
 800144a:	edd6 0a00 	vldr	s1, [r6]
 800144e:	ee00 0a81 	vmla.f32	s0, s1, s2
 8001452:	f811 0b01 	ldrb.w	r0, [r1], #1
 8001456:	ed93 1a00 	vldr	s2, [r3]
 800145a:	eb02 0680 	add.w	r6, r2, r0, lsl #2
 800145e:	1d1b      	adds	r3, r3, #4
 8001460:	edd6 0a00 	vldr	s1, [r6]
 8001464:	ee00 0a81 	vmla.f32	s0, s1, s2
 8001468:	f811 0b01 	ldrb.w	r0, [r1], #1
 800146c:	ed93 1a00 	vldr	s2, [r3]
 8001470:	eb02 0680 	add.w	r6, r2, r0, lsl #2
 8001474:	1d1b      	adds	r3, r3, #4
 8001476:	edd6 0a00 	vldr	s1, [r6]
 800147a:	429d      	cmp	r5, r3
 800147c:	ee00 0a81 	vmla.f32	s0, s1, s2
 8001480:	d34e      	bcc.n	8001520 <ai_dict8_dot_array_f32+0x1d0>
 8001482:	78cf      	ldrb	r7, [r1, #3]
 8001484:	ed93 4a00 	vldr	s8, [r3]
 8001488:	ed93 3a01 	vldr	s6, [r3, #4]
 800148c:	ed93 2a02 	vldr	s4, [r3, #8]
 8001490:	ed93 1a03 	vldr	s2, [r3, #12]
 8001494:	eb02 0687 	add.w	r6, r2, r7, lsl #2
 8001498:	788f      	ldrb	r7, [r1, #2]
 800149a:	edd6 0a00 	vldr	s1, [r6]
 800149e:	eb02 0687 	add.w	r6, r2, r7, lsl #2
 80014a2:	784f      	ldrb	r7, [r1, #1]
 80014a4:	edd6 1a00 	vldr	s3, [r6]
 80014a8:	eb02 0687 	add.w	r6, r2, r7, lsl #2
 80014ac:	780f      	ldrb	r7, [r1, #0]
 80014ae:	edd6 2a00 	vldr	s5, [r6]
 80014b2:	eb02 0687 	add.w	r6, r2, r7, lsl #2
 80014b6:	f103 0010 	add.w	r0, r3, #16
 80014ba:	edd6 3a00 	vldr	s7, [r6]
 80014be:	790b      	ldrb	r3, [r1, #4]
 80014c0:	ee03 0a84 	vmla.f32	s0, s7, s8
 80014c4:	ee02 0a83 	vmla.f32	s0, s5, s6
 80014c8:	ee01 0a82 	vmla.f32	s0, s3, s4
 80014cc:	eb02 0783 	add.w	r7, r2, r3, lsl #2
 80014d0:	ee00 0a81 	vmla.f32	s0, s1, s2
 80014d4:	794b      	ldrb	r3, [r1, #5]
 80014d6:	edd7 0a00 	vldr	s1, [r7]
 80014da:	ed90 4a00 	vldr	s8, [r0]
 80014de:	edd0 3a01 	vldr	s7, [r0, #4]
 80014e2:	ed90 3a02 	vldr	s6, [r0, #8]
 80014e6:	edd0 2a03 	vldr	s5, [r0, #12]
 80014ea:	eb02 0783 	add.w	r7, r2, r3, lsl #2
 80014ee:	798b      	ldrb	r3, [r1, #6]
 80014f0:	ed97 1a00 	vldr	s2, [r7]
 80014f4:	eb02 0783 	add.w	r7, r2, r3, lsl #2
 80014f8:	79cb      	ldrb	r3, [r1, #7]
 80014fa:	edd7 1a00 	vldr	s3, [r7]
 80014fe:	eb02 0783 	add.w	r7, r2, r3, lsl #2
 8001502:	ee00 0a84 	vmla.f32	s0, s1, s8
 8001506:	3108      	adds	r1, #8
 8001508:	f100 0310 	add.w	r3, r0, #16
 800150c:	ee01 0a23 	vmla.f32	s0, s2, s7
 8001510:	ed97 2a00 	vldr	s4, [r7]
 8001514:	ee01 0a83 	vmla.f32	s0, s3, s6
 8001518:	429d      	cmp	r5, r3
 800151a:	ee02 0a22 	vmla.f32	s0, s4, s5
 800151e:	d2b0      	bcs.n	8001482 <ai_dict8_dot_array_f32+0x132>
 8001520:	3520      	adds	r5, #32
 8001522:	42ab      	cmp	r3, r5
 8001524:	f4bf af46 	bcs.w	80013b4 <ai_dict8_dot_array_f32+0x64>
 8001528:	7808      	ldrb	r0, [r1, #0]
 800152a:	ed93 1a00 	vldr	s2, [r3]
 800152e:	eb02 0680 	add.w	r6, r2, r0, lsl #2
 8001532:	1d18      	adds	r0, r3, #4
 8001534:	edd6 0a00 	vldr	s1, [r6]
 8001538:	42a8      	cmp	r0, r5
 800153a:	ee00 0a81 	vmla.f32	s0, s1, s2
 800153e:	f4bf af39 	bcs.w	80013b4 <ai_dict8_dot_array_f32+0x64>
 8001542:	784b      	ldrb	r3, [r1, #1]
 8001544:	ed90 1a00 	vldr	s2, [r0]
 8001548:	eb02 0683 	add.w	r6, r2, r3, lsl #2
 800154c:	1d00      	adds	r0, r0, #4
 800154e:	edd6 0a00 	vldr	s1, [r6]
 8001552:	42a8      	cmp	r0, r5
 8001554:	ee00 0a81 	vmla.f32	s0, s1, s2
 8001558:	f4bf af2c 	bcs.w	80013b4 <ai_dict8_dot_array_f32+0x64>
 800155c:	788b      	ldrb	r3, [r1, #2]
 800155e:	ed90 1a00 	vldr	s2, [r0]
 8001562:	eb02 0683 	add.w	r6, r2, r3, lsl #2
 8001566:	1d03      	adds	r3, r0, #4
 8001568:	1cc9      	adds	r1, r1, #3
 800156a:	edd6 0a00 	vldr	s1, [r6]
 800156e:	42ab      	cmp	r3, r5
 8001570:	ee00 0a81 	vmla.f32	s0, s1, s2
 8001574:	d3d8      	bcc.n	8001528 <ai_dict8_dot_array_f32+0x1d8>
 8001576:	edd4 0a00 	vldr	s1, [r4]
 800157a:	ee30 0a80 	vadd.f32	s0, s1, s0
 800157e:	ed84 0a00 	vstr	s0, [r4]
 8001582:	bcf0      	pop	{r4, r5, r6, r7}
 8001584:	4770      	bx	lr
 8001586:	78cf      	ldrb	r7, [r1, #3]
 8001588:	ed93 4a00 	vldr	s8, [r3]
 800158c:	ed93 3a01 	vldr	s6, [r3, #4]
 8001590:	ed93 2a02 	vldr	s4, [r3, #8]
 8001594:	ed93 1a03 	vldr	s2, [r3, #12]
 8001598:	eb02 0687 	add.w	r6, r2, r7, lsl #2
 800159c:	788f      	ldrb	r7, [r1, #2]
 800159e:	edd6 0a00 	vldr	s1, [r6]
 80015a2:	eb02 0687 	add.w	r6, r2, r7, lsl #2
 80015a6:	784f      	ldrb	r7, [r1, #1]
 80015a8:	edd6 1a00 	vldr	s3, [r6]
 80015ac:	eb02 0687 	add.w	r6, r2, r7, lsl #2
 80015b0:	780f      	ldrb	r7, [r1, #0]
 80015b2:	edd6 2a00 	vldr	s5, [r6]
 80015b6:	eb02 0687 	add.w	r6, r2, r7, lsl #2
 80015ba:	f103 0010 	add.w	r0, r3, #16
 80015be:	edd6 3a00 	vldr	s7, [r6]
 80015c2:	790b      	ldrb	r3, [r1, #4]
 80015c4:	ee03 0a84 	vmla.f32	s0, s7, s8
 80015c8:	ee02 0a83 	vmla.f32	s0, s5, s6
 80015cc:	ee01 0a82 	vmla.f32	s0, s3, s4
 80015d0:	eb02 0783 	add.w	r7, r2, r3, lsl #2
 80015d4:	ee00 0a81 	vmla.f32	s0, s1, s2
 80015d8:	794b      	ldrb	r3, [r1, #5]
 80015da:	edd7 0a00 	vldr	s1, [r7]
 80015de:	ed90 4a00 	vldr	s8, [r0]
 80015e2:	edd0 3a01 	vldr	s7, [r0, #4]
 80015e6:	ed90 3a02 	vldr	s6, [r0, #8]
 80015ea:	edd0 2a03 	vldr	s5, [r0, #12]
 80015ee:	eb02 0783 	add.w	r7, r2, r3, lsl #2
 80015f2:	798b      	ldrb	r3, [r1, #6]
 80015f4:	ed97 1a00 	vldr	s2, [r7]
 80015f8:	eb02 0783 	add.w	r7, r2, r3, lsl #2
 80015fc:	79cb      	ldrb	r3, [r1, #7]
 80015fe:	edd7 1a00 	vldr	s3, [r7]
 8001602:	eb02 0783 	add.w	r7, r2, r3, lsl #2
 8001606:	ee00 0a84 	vmla.f32	s0, s1, s8
 800160a:	3108      	adds	r1, #8
 800160c:	f100 0310 	add.w	r3, r0, #16
 8001610:	ee01 0a23 	vmla.f32	s0, s2, s7
 8001614:	ed97 2a00 	vldr	s4, [r7]
 8001618:	ee01 0a83 	vmla.f32	s0, s3, s6
 800161c:	429d      	cmp	r5, r3
 800161e:	ee02 0a22 	vmla.f32	s0, s4, s5
 8001622:	d2b0      	bcs.n	8001586 <ai_dict8_dot_array_f32+0x236>
 8001624:	e6da      	b.n	80013dc <ai_dict8_dot_array_f32+0x8c>
	...

08001628 <ai_dict4_dot_array_f32>:
 8001628:	b4f0      	push	{r4, r5, r6, r7}
 800162a:	9c04      	ldr	r4, [sp, #16]
 800162c:	0865      	lsrs	r5, r4, #1
 800162e:	006d      	lsls	r5, r5, #1
 8001630:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8001634:	42ab      	cmp	r3, r5
 8001636:	ed9f 0a23 	vldr	s0, [pc, #140]	; 80016c4 <.text_12>
 800163a:	d22f      	bcs.n	800169c <ai_dict4_dot_array_f32+0x74>
 800163c:	f811 6b01 	ldrb.w	r6, [r1], #1
 8001640:	ed93 2a00 	vldr	s4, [r3]
 8001644:	ed93 1a01 	vldr	s2, [r3, #4]
 8001648:	f006 070f 	and.w	r7, r6, #15
 800164c:	0936      	lsrs	r6, r6, #4
 800164e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8001652:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8001656:	edd6 1a00 	vldr	s3, [r6]
 800165a:	edd7 0a00 	vldr	s1, [r7]
 800165e:	3308      	adds	r3, #8
 8001660:	ee01 0a82 	vmla.f32	s0, s3, s4
 8001664:	42ab      	cmp	r3, r5
 8001666:	ee00 0a81 	vmla.f32	s0, s1, s2
 800166a:	d217      	bcs.n	800169c <ai_dict4_dot_array_f32+0x74>
 800166c:	f811 6b01 	ldrb.w	r6, [r1], #1
 8001670:	ed93 2a00 	vldr	s4, [r3]
 8001674:	ed93 1a01 	vldr	s2, [r3, #4]
 8001678:	f006 070f 	and.w	r7, r6, #15
 800167c:	0936      	lsrs	r6, r6, #4
 800167e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8001682:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8001686:	edd6 1a00 	vldr	s3, [r6]
 800168a:	edd7 0a00 	vldr	s1, [r7]
 800168e:	3308      	adds	r3, #8
 8001690:	ee01 0a82 	vmla.f32	s0, s3, s4
 8001694:	42ab      	cmp	r3, r5
 8001696:	ee00 0a81 	vmla.f32	s0, s1, s2
 800169a:	d3cf      	bcc.n	800163c <ai_dict4_dot_array_f32+0x14>
 800169c:	07e4      	lsls	r4, r4, #31
 800169e:	d509      	bpl.n	80016b4 <ai_dict4_dot_array_f32+0x8c>
 80016a0:	7809      	ldrb	r1, [r1, #0]
 80016a2:	ed93 1a00 	vldr	s2, [r3]
 80016a6:	0909      	lsrs	r1, r1, #4
 80016a8:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80016ac:	edd2 0a00 	vldr	s1, [r2]
 80016b0:	ee00 0a81 	vmla.f32	s0, s1, s2
 80016b4:	edd0 1a00 	vldr	s3, [r0]
 80016b8:	ee31 0a80 	vadd.f32	s0, s3, s0
 80016bc:	ed80 0a00 	vstr	s0, [r0]
 80016c0:	bcf0      	pop	{r4, r5, r6, r7}
 80016c2:	4770      	bx	lr

080016c4 <.text_12>:
 80016c4:	00000000 	.word	0x00000000

080016c8 <ai_dict_decompress_f32>:
 80016c8:	b4f0      	push	{r4, r5, r6, r7}
 80016ca:	4604      	mov	r4, r0
 80016cc:	9805      	ldr	r0, [sp, #20]
 80016ce:	9e04      	ldr	r6, [sp, #16]
 80016d0:	2b04      	cmp	r3, #4
 80016d2:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 80016d6:	d003      	beq.n	80016e0 <ai_dict_decompress_f32+0x18>
 80016d8:	2b08      	cmp	r3, #8
 80016da:	d03e      	beq.n	800175a <ai_dict_decompress_f32+0x92>
 80016dc:	bcf0      	pop	{r4, r5, r6, r7}
 80016de:	4770      	bx	lr
 80016e0:	42ac      	cmp	r4, r5
 80016e2:	d259      	bcs.n	8001798 <ai_dict_decompress_f32+0xd0>
 80016e4:	0870      	lsrs	r0, r6, #1
 80016e6:	d02e      	beq.n	8001746 <ai_dict_decompress_f32+0x7e>
 80016e8:	07c3      	lsls	r3, r0, #31
 80016ea:	d50c      	bpl.n	8001706 <ai_dict_decompress_f32+0x3e>
 80016ec:	780f      	ldrb	r7, [r1, #0]
 80016ee:	093f      	lsrs	r7, r7, #4
 80016f0:	f852 3027 	ldr.w	r3, [r2, r7, lsl #2]
 80016f4:	6023      	str	r3, [r4, #0]
 80016f6:	f811 7b01 	ldrb.w	r7, [r1], #1
 80016fa:	f007 070f 	and.w	r7, r7, #15
 80016fe:	f852 3027 	ldr.w	r3, [r2, r7, lsl #2]
 8001702:	6063      	str	r3, [r4, #4]
 8001704:	3408      	adds	r4, #8
 8001706:	0840      	lsrs	r0, r0, #1
 8001708:	d01d      	beq.n	8001746 <ai_dict_decompress_f32+0x7e>
 800170a:	780b      	ldrb	r3, [r1, #0]
 800170c:	091b      	lsrs	r3, r3, #4
 800170e:	f852 7023 	ldr.w	r7, [r2, r3, lsl #2]
 8001712:	6027      	str	r7, [r4, #0]
 8001714:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001718:	f003 030f 	and.w	r3, r3, #15
 800171c:	f852 7023 	ldr.w	r7, [r2, r3, lsl #2]
 8001720:	6067      	str	r7, [r4, #4]
 8001722:	f104 0308 	add.w	r3, r4, #8
 8001726:	780c      	ldrb	r4, [r1, #0]
 8001728:	0924      	lsrs	r4, r4, #4
 800172a:	f852 7024 	ldr.w	r7, [r2, r4, lsl #2]
 800172e:	601f      	str	r7, [r3, #0]
 8001730:	1e40      	subs	r0, r0, #1
 8001732:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001736:	f004 040f 	and.w	r4, r4, #15
 800173a:	f852 7024 	ldr.w	r7, [r2, r4, lsl #2]
 800173e:	605f      	str	r7, [r3, #4]
 8001740:	f103 0408 	add.w	r4, r3, #8
 8001744:	d1e1      	bne.n	800170a <ai_dict_decompress_f32+0x42>
 8001746:	07f0      	lsls	r0, r6, #31
 8001748:	d5ca      	bpl.n	80016e0 <ai_dict_decompress_f32+0x18>
 800174a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800174e:	091b      	lsrs	r3, r3, #4
 8001750:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001754:	f844 0b04 	str.w	r0, [r4], #4
 8001758:	e7c2      	b.n	80016e0 <ai_dict_decompress_f32+0x18>
 800175a:	42ac      	cmp	r4, r5
 800175c:	d21c      	bcs.n	8001798 <ai_dict_decompress_f32+0xd0>
 800175e:	780b      	ldrb	r3, [r1, #0]
 8001760:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001764:	6020      	str	r0, [r4, #0]
 8001766:	1d20      	adds	r0, r4, #4
 8001768:	42a8      	cmp	r0, r5
 800176a:	bf3f      	itttt	cc
 800176c:	784b      	ldrbcc	r3, [r1, #1]
 800176e:	f852 4023 	ldrcc.w	r4, [r2, r3, lsl #2]
 8001772:	f840 4b04 	strcc.w	r4, [r0], #4
 8001776:	42a8      	cmpcc	r0, r5
 8001778:	d20e      	bcs.n	8001798 <ai_dict_decompress_f32+0xd0>
 800177a:	788b      	ldrb	r3, [r1, #2]
 800177c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8001780:	f840 4b04 	str.w	r4, [r0], #4
 8001784:	42a8      	cmp	r0, r5
 8001786:	d207      	bcs.n	8001798 <ai_dict_decompress_f32+0xd0>
 8001788:	78cb      	ldrb	r3, [r1, #3]
 800178a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800178e:	6004      	str	r4, [r0, #0]
 8001790:	1d09      	adds	r1, r1, #4
 8001792:	1d04      	adds	r4, r0, #4
 8001794:	42ac      	cmp	r4, r5
 8001796:	d3e2      	bcc.n	800175e <ai_dict_decompress_f32+0x96>
 8001798:	bcf0      	pop	{r4, r5, r6, r7}
 800179a:	4770      	bx	lr

0800179c <forward_conv2d>:
 800179c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80017a0:	4605      	mov	r5, r0
 80017a2:	b0a7      	sub	sp, #156	; 0x9c
 80017a4:	6968      	ldr	r0, [r5, #20]
 80017a6:	6800      	ldr	r0, [r0, #0]
 80017a8:	68c2      	ldr	r2, [r0, #12]
 80017aa:	6813      	ldr	r3, [r2, #0]
 80017ac:	6801      	ldr	r1, [r0, #0]
 80017ae:	6982      	ldr	r2, [r0, #24]
 80017b0:	8c00      	ldrh	r0, [r0, #32]
 80017b2:	680c      	ldr	r4, [r1, #0]
 80017b4:	f8d2 b000 	ldr.w	fp, [r2]
 80017b8:	2801      	cmp	r0, #1
 80017ba:	6890      	ldr	r0, [r2, #8]
 80017bc:	bfcc      	ite	gt
 80017be:	6851      	ldrgt	r1, [r2, #4]
 80017c0:	2100      	movle	r1, #0
 80017c2:	68a2      	ldr	r2, [r4, #8]
 80017c4:	921b      	str	r2, [sp, #108]	; 0x6c
 80017c6:	689e      	ldr	r6, [r3, #8]
 80017c8:	9603      	str	r6, [sp, #12]
 80017ca:	f8d3 a010 	ldr.w	sl, [r3, #16]
 80017ce:	68da      	ldr	r2, [r3, #12]
 80017d0:	9215      	str	r2, [sp, #84]	; 0x54
 80017d2:	6926      	ldr	r6, [r4, #16]
 80017d4:	961a      	str	r6, [sp, #104]	; 0x68
 80017d6:	68e7      	ldr	r7, [r4, #12]
 80017d8:	9721      	str	r7, [sp, #132]	; 0x84
 80017da:	6a6e      	ldr	r6, [r5, #36]	; 0x24
 80017dc:	f8ad 6040 	strh.w	r6, [sp, #64]	; 0x40
 80017e0:	8d2f      	ldrh	r7, [r5, #40]	; 0x28
 80017e2:	9720      	str	r7, [sp, #128]	; 0x80
 80017e4:	6baa      	ldr	r2, [r5, #56]	; 0x38
 80017e6:	6817      	ldr	r7, [r2, #0]
 80017e8:	f8b2 8004 	ldrh.w	r8, [r2, #4]
 80017ec:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80017ee:	9219      	str	r2, [sp, #100]	; 0x64
 80017f0:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 80017f2:	9618      	str	r6, [sp, #96]	; 0x60
 80017f4:	f8db 200c 	ldr.w	r2, [fp, #12]
 80017f8:	9214      	str	r2, [sp, #80]	; 0x50
 80017fa:	f8db 6008 	ldr.w	r6, [fp, #8]
 80017fe:	9613      	str	r6, [sp, #76]	; 0x4c
 8001800:	69aa      	ldr	r2, [r5, #24]
 8001802:	921f      	str	r2, [sp, #124]	; 0x7c
 8001804:	6822      	ldr	r2, [r4, #0]
 8001806:	6894      	ldr	r4, [r2, #8]
 8001808:	941e      	str	r4, [sp, #120]	; 0x78
 800180a:	f8db 2000 	ldr.w	r2, [fp]
 800180e:	f8d2 9008 	ldr.w	r9, [r2, #8]
 8001812:	b119      	cbz	r1, 800181c <forward_conv2d+0x80>
 8001814:	680a      	ldr	r2, [r1, #0]
 8001816:	6894      	ldr	r4, [r2, #8]
 8001818:	9417      	str	r4, [sp, #92]	; 0x5c
 800181a:	e001      	b.n	8001820 <forward_conv2d+0x84>
 800181c:	2200      	movs	r2, #0
 800181e:	9217      	str	r2, [sp, #92]	; 0x5c
 8001820:	6819      	ldr	r1, [r3, #0]
 8001822:	688a      	ldr	r2, [r1, #8]
 8001824:	9202      	str	r2, [sp, #8]
 8001826:	69e9      	ldr	r1, [r5, #28]
 8001828:	b158      	cbz	r0, 8001842 <forward_conv2d+0xa6>
 800182a:	6803      	ldr	r3, [r0, #0]
 800182c:	689a      	ldr	r2, [r3, #8]
 800182e:	9212      	str	r2, [sp, #72]	; 0x48
 8001830:	921c      	str	r2, [sp, #112]	; 0x70
 8001832:	69c0      	ldr	r0, [r0, #28]
 8001834:	9024      	str	r0, [sp, #144]	; 0x90
 8001836:	6859      	ldr	r1, [r3, #4]
 8001838:	6818      	ldr	r0, [r3, #0]
 800183a:	f001 ff65 	bl	8003708 <ai_array_get_byte_size>
 800183e:	4604      	mov	r4, r0
 8001840:	e00a      	b.n	8001858 <forward_conv2d+0xbc>
 8001842:	b119      	cbz	r1, 800184c <forward_conv2d+0xb0>
 8001844:	6888      	ldr	r0, [r1, #8]
 8001846:	9012      	str	r0, [sp, #72]	; 0x48
 8001848:	901c      	str	r0, [sp, #112]	; 0x70
 800184a:	e002      	b.n	8001852 <forward_conv2d+0xb6>
 800184c:	2200      	movs	r2, #0
 800184e:	9212      	str	r2, [sp, #72]	; 0x48
 8001850:	911c      	str	r1, [sp, #112]	; 0x70
 8001852:	2200      	movs	r2, #0
 8001854:	9224      	str	r2, [sp, #144]	; 0x90
 8001856:	2401      	movs	r4, #1
 8001858:	6a28      	ldr	r0, [r5, #32]
 800185a:	2800      	cmp	r0, #0
 800185c:	aa18      	add	r2, sp, #96	; 0x60
 800185e:	bf12      	itee	ne
 8001860:	9023      	strne	r0, [sp, #140]	; 0x8c
 8001862:	f8df 1b88 	ldreq.w	r1, [pc, #2952]	; 80023ec <.text_22>
 8001866:	9123      	streq	r1, [sp, #140]	; 0x8c
 8001868:	9914      	ldr	r1, [sp, #80]	; 0x50
 800186a:	8813      	ldrh	r3, [r2, #0]
 800186c:	1e48      	subs	r0, r1, #1
 800186e:	1e5b      	subs	r3, r3, #1
 8001870:	aa19      	add	r2, sp, #100	; 0x64
 8001872:	fb03 1100 	mla	r1, r3, r0, r1
 8001876:	9116      	str	r1, [sp, #88]	; 0x58
 8001878:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800187a:	8813      	ldrh	r3, [r2, #0]
 800187c:	1e41      	subs	r1, r0, #1
 800187e:	1e5b      	subs	r3, r3, #1
 8001880:	fb03 0001 	mla	r0, r3, r1, r0
 8001884:	901d      	str	r0, [sp, #116]	; 0x74
 8001886:	2600      	movs	r6, #0
 8001888:	f8db 1000 	ldr.w	r1, [fp]
 800188c:	6808      	ldr	r0, [r1, #0]
 800188e:	2200      	movs	r2, #0
 8001890:	11c3      	asrs	r3, r0, #7
 8001892:	ea4f 5c60 	mov.w	ip, r0, asr #21
 8001896:	1440      	asrs	r0, r0, #17
 8001898:	f000 000f 	and.w	r0, r0, #15
 800189c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80018a0:	f00c 0c03 	and.w	ip, ip, #3
 80018a4:	2804      	cmp	r0, #4
 80018a6:	fa23 f30c 	lsr.w	r3, r3, ip
 80018aa:	bf14      	ite	ne
 80018ac:	2808      	cmpne	r0, #8
 80018ae:	68ca      	ldreq	r2, [r1, #12]
 80018b0:	b182      	cbz	r2, 80018d4 <forward_conv2d+0x138>
 80018b2:	6968      	ldr	r0, [r5, #20]
 80018b4:	6800      	ldr	r0, [r0, #0]
 80018b6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80018b8:	6828      	ldr	r0, [r5, #0]
 80018ba:	b108      	cbz	r0, 80018c0 <forward_conv2d+0x124>
 80018bc:	6806      	ldr	r6, [r0, #0]
 80018be:	68b6      	ldr	r6, [r6, #8]
 80018c0:	6800      	ldr	r0, [r0, #0]
 80018c2:	6840      	ldr	r0, [r0, #4]
 80018c4:	9001      	str	r0, [sp, #4]
 80018c6:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80018c8:	9000      	str	r0, [sp, #0]
 80018ca:	4630      	mov	r0, r6
 80018cc:	6889      	ldr	r1, [r1, #8]
 80018ce:	f7ff fefb 	bl	80016c8 <ai_dict_decompress_f32>
 80018d2:	b906      	cbnz	r6, 80018d6 <forward_conv2d+0x13a>
 80018d4:	464e      	mov	r6, r9
 80018d6:	b2bf      	uxth	r7, r7
 80018d8:	427f      	negs	r7, r7
 80018da:	f1ba 0f00 	cmp.w	sl, #0
 80018de:	d065      	beq.n	80019ac <forward_conv2d+0x210>
 80018e0:	f1c8 0800 	rsb	r8, r8, #0
 80018e4:	f8cd 8094 	str.w	r8, [sp, #148]	; 0x94
 80018e8:	4652      	mov	r2, sl
 80018ea:	9d02      	ldr	r5, [sp, #8]
 80018ec:	f8dd a00c 	ldr.w	sl, [sp, #12]
 80018f0:	9626      	str	r6, [sp, #152]	; 0x98
 80018f2:	9711      	str	r7, [sp, #68]	; 0x44
 80018f4:	9222      	str	r2, [sp, #136]	; 0x88
 80018f6:	9825      	ldr	r0, [sp, #148]	; 0x94
 80018f8:	9911      	ldr	r1, [sp, #68]	; 0x44
 80018fa:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80018fc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80018fe:	9e16      	ldr	r6, [sp, #88]	; 0x58
 8001900:	4249      	negs	r1, r1
 8001902:	bfd8      	it	le
 8001904:	2100      	movle	r1, #0
 8001906:	1ad2      	subs	r2, r2, r3
 8001908:	42b2      	cmp	r2, r6
 800190a:	bf3d      	ittte	cc
 800190c:	9b1a      	ldrcc	r3, [sp, #104]	; 0x68
 800190e:	9a11      	ldrcc	r2, [sp, #68]	; 0x44
 8001910:	1a9a      	subcc	r2, r3, r2
 8001912:	4632      	movcs	r2, r6
 8001914:	900b      	str	r0, [sp, #44]	; 0x2c
 8001916:	9109      	str	r1, [sp, #36]	; 0x24
 8001918:	920a      	str	r2, [sp, #40]	; 0x28
 800191a:	981f      	ldr	r0, [sp, #124]	; 0x7c
 800191c:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
 8001920:	9008      	str	r0, [sp, #32]
 8001922:	9107      	str	r1, [sp, #28]
 8001924:	f8cd a008 	str.w	sl, [sp, #8]
 8001928:	9814      	ldr	r0, [sp, #80]	; 0x50
 800192a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800192c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800192e:	9006      	str	r0, [sp, #24]
 8001930:	9105      	str	r1, [sp, #20]
 8001932:	b21b      	sxth	r3, r3
 8001934:	9815      	ldr	r0, [sp, #84]	; 0x54
 8001936:	9921      	ldr	r1, [sp, #132]	; 0x84
 8001938:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800193a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800193c:	930f      	str	r3, [sp, #60]	; 0x3c
 800193e:	9004      	str	r0, [sp, #16]
 8001940:	9103      	str	r1, [sp, #12]
 8001942:	b236      	sxth	r6, r6
 8001944:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8001946:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8001948:	9917      	ldr	r1, [sp, #92]	; 0x5c
 800194a:	960e      	str	r6, [sp, #56]	; 0x38
 800194c:	930d      	str	r3, [sp, #52]	; 0x34
 800194e:	9001      	str	r0, [sp, #4]
 8001950:	9100      	str	r1, [sp, #0]
 8001952:	4629      	mov	r1, r5
 8001954:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8001956:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8001958:	960c      	str	r6, [sp, #48]	; 0x30
 800195a:	2000      	movs	r0, #0
 800195c:	f7ff fc86 	bl	800126c <ai_conv2d_stripe_f32>
 8001960:	9815      	ldr	r0, [sp, #84]	; 0x54
 8001962:	b1d8      	cbz	r0, 800199c <forward_conv2d+0x200>
 8001964:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8001966:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 8001968:	f8dd 8090 	ldr.w	r8, [sp, #144]	; 0x90
 800196c:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8001970:	4683      	mov	fp, r0
 8001972:	4633      	mov	r3, r6
 8001974:	4652      	mov	r2, sl
 8001976:	4629      	mov	r1, r5
 8001978:	4628      	mov	r0, r5
 800197a:	47c8      	blx	r9
 800197c:	4446      	add	r6, r8
 800197e:	1bf0      	subs	r0, r6, r7
 8001980:	42a0      	cmp	r0, r4
 8001982:	bfa8      	it	ge
 8001984:	463e      	movge	r6, r7
 8001986:	f1bb 0b01 	subs.w	fp, fp, #1
 800198a:	eb05 058a 	add.w	r5, r5, sl, lsl #2
 800198e:	d1f0      	bne.n	8001972 <forward_conv2d+0x1d6>
 8001990:	9612      	str	r6, [sp, #72]	; 0x48
 8001992:	971c      	str	r7, [sp, #112]	; 0x70
 8001994:	f8cd 8090 	str.w	r8, [sp, #144]	; 0x90
 8001998:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800199c:	9811      	ldr	r0, [sp, #68]	; 0x44
 800199e:	9920      	ldr	r1, [sp, #128]	; 0x80
 80019a0:	1808      	adds	r0, r1, r0
 80019a2:	9011      	str	r0, [sp, #68]	; 0x44
 80019a4:	9822      	ldr	r0, [sp, #136]	; 0x88
 80019a6:	1e40      	subs	r0, r0, #1
 80019a8:	9022      	str	r0, [sp, #136]	; 0x88
 80019aa:	d1a4      	bne.n	80018f6 <forward_conv2d+0x15a>
 80019ac:	b027      	add	sp, #156	; 0x9c
 80019ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080019b4 <forward_conv2d_nl_pool>:
 80019b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80019b8:	4607      	mov	r7, r0
 80019ba:	b0b9      	sub	sp, #228	; 0xe4
 80019bc:	6978      	ldr	r0, [r7, #20]
 80019be:	6800      	ldr	r0, [r0, #0]
 80019c0:	68c2      	ldr	r2, [r0, #12]
 80019c2:	6816      	ldr	r6, [r2, #0]
 80019c4:	6801      	ldr	r1, [r0, #0]
 80019c6:	6982      	ldr	r2, [r0, #24]
 80019c8:	8c00      	ldrh	r0, [r0, #32]
 80019ca:	680b      	ldr	r3, [r1, #0]
 80019cc:	f8d2 b000 	ldr.w	fp, [r2]
 80019d0:	689c      	ldr	r4, [r3, #8]
 80019d2:	2801      	cmp	r0, #1
 80019d4:	6890      	ldr	r0, [r2, #8]
 80019d6:	bfcc      	ite	gt
 80019d8:	6851      	ldrgt	r1, [r2, #4]
 80019da:	2100      	movle	r1, #0
 80019dc:	9424      	str	r4, [sp, #144]	; 0x90
 80019de:	68b5      	ldr	r5, [r6, #8]
 80019e0:	9502      	str	r5, [sp, #8]
 80019e2:	6934      	ldr	r4, [r6, #16]
 80019e4:	9423      	str	r4, [sp, #140]	; 0x8c
 80019e6:	68f5      	ldr	r5, [r6, #12]
 80019e8:	9522      	str	r5, [sp, #136]	; 0x88
 80019ea:	691c      	ldr	r4, [r3, #16]
 80019ec:	941c      	str	r4, [sp, #112]	; 0x70
 80019ee:	68dd      	ldr	r5, [r3, #12]
 80019f0:	952e      	str	r5, [sp, #184]	; 0xb8
 80019f2:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 80019f4:	f8ad 404c 	strh.w	r4, [sp, #76]	; 0x4c
 80019f8:	8d3d      	ldrh	r5, [r7, #40]	; 0x28
 80019fa:	9521      	str	r5, [sp, #132]	; 0x84
 80019fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80019fe:	69bd      	ldr	r5, [r7, #24]
 8001a00:	f8b2 8000 	ldrh.w	r8, [r2]
 8001a04:	f8b2 9004 	ldrh.w	r9, [r2, #4]
 8001a08:	6894      	ldr	r4, [r2, #8]
 8001a0a:	952d      	str	r5, [sp, #180]	; 0xb4
 8001a0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a0e:	9220      	str	r2, [sp, #128]	; 0x80
 8001a10:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 8001a12:	951f      	str	r5, [sp, #124]	; 0x7c
 8001a14:	f8db 2008 	ldr.w	r2, [fp, #8]
 8001a18:	921b      	str	r2, [sp, #108]	; 0x6c
 8001a1a:	f8db 500c 	ldr.w	r5, [fp, #12]
 8001a1e:	951a      	str	r5, [sp, #104]	; 0x68
 8001a20:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001a22:	922c      	str	r2, [sp, #176]	; 0xb0
 8001a24:	6c7d      	ldr	r5, [r7, #68]	; 0x44
 8001a26:	952b      	str	r5, [sp, #172]	; 0xac
 8001a28:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001a2a:	9216      	str	r2, [sp, #88]	; 0x58
 8001a2c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001a2e:	6815      	ldr	r5, [r2, #0]
 8001a30:	f8d2 e004 	ldr.w	lr, [r2, #4]
 8001a34:	f8cd e0a8 	str.w	lr, [sp, #168]	; 0xa8
 8001a38:	6892      	ldr	r2, [r2, #8]
 8001a3a:	921e      	str	r2, [sp, #120]	; 0x78
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	6893      	ldr	r3, [r2, #8]
 8001a40:	9329      	str	r3, [sp, #164]	; 0xa4
 8001a42:	f8db 2000 	ldr.w	r2, [fp]
 8001a46:	f8d2 a008 	ldr.w	sl, [r2, #8]
 8001a4a:	b119      	cbz	r1, 8001a54 <forward_conv2d_nl_pool+0xa0>
 8001a4c:	680a      	ldr	r2, [r1, #0]
 8001a4e:	6893      	ldr	r3, [r2, #8]
 8001a50:	931d      	str	r3, [sp, #116]	; 0x74
 8001a52:	e001      	b.n	8001a58 <forward_conv2d_nl_pool+0xa4>
 8001a54:	2200      	movs	r2, #0
 8001a56:	921d      	str	r2, [sp, #116]	; 0x74
 8001a58:	69f9      	ldr	r1, [r7, #28]
 8001a5a:	b158      	cbz	r0, 8001a74 <forward_conv2d_nl_pool+0xc0>
 8001a5c:	6803      	ldr	r3, [r0, #0]
 8001a5e:	689a      	ldr	r2, [r3, #8]
 8001a60:	9218      	str	r2, [sp, #96]	; 0x60
 8001a62:	9210      	str	r2, [sp, #64]	; 0x40
 8001a64:	69c0      	ldr	r0, [r0, #28]
 8001a66:	9015      	str	r0, [sp, #84]	; 0x54
 8001a68:	6859      	ldr	r1, [r3, #4]
 8001a6a:	6818      	ldr	r0, [r3, #0]
 8001a6c:	f001 fe4c 	bl	8003708 <ai_array_get_byte_size>
 8001a70:	9014      	str	r0, [sp, #80]	; 0x50
 8001a72:	e00b      	b.n	8001a8c <forward_conv2d_nl_pool+0xd8>
 8001a74:	b119      	cbz	r1, 8001a7e <forward_conv2d_nl_pool+0xca>
 8001a76:	6889      	ldr	r1, [r1, #8]
 8001a78:	9118      	str	r1, [sp, #96]	; 0x60
 8001a7a:	9110      	str	r1, [sp, #64]	; 0x40
 8001a7c:	e002      	b.n	8001a84 <forward_conv2d_nl_pool+0xd0>
 8001a7e:	2200      	movs	r2, #0
 8001a80:	9118      	str	r1, [sp, #96]	; 0x60
 8001a82:	9210      	str	r2, [sp, #64]	; 0x40
 8001a84:	2100      	movs	r1, #0
 8001a86:	2201      	movs	r2, #1
 8001a88:	9115      	str	r1, [sp, #84]	; 0x54
 8001a8a:	9214      	str	r2, [sp, #80]	; 0x50
 8001a8c:	aa1f      	add	r2, sp, #124	; 0x7c
 8001a8e:	6a38      	ldr	r0, [r7, #32]
 8001a90:	2800      	cmp	r0, #0
 8001a92:	bf12      	itee	ne
 8001a94:	9030      	strne	r0, [sp, #192]	; 0xc0
 8001a96:	f8df 1954 	ldreq.w	r1, [pc, #2388]	; 80023ec <.text_22>
 8001a9a:	9130      	streq	r1, [sp, #192]	; 0xc0
 8001a9c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001a9e:	981a      	ldr	r0, [sp, #104]	; 0x68
 8001aa0:	8813      	ldrh	r3, [r2, #0]
 8001aa2:	9128      	str	r1, [sp, #160]	; 0xa0
 8001aa4:	1e5b      	subs	r3, r3, #1
 8001aa6:	1e41      	subs	r1, r0, #1
 8001aa8:	aa20      	add	r2, sp, #128	; 0x80
 8001aaa:	fb03 0001 	mla	r0, r3, r1, r0
 8001aae:	9019      	str	r0, [sp, #100]	; 0x64
 8001ab0:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8001ab2:	8813      	ldrh	r3, [r2, #0]
 8001ab4:	1e48      	subs	r0, r1, #1
 8001ab6:	1e5b      	subs	r3, r3, #1
 8001ab8:	fb03 1100 	mla	r1, r3, r0, r1
 8001abc:	9127      	str	r1, [sp, #156]	; 0x9c
 8001abe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001ac0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8001ac2:	9819      	ldr	r0, [sp, #100]	; 0x64
 8001ac4:	9112      	str	r1, [sp, #72]	; 0x48
 8001ac6:	1a12      	subs	r2, r2, r0
 8001ac8:	4442      	add	r2, r8
 8001aca:	9921      	ldr	r1, [sp, #132]	; 0x84
 8001acc:	fa12 f084 	uxtah	r0, r2, r4
 8001ad0:	fbb0 f1f1 	udiv	r1, r0, r1
 8001ad4:	1c49      	adds	r1, r1, #1
 8001ad6:	9111      	str	r1, [sp, #68]	; 0x44
 8001ad8:	2400      	movs	r4, #0
 8001ada:	f8db 1000 	ldr.w	r1, [fp]
 8001ade:	6808      	ldr	r0, [r1, #0]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	11c3      	asrs	r3, r0, #7
 8001ae4:	ea4f 5c60 	mov.w	ip, r0, asr #21
 8001ae8:	1440      	asrs	r0, r0, #17
 8001aea:	f000 000f 	and.w	r0, r0, #15
 8001aee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001af2:	f00c 0c03 	and.w	ip, ip, #3
 8001af6:	2804      	cmp	r0, #4
 8001af8:	fa23 f30c 	lsr.w	r3, r3, ip
 8001afc:	bf14      	ite	ne
 8001afe:	2808      	cmpne	r0, #8
 8001b00:	68ca      	ldreq	r2, [r1, #12]
 8001b02:	b1a2      	cbz	r2, 8001b2e <forward_conv2d_nl_pool+0x17a>
 8001b04:	6978      	ldr	r0, [r7, #20]
 8001b06:	6800      	ldr	r0, [r0, #0]
 8001b08:	f8d0 e024 	ldr.w	lr, [r0, #36]	; 0x24
 8001b0c:	f8de 0004 	ldr.w	r0, [lr, #4]
 8001b10:	b108      	cbz	r0, 8001b16 <forward_conv2d_nl_pool+0x162>
 8001b12:	6804      	ldr	r4, [r0, #0]
 8001b14:	68a4      	ldr	r4, [r4, #8]
 8001b16:	6800      	ldr	r0, [r0, #0]
 8001b18:	6840      	ldr	r0, [r0, #4]
 8001b1a:	9001      	str	r0, [sp, #4]
 8001b1c:	9824      	ldr	r0, [sp, #144]	; 0x90
 8001b1e:	9000      	str	r0, [sp, #0]
 8001b20:	4620      	mov	r0, r4
 8001b22:	6889      	ldr	r1, [r1, #8]
 8001b24:	f7ff fdd0 	bl	80016c8 <ai_dict_decompress_f32>
 8001b28:	b10c      	cbz	r4, 8001b2e <forward_conv2d_nl_pool+0x17a>
 8001b2a:	4623      	mov	r3, r4
 8001b2c:	e000      	b.n	8001b30 <forward_conv2d_nl_pool+0x17c>
 8001b2e:	4653      	mov	r3, sl
 8001b30:	697a      	ldr	r2, [r7, #20]
 8001b32:	6814      	ldr	r4, [r2, #0]
 8001b34:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001b36:	6814      	ldr	r4, [r2, #0]
 8001b38:	6827      	ldr	r7, [r4, #0]
 8001b3a:	f8d7 a008 	ldr.w	sl, [r7, #8]
 8001b3e:	68e2      	ldr	r2, [r4, #12]
 8001b40:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 8001b42:	f8dd c008 	ldr.w	ip, [sp, #8]
 8001b46:	6830      	ldr	r0, [r6, #0]
 8001b48:	4357      	muls	r7, r2
 8001b4a:	fb0c f707 	mul.w	r7, ip, r7
 8001b4e:	00bf      	lsls	r7, r7, #2
 8001b50:	9736      	str	r7, [sp, #216]	; 0xd8
 8001b52:	2100      	movs	r1, #0
 8001b54:	af16      	add	r7, sp, #88	; 0x58
 8001b56:	f1c9 0900 	rsb	r9, r9, #0
 8001b5a:	5e7f      	ldrsh	r7, [r7, r1]
 8001b5c:	9735      	str	r7, [sp, #212]	; 0xd4
 8001b5e:	b22d      	sxth	r5, r5
 8001b60:	9f02      	ldr	r7, [sp, #8]
 8001b62:	f8dd e088 	ldr.w	lr, [sp, #136]	; 0x88
 8001b66:	fb0e f707 	mul.w	r7, lr, r7
 8001b6a:	9734      	str	r7, [sp, #208]	; 0xd0
 8001b6c:	462e      	mov	r6, r5
 8001b6e:	9f02      	ldr	r7, [sp, #8]
 8001b70:	4357      	muls	r7, r2
 8001b72:	9733      	str	r7, [sp, #204]	; 0xcc
 8001b74:	f8cd 90c8 	str.w	r9, [sp, #200]	; 0xc8
 8001b78:	f1c8 0800 	rsb	r8, r8, #0
 8001b7c:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8001b7e:	9731      	str	r7, [sp, #196]	; 0xc4
 8001b80:	9f23      	ldr	r7, [sp, #140]	; 0x8c
 8001b82:	2f00      	cmp	r7, #0
 8001b84:	f000 8100 	beq.w	8001d88 <forward_conv2d_nl_pool+0x3d4>
 8001b88:	46e1      	mov	r9, ip
 8001b8a:	9337      	str	r3, [sp, #220]	; 0xdc
 8001b8c:	9026      	str	r0, [sp, #152]	; 0x98
 8001b8e:	912f      	str	r1, [sp, #188]	; 0xbc
 8001b90:	9225      	str	r2, [sp, #148]	; 0x94
 8001b92:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8001b96:	9811      	ldr	r0, [sp, #68]	; 0x44
 8001b98:	2800      	cmp	r0, #0
 8001b9a:	dd5d      	ble.n	8001c58 <forward_conv2d_nl_pool+0x2a4>
 8001b9c:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8001b9e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8001ba0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8001ba2:	9832      	ldr	r0, [sp, #200]	; 0xc8
 8001ba4:	4249      	negs	r1, r1
 8001ba6:	bfd8      	it	le
 8001ba8:	2100      	movle	r1, #0
 8001baa:	1ad2      	subs	r2, r2, r3
 8001bac:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	bf3d      	ittte	cc
 8001bb2:	9b1c      	ldrcc	r3, [sp, #112]	; 0x70
 8001bb4:	9a17      	ldrcc	r2, [sp, #92]	; 0x5c
 8001bb6:	1a9a      	subcc	r2, r3, r2
 8001bb8:	461a      	movcs	r2, r3
 8001bba:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8001bbc:	b21b      	sxth	r3, r3
 8001bbe:	930f      	str	r3, [sp, #60]	; 0x3c
 8001bc0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8001bc2:	b21b      	sxth	r3, r3
 8001bc4:	930e      	str	r3, [sp, #56]	; 0x38
 8001bc6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8001bc8:	930d      	str	r3, [sp, #52]	; 0x34
 8001bca:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8001bcc:	930c      	str	r3, [sp, #48]	; 0x30
 8001bce:	900b      	str	r0, [sp, #44]	; 0x2c
 8001bd0:	9109      	str	r1, [sp, #36]	; 0x24
 8001bd2:	920a      	str	r2, [sp, #40]	; 0x28
 8001bd4:	982d      	ldr	r0, [sp, #180]	; 0xb4
 8001bd6:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
 8001bda:	9008      	str	r0, [sp, #32]
 8001bdc:	9107      	str	r1, [sp, #28]
 8001bde:	f8cd 9008 	str.w	r9, [sp, #8]
 8001be2:	981a      	ldr	r0, [sp, #104]	; 0x68
 8001be4:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8001be6:	9006      	str	r0, [sp, #24]
 8001be8:	9105      	str	r1, [sp, #20]
 8001bea:	9825      	ldr	r0, [sp, #148]	; 0x94
 8001bec:	992e      	ldr	r1, [sp, #184]	; 0xb8
 8001bee:	9004      	str	r0, [sp, #16]
 8001bf0:	9103      	str	r1, [sp, #12]
 8001bf2:	9824      	ldr	r0, [sp, #144]	; 0x90
 8001bf4:	991d      	ldr	r1, [sp, #116]	; 0x74
 8001bf6:	9001      	str	r0, [sp, #4]
 8001bf8:	9100      	str	r1, [sp, #0]
 8001bfa:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 8001bfc:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8001bfe:	4651      	mov	r1, sl
 8001c00:	2000      	movs	r0, #0
 8001c02:	f7ff fb33 	bl	800126c <ai_conv2d_stripe_f32>
 8001c06:	9825      	ldr	r0, [sp, #148]	; 0x94
 8001c08:	b320      	cbz	r0, 8001c54 <forward_conv2d_nl_pool+0x2a0>
 8001c0a:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8001c0e:	9f30      	ldr	r7, [sp, #192]	; 0xc0
 8001c10:	4683      	mov	fp, r0
 8001c12:	4643      	mov	r3, r8
 8001c14:	464a      	mov	r2, r9
 8001c16:	4651      	mov	r1, sl
 8001c18:	4650      	mov	r0, sl
 8001c1a:	47b8      	blx	r7
 8001c1c:	9815      	ldr	r0, [sp, #84]	; 0x54
 8001c1e:	9931      	ldr	r1, [sp, #196]	; 0xc4
 8001c20:	4480      	add	r8, r0
 8001c22:	9814      	ldr	r0, [sp, #80]	; 0x50
 8001c24:	eba8 0101 	sub.w	r1, r8, r1
 8001c28:	4281      	cmp	r1, r0
 8001c2a:	6820      	ldr	r0, [r4, #0]
 8001c2c:	6841      	ldr	r1, [r0, #4]
 8001c2e:	68c0      	ldr	r0, [r0, #12]
 8001c30:	bfa8      	it	ge
 8001c32:	f8dd 8040 	ldrge.w	r8, [sp, #64]	; 0x40
 8001c36:	eb0a 0a89 	add.w	sl, sl, r9, lsl #2
 8001c3a:	eb00 0281 	add.w	r2, r0, r1, lsl #2
 8001c3e:	4592      	cmp	sl, r2
 8001c40:	d302      	bcc.n	8001c48 <forward_conv2d_nl_pool+0x294>
 8001c42:	0089      	lsls	r1, r1, #2
 8001c44:	4249      	negs	r1, r1
 8001c46:	448a      	add	sl, r1
 8001c48:	f1bb 0b01 	subs.w	fp, fp, #1
 8001c4c:	d1e1      	bne.n	8001c12 <forward_conv2d_nl_pool+0x25e>
 8001c4e:	f8cd 8060 	str.w	r8, [sp, #96]	; 0x60
 8001c52:	9730      	str	r7, [sp, #192]	; 0xc0
 8001c54:	1c76      	adds	r6, r6, #1
 8001c56:	b236      	sxth	r6, r6
 8001c58:	9811      	ldr	r0, [sp, #68]	; 0x44
 8001c5a:	1e40      	subs	r0, r0, #1
 8001c5c:	2800      	cmp	r0, #0
 8001c5e:	9011      	str	r0, [sp, #68]	; 0x44
 8001c60:	dc4e      	bgt.n	8001d00 <forward_conv2d_nl_pool+0x34c>
 8001c62:	9833      	ldr	r0, [sp, #204]	; 0xcc
 8001c64:	4370      	muls	r0, r6
 8001c66:	0080      	lsls	r0, r0, #2
 8001c68:	4240      	negs	r0, r0
 8001c6a:	eb0a 0100 	add.w	r1, sl, r0
 8001c6e:	6820      	ldr	r0, [r4, #0]
 8001c70:	68c2      	ldr	r2, [r0, #12]
 8001c72:	4291      	cmp	r1, r2
 8001c74:	bf3c      	itt	cc
 8001c76:	6843      	ldrcc	r3, [r0, #4]
 8001c78:	eb01 0183 	addcc.w	r1, r1, r3, lsl #2
 8001c7c:	428a      	cmp	r2, r1
 8001c7e:	4657      	mov	r7, sl
 8001c80:	d232      	bcs.n	8001ce8 <forward_conv2d_nl_pool+0x334>
 8001c82:	ab12      	add	r3, sp, #72	; 0x48
 8001c84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c88:	429e      	cmp	r6, r3
 8001c8a:	d02d      	beq.n	8001ce8 <forward_conv2d_nl_pool+0x334>
 8001c8c:	6843      	ldr	r3, [r0, #4]
 8001c8e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8001c92:	4291      	cmp	r1, r2
 8001c94:	f080 8028 	bcs.w	8001ce8 <forward_conv2d_nl_pool+0x334>
 8001c98:	f851 3b04 	ldr.w	r3, [r1], #4
 8001c9c:	f84a 3b04 	str.w	r3, [sl], #4
 8001ca0:	68c2      	ldr	r2, [r0, #12]
 8001ca2:	6843      	ldr	r3, [r0, #4]
 8001ca4:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8001ca8:	4291      	cmp	r1, r2
 8001caa:	d21d      	bcs.n	8001ce8 <forward_conv2d_nl_pool+0x334>
 8001cac:	f851 2b04 	ldr.w	r2, [r1], #4
 8001cb0:	f84a 2b04 	str.w	r2, [sl], #4
 8001cb4:	6843      	ldr	r3, [r0, #4]
 8001cb6:	68c2      	ldr	r2, [r0, #12]
 8001cb8:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8001cbc:	4291      	cmp	r1, r2
 8001cbe:	d213      	bcs.n	8001ce8 <forward_conv2d_nl_pool+0x334>
 8001cc0:	f851 2b04 	ldr.w	r2, [r1], #4
 8001cc4:	f84a 2b04 	str.w	r2, [sl], #4
 8001cc8:	6843      	ldr	r3, [r0, #4]
 8001cca:	68c2      	ldr	r2, [r0, #12]
 8001ccc:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8001cd0:	4291      	cmp	r1, r2
 8001cd2:	d209      	bcs.n	8001ce8 <forward_conv2d_nl_pool+0x334>
 8001cd4:	f851 2b04 	ldr.w	r2, [r1], #4
 8001cd8:	f84a 2b04 	str.w	r2, [sl], #4
 8001cdc:	6843      	ldr	r3, [r0, #4]
 8001cde:	68c2      	ldr	r2, [r0, #12]
 8001ce0:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8001ce4:	4291      	cmp	r1, r2
 8001ce6:	d3d7      	bcc.n	8001c98 <forward_conv2d_nl_pool+0x2e4>
 8001ce8:	9811      	ldr	r0, [sp, #68]	; 0x44
 8001cea:	2800      	cmp	r0, #0
 8001cec:	d506      	bpl.n	8001cfc <forward_conv2d_nl_pool+0x348>
 8001cee:	9936      	ldr	r1, [sp, #216]	; 0xd8
 8001cf0:	4650      	mov	r0, sl
 8001cf2:	f008 f90e 	bl	8009f12 <__aeabi_memclr>
 8001cf6:	981e      	ldr	r0, [sp, #120]	; 0x78
 8001cf8:	1986      	adds	r6, r0, r6
 8001cfa:	b236      	sxth	r6, r6
 8001cfc:	9612      	str	r6, [sp, #72]	; 0x48
 8001cfe:	46ba      	mov	sl, r7
 8001d00:	9812      	ldr	r0, [sp, #72]	; 0x48
 8001d02:	4286      	cmp	r6, r0
 8001d04:	d136      	bne.n	8001d74 <forward_conv2d_nl_pool+0x3c0>
 8001d06:	982f      	ldr	r0, [sp, #188]	; 0xbc
 8001d08:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8001d0a:	f8dd c0a0 	ldr.w	ip, [sp, #160]	; 0xa0
 8001d0e:	9916      	ldr	r1, [sp, #88]	; 0x58
 8001d10:	1c40      	adds	r0, r0, #1
 8001d12:	902f      	str	r0, [sp, #188]	; 0xbc
 8001d14:	b292      	uxth	r2, r2
 8001d16:	9826      	ldr	r0, [sp, #152]	; 0x98
 8001d18:	9008      	str	r0, [sp, #32]
 8001d1a:	9206      	str	r2, [sp, #24]
 8001d1c:	fa1f f389 	uxth.w	r3, r9
 8001d20:	9816      	ldr	r0, [sp, #88]	; 0x58
 8001d22:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8001d24:	b280      	uxth	r0, r0
 8001d26:	9005      	str	r0, [sp, #20]
 8001d28:	b292      	uxth	r2, r2
 8001d2a:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8001d2c:	b280      	uxth	r0, r0
 8001d2e:	9002      	str	r0, [sp, #8]
 8001d30:	1a76      	subs	r6, r6, r1
 8001d32:	2101      	movs	r1, #1
 8001d34:	9107      	str	r1, [sp, #28]
 8001d36:	b236      	sxth	r6, r6
 8001d38:	992b      	ldr	r1, [sp, #172]	; 0xac
 8001d3a:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8001d3c:	b289      	uxth	r1, r1
 8001d3e:	9104      	str	r1, [sp, #16]
 8001d40:	b280      	uxth	r0, r0
 8001d42:	b2a9      	uxth	r1, r5
 8001d44:	9103      	str	r1, [sp, #12]
 8001d46:	9000      	str	r0, [sp, #0]
 8001d48:	9912      	ldr	r1, [sp, #72]	; 0x48
 8001d4a:	b289      	uxth	r1, r1
 8001d4c:	9101      	str	r1, [sp, #4]
 8001d4e:	9925      	ldr	r1, [sp, #148]	; 0x94
 8001d50:	6820      	ldr	r0, [r4, #0]
 8001d52:	b289      	uxth	r1, r1
 8001d54:	47e0      	blx	ip
 8001d56:	9826      	ldr	r0, [sp, #152]	; 0x98
 8001d58:	6881      	ldr	r1, [r0, #8]
 8001d5a:	9834      	ldr	r0, [sp, #208]	; 0xd0
 8001d5c:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 8001d60:	9926      	ldr	r1, [sp, #152]	; 0x98
 8001d62:	608a      	str	r2, [r1, #8]
 8001d64:	9835      	ldr	r0, [sp, #212]	; 0xd4
 8001d66:	1a28      	subs	r0, r5, r0
 8001d68:	2800      	cmp	r0, #0
 8001d6a:	bfc3      	ittte	gt
 8001d6c:	9816      	ldrgt	r0, [sp, #88]	; 0x58
 8001d6e:	1a2d      	subgt	r5, r5, r0
 8001d70:	b22d      	sxthgt	r5, r5
 8001d72:	2500      	movle	r5, #0
 8001d74:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8001d76:	9921      	ldr	r1, [sp, #132]	; 0x84
 8001d78:	1808      	adds	r0, r1, r0
 8001d7a:	9017      	str	r0, [sp, #92]	; 0x5c
 8001d7c:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8001d7e:	982f      	ldr	r0, [sp, #188]	; 0xbc
 8001d80:	4288      	cmp	r0, r1
 8001d82:	f4ff af08 	bcc.w	8001b96 <forward_conv2d_nl_pool+0x1e2>
 8001d86:	9826      	ldr	r0, [sp, #152]	; 0x98
 8001d88:	6821      	ldr	r1, [r4, #0]
 8001d8a:	68ca      	ldr	r2, [r1, #12]
 8001d8c:	608a      	str	r2, [r1, #8]
 8001d8e:	68c1      	ldr	r1, [r0, #12]
 8001d90:	6081      	str	r1, [r0, #8]
 8001d92:	b039      	add	sp, #228	; 0xe4
 8001d94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001d98 <forward_dense>:
 8001d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d9c:	b081      	sub	sp, #4
 8001d9e:	ed2d 8b02 	vpush	{d8}
 8001da2:	b088      	sub	sp, #32
 8001da4:	6940      	ldr	r0, [r0, #20]
 8001da6:	6800      	ldr	r0, [r0, #0]
 8001da8:	6801      	ldr	r1, [r0, #0]
 8001daa:	680a      	ldr	r2, [r1, #0]
 8001dac:	68c3      	ldr	r3, [r0, #12]
 8001dae:	6981      	ldr	r1, [r0, #24]
 8001db0:	8c00      	ldrh	r0, [r0, #32]
 8001db2:	681f      	ldr	r7, [r3, #0]
 8001db4:	f8d1 e000 	ldr.w	lr, [r1]
 8001db8:	6894      	ldr	r4, [r2, #8]
 8001dba:	f8de 9000 	ldr.w	r9, [lr]
 8001dbe:	f8d7 c008 	ldr.w	ip, [r7, #8]
 8001dc2:	f8d9 5000 	ldr.w	r5, [r9]
 8001dc6:	6812      	ldr	r2, [r2, #0]
 8001dc8:	2802      	cmp	r0, #2
 8001dca:	bfac      	ite	ge
 8001dcc:	684b      	ldrge	r3, [r1, #4]
 8001dce:	2300      	movlt	r3, #0
 8001dd0:	68f9      	ldr	r1, [r7, #12]
 8001dd2:	6938      	ldr	r0, [r7, #16]
 8001dd4:	683f      	ldr	r7, [r7, #0]
 8001dd6:	68bf      	ldr	r7, [r7, #8]
 8001dd8:	4341      	muls	r1, r0
 8001dda:	2000      	movs	r0, #0
 8001ddc:	11ee      	asrs	r6, r5, #7
 8001dde:	f006 087f 	and.w	r8, r6, #127	; 0x7f
 8001de2:	156e      	asrs	r6, r5, #21
 8001de4:	146d      	asrs	r5, r5, #17
 8001de6:	f005 050f 	and.w	r5, r5, #15
 8001dea:	2d04      	cmp	r5, #4
 8001dec:	bf14      	ite	ne
 8001dee:	2d08      	cmpne	r5, #8
 8001df0:	f8d9 000c 	ldreq.w	r0, [r9, #12]
 8001df4:	6895      	ldr	r5, [r2, #8]
 8001df6:	f8de 9018 	ldr.w	r9, [lr, #24]
 8001dfa:	f006 0603 	and.w	r6, r6, #3
 8001dfe:	2900      	cmp	r1, #0
 8001e00:	fa28 f806 	lsr.w	r8, r8, r6
 8001e04:	eb07 028c 	add.w	r2, r7, ip, lsl #2
 8001e08:	f000 80eb 	beq.w	8001fe2 <forward_dense+0x24a>
 8001e0c:	f8cd e01c 	str.w	lr, [sp, #28]
 8001e10:	9305      	str	r3, [sp, #20]
 8001e12:	f8cd c018 	str.w	ip, [sp, #24]
 8001e16:	9201      	str	r2, [sp, #4]
 8001e18:	9104      	str	r1, [sp, #16]
 8001e1a:	9907      	ldr	r1, [sp, #28]
 8001e1c:	680a      	ldr	r2, [r1, #0]
 8001e1e:	9905      	ldr	r1, [sp, #20]
 8001e20:	f8d2 b008 	ldr.w	fp, [r2, #8]
 8001e24:	9b01      	ldr	r3, [sp, #4]
 8001e26:	2900      	cmp	r1, #0
 8001e28:	bf1a      	itte	ne
 8001e2a:	680a      	ldrne	r2, [r1, #0]
 8001e2c:	6892      	ldrne	r2, [r2, #8]
 8001e2e:	2200      	moveq	r2, #0
 8001e30:	2800      	cmp	r0, #0
 8001e32:	f040 80ab 	bne.w	8001f8c <forward_dense+0x1f4>
 8001e36:	429f      	cmp	r7, r3
 8001e38:	f080 80c7 	bcs.w	8001fca <forward_dense+0x232>
 8001e3c:	9003      	str	r0, [sp, #12]
 8001e3e:	2a00      	cmp	r2, #0
 8001e40:	bf0e      	itee	eq
 8001e42:	ed9f 0a6b 	vldreq	s0, [pc, #428]	; 8001ff0 <.text_17>
 8001e46:	ed92 0a00 	vldrne	s0, [r2]
 8001e4a:	1d12      	addne	r2, r2, #4
 8001e4c:	2c04      	cmp	r4, #4
 8001e4e:	4620      	mov	r0, r4
 8001e50:	46ae      	mov	lr, r5
 8001e52:	46dc      	mov	ip, fp
 8001e54:	eddf 0a66 	vldr	s1, [pc, #408]	; 8001ff0 <.text_17>
 8001e58:	d35d      	bcc.n	8001f16 <forward_dense+0x17e>
 8001e5a:	08a1      	lsrs	r1, r4, #2
 8001e5c:	07ce      	lsls	r6, r1, #31
 8001e5e:	d51c      	bpl.n	8001e9a <forward_dense+0x102>
 8001e60:	ed9c 4a00 	vldr	s8, [ip]
 8001e64:	edde 4a00 	vldr	s9, [lr]
 8001e68:	ed9c 3a01 	vldr	s6, [ip, #4]
 8001e6c:	edde 3a01 	vldr	s7, [lr, #4]
 8001e70:	ed9c 2a02 	vldr	s4, [ip, #8]
 8001e74:	edde 2a02 	vldr	s5, [lr, #8]
 8001e78:	ed9c 1a03 	vldr	s2, [ip, #12]
 8001e7c:	edde 1a03 	vldr	s3, [lr, #12]
 8001e80:	ee44 0a24 	vmla.f32	s1, s8, s9
 8001e84:	ee43 0a23 	vmla.f32	s1, s6, s7
 8001e88:	ee42 0a22 	vmla.f32	s1, s4, s5
 8001e8c:	ee41 0a21 	vmla.f32	s1, s2, s3
 8001e90:	f10e 0e10 	add.w	lr, lr, #16
 8001e94:	f10c 0c10 	add.w	ip, ip, #16
 8001e98:	1f00      	subs	r0, r0, #4
 8001e9a:	0849      	lsrs	r1, r1, #1
 8001e9c:	f000 803b 	beq.w	8001f16 <forward_dense+0x17e>
 8001ea0:	edde 4a00 	vldr	s9, [lr]
 8001ea4:	edde 3a01 	vldr	s7, [lr, #4]
 8001ea8:	edde 2a02 	vldr	s5, [lr, #8]
 8001eac:	edde 1a03 	vldr	s3, [lr, #12]
 8001eb0:	ed9c 1a03 	vldr	s2, [ip, #12]
 8001eb4:	ed9c 2a02 	vldr	s4, [ip, #8]
 8001eb8:	ed9c 3a01 	vldr	s6, [ip, #4]
 8001ebc:	ed9c 4a00 	vldr	s8, [ip]
 8001ec0:	ee44 0a24 	vmla.f32	s1, s8, s9
 8001ec4:	ee43 0a23 	vmla.f32	s1, s6, s7
 8001ec8:	ee42 0a22 	vmla.f32	s1, s4, s5
 8001ecc:	ee41 0a21 	vmla.f32	s1, s2, s3
 8001ed0:	f10e 0610 	add.w	r6, lr, #16
 8001ed4:	f10c 0c10 	add.w	ip, ip, #16
 8001ed8:	edd6 8a00 	vldr	s17, [r6]
 8001edc:	ed9c 8a00 	vldr	s16, [ip]
 8001ee0:	ed9c 7a01 	vldr	s14, [ip, #4]
 8001ee4:	edd6 7a01 	vldr	s15, [r6, #4]
 8001ee8:	ed9c 6a02 	vldr	s12, [ip, #8]
 8001eec:	edd6 6a02 	vldr	s13, [r6, #8]
 8001ef0:	ed9c 5a03 	vldr	s10, [ip, #12]
 8001ef4:	edd6 5a03 	vldr	s11, [r6, #12]
 8001ef8:	ee48 0a28 	vmla.f32	s1, s16, s17
 8001efc:	ee47 0a27 	vmla.f32	s1, s14, s15
 8001f00:	3808      	subs	r0, #8
 8001f02:	ee46 0a26 	vmla.f32	s1, s12, s13
 8001f06:	1e49      	subs	r1, r1, #1
 8001f08:	ee45 0a25 	vmla.f32	s1, s10, s11
 8001f0c:	f106 0e10 	add.w	lr, r6, #16
 8001f10:	f10c 0c10 	add.w	ip, ip, #16
 8001f14:	d1c4      	bne.n	8001ea0 <forward_dense+0x108>
 8001f16:	b378      	cbz	r0, 8001f78 <forward_dense+0x1e0>
 8001f18:	f010 0103 	ands.w	r1, r0, #3
 8001f1c:	f000 800c 	beq.w	8001f38 <forward_dense+0x1a0>
 8001f20:	ed9c 1a00 	vldr	s2, [ip]
 8001f24:	edde 1a00 	vldr	s3, [lr]
 8001f28:	1e49      	subs	r1, r1, #1
 8001f2a:	ee41 0a21 	vmla.f32	s1, s2, s3
 8001f2e:	f10e 0e04 	add.w	lr, lr, #4
 8001f32:	f10c 0c04 	add.w	ip, ip, #4
 8001f36:	d1f3      	bne.n	8001f20 <forward_dense+0x188>
 8001f38:	0880      	lsrs	r0, r0, #2
 8001f3a:	d01d      	beq.n	8001f78 <forward_dense+0x1e0>
 8001f3c:	ed9c 2a00 	vldr	s4, [ip]
 8001f40:	ed9e 1a00 	vldr	s2, [lr]
 8001f44:	eddc 1a01 	vldr	s3, [ip, #4]
 8001f48:	edde 2a01 	vldr	s5, [lr, #4]
 8001f4c:	ee42 0a01 	vmla.f32	s1, s4, s2
 8001f50:	ee41 0aa2 	vmla.f32	s1, s3, s5
 8001f54:	ed9c 2a02 	vldr	s4, [ip, #8]
 8001f58:	ed9e 1a02 	vldr	s2, [lr, #8]
 8001f5c:	eddc 1a03 	vldr	s3, [ip, #12]
 8001f60:	edde 2a03 	vldr	s5, [lr, #12]
 8001f64:	ee42 0a01 	vmla.f32	s1, s4, s2
 8001f68:	1e40      	subs	r0, r0, #1
 8001f6a:	ee41 0aa2 	vmla.f32	s1, s3, s5
 8001f6e:	f10e 0e10 	add.w	lr, lr, #16
 8001f72:	f10c 0c10 	add.w	ip, ip, #16
 8001f76:	d1e1      	bne.n	8001f3c <forward_dense+0x1a4>
 8001f78:	ee30 0a20 	vadd.f32	s0, s0, s1
 8001f7c:	ed87 0a00 	vstr	s0, [r7]
 8001f80:	1d3f      	adds	r7, r7, #4
 8001f82:	429f      	cmp	r7, r3
 8001f84:	44cb      	add	fp, r9
 8001f86:	f4ff af5a 	bcc.w	8001e3e <forward_dense+0xa6>
 8001f8a:	e01d      	b.n	8001fc8 <forward_dense+0x230>
 8001f8c:	429f      	cmp	r7, r3
 8001f8e:	d21c      	bcs.n	8001fca <forward_dense+0x232>
 8001f90:	469a      	mov	sl, r3
 8001f92:	9003      	str	r0, [sp, #12]
 8001f94:	4616      	mov	r6, r2
 8001f96:	2e00      	cmp	r6, #0
 8001f98:	bf14      	ite	ne
 8001f9a:	f856 0b04 	ldrne.w	r0, [r6], #4
 8001f9e:	2000      	moveq	r0, #0
 8001fa0:	9002      	str	r0, [sp, #8]
 8001fa2:	f1b8 0f04 	cmp.w	r8, #4
 8001fa6:	9a03      	ldr	r2, [sp, #12]
 8001fa8:	9400      	str	r4, [sp, #0]
 8001faa:	462b      	mov	r3, r5
 8001fac:	4659      	mov	r1, fp
 8001fae:	a802      	add	r0, sp, #8
 8001fb0:	d102      	bne.n	8001fb8 <forward_dense+0x220>
 8001fb2:	f7ff fb39 	bl	8001628 <ai_dict4_dot_array_f32>
 8001fb6:	e001      	b.n	8001fbc <forward_dense+0x224>
 8001fb8:	f7ff f9ca 	bl	8001350 <ai_dict8_dot_array_f32>
 8001fbc:	9802      	ldr	r0, [sp, #8]
 8001fbe:	f847 0b04 	str.w	r0, [r7], #4
 8001fc2:	4557      	cmp	r7, sl
 8001fc4:	44cb      	add	fp, r9
 8001fc6:	d3e6      	bcc.n	8001f96 <forward_dense+0x1fe>
 8001fc8:	9803      	ldr	r0, [sp, #12]
 8001fca:	9901      	ldr	r1, [sp, #4]
 8001fcc:	9a06      	ldr	r2, [sp, #24]
 8001fce:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8001fd2:	9904      	ldr	r1, [sp, #16]
 8001fd4:	9301      	str	r3, [sp, #4]
 8001fd6:	1e49      	subs	r1, r1, #1
 8001fd8:	eb05 0584 	add.w	r5, r5, r4, lsl #2
 8001fdc:	9104      	str	r1, [sp, #16]
 8001fde:	f47f af1c 	bne.w	8001e1a <forward_dense+0x82>
 8001fe2:	b008      	add	sp, #32
 8001fe4:	ecbd 8b02 	vpop	{d8}
 8001fe8:	b001      	add	sp, #4
 8001fea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08001ff0 <.text_17>:
 8001ff0:	00000000 	.word	0x00000000

08001ff4 <arm_mat_gemm_f32>:
 8001ff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ff8:	4615      	mov	r5, r2
 8001ffa:	b08a      	sub	sp, #40	; 0x28
 8001ffc:	6842      	ldr	r2, [r0, #4]
 8001ffe:	9203      	str	r2, [sp, #12]
 8002000:	4699      	mov	r9, r3
 8002002:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8002004:	686c      	ldr	r4, [r5, #4]
 8002006:	9400      	str	r4, [sp, #0]
 8002008:	468b      	mov	fp, r1
 800200a:	685e      	ldr	r6, [r3, #4]
 800200c:	8804      	ldrh	r4, [r0, #0]
 800200e:	f8b3 c000 	ldrh.w	ip, [r3]
 8002012:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8002016:	8840      	ldrh	r0, [r0, #2]
 8002018:	f8bb 1000 	ldrh.w	r1, [fp]
 800201c:	f8bb 2002 	ldrh.w	r2, [fp, #2]
 8002020:	f8b5 e000 	ldrh.w	lr, [r5]
 8002024:	886f      	ldrh	r7, [r5, #2]
 8002026:	f8db 3004 	ldr.w	r3, [fp, #4]
 800202a:	9306      	str	r3, [sp, #24]
 800202c:	9305      	str	r3, [sp, #20]
 800202e:	2500      	movs	r5, #0
 8002030:	fa4f f389 	sxtb.w	r3, r9
 8002034:	2b00      	cmp	r3, #0
 8002036:	bf0c      	ite	eq
 8002038:	46a0      	moveq	r8, r4
 800203a:	4680      	movne	r8, r0
 800203c:	2f01      	cmp	r7, #1
 800203e:	bf0c      	ite	eq
 8002040:	2300      	moveq	r3, #0
 8002042:	2304      	movne	r3, #4
 8002044:	f1be 0f01 	cmp.w	lr, #1
 8002048:	d104      	bne.n	8002054 <arm_mat_gemm_f32+0x60>
 800204a:	2f01      	cmp	r7, #1
 800204c:	d007      	beq.n	800205e <arm_mat_gemm_f32+0x6a>
 800204e:	f1ca 0e00 	rsb	lr, sl, #0
 8002052:	e005      	b.n	8002060 <arm_mat_gemm_f32+0x6c>
 8002054:	2f01      	cmp	r7, #1
 8002056:	bf08      	it	eq
 8002058:	f04f 0e01 	moveq.w	lr, #1
 800205c:	d000      	beq.n	8002060 <arm_mat_gemm_f32+0x6c>
 800205e:	46ae      	mov	lr, r5
 8002060:	fa0f f78e 	sxth.w	r7, lr
 8002064:	9704      	str	r7, [sp, #16]
 8002066:	fa4f f789 	sxtb.w	r7, r9
 800206a:	2f00      	cmp	r7, #0
 800206c:	bf0c      	ite	eq
 800206e:	46a3      	moveq	fp, r4
 8002070:	4683      	movne	fp, r0
 8002072:	45e3      	cmp	fp, ip
 8002074:	d117      	bne.n	80020a6 <arm_mat_gemm_f32+0xb2>
 8002076:	f99d e04c 	ldrsb.w	lr, [sp, #76]	; 0x4c
 800207a:	f1be 0f00 	cmp.w	lr, #0
 800207e:	bf0c      	ite	eq
 8002080:	9201      	streq	r2, [sp, #4]
 8002082:	9101      	strne	r1, [sp, #4]
 8002084:	9f01      	ldr	r7, [sp, #4]
 8002086:	4557      	cmp	r7, sl
 8002088:	d10d      	bne.n	80020a6 <arm_mat_gemm_f32+0xb2>
 800208a:	fa4f f789 	sxtb.w	r7, r9
 800208e:	2f00      	cmp	r7, #0
 8002090:	bf0c      	ite	eq
 8002092:	4683      	moveq	fp, r0
 8002094:	46a3      	movne	fp, r4
 8002096:	f1be 0f00 	cmp.w	lr, #0
 800209a:	bf0c      	ite	eq
 800209c:	460f      	moveq	r7, r1
 800209e:	4617      	movne	r7, r2
 80020a0:	45bb      	cmp	fp, r7
 80020a2:	f000 808d 	beq.w	80021c0 <arm_mat_gemm_f32+0x1cc>
 80020a6:	fb0a f30c 	mul.w	r3, sl, ip
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	f06f 0002 	mvn.w	r0, #2
 80020b0:	f340 8083 	ble.w	80021ba <arm_mat_gemm_f32+0x1c6>
 80020b4:	1c6d      	adds	r5, r5, #1
 80020b6:	2100      	movs	r1, #0
 80020b8:	b2aa      	uxth	r2, r5
 80020ba:	6031      	str	r1, [r6, #0]
 80020bc:	429a      	cmp	r2, r3
 80020be:	bfbf      	itttt	lt
 80020c0:	6071      	strlt	r1, [r6, #4]
 80020c2:	1c6d      	addlt	r5, r5, #1
 80020c4:	b2aa      	uxthlt	r2, r5
 80020c6:	429a      	cmplt	r2, r3
 80020c8:	da77      	bge.n	80021ba <arm_mat_gemm_f32+0x1c6>
 80020ca:	1c6d      	adds	r5, r5, #1
 80020cc:	b2aa      	uxth	r2, r5
 80020ce:	429a      	cmp	r2, r3
 80020d0:	60b1      	str	r1, [r6, #8]
 80020d2:	da72      	bge.n	80021ba <arm_mat_gemm_f32+0x1c6>
 80020d4:	60f1      	str	r1, [r6, #12]
 80020d6:	1c6d      	adds	r5, r5, #1
 80020d8:	3610      	adds	r6, #16
 80020da:	b2aa      	uxth	r2, r5
 80020dc:	429a      	cmp	r2, r3
 80020de:	dbe9      	blt.n	80020b4 <arm_mat_gemm_f32+0xc0>
 80020e0:	b00a      	add	sp, #40	; 0x28
 80020e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80020e6:	9d06      	ldr	r5, [sp, #24]
 80020e8:	0097      	lsls	r7, r2, #2
 80020ea:	9708      	str	r7, [sp, #32]
 80020ec:	0087      	lsls	r7, r0, #2
 80020ee:	9707      	str	r7, [sp, #28]
 80020f0:	f8cd c00c 	str.w	ip, [sp, #12]
 80020f4:	f8ad 4008 	strh.w	r4, [sp, #8]
 80020f8:	ea4f 0408 	mov.w	r4, r8
 80020fc:	f8dd c014 	ldr.w	ip, [sp, #20]
 8002100:	fa4f f789 	sxtb.w	r7, r9
 8002104:	2f00      	cmp	r7, #0
 8002106:	bf0c      	ite	eq
 8002108:	4682      	moveq	sl, r0
 800210a:	f8bd a008 	ldrhne.w	sl, [sp, #8]
 800210e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8002112:	f1ba 0f00 	cmp.w	sl, #0
 8002116:	ed9f 1ab4 	vldr	s2, [pc, #720]	; 80023e8 <.text_21>
 800211a:	d018      	beq.n	800214e <arm_mat_gemm_f32+0x15a>
 800211c:	fa4f f789 	sxtb.w	r7, r9
 8002120:	2f00      	cmp	r7, #0
 8002122:	bf0c      	ite	eq
 8002124:	2704      	moveq	r7, #4
 8002126:	9f07      	ldrne	r7, [sp, #28]
 8002128:	f1be 0f00 	cmp.w	lr, #0
 800212c:	f1aa 0a01 	sub.w	sl, sl, #1
 8002130:	edd8 1a00 	vldr	s3, [r8]
 8002134:	ed95 2a00 	vldr	s4, [r5]
 8002138:	44b8      	add	r8, r7
 800213a:	bf0c      	ite	eq
 800213c:	9f08      	ldreq	r7, [sp, #32]
 800213e:	2704      	movne	r7, #4
 8002140:	19ed      	adds	r5, r5, r7
 8002142:	fa1f f78a 	uxth.w	r7, sl
 8002146:	2f00      	cmp	r7, #0
 8002148:	ee01 1a82 	vmla.f32	s2, s3, s4
 800214c:	d1e6      	bne.n	800211c <arm_mat_gemm_f32+0x128>
 800214e:	ee20 1a01 	vmul.f32	s2, s0, s2
 8002152:	eddb 1a00 	vldr	s3, [fp]
 8002156:	ee00 1aa1 	vmla.f32	s2, s1, s3
 800215a:	ed86 1a00 	vstr	s2, [r6]
 800215e:	1d36      	adds	r6, r6, #4
 8002160:	1e64      	subs	r4, r4, #1
 8002162:	b2a4      	uxth	r4, r4
 8002164:	f1be 0f00 	cmp.w	lr, #0
 8002168:	bf0e      	itee	eq
 800216a:	1b15      	subeq	r5, r2, r4
 800216c:	1b0d      	subne	r5, r1, r4
 800216e:	4355      	mulne	r5, r2
 8002170:	2c00      	cmp	r4, #0
 8002172:	449b      	add	fp, r3
 8002174:	eb0c 0585 	add.w	r5, ip, r5, lsl #2
 8002178:	d1c2      	bne.n	8002100 <arm_mat_gemm_f32+0x10c>
 800217a:	f8bd 6002 	ldrh.w	r6, [sp, #2]
 800217e:	9d03      	ldr	r5, [sp, #12]
 8002180:	f8bd 4008 	ldrh.w	r4, [sp, #8]
 8002184:	f8cd c014 	str.w	ip, [sp, #20]
 8002188:	9f01      	ldr	r7, [sp, #4]
 800218a:	443e      	add	r6, r7
 800218c:	f8ad 6002 	strh.w	r6, [sp, #2]
 8002190:	fa4f f689 	sxtb.w	r6, r9
 8002194:	2e00      	cmp	r6, #0
 8002196:	bf0c      	ite	eq
 8002198:	ea4f 0c80 	moveq.w	ip, r0, lsl #2
 800219c:	f04f 0c04 	movne.w	ip, #4
 80021a0:	44ac      	add	ip, r5
 80021a2:	9d04      	ldr	r5, [sp, #16]
 80021a4:	f8bd 6000 	ldrh.w	r6, [sp]
 80021a8:	eb0b 0b85 	add.w	fp, fp, r5, lsl #2
 80021ac:	1e75      	subs	r5, r6, #1
 80021ae:	f8ad 5000 	strh.w	r5, [sp]
 80021b2:	f8bd 5000 	ldrh.w	r5, [sp]
 80021b6:	b965      	cbnz	r5, 80021d2 <arm_mat_gemm_f32+0x1de>
 80021b8:	2000      	movs	r0, #0
 80021ba:	b00a      	add	sp, #40	; 0x28
 80021bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80021c0:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80021c4:	f8dd b000 	ldr.w	fp, [sp]
 80021c8:	9609      	str	r6, [sp, #36]	; 0x24
 80021ca:	f8ad 5002 	strh.w	r5, [sp, #2]
 80021ce:	f8ad 8000 	strh.w	r8, [sp]
 80021d2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80021d4:	f8bd 5002 	ldrh.w	r5, [sp, #2]
 80021d8:	f1be 0f00 	cmp.w	lr, #0
 80021dc:	eb07 0685 	add.w	r6, r7, r5, lsl #2
 80021e0:	bf0c      	ite	eq
 80021e2:	4690      	moveq	r8, r2
 80021e4:	4688      	movne	r8, r1
 80021e6:	e77e      	b.n	80020e6 <arm_mat_gemm_f32+0xf2>

080021e8 <forward_gemm>:
 80021e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021ea:	4604      	mov	r4, r0
 80021ec:	b08b      	sub	sp, #44	; 0x2c
 80021ee:	6960      	ldr	r0, [r4, #20]
 80021f0:	6800      	ldr	r0, [r0, #0]
 80021f2:	6801      	ldr	r1, [r0, #0]
 80021f4:	68c3      	ldr	r3, [r0, #12]
 80021f6:	8902      	ldrh	r2, [r0, #8]
 80021f8:	2600      	movs	r6, #0
 80021fa:	2700      	movs	r7, #0
 80021fc:	680d      	ldr	r5, [r1, #0]
 80021fe:	f8d3 c000 	ldr.w	ip, [r3]
 8002202:	2a03      	cmp	r2, #3
 8002204:	d102      	bne.n	800220c <forward_gemm+0x24>
 8002206:	684e      	ldr	r6, [r1, #4]
 8002208:	688f      	ldr	r7, [r1, #8]
 800220a:	e00a      	b.n	8002222 <forward_gemm+0x3a>
 800220c:	2a02      	cmp	r2, #2
 800220e:	d103      	bne.n	8002218 <forward_gemm+0x30>
 8002210:	6980      	ldr	r0, [r0, #24]
 8002212:	684e      	ldr	r6, [r1, #4]
 8002214:	6807      	ldr	r7, [r0, #0]
 8002216:	e004      	b.n	8002222 <forward_gemm+0x3a>
 8002218:	2a01      	cmp	r2, #1
 800221a:	d102      	bne.n	8002222 <forward_gemm+0x3a>
 800221c:	6980      	ldr	r0, [r0, #24]
 800221e:	6806      	ldr	r6, [r0, #0]
 8002220:	6847      	ldr	r7, [r0, #4]
 8002222:	f8dc 0000 	ldr.w	r0, [ip]
 8002226:	f8dc 2008 	ldr.w	r2, [ip, #8]
 800222a:	6883      	ldr	r3, [r0, #8]
 800222c:	f8dc 1010 	ldr.w	r1, [ip, #16]
 8002230:	b292      	uxth	r2, r2
 8002232:	b289      	uxth	r1, r1
 8002234:	a808      	add	r0, sp, #32
 8002236:	f002 fba3 	bl	8004980 <arm_mat_init_f32>
 800223a:	6829      	ldr	r1, [r5, #0]
 800223c:	688b      	ldr	r3, [r1, #8]
 800223e:	68aa      	ldr	r2, [r5, #8]
 8002240:	6929      	ldr	r1, [r5, #16]
 8002242:	b292      	uxth	r2, r2
 8002244:	b289      	uxth	r1, r1
 8002246:	a806      	add	r0, sp, #24
 8002248:	f002 fb9a 	bl	8004980 <arm_mat_init_f32>
 800224c:	6830      	ldr	r0, [r6, #0]
 800224e:	68b2      	ldr	r2, [r6, #8]
 8002250:	6883      	ldr	r3, [r0, #8]
 8002252:	6931      	ldr	r1, [r6, #16]
 8002254:	b292      	uxth	r2, r2
 8002256:	b289      	uxth	r1, r1
 8002258:	a804      	add	r0, sp, #16
 800225a:	f002 fb91 	bl	8004980 <arm_mat_init_f32>
 800225e:	6838      	ldr	r0, [r7, #0]
 8002260:	68ba      	ldr	r2, [r7, #8]
 8002262:	6883      	ldr	r3, [r0, #8]
 8002264:	6939      	ldr	r1, [r7, #16]
 8002266:	b292      	uxth	r2, r2
 8002268:	b289      	uxth	r1, r1
 800226a:	a802      	add	r0, sp, #8
 800226c:	f002 fb88 	bl	8004980 <arm_mat_init_f32>
 8002270:	a808      	add	r0, sp, #32
 8002272:	9001      	str	r0, [sp, #4]
 8002274:	aa02      	add	r2, sp, #8
 8002276:	f994 1021 	ldrsb.w	r1, [r4, #33]	; 0x21
 800227a:	9100      	str	r1, [sp, #0]
 800227c:	a904      	add	r1, sp, #16
 800227e:	f994 3020 	ldrsb.w	r3, [r4, #32]
 8002282:	edd4 0a07 	vldr	s1, [r4, #28]
 8002286:	ed94 0a06 	vldr	s0, [r4, #24]
 800228a:	a806      	add	r0, sp, #24
 800228c:	f7ff feb2 	bl	8001ff4 <arm_mat_gemm_f32>
 8002290:	b00b      	add	sp, #44	; 0x2c
 8002292:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002294 <forward_matmul>:
 8002294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002298:	b08b      	sub	sp, #44	; 0x2c
 800229a:	6940      	ldr	r0, [r0, #20]
 800229c:	6801      	ldr	r1, [r0, #0]
 800229e:	680a      	ldr	r2, [r1, #0]
 80022a0:	6810      	ldr	r0, [r2, #0]
 80022a2:	6857      	ldr	r7, [r2, #4]
 80022a4:	68ca      	ldr	r2, [r1, #12]
 80022a6:	6814      	ldr	r4, [r2, #0]
 80022a8:	b90f      	cbnz	r7, 80022ae <forward_matmul+0x1a>
 80022aa:	6989      	ldr	r1, [r1, #24]
 80022ac:	680f      	ldr	r7, [r1, #0]
 80022ae:	68a2      	ldr	r2, [r4, #8]
 80022b0:	f8d0 e004 	ldr.w	lr, [r0, #4]
 80022b4:	687d      	ldr	r5, [r7, #4]
 80022b6:	f8d4 c004 	ldr.w	ip, [r4, #4]
 80022ba:	68c1      	ldr	r1, [r0, #12]
 80022bc:	f8d7 800c 	ldr.w	r8, [r7, #12]
 80022c0:	f8d4 b00c 	ldr.w	fp, [r4, #12]
 80022c4:	6923      	ldr	r3, [r4, #16]
 80022c6:	9306      	str	r3, [sp, #24]
 80022c8:	fb01 fa0e 	mul.w	sl, r1, lr
 80022cc:	6824      	ldr	r4, [r4, #0]
 80022ce:	68a3      	ldr	r3, [r4, #8]
 80022d0:	6904      	ldr	r4, [r0, #16]
 80022d2:	434c      	muls	r4, r1
 80022d4:	fb0e f404 	mul.w	r4, lr, r4
 80022d8:	940a      	str	r4, [sp, #40]	; 0x28
 80022da:	693e      	ldr	r6, [r7, #16]
 80022dc:	fb08 f606 	mul.w	r6, r8, r6
 80022e0:	436e      	muls	r6, r5
 80022e2:	2a00      	cmp	r2, #0
 80022e4:	9609      	str	r6, [sp, #36]	; 0x24
 80022e6:	fb08 f805 	mul.w	r8, r8, r5
 80022ea:	d079      	beq.n	80023e0 <forward_matmul+0x14c>
 80022ec:	2400      	movs	r4, #0
 80022ee:	46a1      	mov	r9, r4
 80022f0:	9202      	str	r2, [sp, #8]
 80022f2:	9a06      	ldr	r2, [sp, #24]
 80022f4:	2a00      	cmp	r2, #0
 80022f6:	d069      	beq.n	80023cc <forward_matmul+0x138>
 80022f8:	2600      	movs	r6, #0
 80022fa:	9600      	str	r6, [sp, #0]
 80022fc:	f8cd a014 	str.w	sl, [sp, #20]
 8002300:	f8cd b00c 	str.w	fp, [sp, #12]
 8002304:	9a06      	ldr	r2, [sp, #24]
 8002306:	f8dd a000 	ldr.w	sl, [sp]
 800230a:	9201      	str	r2, [sp, #4]
 800230c:	9a03      	ldr	r2, [sp, #12]
 800230e:	2a00      	cmp	r2, #0
 8002310:	d052      	beq.n	80023b8 <forward_matmul+0x124>
 8002312:	9507      	str	r5, [sp, #28]
 8002314:	f04f 0b00 	mov.w	fp, #0
 8002318:	f8cd c010 	str.w	ip, [sp, #16]
 800231c:	9200      	str	r2, [sp, #0]
 800231e:	9a04      	ldr	r2, [sp, #16]
 8002320:	2a00      	cmp	r2, #0
 8002322:	d03f      	beq.n	80023a4 <forward_matmul+0x110>
 8002324:	f04f 0c00 	mov.w	ip, #0
 8002328:	9008      	str	r0, [sp, #32]
 800232a:	9808      	ldr	r0, [sp, #32]
 800232c:	6805      	ldr	r5, [r0, #0]
 800232e:	6838      	ldr	r0, [r7, #0]
 8002330:	68ae      	ldr	r6, [r5, #8]
 8002332:	6880      	ldr	r0, [r0, #8]
 8002334:	1936      	adds	r6, r6, r4
 8002336:	4456      	add	r6, sl
 8002338:	4448      	add	r0, r9
 800233a:	eb06 050c 	add.w	r5, r6, ip
 800233e:	4458      	add	r0, fp
 8002340:	eb00 060c 	add.w	r6, r0, ip
 8002344:	ed9f 0a28 	vldr	s0, [pc, #160]	; 80023e8 <.text_21>
 8002348:	b321      	cbz	r1, 8002394 <forward_matmul+0x100>
 800234a:	07c8      	lsls	r0, r1, #31
 800234c:	d509      	bpl.n	8002362 <forward_matmul+0xce>
 800234e:	edd5 0a00 	vldr	s1, [r5]
 8002352:	ed96 1a00 	vldr	s2, [r6]
 8002356:	ee00 0a81 	vmla.f32	s0, s1, s2
 800235a:	eb05 058e 	add.w	r5, r5, lr, lsl #2
 800235e:	eb06 0688 	add.w	r6, r6, r8, lsl #2
 8002362:	0848      	lsrs	r0, r1, #1
 8002364:	f000 8016 	beq.w	8002394 <forward_matmul+0x100>
 8002368:	edd5 0a00 	vldr	s1, [r5]
 800236c:	ed96 1a00 	vldr	s2, [r6]
 8002370:	eb05 058e 	add.w	r5, r5, lr, lsl #2
 8002374:	eb06 0688 	add.w	r6, r6, r8, lsl #2
 8002378:	ee00 0a81 	vmla.f32	s0, s1, s2
 800237c:	edd5 0a00 	vldr	s1, [r5]
 8002380:	ed96 1a00 	vldr	s2, [r6]
 8002384:	1e40      	subs	r0, r0, #1
 8002386:	ee00 0a81 	vmla.f32	s0, s1, s2
 800238a:	eb05 058e 	add.w	r5, r5, lr, lsl #2
 800238e:	eb06 0688 	add.w	r6, r6, r8, lsl #2
 8002392:	d1e9      	bne.n	8002368 <forward_matmul+0xd4>
 8002394:	ed83 0a00 	vstr	s0, [r3]
 8002398:	1d1b      	adds	r3, r3, #4
 800239a:	1e52      	subs	r2, r2, #1
 800239c:	f10c 0c04 	add.w	ip, ip, #4
 80023a0:	d1c3      	bne.n	800232a <forward_matmul+0x96>
 80023a2:	9808      	ldr	r0, [sp, #32]
 80023a4:	9d00      	ldr	r5, [sp, #0]
 80023a6:	9a07      	ldr	r2, [sp, #28]
 80023a8:	1e6d      	subs	r5, r5, #1
 80023aa:	eb0b 0b82 	add.w	fp, fp, r2, lsl #2
 80023ae:	9500      	str	r5, [sp, #0]
 80023b0:	d1b5      	bne.n	800231e <forward_matmul+0x8a>
 80023b2:	4615      	mov	r5, r2
 80023b4:	f8dd c010 	ldr.w	ip, [sp, #16]
 80023b8:	9e01      	ldr	r6, [sp, #4]
 80023ba:	9a05      	ldr	r2, [sp, #20]
 80023bc:	1e76      	subs	r6, r6, #1
 80023be:	eb0a 0a82 	add.w	sl, sl, r2, lsl #2
 80023c2:	9601      	str	r6, [sp, #4]
 80023c4:	d1a2      	bne.n	800230c <forward_matmul+0x78>
 80023c6:	4692      	mov	sl, r2
 80023c8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80023cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80023ce:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80023d0:	eb09 0982 	add.w	r9, r9, r2, lsl #2
 80023d4:	9a02      	ldr	r2, [sp, #8]
 80023d6:	1e52      	subs	r2, r2, #1
 80023d8:	eb04 0486 	add.w	r4, r4, r6, lsl #2
 80023dc:	9202      	str	r2, [sp, #8]
 80023de:	d188      	bne.n	80022f2 <forward_matmul+0x5e>
 80023e0:	b00b      	add	sp, #44	; 0x2c
 80023e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080023e8 <.text_21>:
 80023e8:	00000000 	.word	0x00000000

080023ec <.text_22>:
 80023ec:	0800134d 	.word	0x0800134d

080023f0 <nl_func_sm_channel_f32>:
 80023f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80023f4:	460f      	mov	r7, r1
 80023f6:	4614      	mov	r4, r2
 80023f8:	ed2d 8b02 	vpush	{d8}
 80023fc:	2c02      	cmp	r4, #2
 80023fe:	4606      	mov	r6, r0
 8002400:	ed97 8a00 	vldr	s16, [r7]
 8002404:	eddf 8ac5 	vldr	s17, [pc, #788]	; 800271c <.text_12>
 8002408:	d33d      	bcc.n	8002486 <nl_func_sm_channel_f32+0x96>
 800240a:	1e61      	subs	r1, r4, #1
 800240c:	1d3a      	adds	r2, r7, #4
 800240e:	f011 0003 	ands.w	r0, r1, #3
 8002412:	d00c      	beq.n	800242e <nl_func_sm_channel_f32+0x3e>
 8002414:	ed92 0a00 	vldr	s0, [r2]
 8002418:	eeb4 0a48 	vcmp.f32	s0, s16
 800241c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002420:	bf58      	it	pl
 8002422:	eeb0 8a40 	vmovpl.f32	s16, s0
 8002426:	1e40      	subs	r0, r0, #1
 8002428:	f102 0204 	add.w	r2, r2, #4
 800242c:	d1f2      	bne.n	8002414 <nl_func_sm_channel_f32+0x24>
 800242e:	0889      	lsrs	r1, r1, #2
 8002430:	f000 802b 	beq.w	800248a <nl_func_sm_channel_f32+0x9a>
 8002434:	ed92 0a00 	vldr	s0, [r2]
 8002438:	eeb4 0a48 	vcmp.f32	s0, s16
 800243c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002440:	bf58      	it	pl
 8002442:	eeb0 8a40 	vmovpl.f32	s16, s0
 8002446:	ed92 0a01 	vldr	s0, [r2, #4]
 800244a:	eeb4 0a48 	vcmp.f32	s0, s16
 800244e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002452:	bf58      	it	pl
 8002454:	eeb0 8a40 	vmovpl.f32	s16, s0
 8002458:	ed92 0a02 	vldr	s0, [r2, #8]
 800245c:	eeb4 0a48 	vcmp.f32	s0, s16
 8002460:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002464:	bf58      	it	pl
 8002466:	eeb0 8a40 	vmovpl.f32	s16, s0
 800246a:	ed92 0a03 	vldr	s0, [r2, #12]
 800246e:	eeb4 0a48 	vcmp.f32	s0, s16
 8002472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002476:	bf58      	it	pl
 8002478:	eeb0 8a40 	vmovpl.f32	s16, s0
 800247c:	1e49      	subs	r1, r1, #1
 800247e:	f102 0210 	add.w	r2, r2, #16
 8002482:	d1d7      	bne.n	8002434 <nl_func_sm_channel_f32+0x44>
 8002484:	e001      	b.n	800248a <nl_func_sm_channel_f32+0x9a>
 8002486:	2c00      	cmp	r4, #0
 8002488:	d040      	beq.n	800250c <nl_func_sm_channel_f32+0x11c>
 800248a:	46b0      	mov	r8, r6
 800248c:	ea4f 0504 	mov.w	r5, r4
 8002490:	ed97 0a00 	vldr	s0, [r7]
 8002494:	ee30 0a48 	vsub.f32	s0, s0, s16
 8002498:	f008 fcc2 	bl	800ae20 <expf>
 800249c:	1d3f      	adds	r7, r7, #4
 800249e:	ed88 0a00 	vstr	s0, [r8]
 80024a2:	1e6d      	subs	r5, r5, #1
 80024a4:	ee78 8a80 	vadd.f32	s17, s17, s0
 80024a8:	f108 0804 	add.w	r8, r8, #4
 80024ac:	d1f0      	bne.n	8002490 <nl_func_sm_channel_f32+0xa0>
 80024ae:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80024b2:	f014 0003 	ands.w	r0, r4, #3
 80024b6:	ee80 0a28 	vdiv.f32	s0, s0, s17
 80024ba:	d009      	beq.n	80024d0 <nl_func_sm_channel_f32+0xe0>
 80024bc:	edd6 0a00 	vldr	s1, [r6]
 80024c0:	ee60 0a80 	vmul.f32	s1, s1, s0
 80024c4:	edc6 0a00 	vstr	s1, [r6]
 80024c8:	1e40      	subs	r0, r0, #1
 80024ca:	f106 0604 	add.w	r6, r6, #4
 80024ce:	d1f5      	bne.n	80024bc <nl_func_sm_channel_f32+0xcc>
 80024d0:	08a4      	lsrs	r4, r4, #2
 80024d2:	d01b      	beq.n	800250c <nl_func_sm_channel_f32+0x11c>
 80024d4:	edd6 0a00 	vldr	s1, [r6]
 80024d8:	ee60 0a80 	vmul.f32	s1, s1, s0
 80024dc:	edc6 0a00 	vstr	s1, [r6]
 80024e0:	1e64      	subs	r4, r4, #1
 80024e2:	ed96 1a01 	vldr	s2, [r6, #4]
 80024e6:	edd6 0a02 	vldr	s1, [r6, #8]
 80024ea:	ee21 1a00 	vmul.f32	s2, s2, s0
 80024ee:	ed86 1a01 	vstr	s2, [r6, #4]
 80024f2:	ee60 0a80 	vmul.f32	s1, s1, s0
 80024f6:	ed96 1a03 	vldr	s2, [r6, #12]
 80024fa:	edc6 0a02 	vstr	s1, [r6, #8]
 80024fe:	ee21 1a00 	vmul.f32	s2, s2, s0
 8002502:	ed86 1a03 	vstr	s2, [r6, #12]
 8002506:	f106 0610 	add.w	r6, r6, #16
 800250a:	d1e3      	bne.n	80024d4 <nl_func_sm_channel_f32+0xe4>
 800250c:	ecbd 8b02 	vpop	{d8}
 8002510:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002514 <nl_func_sm_array_f32>:
 8002514:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002518:	b081      	sub	sp, #4
 800251a:	460c      	mov	r4, r1
 800251c:	9f08      	ldr	r7, [sp, #32]
 800251e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8002520:	00bf      	lsls	r7, r7, #2
 8002522:	427f      	negs	r7, r7
 8002524:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8002528:	19cd      	adds	r5, r1, r7
 800252a:	00b6      	lsls	r6, r6, #2
 800252c:	4276      	negs	r6, r6
 800252e:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8002532:	42a5      	cmp	r5, r4
 8002534:	4698      	mov	r8, r3
 8002536:	eb00 0906 	add.w	r9, r0, r6
 800253a:	d309      	bcc.n	8002550 <nl_func_sm_array_f32+0x3c>
 800253c:	2300      	movs	r3, #0
 800253e:	4642      	mov	r2, r8
 8002540:	4629      	mov	r1, r5
 8002542:	4648      	mov	r0, r9
 8002544:	f7ff ff54 	bl	80023f0 <nl_func_sm_channel_f32>
 8002548:	19ed      	adds	r5, r5, r7
 800254a:	42a5      	cmp	r5, r4
 800254c:	44b1      	add	r9, r6
 800254e:	d2f5      	bcs.n	800253c <nl_func_sm_array_f32+0x28>
 8002550:	b001      	add	sp, #4
 8002552:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08002558 <nl_func_tanh_array_f32>:
 8002558:	b570      	push	{r4, r5, r6, lr}
 800255a:	460c      	mov	r4, r1
 800255c:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8002560:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8002564:	1f0d      	subs	r5, r1, #4
 8002566:	1f06      	subs	r6, r0, #4
 8002568:	42a5      	cmp	r5, r4
 800256a:	d309      	bcc.n	8002580 <nl_func_tanh_array_f32+0x28>
 800256c:	ed95 0a00 	vldr	s0, [r5]
 8002570:	f008 fc04 	bl	800ad7c <tanhf>
 8002574:	ed86 0a00 	vstr	s0, [r6]
 8002578:	1f2d      	subs	r5, r5, #4
 800257a:	1f36      	subs	r6, r6, #4
 800257c:	42a5      	cmp	r5, r4
 800257e:	d2f5      	bcs.n	800256c <nl_func_tanh_array_f32+0x14>
 8002580:	bd70      	pop	{r4, r5, r6, pc}
	...

08002584 <nl_func_sigmoid_array_f32>:
 8002584:	b570      	push	{r4, r5, r6, lr}
 8002586:	460c      	mov	r4, r1
 8002588:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 800258c:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8002590:	1f0d      	subs	r5, r1, #4
 8002592:	1f06      	subs	r6, r0, #4
 8002594:	42a5      	cmp	r5, r4
 8002596:	d313      	bcc.n	80025c0 <nl_func_sigmoid_array_f32+0x3c>
 8002598:	ed95 0a00 	vldr	s0, [r5]
 800259c:	eeb1 0a40 	vneg.f32	s0, s0
 80025a0:	f008 fc3e 	bl	800ae20 <expf>
 80025a4:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80025a8:	ee70 0a20 	vadd.f32	s1, s0, s1
 80025ac:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80025b0:	ee80 0a20 	vdiv.f32	s0, s0, s1
 80025b4:	ed86 0a00 	vstr	s0, [r6]
 80025b8:	1f2d      	subs	r5, r5, #4
 80025ba:	1f36      	subs	r6, r6, #4
 80025bc:	42a5      	cmp	r5, r4
 80025be:	d2eb      	bcs.n	8002598 <nl_func_sigmoid_array_f32+0x14>
 80025c0:	bd70      	pop	{r4, r5, r6, pc}
	...

080025c4 <nl_func_hard_sigmoid_array_f32>:
 80025c4:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 80025c8:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 80025cc:	1f1b      	subs	r3, r3, #4
 80025ce:	1f00      	subs	r0, r0, #4
 80025d0:	428b      	cmp	r3, r1
 80025d2:	d321      	bcc.n	8002618 <nl_func_hard_sigmoid_array_f32+0x54>
 80025d4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80025d8:	eddf 0aa6 	vldr	s1, [pc, #664]	; 8002874 <.text_16>
 80025dc:	edd3 1a00 	vldr	s3, [r3]
 80025e0:	ed9f 2aa5 	vldr	s4, [pc, #660]	; 8002878 <.text_17>
 80025e4:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 80025e8:	ee01 1a82 	vmla.f32	s2, s3, s4
 80025ec:	eeb4 1a60 	vcmp.f32	s2, s1
 80025f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025f4:	da08      	bge.n	8002608 <nl_func_hard_sigmoid_array_f32+0x44>
 80025f6:	eeb5 1a40 	vcmp.f32	s2, #0.0
 80025fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025fe:	d505      	bpl.n	800260c <nl_func_hard_sigmoid_array_f32+0x48>
 8002600:	ed9f 1a46 	vldr	s2, [pc, #280]	; 800271c <.text_12>
 8002604:	e002      	b.n	800260c <nl_func_hard_sigmoid_array_f32+0x48>
 8002606:	bf00      	nop
 8002608:	eeb0 1a40 	vmov.f32	s2, s0
 800260c:	ed80 1a00 	vstr	s2, [r0]
 8002610:	1f1b      	subs	r3, r3, #4
 8002612:	1f00      	subs	r0, r0, #4
 8002614:	428b      	cmp	r3, r1
 8002616:	d2e1      	bcs.n	80025dc <nl_func_hard_sigmoid_array_f32+0x18>
 8002618:	4770      	bx	lr
	...

0800261c <nl_func_exp_array_f32>:
 800261c:	b570      	push	{r4, r5, r6, lr}
 800261e:	460c      	mov	r4, r1
 8002620:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8002624:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8002628:	1f0d      	subs	r5, r1, #4
 800262a:	1f06      	subs	r6, r0, #4
 800262c:	42a5      	cmp	r5, r4
 800262e:	d309      	bcc.n	8002644 <nl_func_exp_array_f32+0x28>
 8002630:	ed95 0a00 	vldr	s0, [r5]
 8002634:	f008 fbf4 	bl	800ae20 <expf>
 8002638:	ed86 0a00 	vstr	s0, [r6]
 800263c:	1f2d      	subs	r5, r5, #4
 800263e:	1f36      	subs	r6, r6, #4
 8002640:	42a5      	cmp	r5, r4
 8002642:	d2f5      	bcs.n	8002630 <nl_func_exp_array_f32+0x14>
 8002644:	bd70      	pop	{r4, r5, r6, pc}
	...

08002648 <nl_func_sqrt_array_f32>:
 8002648:	b570      	push	{r4, r5, r6, lr}
 800264a:	460c      	mov	r4, r1
 800264c:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8002650:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8002654:	1f0d      	subs	r5, r1, #4
 8002656:	1f06      	subs	r6, r0, #4
 8002658:	42a5      	cmp	r5, r4
 800265a:	d309      	bcc.n	8002670 <nl_func_sqrt_array_f32+0x28>
 800265c:	ed95 0a00 	vldr	s0, [r5]
 8002660:	f001 f9a8 	bl	80039b4 <ai_math_sqrt>
 8002664:	ed86 0a00 	vstr	s0, [r6]
 8002668:	1f2d      	subs	r5, r5, #4
 800266a:	1f36      	subs	r6, r6, #4
 800266c:	42a5      	cmp	r5, r4
 800266e:	d2f5      	bcs.n	800265c <nl_func_sqrt_array_f32+0x14>
 8002670:	bd70      	pop	{r4, r5, r6, pc}
	...

08002674 <nl_func_soft_plus_array_f32>:
 8002674:	b570      	push	{r4, r5, r6, lr}
 8002676:	460c      	mov	r4, r1
 8002678:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 800267c:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8002680:	1f0d      	subs	r5, r1, #4
 8002682:	1f06      	subs	r6, r0, #4
 8002684:	42a5      	cmp	r5, r4
 8002686:	d30f      	bcc.n	80026a8 <nl_func_soft_plus_array_f32+0x34>
 8002688:	ed95 0a00 	vldr	s0, [r5]
 800268c:	f008 fbc8 	bl	800ae20 <expf>
 8002690:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8002694:	ee30 0a20 	vadd.f32	s0, s0, s1
 8002698:	f008 fc3c 	bl	800af14 <logf>
 800269c:	ed86 0a00 	vstr	s0, [r6]
 80026a0:	1f2d      	subs	r5, r5, #4
 80026a2:	1f36      	subs	r6, r6, #4
 80026a4:	42a5      	cmp	r5, r4
 80026a6:	d2ef      	bcs.n	8002688 <nl_func_soft_plus_array_f32+0x14>
 80026a8:	bd70      	pop	{r4, r5, r6, pc}
	...

080026ac <nl_func_soft_sign_array_f32>:
 80026ac:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 80026b0:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 80026b4:	1f1b      	subs	r3, r3, #4
 80026b6:	1f00      	subs	r0, r0, #4
 80026b8:	428b      	cmp	r3, r1
 80026ba:	d30f      	bcc.n	80026dc <nl_func_soft_sign_array_f32+0x30>
 80026bc:	ed93 0a00 	vldr	s0, [r3]
 80026c0:	eef0 0ac0 	vabs.f32	s1, s0
 80026c4:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80026c8:	ee70 0a81 	vadd.f32	s1, s1, s2
 80026cc:	ee80 0a20 	vdiv.f32	s0, s0, s1
 80026d0:	ed80 0a00 	vstr	s0, [r0]
 80026d4:	1f1b      	subs	r3, r3, #4
 80026d6:	1f00      	subs	r0, r0, #4
 80026d8:	428b      	cmp	r3, r1
 80026da:	d2ef      	bcs.n	80026bc <nl_func_soft_sign_array_f32+0x10>
 80026dc:	4770      	bx	lr
	...

080026e0 <nl_func_sign_array_f32>:
 80026e0:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 80026e4:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 80026e8:	1f1b      	subs	r3, r3, #4
 80026ea:	1f00      	subs	r0, r0, #4
 80026ec:	428b      	cmp	r3, r1
 80026ee:	d314      	bcc.n	800271a <nl_func_sign_array_f32+0x3a>
 80026f0:	f04f 32ff 	mov.w	r2, #4294967295
 80026f4:	ed93 0a00 	vldr	s0, [r3]
 80026f8:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80026fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002700:	bfcc      	ite	gt
 8002702:	ed9f 0ab9 	vldrgt	s0, [pc, #740]	; 80029e8 <.text_21>
 8002706:	ee00 2a10 	vmovle	s0, r2
 800270a:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800270e:	ed80 0a00 	vstr	s0, [r0]
 8002712:	1f1b      	subs	r3, r3, #4
 8002714:	1f00      	subs	r0, r0, #4
 8002716:	428b      	cmp	r3, r1
 8002718:	d2ec      	bcs.n	80026f4 <nl_func_sign_array_f32+0x14>
 800271a:	4770      	bx	lr

0800271c <.text_12>:
 800271c:	00000000 	.word	0x00000000

08002720 <nl_func_clip_array_f32>:
 8002720:	ed93 0a00 	vldr	s0, [r3]
 8002724:	edd3 0a01 	vldr	s1, [r3, #4]
 8002728:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 800272c:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8002730:	1f1b      	subs	r3, r3, #4
 8002732:	1f00      	subs	r0, r0, #4
 8002734:	428b      	cmp	r3, r1
 8002736:	d315      	bcc.n	8002764 <nl_func_clip_array_f32+0x44>
 8002738:	ed93 1a00 	vldr	s2, [r3]
 800273c:	eeb4 0a41 	vcmp.f32	s0, s2
 8002740:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002744:	bf58      	it	pl
 8002746:	eeb0 1a40 	vmovpl.f32	s2, s0
 800274a:	eeb4 1a60 	vcmp.f32	s2, s1
 800274e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002752:	bf58      	it	pl
 8002754:	eeb0 1a60 	vmovpl.f32	s2, s1
 8002758:	ed80 1a00 	vstr	s2, [r0]
 800275c:	1f1b      	subs	r3, r3, #4
 800275e:	1f00      	subs	r0, r0, #4
 8002760:	428b      	cmp	r3, r1
 8002762:	d2e9      	bcs.n	8002738 <nl_func_clip_array_f32+0x18>
 8002764:	4770      	bx	lr
	...

08002768 <nl_func_hardmax_array_f32>:
 8002768:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800276c:	6856      	ldr	r6, [r2, #4]
 800276e:	68d4      	ldr	r4, [r2, #12]
 8002770:	4688      	mov	r8, r1
 8002772:	4374      	muls	r4, r6
 8002774:	4605      	mov	r5, r0
 8002776:	00a1      	lsls	r1, r4, #2
 8002778:	f007 fbcb 	bl	8009f12 <__aeabi_memclr>
 800277c:	2200      	movs	r2, #0
 800277e:	2c00      	cmp	r4, #0
 8002780:	4643      	mov	r3, r8
 8002782:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002786:	d05a      	beq.n	800283e <nl_func_hardmax_array_f32+0xd6>
 8002788:	f102 0c01 	add.w	ip, r2, #1
 800278c:	eb06 0e02 	add.w	lr, r6, r2
 8002790:	45f4      	cmp	ip, lr
 8002792:	edd3 0a00 	vldr	s1, [r3]
 8002796:	d249      	bcs.n	800282c <nl_func_hardmax_array_f32+0xc4>
 8002798:	1e71      	subs	r1, r6, #1
 800279a:	f011 0003 	ands.w	r0, r1, #3
 800279e:	eb08 078c 	add.w	r7, r8, ip, lsl #2
 80027a2:	d00f      	beq.n	80027c4 <nl_func_hardmax_array_f32+0x5c>
 80027a4:	ed97 1a00 	vldr	s2, [r7]
 80027a8:	eef4 0a41 	vcmp.f32	s1, s2
 80027ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027b0:	bf44      	itt	mi
 80027b2:	eef0 0a41 	vmovmi.f32	s1, s2
 80027b6:	4662      	movmi	r2, ip
 80027b8:	1e40      	subs	r0, r0, #1
 80027ba:	f10c 0c01 	add.w	ip, ip, #1
 80027be:	f107 0704 	add.w	r7, r7, #4
 80027c2:	d1ef      	bne.n	80027a4 <nl_func_hardmax_array_f32+0x3c>
 80027c4:	0889      	lsrs	r1, r1, #2
 80027c6:	d031      	beq.n	800282c <nl_func_hardmax_array_f32+0xc4>
 80027c8:	ed97 1a00 	vldr	s2, [r7]
 80027cc:	eef4 0a41 	vcmp.f32	s1, s2
 80027d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027d4:	bf44      	itt	mi
 80027d6:	eef0 0a41 	vmovmi.f32	s1, s2
 80027da:	4662      	movmi	r2, ip
 80027dc:	ed97 1a01 	vldr	s2, [r7, #4]
 80027e0:	eef4 0a41 	vcmp.f32	s1, s2
 80027e4:	f10c 0001 	add.w	r0, ip, #1
 80027e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027ec:	bf44      	itt	mi
 80027ee:	eef0 0a41 	vmovmi.f32	s1, s2
 80027f2:	4602      	movmi	r2, r0
 80027f4:	ed97 1a02 	vldr	s2, [r7, #8]
 80027f8:	1c40      	adds	r0, r0, #1
 80027fa:	eef4 0a41 	vcmp.f32	s1, s2
 80027fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002802:	bf44      	itt	mi
 8002804:	eef0 0a41 	vmovmi.f32	s1, s2
 8002808:	4602      	movmi	r2, r0
 800280a:	ed97 1a03 	vldr	s2, [r7, #12]
 800280e:	1c40      	adds	r0, r0, #1
 8002810:	eef4 0a41 	vcmp.f32	s1, s2
 8002814:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002818:	bf44      	itt	mi
 800281a:	eef0 0a41 	vmovmi.f32	s1, s2
 800281e:	4602      	movmi	r2, r0
 8002820:	1e49      	subs	r1, r1, #1
 8002822:	f100 0c01 	add.w	ip, r0, #1
 8002826:	f107 0710 	add.w	r7, r7, #16
 800282a:	d1cd      	bne.n	80027c8 <nl_func_hardmax_array_f32+0x60>
 800282c:	eb05 0082 	add.w	r0, r5, r2, lsl #2
 8002830:	4672      	mov	r2, lr
 8002832:	42a2      	cmp	r2, r4
 8002834:	ed80 0a00 	vstr	s0, [r0]
 8002838:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 800283c:	d3a4      	bcc.n	8002788 <nl_func_hardmax_array_f32+0x20>
 800283e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08002844 <nl_func_relu_array_f32>:
 8002844:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8002848:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 800284c:	1f1b      	subs	r3, r3, #4
 800284e:	1f00      	subs	r0, r0, #4
 8002850:	428b      	cmp	r3, r1
 8002852:	d30e      	bcc.n	8002872 <nl_func_relu_array_f32+0x2e>
 8002854:	ed93 0a00 	vldr	s0, [r3]
 8002858:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800285c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002860:	bf48      	it	mi
 8002862:	ed9f 0ab9 	vldrmi	s0, [pc, #740]	; 8002b48 <.text_25>
 8002866:	ed80 0a00 	vstr	s0, [r0]
 800286a:	1f1b      	subs	r3, r3, #4
 800286c:	1f00      	subs	r0, r0, #4
 800286e:	428b      	cmp	r3, r1
 8002870:	d2f0      	bcs.n	8002854 <nl_func_relu_array_f32+0x10>
 8002872:	4770      	bx	lr

08002874 <.text_16>:
 8002874:	3f800001 	.word	0x3f800001

08002878 <.text_17>:
 8002878:	3e4ccccd 	.word	0x3e4ccccd

0800287c <nl_func_relu_generic_array_f32>:
 800287c:	ed93 0a00 	vldr	s0, [r3]
 8002880:	edd3 0a01 	vldr	s1, [r3, #4]
 8002884:	ed93 1a02 	vldr	s2, [r3, #8]
 8002888:	1f00      	subs	r0, r0, #4
 800288a:	eeb5 1a40 	vcmp.f32	s2, #0.0
 800288e:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8002892:	1f0b      	subs	r3, r1, #4
 8002894:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002898:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800289c:	d52a      	bpl.n	80028f4 <nl_func_relu_generic_array_f32+0x78>
 800289e:	eef5 0a40 	vcmp.f32	s1, #0.0
 80028a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028a6:	d013      	beq.n	80028d0 <nl_func_relu_generic_array_f32+0x54>
 80028a8:	428a      	cmp	r2, r1
 80028aa:	d310      	bcc.n	80028ce <nl_func_relu_generic_array_f32+0x52>
 80028ac:	ed92 1a00 	vldr	s2, [r2]
 80028b0:	eeb4 1a40 	vcmp.f32	s2, s0
 80028b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028b8:	bf44      	itt	mi
 80028ba:	ee31 1a40 	vsubmi.f32	s2, s2, s0
 80028be:	ee21 1a20 	vmulmi.f32	s2, s2, s1
 80028c2:	ed80 1a00 	vstr	s2, [r0]
 80028c6:	1f12      	subs	r2, r2, #4
 80028c8:	1f00      	subs	r0, r0, #4
 80028ca:	428a      	cmp	r2, r1
 80028cc:	d2ee      	bcs.n	80028ac <nl_func_relu_generic_array_f32+0x30>
 80028ce:	4770      	bx	lr
 80028d0:	428a      	cmp	r2, r1
 80028d2:	d3fc      	bcc.n	80028ce <nl_func_relu_generic_array_f32+0x52>
 80028d4:	edd2 0a00 	vldr	s1, [r2]
 80028d8:	eef4 0a40 	vcmp.f32	s1, s0
 80028dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028e0:	bf48      	it	mi
 80028e2:	eddf 0a99 	vldrmi	s1, [pc, #612]	; 8002b48 <.text_25>
 80028e6:	edc0 0a00 	vstr	s1, [r0]
 80028ea:	1f12      	subs	r2, r2, #4
 80028ec:	1f00      	subs	r0, r0, #4
 80028ee:	428a      	cmp	r2, r1
 80028f0:	d2f0      	bcs.n	80028d4 <nl_func_relu_generic_array_f32+0x58>
 80028f2:	4770      	bx	lr
 80028f4:	428a      	cmp	r2, r1
 80028f6:	d3ea      	bcc.n	80028ce <nl_func_relu_generic_array_f32+0x52>
 80028f8:	edd2 1a00 	vldr	s3, [r2]
 80028fc:	eef4 1a41 	vcmp.f32	s3, s2
 8002900:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002904:	d50a      	bpl.n	800291c <nl_func_relu_generic_array_f32+0xa0>
 8002906:	eef4 1a40 	vcmp.f32	s3, s0
 800290a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800290e:	d507      	bpl.n	8002920 <nl_func_relu_generic_array_f32+0xa4>
 8002910:	ee71 1ac0 	vsub.f32	s3, s3, s0
 8002914:	ee61 1aa0 	vmul.f32	s3, s3, s1
 8002918:	e002      	b.n	8002920 <nl_func_relu_generic_array_f32+0xa4>
 800291a:	bf00      	nop
 800291c:	eef0 1a41 	vmov.f32	s3, s2
 8002920:	edc0 1a00 	vstr	s3, [r0]
 8002924:	1f12      	subs	r2, r2, #4
 8002926:	1f00      	subs	r0, r0, #4
 8002928:	428a      	cmp	r2, r1
 800292a:	d2e5      	bcs.n	80028f8 <nl_func_relu_generic_array_f32+0x7c>
 800292c:	4770      	bx	lr
	...

08002930 <nl_func_relu_thresholded_array_f32>:
 8002930:	ed93 0a00 	vldr	s0, [r3]
 8002934:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8002938:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 800293c:	1f1b      	subs	r3, r3, #4
 800293e:	1f00      	subs	r0, r0, #4
 8002940:	428b      	cmp	r3, r1
 8002942:	d30e      	bcc.n	8002962 <nl_func_relu_thresholded_array_f32+0x32>
 8002944:	edd3 0a00 	vldr	s1, [r3]
 8002948:	eef4 0a40 	vcmp.f32	s1, s0
 800294c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002950:	bf48      	it	mi
 8002952:	eddf 0a7d 	vldrmi	s1, [pc, #500]	; 8002b48 <.text_25>
 8002956:	edc0 0a00 	vstr	s1, [r0]
 800295a:	1f1b      	subs	r3, r3, #4
 800295c:	1f00      	subs	r0, r0, #4
 800295e:	428b      	cmp	r3, r1
 8002960:	d2f0      	bcs.n	8002944 <nl_func_relu_thresholded_array_f32+0x14>
 8002962:	4770      	bx	lr

08002964 <nl_func_elu_array_f32>:
 8002964:	b570      	push	{r4, r5, r6, lr}
 8002966:	460c      	mov	r4, r1
 8002968:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 800296c:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8002970:	1f0d      	subs	r5, r1, #4
 8002972:	1f06      	subs	r6, r0, #4
 8002974:	ed2d 8b04 	vpush	{d8-d9}
 8002978:	42a5      	cmp	r5, r4
 800297a:	ed93 8a00 	vldr	s16, [r3]
 800297e:	d32f      	bcc.n	80029e0 <nl_func_elu_array_f32+0x7c>
 8002980:	edd5 8a00 	vldr	s17, [r5]
 8002984:	eef5 8a40 	vcmp.f32	s17, #0.0
 8002988:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800298c:	bf4c      	ite	mi
 800298e:	ed9f 9a6e 	vldrmi	s18, [pc, #440]	; 8002b48 <.text_25>
 8002992:	eeb0 9a68 	vmovpl.f32	s18, s17
 8002996:	eeb0 0a68 	vmov.f32	s0, s17
 800299a:	f008 fa41 	bl	800ae20 <expf>
 800299e:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 80029a2:	ee30 0a20 	vadd.f32	s0, s0, s1
 80029a6:	ee20 0a08 	vmul.f32	s0, s0, s16
 80029aa:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80029ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029b2:	dd05      	ble.n	80029c0 <nl_func_elu_array_f32+0x5c>
 80029b4:	ed9f 1a64 	vldr	s2, [pc, #400]	; 8002b48 <.text_25>
 80029b8:	ee39 9a01 	vadd.f32	s18, s18, s2
 80029bc:	e00a      	b.n	80029d4 <nl_func_elu_array_f32+0x70>
 80029be:	bf00      	nop
 80029c0:	eeb0 0a68 	vmov.f32	s0, s17
 80029c4:	f008 fa2c 	bl	800ae20 <expf>
 80029c8:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 80029cc:	ee30 0a20 	vadd.f32	s0, s0, s1
 80029d0:	ee00 9a08 	vmla.f32	s18, s0, s16
 80029d4:	ed86 9a00 	vstr	s18, [r6]
 80029d8:	1f2d      	subs	r5, r5, #4
 80029da:	1f36      	subs	r6, r6, #4
 80029dc:	42a5      	cmp	r5, r4
 80029de:	d2cf      	bcs.n	8002980 <nl_func_elu_array_f32+0x1c>
 80029e0:	ecbd 8b04 	vpop	{d8-d9}
 80029e4:	bd70      	pop	{r4, r5, r6, pc}
	...

080029e8 <.text_21>:
 80029e8:	00000001 	.word	0x00000001

080029ec <nl_func_selu_array_f32>:
 80029ec:	b570      	push	{r4, r5, r6, lr}
 80029ee:	460c      	mov	r4, r1
 80029f0:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 80029f4:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 80029f8:	1f0d      	subs	r5, r1, #4
 80029fa:	1f06      	subs	r6, r0, #4
 80029fc:	ed2d 8b04 	vpush	{d8-d9}
 8002a00:	42a5      	cmp	r5, r4
 8002a02:	ed93 8a00 	vldr	s16, [r3]
 8002a06:	edd3 8a01 	vldr	s17, [r3, #4]
 8002a0a:	d331      	bcc.n	8002a70 <nl_func_selu_array_f32+0x84>
 8002a0c:	ed95 9a00 	vldr	s18, [r5]
 8002a10:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8002a14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a18:	bf4c      	ite	mi
 8002a1a:	eddf 9a4b 	vldrmi	s19, [pc, #300]	; 8002b48 <.text_25>
 8002a1e:	eef0 9a49 	vmovpl.f32	s19, s18
 8002a22:	eeb0 0a49 	vmov.f32	s0, s18
 8002a26:	f008 f9fb 	bl	800ae20 <expf>
 8002a2a:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8002a2e:	ee30 0a20 	vadd.f32	s0, s0, s1
 8002a32:	ee20 0a08 	vmul.f32	s0, s0, s16
 8002a36:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8002a3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a3e:	dd05      	ble.n	8002a4c <nl_func_selu_array_f32+0x60>
 8002a40:	ed9f 1a41 	vldr	s2, [pc, #260]	; 8002b48 <.text_25>
 8002a44:	ee79 9a81 	vadd.f32	s19, s19, s2
 8002a48:	e00a      	b.n	8002a60 <nl_func_selu_array_f32+0x74>
 8002a4a:	bf00      	nop
 8002a4c:	eeb0 0a49 	vmov.f32	s0, s18
 8002a50:	f008 f9e6 	bl	800ae20 <expf>
 8002a54:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8002a58:	ee30 0a20 	vadd.f32	s0, s0, s1
 8002a5c:	ee40 9a08 	vmla.f32	s19, s0, s16
 8002a60:	ee28 0aa9 	vmul.f32	s0, s17, s19
 8002a64:	ed86 0a00 	vstr	s0, [r6]
 8002a68:	1f2d      	subs	r5, r5, #4
 8002a6a:	1f36      	subs	r6, r6, #4
 8002a6c:	42a5      	cmp	r5, r4
 8002a6e:	d2cd      	bcs.n	8002a0c <nl_func_selu_array_f32+0x20>
 8002a70:	ecbd 8b04 	vpop	{d8-d9}
 8002a74:	bd70      	pop	{r4, r5, r6, pc}
	...

08002a78 <nl_func_prelu_array_f32>:
 8002a78:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8002a7c:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 8002a80:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8002a84:	1f1b      	subs	r3, r3, #4
 8002a86:	f1ac 0c04 	sub.w	ip, ip, #4
 8002a8a:	1f00      	subs	r0, r0, #4
 8002a8c:	458c      	cmp	ip, r1
 8002a8e:	d320      	bcc.n	8002ad2 <nl_func_prelu_array_f32+0x5a>
 8002a90:	ed9c 0a00 	vldr	s0, [ip]
 8002a94:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8002a98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a9c:	bf4c      	ite	mi
 8002a9e:	eddf 0a2a 	vldrmi	s1, [pc, #168]	; 8002b48 <.text_25>
 8002aa2:	eef0 0a40 	vmovpl.f32	s1, s0
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	eeb1 0a40 	vneg.f32	s0, s0
 8002aac:	1f13      	subs	r3, r2, #4
 8002aae:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8002ab2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ab6:	bf48      	it	mi
 8002ab8:	ed9f 0a23 	vldrmi	s0, [pc, #140]	; 8002b48 <.text_25>
 8002abc:	ed92 1a00 	vldr	s2, [r2]
 8002ac0:	ee41 0a40 	vmls.f32	s1, s2, s0
 8002ac4:	edc0 0a00 	vstr	s1, [r0]
 8002ac8:	f1ac 0c04 	sub.w	ip, ip, #4
 8002acc:	1f00      	subs	r0, r0, #4
 8002ace:	458c      	cmp	ip, r1
 8002ad0:	d2de      	bcs.n	8002a90 <nl_func_prelu_array_f32+0x18>
 8002ad2:	4770      	bx	lr

08002ad4 <forward_relu>:
 8002ad4:	b430      	push	{r4, r5}
 8002ad6:	4602      	mov	r2, r0
 8002ad8:	6950      	ldr	r0, [r2, #20]
 8002ada:	6800      	ldr	r0, [r0, #0]
 8002adc:	6801      	ldr	r1, [r0, #0]
 8002ade:	68c0      	ldr	r0, [r0, #12]
 8002ae0:	680b      	ldr	r3, [r1, #0]
 8002ae2:	6805      	ldr	r5, [r0, #0]
 8002ae4:	685c      	ldr	r4, [r3, #4]
 8002ae6:	6898      	ldr	r0, [r3, #8]
 8002ae8:	68d9      	ldr	r1, [r3, #12]
 8002aea:	682d      	ldr	r5, [r5, #0]
 8002aec:	6992      	ldr	r2, [r2, #24]
 8002aee:	4344      	muls	r4, r0
 8002af0:	6918      	ldr	r0, [r3, #16]
 8002af2:	434c      	muls	r4, r1
 8002af4:	6819      	ldr	r1, [r3, #0]
 8002af6:	6889      	ldr	r1, [r1, #8]
 8002af8:	4344      	muls	r4, r0
 8002afa:	68a8      	ldr	r0, [r5, #8]
 8002afc:	b9ca      	cbnz	r2, 8002b32 <forward_relu+0x5e>
 8002afe:	eb01 0284 	add.w	r2, r1, r4, lsl #2
 8002b02:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 8002b06:	1f12      	subs	r2, r2, #4
 8002b08:	1f00      	subs	r0, r0, #4
 8002b0a:	428a      	cmp	r2, r1
 8002b0c:	f0c0 801a 	bcc.w	8002b44 <forward_relu+0x70>
 8002b10:	ed92 0a00 	vldr	s0, [r2]
 8002b14:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8002b18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b1c:	bf48      	it	mi
 8002b1e:	ed9f 0a0a 	vldrmi	s0, [pc, #40]	; 8002b48 <.text_25>
 8002b22:	ed80 0a00 	vstr	s0, [r0]
 8002b26:	1f12      	subs	r2, r2, #4
 8002b28:	1f00      	subs	r0, r0, #4
 8002b2a:	428a      	cmp	r2, r1
 8002b2c:	d2f0      	bcs.n	8002b10 <forward_relu+0x3c>
 8002b2e:	bc30      	pop	{r4, r5}
 8002b30:	4770      	bx	lr
 8002b32:	6893      	ldr	r3, [r2, #8]
 8002b34:	6852      	ldr	r2, [r2, #4]
 8002b36:	2a01      	cmp	r2, #1
 8002b38:	4622      	mov	r2, r4
 8002b3a:	d101      	bne.n	8002b40 <forward_relu+0x6c>
 8002b3c:	bc30      	pop	{r4, r5}
 8002b3e:	e6f7      	b.n	8002930 <nl_func_relu_thresholded_array_f32>
 8002b40:	bc30      	pop	{r4, r5}
 8002b42:	e69b      	b.n	800287c <nl_func_relu_generic_array_f32>
 8002b44:	bc30      	pop	{r4, r5}
 8002b46:	4770      	bx	lr

08002b48 <.text_25>:
 8002b48:	00000000 	.word	0x00000000

08002b4c <forward_relu_thresholded>:
 8002b4c:	b430      	push	{r4, r5}
 8002b4e:	6941      	ldr	r1, [r0, #20]
 8002b50:	6980      	ldr	r0, [r0, #24]
 8002b52:	680c      	ldr	r4, [r1, #0]
 8002b54:	6822      	ldr	r2, [r4, #0]
 8002b56:	6815      	ldr	r5, [r2, #0]
 8002b58:	686b      	ldr	r3, [r5, #4]
 8002b5a:	68a9      	ldr	r1, [r5, #8]
 8002b5c:	68ea      	ldr	r2, [r5, #12]
 8002b5e:	434b      	muls	r3, r1
 8002b60:	6929      	ldr	r1, [r5, #16]
 8002b62:	682d      	ldr	r5, [r5, #0]
 8002b64:	4353      	muls	r3, r2
 8002b66:	6882      	ldr	r2, [r0, #8]
 8002b68:	ed92 0a00 	vldr	s0, [r2]
 8002b6c:	68e2      	ldr	r2, [r4, #12]
 8002b6e:	6814      	ldr	r4, [r2, #0]
 8002b70:	434b      	muls	r3, r1
 8002b72:	68a9      	ldr	r1, [r5, #8]
 8002b74:	6825      	ldr	r5, [r4, #0]
 8002b76:	68aa      	ldr	r2, [r5, #8]
 8002b78:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8002b7c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8002b80:	1f00      	subs	r0, r0, #4
 8002b82:	1f1a      	subs	r2, r3, #4
 8002b84:	4288      	cmp	r0, r1
 8002b86:	d30e      	bcc.n	8002ba6 <forward_relu_thresholded+0x5a>
 8002b88:	edd0 0a00 	vldr	s1, [r0]
 8002b8c:	eef4 0a40 	vcmp.f32	s1, s0
 8002b90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b94:	bf48      	it	mi
 8002b96:	eddf 0ac1 	vldrmi	s1, [pc, #772]	; 8002e9c <.text_34>
 8002b9a:	edc2 0a00 	vstr	s1, [r2]
 8002b9e:	1f00      	subs	r0, r0, #4
 8002ba0:	1f12      	subs	r2, r2, #4
 8002ba2:	4288      	cmp	r0, r1
 8002ba4:	d2f0      	bcs.n	8002b88 <forward_relu_thresholded+0x3c>
 8002ba6:	bc30      	pop	{r4, r5}
 8002ba8:	4770      	bx	lr
	...

08002bac <forward_elu>:
 8002bac:	b570      	push	{r4, r5, r6, lr}
 8002bae:	ed2d 8b04 	vpush	{d8-d9}
 8002bb2:	6941      	ldr	r1, [r0, #20]
 8002bb4:	680e      	ldr	r6, [r1, #0]
 8002bb6:	6832      	ldr	r2, [r6, #0]
 8002bb8:	6814      	ldr	r4, [r2, #0]
 8002bba:	6863      	ldr	r3, [r4, #4]
 8002bbc:	68a1      	ldr	r1, [r4, #8]
 8002bbe:	68e2      	ldr	r2, [r4, #12]
 8002bc0:	6980      	ldr	r0, [r0, #24]
 8002bc2:	434b      	muls	r3, r1
 8002bc4:	6921      	ldr	r1, [r4, #16]
 8002bc6:	6824      	ldr	r4, [r4, #0]
 8002bc8:	68a4      	ldr	r4, [r4, #8]
 8002bca:	4353      	muls	r3, r2
 8002bcc:	434b      	muls	r3, r1
 8002bce:	6881      	ldr	r1, [r0, #8]
 8002bd0:	ed91 8a00 	vldr	s16, [r1]
 8002bd4:	68f1      	ldr	r1, [r6, #12]
 8002bd6:	eb04 0083 	add.w	r0, r4, r3, lsl #2
 8002bda:	1f05      	subs	r5, r0, #4
 8002bdc:	6808      	ldr	r0, [r1, #0]
 8002bde:	6802      	ldr	r2, [r0, #0]
 8002be0:	6891      	ldr	r1, [r2, #8]
 8002be2:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8002be6:	1f06      	subs	r6, r0, #4
 8002be8:	42a5      	cmp	r5, r4
 8002bea:	d32f      	bcc.n	8002c4c <forward_elu+0xa0>
 8002bec:	edd5 8a00 	vldr	s17, [r5]
 8002bf0:	eef5 8a40 	vcmp.f32	s17, #0.0
 8002bf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bf8:	bf4c      	ite	mi
 8002bfa:	ed9f 9aa8 	vldrmi	s18, [pc, #672]	; 8002e9c <.text_34>
 8002bfe:	eeb0 9a68 	vmovpl.f32	s18, s17
 8002c02:	eeb0 0a68 	vmov.f32	s0, s17
 8002c06:	f008 f90b 	bl	800ae20 <expf>
 8002c0a:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8002c0e:	ee30 0a20 	vadd.f32	s0, s0, s1
 8002c12:	ee20 0a08 	vmul.f32	s0, s0, s16
 8002c16:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8002c1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c1e:	dd05      	ble.n	8002c2c <forward_elu+0x80>
 8002c20:	ed9f 1a9e 	vldr	s2, [pc, #632]	; 8002e9c <.text_34>
 8002c24:	ee39 9a01 	vadd.f32	s18, s18, s2
 8002c28:	e00a      	b.n	8002c40 <forward_elu+0x94>
 8002c2a:	bf00      	nop
 8002c2c:	eeb0 0a68 	vmov.f32	s0, s17
 8002c30:	f008 f8f6 	bl	800ae20 <expf>
 8002c34:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8002c38:	ee30 0a20 	vadd.f32	s0, s0, s1
 8002c3c:	ee00 9a08 	vmla.f32	s18, s0, s16
 8002c40:	ed86 9a00 	vstr	s18, [r6]
 8002c44:	1f2d      	subs	r5, r5, #4
 8002c46:	1f36      	subs	r6, r6, #4
 8002c48:	42a5      	cmp	r5, r4
 8002c4a:	d2cf      	bcs.n	8002bec <forward_elu+0x40>
 8002c4c:	ecbd 8b04 	vpop	{d8-d9}
 8002c50:	bd70      	pop	{r4, r5, r6, pc}

08002c52 <forward_selu>:
 8002c52:	b430      	push	{r4, r5}
 8002c54:	6941      	ldr	r1, [r0, #20]
 8002c56:	680c      	ldr	r4, [r1, #0]
 8002c58:	6822      	ldr	r2, [r4, #0]
 8002c5a:	6980      	ldr	r0, [r0, #24]
 8002c5c:	6815      	ldr	r5, [r2, #0]
 8002c5e:	6883      	ldr	r3, [r0, #8]
 8002c60:	686a      	ldr	r2, [r5, #4]
 8002c62:	68a8      	ldr	r0, [r5, #8]
 8002c64:	68e9      	ldr	r1, [r5, #12]
 8002c66:	4342      	muls	r2, r0
 8002c68:	6928      	ldr	r0, [r5, #16]
 8002c6a:	682d      	ldr	r5, [r5, #0]
 8002c6c:	434a      	muls	r2, r1
 8002c6e:	4342      	muls	r2, r0
 8002c70:	68e0      	ldr	r0, [r4, #12]
 8002c72:	6804      	ldr	r4, [r0, #0]
 8002c74:	68a9      	ldr	r1, [r5, #8]
 8002c76:	6825      	ldr	r5, [r4, #0]
 8002c78:	68a8      	ldr	r0, [r5, #8]
 8002c7a:	bc30      	pop	{r4, r5}
 8002c7c:	e6b6      	b.n	80029ec <nl_func_selu_array_f32>

08002c7e <forward_prelu>:
 8002c7e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002c82:	b081      	sub	sp, #4
 8002c84:	6940      	ldr	r0, [r0, #20]
 8002c86:	6800      	ldr	r0, [r0, #0]
 8002c88:	6801      	ldr	r1, [r0, #0]
 8002c8a:	68c2      	ldr	r2, [r0, #12]
 8002c8c:	6980      	ldr	r0, [r0, #24]
 8002c8e:	6804      	ldr	r4, [r0, #0]
 8002c90:	6820      	ldr	r0, [r4, #0]
 8002c92:	680d      	ldr	r5, [r1, #0]
 8002c94:	6817      	ldr	r7, [r2, #0]
 8002c96:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8002c9a:	b12c      	cbz	r4, 8002ca8 <forward_prelu+0x2a>
 8002c9c:	6841      	ldr	r1, [r0, #4]
 8002c9e:	6800      	ldr	r0, [r0, #0]
 8002ca0:	f000 fd32 	bl	8003708 <ai_array_get_byte_size>
 8002ca4:	4681      	mov	r9, r0
 8002ca6:	e001      	b.n	8002cac <forward_prelu+0x2e>
 8002ca8:	f04f 0901 	mov.w	r9, #1
 8002cac:	6828      	ldr	r0, [r5, #0]
 8002cae:	6841      	ldr	r1, [r0, #4]
 8002cb0:	6800      	ldr	r0, [r0, #0]
 8002cb2:	f000 fd29 	bl	8003708 <ai_array_get_byte_size>
 8002cb6:	6829      	ldr	r1, [r5, #0]
 8002cb8:	683a      	ldr	r2, [r7, #0]
 8002cba:	688e      	ldr	r6, [r1, #8]
 8002cbc:	6895      	ldr	r5, [r2, #8]
 8002cbe:	1837      	adds	r7, r6, r0
 8002cc0:	42be      	cmp	r6, r7
 8002cc2:	d20f      	bcs.n	8002ce4 <forward_prelu+0x66>
 8002cc4:	6862      	ldr	r2, [r4, #4]
 8002cc6:	68a0      	ldr	r0, [r4, #8]
 8002cc8:	68e1      	ldr	r1, [r4, #12]
 8002cca:	4342      	muls	r2, r0
 8002ccc:	6920      	ldr	r0, [r4, #16]
 8002cce:	434a      	muls	r2, r1
 8002cd0:	4342      	muls	r2, r0
 8002cd2:	4643      	mov	r3, r8
 8002cd4:	4631      	mov	r1, r6
 8002cd6:	4628      	mov	r0, r5
 8002cd8:	f7ff fece 	bl	8002a78 <nl_func_prelu_array_f32>
 8002cdc:	444e      	add	r6, r9
 8002cde:	42be      	cmp	r6, r7
 8002ce0:	444d      	add	r5, r9
 8002ce2:	d3ef      	bcc.n	8002cc4 <forward_prelu+0x46>
 8002ce4:	b001      	add	sp, #4
 8002ce6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08002cec <forward_sign>:
 8002cec:	b430      	push	{r4, r5}
 8002cee:	6940      	ldr	r0, [r0, #20]
 8002cf0:	6802      	ldr	r2, [r0, #0]
 8002cf2:	6811      	ldr	r1, [r2, #0]
 8002cf4:	68d2      	ldr	r2, [r2, #12]
 8002cf6:	680b      	ldr	r3, [r1, #0]
 8002cf8:	685c      	ldr	r4, [r3, #4]
 8002cfa:	6898      	ldr	r0, [r3, #8]
 8002cfc:	68d9      	ldr	r1, [r3, #12]
 8002cfe:	4344      	muls	r4, r0
 8002d00:	6918      	ldr	r0, [r3, #16]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	434c      	muls	r4, r1
 8002d06:	4344      	muls	r4, r0
 8002d08:	6898      	ldr	r0, [r3, #8]
 8002d0a:	6813      	ldr	r3, [r2, #0]
 8002d0c:	681d      	ldr	r5, [r3, #0]
 8002d0e:	68aa      	ldr	r2, [r5, #8]
 8002d10:	eb00 0184 	add.w	r1, r0, r4, lsl #2
 8002d14:	eb02 0384 	add.w	r3, r2, r4, lsl #2
 8002d18:	1f09      	subs	r1, r1, #4
 8002d1a:	1f1a      	subs	r2, r3, #4
 8002d1c:	4281      	cmp	r1, r0
 8002d1e:	d314      	bcc.n	8002d4a <forward_sign+0x5e>
 8002d20:	f04f 33ff 	mov.w	r3, #4294967295
 8002d24:	ed91 0a00 	vldr	s0, [r1]
 8002d28:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8002d2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d30:	bfcc      	ite	gt
 8002d32:	ed9f 0a5b 	vldrgt	s0, [pc, #364]	; 8002ea0 <.text_35>
 8002d36:	ee00 3a10 	vmovle	s0, r3
 8002d3a:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8002d3e:	ed82 0a00 	vstr	s0, [r2]
 8002d42:	1f09      	subs	r1, r1, #4
 8002d44:	1f12      	subs	r2, r2, #4
 8002d46:	4281      	cmp	r1, r0
 8002d48:	d2ec      	bcs.n	8002d24 <forward_sign+0x38>
 8002d4a:	bc30      	pop	{r4, r5}
 8002d4c:	4770      	bx	lr
	...

08002d50 <forward_clip>:
 8002d50:	b430      	push	{r4, r5}
 8002d52:	6941      	ldr	r1, [r0, #20]
 8002d54:	680c      	ldr	r4, [r1, #0]
 8002d56:	6822      	ldr	r2, [r4, #0]
 8002d58:	6815      	ldr	r5, [r2, #0]
 8002d5a:	686b      	ldr	r3, [r5, #4]
 8002d5c:	68a9      	ldr	r1, [r5, #8]
 8002d5e:	68ea      	ldr	r2, [r5, #12]
 8002d60:	6980      	ldr	r0, [r0, #24]
 8002d62:	434b      	muls	r3, r1
 8002d64:	6929      	ldr	r1, [r5, #16]
 8002d66:	4353      	muls	r3, r2
 8002d68:	434b      	muls	r3, r1
 8002d6a:	682a      	ldr	r2, [r5, #0]
 8002d6c:	6881      	ldr	r1, [r0, #8]
 8002d6e:	6890      	ldr	r0, [r2, #8]
 8002d70:	68e2      	ldr	r2, [r4, #12]
 8002d72:	ed91 0a00 	vldr	s0, [r1]
 8002d76:	6814      	ldr	r4, [r2, #0]
 8002d78:	edd1 0a01 	vldr	s1, [r1, #4]
 8002d7c:	6825      	ldr	r5, [r4, #0]
 8002d7e:	68aa      	ldr	r2, [r5, #8]
 8002d80:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8002d84:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8002d88:	1f09      	subs	r1, r1, #4
 8002d8a:	1f1a      	subs	r2, r3, #4
 8002d8c:	4281      	cmp	r1, r0
 8002d8e:	d315      	bcc.n	8002dbc <forward_clip+0x6c>
 8002d90:	ed91 1a00 	vldr	s2, [r1]
 8002d94:	eeb4 0a41 	vcmp.f32	s0, s2
 8002d98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d9c:	bf58      	it	pl
 8002d9e:	eeb0 1a40 	vmovpl.f32	s2, s0
 8002da2:	eeb4 1a60 	vcmp.f32	s2, s1
 8002da6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002daa:	bf58      	it	pl
 8002dac:	eeb0 1a60 	vmovpl.f32	s2, s1
 8002db0:	ed82 1a00 	vstr	s2, [r2]
 8002db4:	1f09      	subs	r1, r1, #4
 8002db6:	1f12      	subs	r2, r2, #4
 8002db8:	4281      	cmp	r1, r0
 8002dba:	d2e9      	bcs.n	8002d90 <forward_clip+0x40>
 8002dbc:	bc30      	pop	{r4, r5}
 8002dbe:	4770      	bx	lr

08002dc0 <forward_sigmoid>:
 8002dc0:	b570      	push	{r4, r5, r6, lr}
 8002dc2:	6940      	ldr	r0, [r0, #20]
 8002dc4:	6802      	ldr	r2, [r0, #0]
 8002dc6:	6811      	ldr	r1, [r2, #0]
 8002dc8:	680b      	ldr	r3, [r1, #0]
 8002dca:	685e      	ldr	r6, [r3, #4]
 8002dcc:	6898      	ldr	r0, [r3, #8]
 8002dce:	68d9      	ldr	r1, [r3, #12]
 8002dd0:	4346      	muls	r6, r0
 8002dd2:	6918      	ldr	r0, [r3, #16]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	689c      	ldr	r4, [r3, #8]
 8002dd8:	434e      	muls	r6, r1
 8002dda:	4346      	muls	r6, r0
 8002ddc:	68d1      	ldr	r1, [r2, #12]
 8002dde:	eb04 0086 	add.w	r0, r4, r6, lsl #2
 8002de2:	1f05      	subs	r5, r0, #4
 8002de4:	6808      	ldr	r0, [r1, #0]
 8002de6:	6802      	ldr	r2, [r0, #0]
 8002de8:	6891      	ldr	r1, [r2, #8]
 8002dea:	eb01 0086 	add.w	r0, r1, r6, lsl #2
 8002dee:	1f06      	subs	r6, r0, #4
 8002df0:	42a5      	cmp	r5, r4
 8002df2:	d313      	bcc.n	8002e1c <forward_sigmoid+0x5c>
 8002df4:	ed95 0a00 	vldr	s0, [r5]
 8002df8:	eeb1 0a40 	vneg.f32	s0, s0
 8002dfc:	f008 f810 	bl	800ae20 <expf>
 8002e00:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8002e04:	ee70 0a20 	vadd.f32	s1, s0, s1
 8002e08:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002e0c:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8002e10:	ed86 0a00 	vstr	s0, [r6]
 8002e14:	1f2d      	subs	r5, r5, #4
 8002e16:	1f36      	subs	r6, r6, #4
 8002e18:	42a5      	cmp	r5, r4
 8002e1a:	d2eb      	bcs.n	8002df4 <forward_sigmoid+0x34>
 8002e1c:	bd70      	pop	{r4, r5, r6, pc}
	...

08002e20 <forward_hard_sigmoid>:
 8002e20:	b430      	push	{r4, r5}
 8002e22:	6940      	ldr	r0, [r0, #20]
 8002e24:	6802      	ldr	r2, [r0, #0]
 8002e26:	6811      	ldr	r1, [r2, #0]
 8002e28:	68d2      	ldr	r2, [r2, #12]
 8002e2a:	680b      	ldr	r3, [r1, #0]
 8002e2c:	685c      	ldr	r4, [r3, #4]
 8002e2e:	6898      	ldr	r0, [r3, #8]
 8002e30:	68d9      	ldr	r1, [r3, #12]
 8002e32:	4344      	muls	r4, r0
 8002e34:	6918      	ldr	r0, [r3, #16]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	434c      	muls	r4, r1
 8002e3a:	4344      	muls	r4, r0
 8002e3c:	6898      	ldr	r0, [r3, #8]
 8002e3e:	6813      	ldr	r3, [r2, #0]
 8002e40:	681d      	ldr	r5, [r3, #0]
 8002e42:	68aa      	ldr	r2, [r5, #8]
 8002e44:	eb00 0184 	add.w	r1, r0, r4, lsl #2
 8002e48:	eb02 0384 	add.w	r3, r2, r4, lsl #2
 8002e4c:	1f09      	subs	r1, r1, #4
 8002e4e:	1f1a      	subs	r2, r3, #4
 8002e50:	4281      	cmp	r1, r0
 8002e52:	d321      	bcc.n	8002e98 <forward_hard_sigmoid+0x78>
 8002e54:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002e58:	eddf 0a12 	vldr	s1, [pc, #72]	; 8002ea4 <.text_36>
 8002e5c:	edd1 1a00 	vldr	s3, [r1]
 8002e60:	ed9f 2a11 	vldr	s4, [pc, #68]	; 8002ea8 <.text_37>
 8002e64:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 8002e68:	ee01 1a82 	vmla.f32	s2, s3, s4
 8002e6c:	eeb4 1a60 	vcmp.f32	s2, s1
 8002e70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e74:	da08      	bge.n	8002e88 <forward_hard_sigmoid+0x68>
 8002e76:	eeb5 1a40 	vcmp.f32	s2, #0.0
 8002e7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e7e:	d505      	bpl.n	8002e8c <forward_hard_sigmoid+0x6c>
 8002e80:	ed9f 1a06 	vldr	s2, [pc, #24]	; 8002e9c <.text_34>
 8002e84:	e002      	b.n	8002e8c <forward_hard_sigmoid+0x6c>
 8002e86:	bf00      	nop
 8002e88:	eeb0 1a40 	vmov.f32	s2, s0
 8002e8c:	ed82 1a00 	vstr	s2, [r2]
 8002e90:	1f09      	subs	r1, r1, #4
 8002e92:	1f12      	subs	r2, r2, #4
 8002e94:	4281      	cmp	r1, r0
 8002e96:	d2e1      	bcs.n	8002e5c <forward_hard_sigmoid+0x3c>
 8002e98:	bc30      	pop	{r4, r5}
 8002e9a:	4770      	bx	lr

08002e9c <.text_34>:
 8002e9c:	00000000 	.word	0x00000000

08002ea0 <.text_35>:
 8002ea0:	00000001 	.word	0x00000001

08002ea4 <.text_36>:
 8002ea4:	3f800001 	.word	0x3f800001

08002ea8 <.text_37>:
 8002ea8:	3e4ccccd 	.word	0x3e4ccccd

08002eac <forward_exp>:
 8002eac:	b570      	push	{r4, r5, r6, lr}
 8002eae:	6940      	ldr	r0, [r0, #20]
 8002eb0:	6802      	ldr	r2, [r0, #0]
 8002eb2:	6811      	ldr	r1, [r2, #0]
 8002eb4:	680b      	ldr	r3, [r1, #0]
 8002eb6:	685e      	ldr	r6, [r3, #4]
 8002eb8:	6898      	ldr	r0, [r3, #8]
 8002eba:	68d9      	ldr	r1, [r3, #12]
 8002ebc:	4346      	muls	r6, r0
 8002ebe:	6918      	ldr	r0, [r3, #16]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	689c      	ldr	r4, [r3, #8]
 8002ec4:	434e      	muls	r6, r1
 8002ec6:	4346      	muls	r6, r0
 8002ec8:	68d1      	ldr	r1, [r2, #12]
 8002eca:	eb04 0086 	add.w	r0, r4, r6, lsl #2
 8002ece:	1f05      	subs	r5, r0, #4
 8002ed0:	6808      	ldr	r0, [r1, #0]
 8002ed2:	6802      	ldr	r2, [r0, #0]
 8002ed4:	6891      	ldr	r1, [r2, #8]
 8002ed6:	eb01 0086 	add.w	r0, r1, r6, lsl #2
 8002eda:	1f06      	subs	r6, r0, #4
 8002edc:	42a5      	cmp	r5, r4
 8002ede:	d309      	bcc.n	8002ef4 <forward_exp+0x48>
 8002ee0:	ed95 0a00 	vldr	s0, [r5]
 8002ee4:	f007 ff9c 	bl	800ae20 <expf>
 8002ee8:	ed86 0a00 	vstr	s0, [r6]
 8002eec:	1f2d      	subs	r5, r5, #4
 8002eee:	1f36      	subs	r6, r6, #4
 8002ef0:	42a5      	cmp	r5, r4
 8002ef2:	d2f5      	bcs.n	8002ee0 <forward_exp+0x34>
 8002ef4:	bd70      	pop	{r4, r5, r6, pc}
	...

08002ef8 <forward_sqrt>:
 8002ef8:	b570      	push	{r4, r5, r6, lr}
 8002efa:	6940      	ldr	r0, [r0, #20]
 8002efc:	6802      	ldr	r2, [r0, #0]
 8002efe:	6811      	ldr	r1, [r2, #0]
 8002f00:	680b      	ldr	r3, [r1, #0]
 8002f02:	685e      	ldr	r6, [r3, #4]
 8002f04:	6898      	ldr	r0, [r3, #8]
 8002f06:	68d9      	ldr	r1, [r3, #12]
 8002f08:	4346      	muls	r6, r0
 8002f0a:	6918      	ldr	r0, [r3, #16]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	689c      	ldr	r4, [r3, #8]
 8002f10:	434e      	muls	r6, r1
 8002f12:	4346      	muls	r6, r0
 8002f14:	68d1      	ldr	r1, [r2, #12]
 8002f16:	eb04 0086 	add.w	r0, r4, r6, lsl #2
 8002f1a:	1f05      	subs	r5, r0, #4
 8002f1c:	6808      	ldr	r0, [r1, #0]
 8002f1e:	6802      	ldr	r2, [r0, #0]
 8002f20:	6891      	ldr	r1, [r2, #8]
 8002f22:	eb01 0086 	add.w	r0, r1, r6, lsl #2
 8002f26:	1f06      	subs	r6, r0, #4
 8002f28:	42a5      	cmp	r5, r4
 8002f2a:	d309      	bcc.n	8002f40 <forward_sqrt+0x48>
 8002f2c:	ed95 0a00 	vldr	s0, [r5]
 8002f30:	f000 fd40 	bl	80039b4 <ai_math_sqrt>
 8002f34:	ed86 0a00 	vstr	s0, [r6]
 8002f38:	1f2d      	subs	r5, r5, #4
 8002f3a:	1f36      	subs	r6, r6, #4
 8002f3c:	42a5      	cmp	r5, r4
 8002f3e:	d2f5      	bcs.n	8002f2c <forward_sqrt+0x34>
 8002f40:	bd70      	pop	{r4, r5, r6, pc}
	...

08002f44 <forward_soft_plus>:
 8002f44:	b570      	push	{r4, r5, r6, lr}
 8002f46:	6940      	ldr	r0, [r0, #20]
 8002f48:	6802      	ldr	r2, [r0, #0]
 8002f4a:	6811      	ldr	r1, [r2, #0]
 8002f4c:	680b      	ldr	r3, [r1, #0]
 8002f4e:	685e      	ldr	r6, [r3, #4]
 8002f50:	6898      	ldr	r0, [r3, #8]
 8002f52:	68d9      	ldr	r1, [r3, #12]
 8002f54:	4346      	muls	r6, r0
 8002f56:	6918      	ldr	r0, [r3, #16]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	689c      	ldr	r4, [r3, #8]
 8002f5c:	434e      	muls	r6, r1
 8002f5e:	4346      	muls	r6, r0
 8002f60:	68d1      	ldr	r1, [r2, #12]
 8002f62:	eb04 0086 	add.w	r0, r4, r6, lsl #2
 8002f66:	1f05      	subs	r5, r0, #4
 8002f68:	6808      	ldr	r0, [r1, #0]
 8002f6a:	6802      	ldr	r2, [r0, #0]
 8002f6c:	6891      	ldr	r1, [r2, #8]
 8002f6e:	eb01 0086 	add.w	r0, r1, r6, lsl #2
 8002f72:	1f06      	subs	r6, r0, #4
 8002f74:	42a5      	cmp	r5, r4
 8002f76:	d30f      	bcc.n	8002f98 <forward_soft_plus+0x54>
 8002f78:	ed95 0a00 	vldr	s0, [r5]
 8002f7c:	f007 ff50 	bl	800ae20 <expf>
 8002f80:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8002f84:	ee30 0a20 	vadd.f32	s0, s0, s1
 8002f88:	f007 ffc4 	bl	800af14 <logf>
 8002f8c:	ed86 0a00 	vstr	s0, [r6]
 8002f90:	1f2d      	subs	r5, r5, #4
 8002f92:	1f36      	subs	r6, r6, #4
 8002f94:	42a5      	cmp	r5, r4
 8002f96:	d2ef      	bcs.n	8002f78 <forward_soft_plus+0x34>
 8002f98:	bd70      	pop	{r4, r5, r6, pc}
	...

08002f9c <forward_soft_sign>:
 8002f9c:	b430      	push	{r4, r5}
 8002f9e:	6940      	ldr	r0, [r0, #20]
 8002fa0:	6802      	ldr	r2, [r0, #0]
 8002fa2:	6811      	ldr	r1, [r2, #0]
 8002fa4:	68d2      	ldr	r2, [r2, #12]
 8002fa6:	680b      	ldr	r3, [r1, #0]
 8002fa8:	685c      	ldr	r4, [r3, #4]
 8002faa:	6898      	ldr	r0, [r3, #8]
 8002fac:	68d9      	ldr	r1, [r3, #12]
 8002fae:	4344      	muls	r4, r0
 8002fb0:	6918      	ldr	r0, [r3, #16]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	434c      	muls	r4, r1
 8002fb6:	4344      	muls	r4, r0
 8002fb8:	6898      	ldr	r0, [r3, #8]
 8002fba:	6813      	ldr	r3, [r2, #0]
 8002fbc:	681d      	ldr	r5, [r3, #0]
 8002fbe:	68aa      	ldr	r2, [r5, #8]
 8002fc0:	eb00 0184 	add.w	r1, r0, r4, lsl #2
 8002fc4:	eb02 0384 	add.w	r3, r2, r4, lsl #2
 8002fc8:	1f09      	subs	r1, r1, #4
 8002fca:	1f1a      	subs	r2, r3, #4
 8002fcc:	4281      	cmp	r1, r0
 8002fce:	d30f      	bcc.n	8002ff0 <forward_soft_sign+0x54>
 8002fd0:	ed91 0a00 	vldr	s0, [r1]
 8002fd4:	eef0 0ac0 	vabs.f32	s1, s0
 8002fd8:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8002fdc:	ee70 0a81 	vadd.f32	s1, s1, s2
 8002fe0:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8002fe4:	ed82 0a00 	vstr	s0, [r2]
 8002fe8:	1f09      	subs	r1, r1, #4
 8002fea:	1f12      	subs	r2, r2, #4
 8002fec:	4281      	cmp	r1, r0
 8002fee:	d2ef      	bcs.n	8002fd0 <forward_soft_sign+0x34>
 8002ff0:	bc30      	pop	{r4, r5}
 8002ff2:	4770      	bx	lr

08002ff4 <forward_tanh>:
 8002ff4:	b570      	push	{r4, r5, r6, lr}
 8002ff6:	6940      	ldr	r0, [r0, #20]
 8002ff8:	6802      	ldr	r2, [r0, #0]
 8002ffa:	6811      	ldr	r1, [r2, #0]
 8002ffc:	680b      	ldr	r3, [r1, #0]
 8002ffe:	685e      	ldr	r6, [r3, #4]
 8003000:	6898      	ldr	r0, [r3, #8]
 8003002:	68d9      	ldr	r1, [r3, #12]
 8003004:	4346      	muls	r6, r0
 8003006:	6918      	ldr	r0, [r3, #16]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	689c      	ldr	r4, [r3, #8]
 800300c:	434e      	muls	r6, r1
 800300e:	4346      	muls	r6, r0
 8003010:	68d1      	ldr	r1, [r2, #12]
 8003012:	eb04 0086 	add.w	r0, r4, r6, lsl #2
 8003016:	1f05      	subs	r5, r0, #4
 8003018:	6808      	ldr	r0, [r1, #0]
 800301a:	6802      	ldr	r2, [r0, #0]
 800301c:	6891      	ldr	r1, [r2, #8]
 800301e:	eb01 0086 	add.w	r0, r1, r6, lsl #2
 8003022:	1f06      	subs	r6, r0, #4
 8003024:	42a5      	cmp	r5, r4
 8003026:	d309      	bcc.n	800303c <forward_tanh+0x48>
 8003028:	ed95 0a00 	vldr	s0, [r5]
 800302c:	f007 fea6 	bl	800ad7c <tanhf>
 8003030:	ed86 0a00 	vstr	s0, [r6]
 8003034:	1f2d      	subs	r5, r5, #4
 8003036:	1f36      	subs	r6, r6, #4
 8003038:	42a5      	cmp	r5, r4
 800303a:	d2f5      	bcs.n	8003028 <forward_tanh+0x34>
 800303c:	bd70      	pop	{r4, r5, r6, pc}

0800303e <forward_sm>:
 800303e:	b570      	push	{r4, r5, r6, lr}
 8003040:	b082      	sub	sp, #8
 8003042:	6940      	ldr	r0, [r0, #20]
 8003044:	6800      	ldr	r0, [r0, #0]
 8003046:	6801      	ldr	r1, [r0, #0]
 8003048:	68c0      	ldr	r0, [r0, #12]
 800304a:	680c      	ldr	r4, [r1, #0]
 800304c:	6805      	ldr	r5, [r0, #0]
 800304e:	68a2      	ldr	r2, [r4, #8]
 8003050:	68a8      	ldr	r0, [r5, #8]
 8003052:	9001      	str	r0, [sp, #4]
 8003054:	9200      	str	r2, [sp, #0]
 8003056:	4613      	mov	r3, r2
 8003058:	6866      	ldr	r6, [r4, #4]
 800305a:	68e1      	ldr	r1, [r4, #12]
 800305c:	6920      	ldr	r0, [r4, #16]
 800305e:	6824      	ldr	r4, [r4, #0]
 8003060:	4372      	muls	r2, r6
 8003062:	434a      	muls	r2, r1
 8003064:	4342      	muls	r2, r0
 8003066:	6828      	ldr	r0, [r5, #0]
 8003068:	68a1      	ldr	r1, [r4, #8]
 800306a:	6880      	ldr	r0, [r0, #8]
 800306c:	f7ff fa52 	bl	8002514 <nl_func_sm_array_f32>
 8003070:	b002      	add	sp, #8
 8003072:	bd70      	pop	{r4, r5, r6, pc}

08003074 <forward_hardmax>:
 8003074:	b430      	push	{r4, r5}
 8003076:	6941      	ldr	r1, [r0, #20]
 8003078:	680c      	ldr	r4, [r1, #0]
 800307a:	6980      	ldr	r0, [r0, #24]
 800307c:	6822      	ldr	r2, [r4, #0]
 800307e:	6883      	ldr	r3, [r0, #8]
 8003080:	6811      	ldr	r1, [r2, #0]
 8003082:	6808      	ldr	r0, [r1, #0]
 8003084:	1d0a      	adds	r2, r1, #4
 8003086:	6881      	ldr	r1, [r0, #8]
 8003088:	68e0      	ldr	r0, [r4, #12]
 800308a:	6804      	ldr	r4, [r0, #0]
 800308c:	6825      	ldr	r5, [r4, #0]
 800308e:	68a8      	ldr	r0, [r5, #8]
 8003090:	bc30      	pop	{r4, r5}
 8003092:	f7ff bb69 	b.w	8002768 <nl_func_hardmax_array_f32>
	...

08003098 <ai_array_fmt_name>:
 8003098:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 800309c:	f1b0 0140 	subs.w	r1, r0, #64	; 0x40
 80030a0:	d062      	beq.n	8003168 <ai_array_fmt_name+0xd0>
 80030a2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80030a6:	1a89      	subs	r1, r1, r2
 80030a8:	f000 8094 	beq.w	80031d4 <ai_array_fmt_name+0x13c>
 80030ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030b0:	1a89      	subs	r1, r1, r2
 80030b2:	d071      	beq.n	8003198 <ai_array_fmt_name+0x100>
 80030b4:	1a89      	subs	r1, r1, r2
 80030b6:	d063      	beq.n	8003180 <ai_array_fmt_name+0xe8>
 80030b8:	1fc9      	subs	r1, r1, #7
 80030ba:	f000 808e 	beq.w	80031da <ai_array_fmt_name+0x142>
 80030be:	f240 32f9 	movw	r2, #1017	; 0x3f9
 80030c2:	1a89      	subs	r1, r1, r2
 80030c4:	d05f      	beq.n	8003186 <ai_array_fmt_name+0xee>
 80030c6:	390f      	subs	r1, #15
 80030c8:	f000 808a 	beq.w	80031e0 <ai_array_fmt_name+0x148>
 80030cc:	f240 72f1 	movw	r2, #2033	; 0x7f1
 80030d0:	1a89      	subs	r1, r1, r2
 80030d2:	d05b      	beq.n	800318c <ai_array_fmt_name+0xf4>
 80030d4:	391f      	subs	r1, #31
 80030d6:	f000 8086 	beq.w	80031e6 <ai_array_fmt_name+0x14e>
 80030da:	f640 72e1 	movw	r2, #4065	; 0xfe1
 80030de:	1a89      	subs	r1, r1, r2
 80030e0:	d057      	beq.n	8003192 <ai_array_fmt_name+0xfa>
 80030e2:	f8df 25d4 	ldr.w	r2, [pc, #1492]	; 80036b8 <.text_15>
 80030e6:	1a89      	subs	r1, r1, r2
 80030e8:	f000 808f 	beq.w	800320a <ai_array_fmt_name+0x172>
 80030ec:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 80030f0:	1a89      	subs	r1, r1, r2
 80030f2:	f000 8087 	beq.w	8003204 <ai_array_fmt_name+0x16c>
 80030f6:	f8df 25c4 	ldr.w	r2, [pc, #1476]	; 80036bc <.text_16>
 80030fa:	1a89      	subs	r1, r1, r2
 80030fc:	d05e      	beq.n	80031bc <ai_array_fmt_name+0x124>
 80030fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003102:	1a89      	subs	r1, r1, r2
 8003104:	d057      	beq.n	80031b6 <ai_array_fmt_name+0x11e>
 8003106:	1a89      	subs	r1, r1, r2
 8003108:	d049      	beq.n	800319e <ai_array_fmt_name+0x106>
 800310a:	1fc9      	subs	r1, r1, #7
 800310c:	d059      	beq.n	80031c2 <ai_array_fmt_name+0x12a>
 800310e:	f240 32f9 	movw	r2, #1017	; 0x3f9
 8003112:	1a89      	subs	r1, r1, r2
 8003114:	d046      	beq.n	80031a4 <ai_array_fmt_name+0x10c>
 8003116:	390f      	subs	r1, #15
 8003118:	d056      	beq.n	80031c8 <ai_array_fmt_name+0x130>
 800311a:	f240 72f1 	movw	r2, #2033	; 0x7f1
 800311e:	1a89      	subs	r1, r1, r2
 8003120:	d043      	beq.n	80031aa <ai_array_fmt_name+0x112>
 8003122:	391f      	subs	r1, #31
 8003124:	d053      	beq.n	80031ce <ai_array_fmt_name+0x136>
 8003126:	f640 72e1 	movw	r2, #4065	; 0xfe1
 800312a:	1a89      	subs	r1, r1, r2
 800312c:	d040      	beq.n	80031b0 <ai_array_fmt_name+0x118>
 800312e:	f8df 2588 	ldr.w	r2, [pc, #1416]	; 80036b8 <.text_15>
 8003132:	1a89      	subs	r1, r1, r2
 8003134:	d063      	beq.n	80031fe <ai_array_fmt_name+0x166>
 8003136:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 800313a:	1a89      	subs	r1, r1, r2
 800313c:	d05c      	beq.n	80031f8 <ai_array_fmt_name+0x160>
 800313e:	f8df 2580 	ldr.w	r2, [pc, #1408]	; 80036c0 <.text_17>
 8003142:	1a89      	subs	r1, r1, r2
 8003144:	d019      	beq.n	800317a <ai_array_fmt_name+0xe2>
 8003146:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800314a:	1a89      	subs	r1, r1, r2
 800314c:	d00f      	beq.n	800316e <ai_array_fmt_name+0xd6>
 800314e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003152:	1a89      	subs	r1, r1, r2
 8003154:	d00e      	beq.n	8003174 <ai_array_fmt_name+0xdc>
 8003156:	f8df 256c 	ldr.w	r2, [pc, #1388]	; 80036c4 <.text_18>
 800315a:	1a89      	subs	r1, r1, r2
 800315c:	d049      	beq.n	80031f2 <ai_array_fmt_name+0x15a>
 800315e:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8003162:	1a89      	subs	r1, r1, r2
 8003164:	d042      	beq.n	80031ec <ai_array_fmt_name+0x154>
 8003166:	e053      	b.n	8003210 <ai_array_fmt_name+0x178>
 8003168:	f20f 6074 	addw	r0, pc, #1652	; 0x674
 800316c:	4770      	bx	lr
 800316e:	f20f 607c 	addw	r0, pc, #1660	; 0x67c
 8003172:	4770      	bx	lr
 8003174:	f20f 6080 	addw	r0, pc, #1664	; 0x680
 8003178:	4770      	bx	lr
 800317a:	f20f 6088 	addw	r0, pc, #1672	; 0x688
 800317e:	4770      	bx	lr
 8003180:	f20f 608c 	addw	r0, pc, #1676	; 0x68c
 8003184:	4770      	bx	lr
 8003186:	f20f 6090 	addw	r0, pc, #1680	; 0x690
 800318a:	4770      	bx	lr
 800318c:	f20f 6090 	addw	r0, pc, #1680	; 0x690
 8003190:	4770      	bx	lr
 8003192:	f20f 6094 	addw	r0, pc, #1684	; 0x694
 8003196:	4770      	bx	lr
 8003198:	f20f 6094 	addw	r0, pc, #1684	; 0x694
 800319c:	4770      	bx	lr
 800319e:	f20f 6098 	addw	r0, pc, #1688	; 0x698
 80031a2:	4770      	bx	lr
 80031a4:	f20f 6098 	addw	r0, pc, #1688	; 0x698
 80031a8:	4770      	bx	lr
 80031aa:	f20f 609c 	addw	r0, pc, #1692	; 0x69c
 80031ae:	4770      	bx	lr
 80031b0:	f20f 609c 	addw	r0, pc, #1692	; 0x69c
 80031b4:	4770      	bx	lr
 80031b6:	f20f 60a0 	addw	r0, pc, #1696	; 0x6a0
 80031ba:	4770      	bx	lr
 80031bc:	f20f 60a0 	addw	r0, pc, #1696	; 0x6a0
 80031c0:	4770      	bx	lr
 80031c2:	f20f 60a4 	addw	r0, pc, #1700	; 0x6a4
 80031c6:	4770      	bx	lr
 80031c8:	f20f 60a4 	addw	r0, pc, #1700	; 0x6a4
 80031cc:	4770      	bx	lr
 80031ce:	f20f 60a8 	addw	r0, pc, #1704	; 0x6a8
 80031d2:	4770      	bx	lr
 80031d4:	f20f 60a8 	addw	r0, pc, #1704	; 0x6a8
 80031d8:	4770      	bx	lr
 80031da:	f20f 60ac 	addw	r0, pc, #1708	; 0x6ac
 80031de:	4770      	bx	lr
 80031e0:	f20f 60ac 	addw	r0, pc, #1708	; 0x6ac
 80031e4:	4770      	bx	lr
 80031e6:	f20f 60b4 	addw	r0, pc, #1716	; 0x6b4
 80031ea:	4770      	bx	lr
 80031ec:	f20f 60b8 	addw	r0, pc, #1720	; 0x6b8
 80031f0:	4770      	bx	lr
 80031f2:	f20f 60c4 	addw	r0, pc, #1732	; 0x6c4
 80031f6:	4770      	bx	lr
 80031f8:	f20f 60cc 	addw	r0, pc, #1740	; 0x6cc
 80031fc:	4770      	bx	lr
 80031fe:	f20f 60d8 	addw	r0, pc, #1752	; 0x6d8
 8003202:	4770      	bx	lr
 8003204:	f20f 60e0 	addw	r0, pc, #1760	; 0x6e0
 8003208:	4770      	bx	lr
 800320a:	f20f 60ec 	addw	r0, pc, #1772	; 0x6ec
 800320e:	4770      	bx	lr
 8003210:	f36f 000d 	bfc	r0, #0, #14
 8003214:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 8003218:	2840      	cmp	r0, #64	; 0x40
 800321a:	d009      	beq.n	8003230 <ai_array_fmt_name+0x198>
 800321c:	f8df 14a8 	ldr.w	r1, [pc, #1192]	; 80036c8 <.text_19>
 8003220:	4288      	cmp	r0, r1
 8003222:	d00b      	beq.n	800323c <ai_array_fmt_name+0x1a4>
 8003224:	f8df 14a4 	ldr.w	r1, [pc, #1188]	; 80036cc <.text_20>
 8003228:	4288      	cmp	r0, r1
 800322a:	d004      	beq.n	8003236 <ai_array_fmt_name+0x19e>
 800322c:	a07a      	add	r0, pc, #488	; (adr r0, 8003418 <.text_8>)
 800322e:	4770      	bx	lr
 8003230:	f20f 60d4 	addw	r0, pc, #1748	; 0x6d4
 8003234:	4770      	bx	lr
 8003236:	f20f 60e8 	addw	r0, pc, #1768	; 0x6e8
 800323a:	4770      	bx	lr
 800323c:	f20f 60f4 	addw	r0, pc, #1780	; 0x6f4
 8003240:	4770      	bx	lr

08003242 <ai_array_fmt_exported>:
 8003242:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 8003246:	f1b0 0140 	subs.w	r1, r0, #64	; 0x40
 800324a:	d068      	beq.n	800331e <ai_array_fmt_exported+0xdc>
 800324c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8003250:	1a89      	subs	r1, r1, r2
 8003252:	d064      	beq.n	800331e <ai_array_fmt_exported+0xdc>
 8003254:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003258:	1a89      	subs	r1, r1, r2
 800325a:	d062      	beq.n	8003322 <ai_array_fmt_exported+0xe0>
 800325c:	1a89      	subs	r1, r1, r2
 800325e:	d05e      	beq.n	800331e <ai_array_fmt_exported+0xdc>
 8003260:	1fc9      	subs	r1, r1, #7
 8003262:	d05c      	beq.n	800331e <ai_array_fmt_exported+0xdc>
 8003264:	f240 32f9 	movw	r2, #1017	; 0x3f9
 8003268:	1a89      	subs	r1, r1, r2
 800326a:	d058      	beq.n	800331e <ai_array_fmt_exported+0xdc>
 800326c:	390f      	subs	r1, #15
 800326e:	d056      	beq.n	800331e <ai_array_fmt_exported+0xdc>
 8003270:	f240 72f1 	movw	r2, #2033	; 0x7f1
 8003274:	1a89      	subs	r1, r1, r2
 8003276:	d054      	beq.n	8003322 <ai_array_fmt_exported+0xe0>
 8003278:	391f      	subs	r1, #31
 800327a:	d052      	beq.n	8003322 <ai_array_fmt_exported+0xe0>
 800327c:	f640 72e1 	movw	r2, #4065	; 0xfe1
 8003280:	1a89      	subs	r1, r1, r2
 8003282:	d04e      	beq.n	8003322 <ai_array_fmt_exported+0xe0>
 8003284:	f8df 2430 	ldr.w	r2, [pc, #1072]	; 80036b8 <.text_15>
 8003288:	1a89      	subs	r1, r1, r2
 800328a:	d04a      	beq.n	8003322 <ai_array_fmt_exported+0xe0>
 800328c:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8003290:	1a89      	subs	r1, r1, r2
 8003292:	d046      	beq.n	8003322 <ai_array_fmt_exported+0xe0>
 8003294:	f8df 2424 	ldr.w	r2, [pc, #1060]	; 80036bc <.text_16>
 8003298:	1a89      	subs	r1, r1, r2
 800329a:	d040      	beq.n	800331e <ai_array_fmt_exported+0xdc>
 800329c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032a0:	1a89      	subs	r1, r1, r2
 80032a2:	d03e      	beq.n	8003322 <ai_array_fmt_exported+0xe0>
 80032a4:	1a89      	subs	r1, r1, r2
 80032a6:	d03a      	beq.n	800331e <ai_array_fmt_exported+0xdc>
 80032a8:	1fc9      	subs	r1, r1, #7
 80032aa:	d038      	beq.n	800331e <ai_array_fmt_exported+0xdc>
 80032ac:	f240 32f9 	movw	r2, #1017	; 0x3f9
 80032b0:	1a89      	subs	r1, r1, r2
 80032b2:	d034      	beq.n	800331e <ai_array_fmt_exported+0xdc>
 80032b4:	390f      	subs	r1, #15
 80032b6:	d032      	beq.n	800331e <ai_array_fmt_exported+0xdc>
 80032b8:	f240 72f1 	movw	r2, #2033	; 0x7f1
 80032bc:	1a89      	subs	r1, r1, r2
 80032be:	d030      	beq.n	8003322 <ai_array_fmt_exported+0xe0>
 80032c0:	391f      	subs	r1, #31
 80032c2:	d02e      	beq.n	8003322 <ai_array_fmt_exported+0xe0>
 80032c4:	f640 72e1 	movw	r2, #4065	; 0xfe1
 80032c8:	1a89      	subs	r1, r1, r2
 80032ca:	d02a      	beq.n	8003322 <ai_array_fmt_exported+0xe0>
 80032cc:	f8df 23e8 	ldr.w	r2, [pc, #1000]	; 80036b8 <.text_15>
 80032d0:	1a89      	subs	r1, r1, r2
 80032d2:	d026      	beq.n	8003322 <ai_array_fmt_exported+0xe0>
 80032d4:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 80032d8:	1a89      	subs	r1, r1, r2
 80032da:	d022      	beq.n	8003322 <ai_array_fmt_exported+0xe0>
 80032dc:	f8df 23e0 	ldr.w	r2, [pc, #992]	; 80036c0 <.text_17>
 80032e0:	1a89      	subs	r1, r1, r2
 80032e2:	d01e      	beq.n	8003322 <ai_array_fmt_exported+0xe0>
 80032e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80032e8:	1a89      	subs	r1, r1, r2
 80032ea:	d018      	beq.n	800331e <ai_array_fmt_exported+0xdc>
 80032ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80032f0:	1a89      	subs	r1, r1, r2
 80032f2:	d016      	beq.n	8003322 <ai_array_fmt_exported+0xe0>
 80032f4:	f8df 23cc 	ldr.w	r2, [pc, #972]	; 80036c4 <.text_18>
 80032f8:	1a89      	subs	r1, r1, r2
 80032fa:	d012      	beq.n	8003322 <ai_array_fmt_exported+0xe0>
 80032fc:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8003300:	1a89      	subs	r1, r1, r2
 8003302:	d00e      	beq.n	8003322 <ai_array_fmt_exported+0xe0>
 8003304:	f36f 000d 	bfc	r0, #0, #14
 8003308:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 800330c:	2840      	cmp	r0, #64	; 0x40
 800330e:	bf1f      	itttt	ne
 8003310:	f8df 33b4 	ldrne.w	r3, [pc, #948]	; 80036c8 <.text_19>
 8003314:	4298      	cmpne	r0, r3
 8003316:	f8df 33b4 	ldrne.w	r3, [pc, #948]	; 80036cc <.text_20>
 800331a:	4298      	cmpne	r0, r3
 800331c:	d101      	bne.n	8003322 <ai_array_fmt_exported+0xe0>
 800331e:	2001      	movs	r0, #1
 8003320:	4770      	bx	lr
 8003322:	2000      	movs	r0, #0
 8003324:	4770      	bx	lr

08003326 <ai_array_fmt_valid>:
 8003326:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 800332a:	f1b0 0140 	subs.w	r1, r0, #64	; 0x40
 800332e:	d069      	beq.n	8003404 <ai_array_fmt_valid+0xde>
 8003330:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8003334:	1a89      	subs	r1, r1, r2
 8003336:	d065      	beq.n	8003404 <ai_array_fmt_valid+0xde>
 8003338:	f44f 7200 	mov.w	r2, #512	; 0x200
 800333c:	1a89      	subs	r1, r1, r2
 800333e:	d061      	beq.n	8003404 <ai_array_fmt_valid+0xde>
 8003340:	1a89      	subs	r1, r1, r2
 8003342:	d05f      	beq.n	8003404 <ai_array_fmt_valid+0xde>
 8003344:	1fc9      	subs	r1, r1, #7
 8003346:	d05d      	beq.n	8003404 <ai_array_fmt_valid+0xde>
 8003348:	f240 32f9 	movw	r2, #1017	; 0x3f9
 800334c:	1a89      	subs	r1, r1, r2
 800334e:	d059      	beq.n	8003404 <ai_array_fmt_valid+0xde>
 8003350:	390f      	subs	r1, #15
 8003352:	d057      	beq.n	8003404 <ai_array_fmt_valid+0xde>
 8003354:	f240 72f1 	movw	r2, #2033	; 0x7f1
 8003358:	1a89      	subs	r1, r1, r2
 800335a:	d053      	beq.n	8003404 <ai_array_fmt_valid+0xde>
 800335c:	391f      	subs	r1, #31
 800335e:	d051      	beq.n	8003404 <ai_array_fmt_valid+0xde>
 8003360:	f640 72e1 	movw	r2, #4065	; 0xfe1
 8003364:	1a89      	subs	r1, r1, r2
 8003366:	d04d      	beq.n	8003404 <ai_array_fmt_valid+0xde>
 8003368:	f8df 234c 	ldr.w	r2, [pc, #844]	; 80036b8 <.text_15>
 800336c:	1a89      	subs	r1, r1, r2
 800336e:	d049      	beq.n	8003404 <ai_array_fmt_valid+0xde>
 8003370:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8003374:	1a89      	subs	r1, r1, r2
 8003376:	d045      	beq.n	8003404 <ai_array_fmt_valid+0xde>
 8003378:	f8df 2340 	ldr.w	r2, [pc, #832]	; 80036bc <.text_16>
 800337c:	1a89      	subs	r1, r1, r2
 800337e:	d041      	beq.n	8003404 <ai_array_fmt_valid+0xde>
 8003380:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003384:	1a89      	subs	r1, r1, r2
 8003386:	d03d      	beq.n	8003404 <ai_array_fmt_valid+0xde>
 8003388:	1a89      	subs	r1, r1, r2
 800338a:	d03b      	beq.n	8003404 <ai_array_fmt_valid+0xde>
 800338c:	1fc9      	subs	r1, r1, #7
 800338e:	d039      	beq.n	8003404 <ai_array_fmt_valid+0xde>
 8003390:	f240 32f9 	movw	r2, #1017	; 0x3f9
 8003394:	1a89      	subs	r1, r1, r2
 8003396:	d035      	beq.n	8003404 <ai_array_fmt_valid+0xde>
 8003398:	390f      	subs	r1, #15
 800339a:	d033      	beq.n	8003404 <ai_array_fmt_valid+0xde>
 800339c:	f240 72f1 	movw	r2, #2033	; 0x7f1
 80033a0:	1a89      	subs	r1, r1, r2
 80033a2:	d02f      	beq.n	8003404 <ai_array_fmt_valid+0xde>
 80033a4:	391f      	subs	r1, #31
 80033a6:	d02d      	beq.n	8003404 <ai_array_fmt_valid+0xde>
 80033a8:	f640 72e1 	movw	r2, #4065	; 0xfe1
 80033ac:	1a89      	subs	r1, r1, r2
 80033ae:	d029      	beq.n	8003404 <ai_array_fmt_valid+0xde>
 80033b0:	f8df 2304 	ldr.w	r2, [pc, #772]	; 80036b8 <.text_15>
 80033b4:	1a89      	subs	r1, r1, r2
 80033b6:	d025      	beq.n	8003404 <ai_array_fmt_valid+0xde>
 80033b8:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 80033bc:	1a89      	subs	r1, r1, r2
 80033be:	d021      	beq.n	8003404 <ai_array_fmt_valid+0xde>
 80033c0:	f8df 22fc 	ldr.w	r2, [pc, #764]	; 80036c0 <.text_17>
 80033c4:	1a89      	subs	r1, r1, r2
 80033c6:	d01d      	beq.n	8003404 <ai_array_fmt_valid+0xde>
 80033c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80033cc:	1a89      	subs	r1, r1, r2
 80033ce:	d019      	beq.n	8003404 <ai_array_fmt_valid+0xde>
 80033d0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80033d4:	1a89      	subs	r1, r1, r2
 80033d6:	d015      	beq.n	8003404 <ai_array_fmt_valid+0xde>
 80033d8:	f8df 22e8 	ldr.w	r2, [pc, #744]	; 80036c4 <.text_18>
 80033dc:	1a89      	subs	r1, r1, r2
 80033de:	d011      	beq.n	8003404 <ai_array_fmt_valid+0xde>
 80033e0:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 80033e4:	1a89      	subs	r1, r1, r2
 80033e6:	bf1e      	ittt	ne
 80033e8:	f36f 000d 	bfcne	r0, #0, #14
 80033ec:	f040 0040 	orrne.w	r0, r0, #64	; 0x40
 80033f0:	2840      	cmpne	r0, #64	; 0x40
 80033f2:	d007      	beq.n	8003404 <ai_array_fmt_valid+0xde>
 80033f4:	f8df 32d0 	ldr.w	r3, [pc, #720]	; 80036c8 <.text_19>
 80033f8:	4298      	cmp	r0, r3
 80033fa:	bf1c      	itt	ne
 80033fc:	f8df 32cc 	ldrne.w	r3, [pc, #716]	; 80036cc <.text_20>
 8003400:	4298      	cmpne	r0, r3
 8003402:	d101      	bne.n	8003408 <ai_array_fmt_valid+0xe2>
 8003404:	2001      	movs	r0, #1
 8003406:	4770      	bx	lr
 8003408:	2000      	movs	r0, #0
 800340a:	4770      	bx	lr

0800340c <ai_array_fmt_get_formats>:
 800340c:	f8df 12c0 	ldr.w	r1, [pc, #704]	; 80036d0 <.text_21>
 8003410:	6001      	str	r1, [r0, #0]
 8003412:	201c      	movs	r0, #28
 8003414:	4770      	bx	lr
	...

08003418 <.text_8>:
 8003418:	00000000 	.word	0x00000000

0800341c <ai_buffer_fmt_name>:
 800341c:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 8003420:	f1b0 0140 	subs.w	r1, r0, #64	; 0x40
 8003424:	d022      	beq.n	800346c <ai_buffer_fmt_name+0x50>
 8003426:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800342a:	1a89      	subs	r1, r1, r2
 800342c:	d039      	beq.n	80034a2 <ai_buffer_fmt_name+0x86>
 800342e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003432:	1a89      	subs	r1, r1, r2
 8003434:	d020      	beq.n	8003478 <ai_buffer_fmt_name+0x5c>
 8003436:	1fc9      	subs	r1, r1, #7
 8003438:	d036      	beq.n	80034a8 <ai_buffer_fmt_name+0x8c>
 800343a:	f240 32f9 	movw	r2, #1017	; 0x3f9
 800343e:	1a89      	subs	r1, r1, r2
 8003440:	d01d      	beq.n	800347e <ai_buffer_fmt_name+0x62>
 8003442:	390f      	subs	r1, #15
 8003444:	d033      	beq.n	80034ae <ai_buffer_fmt_name+0x92>
 8003446:	4aa3      	ldr	r2, [pc, #652]	; (80036d4 <.text_22>)
 8003448:	1a89      	subs	r1, r1, r2
 800344a:	d021      	beq.n	8003490 <ai_buffer_fmt_name+0x74>
 800344c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003450:	1a89      	subs	r1, r1, r2
 8003452:	d017      	beq.n	8003484 <ai_buffer_fmt_name+0x68>
 8003454:	1fc9      	subs	r1, r1, #7
 8003456:	d01e      	beq.n	8003496 <ai_buffer_fmt_name+0x7a>
 8003458:	f240 32f9 	movw	r2, #1017	; 0x3f9
 800345c:	1a89      	subs	r1, r1, r2
 800345e:	d014      	beq.n	800348a <ai_buffer_fmt_name+0x6e>
 8003460:	390f      	subs	r1, #15
 8003462:	d01b      	beq.n	800349c <ai_buffer_fmt_name+0x80>
 8003464:	4a9c      	ldr	r2, [pc, #624]	; (80036d8 <.text_23>)
 8003466:	1a89      	subs	r1, r1, r2
 8003468:	d003      	beq.n	8003472 <ai_buffer_fmt_name+0x56>
 800346a:	e023      	b.n	80034b4 <ai_buffer_fmt_name+0x98>
 800346c:	f20f 3070 	addw	r0, pc, #880	; 0x370
 8003470:	4770      	bx	lr
 8003472:	f20f 3078 	addw	r0, pc, #888	; 0x378
 8003476:	4770      	bx	lr
 8003478:	f20f 3094 	addw	r0, pc, #916	; 0x394
 800347c:	4770      	bx	lr
 800347e:	f20f 3098 	addw	r0, pc, #920	; 0x398
 8003482:	4770      	bx	lr
 8003484:	f20f 30b0 	addw	r0, pc, #944	; 0x3b0
 8003488:	4770      	bx	lr
 800348a:	f20f 30b4 	addw	r0, pc, #948	; 0x3b4
 800348e:	4770      	bx	lr
 8003490:	f20f 30cc 	addw	r0, pc, #972	; 0x3cc
 8003494:	4770      	bx	lr
 8003496:	f20f 30d0 	addw	r0, pc, #976	; 0x3d0
 800349a:	4770      	bx	lr
 800349c:	f20f 30d0 	addw	r0, pc, #976	; 0x3d0
 80034a0:	4770      	bx	lr
 80034a2:	f20f 30dc 	addw	r0, pc, #988	; 0x3dc
 80034a6:	4770      	bx	lr
 80034a8:	f20f 30dc 	addw	r0, pc, #988	; 0x3dc
 80034ac:	4770      	bx	lr
 80034ae:	f20f 30e0 	addw	r0, pc, #992	; 0x3e0
 80034b2:	4770      	bx	lr
 80034b4:	0b80      	lsrs	r0, r0, #14
 80034b6:	0380      	lsls	r0, r0, #14
 80034b8:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 80034bc:	2840      	cmp	r0, #64	; 0x40
 80034be:	d007      	beq.n	80034d0 <ai_buffer_fmt_name+0xb4>
 80034c0:	4981      	ldr	r1, [pc, #516]	; (80036c8 <.text_19>)
 80034c2:	4288      	cmp	r0, r1
 80034c4:	d00a      	beq.n	80034dc <ai_buffer_fmt_name+0xc0>
 80034c6:	4981      	ldr	r1, [pc, #516]	; (80036cc <.text_20>)
 80034c8:	4288      	cmp	r0, r1
 80034ca:	d004      	beq.n	80034d6 <ai_buffer_fmt_name+0xba>
 80034cc:	a079      	add	r0, pc, #484	; (adr r0, 80036b4 <.text_14>)
 80034ce:	4770      	bx	lr
 80034d0:	f20f 4074 	addw	r0, pc, #1140	; 0x474
 80034d4:	4770      	bx	lr
 80034d6:	f20f 4088 	addw	r0, pc, #1160	; 0x488
 80034da:	4770      	bx	lr
 80034dc:	f20f 4094 	addw	r0, pc, #1172	; 0x494
 80034e0:	4770      	bx	lr

080034e2 <ai_buffer_fmt_valid>:
 80034e2:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 80034e6:	f1b0 0140 	subs.w	r1, r0, #64	; 0x40
 80034ea:	d02d      	beq.n	8003548 <ai_buffer_fmt_valid+0x66>
 80034ec:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80034f0:	1a89      	subs	r1, r1, r2
 80034f2:	d029      	beq.n	8003548 <ai_buffer_fmt_valid+0x66>
 80034f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80034f8:	1a89      	subs	r1, r1, r2
 80034fa:	d025      	beq.n	8003548 <ai_buffer_fmt_valid+0x66>
 80034fc:	1fc9      	subs	r1, r1, #7
 80034fe:	d023      	beq.n	8003548 <ai_buffer_fmt_valid+0x66>
 8003500:	f240 32f9 	movw	r2, #1017	; 0x3f9
 8003504:	1a89      	subs	r1, r1, r2
 8003506:	d01f      	beq.n	8003548 <ai_buffer_fmt_valid+0x66>
 8003508:	390f      	subs	r1, #15
 800350a:	d01d      	beq.n	8003548 <ai_buffer_fmt_valid+0x66>
 800350c:	4a71      	ldr	r2, [pc, #452]	; (80036d4 <.text_22>)
 800350e:	1a89      	subs	r1, r1, r2
 8003510:	d01a      	beq.n	8003548 <ai_buffer_fmt_valid+0x66>
 8003512:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003516:	1a89      	subs	r1, r1, r2
 8003518:	d016      	beq.n	8003548 <ai_buffer_fmt_valid+0x66>
 800351a:	1fc9      	subs	r1, r1, #7
 800351c:	d014      	beq.n	8003548 <ai_buffer_fmt_valid+0x66>
 800351e:	f240 32f9 	movw	r2, #1017	; 0x3f9
 8003522:	1a89      	subs	r1, r1, r2
 8003524:	d010      	beq.n	8003548 <ai_buffer_fmt_valid+0x66>
 8003526:	390f      	subs	r1, #15
 8003528:	d00e      	beq.n	8003548 <ai_buffer_fmt_valid+0x66>
 800352a:	4a6b      	ldr	r2, [pc, #428]	; (80036d8 <.text_23>)
 800352c:	1a89      	subs	r1, r1, r2
 800352e:	bf1f      	itttt	ne
 8003530:	0b80      	lsrne	r0, r0, #14
 8003532:	0380      	lslne	r0, r0, #14
 8003534:	f040 0040 	orrne.w	r0, r0, #64	; 0x40
 8003538:	2840      	cmpne	r0, #64	; 0x40
 800353a:	d005      	beq.n	8003548 <ai_buffer_fmt_valid+0x66>
 800353c:	4b62      	ldr	r3, [pc, #392]	; (80036c8 <.text_19>)
 800353e:	4298      	cmp	r0, r3
 8003540:	bf1c      	itt	ne
 8003542:	4b62      	ldrne	r3, [pc, #392]	; (80036cc <.text_20>)
 8003544:	4298      	cmpne	r0, r3
 8003546:	d101      	bne.n	800354c <ai_buffer_fmt_valid+0x6a>
 8003548:	2001      	movs	r0, #1
 800354a:	4770      	bx	lr
 800354c:	2000      	movs	r0, #0
 800354e:	4770      	bx	lr

08003550 <ai_buffer_fmt_get_formats>:
 8003550:	4962      	ldr	r1, [pc, #392]	; (80036dc <.text_24>)
 8003552:	6001      	str	r1, [r0, #0]
 8003554:	200c      	movs	r0, #12
 8003556:	4770      	bx	lr

08003558 <ai_array_to_buffer_fmt>:
 8003558:	4601      	mov	r1, r0
 800355a:	2040      	movs	r0, #64	; 0x40
 800355c:	f3c1 4243 	ubfx	r2, r1, #17, #4
 8003560:	2a02      	cmp	r2, #2
 8003562:	d104      	bne.n	800356e <ai_array_to_buffer_fmt+0x16>
 8003564:	485e      	ldr	r0, [pc, #376]	; (80036e0 <.text_25>)
 8003566:	4008      	ands	r0, r1
 8003568:	f440 2080 	orr.w	r0, r0, #262144	; 0x40000
 800356c:	e037      	b.n	80035de <ai_array_to_buffer_fmt+0x86>
 800356e:	f021 427e 	bic.w	r2, r1, #4261412864	; 0xfe000000
 8003572:	4b55      	ldr	r3, [pc, #340]	; (80036c8 <.text_19>)
 8003574:	1ad2      	subs	r2, r2, r3
 8003576:	d02d      	beq.n	80035d4 <ai_array_to_buffer_fmt+0x7c>
 8003578:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800357c:	1ad2      	subs	r2, r2, r3
 800357e:	d01b      	beq.n	80035b8 <ai_array_to_buffer_fmt+0x60>
 8003580:	1fd2      	subs	r2, r2, #7
 8003582:	d029      	beq.n	80035d8 <ai_array_to_buffer_fmt+0x80>
 8003584:	f240 33f9 	movw	r3, #1017	; 0x3f9
 8003588:	1ad2      	subs	r2, r2, r3
 800358a:	d017      	beq.n	80035bc <ai_array_to_buffer_fmt+0x64>
 800358c:	3a0f      	subs	r2, #15
 800358e:	d025      	beq.n	80035dc <ai_array_to_buffer_fmt+0x84>
 8003590:	4b50      	ldr	r3, [pc, #320]	; (80036d4 <.text_22>)
 8003592:	1ad2      	subs	r2, r2, r3
 8003594:	d018      	beq.n	80035c8 <ai_array_to_buffer_fmt+0x70>
 8003596:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800359a:	1ad2      	subs	r2, r2, r3
 800359c:	d010      	beq.n	80035c0 <ai_array_to_buffer_fmt+0x68>
 800359e:	1fd2      	subs	r2, r2, #7
 80035a0:	d014      	beq.n	80035cc <ai_array_to_buffer_fmt+0x74>
 80035a2:	f240 33f9 	movw	r3, #1017	; 0x3f9
 80035a6:	1ad2      	subs	r2, r2, r3
 80035a8:	d00c      	beq.n	80035c4 <ai_array_to_buffer_fmt+0x6c>
 80035aa:	3a0f      	subs	r2, #15
 80035ac:	d010      	beq.n	80035d0 <ai_array_to_buffer_fmt+0x78>
 80035ae:	4b4a      	ldr	r3, [pc, #296]	; (80036d8 <.text_23>)
 80035b0:	1ad2      	subs	r2, r2, r3
 80035b2:	d114      	bne.n	80035de <ai_array_to_buffer_fmt+0x86>
 80035b4:	484b      	ldr	r0, [pc, #300]	; (80036e4 <.text_26>)
 80035b6:	e012      	b.n	80035de <ai_array_to_buffer_fmt+0x86>
 80035b8:	484b      	ldr	r0, [pc, #300]	; (80036e8 <.text_27>)
 80035ba:	e010      	b.n	80035de <ai_array_to_buffer_fmt+0x86>
 80035bc:	484b      	ldr	r0, [pc, #300]	; (80036ec <.text_28>)
 80035be:	e00e      	b.n	80035de <ai_array_to_buffer_fmt+0x86>
 80035c0:	484b      	ldr	r0, [pc, #300]	; (80036f0 <.text_29>)
 80035c2:	e00c      	b.n	80035de <ai_array_to_buffer_fmt+0x86>
 80035c4:	484b      	ldr	r0, [pc, #300]	; (80036f4 <.text_30>)
 80035c6:	e00a      	b.n	80035de <ai_array_to_buffer_fmt+0x86>
 80035c8:	4840      	ldr	r0, [pc, #256]	; (80036cc <.text_20>)
 80035ca:	e008      	b.n	80035de <ai_array_to_buffer_fmt+0x86>
 80035cc:	484a      	ldr	r0, [pc, #296]	; (80036f8 <.text_31>)
 80035ce:	e006      	b.n	80035de <ai_array_to_buffer_fmt+0x86>
 80035d0:	484a      	ldr	r0, [pc, #296]	; (80036fc <.text_32>)
 80035d2:	e004      	b.n	80035de <ai_array_to_buffer_fmt+0x86>
 80035d4:	4618      	mov	r0, r3
 80035d6:	e002      	b.n	80035de <ai_array_to_buffer_fmt+0x86>
 80035d8:	4849      	ldr	r0, [pc, #292]	; (8003700 <.text_33>)
 80035da:	e000      	b.n	80035de <ai_array_to_buffer_fmt+0x86>
 80035dc:	4849      	ldr	r0, [pc, #292]	; (8003704 <.text_34>)
 80035de:	004a      	lsls	r2, r1, #1
 80035e0:	bf4c      	ite	mi
 80035e2:	f04f 4280 	movmi.w	r2, #1073741824	; 0x40000000
 80035e6:	2200      	movpl	r2, #0
 80035e8:	4310      	orrs	r0, r2
 80035ea:	008a      	lsls	r2, r1, #2
 80035ec:	bf4c      	ite	mi
 80035ee:	f04f 5200 	movmi.w	r2, #536870912	; 0x20000000
 80035f2:	2200      	movpl	r2, #0
 80035f4:	4310      	orrs	r0, r2
 80035f6:	0109      	lsls	r1, r1, #4
 80035f8:	bf4c      	ite	mi
 80035fa:	f04f 6100 	movmi.w	r1, #134217728	; 0x8000000
 80035fe:	2100      	movpl	r1, #0
 8003600:	4308      	orrs	r0, r1
 8003602:	4770      	bx	lr

08003604 <ai_buffer_to_array_fmt>:
 8003604:	4602      	mov	r2, r0
 8003606:	f022 407e 	bic.w	r0, r2, #4261412864	; 0xfe000000
 800360a:	3840      	subs	r0, #64	; 0x40
 800360c:	d022      	beq.n	8003654 <ai_buffer_to_array_fmt+0x50>
 800360e:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8003612:	1a40      	subs	r0, r0, r1
 8003614:	d030      	beq.n	8003678 <ai_buffer_to_array_fmt+0x74>
 8003616:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800361a:	1a40      	subs	r0, r0, r1
 800361c:	d01e      	beq.n	800365c <ai_buffer_to_array_fmt+0x58>
 800361e:	1fc0      	subs	r0, r0, #7
 8003620:	d02c      	beq.n	800367c <ai_buffer_to_array_fmt+0x78>
 8003622:	f240 31f9 	movw	r1, #1017	; 0x3f9
 8003626:	1a40      	subs	r0, r0, r1
 8003628:	d01a      	beq.n	8003660 <ai_buffer_to_array_fmt+0x5c>
 800362a:	380f      	subs	r0, #15
 800362c:	d028      	beq.n	8003680 <ai_buffer_to_array_fmt+0x7c>
 800362e:	4929      	ldr	r1, [pc, #164]	; (80036d4 <.text_22>)
 8003630:	1a40      	subs	r0, r0, r1
 8003632:	d01b      	beq.n	800366c <ai_buffer_to_array_fmt+0x68>
 8003634:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003638:	1a40      	subs	r0, r0, r1
 800363a:	d013      	beq.n	8003664 <ai_buffer_to_array_fmt+0x60>
 800363c:	1fc0      	subs	r0, r0, #7
 800363e:	d017      	beq.n	8003670 <ai_buffer_to_array_fmt+0x6c>
 8003640:	f240 31f9 	movw	r1, #1017	; 0x3f9
 8003644:	1a40      	subs	r0, r0, r1
 8003646:	d00f      	beq.n	8003668 <ai_buffer_to_array_fmt+0x64>
 8003648:	380f      	subs	r0, #15
 800364a:	d013      	beq.n	8003674 <ai_buffer_to_array_fmt+0x70>
 800364c:	4922      	ldr	r1, [pc, #136]	; (80036d8 <.text_23>)
 800364e:	1a40      	subs	r0, r0, r1
 8003650:	d002      	beq.n	8003658 <ai_buffer_to_array_fmt+0x54>
 8003652:	e017      	b.n	8003684 <ai_buffer_to_array_fmt+0x80>
 8003654:	2040      	movs	r0, #64	; 0x40
 8003656:	e01f      	b.n	8003698 <ai_buffer_to_array_fmt+0x94>
 8003658:	4822      	ldr	r0, [pc, #136]	; (80036e4 <.text_26>)
 800365a:	e01d      	b.n	8003698 <ai_buffer_to_array_fmt+0x94>
 800365c:	4822      	ldr	r0, [pc, #136]	; (80036e8 <.text_27>)
 800365e:	e01b      	b.n	8003698 <ai_buffer_to_array_fmt+0x94>
 8003660:	4822      	ldr	r0, [pc, #136]	; (80036ec <.text_28>)
 8003662:	e019      	b.n	8003698 <ai_buffer_to_array_fmt+0x94>
 8003664:	4822      	ldr	r0, [pc, #136]	; (80036f0 <.text_29>)
 8003666:	e017      	b.n	8003698 <ai_buffer_to_array_fmt+0x94>
 8003668:	4822      	ldr	r0, [pc, #136]	; (80036f4 <.text_30>)
 800366a:	e015      	b.n	8003698 <ai_buffer_to_array_fmt+0x94>
 800366c:	4817      	ldr	r0, [pc, #92]	; (80036cc <.text_20>)
 800366e:	e013      	b.n	8003698 <ai_buffer_to_array_fmt+0x94>
 8003670:	4821      	ldr	r0, [pc, #132]	; (80036f8 <.text_31>)
 8003672:	e011      	b.n	8003698 <ai_buffer_to_array_fmt+0x94>
 8003674:	4821      	ldr	r0, [pc, #132]	; (80036fc <.text_32>)
 8003676:	e00f      	b.n	8003698 <ai_buffer_to_array_fmt+0x94>
 8003678:	4813      	ldr	r0, [pc, #76]	; (80036c8 <.text_19>)
 800367a:	e00d      	b.n	8003698 <ai_buffer_to_array_fmt+0x94>
 800367c:	4820      	ldr	r0, [pc, #128]	; (8003700 <.text_33>)
 800367e:	e00b      	b.n	8003698 <ai_buffer_to_array_fmt+0x94>
 8003680:	4820      	ldr	r0, [pc, #128]	; (8003704 <.text_34>)
 8003682:	e009      	b.n	8003698 <ai_buffer_to_array_fmt+0x94>
 8003684:	f3c2 51c0 	ubfx	r1, r2, #23, #1
 8003688:	f3c2 000d 	ubfx	r0, r2, #0, #14
 800368c:	2900      	cmp	r1, #0
 800368e:	bf14      	ite	ne
 8003690:	f440 0004 	orrne.w	r0, r0, #8650752	; 0x840000
 8003694:	f440 2080 	orreq.w	r0, r0, #262144	; 0x40000
 8003698:	0051      	lsls	r1, r2, #1
 800369a:	bf48      	it	mi
 800369c:	f040 4080 	orrmi.w	r0, r0, #1073741824	; 0x40000000
 80036a0:	0091      	lsls	r1, r2, #2
 80036a2:	bf48      	it	mi
 80036a4:	f040 5000 	orrmi.w	r0, r0, #536870912	; 0x20000000
 80036a8:	0111      	lsls	r1, r2, #4
 80036aa:	bf48      	it	mi
 80036ac:	f040 6000 	orrmi.w	r0, r0, #134217728	; 0x8000000
 80036b0:	4770      	bx	lr
	...

080036b4 <.text_14>:
 80036b4:	00000000 	.word	0x00000000

080036b8 <.text_15>:
 80036b8:	002be80f 	.word	0x002be80f

080036bc <.text_16>:
 80036bc:	003bf7f1 	.word	0x003bf7f1

080036c0 <.text_17>:
 80036c0:	00b9fff1 	.word	0x00b9fff1

080036c4 <.text_18>:
 80036c4:	004df000 	.word	0x004df000

080036c8 <.text_19>:
 80036c8:	00040040 	.word	0x00040040

080036cc <.text_20>:
 80036cc:	00840040 	.word	0x00840040

080036d0 <.text_21>:
 80036d0:	0800c0b4 	.word	0x0800c0b4

080036d4 <.text_22>:
 80036d4:	007ff7f1 	.word	0x007ff7f1

080036d8 <.text_23>:
 80036d8:	00fe07f1 	.word	0x00fe07f1

080036dc <.text_24>:
 80036dc:	0800c124 	.word	0x0800c124

080036e0 <.text_25>:
 80036e0:	00803fff 	.word	0x00803fff

080036e4 <.text_26>:
 80036e4:	01821040 	.word	0x01821040

080036e8 <.text_27>:
 80036e8:	00040440 	.word	0x00040440

080036ec <.text_28>:
 80036ec:	00040840 	.word	0x00040840

080036f0 <.text_29>:
 80036f0:	00840440 	.word	0x00840440

080036f4 <.text_30>:
 80036f4:	00840840 	.word	0x00840840

080036f8 <.text_31>:
 80036f8:	00840447 	.word	0x00840447

080036fc <.text_32>:
 80036fc:	0084084f 	.word	0x0084084f

08003700 <.text_33>:
 8003700:	00040447 	.word	0x00040447

08003704 <.text_34>:
 8003704:	0004084f 	.word	0x0004084f

08003708 <ai_array_get_byte_size>:
 8003708:	b909      	cbnz	r1, 800370e <ai_array_get_byte_size+0x6>
 800370a:	2000      	movs	r0, #0
 800370c:	4770      	bx	lr
 800370e:	11c2      	asrs	r2, r0, #7
 8003710:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003714:	f3c0 3382 	ubfx	r3, r0, #14, #3
 8003718:	189b      	adds	r3, r3, r2
 800371a:	4359      	muls	r1, r3
 800371c:	1dc9      	adds	r1, r1, #7
 800371e:	08c9      	lsrs	r1, r1, #3
 8003720:	1543      	asrs	r3, r0, #21
 8003722:	00c9      	lsls	r1, r1, #3
 8003724:	f003 0303 	and.w	r3, r3, #3
 8003728:	ea4f 4c60 	mov.w	ip, r0, asr #17
 800372c:	40d9      	lsrs	r1, r3
 800372e:	f00c 0c0f 	and.w	ip, ip, #15
 8003732:	f1bc 0f04 	cmp.w	ip, #4
 8003736:	d00a      	beq.n	800374e <ai_array_get_byte_size+0x46>
 8003738:	f1bc 0f08 	cmp.w	ip, #8
 800373c:	bf02      	ittt	eq
 800373e:	f3c0 3082 	ubfxeq	r0, r0, #14, #3
 8003742:	1882      	addeq	r2, r0, r2
 8003744:	eb01 2102 	addeq.w	r1, r1, r2, lsl #8
 8003748:	1dc9      	adds	r1, r1, #7
 800374a:	08c8      	lsrs	r0, r1, #3
 800374c:	4770      	bx	lr
 800374e:	f3c0 3082 	ubfx	r0, r0, #14, #3
 8003752:	1882      	adds	r2, r0, r2
 8003754:	eb01 1102 	add.w	r1, r1, r2, lsl #4
 8003758:	1dc9      	adds	r1, r1, #7
 800375a:	08c8      	lsrs	r0, r1, #3
 800375c:	4770      	bx	lr

0800375e <ai_array_get_data_byte_size>:
 800375e:	b909      	cbnz	r1, 8003764 <ai_array_get_data_byte_size+0x6>
 8003760:	2000      	movs	r0, #0
 8003762:	4770      	bx	lr
 8003764:	11c2      	asrs	r2, r0, #7
 8003766:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800376a:	f3c0 3382 	ubfx	r3, r0, #14, #3
 800376e:	189a      	adds	r2, r3, r2
 8003770:	4351      	muls	r1, r2
 8003772:	1dc9      	adds	r1, r1, #7
 8003774:	08c9      	lsrs	r1, r1, #3
 8003776:	1540      	asrs	r0, r0, #21
 8003778:	00c9      	lsls	r1, r1, #3
 800377a:	f000 0003 	and.w	r0, r0, #3
 800377e:	40c1      	lsrs	r1, r0
 8003780:	1dc9      	adds	r1, r1, #7
 8003782:	08c8      	lsrs	r0, r1, #3
 8003784:	4770      	bx	lr

08003786 <ai_array_get_elems_from_size>:
 8003786:	b909      	cbnz	r1, 800378c <ai_array_get_elems_from_size+0x6>
 8003788:	2000      	movs	r0, #0
 800378a:	4770      	bx	lr
 800378c:	1442      	asrs	r2, r0, #17
 800378e:	00c9      	lsls	r1, r1, #3
 8003790:	f002 020f 	and.w	r2, r2, #15
 8003794:	2a04      	cmp	r2, #4
 8003796:	d002      	beq.n	800379e <ai_array_get_elems_from_size+0x18>
 8003798:	2a08      	cmp	r2, #8
 800379a:	d009      	beq.n	80037b0 <ai_array_get_elems_from_size+0x2a>
 800379c:	e010      	b.n	80037c0 <ai_array_get_elems_from_size+0x3a>
 800379e:	11c3      	asrs	r3, r0, #7
 80037a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80037a4:	f3c0 3282 	ubfx	r2, r0, #14, #3
 80037a8:	18d2      	adds	r2, r2, r3
 80037aa:	eba1 1102 	sub.w	r1, r1, r2, lsl #4
 80037ae:	e007      	b.n	80037c0 <ai_array_get_elems_from_size+0x3a>
 80037b0:	11c2      	asrs	r2, r0, #7
 80037b2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80037b6:	f3c0 3382 	ubfx	r3, r0, #14, #3
 80037ba:	189a      	adds	r2, r3, r2
 80037bc:	eba1 2102 	sub.w	r1, r1, r2, lsl #8
 80037c0:	1542      	asrs	r2, r0, #21
 80037c2:	f002 0203 	and.w	r2, r2, #3
 80037c6:	4091      	lsls	r1, r2
 80037c8:	1dc9      	adds	r1, r1, #7
 80037ca:	11c2      	asrs	r2, r0, #7
 80037cc:	08c9      	lsrs	r1, r1, #3
 80037ce:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80037d2:	f3c0 3082 	ubfx	r0, r0, #14, #3
 80037d6:	00c9      	lsls	r1, r1, #3
 80037d8:	1880      	adds	r0, r0, r2
 80037da:	fbb1 f0f0 	udiv	r0, r1, r0
 80037de:	4770      	bx	lr

080037e0 <.text_38>:
 80037e0:	5f544d46 	.word	0x5f544d46
 80037e4:	454e4f4e 	.word	0x454e4f4e
 80037e8:	00000000 	.word	0x00000000

080037ec <.text_39>:
 80037ec:	5f544d46 	.word	0x5f544d46
 80037f0:	414f4c46 	.word	0x414f4c46
 80037f4:	0054      	.short	0x0054
	...

080037f8 <.text_40>:
 80037f8:	5f544d46 	.word	0x5f544d46
 80037fc:	414f4c46 	.word	0x414f4c46
 8003800:	00343654 	.word	0x00343654

08003804 <.text_41>:
 8003804:	5f544d46 	.word	0x5f544d46
 8003808:	414f4c46 	.word	0x414f4c46
 800380c:	00363154 	.word	0x00363154

08003810 <.text_42>:
 8003810:	5f544d46 	.word	0x5f544d46
 8003814:	3855      	.short	0x3855
	...

08003818 <.text_43>:
 8003818:	5f544d46 	.word	0x5f544d46
 800381c:	00363155 	.word	0x00363155

08003820 <.text_44>:
 8003820:	5f544d46 	.word	0x5f544d46
 8003824:	00323355 	.word	0x00323355

08003828 <.text_45>:
 8003828:	5f544d46 	.word	0x5f544d46
 800382c:	00343655 	.word	0x00343655

08003830 <.text_46>:
 8003830:	5f544d46 	.word	0x5f544d46
 8003834:	3455      	.short	0x3455
	...

08003838 <.text_47>:
 8003838:	5f544d46 	.word	0x5f544d46
 800383c:	3853      	.short	0x3853
	...

08003840 <.text_48>:
 8003840:	5f544d46 	.word	0x5f544d46
 8003844:	00363153 	.word	0x00363153

08003848 <.text_49>:
 8003848:	5f544d46 	.word	0x5f544d46
 800384c:	00323353 	.word	0x00323353

08003850 <.text_50>:
 8003850:	5f544d46 	.word	0x5f544d46
 8003854:	00343653 	.word	0x00343653

08003858 <.text_51>:
 8003858:	5f544d46 	.word	0x5f544d46
 800385c:	3453      	.short	0x3453
	...

08003860 <.text_52>:
 8003860:	5f544d46 	.word	0x5f544d46
 8003864:	0051      	.short	0x0051
	...

08003868 <.text_53>:
 8003868:	5f544d46 	.word	0x5f544d46
 800386c:	3751      	.short	0x3751
	...

08003870 <.text_54>:
 8003870:	5f544d46 	.word	0x5f544d46
 8003874:	00353151 	.word	0x00353151

08003878 <.text_55>:
 8003878:	5f544d46 	.word	0x5f544d46
 800387c:	00313351 	.word	0x00313351

08003880 <.text_56>:
 8003880:	5f544d46 	.word	0x5f544d46
 8003884:	5155      	.short	0x5155
	...

08003888 <.text_57>:
 8003888:	5f544d46 	.word	0x5f544d46
 800388c:	00375155 	.word	0x00375155

08003890 <.text_58>:
 8003890:	5f544d46 	.word	0x5f544d46
 8003894:	35315155 	.word	0x35315155
 8003898:	00000000 	.word	0x00000000

0800389c <.text_59>:
 800389c:	5f544d46 	.word	0x5f544d46
 80038a0:	31335155 	.word	0x31335155
 80038a4:	00000000 	.word	0x00000000

080038a8 <.text_60>:
 80038a8:	5f544d46 	.word	0x5f544d46
 80038ac:	3454554c 	.word	0x3454554c
 80038b0:	4f4c465f 	.word	0x4f4c465f
 80038b4:	5441      	.short	0x5441
	...

080038b8 <.text_61>:
 80038b8:	5f544d46 	.word	0x5f544d46
 80038bc:	3854554c 	.word	0x3854554c
 80038c0:	4f4c465f 	.word	0x4f4c465f
 80038c4:	5441      	.short	0x5441
	...

080038c8 <.text_62>:
 80038c8:	5f544d46 	.word	0x5f544d46
 80038cc:	3454554c 	.word	0x3454554c
 80038d0:	3531515f 	.word	0x3531515f
 80038d4:	00000000 	.word	0x00000000

080038d8 <.text_63>:
 80038d8:	5f544d46 	.word	0x5f544d46
 80038dc:	3854554c 	.word	0x3854554c
 80038e0:	3531515f 	.word	0x3531515f
 80038e4:	00000000 	.word	0x00000000

080038e8 <.text_64>:
 80038e8:	5f544d46 	.word	0x5f544d46
 80038ec:	3454554c 	.word	0x3454554c
 80038f0:	3151555f 	.word	0x3151555f
 80038f4:	0035      	.short	0x0035
	...

080038f8 <.text_65>:
 80038f8:	5f544d46 	.word	0x5f544d46
 80038fc:	3854554c 	.word	0x3854554c
 8003900:	3151555f 	.word	0x3151555f
 8003904:	0035      	.short	0x0035
	...

08003908 <.text_66>:
 8003908:	415f4941 	.word	0x415f4941
 800390c:	59415252 	.word	0x59415252
 8003910:	524f465f 	.word	0x524f465f
 8003914:	5f54414d 	.word	0x5f54414d
 8003918:	454e4f4e 	.word	0x454e4f4e
 800391c:	00000000 	.word	0x00000000

08003920 <.text_67>:
 8003920:	415f4941 	.word	0x415f4941
 8003924:	59415252 	.word	0x59415252
 8003928:	524f465f 	.word	0x524f465f
 800392c:	5f54414d 	.word	0x5f54414d
 8003930:	0051      	.short	0x0051
	...

08003934 <.text_68>:
 8003934:	415f4941 	.word	0x415f4941
 8003938:	59415252 	.word	0x59415252
 800393c:	524f465f 	.word	0x524f465f
 8003940:	5f54414d 	.word	0x5f54414d
 8003944:	5155      	.short	0x5155
	...

08003948 <.text_69>:
 8003948:	425f4941 	.word	0x425f4941
 800394c:	45464655 	.word	0x45464655
 8003950:	4f465f52 	.word	0x4f465f52
 8003954:	54414d52 	.word	0x54414d52
 8003958:	4e4f4e5f 	.word	0x4e4f4e5f
 800395c:	0045      	.short	0x0045
	...

08003960 <.text_70>:
 8003960:	425f4941 	.word	0x425f4941
 8003964:	45464655 	.word	0x45464655
 8003968:	4f465f52 	.word	0x4f465f52
 800396c:	54414d52 	.word	0x54414d52
 8003970:	515f      	.short	0x515f
	...

08003974 <.text_71>:
 8003974:	425f4941 	.word	0x425f4941
 8003978:	45464655 	.word	0x45464655
 800397c:	4f465f52 	.word	0x4f465f52
 8003980:	54414d52 	.word	0x54414d52
 8003984:	0051555f 	.word	0x0051555f

08003988 <ai_math_dot_array>:
 8003988:	b530      	push	{r4, r5, lr}
 800398a:	4604      	mov	r4, r0
 800398c:	4608      	mov	r0, r1
 800398e:	b081      	sub	sp, #4
 8003990:	4611      	mov	r1, r2
 8003992:	461a      	mov	r2, r3
 8003994:	2500      	movs	r5, #0
 8003996:	9500      	str	r5, [sp, #0]
 8003998:	466b      	mov	r3, sp
 800399a:	f000 ff6f 	bl	800487c <arm_dot_prod_f32>
 800399e:	ed94 0a00 	vldr	s0, [r4]
 80039a2:	eddd 0a00 	vldr	s1, [sp]
 80039a6:	ee70 0a20 	vadd.f32	s1, s0, s1
 80039aa:	edc4 0a00 	vstr	s1, [r4]
 80039ae:	b001      	add	sp, #4
 80039b0:	bd30      	pop	{r4, r5, pc}
	...

080039b4 <ai_math_sqrt>:
 80039b4:	eef0 0a40 	vmov.f32	s1, s0
 80039b8:	eef5 0a40 	vcmp.f32	s1, #0.0
 80039bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039c0:	ed9f 0a28 	vldr	s0, [pc, #160]	; 8003a64 <.text_12>
 80039c4:	db01      	blt.n	80039ca <ai_math_sqrt+0x16>
 80039c6:	eeb1 0ae0 	vsqrt.f32	s0, s1
 80039ca:	4770      	bx	lr

080039cc <ai_math_exp>:
 80039cc:	f007 ba28 	b.w	800ae20 <expf>

080039d0 <ai_math_pow>:
 80039d0:	f007 bb16 	b.w	800b000 <powf>

080039d4 <ai_math_tanh>:
 80039d4:	f007 b9d2 	b.w	800ad7c <tanhf>

080039d8 <ai_math_relu>:
 80039d8:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80039dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039e0:	bf48      	it	mi
 80039e2:	ed9f 0a20 	vldrmi	s0, [pc, #128]	; 8003a64 <.text_12>
 80039e6:	4770      	bx	lr

080039e8 <ai_math_prelu>:
 80039e8:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80039ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039f0:	bf48      	it	mi
 80039f2:	ee20 0a20 	vmulmi.f32	s0, s0, s1
 80039f6:	4770      	bx	lr

080039f8 <ai_math_sigmoid>:
 80039f8:	b500      	push	{lr}
 80039fa:	b081      	sub	sp, #4
 80039fc:	eeb1 0a40 	vneg.f32	s0, s0
 8003a00:	f007 fa0e 	bl	800ae20 <expf>
 8003a04:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003a08:	ee30 0a20 	vadd.f32	s0, s0, s1
 8003a0c:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8003a10:	ee81 0a00 	vdiv.f32	s0, s2, s0
 8003a14:	b001      	add	sp, #4
 8003a16:	bd00      	pop	{pc}

08003a18 <ai_math_hard_sigmoid>:
 8003a18:	eef0 0a40 	vmov.f32	s1, s0
 8003a1c:	ed9f 1a12 	vldr	s2, [pc, #72]	; 8003a68 <.text_13>
 8003a20:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8003a24:	ee00 0a81 	vmla.f32	s0, s1, s2
 8003a28:	eddf 0a10 	vldr	s1, [pc, #64]	; 8003a6c <.text_14>
 8003a2c:	eeb4 0a60 	vcmp.f32	s0, s1
 8003a30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a34:	da07      	bge.n	8003a46 <ai_math_hard_sigmoid+0x2e>
 8003a36:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8003a3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a3e:	d504      	bpl.n	8003a4a <ai_math_hard_sigmoid+0x32>
 8003a40:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8003a64 <.text_12>
 8003a44:	4770      	bx	lr
 8003a46:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003a4a:	4770      	bx	lr

08003a4c <ai_math_sign>:
 8003a4c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8003a50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a54:	bfcc      	ite	gt
 8003a56:	ed9f 0a06 	vldrgt	s0, [pc, #24]	; 8003a70 <.text_15>
 8003a5a:	ed9f 0a06 	vldrle	s0, [pc, #24]	; 8003a74 <.text_16>
 8003a5e:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8003a62:	4770      	bx	lr

08003a64 <.text_12>:
 8003a64:	00000000 	.word	0x00000000

08003a68 <.text_13>:
 8003a68:	3e4ccccd 	.word	0x3e4ccccd

08003a6c <.text_14>:
 8003a6c:	3f800001 	.word	0x3f800001

08003a70 <.text_15>:
 8003a70:	00000001 	.word	0x00000001

08003a74 <.text_16>:
 8003a74:	ffffffff 	.word	0xffffffff

08003a78 <ai_sum>:
 8003a78:	ee30 0a20 	vadd.f32	s0, s0, s1
 8003a7c:	4770      	bx	lr

08003a7e <ai_sub>:
 8003a7e:	ee30 0a60 	vsub.f32	s0, s0, s1
 8003a82:	4770      	bx	lr

08003a84 <ai_mul>:
 8003a84:	ee20 0a20 	vmul.f32	s0, s0, s1
 8003a88:	4770      	bx	lr

08003a8a <ai_div>:
 8003a8a:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8003a8e:	4770      	bx	lr

08003a90 <ai_max>:
 8003a90:	eef4 0a40 	vcmp.f32	s1, s0
 8003a94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a98:	bf58      	it	pl
 8003a9a:	eeb0 0a60 	vmovpl.f32	s0, s1
 8003a9e:	4770      	bx	lr

08003aa0 <ai_min>:
 8003aa0:	eeb4 0a60 	vcmp.f32	s0, s1
 8003aa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003aa8:	bf58      	it	pl
 8003aaa:	eeb0 0a60 	vmovpl.f32	s0, s1
 8003aae:	4770      	bx	lr

08003ab0 <__aeabi_memset>:
 8003ab0:	b470      	push	{r4, r5, r6}
 8003ab2:	0784      	lsls	r4, r0, #30
 8003ab4:	d046      	beq.n	8003b44 <__aeabi_memset+0x94>
 8003ab6:	1e4c      	subs	r4, r1, #1
 8003ab8:	2900      	cmp	r1, #0
 8003aba:	d041      	beq.n	8003b40 <__aeabi_memset+0x90>
 8003abc:	b2d5      	uxtb	r5, r2
 8003abe:	4603      	mov	r3, r0
 8003ac0:	e002      	b.n	8003ac8 <__aeabi_memset+0x18>
 8003ac2:	1e61      	subs	r1, r4, #1
 8003ac4:	b3e4      	cbz	r4, 8003b40 <__aeabi_memset+0x90>
 8003ac6:	460c      	mov	r4, r1
 8003ac8:	f803 5b01 	strb.w	r5, [r3], #1
 8003acc:	0799      	lsls	r1, r3, #30
 8003ace:	d1f8      	bne.n	8003ac2 <__aeabi_memset+0x12>
 8003ad0:	2c03      	cmp	r4, #3
 8003ad2:	d92e      	bls.n	8003b32 <__aeabi_memset+0x82>
 8003ad4:	b2d5      	uxtb	r5, r2
 8003ad6:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8003ada:	2c0f      	cmp	r4, #15
 8003adc:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8003ae0:	d919      	bls.n	8003b16 <__aeabi_memset+0x66>
 8003ae2:	4626      	mov	r6, r4
 8003ae4:	f103 0110 	add.w	r1, r3, #16
 8003ae8:	3e10      	subs	r6, #16
 8003aea:	2e0f      	cmp	r6, #15
 8003aec:	f841 5c10 	str.w	r5, [r1, #-16]
 8003af0:	f841 5c0c 	str.w	r5, [r1, #-12]
 8003af4:	f841 5c08 	str.w	r5, [r1, #-8]
 8003af8:	f841 5c04 	str.w	r5, [r1, #-4]
 8003afc:	f101 0110 	add.w	r1, r1, #16
 8003b00:	d8f2      	bhi.n	8003ae8 <__aeabi_memset+0x38>
 8003b02:	f1a4 0110 	sub.w	r1, r4, #16
 8003b06:	f021 010f 	bic.w	r1, r1, #15
 8003b0a:	f004 040f 	and.w	r4, r4, #15
 8003b0e:	3110      	adds	r1, #16
 8003b10:	2c03      	cmp	r4, #3
 8003b12:	440b      	add	r3, r1
 8003b14:	d90d      	bls.n	8003b32 <__aeabi_memset+0x82>
 8003b16:	461e      	mov	r6, r3
 8003b18:	4621      	mov	r1, r4
 8003b1a:	3904      	subs	r1, #4
 8003b1c:	2903      	cmp	r1, #3
 8003b1e:	f846 5b04 	str.w	r5, [r6], #4
 8003b22:	d8fa      	bhi.n	8003b1a <__aeabi_memset+0x6a>
 8003b24:	1f21      	subs	r1, r4, #4
 8003b26:	f021 0103 	bic.w	r1, r1, #3
 8003b2a:	3104      	adds	r1, #4
 8003b2c:	440b      	add	r3, r1
 8003b2e:	f004 0403 	and.w	r4, r4, #3
 8003b32:	b12c      	cbz	r4, 8003b40 <__aeabi_memset+0x90>
 8003b34:	b2d2      	uxtb	r2, r2
 8003b36:	441c      	add	r4, r3
 8003b38:	f803 2b01 	strb.w	r2, [r3], #1
 8003b3c:	42a3      	cmp	r3, r4
 8003b3e:	d1fb      	bne.n	8003b38 <__aeabi_memset+0x88>
 8003b40:	bc70      	pop	{r4, r5, r6}
 8003b42:	4770      	bx	lr
 8003b44:	460c      	mov	r4, r1
 8003b46:	4603      	mov	r3, r0
 8003b48:	e7c2      	b.n	8003ad0 <__aeabi_memset+0x20>
 8003b4a:	0000      	movs	r0, r0
 8003b4c:	0000      	movs	r0, r0
	...

08003b50 <memchr>:
 8003b50:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8003b54:	2a10      	cmp	r2, #16
 8003b56:	db2b      	blt.n	8003bb0 <memchr+0x60>
 8003b58:	f010 0f07 	tst.w	r0, #7
 8003b5c:	d008      	beq.n	8003b70 <memchr+0x20>
 8003b5e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8003b62:	3a01      	subs	r2, #1
 8003b64:	428b      	cmp	r3, r1
 8003b66:	d02d      	beq.n	8003bc4 <memchr+0x74>
 8003b68:	f010 0f07 	tst.w	r0, #7
 8003b6c:	b342      	cbz	r2, 8003bc0 <memchr+0x70>
 8003b6e:	d1f6      	bne.n	8003b5e <memchr+0xe>
 8003b70:	b4f0      	push	{r4, r5, r6, r7}
 8003b72:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8003b76:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 8003b7a:	f022 0407 	bic.w	r4, r2, #7
 8003b7e:	f07f 0700 	mvns.w	r7, #0
 8003b82:	2300      	movs	r3, #0
 8003b84:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8003b88:	3c08      	subs	r4, #8
 8003b8a:	ea85 0501 	eor.w	r5, r5, r1
 8003b8e:	ea86 0601 	eor.w	r6, r6, r1
 8003b92:	fa85 f547 	uadd8	r5, r5, r7
 8003b96:	faa3 f587 	sel	r5, r3, r7
 8003b9a:	fa86 f647 	uadd8	r6, r6, r7
 8003b9e:	faa5 f687 	sel	r6, r5, r7
 8003ba2:	b98e      	cbnz	r6, 8003bc8 <memchr+0x78>
 8003ba4:	d1ee      	bne.n	8003b84 <memchr+0x34>
 8003ba6:	bcf0      	pop	{r4, r5, r6, r7}
 8003ba8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8003bac:	f002 0207 	and.w	r2, r2, #7
 8003bb0:	b132      	cbz	r2, 8003bc0 <memchr+0x70>
 8003bb2:	f810 3b01 	ldrb.w	r3, [r0], #1
 8003bb6:	3a01      	subs	r2, #1
 8003bb8:	ea83 0301 	eor.w	r3, r3, r1
 8003bbc:	b113      	cbz	r3, 8003bc4 <memchr+0x74>
 8003bbe:	d1f8      	bne.n	8003bb2 <memchr+0x62>
 8003bc0:	2000      	movs	r0, #0
 8003bc2:	4770      	bx	lr
 8003bc4:	3801      	subs	r0, #1
 8003bc6:	4770      	bx	lr
 8003bc8:	2d00      	cmp	r5, #0
 8003bca:	bf06      	itte	eq
 8003bcc:	4635      	moveq	r5, r6
 8003bce:	3803      	subeq	r0, #3
 8003bd0:	3807      	subne	r0, #7
 8003bd2:	f015 0f01 	tst.w	r5, #1
 8003bd6:	d107      	bne.n	8003be8 <memchr+0x98>
 8003bd8:	3001      	adds	r0, #1
 8003bda:	f415 7f80 	tst.w	r5, #256	; 0x100
 8003bde:	bf02      	ittt	eq
 8003be0:	3001      	addeq	r0, #1
 8003be2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8003be6:	3001      	addeq	r0, #1
 8003be8:	bcf0      	pop	{r4, r5, r6, r7}
 8003bea:	3801      	subs	r0, #1
 8003bec:	4770      	bx	lr
 8003bee:	bf00      	nop

08003bf0 <__aeabi_drsub>:
 8003bf0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8003bf4:	e002      	b.n	8003bfc <__adddf3>
 8003bf6:	bf00      	nop

08003bf8 <__aeabi_dsub>:
 8003bf8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08003bfc <__adddf3>:
 8003bfc:	b530      	push	{r4, r5, lr}
 8003bfe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8003c02:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8003c06:	ea94 0f05 	teq	r4, r5
 8003c0a:	bf08      	it	eq
 8003c0c:	ea90 0f02 	teqeq	r0, r2
 8003c10:	bf1f      	itttt	ne
 8003c12:	ea54 0c00 	orrsne.w	ip, r4, r0
 8003c16:	ea55 0c02 	orrsne.w	ip, r5, r2
 8003c1a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8003c1e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8003c22:	f000 80e2 	beq.w	8003dea <__adddf3+0x1ee>
 8003c26:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8003c2a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8003c2e:	bfb8      	it	lt
 8003c30:	426d      	neglt	r5, r5
 8003c32:	dd0c      	ble.n	8003c4e <__adddf3+0x52>
 8003c34:	442c      	add	r4, r5
 8003c36:	ea80 0202 	eor.w	r2, r0, r2
 8003c3a:	ea81 0303 	eor.w	r3, r1, r3
 8003c3e:	ea82 0000 	eor.w	r0, r2, r0
 8003c42:	ea83 0101 	eor.w	r1, r3, r1
 8003c46:	ea80 0202 	eor.w	r2, r0, r2
 8003c4a:	ea81 0303 	eor.w	r3, r1, r3
 8003c4e:	2d36      	cmp	r5, #54	; 0x36
 8003c50:	bf88      	it	hi
 8003c52:	bd30      	pophi	{r4, r5, pc}
 8003c54:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8003c58:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8003c5c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8003c60:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8003c64:	d002      	beq.n	8003c6c <__adddf3+0x70>
 8003c66:	4240      	negs	r0, r0
 8003c68:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8003c6c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8003c70:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8003c74:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8003c78:	d002      	beq.n	8003c80 <__adddf3+0x84>
 8003c7a:	4252      	negs	r2, r2
 8003c7c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8003c80:	ea94 0f05 	teq	r4, r5
 8003c84:	f000 80a7 	beq.w	8003dd6 <__adddf3+0x1da>
 8003c88:	f1a4 0401 	sub.w	r4, r4, #1
 8003c8c:	f1d5 0e20 	rsbs	lr, r5, #32
 8003c90:	db0d      	blt.n	8003cae <__adddf3+0xb2>
 8003c92:	fa02 fc0e 	lsl.w	ip, r2, lr
 8003c96:	fa22 f205 	lsr.w	r2, r2, r5
 8003c9a:	1880      	adds	r0, r0, r2
 8003c9c:	f141 0100 	adc.w	r1, r1, #0
 8003ca0:	fa03 f20e 	lsl.w	r2, r3, lr
 8003ca4:	1880      	adds	r0, r0, r2
 8003ca6:	fa43 f305 	asr.w	r3, r3, r5
 8003caa:	4159      	adcs	r1, r3
 8003cac:	e00e      	b.n	8003ccc <__adddf3+0xd0>
 8003cae:	f1a5 0520 	sub.w	r5, r5, #32
 8003cb2:	f10e 0e20 	add.w	lr, lr, #32
 8003cb6:	2a01      	cmp	r2, #1
 8003cb8:	fa03 fc0e 	lsl.w	ip, r3, lr
 8003cbc:	bf28      	it	cs
 8003cbe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8003cc2:	fa43 f305 	asr.w	r3, r3, r5
 8003cc6:	18c0      	adds	r0, r0, r3
 8003cc8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8003ccc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8003cd0:	d507      	bpl.n	8003ce2 <__adddf3+0xe6>
 8003cd2:	f04f 0e00 	mov.w	lr, #0
 8003cd6:	f1dc 0c00 	rsbs	ip, ip, #0
 8003cda:	eb7e 0000 	sbcs.w	r0, lr, r0
 8003cde:	eb6e 0101 	sbc.w	r1, lr, r1
 8003ce2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8003ce6:	d31b      	bcc.n	8003d20 <__adddf3+0x124>
 8003ce8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8003cec:	d30c      	bcc.n	8003d08 <__adddf3+0x10c>
 8003cee:	0849      	lsrs	r1, r1, #1
 8003cf0:	ea5f 0030 	movs.w	r0, r0, rrx
 8003cf4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8003cf8:	f104 0401 	add.w	r4, r4, #1
 8003cfc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8003d00:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8003d04:	f080 809a 	bcs.w	8003e3c <__adddf3+0x240>
 8003d08:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8003d0c:	bf08      	it	eq
 8003d0e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8003d12:	f150 0000 	adcs.w	r0, r0, #0
 8003d16:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8003d1a:	ea41 0105 	orr.w	r1, r1, r5
 8003d1e:	bd30      	pop	{r4, r5, pc}
 8003d20:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8003d24:	4140      	adcs	r0, r0
 8003d26:	eb41 0101 	adc.w	r1, r1, r1
 8003d2a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8003d2e:	f1a4 0401 	sub.w	r4, r4, #1
 8003d32:	d1e9      	bne.n	8003d08 <__adddf3+0x10c>
 8003d34:	f091 0f00 	teq	r1, #0
 8003d38:	bf04      	itt	eq
 8003d3a:	4601      	moveq	r1, r0
 8003d3c:	2000      	moveq	r0, #0
 8003d3e:	fab1 f381 	clz	r3, r1
 8003d42:	bf08      	it	eq
 8003d44:	3320      	addeq	r3, #32
 8003d46:	f1a3 030b 	sub.w	r3, r3, #11
 8003d4a:	f1b3 0220 	subs.w	r2, r3, #32
 8003d4e:	da0c      	bge.n	8003d6a <__adddf3+0x16e>
 8003d50:	320c      	adds	r2, #12
 8003d52:	dd08      	ble.n	8003d66 <__adddf3+0x16a>
 8003d54:	f102 0c14 	add.w	ip, r2, #20
 8003d58:	f1c2 020c 	rsb	r2, r2, #12
 8003d5c:	fa01 f00c 	lsl.w	r0, r1, ip
 8003d60:	fa21 f102 	lsr.w	r1, r1, r2
 8003d64:	e00c      	b.n	8003d80 <__adddf3+0x184>
 8003d66:	f102 0214 	add.w	r2, r2, #20
 8003d6a:	bfd8      	it	le
 8003d6c:	f1c2 0c20 	rsble	ip, r2, #32
 8003d70:	fa01 f102 	lsl.w	r1, r1, r2
 8003d74:	fa20 fc0c 	lsr.w	ip, r0, ip
 8003d78:	bfdc      	itt	le
 8003d7a:	ea41 010c 	orrle.w	r1, r1, ip
 8003d7e:	4090      	lslle	r0, r2
 8003d80:	1ae4      	subs	r4, r4, r3
 8003d82:	bfa2      	ittt	ge
 8003d84:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8003d88:	4329      	orrge	r1, r5
 8003d8a:	bd30      	popge	{r4, r5, pc}
 8003d8c:	ea6f 0404 	mvn.w	r4, r4
 8003d90:	3c1f      	subs	r4, #31
 8003d92:	da1c      	bge.n	8003dce <__adddf3+0x1d2>
 8003d94:	340c      	adds	r4, #12
 8003d96:	dc0e      	bgt.n	8003db6 <__adddf3+0x1ba>
 8003d98:	f104 0414 	add.w	r4, r4, #20
 8003d9c:	f1c4 0220 	rsb	r2, r4, #32
 8003da0:	fa20 f004 	lsr.w	r0, r0, r4
 8003da4:	fa01 f302 	lsl.w	r3, r1, r2
 8003da8:	ea40 0003 	orr.w	r0, r0, r3
 8003dac:	fa21 f304 	lsr.w	r3, r1, r4
 8003db0:	ea45 0103 	orr.w	r1, r5, r3
 8003db4:	bd30      	pop	{r4, r5, pc}
 8003db6:	f1c4 040c 	rsb	r4, r4, #12
 8003dba:	f1c4 0220 	rsb	r2, r4, #32
 8003dbe:	fa20 f002 	lsr.w	r0, r0, r2
 8003dc2:	fa01 f304 	lsl.w	r3, r1, r4
 8003dc6:	ea40 0003 	orr.w	r0, r0, r3
 8003dca:	4629      	mov	r1, r5
 8003dcc:	bd30      	pop	{r4, r5, pc}
 8003dce:	fa21 f004 	lsr.w	r0, r1, r4
 8003dd2:	4629      	mov	r1, r5
 8003dd4:	bd30      	pop	{r4, r5, pc}
 8003dd6:	f094 0f00 	teq	r4, #0
 8003dda:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8003dde:	bf06      	itte	eq
 8003de0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8003de4:	3401      	addeq	r4, #1
 8003de6:	3d01      	subne	r5, #1
 8003de8:	e74e      	b.n	8003c88 <__adddf3+0x8c>
 8003dea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8003dee:	bf18      	it	ne
 8003df0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8003df4:	d029      	beq.n	8003e4a <__adddf3+0x24e>
 8003df6:	ea94 0f05 	teq	r4, r5
 8003dfa:	bf08      	it	eq
 8003dfc:	ea90 0f02 	teqeq	r0, r2
 8003e00:	d005      	beq.n	8003e0e <__adddf3+0x212>
 8003e02:	ea54 0c00 	orrs.w	ip, r4, r0
 8003e06:	bf04      	itt	eq
 8003e08:	4619      	moveq	r1, r3
 8003e0a:	4610      	moveq	r0, r2
 8003e0c:	bd30      	pop	{r4, r5, pc}
 8003e0e:	ea91 0f03 	teq	r1, r3
 8003e12:	bf1e      	ittt	ne
 8003e14:	2100      	movne	r1, #0
 8003e16:	2000      	movne	r0, #0
 8003e18:	bd30      	popne	{r4, r5, pc}
 8003e1a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8003e1e:	d105      	bne.n	8003e2c <__adddf3+0x230>
 8003e20:	0040      	lsls	r0, r0, #1
 8003e22:	4149      	adcs	r1, r1
 8003e24:	bf28      	it	cs
 8003e26:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8003e2a:	bd30      	pop	{r4, r5, pc}
 8003e2c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8003e30:	bf3c      	itt	cc
 8003e32:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8003e36:	bd30      	popcc	{r4, r5, pc}
 8003e38:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8003e3c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8003e40:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003e44:	f04f 0000 	mov.w	r0, #0
 8003e48:	bd30      	pop	{r4, r5, pc}
 8003e4a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8003e4e:	bf1a      	itte	ne
 8003e50:	4619      	movne	r1, r3
 8003e52:	4610      	movne	r0, r2
 8003e54:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8003e58:	bf1c      	itt	ne
 8003e5a:	460b      	movne	r3, r1
 8003e5c:	4602      	movne	r2, r0
 8003e5e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8003e62:	bf06      	itte	eq
 8003e64:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8003e68:	ea91 0f03 	teqeq	r1, r3
 8003e6c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8003e70:	bd30      	pop	{r4, r5, pc}
 8003e72:	bf00      	nop

08003e74 <__aeabi_ui2d>:
 8003e74:	f090 0f00 	teq	r0, #0
 8003e78:	bf04      	itt	eq
 8003e7a:	2100      	moveq	r1, #0
 8003e7c:	4770      	bxeq	lr
 8003e7e:	b530      	push	{r4, r5, lr}
 8003e80:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8003e84:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8003e88:	f04f 0500 	mov.w	r5, #0
 8003e8c:	f04f 0100 	mov.w	r1, #0
 8003e90:	e750      	b.n	8003d34 <__adddf3+0x138>
 8003e92:	bf00      	nop

08003e94 <__aeabi_i2d>:
 8003e94:	f090 0f00 	teq	r0, #0
 8003e98:	bf04      	itt	eq
 8003e9a:	2100      	moveq	r1, #0
 8003e9c:	4770      	bxeq	lr
 8003e9e:	b530      	push	{r4, r5, lr}
 8003ea0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8003ea4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8003ea8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8003eac:	bf48      	it	mi
 8003eae:	4240      	negmi	r0, r0
 8003eb0:	f04f 0100 	mov.w	r1, #0
 8003eb4:	e73e      	b.n	8003d34 <__adddf3+0x138>
 8003eb6:	bf00      	nop

08003eb8 <__aeabi_f2d>:
 8003eb8:	0042      	lsls	r2, r0, #1
 8003eba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8003ebe:	ea4f 0131 	mov.w	r1, r1, rrx
 8003ec2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8003ec6:	bf1f      	itttt	ne
 8003ec8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8003ecc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8003ed0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8003ed4:	4770      	bxne	lr
 8003ed6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8003eda:	bf08      	it	eq
 8003edc:	4770      	bxeq	lr
 8003ede:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8003ee2:	bf04      	itt	eq
 8003ee4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8003ee8:	4770      	bxeq	lr
 8003eea:	b530      	push	{r4, r5, lr}
 8003eec:	f44f 7460 	mov.w	r4, #896	; 0x380
 8003ef0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8003ef4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8003ef8:	e71c      	b.n	8003d34 <__adddf3+0x138>
 8003efa:	bf00      	nop

08003efc <__aeabi_ul2d>:
 8003efc:	ea50 0201 	orrs.w	r2, r0, r1
 8003f00:	bf08      	it	eq
 8003f02:	4770      	bxeq	lr
 8003f04:	b530      	push	{r4, r5, lr}
 8003f06:	f04f 0500 	mov.w	r5, #0
 8003f0a:	e00a      	b.n	8003f22 <__aeabi_l2d+0x16>

08003f0c <__aeabi_l2d>:
 8003f0c:	ea50 0201 	orrs.w	r2, r0, r1
 8003f10:	bf08      	it	eq
 8003f12:	4770      	bxeq	lr
 8003f14:	b530      	push	{r4, r5, lr}
 8003f16:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8003f1a:	d502      	bpl.n	8003f22 <__aeabi_l2d+0x16>
 8003f1c:	4240      	negs	r0, r0
 8003f1e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8003f22:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8003f26:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8003f2a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8003f2e:	f43f aed8 	beq.w	8003ce2 <__adddf3+0xe6>
 8003f32:	f04f 0203 	mov.w	r2, #3
 8003f36:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8003f3a:	bf18      	it	ne
 8003f3c:	3203      	addne	r2, #3
 8003f3e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8003f42:	bf18      	it	ne
 8003f44:	3203      	addne	r2, #3
 8003f46:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8003f4a:	f1c2 0320 	rsb	r3, r2, #32
 8003f4e:	fa00 fc03 	lsl.w	ip, r0, r3
 8003f52:	fa20 f002 	lsr.w	r0, r0, r2
 8003f56:	fa01 fe03 	lsl.w	lr, r1, r3
 8003f5a:	ea40 000e 	orr.w	r0, r0, lr
 8003f5e:	fa21 f102 	lsr.w	r1, r1, r2
 8003f62:	4414      	add	r4, r2
 8003f64:	e6bd      	b.n	8003ce2 <__adddf3+0xe6>
 8003f66:	bf00      	nop

08003f68 <__aeabi_dmul>:
 8003f68:	b570      	push	{r4, r5, r6, lr}
 8003f6a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8003f6e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8003f72:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8003f76:	bf1d      	ittte	ne
 8003f78:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8003f7c:	ea94 0f0c 	teqne	r4, ip
 8003f80:	ea95 0f0c 	teqne	r5, ip
 8003f84:	f000 f8de 	bleq	8004144 <__aeabi_dmul+0x1dc>
 8003f88:	442c      	add	r4, r5
 8003f8a:	ea81 0603 	eor.w	r6, r1, r3
 8003f8e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8003f92:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8003f96:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8003f9a:	bf18      	it	ne
 8003f9c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8003fa0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8003fa4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003fa8:	d038      	beq.n	800401c <__aeabi_dmul+0xb4>
 8003faa:	fba0 ce02 	umull	ip, lr, r0, r2
 8003fae:	f04f 0500 	mov.w	r5, #0
 8003fb2:	fbe1 e502 	umlal	lr, r5, r1, r2
 8003fb6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8003fba:	fbe0 e503 	umlal	lr, r5, r0, r3
 8003fbe:	f04f 0600 	mov.w	r6, #0
 8003fc2:	fbe1 5603 	umlal	r5, r6, r1, r3
 8003fc6:	f09c 0f00 	teq	ip, #0
 8003fca:	bf18      	it	ne
 8003fcc:	f04e 0e01 	orrne.w	lr, lr, #1
 8003fd0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8003fd4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8003fd8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8003fdc:	d204      	bcs.n	8003fe8 <__aeabi_dmul+0x80>
 8003fde:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8003fe2:	416d      	adcs	r5, r5
 8003fe4:	eb46 0606 	adc.w	r6, r6, r6
 8003fe8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8003fec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8003ff0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8003ff4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8003ff8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8003ffc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8004000:	bf88      	it	hi
 8004002:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8004006:	d81e      	bhi.n	8004046 <__aeabi_dmul+0xde>
 8004008:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800400c:	bf08      	it	eq
 800400e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8004012:	f150 0000 	adcs.w	r0, r0, #0
 8004016:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800401a:	bd70      	pop	{r4, r5, r6, pc}
 800401c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8004020:	ea46 0101 	orr.w	r1, r6, r1
 8004024:	ea40 0002 	orr.w	r0, r0, r2
 8004028:	ea81 0103 	eor.w	r1, r1, r3
 800402c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8004030:	bfc2      	ittt	gt
 8004032:	ebd4 050c 	rsbsgt	r5, r4, ip
 8004036:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800403a:	bd70      	popgt	{r4, r5, r6, pc}
 800403c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8004040:	f04f 0e00 	mov.w	lr, #0
 8004044:	3c01      	subs	r4, #1
 8004046:	f300 80ab 	bgt.w	80041a0 <__aeabi_dmul+0x238>
 800404a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800404e:	bfde      	ittt	le
 8004050:	2000      	movle	r0, #0
 8004052:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8004056:	bd70      	pople	{r4, r5, r6, pc}
 8004058:	f1c4 0400 	rsb	r4, r4, #0
 800405c:	3c20      	subs	r4, #32
 800405e:	da35      	bge.n	80040cc <__aeabi_dmul+0x164>
 8004060:	340c      	adds	r4, #12
 8004062:	dc1b      	bgt.n	800409c <__aeabi_dmul+0x134>
 8004064:	f104 0414 	add.w	r4, r4, #20
 8004068:	f1c4 0520 	rsb	r5, r4, #32
 800406c:	fa00 f305 	lsl.w	r3, r0, r5
 8004070:	fa20 f004 	lsr.w	r0, r0, r4
 8004074:	fa01 f205 	lsl.w	r2, r1, r5
 8004078:	ea40 0002 	orr.w	r0, r0, r2
 800407c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8004080:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8004084:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8004088:	fa21 f604 	lsr.w	r6, r1, r4
 800408c:	eb42 0106 	adc.w	r1, r2, r6
 8004090:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8004094:	bf08      	it	eq
 8004096:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800409a:	bd70      	pop	{r4, r5, r6, pc}
 800409c:	f1c4 040c 	rsb	r4, r4, #12
 80040a0:	f1c4 0520 	rsb	r5, r4, #32
 80040a4:	fa00 f304 	lsl.w	r3, r0, r4
 80040a8:	fa20 f005 	lsr.w	r0, r0, r5
 80040ac:	fa01 f204 	lsl.w	r2, r1, r4
 80040b0:	ea40 0002 	orr.w	r0, r0, r2
 80040b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80040b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80040bc:	f141 0100 	adc.w	r1, r1, #0
 80040c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80040c4:	bf08      	it	eq
 80040c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80040ca:	bd70      	pop	{r4, r5, r6, pc}
 80040cc:	f1c4 0520 	rsb	r5, r4, #32
 80040d0:	fa00 f205 	lsl.w	r2, r0, r5
 80040d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80040d8:	fa20 f304 	lsr.w	r3, r0, r4
 80040dc:	fa01 f205 	lsl.w	r2, r1, r5
 80040e0:	ea43 0302 	orr.w	r3, r3, r2
 80040e4:	fa21 f004 	lsr.w	r0, r1, r4
 80040e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80040ec:	fa21 f204 	lsr.w	r2, r1, r4
 80040f0:	ea20 0002 	bic.w	r0, r0, r2
 80040f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80040f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80040fc:	bf08      	it	eq
 80040fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8004102:	bd70      	pop	{r4, r5, r6, pc}
 8004104:	f094 0f00 	teq	r4, #0
 8004108:	d10f      	bne.n	800412a <__aeabi_dmul+0x1c2>
 800410a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800410e:	0040      	lsls	r0, r0, #1
 8004110:	eb41 0101 	adc.w	r1, r1, r1
 8004114:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8004118:	bf08      	it	eq
 800411a:	3c01      	subeq	r4, #1
 800411c:	d0f7      	beq.n	800410e <__aeabi_dmul+0x1a6>
 800411e:	ea41 0106 	orr.w	r1, r1, r6
 8004122:	f095 0f00 	teq	r5, #0
 8004126:	bf18      	it	ne
 8004128:	4770      	bxne	lr
 800412a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800412e:	0052      	lsls	r2, r2, #1
 8004130:	eb43 0303 	adc.w	r3, r3, r3
 8004134:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8004138:	bf08      	it	eq
 800413a:	3d01      	subeq	r5, #1
 800413c:	d0f7      	beq.n	800412e <__aeabi_dmul+0x1c6>
 800413e:	ea43 0306 	orr.w	r3, r3, r6
 8004142:	4770      	bx	lr
 8004144:	ea94 0f0c 	teq	r4, ip
 8004148:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800414c:	bf18      	it	ne
 800414e:	ea95 0f0c 	teqne	r5, ip
 8004152:	d00c      	beq.n	800416e <__aeabi_dmul+0x206>
 8004154:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8004158:	bf18      	it	ne
 800415a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800415e:	d1d1      	bne.n	8004104 <__aeabi_dmul+0x19c>
 8004160:	ea81 0103 	eor.w	r1, r1, r3
 8004164:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8004168:	f04f 0000 	mov.w	r0, #0
 800416c:	bd70      	pop	{r4, r5, r6, pc}
 800416e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8004172:	bf06      	itte	eq
 8004174:	4610      	moveq	r0, r2
 8004176:	4619      	moveq	r1, r3
 8004178:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800417c:	d019      	beq.n	80041b2 <__aeabi_dmul+0x24a>
 800417e:	ea94 0f0c 	teq	r4, ip
 8004182:	d102      	bne.n	800418a <__aeabi_dmul+0x222>
 8004184:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8004188:	d113      	bne.n	80041b2 <__aeabi_dmul+0x24a>
 800418a:	ea95 0f0c 	teq	r5, ip
 800418e:	d105      	bne.n	800419c <__aeabi_dmul+0x234>
 8004190:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8004194:	bf1c      	itt	ne
 8004196:	4610      	movne	r0, r2
 8004198:	4619      	movne	r1, r3
 800419a:	d10a      	bne.n	80041b2 <__aeabi_dmul+0x24a>
 800419c:	ea81 0103 	eor.w	r1, r1, r3
 80041a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80041a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80041a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80041ac:	f04f 0000 	mov.w	r0, #0
 80041b0:	bd70      	pop	{r4, r5, r6, pc}
 80041b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80041b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80041ba:	bd70      	pop	{r4, r5, r6, pc}

080041bc <__aeabi_ddiv>:
 80041bc:	b570      	push	{r4, r5, r6, lr}
 80041be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80041c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80041c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80041ca:	bf1d      	ittte	ne
 80041cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80041d0:	ea94 0f0c 	teqne	r4, ip
 80041d4:	ea95 0f0c 	teqne	r5, ip
 80041d8:	f000 f8a7 	bleq	800432a <__aeabi_ddiv+0x16e>
 80041dc:	eba4 0405 	sub.w	r4, r4, r5
 80041e0:	ea81 0e03 	eor.w	lr, r1, r3
 80041e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80041e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80041ec:	f000 8088 	beq.w	8004300 <__aeabi_ddiv+0x144>
 80041f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80041f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80041f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80041fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8004200:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8004204:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8004208:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800420c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8004210:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8004214:	429d      	cmp	r5, r3
 8004216:	bf08      	it	eq
 8004218:	4296      	cmpeq	r6, r2
 800421a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800421e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8004222:	d202      	bcs.n	800422a <__aeabi_ddiv+0x6e>
 8004224:	085b      	lsrs	r3, r3, #1
 8004226:	ea4f 0232 	mov.w	r2, r2, rrx
 800422a:	1ab6      	subs	r6, r6, r2
 800422c:	eb65 0503 	sbc.w	r5, r5, r3
 8004230:	085b      	lsrs	r3, r3, #1
 8004232:	ea4f 0232 	mov.w	r2, r2, rrx
 8004236:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800423a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800423e:	ebb6 0e02 	subs.w	lr, r6, r2
 8004242:	eb75 0e03 	sbcs.w	lr, r5, r3
 8004246:	bf22      	ittt	cs
 8004248:	1ab6      	subcs	r6, r6, r2
 800424a:	4675      	movcs	r5, lr
 800424c:	ea40 000c 	orrcs.w	r0, r0, ip
 8004250:	085b      	lsrs	r3, r3, #1
 8004252:	ea4f 0232 	mov.w	r2, r2, rrx
 8004256:	ebb6 0e02 	subs.w	lr, r6, r2
 800425a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800425e:	bf22      	ittt	cs
 8004260:	1ab6      	subcs	r6, r6, r2
 8004262:	4675      	movcs	r5, lr
 8004264:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8004268:	085b      	lsrs	r3, r3, #1
 800426a:	ea4f 0232 	mov.w	r2, r2, rrx
 800426e:	ebb6 0e02 	subs.w	lr, r6, r2
 8004272:	eb75 0e03 	sbcs.w	lr, r5, r3
 8004276:	bf22      	ittt	cs
 8004278:	1ab6      	subcs	r6, r6, r2
 800427a:	4675      	movcs	r5, lr
 800427c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8004280:	085b      	lsrs	r3, r3, #1
 8004282:	ea4f 0232 	mov.w	r2, r2, rrx
 8004286:	ebb6 0e02 	subs.w	lr, r6, r2
 800428a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800428e:	bf22      	ittt	cs
 8004290:	1ab6      	subcs	r6, r6, r2
 8004292:	4675      	movcs	r5, lr
 8004294:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8004298:	ea55 0e06 	orrs.w	lr, r5, r6
 800429c:	d018      	beq.n	80042d0 <__aeabi_ddiv+0x114>
 800429e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80042a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80042a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80042aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80042ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80042b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80042b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80042ba:	d1c0      	bne.n	800423e <__aeabi_ddiv+0x82>
 80042bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80042c0:	d10b      	bne.n	80042da <__aeabi_ddiv+0x11e>
 80042c2:	ea41 0100 	orr.w	r1, r1, r0
 80042c6:	f04f 0000 	mov.w	r0, #0
 80042ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80042ce:	e7b6      	b.n	800423e <__aeabi_ddiv+0x82>
 80042d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80042d4:	bf04      	itt	eq
 80042d6:	4301      	orreq	r1, r0
 80042d8:	2000      	moveq	r0, #0
 80042da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80042de:	bf88      	it	hi
 80042e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80042e4:	f63f aeaf 	bhi.w	8004046 <__aeabi_dmul+0xde>
 80042e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80042ec:	bf04      	itt	eq
 80042ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80042f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80042f6:	f150 0000 	adcs.w	r0, r0, #0
 80042fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80042fe:	bd70      	pop	{r4, r5, r6, pc}
 8004300:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8004304:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8004308:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800430c:	bfc2      	ittt	gt
 800430e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8004312:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8004316:	bd70      	popgt	{r4, r5, r6, pc}
 8004318:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800431c:	f04f 0e00 	mov.w	lr, #0
 8004320:	3c01      	subs	r4, #1
 8004322:	e690      	b.n	8004046 <__aeabi_dmul+0xde>
 8004324:	ea45 0e06 	orr.w	lr, r5, r6
 8004328:	e68d      	b.n	8004046 <__aeabi_dmul+0xde>
 800432a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800432e:	ea94 0f0c 	teq	r4, ip
 8004332:	bf08      	it	eq
 8004334:	ea95 0f0c 	teqeq	r5, ip
 8004338:	f43f af3b 	beq.w	80041b2 <__aeabi_dmul+0x24a>
 800433c:	ea94 0f0c 	teq	r4, ip
 8004340:	d10a      	bne.n	8004358 <__aeabi_ddiv+0x19c>
 8004342:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8004346:	f47f af34 	bne.w	80041b2 <__aeabi_dmul+0x24a>
 800434a:	ea95 0f0c 	teq	r5, ip
 800434e:	f47f af25 	bne.w	800419c <__aeabi_dmul+0x234>
 8004352:	4610      	mov	r0, r2
 8004354:	4619      	mov	r1, r3
 8004356:	e72c      	b.n	80041b2 <__aeabi_dmul+0x24a>
 8004358:	ea95 0f0c 	teq	r5, ip
 800435c:	d106      	bne.n	800436c <__aeabi_ddiv+0x1b0>
 800435e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8004362:	f43f aefd 	beq.w	8004160 <__aeabi_dmul+0x1f8>
 8004366:	4610      	mov	r0, r2
 8004368:	4619      	mov	r1, r3
 800436a:	e722      	b.n	80041b2 <__aeabi_dmul+0x24a>
 800436c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8004370:	bf18      	it	ne
 8004372:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8004376:	f47f aec5 	bne.w	8004104 <__aeabi_dmul+0x19c>
 800437a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800437e:	f47f af0d 	bne.w	800419c <__aeabi_dmul+0x234>
 8004382:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8004386:	f47f aeeb 	bne.w	8004160 <__aeabi_dmul+0x1f8>
 800438a:	e712      	b.n	80041b2 <__aeabi_dmul+0x24a>

0800438c <__gedf2>:
 800438c:	f04f 3cff 	mov.w	ip, #4294967295
 8004390:	e006      	b.n	80043a0 <__cmpdf2+0x4>
 8004392:	bf00      	nop

08004394 <__ledf2>:
 8004394:	f04f 0c01 	mov.w	ip, #1
 8004398:	e002      	b.n	80043a0 <__cmpdf2+0x4>
 800439a:	bf00      	nop

0800439c <__cmpdf2>:
 800439c:	f04f 0c01 	mov.w	ip, #1
 80043a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80043a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80043a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80043ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80043b0:	bf18      	it	ne
 80043b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80043b6:	d01b      	beq.n	80043f0 <__cmpdf2+0x54>
 80043b8:	b001      	add	sp, #4
 80043ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80043be:	bf0c      	ite	eq
 80043c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80043c4:	ea91 0f03 	teqne	r1, r3
 80043c8:	bf02      	ittt	eq
 80043ca:	ea90 0f02 	teqeq	r0, r2
 80043ce:	2000      	moveq	r0, #0
 80043d0:	4770      	bxeq	lr
 80043d2:	f110 0f00 	cmn.w	r0, #0
 80043d6:	ea91 0f03 	teq	r1, r3
 80043da:	bf58      	it	pl
 80043dc:	4299      	cmppl	r1, r3
 80043de:	bf08      	it	eq
 80043e0:	4290      	cmpeq	r0, r2
 80043e2:	bf2c      	ite	cs
 80043e4:	17d8      	asrcs	r0, r3, #31
 80043e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80043ea:	f040 0001 	orr.w	r0, r0, #1
 80043ee:	4770      	bx	lr
 80043f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80043f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80043f8:	d102      	bne.n	8004400 <__cmpdf2+0x64>
 80043fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80043fe:	d107      	bne.n	8004410 <__cmpdf2+0x74>
 8004400:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8004404:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8004408:	d1d6      	bne.n	80043b8 <__cmpdf2+0x1c>
 800440a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800440e:	d0d3      	beq.n	80043b8 <__cmpdf2+0x1c>
 8004410:	f85d 0b04 	ldr.w	r0, [sp], #4
 8004414:	4770      	bx	lr
 8004416:	bf00      	nop

08004418 <__aeabi_cdrcmple>:
 8004418:	4684      	mov	ip, r0
 800441a:	4610      	mov	r0, r2
 800441c:	4662      	mov	r2, ip
 800441e:	468c      	mov	ip, r1
 8004420:	4619      	mov	r1, r3
 8004422:	4663      	mov	r3, ip
 8004424:	e000      	b.n	8004428 <__aeabi_cdcmpeq>
 8004426:	bf00      	nop

08004428 <__aeabi_cdcmpeq>:
 8004428:	b501      	push	{r0, lr}
 800442a:	f7ff ffb7 	bl	800439c <__cmpdf2>
 800442e:	2800      	cmp	r0, #0
 8004430:	bf48      	it	mi
 8004432:	f110 0f00 	cmnmi.w	r0, #0
 8004436:	bd01      	pop	{r0, pc}

08004438 <__aeabi_dcmpeq>:
 8004438:	f84d ed08 	str.w	lr, [sp, #-8]!
 800443c:	f7ff fff4 	bl	8004428 <__aeabi_cdcmpeq>
 8004440:	bf0c      	ite	eq
 8004442:	2001      	moveq	r0, #1
 8004444:	2000      	movne	r0, #0
 8004446:	f85d fb08 	ldr.w	pc, [sp], #8
 800444a:	bf00      	nop

0800444c <__aeabi_dcmplt>:
 800444c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8004450:	f7ff ffea 	bl	8004428 <__aeabi_cdcmpeq>
 8004454:	bf34      	ite	cc
 8004456:	2001      	movcc	r0, #1
 8004458:	2000      	movcs	r0, #0
 800445a:	f85d fb08 	ldr.w	pc, [sp], #8
 800445e:	bf00      	nop

08004460 <__aeabi_dcmple>:
 8004460:	f84d ed08 	str.w	lr, [sp, #-8]!
 8004464:	f7ff ffe0 	bl	8004428 <__aeabi_cdcmpeq>
 8004468:	bf94      	ite	ls
 800446a:	2001      	movls	r0, #1
 800446c:	2000      	movhi	r0, #0
 800446e:	f85d fb08 	ldr.w	pc, [sp], #8
 8004472:	bf00      	nop

08004474 <__aeabi_dcmpge>:
 8004474:	f84d ed08 	str.w	lr, [sp, #-8]!
 8004478:	f7ff ffce 	bl	8004418 <__aeabi_cdrcmple>
 800447c:	bf94      	ite	ls
 800447e:	2001      	movls	r0, #1
 8004480:	2000      	movhi	r0, #0
 8004482:	f85d fb08 	ldr.w	pc, [sp], #8
 8004486:	bf00      	nop

08004488 <__aeabi_dcmpgt>:
 8004488:	f84d ed08 	str.w	lr, [sp, #-8]!
 800448c:	f7ff ffc4 	bl	8004418 <__aeabi_cdrcmple>
 8004490:	bf34      	ite	cc
 8004492:	2001      	movcc	r0, #1
 8004494:	2000      	movcs	r0, #0
 8004496:	f85d fb08 	ldr.w	pc, [sp], #8
 800449a:	bf00      	nop

0800449c <__aeabi_d2uiz>:
 800449c:	004a      	lsls	r2, r1, #1
 800449e:	d211      	bcs.n	80044c4 <__aeabi_d2uiz+0x28>
 80044a0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80044a4:	d211      	bcs.n	80044ca <__aeabi_d2uiz+0x2e>
 80044a6:	d50d      	bpl.n	80044c4 <__aeabi_d2uiz+0x28>
 80044a8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80044ac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80044b0:	d40e      	bmi.n	80044d0 <__aeabi_d2uiz+0x34>
 80044b2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80044b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80044ba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80044be:	fa23 f002 	lsr.w	r0, r3, r2
 80044c2:	4770      	bx	lr
 80044c4:	f04f 0000 	mov.w	r0, #0
 80044c8:	4770      	bx	lr
 80044ca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80044ce:	d102      	bne.n	80044d6 <__aeabi_d2uiz+0x3a>
 80044d0:	f04f 30ff 	mov.w	r0, #4294967295
 80044d4:	4770      	bx	lr
 80044d6:	f04f 0000 	mov.w	r0, #0
 80044da:	4770      	bx	lr

080044dc <__aeabi_d2f>:
 80044dc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80044e0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80044e4:	bf24      	itt	cs
 80044e6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80044ea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80044ee:	d90d      	bls.n	800450c <__aeabi_d2f+0x30>
 80044f0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80044f4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80044f8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80044fc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8004500:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8004504:	bf08      	it	eq
 8004506:	f020 0001 	biceq.w	r0, r0, #1
 800450a:	4770      	bx	lr
 800450c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8004510:	d121      	bne.n	8004556 <__aeabi_d2f+0x7a>
 8004512:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8004516:	bfbc      	itt	lt
 8004518:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800451c:	4770      	bxlt	lr
 800451e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8004522:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8004526:	f1c2 0218 	rsb	r2, r2, #24
 800452a:	f1c2 0c20 	rsb	ip, r2, #32
 800452e:	fa10 f30c 	lsls.w	r3, r0, ip
 8004532:	fa20 f002 	lsr.w	r0, r0, r2
 8004536:	bf18      	it	ne
 8004538:	f040 0001 	orrne.w	r0, r0, #1
 800453c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8004540:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8004544:	fa03 fc0c 	lsl.w	ip, r3, ip
 8004548:	ea40 000c 	orr.w	r0, r0, ip
 800454c:	fa23 f302 	lsr.w	r3, r3, r2
 8004550:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004554:	e7cc      	b.n	80044f0 <__aeabi_d2f+0x14>
 8004556:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800455a:	d107      	bne.n	800456c <__aeabi_d2f+0x90>
 800455c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8004560:	bf1e      	ittt	ne
 8004562:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8004566:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800456a:	4770      	bxne	lr
 800456c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8004570:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8004574:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8004578:	4770      	bx	lr
 800457a:	bf00      	nop

0800457c <__aeabi_uldivmod>:
 800457c:	b953      	cbnz	r3, 8004594 <__aeabi_uldivmod+0x18>
 800457e:	b94a      	cbnz	r2, 8004594 <__aeabi_uldivmod+0x18>
 8004580:	2900      	cmp	r1, #0
 8004582:	bf08      	it	eq
 8004584:	2800      	cmpeq	r0, #0
 8004586:	bf1c      	itt	ne
 8004588:	f04f 31ff 	movne.w	r1, #4294967295
 800458c:	f04f 30ff 	movne.w	r0, #4294967295
 8004590:	f000 b972 	b.w	8004878 <__aeabi_idiv0>
 8004594:	f1ad 0c08 	sub.w	ip, sp, #8
 8004598:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800459c:	f000 f806 	bl	80045ac <__udivmoddi4>
 80045a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80045a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80045a8:	b004      	add	sp, #16
 80045aa:	4770      	bx	lr

080045ac <__udivmoddi4>:
 80045ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045b0:	9e08      	ldr	r6, [sp, #32]
 80045b2:	4604      	mov	r4, r0
 80045b4:	4688      	mov	r8, r1
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d14b      	bne.n	8004652 <__udivmoddi4+0xa6>
 80045ba:	428a      	cmp	r2, r1
 80045bc:	4615      	mov	r5, r2
 80045be:	d967      	bls.n	8004690 <__udivmoddi4+0xe4>
 80045c0:	fab2 f282 	clz	r2, r2
 80045c4:	b14a      	cbz	r2, 80045da <__udivmoddi4+0x2e>
 80045c6:	f1c2 0720 	rsb	r7, r2, #32
 80045ca:	fa01 f302 	lsl.w	r3, r1, r2
 80045ce:	fa20 f707 	lsr.w	r7, r0, r7
 80045d2:	4095      	lsls	r5, r2
 80045d4:	ea47 0803 	orr.w	r8, r7, r3
 80045d8:	4094      	lsls	r4, r2
 80045da:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80045de:	0c23      	lsrs	r3, r4, #16
 80045e0:	fbb8 f7fe 	udiv	r7, r8, lr
 80045e4:	fa1f fc85 	uxth.w	ip, r5
 80045e8:	fb0e 8817 	mls	r8, lr, r7, r8
 80045ec:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80045f0:	fb07 f10c 	mul.w	r1, r7, ip
 80045f4:	4299      	cmp	r1, r3
 80045f6:	d909      	bls.n	800460c <__udivmoddi4+0x60>
 80045f8:	18eb      	adds	r3, r5, r3
 80045fa:	f107 30ff 	add.w	r0, r7, #4294967295
 80045fe:	f080 811b 	bcs.w	8004838 <__udivmoddi4+0x28c>
 8004602:	4299      	cmp	r1, r3
 8004604:	f240 8118 	bls.w	8004838 <__udivmoddi4+0x28c>
 8004608:	3f02      	subs	r7, #2
 800460a:	442b      	add	r3, r5
 800460c:	1a5b      	subs	r3, r3, r1
 800460e:	b2a4      	uxth	r4, r4
 8004610:	fbb3 f0fe 	udiv	r0, r3, lr
 8004614:	fb0e 3310 	mls	r3, lr, r0, r3
 8004618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800461c:	fb00 fc0c 	mul.w	ip, r0, ip
 8004620:	45a4      	cmp	ip, r4
 8004622:	d909      	bls.n	8004638 <__udivmoddi4+0x8c>
 8004624:	192c      	adds	r4, r5, r4
 8004626:	f100 33ff 	add.w	r3, r0, #4294967295
 800462a:	f080 8107 	bcs.w	800483c <__udivmoddi4+0x290>
 800462e:	45a4      	cmp	ip, r4
 8004630:	f240 8104 	bls.w	800483c <__udivmoddi4+0x290>
 8004634:	3802      	subs	r0, #2
 8004636:	442c      	add	r4, r5
 8004638:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800463c:	eba4 040c 	sub.w	r4, r4, ip
 8004640:	2700      	movs	r7, #0
 8004642:	b11e      	cbz	r6, 800464c <__udivmoddi4+0xa0>
 8004644:	40d4      	lsrs	r4, r2
 8004646:	2300      	movs	r3, #0
 8004648:	e9c6 4300 	strd	r4, r3, [r6]
 800464c:	4639      	mov	r1, r7
 800464e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004652:	428b      	cmp	r3, r1
 8004654:	d909      	bls.n	800466a <__udivmoddi4+0xbe>
 8004656:	2e00      	cmp	r6, #0
 8004658:	f000 80eb 	beq.w	8004832 <__udivmoddi4+0x286>
 800465c:	2700      	movs	r7, #0
 800465e:	e9c6 0100 	strd	r0, r1, [r6]
 8004662:	4638      	mov	r0, r7
 8004664:	4639      	mov	r1, r7
 8004666:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800466a:	fab3 f783 	clz	r7, r3
 800466e:	2f00      	cmp	r7, #0
 8004670:	d147      	bne.n	8004702 <__udivmoddi4+0x156>
 8004672:	428b      	cmp	r3, r1
 8004674:	d302      	bcc.n	800467c <__udivmoddi4+0xd0>
 8004676:	4282      	cmp	r2, r0
 8004678:	f200 80fa 	bhi.w	8004870 <__udivmoddi4+0x2c4>
 800467c:	1a84      	subs	r4, r0, r2
 800467e:	eb61 0303 	sbc.w	r3, r1, r3
 8004682:	2001      	movs	r0, #1
 8004684:	4698      	mov	r8, r3
 8004686:	2e00      	cmp	r6, #0
 8004688:	d0e0      	beq.n	800464c <__udivmoddi4+0xa0>
 800468a:	e9c6 4800 	strd	r4, r8, [r6]
 800468e:	e7dd      	b.n	800464c <__udivmoddi4+0xa0>
 8004690:	b902      	cbnz	r2, 8004694 <__udivmoddi4+0xe8>
 8004692:	deff      	udf	#255	; 0xff
 8004694:	fab2 f282 	clz	r2, r2
 8004698:	2a00      	cmp	r2, #0
 800469a:	f040 808f 	bne.w	80047bc <__udivmoddi4+0x210>
 800469e:	1b49      	subs	r1, r1, r5
 80046a0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80046a4:	fa1f f885 	uxth.w	r8, r5
 80046a8:	2701      	movs	r7, #1
 80046aa:	fbb1 fcfe 	udiv	ip, r1, lr
 80046ae:	0c23      	lsrs	r3, r4, #16
 80046b0:	fb0e 111c 	mls	r1, lr, ip, r1
 80046b4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80046b8:	fb08 f10c 	mul.w	r1, r8, ip
 80046bc:	4299      	cmp	r1, r3
 80046be:	d907      	bls.n	80046d0 <__udivmoddi4+0x124>
 80046c0:	18eb      	adds	r3, r5, r3
 80046c2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80046c6:	d202      	bcs.n	80046ce <__udivmoddi4+0x122>
 80046c8:	4299      	cmp	r1, r3
 80046ca:	f200 80cd 	bhi.w	8004868 <__udivmoddi4+0x2bc>
 80046ce:	4684      	mov	ip, r0
 80046d0:	1a59      	subs	r1, r3, r1
 80046d2:	b2a3      	uxth	r3, r4
 80046d4:	fbb1 f0fe 	udiv	r0, r1, lr
 80046d8:	fb0e 1410 	mls	r4, lr, r0, r1
 80046dc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80046e0:	fb08 f800 	mul.w	r8, r8, r0
 80046e4:	45a0      	cmp	r8, r4
 80046e6:	d907      	bls.n	80046f8 <__udivmoddi4+0x14c>
 80046e8:	192c      	adds	r4, r5, r4
 80046ea:	f100 33ff 	add.w	r3, r0, #4294967295
 80046ee:	d202      	bcs.n	80046f6 <__udivmoddi4+0x14a>
 80046f0:	45a0      	cmp	r8, r4
 80046f2:	f200 80b6 	bhi.w	8004862 <__udivmoddi4+0x2b6>
 80046f6:	4618      	mov	r0, r3
 80046f8:	eba4 0408 	sub.w	r4, r4, r8
 80046fc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8004700:	e79f      	b.n	8004642 <__udivmoddi4+0x96>
 8004702:	f1c7 0c20 	rsb	ip, r7, #32
 8004706:	40bb      	lsls	r3, r7
 8004708:	fa22 fe0c 	lsr.w	lr, r2, ip
 800470c:	ea4e 0e03 	orr.w	lr, lr, r3
 8004710:	fa01 f407 	lsl.w	r4, r1, r7
 8004714:	fa20 f50c 	lsr.w	r5, r0, ip
 8004718:	fa21 f30c 	lsr.w	r3, r1, ip
 800471c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8004720:	4325      	orrs	r5, r4
 8004722:	fbb3 f9f8 	udiv	r9, r3, r8
 8004726:	0c2c      	lsrs	r4, r5, #16
 8004728:	fb08 3319 	mls	r3, r8, r9, r3
 800472c:	fa1f fa8e 	uxth.w	sl, lr
 8004730:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8004734:	fb09 f40a 	mul.w	r4, r9, sl
 8004738:	429c      	cmp	r4, r3
 800473a:	fa02 f207 	lsl.w	r2, r2, r7
 800473e:	fa00 f107 	lsl.w	r1, r0, r7
 8004742:	d90b      	bls.n	800475c <__udivmoddi4+0x1b0>
 8004744:	eb1e 0303 	adds.w	r3, lr, r3
 8004748:	f109 30ff 	add.w	r0, r9, #4294967295
 800474c:	f080 8087 	bcs.w	800485e <__udivmoddi4+0x2b2>
 8004750:	429c      	cmp	r4, r3
 8004752:	f240 8084 	bls.w	800485e <__udivmoddi4+0x2b2>
 8004756:	f1a9 0902 	sub.w	r9, r9, #2
 800475a:	4473      	add	r3, lr
 800475c:	1b1b      	subs	r3, r3, r4
 800475e:	b2ad      	uxth	r5, r5
 8004760:	fbb3 f0f8 	udiv	r0, r3, r8
 8004764:	fb08 3310 	mls	r3, r8, r0, r3
 8004768:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 800476c:	fb00 fa0a 	mul.w	sl, r0, sl
 8004770:	45a2      	cmp	sl, r4
 8004772:	d908      	bls.n	8004786 <__udivmoddi4+0x1da>
 8004774:	eb1e 0404 	adds.w	r4, lr, r4
 8004778:	f100 33ff 	add.w	r3, r0, #4294967295
 800477c:	d26b      	bcs.n	8004856 <__udivmoddi4+0x2aa>
 800477e:	45a2      	cmp	sl, r4
 8004780:	d969      	bls.n	8004856 <__udivmoddi4+0x2aa>
 8004782:	3802      	subs	r0, #2
 8004784:	4474      	add	r4, lr
 8004786:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800478a:	fba0 8902 	umull	r8, r9, r0, r2
 800478e:	eba4 040a 	sub.w	r4, r4, sl
 8004792:	454c      	cmp	r4, r9
 8004794:	46c2      	mov	sl, r8
 8004796:	464b      	mov	r3, r9
 8004798:	d354      	bcc.n	8004844 <__udivmoddi4+0x298>
 800479a:	d051      	beq.n	8004840 <__udivmoddi4+0x294>
 800479c:	2e00      	cmp	r6, #0
 800479e:	d069      	beq.n	8004874 <__udivmoddi4+0x2c8>
 80047a0:	ebb1 050a 	subs.w	r5, r1, sl
 80047a4:	eb64 0403 	sbc.w	r4, r4, r3
 80047a8:	fa04 fc0c 	lsl.w	ip, r4, ip
 80047ac:	40fd      	lsrs	r5, r7
 80047ae:	40fc      	lsrs	r4, r7
 80047b0:	ea4c 0505 	orr.w	r5, ip, r5
 80047b4:	e9c6 5400 	strd	r5, r4, [r6]
 80047b8:	2700      	movs	r7, #0
 80047ba:	e747      	b.n	800464c <__udivmoddi4+0xa0>
 80047bc:	f1c2 0320 	rsb	r3, r2, #32
 80047c0:	fa20 f703 	lsr.w	r7, r0, r3
 80047c4:	4095      	lsls	r5, r2
 80047c6:	fa01 f002 	lsl.w	r0, r1, r2
 80047ca:	fa21 f303 	lsr.w	r3, r1, r3
 80047ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80047d2:	4338      	orrs	r0, r7
 80047d4:	0c01      	lsrs	r1, r0, #16
 80047d6:	fbb3 f7fe 	udiv	r7, r3, lr
 80047da:	fa1f f885 	uxth.w	r8, r5
 80047de:	fb0e 3317 	mls	r3, lr, r7, r3
 80047e2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80047e6:	fb07 f308 	mul.w	r3, r7, r8
 80047ea:	428b      	cmp	r3, r1
 80047ec:	fa04 f402 	lsl.w	r4, r4, r2
 80047f0:	d907      	bls.n	8004802 <__udivmoddi4+0x256>
 80047f2:	1869      	adds	r1, r5, r1
 80047f4:	f107 3cff 	add.w	ip, r7, #4294967295
 80047f8:	d22f      	bcs.n	800485a <__udivmoddi4+0x2ae>
 80047fa:	428b      	cmp	r3, r1
 80047fc:	d92d      	bls.n	800485a <__udivmoddi4+0x2ae>
 80047fe:	3f02      	subs	r7, #2
 8004800:	4429      	add	r1, r5
 8004802:	1acb      	subs	r3, r1, r3
 8004804:	b281      	uxth	r1, r0
 8004806:	fbb3 f0fe 	udiv	r0, r3, lr
 800480a:	fb0e 3310 	mls	r3, lr, r0, r3
 800480e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8004812:	fb00 f308 	mul.w	r3, r0, r8
 8004816:	428b      	cmp	r3, r1
 8004818:	d907      	bls.n	800482a <__udivmoddi4+0x27e>
 800481a:	1869      	adds	r1, r5, r1
 800481c:	f100 3cff 	add.w	ip, r0, #4294967295
 8004820:	d217      	bcs.n	8004852 <__udivmoddi4+0x2a6>
 8004822:	428b      	cmp	r3, r1
 8004824:	d915      	bls.n	8004852 <__udivmoddi4+0x2a6>
 8004826:	3802      	subs	r0, #2
 8004828:	4429      	add	r1, r5
 800482a:	1ac9      	subs	r1, r1, r3
 800482c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8004830:	e73b      	b.n	80046aa <__udivmoddi4+0xfe>
 8004832:	4637      	mov	r7, r6
 8004834:	4630      	mov	r0, r6
 8004836:	e709      	b.n	800464c <__udivmoddi4+0xa0>
 8004838:	4607      	mov	r7, r0
 800483a:	e6e7      	b.n	800460c <__udivmoddi4+0x60>
 800483c:	4618      	mov	r0, r3
 800483e:	e6fb      	b.n	8004638 <__udivmoddi4+0x8c>
 8004840:	4541      	cmp	r1, r8
 8004842:	d2ab      	bcs.n	800479c <__udivmoddi4+0x1f0>
 8004844:	ebb8 0a02 	subs.w	sl, r8, r2
 8004848:	eb69 020e 	sbc.w	r2, r9, lr
 800484c:	3801      	subs	r0, #1
 800484e:	4613      	mov	r3, r2
 8004850:	e7a4      	b.n	800479c <__udivmoddi4+0x1f0>
 8004852:	4660      	mov	r0, ip
 8004854:	e7e9      	b.n	800482a <__udivmoddi4+0x27e>
 8004856:	4618      	mov	r0, r3
 8004858:	e795      	b.n	8004786 <__udivmoddi4+0x1da>
 800485a:	4667      	mov	r7, ip
 800485c:	e7d1      	b.n	8004802 <__udivmoddi4+0x256>
 800485e:	4681      	mov	r9, r0
 8004860:	e77c      	b.n	800475c <__udivmoddi4+0x1b0>
 8004862:	3802      	subs	r0, #2
 8004864:	442c      	add	r4, r5
 8004866:	e747      	b.n	80046f8 <__udivmoddi4+0x14c>
 8004868:	f1ac 0c02 	sub.w	ip, ip, #2
 800486c:	442b      	add	r3, r5
 800486e:	e72f      	b.n	80046d0 <__udivmoddi4+0x124>
 8004870:	4638      	mov	r0, r7
 8004872:	e708      	b.n	8004686 <__udivmoddi4+0xda>
 8004874:	4637      	mov	r7, r6
 8004876:	e6e9      	b.n	800464c <__udivmoddi4+0xa0>

08004878 <__aeabi_idiv0>:
 8004878:	4770      	bx	lr
 800487a:	bf00      	nop

0800487c <arm_dot_prod_f32>:
void arm_dot_prod_f32(
  float32_t * pSrcA,
  float32_t * pSrcB,
  uint32_t blockSize,
  float32_t * result)
{
 800487c:	b480      	push	{r7}
 800487e:	b087      	sub	sp, #28
 8004880:	af00      	add	r7, sp, #0
 8004882:	60f8      	str	r0, [r7, #12]
 8004884:	60b9      	str	r1, [r7, #8]
 8004886:	607a      	str	r2, [r7, #4]
 8004888:	603b      	str	r3, [r7, #0]
  float32_t sum = 0.0f;                          /* Temporary result storage */
 800488a:	f04f 0300 	mov.w	r3, #0
 800488e:	617b      	str	r3, [r7, #20]

#if defined (ARM_MATH_DSP)

/* Run the below code for Cortex-M4 and Cortex-M3 */
  /*loop Unrolling */
  blkCnt = blockSize >> 2U;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	089b      	lsrs	r3, r3, #2
 8004894:	613b      	str	r3, [r7, #16]

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
   ** a second loop below computes the remaining 1 to 3 samples. */
  while (blkCnt > 0U)
 8004896:	e04a      	b.n	800492e <arm_dot_prod_f32+0xb2>
  {
    /* C = A[0]* B[0] + A[1]* B[1] + A[2]* B[2] + .....+ A[blockSize-1]* B[blockSize-1] */
    /* Calculate dot product and then store the result in a temporary buffer */
    sum += (*pSrcA++) * (*pSrcB++);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	1d1a      	adds	r2, r3, #4
 800489c:	60fa      	str	r2, [r7, #12]
 800489e:	ed93 7a00 	vldr	s14, [r3]
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	1d1a      	adds	r2, r3, #4
 80048a6:	60ba      	str	r2, [r7, #8]
 80048a8:	edd3 7a00 	vldr	s15, [r3]
 80048ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048b0:	ed97 7a05 	vldr	s14, [r7, #20]
 80048b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80048b8:	edc7 7a05 	vstr	s15, [r7, #20]
    sum += (*pSrcA++) * (*pSrcB++);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	1d1a      	adds	r2, r3, #4
 80048c0:	60fa      	str	r2, [r7, #12]
 80048c2:	ed93 7a00 	vldr	s14, [r3]
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	1d1a      	adds	r2, r3, #4
 80048ca:	60ba      	str	r2, [r7, #8]
 80048cc:	edd3 7a00 	vldr	s15, [r3]
 80048d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048d4:	ed97 7a05 	vldr	s14, [r7, #20]
 80048d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80048dc:	edc7 7a05 	vstr	s15, [r7, #20]
    sum += (*pSrcA++) * (*pSrcB++);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	1d1a      	adds	r2, r3, #4
 80048e4:	60fa      	str	r2, [r7, #12]
 80048e6:	ed93 7a00 	vldr	s14, [r3]
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	1d1a      	adds	r2, r3, #4
 80048ee:	60ba      	str	r2, [r7, #8]
 80048f0:	edd3 7a00 	vldr	s15, [r3]
 80048f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048f8:	ed97 7a05 	vldr	s14, [r7, #20]
 80048fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004900:	edc7 7a05 	vstr	s15, [r7, #20]
    sum += (*pSrcA++) * (*pSrcB++);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	1d1a      	adds	r2, r3, #4
 8004908:	60fa      	str	r2, [r7, #12]
 800490a:	ed93 7a00 	vldr	s14, [r3]
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	1d1a      	adds	r2, r3, #4
 8004912:	60ba      	str	r2, [r7, #8]
 8004914:	edd3 7a00 	vldr	s15, [r3]
 8004918:	ee67 7a27 	vmul.f32	s15, s14, s15
 800491c:	ed97 7a05 	vldr	s14, [r7, #20]
 8004920:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004924:	edc7 7a05 	vstr	s15, [r7, #20]

    /* Decrement the loop counter */
    blkCnt--;
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	3b01      	subs	r3, #1
 800492c:	613b      	str	r3, [r7, #16]
  while (blkCnt > 0U)
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d1b1      	bne.n	8004898 <arm_dot_prod_f32+0x1c>
  }

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.
   ** No loop unrolling is used. */
  blkCnt = blockSize % 0x4U;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	f003 0303 	and.w	r3, r3, #3
 800493a:	613b      	str	r3, [r7, #16]
  blkCnt = blockSize;

#endif /* #if defined (ARM_MATH_DSP) */


  while (blkCnt > 0U)
 800493c:	e014      	b.n	8004968 <arm_dot_prod_f32+0xec>
  {
    /* C = A[0]* B[0] + A[1]* B[1] + A[2]* B[2] + .....+ A[blockSize-1]* B[blockSize-1] */
    /* Calculate dot product and then store the result in a temporary buffer. */
    sum += (*pSrcA++) * (*pSrcB++);
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	1d1a      	adds	r2, r3, #4
 8004942:	60fa      	str	r2, [r7, #12]
 8004944:	ed93 7a00 	vldr	s14, [r3]
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	1d1a      	adds	r2, r3, #4
 800494c:	60ba      	str	r2, [r7, #8]
 800494e:	edd3 7a00 	vldr	s15, [r3]
 8004952:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004956:	ed97 7a05 	vldr	s14, [r7, #20]
 800495a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800495e:	edc7 7a05 	vstr	s15, [r7, #20]

    /* Decrement the loop counter */
    blkCnt--;
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	3b01      	subs	r3, #1
 8004966:	613b      	str	r3, [r7, #16]
  while (blkCnt > 0U)
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d1e7      	bne.n	800493e <arm_dot_prod_f32+0xc2>
  }
  /* Store the result back in the destination buffer */
  *result = sum;
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	697a      	ldr	r2, [r7, #20]
 8004972:	601a      	str	r2, [r3, #0]
}
 8004974:	bf00      	nop
 8004976:	371c      	adds	r7, #28
 8004978:	46bd      	mov	sp, r7
 800497a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497e:	4770      	bx	lr

08004980 <arm_mat_init_f32>:
void arm_mat_init_f32(
  arm_matrix_instance_f32 * S,
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData)
{
 8004980:	b480      	push	{r7}
 8004982:	b085      	sub	sp, #20
 8004984:	af00      	add	r7, sp, #0
 8004986:	60f8      	str	r0, [r7, #12]
 8004988:	607b      	str	r3, [r7, #4]
 800498a:	460b      	mov	r3, r1
 800498c:	817b      	strh	r3, [r7, #10]
 800498e:	4613      	mov	r3, r2
 8004990:	813b      	strh	r3, [r7, #8]
  /* Assign Number of Rows */
  S->numRows = nRows;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	897a      	ldrh	r2, [r7, #10]
 8004996:	801a      	strh	r2, [r3, #0]

  /* Assign Number of Columns */
  S->numCols = nColumns;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	893a      	ldrh	r2, [r7, #8]
 800499c:	805a      	strh	r2, [r3, #2]

  /* Assign Data pointer */
  S->pData = pData;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	687a      	ldr	r2, [r7, #4]
 80049a2:	605a      	str	r2, [r3, #4]
}
 80049a4:	bf00      	nop
 80049a6:	3714      	adds	r7, #20
 80049a8:	46bd      	mov	sp, r7
 80049aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ae:	4770      	bx	lr

080049b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80049b4:	4b0e      	ldr	r3, [pc, #56]	; (80049f0 <HAL_Init+0x40>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a0d      	ldr	r2, [pc, #52]	; (80049f0 <HAL_Init+0x40>)
 80049ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80049be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80049c0:	4b0b      	ldr	r3, [pc, #44]	; (80049f0 <HAL_Init+0x40>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a0a      	ldr	r2, [pc, #40]	; (80049f0 <HAL_Init+0x40>)
 80049c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80049ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80049cc:	4b08      	ldr	r3, [pc, #32]	; (80049f0 <HAL_Init+0x40>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a07      	ldr	r2, [pc, #28]	; (80049f0 <HAL_Init+0x40>)
 80049d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80049d8:	2003      	movs	r0, #3
 80049da:	f000 f92f 	bl	8004c3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80049de:	2000      	movs	r0, #0
 80049e0:	f000 f808 	bl	80049f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80049e4:	f004 fba2 	bl	800912c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80049e8:	2300      	movs	r3, #0
}
 80049ea:	4618      	mov	r0, r3
 80049ec:	bd80      	pop	{r7, pc}
 80049ee:	bf00      	nop
 80049f0:	40023c00 	.word	0x40023c00

080049f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b082      	sub	sp, #8
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80049fc:	4b12      	ldr	r3, [pc, #72]	; (8004a48 <HAL_InitTick+0x54>)
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	4b12      	ldr	r3, [pc, #72]	; (8004a4c <HAL_InitTick+0x58>)
 8004a02:	781b      	ldrb	r3, [r3, #0]
 8004a04:	4619      	mov	r1, r3
 8004a06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004a0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8004a0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a12:	4618      	mov	r0, r3
 8004a14:	f000 f939 	bl	8004c8a <HAL_SYSTICK_Config>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d001      	beq.n	8004a22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e00e      	b.n	8004a40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2b0f      	cmp	r3, #15
 8004a26:	d80a      	bhi.n	8004a3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004a28:	2200      	movs	r2, #0
 8004a2a:	6879      	ldr	r1, [r7, #4]
 8004a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8004a30:	f000 f90f 	bl	8004c52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004a34:	4a06      	ldr	r2, [pc, #24]	; (8004a50 <HAL_InitTick+0x5c>)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	e000      	b.n	8004a40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	3708      	adds	r7, #8
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}
 8004a48:	20000478 	.word	0x20000478
 8004a4c:	20000004 	.word	0x20000004
 8004a50:	20000000 	.word	0x20000000

08004a54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004a54:	b480      	push	{r7}
 8004a56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004a58:	4b06      	ldr	r3, [pc, #24]	; (8004a74 <HAL_IncTick+0x20>)
 8004a5a:	781b      	ldrb	r3, [r3, #0]
 8004a5c:	461a      	mov	r2, r3
 8004a5e:	4b06      	ldr	r3, [pc, #24]	; (8004a78 <HAL_IncTick+0x24>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4413      	add	r3, r2
 8004a64:	4a04      	ldr	r2, [pc, #16]	; (8004a78 <HAL_IncTick+0x24>)
 8004a66:	6013      	str	r3, [r2, #0]
}
 8004a68:	bf00      	nop
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a70:	4770      	bx	lr
 8004a72:	bf00      	nop
 8004a74:	20000004 	.word	0x20000004
 8004a78:	20001a00 	.word	0x20001a00

08004a7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	af00      	add	r7, sp, #0
  return uwTick;
 8004a80:	4b03      	ldr	r3, [pc, #12]	; (8004a90 <HAL_GetTick+0x14>)
 8004a82:	681b      	ldr	r3, [r3, #0]
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	46bd      	mov	sp, r7
 8004a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8c:	4770      	bx	lr
 8004a8e:	bf00      	nop
 8004a90:	20001a00 	.word	0x20001a00

08004a94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b084      	sub	sp, #16
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004a9c:	f7ff ffee 	bl	8004a7c <HAL_GetTick>
 8004aa0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aac:	d005      	beq.n	8004aba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004aae:	4b09      	ldr	r3, [pc, #36]	; (8004ad4 <HAL_Delay+0x40>)
 8004ab0:	781b      	ldrb	r3, [r3, #0]
 8004ab2:	461a      	mov	r2, r3
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	4413      	add	r3, r2
 8004ab8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004aba:	bf00      	nop
 8004abc:	f7ff ffde 	bl	8004a7c <HAL_GetTick>
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	1ad3      	subs	r3, r2, r3
 8004ac6:	68fa      	ldr	r2, [r7, #12]
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	d8f7      	bhi.n	8004abc <HAL_Delay+0x28>
  {
  }
}
 8004acc:	bf00      	nop
 8004ace:	3710      	adds	r7, #16
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}
 8004ad4:	20000004 	.word	0x20000004

08004ad8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b085      	sub	sp, #20
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	f003 0307 	and.w	r3, r3, #7
 8004ae6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004ae8:	4b0c      	ldr	r3, [pc, #48]	; (8004b1c <__NVIC_SetPriorityGrouping+0x44>)
 8004aea:	68db      	ldr	r3, [r3, #12]
 8004aec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004aee:	68ba      	ldr	r2, [r7, #8]
 8004af0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004af4:	4013      	ands	r3, r2
 8004af6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004b00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004b04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004b0a:	4a04      	ldr	r2, [pc, #16]	; (8004b1c <__NVIC_SetPriorityGrouping+0x44>)
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	60d3      	str	r3, [r2, #12]
}
 8004b10:	bf00      	nop
 8004b12:	3714      	adds	r7, #20
 8004b14:	46bd      	mov	sp, r7
 8004b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1a:	4770      	bx	lr
 8004b1c:	e000ed00 	.word	0xe000ed00

08004b20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004b20:	b480      	push	{r7}
 8004b22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004b24:	4b04      	ldr	r3, [pc, #16]	; (8004b38 <__NVIC_GetPriorityGrouping+0x18>)
 8004b26:	68db      	ldr	r3, [r3, #12]
 8004b28:	0a1b      	lsrs	r3, r3, #8
 8004b2a:	f003 0307 	and.w	r3, r3, #7
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	46bd      	mov	sp, r7
 8004b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b36:	4770      	bx	lr
 8004b38:	e000ed00 	.word	0xe000ed00

08004b3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b083      	sub	sp, #12
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	4603      	mov	r3, r0
 8004b44:	6039      	str	r1, [r7, #0]
 8004b46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	db0a      	blt.n	8004b66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	b2da      	uxtb	r2, r3
 8004b54:	490c      	ldr	r1, [pc, #48]	; (8004b88 <__NVIC_SetPriority+0x4c>)
 8004b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b5a:	0112      	lsls	r2, r2, #4
 8004b5c:	b2d2      	uxtb	r2, r2
 8004b5e:	440b      	add	r3, r1
 8004b60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004b64:	e00a      	b.n	8004b7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	b2da      	uxtb	r2, r3
 8004b6a:	4908      	ldr	r1, [pc, #32]	; (8004b8c <__NVIC_SetPriority+0x50>)
 8004b6c:	79fb      	ldrb	r3, [r7, #7]
 8004b6e:	f003 030f 	and.w	r3, r3, #15
 8004b72:	3b04      	subs	r3, #4
 8004b74:	0112      	lsls	r2, r2, #4
 8004b76:	b2d2      	uxtb	r2, r2
 8004b78:	440b      	add	r3, r1
 8004b7a:	761a      	strb	r2, [r3, #24]
}
 8004b7c:	bf00      	nop
 8004b7e:	370c      	adds	r7, #12
 8004b80:	46bd      	mov	sp, r7
 8004b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b86:	4770      	bx	lr
 8004b88:	e000e100 	.word	0xe000e100
 8004b8c:	e000ed00 	.word	0xe000ed00

08004b90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b089      	sub	sp, #36	; 0x24
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	60f8      	str	r0, [r7, #12]
 8004b98:	60b9      	str	r1, [r7, #8]
 8004b9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	f003 0307 	and.w	r3, r3, #7
 8004ba2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004ba4:	69fb      	ldr	r3, [r7, #28]
 8004ba6:	f1c3 0307 	rsb	r3, r3, #7
 8004baa:	2b04      	cmp	r3, #4
 8004bac:	bf28      	it	cs
 8004bae:	2304      	movcs	r3, #4
 8004bb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004bb2:	69fb      	ldr	r3, [r7, #28]
 8004bb4:	3304      	adds	r3, #4
 8004bb6:	2b06      	cmp	r3, #6
 8004bb8:	d902      	bls.n	8004bc0 <NVIC_EncodePriority+0x30>
 8004bba:	69fb      	ldr	r3, [r7, #28]
 8004bbc:	3b03      	subs	r3, #3
 8004bbe:	e000      	b.n	8004bc2 <NVIC_EncodePriority+0x32>
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004bc4:	f04f 32ff 	mov.w	r2, #4294967295
 8004bc8:	69bb      	ldr	r3, [r7, #24]
 8004bca:	fa02 f303 	lsl.w	r3, r2, r3
 8004bce:	43da      	mvns	r2, r3
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	401a      	ands	r2, r3
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004bd8:	f04f 31ff 	mov.w	r1, #4294967295
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	fa01 f303 	lsl.w	r3, r1, r3
 8004be2:	43d9      	mvns	r1, r3
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004be8:	4313      	orrs	r3, r2
         );
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	3724      	adds	r7, #36	; 0x24
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf4:	4770      	bx	lr
	...

08004bf8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b082      	sub	sp, #8
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	3b01      	subs	r3, #1
 8004c04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004c08:	d301      	bcc.n	8004c0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e00f      	b.n	8004c2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004c0e:	4a0a      	ldr	r2, [pc, #40]	; (8004c38 <SysTick_Config+0x40>)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	3b01      	subs	r3, #1
 8004c14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004c16:	210f      	movs	r1, #15
 8004c18:	f04f 30ff 	mov.w	r0, #4294967295
 8004c1c:	f7ff ff8e 	bl	8004b3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004c20:	4b05      	ldr	r3, [pc, #20]	; (8004c38 <SysTick_Config+0x40>)
 8004c22:	2200      	movs	r2, #0
 8004c24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004c26:	4b04      	ldr	r3, [pc, #16]	; (8004c38 <SysTick_Config+0x40>)
 8004c28:	2207      	movs	r2, #7
 8004c2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004c2c:	2300      	movs	r3, #0
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	3708      	adds	r7, #8
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}
 8004c36:	bf00      	nop
 8004c38:	e000e010 	.word	0xe000e010

08004c3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b082      	sub	sp, #8
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004c44:	6878      	ldr	r0, [r7, #4]
 8004c46:	f7ff ff47 	bl	8004ad8 <__NVIC_SetPriorityGrouping>
}
 8004c4a:	bf00      	nop
 8004c4c:	3708      	adds	r7, #8
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}

08004c52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004c52:	b580      	push	{r7, lr}
 8004c54:	b086      	sub	sp, #24
 8004c56:	af00      	add	r7, sp, #0
 8004c58:	4603      	mov	r3, r0
 8004c5a:	60b9      	str	r1, [r7, #8]
 8004c5c:	607a      	str	r2, [r7, #4]
 8004c5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004c60:	2300      	movs	r3, #0
 8004c62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004c64:	f7ff ff5c 	bl	8004b20 <__NVIC_GetPriorityGrouping>
 8004c68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004c6a:	687a      	ldr	r2, [r7, #4]
 8004c6c:	68b9      	ldr	r1, [r7, #8]
 8004c6e:	6978      	ldr	r0, [r7, #20]
 8004c70:	f7ff ff8e 	bl	8004b90 <NVIC_EncodePriority>
 8004c74:	4602      	mov	r2, r0
 8004c76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c7a:	4611      	mov	r1, r2
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	f7ff ff5d 	bl	8004b3c <__NVIC_SetPriority>
}
 8004c82:	bf00      	nop
 8004c84:	3718      	adds	r7, #24
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}

08004c8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004c8a:	b580      	push	{r7, lr}
 8004c8c:	b082      	sub	sp, #8
 8004c8e:	af00      	add	r7, sp, #0
 8004c90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f7ff ffb0 	bl	8004bf8 <SysTick_Config>
 8004c98:	4603      	mov	r3, r0
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3708      	adds	r7, #8
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}
	...

08004ca4 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b083      	sub	sp, #12
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2b04      	cmp	r3, #4
 8004cb0:	d106      	bne.n	8004cc0 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8004cb2:	4b09      	ldr	r3, [pc, #36]	; (8004cd8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a08      	ldr	r2, [pc, #32]	; (8004cd8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8004cb8:	f043 0304 	orr.w	r3, r3, #4
 8004cbc:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8004cbe:	e005      	b.n	8004ccc <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8004cc0:	4b05      	ldr	r3, [pc, #20]	; (8004cd8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a04      	ldr	r2, [pc, #16]	; (8004cd8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8004cc6:	f023 0304 	bic.w	r3, r3, #4
 8004cca:	6013      	str	r3, [r2, #0]
}
 8004ccc:	bf00      	nop
 8004cce:	370c      	adds	r7, #12
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd6:	4770      	bx	lr
 8004cd8:	e000e010 	.word	0xe000e010

08004cdc <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b082      	sub	sp, #8
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d101      	bne.n	8004cee <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	e011      	b.n	8004d12 <HAL_CRC_Init+0x36>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	795b      	ldrb	r3, [r3, #5]
 8004cf2:	b2db      	uxtb	r3, r3
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d105      	bne.n	8004d04 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f004 fa3c 	bl	800917c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2202      	movs	r2, #2
 8004d08:	715a      	strb	r2, [r3, #5]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2201      	movs	r2, #1
 8004d0e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004d10:	2300      	movs	r3, #0
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	3708      	adds	r7, #8
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}

08004d1a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004d1a:	b480      	push	{r7}
 8004d1c:	b083      	sub	sp, #12
 8004d1e:	af00      	add	r7, sp, #0
 8004d20:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004d28:	b2db      	uxtb	r3, r3
 8004d2a:	2b02      	cmp	r3, #2
 8004d2c:	d004      	beq.n	8004d38 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2280      	movs	r2, #128	; 0x80
 8004d32:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004d34:	2301      	movs	r3, #1
 8004d36:	e00c      	b.n	8004d52 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2205      	movs	r2, #5
 8004d3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f022 0201 	bic.w	r2, r2, #1
 8004d4e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004d50:	2300      	movs	r3, #0
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	370c      	adds	r7, #12
 8004d56:	46bd      	mov	sp, r7
 8004d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5c:	4770      	bx	lr
	...

08004d60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d60:	b480      	push	{r7}
 8004d62:	b089      	sub	sp, #36	; 0x24
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
 8004d68:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004d72:	2300      	movs	r3, #0
 8004d74:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004d76:	2300      	movs	r3, #0
 8004d78:	61fb      	str	r3, [r7, #28]
 8004d7a:	e16b      	b.n	8005054 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004d7c:	2201      	movs	r2, #1
 8004d7e:	69fb      	ldr	r3, [r7, #28]
 8004d80:	fa02 f303 	lsl.w	r3, r2, r3
 8004d84:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	697a      	ldr	r2, [r7, #20]
 8004d8c:	4013      	ands	r3, r2
 8004d8e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004d90:	693a      	ldr	r2, [r7, #16]
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	429a      	cmp	r2, r3
 8004d96:	f040 815a 	bne.w	800504e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	2b02      	cmp	r3, #2
 8004da0:	d003      	beq.n	8004daa <HAL_GPIO_Init+0x4a>
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	2b12      	cmp	r3, #18
 8004da8:	d123      	bne.n	8004df2 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004daa:	69fb      	ldr	r3, [r7, #28]
 8004dac:	08da      	lsrs	r2, r3, #3
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	3208      	adds	r2, #8
 8004db2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004db6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004db8:	69fb      	ldr	r3, [r7, #28]
 8004dba:	f003 0307 	and.w	r3, r3, #7
 8004dbe:	009b      	lsls	r3, r3, #2
 8004dc0:	220f      	movs	r2, #15
 8004dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc6:	43db      	mvns	r3, r3
 8004dc8:	69ba      	ldr	r2, [r7, #24]
 8004dca:	4013      	ands	r3, r2
 8004dcc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	691a      	ldr	r2, [r3, #16]
 8004dd2:	69fb      	ldr	r3, [r7, #28]
 8004dd4:	f003 0307 	and.w	r3, r3, #7
 8004dd8:	009b      	lsls	r3, r3, #2
 8004dda:	fa02 f303 	lsl.w	r3, r2, r3
 8004dde:	69ba      	ldr	r2, [r7, #24]
 8004de0:	4313      	orrs	r3, r2
 8004de2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004de4:	69fb      	ldr	r3, [r7, #28]
 8004de6:	08da      	lsrs	r2, r3, #3
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	3208      	adds	r2, #8
 8004dec:	69b9      	ldr	r1, [r7, #24]
 8004dee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004df8:	69fb      	ldr	r3, [r7, #28]
 8004dfa:	005b      	lsls	r3, r3, #1
 8004dfc:	2203      	movs	r2, #3
 8004dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8004e02:	43db      	mvns	r3, r3
 8004e04:	69ba      	ldr	r2, [r7, #24]
 8004e06:	4013      	ands	r3, r2
 8004e08:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	f003 0203 	and.w	r2, r3, #3
 8004e12:	69fb      	ldr	r3, [r7, #28]
 8004e14:	005b      	lsls	r3, r3, #1
 8004e16:	fa02 f303 	lsl.w	r3, r2, r3
 8004e1a:	69ba      	ldr	r2, [r7, #24]
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	69ba      	ldr	r2, [r7, #24]
 8004e24:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	2b01      	cmp	r3, #1
 8004e2c:	d00b      	beq.n	8004e46 <HAL_GPIO_Init+0xe6>
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	2b02      	cmp	r3, #2
 8004e34:	d007      	beq.n	8004e46 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004e3a:	2b11      	cmp	r3, #17
 8004e3c:	d003      	beq.n	8004e46 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	2b12      	cmp	r3, #18
 8004e44:	d130      	bne.n	8004ea8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	689b      	ldr	r3, [r3, #8]
 8004e4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004e4c:	69fb      	ldr	r3, [r7, #28]
 8004e4e:	005b      	lsls	r3, r3, #1
 8004e50:	2203      	movs	r2, #3
 8004e52:	fa02 f303 	lsl.w	r3, r2, r3
 8004e56:	43db      	mvns	r3, r3
 8004e58:	69ba      	ldr	r2, [r7, #24]
 8004e5a:	4013      	ands	r3, r2
 8004e5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	68da      	ldr	r2, [r3, #12]
 8004e62:	69fb      	ldr	r3, [r7, #28]
 8004e64:	005b      	lsls	r3, r3, #1
 8004e66:	fa02 f303 	lsl.w	r3, r2, r3
 8004e6a:	69ba      	ldr	r2, [r7, #24]
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	69ba      	ldr	r2, [r7, #24]
 8004e74:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	69fb      	ldr	r3, [r7, #28]
 8004e80:	fa02 f303 	lsl.w	r3, r2, r3
 8004e84:	43db      	mvns	r3, r3
 8004e86:	69ba      	ldr	r2, [r7, #24]
 8004e88:	4013      	ands	r3, r2
 8004e8a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	091b      	lsrs	r3, r3, #4
 8004e92:	f003 0201 	and.w	r2, r3, #1
 8004e96:	69fb      	ldr	r3, [r7, #28]
 8004e98:	fa02 f303 	lsl.w	r3, r2, r3
 8004e9c:	69ba      	ldr	r2, [r7, #24]
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	69ba      	ldr	r2, [r7, #24]
 8004ea6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	68db      	ldr	r3, [r3, #12]
 8004eac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004eae:	69fb      	ldr	r3, [r7, #28]
 8004eb0:	005b      	lsls	r3, r3, #1
 8004eb2:	2203      	movs	r2, #3
 8004eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8004eb8:	43db      	mvns	r3, r3
 8004eba:	69ba      	ldr	r2, [r7, #24]
 8004ebc:	4013      	ands	r3, r2
 8004ebe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	689a      	ldr	r2, [r3, #8]
 8004ec4:	69fb      	ldr	r3, [r7, #28]
 8004ec6:	005b      	lsls	r3, r3, #1
 8004ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8004ecc:	69ba      	ldr	r2, [r7, #24]
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	69ba      	ldr	r2, [r7, #24]
 8004ed6:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	f000 80b4 	beq.w	800504e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	60fb      	str	r3, [r7, #12]
 8004eea:	4b5f      	ldr	r3, [pc, #380]	; (8005068 <HAL_GPIO_Init+0x308>)
 8004eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eee:	4a5e      	ldr	r2, [pc, #376]	; (8005068 <HAL_GPIO_Init+0x308>)
 8004ef0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004ef4:	6453      	str	r3, [r2, #68]	; 0x44
 8004ef6:	4b5c      	ldr	r3, [pc, #368]	; (8005068 <HAL_GPIO_Init+0x308>)
 8004ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004efa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004efe:	60fb      	str	r3, [r7, #12]
 8004f00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004f02:	4a5a      	ldr	r2, [pc, #360]	; (800506c <HAL_GPIO_Init+0x30c>)
 8004f04:	69fb      	ldr	r3, [r7, #28]
 8004f06:	089b      	lsrs	r3, r3, #2
 8004f08:	3302      	adds	r3, #2
 8004f0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004f10:	69fb      	ldr	r3, [r7, #28]
 8004f12:	f003 0303 	and.w	r3, r3, #3
 8004f16:	009b      	lsls	r3, r3, #2
 8004f18:	220f      	movs	r2, #15
 8004f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f1e:	43db      	mvns	r3, r3
 8004f20:	69ba      	ldr	r2, [r7, #24]
 8004f22:	4013      	ands	r3, r2
 8004f24:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	4a51      	ldr	r2, [pc, #324]	; (8005070 <HAL_GPIO_Init+0x310>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d02b      	beq.n	8004f86 <HAL_GPIO_Init+0x226>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	4a50      	ldr	r2, [pc, #320]	; (8005074 <HAL_GPIO_Init+0x314>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d025      	beq.n	8004f82 <HAL_GPIO_Init+0x222>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	4a4f      	ldr	r2, [pc, #316]	; (8005078 <HAL_GPIO_Init+0x318>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d01f      	beq.n	8004f7e <HAL_GPIO_Init+0x21e>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	4a4e      	ldr	r2, [pc, #312]	; (800507c <HAL_GPIO_Init+0x31c>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d019      	beq.n	8004f7a <HAL_GPIO_Init+0x21a>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	4a4d      	ldr	r2, [pc, #308]	; (8005080 <HAL_GPIO_Init+0x320>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d013      	beq.n	8004f76 <HAL_GPIO_Init+0x216>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	4a4c      	ldr	r2, [pc, #304]	; (8005084 <HAL_GPIO_Init+0x324>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d00d      	beq.n	8004f72 <HAL_GPIO_Init+0x212>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	4a4b      	ldr	r2, [pc, #300]	; (8005088 <HAL_GPIO_Init+0x328>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d007      	beq.n	8004f6e <HAL_GPIO_Init+0x20e>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	4a4a      	ldr	r2, [pc, #296]	; (800508c <HAL_GPIO_Init+0x32c>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d101      	bne.n	8004f6a <HAL_GPIO_Init+0x20a>
 8004f66:	2307      	movs	r3, #7
 8004f68:	e00e      	b.n	8004f88 <HAL_GPIO_Init+0x228>
 8004f6a:	2308      	movs	r3, #8
 8004f6c:	e00c      	b.n	8004f88 <HAL_GPIO_Init+0x228>
 8004f6e:	2306      	movs	r3, #6
 8004f70:	e00a      	b.n	8004f88 <HAL_GPIO_Init+0x228>
 8004f72:	2305      	movs	r3, #5
 8004f74:	e008      	b.n	8004f88 <HAL_GPIO_Init+0x228>
 8004f76:	2304      	movs	r3, #4
 8004f78:	e006      	b.n	8004f88 <HAL_GPIO_Init+0x228>
 8004f7a:	2303      	movs	r3, #3
 8004f7c:	e004      	b.n	8004f88 <HAL_GPIO_Init+0x228>
 8004f7e:	2302      	movs	r3, #2
 8004f80:	e002      	b.n	8004f88 <HAL_GPIO_Init+0x228>
 8004f82:	2301      	movs	r3, #1
 8004f84:	e000      	b.n	8004f88 <HAL_GPIO_Init+0x228>
 8004f86:	2300      	movs	r3, #0
 8004f88:	69fa      	ldr	r2, [r7, #28]
 8004f8a:	f002 0203 	and.w	r2, r2, #3
 8004f8e:	0092      	lsls	r2, r2, #2
 8004f90:	4093      	lsls	r3, r2
 8004f92:	69ba      	ldr	r2, [r7, #24]
 8004f94:	4313      	orrs	r3, r2
 8004f96:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004f98:	4934      	ldr	r1, [pc, #208]	; (800506c <HAL_GPIO_Init+0x30c>)
 8004f9a:	69fb      	ldr	r3, [r7, #28]
 8004f9c:	089b      	lsrs	r3, r3, #2
 8004f9e:	3302      	adds	r3, #2
 8004fa0:	69ba      	ldr	r2, [r7, #24]
 8004fa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004fa6:	4b3a      	ldr	r3, [pc, #232]	; (8005090 <HAL_GPIO_Init+0x330>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	43db      	mvns	r3, r3
 8004fb0:	69ba      	ldr	r2, [r7, #24]
 8004fb2:	4013      	ands	r3, r2
 8004fb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d003      	beq.n	8004fca <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004fc2:	69ba      	ldr	r2, [r7, #24]
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004fca:	4a31      	ldr	r2, [pc, #196]	; (8005090 <HAL_GPIO_Init+0x330>)
 8004fcc:	69bb      	ldr	r3, [r7, #24]
 8004fce:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004fd0:	4b2f      	ldr	r3, [pc, #188]	; (8005090 <HAL_GPIO_Init+0x330>)
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	43db      	mvns	r3, r3
 8004fda:	69ba      	ldr	r2, [r7, #24]
 8004fdc:	4013      	ands	r3, r2
 8004fde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d003      	beq.n	8004ff4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004fec:	69ba      	ldr	r2, [r7, #24]
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004ff4:	4a26      	ldr	r2, [pc, #152]	; (8005090 <HAL_GPIO_Init+0x330>)
 8004ff6:	69bb      	ldr	r3, [r7, #24]
 8004ff8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004ffa:	4b25      	ldr	r3, [pc, #148]	; (8005090 <HAL_GPIO_Init+0x330>)
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	43db      	mvns	r3, r3
 8005004:	69ba      	ldr	r2, [r7, #24]
 8005006:	4013      	ands	r3, r2
 8005008:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005012:	2b00      	cmp	r3, #0
 8005014:	d003      	beq.n	800501e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005016:	69ba      	ldr	r2, [r7, #24]
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	4313      	orrs	r3, r2
 800501c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800501e:	4a1c      	ldr	r2, [pc, #112]	; (8005090 <HAL_GPIO_Init+0x330>)
 8005020:	69bb      	ldr	r3, [r7, #24]
 8005022:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005024:	4b1a      	ldr	r3, [pc, #104]	; (8005090 <HAL_GPIO_Init+0x330>)
 8005026:	68db      	ldr	r3, [r3, #12]
 8005028:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	43db      	mvns	r3, r3
 800502e:	69ba      	ldr	r2, [r7, #24]
 8005030:	4013      	ands	r3, r2
 8005032:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800503c:	2b00      	cmp	r3, #0
 800503e:	d003      	beq.n	8005048 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005040:	69ba      	ldr	r2, [r7, #24]
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	4313      	orrs	r3, r2
 8005046:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005048:	4a11      	ldr	r2, [pc, #68]	; (8005090 <HAL_GPIO_Init+0x330>)
 800504a:	69bb      	ldr	r3, [r7, #24]
 800504c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800504e:	69fb      	ldr	r3, [r7, #28]
 8005050:	3301      	adds	r3, #1
 8005052:	61fb      	str	r3, [r7, #28]
 8005054:	69fb      	ldr	r3, [r7, #28]
 8005056:	2b0f      	cmp	r3, #15
 8005058:	f67f ae90 	bls.w	8004d7c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800505c:	bf00      	nop
 800505e:	3724      	adds	r7, #36	; 0x24
 8005060:	46bd      	mov	sp, r7
 8005062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005066:	4770      	bx	lr
 8005068:	40023800 	.word	0x40023800
 800506c:	40013800 	.word	0x40013800
 8005070:	40020000 	.word	0x40020000
 8005074:	40020400 	.word	0x40020400
 8005078:	40020800 	.word	0x40020800
 800507c:	40020c00 	.word	0x40020c00
 8005080:	40021000 	.word	0x40021000
 8005084:	40021400 	.word	0x40021400
 8005088:	40021800 	.word	0x40021800
 800508c:	40021c00 	.word	0x40021c00
 8005090:	40013c00 	.word	0x40013c00

08005094 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005094:	b480      	push	{r7}
 8005096:	b085      	sub	sp, #20
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
 800509c:	460b      	mov	r3, r1
 800509e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	691a      	ldr	r2, [r3, #16]
 80050a4:	887b      	ldrh	r3, [r7, #2]
 80050a6:	4013      	ands	r3, r2
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d002      	beq.n	80050b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80050ac:	2301      	movs	r3, #1
 80050ae:	73fb      	strb	r3, [r7, #15]
 80050b0:	e001      	b.n	80050b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80050b2:	2300      	movs	r3, #0
 80050b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80050b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	3714      	adds	r7, #20
 80050bc:	46bd      	mov	sp, r7
 80050be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c2:	4770      	bx	lr

080050c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b083      	sub	sp, #12
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
 80050cc:	460b      	mov	r3, r1
 80050ce:	807b      	strh	r3, [r7, #2]
 80050d0:	4613      	mov	r3, r2
 80050d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80050d4:	787b      	ldrb	r3, [r7, #1]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d003      	beq.n	80050e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80050da:	887a      	ldrh	r2, [r7, #2]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80050e0:	e003      	b.n	80050ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80050e2:	887b      	ldrh	r3, [r7, #2]
 80050e4:	041a      	lsls	r2, r3, #16
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	619a      	str	r2, [r3, #24]
}
 80050ea:	bf00      	nop
 80050ec:	370c      	adds	r7, #12
 80050ee:	46bd      	mov	sp, r7
 80050f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f4:	4770      	bx	lr
	...

080050f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b086      	sub	sp, #24
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d101      	bne.n	800510a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005106:	2301      	movs	r3, #1
 8005108:	e22d      	b.n	8005566 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f003 0301 	and.w	r3, r3, #1
 8005112:	2b00      	cmp	r3, #0
 8005114:	d075      	beq.n	8005202 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005116:	4ba3      	ldr	r3, [pc, #652]	; (80053a4 <HAL_RCC_OscConfig+0x2ac>)
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	f003 030c 	and.w	r3, r3, #12
 800511e:	2b04      	cmp	r3, #4
 8005120:	d00c      	beq.n	800513c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005122:	4ba0      	ldr	r3, [pc, #640]	; (80053a4 <HAL_RCC_OscConfig+0x2ac>)
 8005124:	689b      	ldr	r3, [r3, #8]
 8005126:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800512a:	2b08      	cmp	r3, #8
 800512c:	d112      	bne.n	8005154 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800512e:	4b9d      	ldr	r3, [pc, #628]	; (80053a4 <HAL_RCC_OscConfig+0x2ac>)
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005136:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800513a:	d10b      	bne.n	8005154 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800513c:	4b99      	ldr	r3, [pc, #612]	; (80053a4 <HAL_RCC_OscConfig+0x2ac>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005144:	2b00      	cmp	r3, #0
 8005146:	d05b      	beq.n	8005200 <HAL_RCC_OscConfig+0x108>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d157      	bne.n	8005200 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005150:	2301      	movs	r3, #1
 8005152:	e208      	b.n	8005566 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800515c:	d106      	bne.n	800516c <HAL_RCC_OscConfig+0x74>
 800515e:	4b91      	ldr	r3, [pc, #580]	; (80053a4 <HAL_RCC_OscConfig+0x2ac>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a90      	ldr	r2, [pc, #576]	; (80053a4 <HAL_RCC_OscConfig+0x2ac>)
 8005164:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005168:	6013      	str	r3, [r2, #0]
 800516a:	e01d      	b.n	80051a8 <HAL_RCC_OscConfig+0xb0>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005174:	d10c      	bne.n	8005190 <HAL_RCC_OscConfig+0x98>
 8005176:	4b8b      	ldr	r3, [pc, #556]	; (80053a4 <HAL_RCC_OscConfig+0x2ac>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a8a      	ldr	r2, [pc, #552]	; (80053a4 <HAL_RCC_OscConfig+0x2ac>)
 800517c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005180:	6013      	str	r3, [r2, #0]
 8005182:	4b88      	ldr	r3, [pc, #544]	; (80053a4 <HAL_RCC_OscConfig+0x2ac>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a87      	ldr	r2, [pc, #540]	; (80053a4 <HAL_RCC_OscConfig+0x2ac>)
 8005188:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800518c:	6013      	str	r3, [r2, #0]
 800518e:	e00b      	b.n	80051a8 <HAL_RCC_OscConfig+0xb0>
 8005190:	4b84      	ldr	r3, [pc, #528]	; (80053a4 <HAL_RCC_OscConfig+0x2ac>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a83      	ldr	r2, [pc, #524]	; (80053a4 <HAL_RCC_OscConfig+0x2ac>)
 8005196:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800519a:	6013      	str	r3, [r2, #0]
 800519c:	4b81      	ldr	r3, [pc, #516]	; (80053a4 <HAL_RCC_OscConfig+0x2ac>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a80      	ldr	r2, [pc, #512]	; (80053a4 <HAL_RCC_OscConfig+0x2ac>)
 80051a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80051a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d013      	beq.n	80051d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051b0:	f7ff fc64 	bl	8004a7c <HAL_GetTick>
 80051b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051b6:	e008      	b.n	80051ca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80051b8:	f7ff fc60 	bl	8004a7c <HAL_GetTick>
 80051bc:	4602      	mov	r2, r0
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	1ad3      	subs	r3, r2, r3
 80051c2:	2b64      	cmp	r3, #100	; 0x64
 80051c4:	d901      	bls.n	80051ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80051c6:	2303      	movs	r3, #3
 80051c8:	e1cd      	b.n	8005566 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051ca:	4b76      	ldr	r3, [pc, #472]	; (80053a4 <HAL_RCC_OscConfig+0x2ac>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d0f0      	beq.n	80051b8 <HAL_RCC_OscConfig+0xc0>
 80051d6:	e014      	b.n	8005202 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051d8:	f7ff fc50 	bl	8004a7c <HAL_GetTick>
 80051dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80051de:	e008      	b.n	80051f2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80051e0:	f7ff fc4c 	bl	8004a7c <HAL_GetTick>
 80051e4:	4602      	mov	r2, r0
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	1ad3      	subs	r3, r2, r3
 80051ea:	2b64      	cmp	r3, #100	; 0x64
 80051ec:	d901      	bls.n	80051f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80051ee:	2303      	movs	r3, #3
 80051f0:	e1b9      	b.n	8005566 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80051f2:	4b6c      	ldr	r3, [pc, #432]	; (80053a4 <HAL_RCC_OscConfig+0x2ac>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d1f0      	bne.n	80051e0 <HAL_RCC_OscConfig+0xe8>
 80051fe:	e000      	b.n	8005202 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005200:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f003 0302 	and.w	r3, r3, #2
 800520a:	2b00      	cmp	r3, #0
 800520c:	d063      	beq.n	80052d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800520e:	4b65      	ldr	r3, [pc, #404]	; (80053a4 <HAL_RCC_OscConfig+0x2ac>)
 8005210:	689b      	ldr	r3, [r3, #8]
 8005212:	f003 030c 	and.w	r3, r3, #12
 8005216:	2b00      	cmp	r3, #0
 8005218:	d00b      	beq.n	8005232 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800521a:	4b62      	ldr	r3, [pc, #392]	; (80053a4 <HAL_RCC_OscConfig+0x2ac>)
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005222:	2b08      	cmp	r3, #8
 8005224:	d11c      	bne.n	8005260 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005226:	4b5f      	ldr	r3, [pc, #380]	; (80053a4 <HAL_RCC_OscConfig+0x2ac>)
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800522e:	2b00      	cmp	r3, #0
 8005230:	d116      	bne.n	8005260 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005232:	4b5c      	ldr	r3, [pc, #368]	; (80053a4 <HAL_RCC_OscConfig+0x2ac>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f003 0302 	and.w	r3, r3, #2
 800523a:	2b00      	cmp	r3, #0
 800523c:	d005      	beq.n	800524a <HAL_RCC_OscConfig+0x152>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	68db      	ldr	r3, [r3, #12]
 8005242:	2b01      	cmp	r3, #1
 8005244:	d001      	beq.n	800524a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	e18d      	b.n	8005566 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800524a:	4b56      	ldr	r3, [pc, #344]	; (80053a4 <HAL_RCC_OscConfig+0x2ac>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	691b      	ldr	r3, [r3, #16]
 8005256:	00db      	lsls	r3, r3, #3
 8005258:	4952      	ldr	r1, [pc, #328]	; (80053a4 <HAL_RCC_OscConfig+0x2ac>)
 800525a:	4313      	orrs	r3, r2
 800525c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800525e:	e03a      	b.n	80052d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	68db      	ldr	r3, [r3, #12]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d020      	beq.n	80052aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005268:	4b4f      	ldr	r3, [pc, #316]	; (80053a8 <HAL_RCC_OscConfig+0x2b0>)
 800526a:	2201      	movs	r2, #1
 800526c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800526e:	f7ff fc05 	bl	8004a7c <HAL_GetTick>
 8005272:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005274:	e008      	b.n	8005288 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005276:	f7ff fc01 	bl	8004a7c <HAL_GetTick>
 800527a:	4602      	mov	r2, r0
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	1ad3      	subs	r3, r2, r3
 8005280:	2b02      	cmp	r3, #2
 8005282:	d901      	bls.n	8005288 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005284:	2303      	movs	r3, #3
 8005286:	e16e      	b.n	8005566 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005288:	4b46      	ldr	r3, [pc, #280]	; (80053a4 <HAL_RCC_OscConfig+0x2ac>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f003 0302 	and.w	r3, r3, #2
 8005290:	2b00      	cmp	r3, #0
 8005292:	d0f0      	beq.n	8005276 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005294:	4b43      	ldr	r3, [pc, #268]	; (80053a4 <HAL_RCC_OscConfig+0x2ac>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	691b      	ldr	r3, [r3, #16]
 80052a0:	00db      	lsls	r3, r3, #3
 80052a2:	4940      	ldr	r1, [pc, #256]	; (80053a4 <HAL_RCC_OscConfig+0x2ac>)
 80052a4:	4313      	orrs	r3, r2
 80052a6:	600b      	str	r3, [r1, #0]
 80052a8:	e015      	b.n	80052d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80052aa:	4b3f      	ldr	r3, [pc, #252]	; (80053a8 <HAL_RCC_OscConfig+0x2b0>)
 80052ac:	2200      	movs	r2, #0
 80052ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052b0:	f7ff fbe4 	bl	8004a7c <HAL_GetTick>
 80052b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80052b6:	e008      	b.n	80052ca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80052b8:	f7ff fbe0 	bl	8004a7c <HAL_GetTick>
 80052bc:	4602      	mov	r2, r0
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	1ad3      	subs	r3, r2, r3
 80052c2:	2b02      	cmp	r3, #2
 80052c4:	d901      	bls.n	80052ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80052c6:	2303      	movs	r3, #3
 80052c8:	e14d      	b.n	8005566 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80052ca:	4b36      	ldr	r3, [pc, #216]	; (80053a4 <HAL_RCC_OscConfig+0x2ac>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f003 0302 	and.w	r3, r3, #2
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d1f0      	bne.n	80052b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f003 0308 	and.w	r3, r3, #8
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d030      	beq.n	8005344 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	695b      	ldr	r3, [r3, #20]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d016      	beq.n	8005318 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80052ea:	4b30      	ldr	r3, [pc, #192]	; (80053ac <HAL_RCC_OscConfig+0x2b4>)
 80052ec:	2201      	movs	r2, #1
 80052ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052f0:	f7ff fbc4 	bl	8004a7c <HAL_GetTick>
 80052f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052f6:	e008      	b.n	800530a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80052f8:	f7ff fbc0 	bl	8004a7c <HAL_GetTick>
 80052fc:	4602      	mov	r2, r0
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	1ad3      	subs	r3, r2, r3
 8005302:	2b02      	cmp	r3, #2
 8005304:	d901      	bls.n	800530a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005306:	2303      	movs	r3, #3
 8005308:	e12d      	b.n	8005566 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800530a:	4b26      	ldr	r3, [pc, #152]	; (80053a4 <HAL_RCC_OscConfig+0x2ac>)
 800530c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800530e:	f003 0302 	and.w	r3, r3, #2
 8005312:	2b00      	cmp	r3, #0
 8005314:	d0f0      	beq.n	80052f8 <HAL_RCC_OscConfig+0x200>
 8005316:	e015      	b.n	8005344 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005318:	4b24      	ldr	r3, [pc, #144]	; (80053ac <HAL_RCC_OscConfig+0x2b4>)
 800531a:	2200      	movs	r2, #0
 800531c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800531e:	f7ff fbad 	bl	8004a7c <HAL_GetTick>
 8005322:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005324:	e008      	b.n	8005338 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005326:	f7ff fba9 	bl	8004a7c <HAL_GetTick>
 800532a:	4602      	mov	r2, r0
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	1ad3      	subs	r3, r2, r3
 8005330:	2b02      	cmp	r3, #2
 8005332:	d901      	bls.n	8005338 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005334:	2303      	movs	r3, #3
 8005336:	e116      	b.n	8005566 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005338:	4b1a      	ldr	r3, [pc, #104]	; (80053a4 <HAL_RCC_OscConfig+0x2ac>)
 800533a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800533c:	f003 0302 	and.w	r3, r3, #2
 8005340:	2b00      	cmp	r3, #0
 8005342:	d1f0      	bne.n	8005326 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f003 0304 	and.w	r3, r3, #4
 800534c:	2b00      	cmp	r3, #0
 800534e:	f000 80a0 	beq.w	8005492 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005352:	2300      	movs	r3, #0
 8005354:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005356:	4b13      	ldr	r3, [pc, #76]	; (80053a4 <HAL_RCC_OscConfig+0x2ac>)
 8005358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800535a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800535e:	2b00      	cmp	r3, #0
 8005360:	d10f      	bne.n	8005382 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005362:	2300      	movs	r3, #0
 8005364:	60fb      	str	r3, [r7, #12]
 8005366:	4b0f      	ldr	r3, [pc, #60]	; (80053a4 <HAL_RCC_OscConfig+0x2ac>)
 8005368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800536a:	4a0e      	ldr	r2, [pc, #56]	; (80053a4 <HAL_RCC_OscConfig+0x2ac>)
 800536c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005370:	6413      	str	r3, [r2, #64]	; 0x40
 8005372:	4b0c      	ldr	r3, [pc, #48]	; (80053a4 <HAL_RCC_OscConfig+0x2ac>)
 8005374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005376:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800537a:	60fb      	str	r3, [r7, #12]
 800537c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800537e:	2301      	movs	r3, #1
 8005380:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005382:	4b0b      	ldr	r3, [pc, #44]	; (80053b0 <HAL_RCC_OscConfig+0x2b8>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800538a:	2b00      	cmp	r3, #0
 800538c:	d121      	bne.n	80053d2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800538e:	4b08      	ldr	r3, [pc, #32]	; (80053b0 <HAL_RCC_OscConfig+0x2b8>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a07      	ldr	r2, [pc, #28]	; (80053b0 <HAL_RCC_OscConfig+0x2b8>)
 8005394:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005398:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800539a:	f7ff fb6f 	bl	8004a7c <HAL_GetTick>
 800539e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053a0:	e011      	b.n	80053c6 <HAL_RCC_OscConfig+0x2ce>
 80053a2:	bf00      	nop
 80053a4:	40023800 	.word	0x40023800
 80053a8:	42470000 	.word	0x42470000
 80053ac:	42470e80 	.word	0x42470e80
 80053b0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053b4:	f7ff fb62 	bl	8004a7c <HAL_GetTick>
 80053b8:	4602      	mov	r2, r0
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	1ad3      	subs	r3, r2, r3
 80053be:	2b02      	cmp	r3, #2
 80053c0:	d901      	bls.n	80053c6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80053c2:	2303      	movs	r3, #3
 80053c4:	e0cf      	b.n	8005566 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053c6:	4b6a      	ldr	r3, [pc, #424]	; (8005570 <HAL_RCC_OscConfig+0x478>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d0f0      	beq.n	80053b4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	2b01      	cmp	r3, #1
 80053d8:	d106      	bne.n	80053e8 <HAL_RCC_OscConfig+0x2f0>
 80053da:	4b66      	ldr	r3, [pc, #408]	; (8005574 <HAL_RCC_OscConfig+0x47c>)
 80053dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053de:	4a65      	ldr	r2, [pc, #404]	; (8005574 <HAL_RCC_OscConfig+0x47c>)
 80053e0:	f043 0301 	orr.w	r3, r3, #1
 80053e4:	6713      	str	r3, [r2, #112]	; 0x70
 80053e6:	e01c      	b.n	8005422 <HAL_RCC_OscConfig+0x32a>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	689b      	ldr	r3, [r3, #8]
 80053ec:	2b05      	cmp	r3, #5
 80053ee:	d10c      	bne.n	800540a <HAL_RCC_OscConfig+0x312>
 80053f0:	4b60      	ldr	r3, [pc, #384]	; (8005574 <HAL_RCC_OscConfig+0x47c>)
 80053f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053f4:	4a5f      	ldr	r2, [pc, #380]	; (8005574 <HAL_RCC_OscConfig+0x47c>)
 80053f6:	f043 0304 	orr.w	r3, r3, #4
 80053fa:	6713      	str	r3, [r2, #112]	; 0x70
 80053fc:	4b5d      	ldr	r3, [pc, #372]	; (8005574 <HAL_RCC_OscConfig+0x47c>)
 80053fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005400:	4a5c      	ldr	r2, [pc, #368]	; (8005574 <HAL_RCC_OscConfig+0x47c>)
 8005402:	f043 0301 	orr.w	r3, r3, #1
 8005406:	6713      	str	r3, [r2, #112]	; 0x70
 8005408:	e00b      	b.n	8005422 <HAL_RCC_OscConfig+0x32a>
 800540a:	4b5a      	ldr	r3, [pc, #360]	; (8005574 <HAL_RCC_OscConfig+0x47c>)
 800540c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800540e:	4a59      	ldr	r2, [pc, #356]	; (8005574 <HAL_RCC_OscConfig+0x47c>)
 8005410:	f023 0301 	bic.w	r3, r3, #1
 8005414:	6713      	str	r3, [r2, #112]	; 0x70
 8005416:	4b57      	ldr	r3, [pc, #348]	; (8005574 <HAL_RCC_OscConfig+0x47c>)
 8005418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800541a:	4a56      	ldr	r2, [pc, #344]	; (8005574 <HAL_RCC_OscConfig+0x47c>)
 800541c:	f023 0304 	bic.w	r3, r3, #4
 8005420:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	689b      	ldr	r3, [r3, #8]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d015      	beq.n	8005456 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800542a:	f7ff fb27 	bl	8004a7c <HAL_GetTick>
 800542e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005430:	e00a      	b.n	8005448 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005432:	f7ff fb23 	bl	8004a7c <HAL_GetTick>
 8005436:	4602      	mov	r2, r0
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	1ad3      	subs	r3, r2, r3
 800543c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005440:	4293      	cmp	r3, r2
 8005442:	d901      	bls.n	8005448 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005444:	2303      	movs	r3, #3
 8005446:	e08e      	b.n	8005566 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005448:	4b4a      	ldr	r3, [pc, #296]	; (8005574 <HAL_RCC_OscConfig+0x47c>)
 800544a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800544c:	f003 0302 	and.w	r3, r3, #2
 8005450:	2b00      	cmp	r3, #0
 8005452:	d0ee      	beq.n	8005432 <HAL_RCC_OscConfig+0x33a>
 8005454:	e014      	b.n	8005480 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005456:	f7ff fb11 	bl	8004a7c <HAL_GetTick>
 800545a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800545c:	e00a      	b.n	8005474 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800545e:	f7ff fb0d 	bl	8004a7c <HAL_GetTick>
 8005462:	4602      	mov	r2, r0
 8005464:	693b      	ldr	r3, [r7, #16]
 8005466:	1ad3      	subs	r3, r2, r3
 8005468:	f241 3288 	movw	r2, #5000	; 0x1388
 800546c:	4293      	cmp	r3, r2
 800546e:	d901      	bls.n	8005474 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005470:	2303      	movs	r3, #3
 8005472:	e078      	b.n	8005566 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005474:	4b3f      	ldr	r3, [pc, #252]	; (8005574 <HAL_RCC_OscConfig+0x47c>)
 8005476:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005478:	f003 0302 	and.w	r3, r3, #2
 800547c:	2b00      	cmp	r3, #0
 800547e:	d1ee      	bne.n	800545e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005480:	7dfb      	ldrb	r3, [r7, #23]
 8005482:	2b01      	cmp	r3, #1
 8005484:	d105      	bne.n	8005492 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005486:	4b3b      	ldr	r3, [pc, #236]	; (8005574 <HAL_RCC_OscConfig+0x47c>)
 8005488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800548a:	4a3a      	ldr	r2, [pc, #232]	; (8005574 <HAL_RCC_OscConfig+0x47c>)
 800548c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005490:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	699b      	ldr	r3, [r3, #24]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d064      	beq.n	8005564 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800549a:	4b36      	ldr	r3, [pc, #216]	; (8005574 <HAL_RCC_OscConfig+0x47c>)
 800549c:	689b      	ldr	r3, [r3, #8]
 800549e:	f003 030c 	and.w	r3, r3, #12
 80054a2:	2b08      	cmp	r3, #8
 80054a4:	d05c      	beq.n	8005560 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	699b      	ldr	r3, [r3, #24]
 80054aa:	2b02      	cmp	r3, #2
 80054ac:	d141      	bne.n	8005532 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054ae:	4b32      	ldr	r3, [pc, #200]	; (8005578 <HAL_RCC_OscConfig+0x480>)
 80054b0:	2200      	movs	r2, #0
 80054b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054b4:	f7ff fae2 	bl	8004a7c <HAL_GetTick>
 80054b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054ba:	e008      	b.n	80054ce <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054bc:	f7ff fade 	bl	8004a7c <HAL_GetTick>
 80054c0:	4602      	mov	r2, r0
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	1ad3      	subs	r3, r2, r3
 80054c6:	2b02      	cmp	r3, #2
 80054c8:	d901      	bls.n	80054ce <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 80054ca:	2303      	movs	r3, #3
 80054cc:	e04b      	b.n	8005566 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054ce:	4b29      	ldr	r3, [pc, #164]	; (8005574 <HAL_RCC_OscConfig+0x47c>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d1f0      	bne.n	80054bc <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	69da      	ldr	r2, [r3, #28]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6a1b      	ldr	r3, [r3, #32]
 80054e2:	431a      	orrs	r2, r3
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e8:	019b      	lsls	r3, r3, #6
 80054ea:	431a      	orrs	r2, r3
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054f0:	085b      	lsrs	r3, r3, #1
 80054f2:	3b01      	subs	r3, #1
 80054f4:	041b      	lsls	r3, r3, #16
 80054f6:	431a      	orrs	r2, r3
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054fc:	061b      	lsls	r3, r3, #24
 80054fe:	491d      	ldr	r1, [pc, #116]	; (8005574 <HAL_RCC_OscConfig+0x47c>)
 8005500:	4313      	orrs	r3, r2
 8005502:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005504:	4b1c      	ldr	r3, [pc, #112]	; (8005578 <HAL_RCC_OscConfig+0x480>)
 8005506:	2201      	movs	r2, #1
 8005508:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800550a:	f7ff fab7 	bl	8004a7c <HAL_GetTick>
 800550e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005510:	e008      	b.n	8005524 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005512:	f7ff fab3 	bl	8004a7c <HAL_GetTick>
 8005516:	4602      	mov	r2, r0
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	1ad3      	subs	r3, r2, r3
 800551c:	2b02      	cmp	r3, #2
 800551e:	d901      	bls.n	8005524 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8005520:	2303      	movs	r3, #3
 8005522:	e020      	b.n	8005566 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005524:	4b13      	ldr	r3, [pc, #76]	; (8005574 <HAL_RCC_OscConfig+0x47c>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800552c:	2b00      	cmp	r3, #0
 800552e:	d0f0      	beq.n	8005512 <HAL_RCC_OscConfig+0x41a>
 8005530:	e018      	b.n	8005564 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005532:	4b11      	ldr	r3, [pc, #68]	; (8005578 <HAL_RCC_OscConfig+0x480>)
 8005534:	2200      	movs	r2, #0
 8005536:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005538:	f7ff faa0 	bl	8004a7c <HAL_GetTick>
 800553c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800553e:	e008      	b.n	8005552 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005540:	f7ff fa9c 	bl	8004a7c <HAL_GetTick>
 8005544:	4602      	mov	r2, r0
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	1ad3      	subs	r3, r2, r3
 800554a:	2b02      	cmp	r3, #2
 800554c:	d901      	bls.n	8005552 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800554e:	2303      	movs	r3, #3
 8005550:	e009      	b.n	8005566 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005552:	4b08      	ldr	r3, [pc, #32]	; (8005574 <HAL_RCC_OscConfig+0x47c>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800555a:	2b00      	cmp	r3, #0
 800555c:	d1f0      	bne.n	8005540 <HAL_RCC_OscConfig+0x448>
 800555e:	e001      	b.n	8005564 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8005560:	2301      	movs	r3, #1
 8005562:	e000      	b.n	8005566 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8005564:	2300      	movs	r3, #0
}
 8005566:	4618      	mov	r0, r3
 8005568:	3718      	adds	r7, #24
 800556a:	46bd      	mov	sp, r7
 800556c:	bd80      	pop	{r7, pc}
 800556e:	bf00      	nop
 8005570:	40007000 	.word	0x40007000
 8005574:	40023800 	.word	0x40023800
 8005578:	42470060 	.word	0x42470060

0800557c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b084      	sub	sp, #16
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
 8005584:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d101      	bne.n	8005590 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800558c:	2301      	movs	r3, #1
 800558e:	e0ca      	b.n	8005726 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005590:	4b67      	ldr	r3, [pc, #412]	; (8005730 <HAL_RCC_ClockConfig+0x1b4>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f003 030f 	and.w	r3, r3, #15
 8005598:	683a      	ldr	r2, [r7, #0]
 800559a:	429a      	cmp	r2, r3
 800559c:	d90c      	bls.n	80055b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800559e:	4b64      	ldr	r3, [pc, #400]	; (8005730 <HAL_RCC_ClockConfig+0x1b4>)
 80055a0:	683a      	ldr	r2, [r7, #0]
 80055a2:	b2d2      	uxtb	r2, r2
 80055a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80055a6:	4b62      	ldr	r3, [pc, #392]	; (8005730 <HAL_RCC_ClockConfig+0x1b4>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f003 030f 	and.w	r3, r3, #15
 80055ae:	683a      	ldr	r2, [r7, #0]
 80055b0:	429a      	cmp	r2, r3
 80055b2:	d001      	beq.n	80055b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80055b4:	2301      	movs	r3, #1
 80055b6:	e0b6      	b.n	8005726 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f003 0302 	and.w	r3, r3, #2
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d020      	beq.n	8005606 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f003 0304 	and.w	r3, r3, #4
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d005      	beq.n	80055dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80055d0:	4b58      	ldr	r3, [pc, #352]	; (8005734 <HAL_RCC_ClockConfig+0x1b8>)
 80055d2:	689b      	ldr	r3, [r3, #8]
 80055d4:	4a57      	ldr	r2, [pc, #348]	; (8005734 <HAL_RCC_ClockConfig+0x1b8>)
 80055d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80055da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f003 0308 	and.w	r3, r3, #8
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d005      	beq.n	80055f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80055e8:	4b52      	ldr	r3, [pc, #328]	; (8005734 <HAL_RCC_ClockConfig+0x1b8>)
 80055ea:	689b      	ldr	r3, [r3, #8]
 80055ec:	4a51      	ldr	r2, [pc, #324]	; (8005734 <HAL_RCC_ClockConfig+0x1b8>)
 80055ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80055f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80055f4:	4b4f      	ldr	r3, [pc, #316]	; (8005734 <HAL_RCC_ClockConfig+0x1b8>)
 80055f6:	689b      	ldr	r3, [r3, #8]
 80055f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	689b      	ldr	r3, [r3, #8]
 8005600:	494c      	ldr	r1, [pc, #304]	; (8005734 <HAL_RCC_ClockConfig+0x1b8>)
 8005602:	4313      	orrs	r3, r2
 8005604:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f003 0301 	and.w	r3, r3, #1
 800560e:	2b00      	cmp	r3, #0
 8005610:	d044      	beq.n	800569c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	2b01      	cmp	r3, #1
 8005618:	d107      	bne.n	800562a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800561a:	4b46      	ldr	r3, [pc, #280]	; (8005734 <HAL_RCC_ClockConfig+0x1b8>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005622:	2b00      	cmp	r3, #0
 8005624:	d119      	bne.n	800565a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005626:	2301      	movs	r3, #1
 8005628:	e07d      	b.n	8005726 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	2b02      	cmp	r3, #2
 8005630:	d003      	beq.n	800563a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005636:	2b03      	cmp	r3, #3
 8005638:	d107      	bne.n	800564a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800563a:	4b3e      	ldr	r3, [pc, #248]	; (8005734 <HAL_RCC_ClockConfig+0x1b8>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005642:	2b00      	cmp	r3, #0
 8005644:	d109      	bne.n	800565a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005646:	2301      	movs	r3, #1
 8005648:	e06d      	b.n	8005726 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800564a:	4b3a      	ldr	r3, [pc, #232]	; (8005734 <HAL_RCC_ClockConfig+0x1b8>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f003 0302 	and.w	r3, r3, #2
 8005652:	2b00      	cmp	r3, #0
 8005654:	d101      	bne.n	800565a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005656:	2301      	movs	r3, #1
 8005658:	e065      	b.n	8005726 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800565a:	4b36      	ldr	r3, [pc, #216]	; (8005734 <HAL_RCC_ClockConfig+0x1b8>)
 800565c:	689b      	ldr	r3, [r3, #8]
 800565e:	f023 0203 	bic.w	r2, r3, #3
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	4933      	ldr	r1, [pc, #204]	; (8005734 <HAL_RCC_ClockConfig+0x1b8>)
 8005668:	4313      	orrs	r3, r2
 800566a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800566c:	f7ff fa06 	bl	8004a7c <HAL_GetTick>
 8005670:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005672:	e00a      	b.n	800568a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005674:	f7ff fa02 	bl	8004a7c <HAL_GetTick>
 8005678:	4602      	mov	r2, r0
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	1ad3      	subs	r3, r2, r3
 800567e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005682:	4293      	cmp	r3, r2
 8005684:	d901      	bls.n	800568a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005686:	2303      	movs	r3, #3
 8005688:	e04d      	b.n	8005726 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800568a:	4b2a      	ldr	r3, [pc, #168]	; (8005734 <HAL_RCC_ClockConfig+0x1b8>)
 800568c:	689b      	ldr	r3, [r3, #8]
 800568e:	f003 020c 	and.w	r2, r3, #12
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	009b      	lsls	r3, r3, #2
 8005698:	429a      	cmp	r2, r3
 800569a:	d1eb      	bne.n	8005674 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800569c:	4b24      	ldr	r3, [pc, #144]	; (8005730 <HAL_RCC_ClockConfig+0x1b4>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f003 030f 	and.w	r3, r3, #15
 80056a4:	683a      	ldr	r2, [r7, #0]
 80056a6:	429a      	cmp	r2, r3
 80056a8:	d20c      	bcs.n	80056c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056aa:	4b21      	ldr	r3, [pc, #132]	; (8005730 <HAL_RCC_ClockConfig+0x1b4>)
 80056ac:	683a      	ldr	r2, [r7, #0]
 80056ae:	b2d2      	uxtb	r2, r2
 80056b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80056b2:	4b1f      	ldr	r3, [pc, #124]	; (8005730 <HAL_RCC_ClockConfig+0x1b4>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f003 030f 	and.w	r3, r3, #15
 80056ba:	683a      	ldr	r2, [r7, #0]
 80056bc:	429a      	cmp	r2, r3
 80056be:	d001      	beq.n	80056c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80056c0:	2301      	movs	r3, #1
 80056c2:	e030      	b.n	8005726 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f003 0304 	and.w	r3, r3, #4
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d008      	beq.n	80056e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80056d0:	4b18      	ldr	r3, [pc, #96]	; (8005734 <HAL_RCC_ClockConfig+0x1b8>)
 80056d2:	689b      	ldr	r3, [r3, #8]
 80056d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	68db      	ldr	r3, [r3, #12]
 80056dc:	4915      	ldr	r1, [pc, #84]	; (8005734 <HAL_RCC_ClockConfig+0x1b8>)
 80056de:	4313      	orrs	r3, r2
 80056e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f003 0308 	and.w	r3, r3, #8
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d009      	beq.n	8005702 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80056ee:	4b11      	ldr	r3, [pc, #68]	; (8005734 <HAL_RCC_ClockConfig+0x1b8>)
 80056f0:	689b      	ldr	r3, [r3, #8]
 80056f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	691b      	ldr	r3, [r3, #16]
 80056fa:	00db      	lsls	r3, r3, #3
 80056fc:	490d      	ldr	r1, [pc, #52]	; (8005734 <HAL_RCC_ClockConfig+0x1b8>)
 80056fe:	4313      	orrs	r3, r2
 8005700:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005702:	f000 f81d 	bl	8005740 <HAL_RCC_GetSysClockFreq>
 8005706:	4601      	mov	r1, r0
 8005708:	4b0a      	ldr	r3, [pc, #40]	; (8005734 <HAL_RCC_ClockConfig+0x1b8>)
 800570a:	689b      	ldr	r3, [r3, #8]
 800570c:	091b      	lsrs	r3, r3, #4
 800570e:	f003 030f 	and.w	r3, r3, #15
 8005712:	4a09      	ldr	r2, [pc, #36]	; (8005738 <HAL_RCC_ClockConfig+0x1bc>)
 8005714:	5cd3      	ldrb	r3, [r2, r3]
 8005716:	fa21 f303 	lsr.w	r3, r1, r3
 800571a:	4a08      	ldr	r2, [pc, #32]	; (800573c <HAL_RCC_ClockConfig+0x1c0>)
 800571c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 800571e:	2000      	movs	r0, #0
 8005720:	f7ff f968 	bl	80049f4 <HAL_InitTick>

  return HAL_OK;
 8005724:	2300      	movs	r3, #0
}
 8005726:	4618      	mov	r0, r3
 8005728:	3710      	adds	r7, #16
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}
 800572e:	bf00      	nop
 8005730:	40023c00 	.word	0x40023c00
 8005734:	40023800 	.word	0x40023800
 8005738:	080716c8 	.word	0x080716c8
 800573c:	20000478 	.word	0x20000478

08005740 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005740:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005742:	b085      	sub	sp, #20
 8005744:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005746:	2300      	movs	r3, #0
 8005748:	607b      	str	r3, [r7, #4]
 800574a:	2300      	movs	r3, #0
 800574c:	60fb      	str	r3, [r7, #12]
 800574e:	2300      	movs	r3, #0
 8005750:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005752:	2300      	movs	r3, #0
 8005754:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005756:	4b50      	ldr	r3, [pc, #320]	; (8005898 <HAL_RCC_GetSysClockFreq+0x158>)
 8005758:	689b      	ldr	r3, [r3, #8]
 800575a:	f003 030c 	and.w	r3, r3, #12
 800575e:	2b04      	cmp	r3, #4
 8005760:	d007      	beq.n	8005772 <HAL_RCC_GetSysClockFreq+0x32>
 8005762:	2b08      	cmp	r3, #8
 8005764:	d008      	beq.n	8005778 <HAL_RCC_GetSysClockFreq+0x38>
 8005766:	2b00      	cmp	r3, #0
 8005768:	f040 808d 	bne.w	8005886 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800576c:	4b4b      	ldr	r3, [pc, #300]	; (800589c <HAL_RCC_GetSysClockFreq+0x15c>)
 800576e:	60bb      	str	r3, [r7, #8]
       break;
 8005770:	e08c      	b.n	800588c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005772:	4b4b      	ldr	r3, [pc, #300]	; (80058a0 <HAL_RCC_GetSysClockFreq+0x160>)
 8005774:	60bb      	str	r3, [r7, #8]
      break;
 8005776:	e089      	b.n	800588c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005778:	4b47      	ldr	r3, [pc, #284]	; (8005898 <HAL_RCC_GetSysClockFreq+0x158>)
 800577a:	685b      	ldr	r3, [r3, #4]
 800577c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005780:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005782:	4b45      	ldr	r3, [pc, #276]	; (8005898 <HAL_RCC_GetSysClockFreq+0x158>)
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800578a:	2b00      	cmp	r3, #0
 800578c:	d023      	beq.n	80057d6 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800578e:	4b42      	ldr	r3, [pc, #264]	; (8005898 <HAL_RCC_GetSysClockFreq+0x158>)
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	099b      	lsrs	r3, r3, #6
 8005794:	f04f 0400 	mov.w	r4, #0
 8005798:	f240 11ff 	movw	r1, #511	; 0x1ff
 800579c:	f04f 0200 	mov.w	r2, #0
 80057a0:	ea03 0501 	and.w	r5, r3, r1
 80057a4:	ea04 0602 	and.w	r6, r4, r2
 80057a8:	4a3d      	ldr	r2, [pc, #244]	; (80058a0 <HAL_RCC_GetSysClockFreq+0x160>)
 80057aa:	fb02 f106 	mul.w	r1, r2, r6
 80057ae:	2200      	movs	r2, #0
 80057b0:	fb02 f205 	mul.w	r2, r2, r5
 80057b4:	440a      	add	r2, r1
 80057b6:	493a      	ldr	r1, [pc, #232]	; (80058a0 <HAL_RCC_GetSysClockFreq+0x160>)
 80057b8:	fba5 0101 	umull	r0, r1, r5, r1
 80057bc:	1853      	adds	r3, r2, r1
 80057be:	4619      	mov	r1, r3
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	f04f 0400 	mov.w	r4, #0
 80057c6:	461a      	mov	r2, r3
 80057c8:	4623      	mov	r3, r4
 80057ca:	f7fe fed7 	bl	800457c <__aeabi_uldivmod>
 80057ce:	4603      	mov	r3, r0
 80057d0:	460c      	mov	r4, r1
 80057d2:	60fb      	str	r3, [r7, #12]
 80057d4:	e049      	b.n	800586a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80057d6:	4b30      	ldr	r3, [pc, #192]	; (8005898 <HAL_RCC_GetSysClockFreq+0x158>)
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	099b      	lsrs	r3, r3, #6
 80057dc:	f04f 0400 	mov.w	r4, #0
 80057e0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80057e4:	f04f 0200 	mov.w	r2, #0
 80057e8:	ea03 0501 	and.w	r5, r3, r1
 80057ec:	ea04 0602 	and.w	r6, r4, r2
 80057f0:	4629      	mov	r1, r5
 80057f2:	4632      	mov	r2, r6
 80057f4:	f04f 0300 	mov.w	r3, #0
 80057f8:	f04f 0400 	mov.w	r4, #0
 80057fc:	0154      	lsls	r4, r2, #5
 80057fe:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005802:	014b      	lsls	r3, r1, #5
 8005804:	4619      	mov	r1, r3
 8005806:	4622      	mov	r2, r4
 8005808:	1b49      	subs	r1, r1, r5
 800580a:	eb62 0206 	sbc.w	r2, r2, r6
 800580e:	f04f 0300 	mov.w	r3, #0
 8005812:	f04f 0400 	mov.w	r4, #0
 8005816:	0194      	lsls	r4, r2, #6
 8005818:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800581c:	018b      	lsls	r3, r1, #6
 800581e:	1a5b      	subs	r3, r3, r1
 8005820:	eb64 0402 	sbc.w	r4, r4, r2
 8005824:	f04f 0100 	mov.w	r1, #0
 8005828:	f04f 0200 	mov.w	r2, #0
 800582c:	00e2      	lsls	r2, r4, #3
 800582e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005832:	00d9      	lsls	r1, r3, #3
 8005834:	460b      	mov	r3, r1
 8005836:	4614      	mov	r4, r2
 8005838:	195b      	adds	r3, r3, r5
 800583a:	eb44 0406 	adc.w	r4, r4, r6
 800583e:	f04f 0100 	mov.w	r1, #0
 8005842:	f04f 0200 	mov.w	r2, #0
 8005846:	02a2      	lsls	r2, r4, #10
 8005848:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800584c:	0299      	lsls	r1, r3, #10
 800584e:	460b      	mov	r3, r1
 8005850:	4614      	mov	r4, r2
 8005852:	4618      	mov	r0, r3
 8005854:	4621      	mov	r1, r4
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	f04f 0400 	mov.w	r4, #0
 800585c:	461a      	mov	r2, r3
 800585e:	4623      	mov	r3, r4
 8005860:	f7fe fe8c 	bl	800457c <__aeabi_uldivmod>
 8005864:	4603      	mov	r3, r0
 8005866:	460c      	mov	r4, r1
 8005868:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800586a:	4b0b      	ldr	r3, [pc, #44]	; (8005898 <HAL_RCC_GetSysClockFreq+0x158>)
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	0c1b      	lsrs	r3, r3, #16
 8005870:	f003 0303 	and.w	r3, r3, #3
 8005874:	3301      	adds	r3, #1
 8005876:	005b      	lsls	r3, r3, #1
 8005878:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800587a:	68fa      	ldr	r2, [r7, #12]
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005882:	60bb      	str	r3, [r7, #8]
      break;
 8005884:	e002      	b.n	800588c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005886:	4b05      	ldr	r3, [pc, #20]	; (800589c <HAL_RCC_GetSysClockFreq+0x15c>)
 8005888:	60bb      	str	r3, [r7, #8]
      break;
 800588a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800588c:	68bb      	ldr	r3, [r7, #8]
}
 800588e:	4618      	mov	r0, r3
 8005890:	3714      	adds	r7, #20
 8005892:	46bd      	mov	sp, r7
 8005894:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005896:	bf00      	nop
 8005898:	40023800 	.word	0x40023800
 800589c:	00f42400 	.word	0x00f42400
 80058a0:	017d7840 	.word	0x017d7840

080058a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80058a4:	b480      	push	{r7}
 80058a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80058a8:	4b03      	ldr	r3, [pc, #12]	; (80058b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80058aa:	681b      	ldr	r3, [r3, #0]
}
 80058ac:	4618      	mov	r0, r3
 80058ae:	46bd      	mov	sp, r7
 80058b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b4:	4770      	bx	lr
 80058b6:	bf00      	nop
 80058b8:	20000478 	.word	0x20000478

080058bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80058c0:	f7ff fff0 	bl	80058a4 <HAL_RCC_GetHCLKFreq>
 80058c4:	4601      	mov	r1, r0
 80058c6:	4b05      	ldr	r3, [pc, #20]	; (80058dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80058c8:	689b      	ldr	r3, [r3, #8]
 80058ca:	0a9b      	lsrs	r3, r3, #10
 80058cc:	f003 0307 	and.w	r3, r3, #7
 80058d0:	4a03      	ldr	r2, [pc, #12]	; (80058e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80058d2:	5cd3      	ldrb	r3, [r2, r3]
 80058d4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80058d8:	4618      	mov	r0, r3
 80058da:	bd80      	pop	{r7, pc}
 80058dc:	40023800 	.word	0x40023800
 80058e0:	080716d8 	.word	0x080716d8

080058e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80058e8:	f7ff ffdc 	bl	80058a4 <HAL_RCC_GetHCLKFreq>
 80058ec:	4601      	mov	r1, r0
 80058ee:	4b05      	ldr	r3, [pc, #20]	; (8005904 <HAL_RCC_GetPCLK2Freq+0x20>)
 80058f0:	689b      	ldr	r3, [r3, #8]
 80058f2:	0b5b      	lsrs	r3, r3, #13
 80058f4:	f003 0307 	and.w	r3, r3, #7
 80058f8:	4a03      	ldr	r2, [pc, #12]	; (8005908 <HAL_RCC_GetPCLK2Freq+0x24>)
 80058fa:	5cd3      	ldrb	r3, [r2, r3]
 80058fc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005900:	4618      	mov	r0, r3
 8005902:	bd80      	pop	{r7, pc}
 8005904:	40023800 	.word	0x40023800
 8005908:	080716d8 	.word	0x080716d8

0800590c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b082      	sub	sp, #8
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d101      	bne.n	800591e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800591a:	2301      	movs	r3, #1
 800591c:	e056      	b.n	80059cc <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2200      	movs	r2, #0
 8005922:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800592a:	b2db      	uxtb	r3, r3
 800592c:	2b00      	cmp	r3, #0
 800592e:	d106      	bne.n	800593e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2200      	movs	r2, #0
 8005934:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005938:	6878      	ldr	r0, [r7, #4]
 800593a:	f003 fc41 	bl	80091c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2202      	movs	r2, #2
 8005942:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	681a      	ldr	r2, [r3, #0]
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005954:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	685a      	ldr	r2, [r3, #4]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	689b      	ldr	r3, [r3, #8]
 800595e:	431a      	orrs	r2, r3
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	68db      	ldr	r3, [r3, #12]
 8005964:	431a      	orrs	r2, r3
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	691b      	ldr	r3, [r3, #16]
 800596a:	431a      	orrs	r2, r3
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	695b      	ldr	r3, [r3, #20]
 8005970:	431a      	orrs	r2, r3
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	699b      	ldr	r3, [r3, #24]
 8005976:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800597a:	431a      	orrs	r2, r3
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	69db      	ldr	r3, [r3, #28]
 8005980:	431a      	orrs	r2, r3
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6a1b      	ldr	r3, [r3, #32]
 8005986:	ea42 0103 	orr.w	r1, r2, r3
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	430a      	orrs	r2, r1
 8005994:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	699b      	ldr	r3, [r3, #24]
 800599a:	0c1b      	lsrs	r3, r3, #16
 800599c:	f003 0104 	and.w	r1, r3, #4
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	430a      	orrs	r2, r1
 80059aa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	69da      	ldr	r2, [r3, #28]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80059ba:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2200      	movs	r2, #0
 80059c0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2201      	movs	r2, #1
 80059c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80059ca:	2300      	movs	r3, #0
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	3708      	adds	r7, #8
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bd80      	pop	{r7, pc}

080059d4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b088      	sub	sp, #32
 80059d8:	af00      	add	r7, sp, #0
 80059da:	60f8      	str	r0, [r7, #12]
 80059dc:	60b9      	str	r1, [r7, #8]
 80059de:	603b      	str	r3, [r7, #0]
 80059e0:	4613      	mov	r3, r2
 80059e2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80059e4:	2300      	movs	r3, #0
 80059e6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80059ee:	2b01      	cmp	r3, #1
 80059f0:	d101      	bne.n	80059f6 <HAL_SPI_Transmit+0x22>
 80059f2:	2302      	movs	r3, #2
 80059f4:	e11e      	b.n	8005c34 <HAL_SPI_Transmit+0x260>
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2201      	movs	r2, #1
 80059fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80059fe:	f7ff f83d 	bl	8004a7c <HAL_GetTick>
 8005a02:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005a04:	88fb      	ldrh	r3, [r7, #6]
 8005a06:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005a0e:	b2db      	uxtb	r3, r3
 8005a10:	2b01      	cmp	r3, #1
 8005a12:	d002      	beq.n	8005a1a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005a14:	2302      	movs	r3, #2
 8005a16:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005a18:	e103      	b.n	8005c22 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d002      	beq.n	8005a26 <HAL_SPI_Transmit+0x52>
 8005a20:	88fb      	ldrh	r3, [r7, #6]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d102      	bne.n	8005a2c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005a26:	2301      	movs	r3, #1
 8005a28:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005a2a:	e0fa      	b.n	8005c22 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	2203      	movs	r2, #3
 8005a30:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	2200      	movs	r2, #0
 8005a38:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	68ba      	ldr	r2, [r7, #8]
 8005a3e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	88fa      	ldrh	r2, [r7, #6]
 8005a44:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	88fa      	ldrh	r2, [r7, #6]
 8005a4a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	2200      	movs	r2, #0
 8005a56:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	2200      	movs	r2, #0
 8005a62:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	2200      	movs	r2, #0
 8005a68:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	689b      	ldr	r3, [r3, #8]
 8005a6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a72:	d107      	bne.n	8005a84 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	681a      	ldr	r2, [r3, #0]
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005a82:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a8e:	2b40      	cmp	r3, #64	; 0x40
 8005a90:	d007      	beq.n	8005aa2 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	681a      	ldr	r2, [r3, #0]
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005aa0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	68db      	ldr	r3, [r3, #12]
 8005aa6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005aaa:	d14b      	bne.n	8005b44 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	685b      	ldr	r3, [r3, #4]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d002      	beq.n	8005aba <HAL_SPI_Transmit+0xe6>
 8005ab4:	8afb      	ldrh	r3, [r7, #22]
 8005ab6:	2b01      	cmp	r3, #1
 8005ab8:	d13e      	bne.n	8005b38 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005abe:	881a      	ldrh	r2, [r3, #0]
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aca:	1c9a      	adds	r2, r3, #2
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ad4:	b29b      	uxth	r3, r3
 8005ad6:	3b01      	subs	r3, #1
 8005ad8:	b29a      	uxth	r2, r3
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005ade:	e02b      	b.n	8005b38 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	689b      	ldr	r3, [r3, #8]
 8005ae6:	f003 0302 	and.w	r3, r3, #2
 8005aea:	2b02      	cmp	r3, #2
 8005aec:	d112      	bne.n	8005b14 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005af2:	881a      	ldrh	r2, [r3, #0]
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005afe:	1c9a      	adds	r2, r3, #2
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b08:	b29b      	uxth	r3, r3
 8005b0a:	3b01      	subs	r3, #1
 8005b0c:	b29a      	uxth	r2, r3
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	86da      	strh	r2, [r3, #54]	; 0x36
 8005b12:	e011      	b.n	8005b38 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b14:	f7fe ffb2 	bl	8004a7c <HAL_GetTick>
 8005b18:	4602      	mov	r2, r0
 8005b1a:	69bb      	ldr	r3, [r7, #24]
 8005b1c:	1ad3      	subs	r3, r2, r3
 8005b1e:	683a      	ldr	r2, [r7, #0]
 8005b20:	429a      	cmp	r2, r3
 8005b22:	d803      	bhi.n	8005b2c <HAL_SPI_Transmit+0x158>
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b2a:	d102      	bne.n	8005b32 <HAL_SPI_Transmit+0x15e>
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d102      	bne.n	8005b38 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8005b32:	2303      	movs	r3, #3
 8005b34:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005b36:	e074      	b.n	8005c22 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b3c:	b29b      	uxth	r3, r3
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d1ce      	bne.n	8005ae0 <HAL_SPI_Transmit+0x10c>
 8005b42:	e04c      	b.n	8005bde <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d002      	beq.n	8005b52 <HAL_SPI_Transmit+0x17e>
 8005b4c:	8afb      	ldrh	r3, [r7, #22]
 8005b4e:	2b01      	cmp	r3, #1
 8005b50:	d140      	bne.n	8005bd4 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	330c      	adds	r3, #12
 8005b5c:	7812      	ldrb	r2, [r2, #0]
 8005b5e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b64:	1c5a      	adds	r2, r3, #1
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b6e:	b29b      	uxth	r3, r3
 8005b70:	3b01      	subs	r3, #1
 8005b72:	b29a      	uxth	r2, r3
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005b78:	e02c      	b.n	8005bd4 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	689b      	ldr	r3, [r3, #8]
 8005b80:	f003 0302 	and.w	r3, r3, #2
 8005b84:	2b02      	cmp	r3, #2
 8005b86:	d113      	bne.n	8005bb0 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	330c      	adds	r3, #12
 8005b92:	7812      	ldrb	r2, [r2, #0]
 8005b94:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b9a:	1c5a      	adds	r2, r3, #1
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ba4:	b29b      	uxth	r3, r3
 8005ba6:	3b01      	subs	r3, #1
 8005ba8:	b29a      	uxth	r2, r3
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	86da      	strh	r2, [r3, #54]	; 0x36
 8005bae:	e011      	b.n	8005bd4 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005bb0:	f7fe ff64 	bl	8004a7c <HAL_GetTick>
 8005bb4:	4602      	mov	r2, r0
 8005bb6:	69bb      	ldr	r3, [r7, #24]
 8005bb8:	1ad3      	subs	r3, r2, r3
 8005bba:	683a      	ldr	r2, [r7, #0]
 8005bbc:	429a      	cmp	r2, r3
 8005bbe:	d803      	bhi.n	8005bc8 <HAL_SPI_Transmit+0x1f4>
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bc6:	d102      	bne.n	8005bce <HAL_SPI_Transmit+0x1fa>
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d102      	bne.n	8005bd4 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8005bce:	2303      	movs	r3, #3
 8005bd0:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005bd2:	e026      	b.n	8005c22 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005bd8:	b29b      	uxth	r3, r3
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d1cd      	bne.n	8005b7a <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005bde:	69ba      	ldr	r2, [r7, #24]
 8005be0:	6839      	ldr	r1, [r7, #0]
 8005be2:	68f8      	ldr	r0, [r7, #12]
 8005be4:	f000 fba4 	bl	8006330 <SPI_EndRxTxTransaction>
 8005be8:	4603      	mov	r3, r0
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d002      	beq.n	8005bf4 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	2220      	movs	r2, #32
 8005bf2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d10a      	bne.n	8005c12 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	613b      	str	r3, [r7, #16]
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	68db      	ldr	r3, [r3, #12]
 8005c06:	613b      	str	r3, [r7, #16]
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	689b      	ldr	r3, [r3, #8]
 8005c0e:	613b      	str	r3, [r7, #16]
 8005c10:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d002      	beq.n	8005c20 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	77fb      	strb	r3, [r7, #31]
 8005c1e:	e000      	b.n	8005c22 <HAL_SPI_Transmit+0x24e>
  }

error:
 8005c20:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	2201      	movs	r2, #1
 8005c26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005c32:	7ffb      	ldrb	r3, [r7, #31]
}
 8005c34:	4618      	mov	r0, r3
 8005c36:	3720      	adds	r7, #32
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	bd80      	pop	{r7, pc}

08005c3c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b088      	sub	sp, #32
 8005c40:	af02      	add	r7, sp, #8
 8005c42:	60f8      	str	r0, [r7, #12]
 8005c44:	60b9      	str	r1, [r7, #8]
 8005c46:	603b      	str	r3, [r7, #0]
 8005c48:	4613      	mov	r3, r2
 8005c4a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c58:	d112      	bne.n	8005c80 <HAL_SPI_Receive+0x44>
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	689b      	ldr	r3, [r3, #8]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d10e      	bne.n	8005c80 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	2204      	movs	r2, #4
 8005c66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005c6a:	88fa      	ldrh	r2, [r7, #6]
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	9300      	str	r3, [sp, #0]
 8005c70:	4613      	mov	r3, r2
 8005c72:	68ba      	ldr	r2, [r7, #8]
 8005c74:	68b9      	ldr	r1, [r7, #8]
 8005c76:	68f8      	ldr	r0, [r7, #12]
 8005c78:	f000 f8e9 	bl	8005e4e <HAL_SPI_TransmitReceive>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	e0e2      	b.n	8005e46 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005c86:	2b01      	cmp	r3, #1
 8005c88:	d101      	bne.n	8005c8e <HAL_SPI_Receive+0x52>
 8005c8a:	2302      	movs	r3, #2
 8005c8c:	e0db      	b.n	8005e46 <HAL_SPI_Receive+0x20a>
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	2201      	movs	r2, #1
 8005c92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005c96:	f7fe fef1 	bl	8004a7c <HAL_GetTick>
 8005c9a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005ca2:	b2db      	uxtb	r3, r3
 8005ca4:	2b01      	cmp	r3, #1
 8005ca6:	d002      	beq.n	8005cae <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005ca8:	2302      	movs	r3, #2
 8005caa:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005cac:	e0c2      	b.n	8005e34 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d002      	beq.n	8005cba <HAL_SPI_Receive+0x7e>
 8005cb4:	88fb      	ldrh	r3, [r7, #6]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d102      	bne.n	8005cc0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005cba:	2301      	movs	r3, #1
 8005cbc:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005cbe:	e0b9      	b.n	8005e34 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	2204      	movs	r2, #4
 8005cc4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	68ba      	ldr	r2, [r7, #8]
 8005cd2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	88fa      	ldrh	r2, [r7, #6]
 8005cd8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	88fa      	ldrh	r2, [r7, #6]
 8005cde:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	689b      	ldr	r3, [r3, #8]
 8005d02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d06:	d107      	bne.n	8005d18 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	681a      	ldr	r2, [r3, #0]
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005d16:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d22:	2b40      	cmp	r3, #64	; 0x40
 8005d24:	d007      	beq.n	8005d36 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	681a      	ldr	r2, [r3, #0]
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d34:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	68db      	ldr	r3, [r3, #12]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d162      	bne.n	8005e04 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005d3e:	e02e      	b.n	8005d9e <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	689b      	ldr	r3, [r3, #8]
 8005d46:	f003 0301 	and.w	r3, r3, #1
 8005d4a:	2b01      	cmp	r3, #1
 8005d4c:	d115      	bne.n	8005d7a <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f103 020c 	add.w	r2, r3, #12
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d5a:	7812      	ldrb	r2, [r2, #0]
 8005d5c:	b2d2      	uxtb	r2, r2
 8005d5e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d64:	1c5a      	adds	r2, r3, #1
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d6e:	b29b      	uxth	r3, r3
 8005d70:	3b01      	subs	r3, #1
 8005d72:	b29a      	uxth	r2, r3
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005d78:	e011      	b.n	8005d9e <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d7a:	f7fe fe7f 	bl	8004a7c <HAL_GetTick>
 8005d7e:	4602      	mov	r2, r0
 8005d80:	693b      	ldr	r3, [r7, #16]
 8005d82:	1ad3      	subs	r3, r2, r3
 8005d84:	683a      	ldr	r2, [r7, #0]
 8005d86:	429a      	cmp	r2, r3
 8005d88:	d803      	bhi.n	8005d92 <HAL_SPI_Receive+0x156>
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d90:	d102      	bne.n	8005d98 <HAL_SPI_Receive+0x15c>
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d102      	bne.n	8005d9e <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8005d98:	2303      	movs	r3, #3
 8005d9a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005d9c:	e04a      	b.n	8005e34 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005da2:	b29b      	uxth	r3, r3
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d1cb      	bne.n	8005d40 <HAL_SPI_Receive+0x104>
 8005da8:	e031      	b.n	8005e0e <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	689b      	ldr	r3, [r3, #8]
 8005db0:	f003 0301 	and.w	r3, r3, #1
 8005db4:	2b01      	cmp	r3, #1
 8005db6:	d113      	bne.n	8005de0 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	68da      	ldr	r2, [r3, #12]
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dc2:	b292      	uxth	r2, r2
 8005dc4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dca:	1c9a      	adds	r2, r3, #2
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005dd4:	b29b      	uxth	r3, r3
 8005dd6:	3b01      	subs	r3, #1
 8005dd8:	b29a      	uxth	r2, r3
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005dde:	e011      	b.n	8005e04 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005de0:	f7fe fe4c 	bl	8004a7c <HAL_GetTick>
 8005de4:	4602      	mov	r2, r0
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	1ad3      	subs	r3, r2, r3
 8005dea:	683a      	ldr	r2, [r7, #0]
 8005dec:	429a      	cmp	r2, r3
 8005dee:	d803      	bhi.n	8005df8 <HAL_SPI_Receive+0x1bc>
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005df6:	d102      	bne.n	8005dfe <HAL_SPI_Receive+0x1c2>
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d102      	bne.n	8005e04 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8005dfe:	2303      	movs	r3, #3
 8005e00:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005e02:	e017      	b.n	8005e34 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e08:	b29b      	uxth	r3, r3
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d1cd      	bne.n	8005daa <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005e0e:	693a      	ldr	r2, [r7, #16]
 8005e10:	6839      	ldr	r1, [r7, #0]
 8005e12:	68f8      	ldr	r0, [r7, #12]
 8005e14:	f000 fa27 	bl	8006266 <SPI_EndRxTransaction>
 8005e18:	4603      	mov	r3, r0
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d002      	beq.n	8005e24 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	2220      	movs	r2, #32
 8005e22:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d002      	beq.n	8005e32 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	75fb      	strb	r3, [r7, #23]
 8005e30:	e000      	b.n	8005e34 <HAL_SPI_Receive+0x1f8>
  }

error :
 8005e32:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2201      	movs	r2, #1
 8005e38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005e44:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	3718      	adds	r7, #24
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bd80      	pop	{r7, pc}

08005e4e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005e4e:	b580      	push	{r7, lr}
 8005e50:	b08c      	sub	sp, #48	; 0x30
 8005e52:	af00      	add	r7, sp, #0
 8005e54:	60f8      	str	r0, [r7, #12]
 8005e56:	60b9      	str	r1, [r7, #8]
 8005e58:	607a      	str	r2, [r7, #4]
 8005e5a:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005e60:	2300      	movs	r3, #0
 8005e62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005e6c:	2b01      	cmp	r3, #1
 8005e6e:	d101      	bne.n	8005e74 <HAL_SPI_TransmitReceive+0x26>
 8005e70:	2302      	movs	r3, #2
 8005e72:	e18a      	b.n	800618a <HAL_SPI_TransmitReceive+0x33c>
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	2201      	movs	r2, #1
 8005e78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005e7c:	f7fe fdfe 	bl	8004a7c <HAL_GetTick>
 8005e80:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005e88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005e92:	887b      	ldrh	r3, [r7, #2]
 8005e94:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005e96:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005e9a:	2b01      	cmp	r3, #1
 8005e9c:	d00f      	beq.n	8005ebe <HAL_SPI_TransmitReceive+0x70>
 8005e9e:	69fb      	ldr	r3, [r7, #28]
 8005ea0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ea4:	d107      	bne.n	8005eb6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	689b      	ldr	r3, [r3, #8]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d103      	bne.n	8005eb6 <HAL_SPI_TransmitReceive+0x68>
 8005eae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005eb2:	2b04      	cmp	r3, #4
 8005eb4:	d003      	beq.n	8005ebe <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005eb6:	2302      	movs	r3, #2
 8005eb8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005ebc:	e15b      	b.n	8006176 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d005      	beq.n	8005ed0 <HAL_SPI_TransmitReceive+0x82>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d002      	beq.n	8005ed0 <HAL_SPI_TransmitReceive+0x82>
 8005eca:	887b      	ldrh	r3, [r7, #2]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d103      	bne.n	8005ed8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005ed6:	e14e      	b.n	8006176 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005ede:	b2db      	uxtb	r3, r3
 8005ee0:	2b04      	cmp	r3, #4
 8005ee2:	d003      	beq.n	8005eec <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	2205      	movs	r2, #5
 8005ee8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	687a      	ldr	r2, [r7, #4]
 8005ef6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	887a      	ldrh	r2, [r7, #2]
 8005efc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	887a      	ldrh	r2, [r7, #2]
 8005f02:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	68ba      	ldr	r2, [r7, #8]
 8005f08:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	887a      	ldrh	r2, [r7, #2]
 8005f0e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	887a      	ldrh	r2, [r7, #2]
 8005f14:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f2c:	2b40      	cmp	r3, #64	; 0x40
 8005f2e:	d007      	beq.n	8005f40 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	681a      	ldr	r2, [r3, #0]
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f3e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	68db      	ldr	r3, [r3, #12]
 8005f44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f48:	d178      	bne.n	800603c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d002      	beq.n	8005f58 <HAL_SPI_TransmitReceive+0x10a>
 8005f52:	8b7b      	ldrh	r3, [r7, #26]
 8005f54:	2b01      	cmp	r3, #1
 8005f56:	d166      	bne.n	8006026 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f5c:	881a      	ldrh	r2, [r3, #0]
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f68:	1c9a      	adds	r2, r3, #2
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f72:	b29b      	uxth	r3, r3
 8005f74:	3b01      	subs	r3, #1
 8005f76:	b29a      	uxth	r2, r3
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f7c:	e053      	b.n	8006026 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	689b      	ldr	r3, [r3, #8]
 8005f84:	f003 0302 	and.w	r3, r3, #2
 8005f88:	2b02      	cmp	r3, #2
 8005f8a:	d11b      	bne.n	8005fc4 <HAL_SPI_TransmitReceive+0x176>
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f90:	b29b      	uxth	r3, r3
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d016      	beq.n	8005fc4 <HAL_SPI_TransmitReceive+0x176>
 8005f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f98:	2b01      	cmp	r3, #1
 8005f9a:	d113      	bne.n	8005fc4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fa0:	881a      	ldrh	r2, [r3, #0]
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fac:	1c9a      	adds	r2, r3, #2
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005fb6:	b29b      	uxth	r3, r3
 8005fb8:	3b01      	subs	r3, #1
 8005fba:	b29a      	uxth	r2, r3
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	689b      	ldr	r3, [r3, #8]
 8005fca:	f003 0301 	and.w	r3, r3, #1
 8005fce:	2b01      	cmp	r3, #1
 8005fd0:	d119      	bne.n	8006006 <HAL_SPI_TransmitReceive+0x1b8>
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fd6:	b29b      	uxth	r3, r3
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d014      	beq.n	8006006 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	68da      	ldr	r2, [r3, #12]
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fe6:	b292      	uxth	r2, r2
 8005fe8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fee:	1c9a      	adds	r2, r3, #2
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ff8:	b29b      	uxth	r3, r3
 8005ffa:	3b01      	subs	r3, #1
 8005ffc:	b29a      	uxth	r2, r3
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006002:	2301      	movs	r3, #1
 8006004:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006006:	f7fe fd39 	bl	8004a7c <HAL_GetTick>
 800600a:	4602      	mov	r2, r0
 800600c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800600e:	1ad3      	subs	r3, r2, r3
 8006010:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006012:	429a      	cmp	r2, r3
 8006014:	d807      	bhi.n	8006026 <HAL_SPI_TransmitReceive+0x1d8>
 8006016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006018:	f1b3 3fff 	cmp.w	r3, #4294967295
 800601c:	d003      	beq.n	8006026 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800601e:	2303      	movs	r3, #3
 8006020:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006024:	e0a7      	b.n	8006176 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800602a:	b29b      	uxth	r3, r3
 800602c:	2b00      	cmp	r3, #0
 800602e:	d1a6      	bne.n	8005f7e <HAL_SPI_TransmitReceive+0x130>
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006034:	b29b      	uxth	r3, r3
 8006036:	2b00      	cmp	r3, #0
 8006038:	d1a1      	bne.n	8005f7e <HAL_SPI_TransmitReceive+0x130>
 800603a:	e07c      	b.n	8006136 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d002      	beq.n	800604a <HAL_SPI_TransmitReceive+0x1fc>
 8006044:	8b7b      	ldrh	r3, [r7, #26]
 8006046:	2b01      	cmp	r3, #1
 8006048:	d16b      	bne.n	8006122 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	330c      	adds	r3, #12
 8006054:	7812      	ldrb	r2, [r2, #0]
 8006056:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800605c:	1c5a      	adds	r2, r3, #1
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006066:	b29b      	uxth	r3, r3
 8006068:	3b01      	subs	r3, #1
 800606a:	b29a      	uxth	r2, r3
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006070:	e057      	b.n	8006122 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	689b      	ldr	r3, [r3, #8]
 8006078:	f003 0302 	and.w	r3, r3, #2
 800607c:	2b02      	cmp	r3, #2
 800607e:	d11c      	bne.n	80060ba <HAL_SPI_TransmitReceive+0x26c>
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006084:	b29b      	uxth	r3, r3
 8006086:	2b00      	cmp	r3, #0
 8006088:	d017      	beq.n	80060ba <HAL_SPI_TransmitReceive+0x26c>
 800608a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800608c:	2b01      	cmp	r3, #1
 800608e:	d114      	bne.n	80060ba <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	330c      	adds	r3, #12
 800609a:	7812      	ldrb	r2, [r2, #0]
 800609c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060a2:	1c5a      	adds	r2, r3, #1
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060ac:	b29b      	uxth	r3, r3
 80060ae:	3b01      	subs	r3, #1
 80060b0:	b29a      	uxth	r2, r3
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80060b6:	2300      	movs	r3, #0
 80060b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	689b      	ldr	r3, [r3, #8]
 80060c0:	f003 0301 	and.w	r3, r3, #1
 80060c4:	2b01      	cmp	r3, #1
 80060c6:	d119      	bne.n	80060fc <HAL_SPI_TransmitReceive+0x2ae>
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060cc:	b29b      	uxth	r3, r3
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d014      	beq.n	80060fc <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	68da      	ldr	r2, [r3, #12]
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060dc:	b2d2      	uxtb	r2, r2
 80060de:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060e4:	1c5a      	adds	r2, r3, #1
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060ee:	b29b      	uxth	r3, r3
 80060f0:	3b01      	subs	r3, #1
 80060f2:	b29a      	uxth	r2, r3
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80060f8:	2301      	movs	r3, #1
 80060fa:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80060fc:	f7fe fcbe 	bl	8004a7c <HAL_GetTick>
 8006100:	4602      	mov	r2, r0
 8006102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006104:	1ad3      	subs	r3, r2, r3
 8006106:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006108:	429a      	cmp	r2, r3
 800610a:	d803      	bhi.n	8006114 <HAL_SPI_TransmitReceive+0x2c6>
 800610c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800610e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006112:	d102      	bne.n	800611a <HAL_SPI_TransmitReceive+0x2cc>
 8006114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006116:	2b00      	cmp	r3, #0
 8006118:	d103      	bne.n	8006122 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800611a:	2303      	movs	r3, #3
 800611c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006120:	e029      	b.n	8006176 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006126:	b29b      	uxth	r3, r3
 8006128:	2b00      	cmp	r3, #0
 800612a:	d1a2      	bne.n	8006072 <HAL_SPI_TransmitReceive+0x224>
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006130:	b29b      	uxth	r3, r3
 8006132:	2b00      	cmp	r3, #0
 8006134:	d19d      	bne.n	8006072 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006136:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006138:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800613a:	68f8      	ldr	r0, [r7, #12]
 800613c:	f000 f8f8 	bl	8006330 <SPI_EndRxTxTransaction>
 8006140:	4603      	mov	r3, r0
 8006142:	2b00      	cmp	r3, #0
 8006144:	d006      	beq.n	8006154 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006146:	2301      	movs	r3, #1
 8006148:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	2220      	movs	r2, #32
 8006150:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006152:	e010      	b.n	8006176 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	689b      	ldr	r3, [r3, #8]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d10b      	bne.n	8006174 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800615c:	2300      	movs	r3, #0
 800615e:	617b      	str	r3, [r7, #20]
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	68db      	ldr	r3, [r3, #12]
 8006166:	617b      	str	r3, [r7, #20]
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	689b      	ldr	r3, [r3, #8]
 800616e:	617b      	str	r3, [r7, #20]
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	e000      	b.n	8006176 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006174:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	2201      	movs	r2, #1
 800617a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	2200      	movs	r2, #0
 8006182:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006186:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800618a:	4618      	mov	r0, r3
 800618c:	3730      	adds	r7, #48	; 0x30
 800618e:	46bd      	mov	sp, r7
 8006190:	bd80      	pop	{r7, pc}

08006192 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006192:	b580      	push	{r7, lr}
 8006194:	b084      	sub	sp, #16
 8006196:	af00      	add	r7, sp, #0
 8006198:	60f8      	str	r0, [r7, #12]
 800619a:	60b9      	str	r1, [r7, #8]
 800619c:	603b      	str	r3, [r7, #0]
 800619e:	4613      	mov	r3, r2
 80061a0:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80061a2:	e04c      	b.n	800623e <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061aa:	d048      	beq.n	800623e <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80061ac:	f7fe fc66 	bl	8004a7c <HAL_GetTick>
 80061b0:	4602      	mov	r2, r0
 80061b2:	69bb      	ldr	r3, [r7, #24]
 80061b4:	1ad3      	subs	r3, r2, r3
 80061b6:	683a      	ldr	r2, [r7, #0]
 80061b8:	429a      	cmp	r2, r3
 80061ba:	d902      	bls.n	80061c2 <SPI_WaitFlagStateUntilTimeout+0x30>
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d13d      	bne.n	800623e <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	685a      	ldr	r2, [r3, #4]
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80061d0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	685b      	ldr	r3, [r3, #4]
 80061d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80061da:	d111      	bne.n	8006200 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	689b      	ldr	r3, [r3, #8]
 80061e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061e4:	d004      	beq.n	80061f0 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	689b      	ldr	r3, [r3, #8]
 80061ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061ee:	d107      	bne.n	8006200 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	681a      	ldr	r2, [r3, #0]
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80061fe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006204:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006208:	d10f      	bne.n	800622a <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	681a      	ldr	r2, [r3, #0]
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006218:	601a      	str	r2, [r3, #0]
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	681a      	ldr	r2, [r3, #0]
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006228:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	2201      	movs	r2, #1
 800622e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	2200      	movs	r2, #0
 8006236:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800623a:	2303      	movs	r3, #3
 800623c:	e00f      	b.n	800625e <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	689a      	ldr	r2, [r3, #8]
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	4013      	ands	r3, r2
 8006248:	68ba      	ldr	r2, [r7, #8]
 800624a:	429a      	cmp	r2, r3
 800624c:	bf0c      	ite	eq
 800624e:	2301      	moveq	r3, #1
 8006250:	2300      	movne	r3, #0
 8006252:	b2db      	uxtb	r3, r3
 8006254:	461a      	mov	r2, r3
 8006256:	79fb      	ldrb	r3, [r7, #7]
 8006258:	429a      	cmp	r2, r3
 800625a:	d1a3      	bne.n	80061a4 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800625c:	2300      	movs	r3, #0
}
 800625e:	4618      	mov	r0, r3
 8006260:	3710      	adds	r7, #16
 8006262:	46bd      	mov	sp, r7
 8006264:	bd80      	pop	{r7, pc}

08006266 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006266:	b580      	push	{r7, lr}
 8006268:	b086      	sub	sp, #24
 800626a:	af02      	add	r7, sp, #8
 800626c:	60f8      	str	r0, [r7, #12]
 800626e:	60b9      	str	r1, [r7, #8]
 8006270:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	685b      	ldr	r3, [r3, #4]
 8006276:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800627a:	d111      	bne.n	80062a0 <SPI_EndRxTransaction+0x3a>
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	689b      	ldr	r3, [r3, #8]
 8006280:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006284:	d004      	beq.n	8006290 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	689b      	ldr	r3, [r3, #8]
 800628a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800628e:	d107      	bne.n	80062a0 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	681a      	ldr	r2, [r3, #0]
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800629e:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	685b      	ldr	r3, [r3, #4]
 80062a4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80062a8:	d12a      	bne.n	8006300 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	689b      	ldr	r3, [r3, #8]
 80062ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062b2:	d012      	beq.n	80062da <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	9300      	str	r3, [sp, #0]
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	2200      	movs	r2, #0
 80062bc:	2180      	movs	r1, #128	; 0x80
 80062be:	68f8      	ldr	r0, [r7, #12]
 80062c0:	f7ff ff67 	bl	8006192 <SPI_WaitFlagStateUntilTimeout>
 80062c4:	4603      	mov	r3, r0
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d02d      	beq.n	8006326 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062ce:	f043 0220 	orr.w	r2, r3, #32
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80062d6:	2303      	movs	r3, #3
 80062d8:	e026      	b.n	8006328 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	9300      	str	r3, [sp, #0]
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	2200      	movs	r2, #0
 80062e2:	2101      	movs	r1, #1
 80062e4:	68f8      	ldr	r0, [r7, #12]
 80062e6:	f7ff ff54 	bl	8006192 <SPI_WaitFlagStateUntilTimeout>
 80062ea:	4603      	mov	r3, r0
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d01a      	beq.n	8006326 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062f4:	f043 0220 	orr.w	r2, r3, #32
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80062fc:	2303      	movs	r3, #3
 80062fe:	e013      	b.n	8006328 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	9300      	str	r3, [sp, #0]
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	2200      	movs	r2, #0
 8006308:	2101      	movs	r1, #1
 800630a:	68f8      	ldr	r0, [r7, #12]
 800630c:	f7ff ff41 	bl	8006192 <SPI_WaitFlagStateUntilTimeout>
 8006310:	4603      	mov	r3, r0
 8006312:	2b00      	cmp	r3, #0
 8006314:	d007      	beq.n	8006326 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800631a:	f043 0220 	orr.w	r2, r3, #32
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006322:	2303      	movs	r3, #3
 8006324:	e000      	b.n	8006328 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006326:	2300      	movs	r3, #0
}
 8006328:	4618      	mov	r0, r3
 800632a:	3710      	adds	r7, #16
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}

08006330 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b088      	sub	sp, #32
 8006334:	af02      	add	r7, sp, #8
 8006336:	60f8      	str	r0, [r7, #12]
 8006338:	60b9      	str	r1, [r7, #8]
 800633a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800633c:	4b1b      	ldr	r3, [pc, #108]	; (80063ac <SPI_EndRxTxTransaction+0x7c>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a1b      	ldr	r2, [pc, #108]	; (80063b0 <SPI_EndRxTxTransaction+0x80>)
 8006342:	fba2 2303 	umull	r2, r3, r2, r3
 8006346:	0d5b      	lsrs	r3, r3, #21
 8006348:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800634c:	fb02 f303 	mul.w	r3, r2, r3
 8006350:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	685b      	ldr	r3, [r3, #4]
 8006356:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800635a:	d112      	bne.n	8006382 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	9300      	str	r3, [sp, #0]
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	2200      	movs	r2, #0
 8006364:	2180      	movs	r1, #128	; 0x80
 8006366:	68f8      	ldr	r0, [r7, #12]
 8006368:	f7ff ff13 	bl	8006192 <SPI_WaitFlagStateUntilTimeout>
 800636c:	4603      	mov	r3, r0
 800636e:	2b00      	cmp	r3, #0
 8006370:	d016      	beq.n	80063a0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006376:	f043 0220 	orr.w	r2, r3, #32
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800637e:	2303      	movs	r3, #3
 8006380:	e00f      	b.n	80063a2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d00a      	beq.n	800639e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006388:	697b      	ldr	r3, [r7, #20]
 800638a:	3b01      	subs	r3, #1
 800638c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	689b      	ldr	r3, [r3, #8]
 8006394:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006398:	2b80      	cmp	r3, #128	; 0x80
 800639a:	d0f2      	beq.n	8006382 <SPI_EndRxTxTransaction+0x52>
 800639c:	e000      	b.n	80063a0 <SPI_EndRxTxTransaction+0x70>
        break;
 800639e:	bf00      	nop
  }

  return HAL_OK;
 80063a0:	2300      	movs	r3, #0
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	3718      	adds	r7, #24
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}
 80063aa:	bf00      	nop
 80063ac:	20000478 	.word	0x20000478
 80063b0:	165e9f81 	.word	0x165e9f81

080063b4 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b084      	sub	sp, #16
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	60f8      	str	r0, [r7, #12]
 80063bc:	60b9      	str	r1, [r7, #8]
 80063be:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d101      	bne.n	80063ca <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 80063c6:	2301      	movs	r3, #1
 80063c8:	e034      	b.n	8006434 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80063d0:	b2db      	uxtb	r3, r3
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d106      	bne.n	80063e4 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	2200      	movs	r2, #0
 80063da:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80063de:	68f8      	ldr	r0, [r7, #12]
 80063e0:	f002 ffba 	bl	8009358 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681a      	ldr	r2, [r3, #0]
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	3308      	adds	r3, #8
 80063ec:	4619      	mov	r1, r3
 80063ee:	4610      	mov	r0, r2
 80063f0:	f000 fd9a 	bl	8006f28 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	6818      	ldr	r0, [r3, #0]
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	689b      	ldr	r3, [r3, #8]
 80063fc:	461a      	mov	r2, r3
 80063fe:	68b9      	ldr	r1, [r7, #8]
 8006400:	f000 fde4 	bl	8006fcc <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	6858      	ldr	r0, [r3, #4]
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	689a      	ldr	r2, [r3, #8]
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006410:	6879      	ldr	r1, [r7, #4]
 8006412:	f000 fe19 	bl	8007048 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	68fa      	ldr	r2, [r7, #12]
 800641c:	6892      	ldr	r2, [r2, #8]
 800641e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	68fa      	ldr	r2, [r7, #12]
 8006428:	6892      	ldr	r2, [r2, #8]
 800642a:	f041 0101 	orr.w	r1, r1, #1
 800642e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8006432:	2300      	movs	r3, #0
}
 8006434:	4618      	mov	r0, r3
 8006436:	3710      	adds	r7, #16
 8006438:	46bd      	mov	sp, r7
 800643a:	bd80      	pop	{r7, pc}

0800643c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b082      	sub	sp, #8
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d101      	bne.n	800644e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800644a:	2301      	movs	r3, #1
 800644c:	e03f      	b.n	80064ce <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006454:	b2db      	uxtb	r3, r3
 8006456:	2b00      	cmp	r3, #0
 8006458:	d106      	bne.n	8006468 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2200      	movs	r2, #0
 800645e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	f002 fef0 	bl	8009248 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2224      	movs	r2, #36	; 0x24
 800646c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	68da      	ldr	r2, [r3, #12]
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800647e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006480:	6878      	ldr	r0, [r7, #4]
 8006482:	f000 fb47 	bl	8006b14 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	691a      	ldr	r2, [r3, #16]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006494:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	695a      	ldr	r2, [r3, #20]
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80064a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	68da      	ldr	r2, [r3, #12]
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80064b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2200      	movs	r2, #0
 80064ba:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2220      	movs	r2, #32
 80064c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2220      	movs	r2, #32
 80064c8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80064cc:	2300      	movs	r3, #0
}
 80064ce:	4618      	mov	r0, r3
 80064d0:	3708      	adds	r7, #8
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}

080064d6 <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80064d6:	b580      	push	{r7, lr}
 80064d8:	b088      	sub	sp, #32
 80064da:	af02      	add	r7, sp, #8
 80064dc:	60f8      	str	r0, [r7, #12]
 80064de:	60b9      	str	r1, [r7, #8]
 80064e0:	603b      	str	r3, [r7, #0]
 80064e2:	4613      	mov	r3, r2
 80064e4:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80064e6:	2300      	movs	r3, #0
 80064e8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80064f0:	b2db      	uxtb	r3, r3
 80064f2:	2b20      	cmp	r3, #32
 80064f4:	f040 8083 	bne.w	80065fe <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d002      	beq.n	8006504 <HAL_UART_Transmit+0x2e>
 80064fe:	88fb      	ldrh	r3, [r7, #6]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d101      	bne.n	8006508 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8006504:	2301      	movs	r3, #1
 8006506:	e07b      	b.n	8006600 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800650e:	2b01      	cmp	r3, #1
 8006510:	d101      	bne.n	8006516 <HAL_UART_Transmit+0x40>
 8006512:	2302      	movs	r3, #2
 8006514:	e074      	b.n	8006600 <HAL_UART_Transmit+0x12a>
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	2201      	movs	r2, #1
 800651a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	2200      	movs	r2, #0
 8006522:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	2221      	movs	r2, #33	; 0x21
 8006528:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800652c:	f7fe faa6 	bl	8004a7c <HAL_GetTick>
 8006530:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	88fa      	ldrh	r2, [r7, #6]
 8006536:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	88fa      	ldrh	r2, [r7, #6]
 800653c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800653e:	e042      	b.n	80065c6 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006544:	b29b      	uxth	r3, r3
 8006546:	3b01      	subs	r3, #1
 8006548:	b29a      	uxth	r2, r3
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	689b      	ldr	r3, [r3, #8]
 8006552:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006556:	d122      	bne.n	800659e <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	9300      	str	r3, [sp, #0]
 800655c:	697b      	ldr	r3, [r7, #20]
 800655e:	2200      	movs	r2, #0
 8006560:	2180      	movs	r1, #128	; 0x80
 8006562:	68f8      	ldr	r0, [r7, #12]
 8006564:	f000 f96a 	bl	800683c <UART_WaitOnFlagUntilTimeout>
 8006568:	4603      	mov	r3, r0
 800656a:	2b00      	cmp	r3, #0
 800656c:	d001      	beq.n	8006572 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 800656e:	2303      	movs	r3, #3
 8006570:	e046      	b.n	8006600 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8006572:	68bb      	ldr	r3, [r7, #8]
 8006574:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8006576:	693b      	ldr	r3, [r7, #16]
 8006578:	881b      	ldrh	r3, [r3, #0]
 800657a:	461a      	mov	r2, r3
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006584:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	691b      	ldr	r3, [r3, #16]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d103      	bne.n	8006596 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	3302      	adds	r3, #2
 8006592:	60bb      	str	r3, [r7, #8]
 8006594:	e017      	b.n	80065c6 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	3301      	adds	r3, #1
 800659a:	60bb      	str	r3, [r7, #8]
 800659c:	e013      	b.n	80065c6 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	9300      	str	r3, [sp, #0]
 80065a2:	697b      	ldr	r3, [r7, #20]
 80065a4:	2200      	movs	r2, #0
 80065a6:	2180      	movs	r1, #128	; 0x80
 80065a8:	68f8      	ldr	r0, [r7, #12]
 80065aa:	f000 f947 	bl	800683c <UART_WaitOnFlagUntilTimeout>
 80065ae:	4603      	mov	r3, r0
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d001      	beq.n	80065b8 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 80065b4:	2303      	movs	r3, #3
 80065b6:	e023      	b.n	8006600 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	1c5a      	adds	r2, r3, #1
 80065bc:	60ba      	str	r2, [r7, #8]
 80065be:	781a      	ldrb	r2, [r3, #0]
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80065ca:	b29b      	uxth	r3, r3
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d1b7      	bne.n	8006540 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	9300      	str	r3, [sp, #0]
 80065d4:	697b      	ldr	r3, [r7, #20]
 80065d6:	2200      	movs	r2, #0
 80065d8:	2140      	movs	r1, #64	; 0x40
 80065da:	68f8      	ldr	r0, [r7, #12]
 80065dc:	f000 f92e 	bl	800683c <UART_WaitOnFlagUntilTimeout>
 80065e0:	4603      	mov	r3, r0
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d001      	beq.n	80065ea <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80065e6:	2303      	movs	r3, #3
 80065e8:	e00a      	b.n	8006600 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	2220      	movs	r2, #32
 80065ee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	2200      	movs	r2, #0
 80065f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80065fa:	2300      	movs	r3, #0
 80065fc:	e000      	b.n	8006600 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80065fe:	2302      	movs	r3, #2
  }
}
 8006600:	4618      	mov	r0, r3
 8006602:	3718      	adds	r7, #24
 8006604:	46bd      	mov	sp, r7
 8006606:	bd80      	pop	{r7, pc}

08006608 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b088      	sub	sp, #32
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	68db      	ldr	r3, [r3, #12]
 800661e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	695b      	ldr	r3, [r3, #20]
 8006626:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8006628:	2300      	movs	r3, #0
 800662a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800662c:	2300      	movs	r3, #0
 800662e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006630:	69fb      	ldr	r3, [r7, #28]
 8006632:	f003 030f 	and.w	r3, r3, #15
 8006636:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8006638:	693b      	ldr	r3, [r7, #16]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d10d      	bne.n	800665a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800663e:	69fb      	ldr	r3, [r7, #28]
 8006640:	f003 0320 	and.w	r3, r3, #32
 8006644:	2b00      	cmp	r3, #0
 8006646:	d008      	beq.n	800665a <HAL_UART_IRQHandler+0x52>
 8006648:	69bb      	ldr	r3, [r7, #24]
 800664a:	f003 0320 	and.w	r3, r3, #32
 800664e:	2b00      	cmp	r3, #0
 8006650:	d003      	beq.n	800665a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f000 f9dc 	bl	8006a10 <UART_Receive_IT>
      return;
 8006658:	e0cc      	b.n	80067f4 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	2b00      	cmp	r3, #0
 800665e:	f000 80ab 	beq.w	80067b8 <HAL_UART_IRQHandler+0x1b0>
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	f003 0301 	and.w	r3, r3, #1
 8006668:	2b00      	cmp	r3, #0
 800666a:	d105      	bne.n	8006678 <HAL_UART_IRQHandler+0x70>
 800666c:	69bb      	ldr	r3, [r7, #24]
 800666e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006672:	2b00      	cmp	r3, #0
 8006674:	f000 80a0 	beq.w	80067b8 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006678:	69fb      	ldr	r3, [r7, #28]
 800667a:	f003 0301 	and.w	r3, r3, #1
 800667e:	2b00      	cmp	r3, #0
 8006680:	d00a      	beq.n	8006698 <HAL_UART_IRQHandler+0x90>
 8006682:	69bb      	ldr	r3, [r7, #24]
 8006684:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006688:	2b00      	cmp	r3, #0
 800668a:	d005      	beq.n	8006698 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006690:	f043 0201 	orr.w	r2, r3, #1
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006698:	69fb      	ldr	r3, [r7, #28]
 800669a:	f003 0304 	and.w	r3, r3, #4
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d00a      	beq.n	80066b8 <HAL_UART_IRQHandler+0xb0>
 80066a2:	697b      	ldr	r3, [r7, #20]
 80066a4:	f003 0301 	and.w	r3, r3, #1
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d005      	beq.n	80066b8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066b0:	f043 0202 	orr.w	r2, r3, #2
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80066b8:	69fb      	ldr	r3, [r7, #28]
 80066ba:	f003 0302 	and.w	r3, r3, #2
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d00a      	beq.n	80066d8 <HAL_UART_IRQHandler+0xd0>
 80066c2:	697b      	ldr	r3, [r7, #20]
 80066c4:	f003 0301 	and.w	r3, r3, #1
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d005      	beq.n	80066d8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066d0:	f043 0204 	orr.w	r2, r3, #4
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80066d8:	69fb      	ldr	r3, [r7, #28]
 80066da:	f003 0308 	and.w	r3, r3, #8
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d00a      	beq.n	80066f8 <HAL_UART_IRQHandler+0xf0>
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	f003 0301 	and.w	r3, r3, #1
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d005      	beq.n	80066f8 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066f0:	f043 0208 	orr.w	r2, r3, #8
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d078      	beq.n	80067f2 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006700:	69fb      	ldr	r3, [r7, #28]
 8006702:	f003 0320 	and.w	r3, r3, #32
 8006706:	2b00      	cmp	r3, #0
 8006708:	d007      	beq.n	800671a <HAL_UART_IRQHandler+0x112>
 800670a:	69bb      	ldr	r3, [r7, #24]
 800670c:	f003 0320 	and.w	r3, r3, #32
 8006710:	2b00      	cmp	r3, #0
 8006712:	d002      	beq.n	800671a <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8006714:	6878      	ldr	r0, [r7, #4]
 8006716:	f000 f97b 	bl	8006a10 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	695b      	ldr	r3, [r3, #20]
 8006720:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006724:	2b40      	cmp	r3, #64	; 0x40
 8006726:	bf0c      	ite	eq
 8006728:	2301      	moveq	r3, #1
 800672a:	2300      	movne	r3, #0
 800672c:	b2db      	uxtb	r3, r3
 800672e:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006734:	f003 0308 	and.w	r3, r3, #8
 8006738:	2b00      	cmp	r3, #0
 800673a:	d102      	bne.n	8006742 <HAL_UART_IRQHandler+0x13a>
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d031      	beq.n	80067a6 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006742:	6878      	ldr	r0, [r7, #4]
 8006744:	f000 f8c4 	bl	80068d0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	695b      	ldr	r3, [r3, #20]
 800674e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006752:	2b40      	cmp	r3, #64	; 0x40
 8006754:	d123      	bne.n	800679e <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	695a      	ldr	r2, [r3, #20]
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006764:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800676a:	2b00      	cmp	r3, #0
 800676c:	d013      	beq.n	8006796 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006772:	4a22      	ldr	r2, [pc, #136]	; (80067fc <HAL_UART_IRQHandler+0x1f4>)
 8006774:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800677a:	4618      	mov	r0, r3
 800677c:	f7fe facd 	bl	8004d1a <HAL_DMA_Abort_IT>
 8006780:	4603      	mov	r3, r0
 8006782:	2b00      	cmp	r3, #0
 8006784:	d016      	beq.n	80067b4 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800678a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800678c:	687a      	ldr	r2, [r7, #4]
 800678e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006790:	4610      	mov	r0, r2
 8006792:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006794:	e00e      	b.n	80067b4 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	f000 f846 	bl	8006828 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800679c:	e00a      	b.n	80067b4 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	f000 f842 	bl	8006828 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067a4:	e006      	b.n	80067b4 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f000 f83e 	bl	8006828 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2200      	movs	r2, #0
 80067b0:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80067b2:	e01e      	b.n	80067f2 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067b4:	bf00      	nop
    return;
 80067b6:	e01c      	b.n	80067f2 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80067b8:	69fb      	ldr	r3, [r7, #28]
 80067ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d008      	beq.n	80067d4 <HAL_UART_IRQHandler+0x1cc>
 80067c2:	69bb      	ldr	r3, [r7, #24]
 80067c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d003      	beq.n	80067d4 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 80067cc:	6878      	ldr	r0, [r7, #4]
 80067ce:	f000 f8b1 	bl	8006934 <UART_Transmit_IT>
    return;
 80067d2:	e00f      	b.n	80067f4 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80067d4:	69fb      	ldr	r3, [r7, #28]
 80067d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d00a      	beq.n	80067f4 <HAL_UART_IRQHandler+0x1ec>
 80067de:	69bb      	ldr	r3, [r7, #24]
 80067e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d005      	beq.n	80067f4 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 80067e8:	6878      	ldr	r0, [r7, #4]
 80067ea:	f000 f8f9 	bl	80069e0 <UART_EndTransmit_IT>
    return;
 80067ee:	bf00      	nop
 80067f0:	e000      	b.n	80067f4 <HAL_UART_IRQHandler+0x1ec>
    return;
 80067f2:	bf00      	nop
  }
}
 80067f4:	3720      	adds	r7, #32
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd80      	pop	{r7, pc}
 80067fa:	bf00      	nop
 80067fc:	0800690d 	.word	0x0800690d

08006800 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006800:	b480      	push	{r7}
 8006802:	b083      	sub	sp, #12
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006808:	bf00      	nop
 800680a:	370c      	adds	r7, #12
 800680c:	46bd      	mov	sp, r7
 800680e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006812:	4770      	bx	lr

08006814 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006814:	b480      	push	{r7}
 8006816:	b083      	sub	sp, #12
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800681c:	bf00      	nop
 800681e:	370c      	adds	r7, #12
 8006820:	46bd      	mov	sp, r7
 8006822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006826:	4770      	bx	lr

08006828 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006828:	b480      	push	{r7}
 800682a:	b083      	sub	sp, #12
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006830:	bf00      	nop
 8006832:	370c      	adds	r7, #12
 8006834:	46bd      	mov	sp, r7
 8006836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683a:	4770      	bx	lr

0800683c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b084      	sub	sp, #16
 8006840:	af00      	add	r7, sp, #0
 8006842:	60f8      	str	r0, [r7, #12]
 8006844:	60b9      	str	r1, [r7, #8]
 8006846:	603b      	str	r3, [r7, #0]
 8006848:	4613      	mov	r3, r2
 800684a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800684c:	e02c      	b.n	80068a8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800684e:	69bb      	ldr	r3, [r7, #24]
 8006850:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006854:	d028      	beq.n	80068a8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006856:	69bb      	ldr	r3, [r7, #24]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d007      	beq.n	800686c <UART_WaitOnFlagUntilTimeout+0x30>
 800685c:	f7fe f90e 	bl	8004a7c <HAL_GetTick>
 8006860:	4602      	mov	r2, r0
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	1ad3      	subs	r3, r2, r3
 8006866:	69ba      	ldr	r2, [r7, #24]
 8006868:	429a      	cmp	r2, r3
 800686a:	d21d      	bcs.n	80068a8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	68da      	ldr	r2, [r3, #12]
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800687a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	695a      	ldr	r2, [r3, #20]
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f022 0201 	bic.w	r2, r2, #1
 800688a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	2220      	movs	r2, #32
 8006890:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	2220      	movs	r2, #32
 8006898:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	2200      	movs	r2, #0
 80068a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80068a4:	2303      	movs	r3, #3
 80068a6:	e00f      	b.n	80068c8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	681a      	ldr	r2, [r3, #0]
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	4013      	ands	r3, r2
 80068b2:	68ba      	ldr	r2, [r7, #8]
 80068b4:	429a      	cmp	r2, r3
 80068b6:	bf0c      	ite	eq
 80068b8:	2301      	moveq	r3, #1
 80068ba:	2300      	movne	r3, #0
 80068bc:	b2db      	uxtb	r3, r3
 80068be:	461a      	mov	r2, r3
 80068c0:	79fb      	ldrb	r3, [r7, #7]
 80068c2:	429a      	cmp	r2, r3
 80068c4:	d0c3      	beq.n	800684e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80068c6:	2300      	movs	r3, #0
}
 80068c8:	4618      	mov	r0, r3
 80068ca:	3710      	adds	r7, #16
 80068cc:	46bd      	mov	sp, r7
 80068ce:	bd80      	pop	{r7, pc}

080068d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80068d0:	b480      	push	{r7}
 80068d2:	b083      	sub	sp, #12
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	68da      	ldr	r2, [r3, #12]
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80068e6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	695a      	ldr	r2, [r3, #20]
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f022 0201 	bic.w	r2, r2, #1
 80068f6:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2220      	movs	r2, #32
 80068fc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8006900:	bf00      	nop
 8006902:	370c      	adds	r7, #12
 8006904:	46bd      	mov	sp, r7
 8006906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690a:	4770      	bx	lr

0800690c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b084      	sub	sp, #16
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006918:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	2200      	movs	r2, #0
 800691e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	2200      	movs	r2, #0
 8006924:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006926:	68f8      	ldr	r0, [r7, #12]
 8006928:	f7ff ff7e 	bl	8006828 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800692c:	bf00      	nop
 800692e:	3710      	adds	r7, #16
 8006930:	46bd      	mov	sp, r7
 8006932:	bd80      	pop	{r7, pc}

08006934 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006934:	b480      	push	{r7}
 8006936:	b085      	sub	sp, #20
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006942:	b2db      	uxtb	r3, r3
 8006944:	2b21      	cmp	r3, #33	; 0x21
 8006946:	d144      	bne.n	80069d2 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	689b      	ldr	r3, [r3, #8]
 800694c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006950:	d11a      	bne.n	8006988 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6a1b      	ldr	r3, [r3, #32]
 8006956:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	881b      	ldrh	r3, [r3, #0]
 800695c:	461a      	mov	r2, r3
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006966:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	691b      	ldr	r3, [r3, #16]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d105      	bne.n	800697c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6a1b      	ldr	r3, [r3, #32]
 8006974:	1c9a      	adds	r2, r3, #2
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	621a      	str	r2, [r3, #32]
 800697a:	e00e      	b.n	800699a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6a1b      	ldr	r3, [r3, #32]
 8006980:	1c5a      	adds	r2, r3, #1
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	621a      	str	r2, [r3, #32]
 8006986:	e008      	b.n	800699a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6a1b      	ldr	r3, [r3, #32]
 800698c:	1c59      	adds	r1, r3, #1
 800698e:	687a      	ldr	r2, [r7, #4]
 8006990:	6211      	str	r1, [r2, #32]
 8006992:	781a      	ldrb	r2, [r3, #0]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800699e:	b29b      	uxth	r3, r3
 80069a0:	3b01      	subs	r3, #1
 80069a2:	b29b      	uxth	r3, r3
 80069a4:	687a      	ldr	r2, [r7, #4]
 80069a6:	4619      	mov	r1, r3
 80069a8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d10f      	bne.n	80069ce <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	68da      	ldr	r2, [r3, #12]
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80069bc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	68da      	ldr	r2, [r3, #12]
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80069cc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80069ce:	2300      	movs	r3, #0
 80069d0:	e000      	b.n	80069d4 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80069d2:	2302      	movs	r3, #2
  }
}
 80069d4:	4618      	mov	r0, r3
 80069d6:	3714      	adds	r7, #20
 80069d8:	46bd      	mov	sp, r7
 80069da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069de:	4770      	bx	lr

080069e0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b082      	sub	sp, #8
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	68da      	ldr	r2, [r3, #12]
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80069f6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2220      	movs	r2, #32
 80069fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006a00:	6878      	ldr	r0, [r7, #4]
 8006a02:	f7ff fefd 	bl	8006800 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006a06:	2300      	movs	r3, #0
}
 8006a08:	4618      	mov	r0, r3
 8006a0a:	3708      	adds	r7, #8
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	bd80      	pop	{r7, pc}

08006a10 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b084      	sub	sp, #16
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006a1e:	b2db      	uxtb	r3, r3
 8006a20:	2b22      	cmp	r3, #34	; 0x22
 8006a22:	d171      	bne.n	8006b08 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	689b      	ldr	r3, [r3, #8]
 8006a28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a2c:	d123      	bne.n	8006a76 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a32:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	691b      	ldr	r3, [r3, #16]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d10e      	bne.n	8006a5a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	685b      	ldr	r3, [r3, #4]
 8006a42:	b29b      	uxth	r3, r3
 8006a44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a48:	b29a      	uxth	r2, r3
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a52:	1c9a      	adds	r2, r3, #2
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	629a      	str	r2, [r3, #40]	; 0x28
 8006a58:	e029      	b.n	8006aae <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	685b      	ldr	r3, [r3, #4]
 8006a60:	b29b      	uxth	r3, r3
 8006a62:	b2db      	uxtb	r3, r3
 8006a64:	b29a      	uxth	r2, r3
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a6e:	1c5a      	adds	r2, r3, #1
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	629a      	str	r2, [r3, #40]	; 0x28
 8006a74:	e01b      	b.n	8006aae <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	691b      	ldr	r3, [r3, #16]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d10a      	bne.n	8006a94 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	6858      	ldr	r0, [r3, #4]
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a88:	1c59      	adds	r1, r3, #1
 8006a8a:	687a      	ldr	r2, [r7, #4]
 8006a8c:	6291      	str	r1, [r2, #40]	; 0x28
 8006a8e:	b2c2      	uxtb	r2, r0
 8006a90:	701a      	strb	r2, [r3, #0]
 8006a92:	e00c      	b.n	8006aae <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	685b      	ldr	r3, [r3, #4]
 8006a9a:	b2da      	uxtb	r2, r3
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aa0:	1c58      	adds	r0, r3, #1
 8006aa2:	6879      	ldr	r1, [r7, #4]
 8006aa4:	6288      	str	r0, [r1, #40]	; 0x28
 8006aa6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006aaa:	b2d2      	uxtb	r2, r2
 8006aac:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006ab2:	b29b      	uxth	r3, r3
 8006ab4:	3b01      	subs	r3, #1
 8006ab6:	b29b      	uxth	r3, r3
 8006ab8:	687a      	ldr	r2, [r7, #4]
 8006aba:	4619      	mov	r1, r3
 8006abc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d120      	bne.n	8006b04 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	68da      	ldr	r2, [r3, #12]
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f022 0220 	bic.w	r2, r2, #32
 8006ad0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	68da      	ldr	r2, [r3, #12]
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006ae0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	695a      	ldr	r2, [r3, #20]
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f022 0201 	bic.w	r2, r2, #1
 8006af0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2220      	movs	r2, #32
 8006af6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f7ff fe8a 	bl	8006814 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8006b00:	2300      	movs	r3, #0
 8006b02:	e002      	b.n	8006b0a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8006b04:	2300      	movs	r3, #0
 8006b06:	e000      	b.n	8006b0a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8006b08:	2302      	movs	r3, #2
  }
}
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	3710      	adds	r7, #16
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	bd80      	pop	{r7, pc}
	...

08006b14 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b14:	b5b0      	push	{r4, r5, r7, lr}
 8006b16:	b084      	sub	sp, #16
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	691b      	ldr	r3, [r3, #16]
 8006b22:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	68da      	ldr	r2, [r3, #12]
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	430a      	orrs	r2, r1
 8006b30:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	689a      	ldr	r2, [r3, #8]
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	691b      	ldr	r3, [r3, #16]
 8006b3a:	431a      	orrs	r2, r3
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	695b      	ldr	r3, [r3, #20]
 8006b40:	431a      	orrs	r2, r3
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	69db      	ldr	r3, [r3, #28]
 8006b46:	4313      	orrs	r3, r2
 8006b48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	68db      	ldr	r3, [r3, #12]
 8006b50:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006b54:	f023 030c 	bic.w	r3, r3, #12
 8006b58:	687a      	ldr	r2, [r7, #4]
 8006b5a:	6812      	ldr	r2, [r2, #0]
 8006b5c:	68f9      	ldr	r1, [r7, #12]
 8006b5e:	430b      	orrs	r3, r1
 8006b60:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	695b      	ldr	r3, [r3, #20]
 8006b68:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	699a      	ldr	r2, [r3, #24]
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	430a      	orrs	r2, r1
 8006b76:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	69db      	ldr	r3, [r3, #28]
 8006b7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b80:	f040 80e4 	bne.w	8006d4c <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4aab      	ldr	r2, [pc, #684]	; (8006e38 <UART_SetConfig+0x324>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d004      	beq.n	8006b98 <UART_SetConfig+0x84>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4aaa      	ldr	r2, [pc, #680]	; (8006e3c <UART_SetConfig+0x328>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d16c      	bne.n	8006c72 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8006b98:	f7fe fea4 	bl	80058e4 <HAL_RCC_GetPCLK2Freq>
 8006b9c:	4602      	mov	r2, r0
 8006b9e:	4613      	mov	r3, r2
 8006ba0:	009b      	lsls	r3, r3, #2
 8006ba2:	4413      	add	r3, r2
 8006ba4:	009a      	lsls	r2, r3, #2
 8006ba6:	441a      	add	r2, r3
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	685b      	ldr	r3, [r3, #4]
 8006bac:	005b      	lsls	r3, r3, #1
 8006bae:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bb2:	4aa3      	ldr	r2, [pc, #652]	; (8006e40 <UART_SetConfig+0x32c>)
 8006bb4:	fba2 2303 	umull	r2, r3, r2, r3
 8006bb8:	095b      	lsrs	r3, r3, #5
 8006bba:	011c      	lsls	r4, r3, #4
 8006bbc:	f7fe fe92 	bl	80058e4 <HAL_RCC_GetPCLK2Freq>
 8006bc0:	4602      	mov	r2, r0
 8006bc2:	4613      	mov	r3, r2
 8006bc4:	009b      	lsls	r3, r3, #2
 8006bc6:	4413      	add	r3, r2
 8006bc8:	009a      	lsls	r2, r3, #2
 8006bca:	441a      	add	r2, r3
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	685b      	ldr	r3, [r3, #4]
 8006bd0:	005b      	lsls	r3, r3, #1
 8006bd2:	fbb2 f5f3 	udiv	r5, r2, r3
 8006bd6:	f7fe fe85 	bl	80058e4 <HAL_RCC_GetPCLK2Freq>
 8006bda:	4602      	mov	r2, r0
 8006bdc:	4613      	mov	r3, r2
 8006bde:	009b      	lsls	r3, r3, #2
 8006be0:	4413      	add	r3, r2
 8006be2:	009a      	lsls	r2, r3, #2
 8006be4:	441a      	add	r2, r3
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	685b      	ldr	r3, [r3, #4]
 8006bea:	005b      	lsls	r3, r3, #1
 8006bec:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bf0:	4a93      	ldr	r2, [pc, #588]	; (8006e40 <UART_SetConfig+0x32c>)
 8006bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8006bf6:	095b      	lsrs	r3, r3, #5
 8006bf8:	2264      	movs	r2, #100	; 0x64
 8006bfa:	fb02 f303 	mul.w	r3, r2, r3
 8006bfe:	1aeb      	subs	r3, r5, r3
 8006c00:	00db      	lsls	r3, r3, #3
 8006c02:	3332      	adds	r3, #50	; 0x32
 8006c04:	4a8e      	ldr	r2, [pc, #568]	; (8006e40 <UART_SetConfig+0x32c>)
 8006c06:	fba2 2303 	umull	r2, r3, r2, r3
 8006c0a:	095b      	lsrs	r3, r3, #5
 8006c0c:	005b      	lsls	r3, r3, #1
 8006c0e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006c12:	441c      	add	r4, r3
 8006c14:	f7fe fe66 	bl	80058e4 <HAL_RCC_GetPCLK2Freq>
 8006c18:	4602      	mov	r2, r0
 8006c1a:	4613      	mov	r3, r2
 8006c1c:	009b      	lsls	r3, r3, #2
 8006c1e:	4413      	add	r3, r2
 8006c20:	009a      	lsls	r2, r3, #2
 8006c22:	441a      	add	r2, r3
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	685b      	ldr	r3, [r3, #4]
 8006c28:	005b      	lsls	r3, r3, #1
 8006c2a:	fbb2 f5f3 	udiv	r5, r2, r3
 8006c2e:	f7fe fe59 	bl	80058e4 <HAL_RCC_GetPCLK2Freq>
 8006c32:	4602      	mov	r2, r0
 8006c34:	4613      	mov	r3, r2
 8006c36:	009b      	lsls	r3, r3, #2
 8006c38:	4413      	add	r3, r2
 8006c3a:	009a      	lsls	r2, r3, #2
 8006c3c:	441a      	add	r2, r3
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	685b      	ldr	r3, [r3, #4]
 8006c42:	005b      	lsls	r3, r3, #1
 8006c44:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c48:	4a7d      	ldr	r2, [pc, #500]	; (8006e40 <UART_SetConfig+0x32c>)
 8006c4a:	fba2 2303 	umull	r2, r3, r2, r3
 8006c4e:	095b      	lsrs	r3, r3, #5
 8006c50:	2264      	movs	r2, #100	; 0x64
 8006c52:	fb02 f303 	mul.w	r3, r2, r3
 8006c56:	1aeb      	subs	r3, r5, r3
 8006c58:	00db      	lsls	r3, r3, #3
 8006c5a:	3332      	adds	r3, #50	; 0x32
 8006c5c:	4a78      	ldr	r2, [pc, #480]	; (8006e40 <UART_SetConfig+0x32c>)
 8006c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8006c62:	095b      	lsrs	r3, r3, #5
 8006c64:	f003 0207 	and.w	r2, r3, #7
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	4422      	add	r2, r4
 8006c6e:	609a      	str	r2, [r3, #8]
 8006c70:	e154      	b.n	8006f1c <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8006c72:	f7fe fe23 	bl	80058bc <HAL_RCC_GetPCLK1Freq>
 8006c76:	4602      	mov	r2, r0
 8006c78:	4613      	mov	r3, r2
 8006c7a:	009b      	lsls	r3, r3, #2
 8006c7c:	4413      	add	r3, r2
 8006c7e:	009a      	lsls	r2, r3, #2
 8006c80:	441a      	add	r2, r3
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	685b      	ldr	r3, [r3, #4]
 8006c86:	005b      	lsls	r3, r3, #1
 8006c88:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c8c:	4a6c      	ldr	r2, [pc, #432]	; (8006e40 <UART_SetConfig+0x32c>)
 8006c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8006c92:	095b      	lsrs	r3, r3, #5
 8006c94:	011c      	lsls	r4, r3, #4
 8006c96:	f7fe fe11 	bl	80058bc <HAL_RCC_GetPCLK1Freq>
 8006c9a:	4602      	mov	r2, r0
 8006c9c:	4613      	mov	r3, r2
 8006c9e:	009b      	lsls	r3, r3, #2
 8006ca0:	4413      	add	r3, r2
 8006ca2:	009a      	lsls	r2, r3, #2
 8006ca4:	441a      	add	r2, r3
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	685b      	ldr	r3, [r3, #4]
 8006caa:	005b      	lsls	r3, r3, #1
 8006cac:	fbb2 f5f3 	udiv	r5, r2, r3
 8006cb0:	f7fe fe04 	bl	80058bc <HAL_RCC_GetPCLK1Freq>
 8006cb4:	4602      	mov	r2, r0
 8006cb6:	4613      	mov	r3, r2
 8006cb8:	009b      	lsls	r3, r3, #2
 8006cba:	4413      	add	r3, r2
 8006cbc:	009a      	lsls	r2, r3, #2
 8006cbe:	441a      	add	r2, r3
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	685b      	ldr	r3, [r3, #4]
 8006cc4:	005b      	lsls	r3, r3, #1
 8006cc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cca:	4a5d      	ldr	r2, [pc, #372]	; (8006e40 <UART_SetConfig+0x32c>)
 8006ccc:	fba2 2303 	umull	r2, r3, r2, r3
 8006cd0:	095b      	lsrs	r3, r3, #5
 8006cd2:	2264      	movs	r2, #100	; 0x64
 8006cd4:	fb02 f303 	mul.w	r3, r2, r3
 8006cd8:	1aeb      	subs	r3, r5, r3
 8006cda:	00db      	lsls	r3, r3, #3
 8006cdc:	3332      	adds	r3, #50	; 0x32
 8006cde:	4a58      	ldr	r2, [pc, #352]	; (8006e40 <UART_SetConfig+0x32c>)
 8006ce0:	fba2 2303 	umull	r2, r3, r2, r3
 8006ce4:	095b      	lsrs	r3, r3, #5
 8006ce6:	005b      	lsls	r3, r3, #1
 8006ce8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006cec:	441c      	add	r4, r3
 8006cee:	f7fe fde5 	bl	80058bc <HAL_RCC_GetPCLK1Freq>
 8006cf2:	4602      	mov	r2, r0
 8006cf4:	4613      	mov	r3, r2
 8006cf6:	009b      	lsls	r3, r3, #2
 8006cf8:	4413      	add	r3, r2
 8006cfa:	009a      	lsls	r2, r3, #2
 8006cfc:	441a      	add	r2, r3
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	685b      	ldr	r3, [r3, #4]
 8006d02:	005b      	lsls	r3, r3, #1
 8006d04:	fbb2 f5f3 	udiv	r5, r2, r3
 8006d08:	f7fe fdd8 	bl	80058bc <HAL_RCC_GetPCLK1Freq>
 8006d0c:	4602      	mov	r2, r0
 8006d0e:	4613      	mov	r3, r2
 8006d10:	009b      	lsls	r3, r3, #2
 8006d12:	4413      	add	r3, r2
 8006d14:	009a      	lsls	r2, r3, #2
 8006d16:	441a      	add	r2, r3
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	685b      	ldr	r3, [r3, #4]
 8006d1c:	005b      	lsls	r3, r3, #1
 8006d1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d22:	4a47      	ldr	r2, [pc, #284]	; (8006e40 <UART_SetConfig+0x32c>)
 8006d24:	fba2 2303 	umull	r2, r3, r2, r3
 8006d28:	095b      	lsrs	r3, r3, #5
 8006d2a:	2264      	movs	r2, #100	; 0x64
 8006d2c:	fb02 f303 	mul.w	r3, r2, r3
 8006d30:	1aeb      	subs	r3, r5, r3
 8006d32:	00db      	lsls	r3, r3, #3
 8006d34:	3332      	adds	r3, #50	; 0x32
 8006d36:	4a42      	ldr	r2, [pc, #264]	; (8006e40 <UART_SetConfig+0x32c>)
 8006d38:	fba2 2303 	umull	r2, r3, r2, r3
 8006d3c:	095b      	lsrs	r3, r3, #5
 8006d3e:	f003 0207 	and.w	r2, r3, #7
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4422      	add	r2, r4
 8006d48:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8006d4a:	e0e7      	b.n	8006f1c <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	4a39      	ldr	r2, [pc, #228]	; (8006e38 <UART_SetConfig+0x324>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d004      	beq.n	8006d60 <UART_SetConfig+0x24c>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	4a38      	ldr	r2, [pc, #224]	; (8006e3c <UART_SetConfig+0x328>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d171      	bne.n	8006e44 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8006d60:	f7fe fdc0 	bl	80058e4 <HAL_RCC_GetPCLK2Freq>
 8006d64:	4602      	mov	r2, r0
 8006d66:	4613      	mov	r3, r2
 8006d68:	009b      	lsls	r3, r3, #2
 8006d6a:	4413      	add	r3, r2
 8006d6c:	009a      	lsls	r2, r3, #2
 8006d6e:	441a      	add	r2, r3
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	685b      	ldr	r3, [r3, #4]
 8006d74:	009b      	lsls	r3, r3, #2
 8006d76:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d7a:	4a31      	ldr	r2, [pc, #196]	; (8006e40 <UART_SetConfig+0x32c>)
 8006d7c:	fba2 2303 	umull	r2, r3, r2, r3
 8006d80:	095b      	lsrs	r3, r3, #5
 8006d82:	011c      	lsls	r4, r3, #4
 8006d84:	f7fe fdae 	bl	80058e4 <HAL_RCC_GetPCLK2Freq>
 8006d88:	4602      	mov	r2, r0
 8006d8a:	4613      	mov	r3, r2
 8006d8c:	009b      	lsls	r3, r3, #2
 8006d8e:	4413      	add	r3, r2
 8006d90:	009a      	lsls	r2, r3, #2
 8006d92:	441a      	add	r2, r3
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	685b      	ldr	r3, [r3, #4]
 8006d98:	009b      	lsls	r3, r3, #2
 8006d9a:	fbb2 f5f3 	udiv	r5, r2, r3
 8006d9e:	f7fe fda1 	bl	80058e4 <HAL_RCC_GetPCLK2Freq>
 8006da2:	4602      	mov	r2, r0
 8006da4:	4613      	mov	r3, r2
 8006da6:	009b      	lsls	r3, r3, #2
 8006da8:	4413      	add	r3, r2
 8006daa:	009a      	lsls	r2, r3, #2
 8006dac:	441a      	add	r2, r3
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	685b      	ldr	r3, [r3, #4]
 8006db2:	009b      	lsls	r3, r3, #2
 8006db4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006db8:	4a21      	ldr	r2, [pc, #132]	; (8006e40 <UART_SetConfig+0x32c>)
 8006dba:	fba2 2303 	umull	r2, r3, r2, r3
 8006dbe:	095b      	lsrs	r3, r3, #5
 8006dc0:	2264      	movs	r2, #100	; 0x64
 8006dc2:	fb02 f303 	mul.w	r3, r2, r3
 8006dc6:	1aeb      	subs	r3, r5, r3
 8006dc8:	011b      	lsls	r3, r3, #4
 8006dca:	3332      	adds	r3, #50	; 0x32
 8006dcc:	4a1c      	ldr	r2, [pc, #112]	; (8006e40 <UART_SetConfig+0x32c>)
 8006dce:	fba2 2303 	umull	r2, r3, r2, r3
 8006dd2:	095b      	lsrs	r3, r3, #5
 8006dd4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006dd8:	441c      	add	r4, r3
 8006dda:	f7fe fd83 	bl	80058e4 <HAL_RCC_GetPCLK2Freq>
 8006dde:	4602      	mov	r2, r0
 8006de0:	4613      	mov	r3, r2
 8006de2:	009b      	lsls	r3, r3, #2
 8006de4:	4413      	add	r3, r2
 8006de6:	009a      	lsls	r2, r3, #2
 8006de8:	441a      	add	r2, r3
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	685b      	ldr	r3, [r3, #4]
 8006dee:	009b      	lsls	r3, r3, #2
 8006df0:	fbb2 f5f3 	udiv	r5, r2, r3
 8006df4:	f7fe fd76 	bl	80058e4 <HAL_RCC_GetPCLK2Freq>
 8006df8:	4602      	mov	r2, r0
 8006dfa:	4613      	mov	r3, r2
 8006dfc:	009b      	lsls	r3, r3, #2
 8006dfe:	4413      	add	r3, r2
 8006e00:	009a      	lsls	r2, r3, #2
 8006e02:	441a      	add	r2, r3
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	685b      	ldr	r3, [r3, #4]
 8006e08:	009b      	lsls	r3, r3, #2
 8006e0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e0e:	4a0c      	ldr	r2, [pc, #48]	; (8006e40 <UART_SetConfig+0x32c>)
 8006e10:	fba2 2303 	umull	r2, r3, r2, r3
 8006e14:	095b      	lsrs	r3, r3, #5
 8006e16:	2264      	movs	r2, #100	; 0x64
 8006e18:	fb02 f303 	mul.w	r3, r2, r3
 8006e1c:	1aeb      	subs	r3, r5, r3
 8006e1e:	011b      	lsls	r3, r3, #4
 8006e20:	3332      	adds	r3, #50	; 0x32
 8006e22:	4a07      	ldr	r2, [pc, #28]	; (8006e40 <UART_SetConfig+0x32c>)
 8006e24:	fba2 2303 	umull	r2, r3, r2, r3
 8006e28:	095b      	lsrs	r3, r3, #5
 8006e2a:	f003 020f 	and.w	r2, r3, #15
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	4422      	add	r2, r4
 8006e34:	609a      	str	r2, [r3, #8]
 8006e36:	e071      	b.n	8006f1c <UART_SetConfig+0x408>
 8006e38:	40011000 	.word	0x40011000
 8006e3c:	40011400 	.word	0x40011400
 8006e40:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8006e44:	f7fe fd3a 	bl	80058bc <HAL_RCC_GetPCLK1Freq>
 8006e48:	4602      	mov	r2, r0
 8006e4a:	4613      	mov	r3, r2
 8006e4c:	009b      	lsls	r3, r3, #2
 8006e4e:	4413      	add	r3, r2
 8006e50:	009a      	lsls	r2, r3, #2
 8006e52:	441a      	add	r2, r3
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	685b      	ldr	r3, [r3, #4]
 8006e58:	009b      	lsls	r3, r3, #2
 8006e5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e5e:	4a31      	ldr	r2, [pc, #196]	; (8006f24 <UART_SetConfig+0x410>)
 8006e60:	fba2 2303 	umull	r2, r3, r2, r3
 8006e64:	095b      	lsrs	r3, r3, #5
 8006e66:	011c      	lsls	r4, r3, #4
 8006e68:	f7fe fd28 	bl	80058bc <HAL_RCC_GetPCLK1Freq>
 8006e6c:	4602      	mov	r2, r0
 8006e6e:	4613      	mov	r3, r2
 8006e70:	009b      	lsls	r3, r3, #2
 8006e72:	4413      	add	r3, r2
 8006e74:	009a      	lsls	r2, r3, #2
 8006e76:	441a      	add	r2, r3
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	685b      	ldr	r3, [r3, #4]
 8006e7c:	009b      	lsls	r3, r3, #2
 8006e7e:	fbb2 f5f3 	udiv	r5, r2, r3
 8006e82:	f7fe fd1b 	bl	80058bc <HAL_RCC_GetPCLK1Freq>
 8006e86:	4602      	mov	r2, r0
 8006e88:	4613      	mov	r3, r2
 8006e8a:	009b      	lsls	r3, r3, #2
 8006e8c:	4413      	add	r3, r2
 8006e8e:	009a      	lsls	r2, r3, #2
 8006e90:	441a      	add	r2, r3
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	685b      	ldr	r3, [r3, #4]
 8006e96:	009b      	lsls	r3, r3, #2
 8006e98:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e9c:	4a21      	ldr	r2, [pc, #132]	; (8006f24 <UART_SetConfig+0x410>)
 8006e9e:	fba2 2303 	umull	r2, r3, r2, r3
 8006ea2:	095b      	lsrs	r3, r3, #5
 8006ea4:	2264      	movs	r2, #100	; 0x64
 8006ea6:	fb02 f303 	mul.w	r3, r2, r3
 8006eaa:	1aeb      	subs	r3, r5, r3
 8006eac:	011b      	lsls	r3, r3, #4
 8006eae:	3332      	adds	r3, #50	; 0x32
 8006eb0:	4a1c      	ldr	r2, [pc, #112]	; (8006f24 <UART_SetConfig+0x410>)
 8006eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8006eb6:	095b      	lsrs	r3, r3, #5
 8006eb8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006ebc:	441c      	add	r4, r3
 8006ebe:	f7fe fcfd 	bl	80058bc <HAL_RCC_GetPCLK1Freq>
 8006ec2:	4602      	mov	r2, r0
 8006ec4:	4613      	mov	r3, r2
 8006ec6:	009b      	lsls	r3, r3, #2
 8006ec8:	4413      	add	r3, r2
 8006eca:	009a      	lsls	r2, r3, #2
 8006ecc:	441a      	add	r2, r3
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	685b      	ldr	r3, [r3, #4]
 8006ed2:	009b      	lsls	r3, r3, #2
 8006ed4:	fbb2 f5f3 	udiv	r5, r2, r3
 8006ed8:	f7fe fcf0 	bl	80058bc <HAL_RCC_GetPCLK1Freq>
 8006edc:	4602      	mov	r2, r0
 8006ede:	4613      	mov	r3, r2
 8006ee0:	009b      	lsls	r3, r3, #2
 8006ee2:	4413      	add	r3, r2
 8006ee4:	009a      	lsls	r2, r3, #2
 8006ee6:	441a      	add	r2, r3
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	685b      	ldr	r3, [r3, #4]
 8006eec:	009b      	lsls	r3, r3, #2
 8006eee:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ef2:	4a0c      	ldr	r2, [pc, #48]	; (8006f24 <UART_SetConfig+0x410>)
 8006ef4:	fba2 2303 	umull	r2, r3, r2, r3
 8006ef8:	095b      	lsrs	r3, r3, #5
 8006efa:	2264      	movs	r2, #100	; 0x64
 8006efc:	fb02 f303 	mul.w	r3, r2, r3
 8006f00:	1aeb      	subs	r3, r5, r3
 8006f02:	011b      	lsls	r3, r3, #4
 8006f04:	3332      	adds	r3, #50	; 0x32
 8006f06:	4a07      	ldr	r2, [pc, #28]	; (8006f24 <UART_SetConfig+0x410>)
 8006f08:	fba2 2303 	umull	r2, r3, r2, r3
 8006f0c:	095b      	lsrs	r3, r3, #5
 8006f0e:	f003 020f 	and.w	r2, r3, #15
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	4422      	add	r2, r4
 8006f18:	609a      	str	r2, [r3, #8]
}
 8006f1a:	e7ff      	b.n	8006f1c <UART_SetConfig+0x408>
 8006f1c:	bf00      	nop
 8006f1e:	3710      	adds	r7, #16
 8006f20:	46bd      	mov	sp, r7
 8006f22:	bdb0      	pop	{r4, r5, r7, pc}
 8006f24:	51eb851f 	.word	0x51eb851f

08006f28 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8006f28:	b480      	push	{r7}
 8006f2a:	b085      	sub	sp, #20
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
 8006f30:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8006f32:	2300      	movs	r3, #0
 8006f34:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	681a      	ldr	r2, [r3, #0]
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f40:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 8006f42:	68fa      	ldr	r2, [r7, #12]
 8006f44:	4b20      	ldr	r3, [pc, #128]	; (8006fc8 <FSMC_NORSRAM_Init+0xa0>)
 8006f46:	4013      	ands	r3, r2
 8006f48:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8006f52:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8006f58:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 8006f5e:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8006f64:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 8006f6a:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 8006f70:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 8006f76:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 8006f7c:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 8006f82:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 8006f88:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 8006f8e:	431a      	orrs	r2, r3
                     Init->WriteBurst
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 8006f94:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8006f96:	68fa      	ldr	r2, [r7, #12]
 8006f98:	4313      	orrs	r3, r2
 8006f9a:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	689b      	ldr	r3, [r3, #8]
 8006fa0:	2b08      	cmp	r3, #8
 8006fa2:	d103      	bne.n	8006fac <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006faa:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	681a      	ldr	r2, [r3, #0]
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	68f9      	ldr	r1, [r7, #12]
 8006fb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8006fb8:	2300      	movs	r3, #0
}
 8006fba:	4618      	mov	r0, r3
 8006fbc:	3714      	adds	r7, #20
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc4:	4770      	bx	lr
 8006fc6:	bf00      	nop
 8006fc8:	fff00080 	.word	0xfff00080

08006fcc <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006fcc:	b480      	push	{r7}
 8006fce:	b087      	sub	sp, #28
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	60f8      	str	r0, [r7, #12]
 8006fd4:	60b9      	str	r1, [r7, #8]
 8006fd6:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8006fd8:	2300      	movs	r3, #0
 8006fda:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	1c5a      	adds	r2, r3, #1
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fe6:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8006fe8:	697b      	ldr	r3, [r7, #20]
 8006fea:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8006fee:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	685b      	ldr	r3, [r3, #4]
 8006ff8:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006ffa:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	689b      	ldr	r3, [r3, #8]
 8007000:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 8007002:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	68db      	ldr	r3, [r3, #12]
 8007008:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 800700a:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	691b      	ldr	r3, [r3, #16]
 8007010:	3b01      	subs	r3, #1
 8007012:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8007014:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 8007016:	68bb      	ldr	r3, [r7, #8]
 8007018:	695b      	ldr	r3, [r3, #20]
 800701a:	3b02      	subs	r3, #2
 800701c:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800701e:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8007020:	68bb      	ldr	r3, [r7, #8]
 8007022:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007024:	4313      	orrs	r3, r2
 8007026:	697a      	ldr	r2, [r7, #20]
 8007028:	4313      	orrs	r3, r2
 800702a:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	1c5a      	adds	r2, r3, #1
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	6979      	ldr	r1, [r7, #20]
 8007034:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8007038:	2300      	movs	r3, #0
}
 800703a:	4618      	mov	r0, r3
 800703c:	371c      	adds	r7, #28
 800703e:	46bd      	mov	sp, r7
 8007040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007044:	4770      	bx	lr
	...

08007048 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8007048:	b480      	push	{r7}
 800704a:	b087      	sub	sp, #28
 800704c:	af00      	add	r7, sp, #0
 800704e:	60f8      	str	r0, [r7, #12]
 8007050:	60b9      	str	r1, [r7, #8]
 8007052:	607a      	str	r2, [r7, #4]
 8007054:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 8007056:	2300      	movs	r3, #0
 8007058:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007060:	d122      	bne.n	80070a8 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	687a      	ldr	r2, [r7, #4]
 8007066:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800706a:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 800706c:	697a      	ldr	r2, [r7, #20]
 800706e:	4b15      	ldr	r3, [pc, #84]	; (80070c4 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8007070:	4013      	ands	r3, r2
 8007072:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007074:	68bb      	ldr	r3, [r7, #8]
 8007076:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	685b      	ldr	r3, [r3, #4]
 800707c:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800707e:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8007080:	68bb      	ldr	r3, [r7, #8]
 8007082:	689b      	ldr	r3, [r3, #8]
 8007084:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 8007086:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8007088:	68bb      	ldr	r3, [r7, #8]
 800708a:	68db      	ldr	r3, [r3, #12]
 800708c:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 800708e:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8007094:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007096:	697a      	ldr	r2, [r7, #20]
 8007098:	4313      	orrs	r3, r2
 800709a:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	687a      	ldr	r2, [r7, #4]
 80070a0:	6979      	ldr	r1, [r7, #20]
 80070a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80070a6:	e005      	b.n	80070b4 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	687a      	ldr	r2, [r7, #4]
 80070ac:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80070b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 80070b4:	2300      	movs	r3, #0
}
 80070b6:	4618      	mov	r0, r3
 80070b8:	371c      	adds	r7, #28
 80070ba:	46bd      	mov	sp, r7
 80070bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c0:	4770      	bx	lr
 80070c2:	bf00      	nop
 80070c4:	cff00000 	.word	0xcff00000

080070c8 <aiInit>:
   "Eight", "Nine"};
/*
 * Init function to create and initialize a NN.
 */
int aiInit(const ai_u8* activations)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b08e      	sub	sp, #56	; 0x38
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
    ai_error err;

    /* 1 - Specific AI data structure to provide the references of the
     * activation/working memory chunk and the weights/bias parameters */
    const ai_network_params params = {
 80070d0:	4b26      	ldr	r3, [pc, #152]	; (800716c <aiInit+0xa4>)
 80070d2:	60fb      	str	r3, [r7, #12]
 80070d4:	2301      	movs	r3, #1
 80070d6:	823b      	strh	r3, [r7, #16]
 80070d8:	2301      	movs	r3, #1
 80070da:	827b      	strh	r3, [r7, #18]
 80070dc:	2301      	movs	r3, #1
 80070de:	82bb      	strh	r3, [r7, #20]
 80070e0:	4b23      	ldr	r3, [pc, #140]	; (8007170 <aiInit+0xa8>)
 80070e2:	61bb      	str	r3, [r7, #24]
            AI_DIGITCLASSIFICATION_DATA_WEIGHTS(ai_digitclassification_data_weights_get()),
 80070e4:	f000 faec 	bl	80076c0 <ai_digitclassification_data_weights_get>
 80070e8:	4603      	mov	r3, r0
    const ai_network_params params = {
 80070ea:	61fb      	str	r3, [r7, #28]
 80070ec:	4b21      	ldr	r3, [pc, #132]	; (8007174 <aiInit+0xac>)
 80070ee:	623b      	str	r3, [r7, #32]
 80070f0:	2301      	movs	r3, #1
 80070f2:	84bb      	strh	r3, [r7, #36]	; 0x24
 80070f4:	2301      	movs	r3, #1
 80070f6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80070f8:	2301      	movs	r3, #1
 80070fa:	853b      	strh	r3, [r7, #40]	; 0x28
 80070fc:	f44f 730a 	mov.w	r3, #552	; 0x228
 8007100:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	633b      	str	r3, [r7, #48]	; 0x30
            AI_DIGITCLASSIFICATION_DATA_ACTIVATIONS(activations)
    };

    /* 2 - Create an instance of the NN */
    err = ai_digitclassification_create(&digitclassification, AI_DIGITCLASSIFICATION_DATA_CONFIG);
 8007106:	2100      	movs	r1, #0
 8007108:	481b      	ldr	r0, [pc, #108]	; (8007178 <aiInit+0xb0>)
 800710a:	f000 fa73 	bl	80075f4 <ai_digitclassification_create>
 800710e:	4603      	mov	r3, r0
 8007110:	637b      	str	r3, [r7, #52]	; 0x34
    if (err.type != AI_ERROR_NONE) {
 8007112:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8007116:	2b00      	cmp	r3, #0
 8007118:	d002      	beq.n	8007120 <aiInit+0x58>
	    return -1;
 800711a:	f04f 33ff 	mov.w	r3, #4294967295
 800711e:	e020      	b.n	8007162 <aiInit+0x9a>
    }

    /* 3 - Initialize the NN - Ready to be used */
    if (!ai_digitclassification_init(digitclassification, &params)) {
 8007120:	4b15      	ldr	r3, [pc, #84]	; (8007178 <aiInit+0xb0>)
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f107 020c 	add.w	r2, r7, #12
 8007128:	4611      	mov	r1, r2
 800712a:	4618      	mov	r0, r3
 800712c:	f000 fa84 	bl	8007638 <ai_digitclassification_init>
 8007130:	4603      	mov	r3, r0
 8007132:	f083 0301 	eor.w	r3, r3, #1
 8007136:	b2db      	uxtb	r3, r3
 8007138:	2b00      	cmp	r3, #0
 800713a:	d011      	beq.n	8007160 <aiInit+0x98>
        err = ai_digitclassification_get_error(digitclassification);
 800713c:	4b0e      	ldr	r3, [pc, #56]	; (8007178 <aiInit+0xb0>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	4618      	mov	r0, r3
 8007142:	f000 fa4b 	bl	80075dc <ai_digitclassification_get_error>
 8007146:	4603      	mov	r3, r0
 8007148:	637b      	str	r3, [r7, #52]	; 0x34
        ai_digitclassification_destroy(digitclassification);
 800714a:	4b0b      	ldr	r3, [pc, #44]	; (8007178 <aiInit+0xb0>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	4618      	mov	r0, r3
 8007150:	f000 fa66 	bl	8007620 <ai_digitclassification_destroy>
        digitclassification = AI_HANDLE_NULL;
 8007154:	4b08      	ldr	r3, [pc, #32]	; (8007178 <aiInit+0xb0>)
 8007156:	2200      	movs	r2, #0
 8007158:	601a      	str	r2, [r3, #0]
	    return -2;
 800715a:	f06f 0301 	mvn.w	r3, #1
 800715e:	e000      	b.n	8007162 <aiInit+0x9a>
    }

    return 0;
 8007160:	2300      	movs	r3, #0
}
 8007162:	4618      	mov	r0, r3
 8007164:	3738      	adds	r7, #56	; 0x38
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}
 800716a:	bf00      	nop
 800716c:	40040440 	.word	0x40040440
 8007170:	00063628 	.word	0x00063628
 8007174:	00040440 	.word	0x00040440
 8007178:	2000050c 	.word	0x2000050c

0800717c <aiRun>:

/*
 * Run function to execute an inference.
 */
int aiRun(const void *in_data, void *out_data)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b084      	sub	sp, #16
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
 8007184:	6039      	str	r1, [r7, #0]
    ai_i32 nbatch;
    ai_error err;

    /* Parameters checking */
    if (!in_data || !out_data || !digitclassification)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d006      	beq.n	800719a <aiRun+0x1e>
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d003      	beq.n	800719a <aiRun+0x1e>
 8007192:	4b17      	ldr	r3, [pc, #92]	; (80071f0 <aiRun+0x74>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d102      	bne.n	80071a0 <aiRun+0x24>
        return -1;
 800719a:	f04f 33ff 	mov.w	r3, #4294967295
 800719e:	e022      	b.n	80071e6 <aiRun+0x6a>

    /* Initialize input/output buffer handlers */
    ai_input[0].n_batches = 1;
 80071a0:	4b14      	ldr	r3, [pc, #80]	; (80071f4 <aiRun+0x78>)
 80071a2:	2201      	movs	r2, #1
 80071a4:	809a      	strh	r2, [r3, #4]
    ai_input[0].data = AI_HANDLE_PTR(in_data);
 80071a6:	4a13      	ldr	r2, [pc, #76]	; (80071f4 <aiRun+0x78>)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6113      	str	r3, [r2, #16]
    ai_output[0].n_batches = 1;
 80071ac:	4b12      	ldr	r3, [pc, #72]	; (80071f8 <aiRun+0x7c>)
 80071ae:	2201      	movs	r2, #1
 80071b0:	809a      	strh	r2, [r3, #4]
    ai_output[0].data = AI_HANDLE_PTR(out_data);
 80071b2:	4a11      	ldr	r2, [pc, #68]	; (80071f8 <aiRun+0x7c>)
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	6113      	str	r3, [r2, #16]

    /* 2 - Perform the inference */
    nbatch = ai_digitclassification_run(digitclassification, &ai_input[0], &ai_output[0]);
 80071b8:	4b0d      	ldr	r3, [pc, #52]	; (80071f0 <aiRun+0x74>)
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	4a0e      	ldr	r2, [pc, #56]	; (80071f8 <aiRun+0x7c>)
 80071be:	490d      	ldr	r1, [pc, #52]	; (80071f4 <aiRun+0x78>)
 80071c0:	4618      	mov	r0, r3
 80071c2:	f000 fa6c 	bl	800769e <ai_digitclassification_run>
 80071c6:	60f8      	str	r0, [r7, #12]
    if (nbatch != 1) {
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	2b01      	cmp	r3, #1
 80071cc:	d00a      	beq.n	80071e4 <aiRun+0x68>
        err = ai_digitclassification_get_error(digitclassification);
 80071ce:	4b08      	ldr	r3, [pc, #32]	; (80071f0 <aiRun+0x74>)
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	4618      	mov	r0, r3
 80071d4:	f000 fa02 	bl	80075dc <ai_digitclassification_get_error>
 80071d8:	4603      	mov	r3, r0
 80071da:	60bb      	str	r3, [r7, #8]
        // ...
        return err.code;
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	f3c3 2317 	ubfx	r3, r3, #8, #24
 80071e2:	e000      	b.n	80071e6 <aiRun+0x6a>
    }

    return 0;
 80071e4:	2300      	movs	r3, #0
}
 80071e6:	4618      	mov	r0, r3
 80071e8:	3710      	adds	r7, #16
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bd80      	pop	{r7, pc}
 80071ee:	bf00      	nop
 80071f0:	2000050c 	.word	0x2000050c
 80071f4:	20000008 	.word	0x20000008
 80071f8:	2000001c 	.word	0x2000001c

080071fc <MX_X_CUBE_AI_Init>:

/*************************************************************************
  *
  */
void MX_X_CUBE_AI_Init(void)
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	af00      	add	r7, sp, #0
    /* Activation/working buffer is allocated as a static memory chunk
     * (bss section) */
    AI_ALIGNED(4)
    static ai_u8 activations[AI_DIGITCLASSIFICATION_DATA_ACTIVATIONS_SIZE];

    aiInit(activations);
 8007200:	4802      	ldr	r0, [pc, #8]	; (800720c <MX_X_CUBE_AI_Init+0x10>)
 8007202:	f7ff ff61 	bl	80070c8 <aiInit>
    /* USER CODE END 0 */
}
 8007206:	bf00      	nop
 8007208:	bd80      	pop	{r7, pc}
 800720a:	bf00      	nop
 800720c:	20000510 	.word	0x20000510

08007210 <MX_X_CUBE_AI_Process>:

void MX_X_CUBE_AI_Process(void)
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b098      	sub	sp, #96	; 0x60
 8007214:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 1 */
	int nb_run = 2;
 8007216:	2302      	movs	r3, #2
 8007218:	65fb      	str	r3, [r7, #92]	; 0x5c
    int res;

    int ranking[OUTPUT_CLASS_NUMBER];

    for(int i=0; i<OUTPUT_CLASS_NUMBER;i++) ranking[i]=i;
 800721a:	2300      	movs	r3, #0
 800721c:	65bb      	str	r3, [r7, #88]	; 0x58
 800721e:	e00a      	b.n	8007236 <MX_X_CUBE_AI_Process+0x26>
 8007220:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007222:	009b      	lsls	r3, r3, #2
 8007224:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8007228:	4413      	add	r3, r2
 800722a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800722c:	f843 2c5c 	str.w	r2, [r3, #-92]
 8007230:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007232:	3301      	adds	r3, #1
 8007234:	65bb      	str	r3, [r7, #88]	; 0x58
 8007236:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007238:	2b09      	cmp	r3, #9
 800723a:	ddf1      	ble.n	8007220 <MX_X_CUBE_AI_Process+0x10>

    AI_ALIGNED(4)
    static ai_i8 out_data[AI_DIGITCLASSIFICATION_OUT_1_SIZE_BYTES];

    /* Retrieve format/type of the first input tensor - index 0 */
    const ai_buffer_format fmt_ = AI_BUFFER_FORMAT(&ai_input[0]);
 800723c:	4b62      	ldr	r3, [pc, #392]	; (80073c8 <MX_X_CUBE_AI_Process+0x1b8>)
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8007244:	653b      	str	r3, [r7, #80]	; 0x50
    const uint32_t type_ = AI_BUFFER_FMT_GET_TYPE(fmt_);
 8007246:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007248:	145b      	asrs	r3, r3, #17
 800724a:	f003 030f 	and.w	r3, r3, #15
 800724e:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Prepare parameters for float to Qmn conversion */
    const ai_i16 N_ = AI_BUFFER_FMT_GET_FBITS(fmt_);
 8007250:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007252:	b2db      	uxtb	r3, r3
 8007254:	b29b      	uxth	r3, r3
 8007256:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800725a:	b29b      	uxth	r3, r3
 800725c:	3b40      	subs	r3, #64	; 0x40
 800725e:	b29b      	uxth	r3, r3
 8007260:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    const ai_float scale_ = (0x1U << N_);
 8007264:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8007268:	2201      	movs	r2, #1
 800726a:	fa02 f303 	lsl.w	r3, r2, r3
 800726e:	ee07 3a90 	vmov	s15, r3
 8007272:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007276:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    const ai_i16 M_ =  AI_BUFFER_FMT_GET_BITS(fmt_)
 800727a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800727c:	11db      	asrs	r3, r3, #7
 800727e:	b29b      	uxth	r3, r3
 8007280:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007284:	b29a      	uxth	r2, r3
                       - AI_BUFFER_FMT_GET_SIGN(fmt_) - N_;
 8007286:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007288:	15db      	asrs	r3, r3, #23
 800728a:	b29b      	uxth	r3, r3
 800728c:	f003 0301 	and.w	r3, r3, #1
 8007290:	b29b      	uxth	r3, r3
 8007292:	1ad3      	subs	r3, r2, r3
 8007294:	b29a      	uxth	r2, r3
 8007296:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800729a:	1ad3      	subs	r3, r2, r3
 800729c:	b29b      	uxth	r3, r3
    const ai_i16 M_ =  AI_BUFFER_FMT_GET_BITS(fmt_)
 800729e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    const ai_float max_ = (ai_float)(0x1U << M_);
 80072a2:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 80072a6:	2201      	movs	r2, #1
 80072a8:	fa02 f303 	lsl.w	r3, r2, r3
 80072ac:	ee07 3a90 	vmov	s15, r3
 80072b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072b4:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    /* Perform nb_rub inferences (batch = 1) */
    while (--nb_run) {
 80072b8:	e07a      	b.n	80073b0 <MX_X_CUBE_AI_Process+0x1a0>

        /* ---------------------------------------- */
        /* Data generation and Pre-Process          */
        /* ---------------------------------------- */
        /* - fill the input buffer with random data */
        for (ai_size i=0;  i < AI_DIGITCLASSIFICATION_IN_1_SIZE; i++ ) {
 80072ba:	2300      	movs	r3, #0
 80072bc:	657b      	str	r3, [r7, #84]	; 0x54
 80072be:	e056      	b.n	800736e <MX_X_CUBE_AI_Process+0x15e>

            /* Generate random data in the range [-1, 1] */
            ai_float val = grayscale_image[i];
 80072c0:	4a42      	ldr	r2, [pc, #264]	; (80073cc <MX_X_CUBE_AI_Process+0x1bc>)
 80072c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80072c4:	4413      	add	r3, r2
 80072c6:	781b      	ldrb	r3, [r3, #0]
 80072c8:	ee07 3a90 	vmov	s15, r3
 80072cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072d0:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

            /* Convert the data if necessary */
            if (type_ == AI_BUFFER_FMT_TYPE_FLOAT) {
 80072d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072d6:	2b01      	cmp	r3, #1
 80072d8:	d106      	bne.n	80072e8 <MX_X_CUBE_AI_Process+0xd8>
                ((ai_float *)in_data)[i] = val;
 80072da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80072dc:	009b      	lsls	r3, r3, #2
 80072de:	4a3c      	ldr	r2, [pc, #240]	; (80073d0 <MX_X_CUBE_AI_Process+0x1c0>)
 80072e0:	4413      	add	r3, r2
 80072e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072e4:	601a      	str	r2, [r3, #0]
 80072e6:	e03f      	b.n	8007368 <MX_X_CUBE_AI_Process+0x158>
            } else { /* AI_BUFFER_FMT_TYPE_Q */
                /* Scale the values in the range [-2^M, 2^M] */
                val *= max_;
 80072e8:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80072ec:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80072f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072f4:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
                /* Convert float to Qmn format */
                const ai_i32 tmp_ = AI_ROUND(val * scale_, ai_i32);
 80072f8:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80072fc:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8007300:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007304:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007308:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800730c:	d50c      	bpl.n	8007328 <MX_X_CUBE_AI_Process+0x118>
 800730e:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8007312:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8007316:	ee67 7a27 	vmul.f32	s15, s14, s15
 800731a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800731e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007322:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007326:	e00b      	b.n	8007340 <MX_X_CUBE_AI_Process+0x130>
 8007328:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800732c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8007330:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007334:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007338:	ee77 7a87 	vadd.f32	s15, s15, s14
 800733c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007340:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
                in_data[i] =  AI_CLAMP(tmp_, -128, 127, ai_i8);
 8007344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007346:	2b7e      	cmp	r3, #126	; 0x7e
 8007348:	dc09      	bgt.n	800735e <MX_X_CUBE_AI_Process+0x14e>
 800734a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800734c:	f113 0f7f 	cmn.w	r3, #127	; 0x7f
 8007350:	db02      	blt.n	8007358 <MX_X_CUBE_AI_Process+0x148>
 8007352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007354:	b25b      	sxtb	r3, r3
 8007356:	e003      	b.n	8007360 <MX_X_CUBE_AI_Process+0x150>
 8007358:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 800735c:	e000      	b.n	8007360 <MX_X_CUBE_AI_Process+0x150>
 800735e:	237f      	movs	r3, #127	; 0x7f
 8007360:	491b      	ldr	r1, [pc, #108]	; (80073d0 <MX_X_CUBE_AI_Process+0x1c0>)
 8007362:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007364:	440a      	add	r2, r1
 8007366:	7013      	strb	r3, [r2, #0]
        for (ai_size i=0;  i < AI_DIGITCLASSIFICATION_IN_1_SIZE; i++ ) {
 8007368:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800736a:	3301      	adds	r3, #1
 800736c:	657b      	str	r3, [r7, #84]	; 0x54
 800736e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007370:	f5b3 7f44 	cmp.w	r3, #784	; 0x310
 8007374:	d3a4      	bcc.n	80072c0 <MX_X_CUBE_AI_Process+0xb0>
            }
        }

        /* Perform the inference */
        res = aiRun(in_data, out_data);
 8007376:	4917      	ldr	r1, [pc, #92]	; (80073d4 <MX_X_CUBE_AI_Process+0x1c4>)
 8007378:	4815      	ldr	r0, [pc, #84]	; (80073d0 <MX_X_CUBE_AI_Process+0x1c0>)
 800737a:	f7ff feff 	bl	800717c <aiRun>
 800737e:	63b8      	str	r0, [r7, #56]	; 0x38
        if(res==0)
 8007380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007382:	2b00      	cmp	r3, #0
 8007384:	d114      	bne.n	80073b0 <MX_X_CUBE_AI_Process+0x1a0>
               {
               	bubblesort(out_data,ranking,OUTPUT_CLASS_NUMBER);
 8007386:	1d3b      	adds	r3, r7, #4
 8007388:	220a      	movs	r2, #10
 800738a:	4619      	mov	r1, r3
 800738c:	4811      	ldr	r0, [pc, #68]	; (80073d4 <MX_X_CUBE_AI_Process+0x1c4>)
 800738e:	f000 f825 	bl	80073dc <bubblesort>
               	/* Print the classification result */
               	char* ptr=g_classes[ranking[0]];
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	4a10      	ldr	r2, [pc, #64]	; (80073d8 <MX_X_CUBE_AI_Process+0x1c8>)
 8007396:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800739a:	637b      	str	r3, [r7, #52]	; 0x34
               	BSP_LCD_DisplayStringAt(230,120, ptr, 0x03);
 800739c:	2303      	movs	r3, #3
 800739e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80073a0:	2178      	movs	r1, #120	; 0x78
 80073a2:	20e6      	movs	r0, #230	; 0xe6
 80073a4:	f001 fad8 	bl	8008958 <BSP_LCD_DisplayStringAt>
               	HAL_Delay(3000);
 80073a8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80073ac:	f7fd fb72 	bl	8004a94 <HAL_Delay>
    while (--nb_run) {
 80073b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80073b2:	3b01      	subs	r3, #1
 80073b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80073b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	f47f af7e 	bne.w	80072ba <MX_X_CUBE_AI_Process+0xaa>

        /* Post-Process - process the output buffer */
        // ...
    }
    /* USER CODE END 1 */
}
 80073be:	bf00      	nop
 80073c0:	3760      	adds	r7, #96	; 0x60
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bd80      	pop	{r7, pc}
 80073c6:	bf00      	nop
 80073c8:	20000008 	.word	0x20000008
 80073cc:	2000f68c 	.word	0x2000f68c
 80073d0:	20000738 	.word	0x20000738
 80073d4:	20001378 	.word	0x20001378
 80073d8:	20000030 	.word	0x20000030

080073dc <bubblesort>:
  * @brief  Bubble sorting algorithm
  * @param  None
  * @retval None
  */
static void bubblesort(float *prob,int *classes, int size)
{
 80073dc:	b480      	push	{r7}
 80073de:	b089      	sub	sp, #36	; 0x24
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	60f8      	str	r0, [r7, #12]
 80073e4:	60b9      	str	r1, [r7, #8]
 80073e6:	607a      	str	r2, [r7, #4]
  float p;
  int c;

  for(int i=0; i<size; i++)
 80073e8:	2300      	movs	r3, #0
 80073ea:	61fb      	str	r3, [r7, #28]
 80073ec:	e051      	b.n	8007492 <bubblesort+0xb6>
  {
    for(int ii=0; ii<size-i-1; ii++)
 80073ee:	2300      	movs	r3, #0
 80073f0:	61bb      	str	r3, [r7, #24]
 80073f2:	e044      	b.n	800747e <bubblesort+0xa2>
    {
      if(prob[ii]<prob[ii+1])
 80073f4:	69bb      	ldr	r3, [r7, #24]
 80073f6:	009b      	lsls	r3, r3, #2
 80073f8:	68fa      	ldr	r2, [r7, #12]
 80073fa:	4413      	add	r3, r2
 80073fc:	ed93 7a00 	vldr	s14, [r3]
 8007400:	69bb      	ldr	r3, [r7, #24]
 8007402:	3301      	adds	r3, #1
 8007404:	009b      	lsls	r3, r3, #2
 8007406:	68fa      	ldr	r2, [r7, #12]
 8007408:	4413      	add	r3, r2
 800740a:	edd3 7a00 	vldr	s15, [r3]
 800740e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007412:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007416:	d52f      	bpl.n	8007478 <bubblesort+0x9c>
      {
        p=prob[ii];
 8007418:	69bb      	ldr	r3, [r7, #24]
 800741a:	009b      	lsls	r3, r3, #2
 800741c:	68fa      	ldr	r2, [r7, #12]
 800741e:	4413      	add	r3, r2
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	617b      	str	r3, [r7, #20]
        prob[ii]=prob[ii+1];
 8007424:	69bb      	ldr	r3, [r7, #24]
 8007426:	3301      	adds	r3, #1
 8007428:	009b      	lsls	r3, r3, #2
 800742a:	68fa      	ldr	r2, [r7, #12]
 800742c:	441a      	add	r2, r3
 800742e:	69bb      	ldr	r3, [r7, #24]
 8007430:	009b      	lsls	r3, r3, #2
 8007432:	68f9      	ldr	r1, [r7, #12]
 8007434:	440b      	add	r3, r1
 8007436:	6812      	ldr	r2, [r2, #0]
 8007438:	601a      	str	r2, [r3, #0]
        prob[ii+1]=p;
 800743a:	69bb      	ldr	r3, [r7, #24]
 800743c:	3301      	adds	r3, #1
 800743e:	009b      	lsls	r3, r3, #2
 8007440:	68fa      	ldr	r2, [r7, #12]
 8007442:	4413      	add	r3, r2
 8007444:	697a      	ldr	r2, [r7, #20]
 8007446:	601a      	str	r2, [r3, #0]
        c = classes[ii];
 8007448:	69bb      	ldr	r3, [r7, #24]
 800744a:	009b      	lsls	r3, r3, #2
 800744c:	68ba      	ldr	r2, [r7, #8]
 800744e:	4413      	add	r3, r2
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	613b      	str	r3, [r7, #16]
        classes[ii]=classes[ii+1];
 8007454:	69bb      	ldr	r3, [r7, #24]
 8007456:	3301      	adds	r3, #1
 8007458:	009b      	lsls	r3, r3, #2
 800745a:	68ba      	ldr	r2, [r7, #8]
 800745c:	441a      	add	r2, r3
 800745e:	69bb      	ldr	r3, [r7, #24]
 8007460:	009b      	lsls	r3, r3, #2
 8007462:	68b9      	ldr	r1, [r7, #8]
 8007464:	440b      	add	r3, r1
 8007466:	6812      	ldr	r2, [r2, #0]
 8007468:	601a      	str	r2, [r3, #0]
        classes[ii+1]=c;
 800746a:	69bb      	ldr	r3, [r7, #24]
 800746c:	3301      	adds	r3, #1
 800746e:	009b      	lsls	r3, r3, #2
 8007470:	68ba      	ldr	r2, [r7, #8]
 8007472:	4413      	add	r3, r2
 8007474:	693a      	ldr	r2, [r7, #16]
 8007476:	601a      	str	r2, [r3, #0]
    for(int ii=0; ii<size-i-1; ii++)
 8007478:	69bb      	ldr	r3, [r7, #24]
 800747a:	3301      	adds	r3, #1
 800747c:	61bb      	str	r3, [r7, #24]
 800747e:	687a      	ldr	r2, [r7, #4]
 8007480:	69fb      	ldr	r3, [r7, #28]
 8007482:	1ad3      	subs	r3, r2, r3
 8007484:	3b01      	subs	r3, #1
 8007486:	69ba      	ldr	r2, [r7, #24]
 8007488:	429a      	cmp	r2, r3
 800748a:	dbb3      	blt.n	80073f4 <bubblesort+0x18>
  for(int i=0; i<size; i++)
 800748c:	69fb      	ldr	r3, [r7, #28]
 800748e:	3301      	adds	r3, #1
 8007490:	61fb      	str	r3, [r7, #28]
 8007492:	69fa      	ldr	r2, [r7, #28]
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	429a      	cmp	r2, r3
 8007498:	dba9      	blt.n	80073ee <bubblesort+0x12>
      }
    }
  }
}
 800749a:	bf00      	nop
 800749c:	3724      	adds	r7, #36	; 0x24
 800749e:	46bd      	mov	sp, r7
 80074a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a4:	4770      	bx	lr
	...

080074a8 <digitclassification_configure_activations>:


AI_DECLARE_STATIC
ai_bool digitclassification_configure_activations(
  ai_network* net_ctx, const ai_buffer* activation_buffer)
{
 80074a8:	b480      	push	{r7}
 80074aa:	b085      	sub	sp, #20
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
 80074b0:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  activation_buffer && activation_buffer->data)

  ai_ptr activations = AI_PTR(AI_PTR_ALIGN(activation_buffer->data, 4));
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	691b      	ldr	r3, [r3, #16]
 80074b6:	3303      	adds	r3, #3
 80074b8:	f023 0303 	bic.w	r3, r3, #3
 80074bc:	60fb      	str	r3, [r7, #12]
  AI_ASSERT( activations )

  {
    /* Updating activations (byte) offsets */
    input_0_output_array.data = AI_PTR(NULL);
 80074be:	4b14      	ldr	r3, [pc, #80]	; (8007510 <digitclassification_configure_activations+0x68>)
 80074c0:	2200      	movs	r2, #0
 80074c2:	609a      	str	r2, [r3, #8]
    input_0_output_array.data_start = AI_PTR(NULL);
 80074c4:	4b12      	ldr	r3, [pc, #72]	; (8007510 <digitclassification_configure_activations+0x68>)
 80074c6:	2200      	movs	r2, #0
 80074c8:	60da      	str	r2, [r3, #12]
    dense_1_output_array.data = AI_PTR(activations + 0);
 80074ca:	4a12      	ldr	r2, [pc, #72]	; (8007514 <digitclassification_configure_activations+0x6c>)
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	6093      	str	r3, [r2, #8]
    dense_1_output_array.data_start = AI_PTR(activations + 0);
 80074d0:	4a10      	ldr	r2, [pc, #64]	; (8007514 <digitclassification_configure_activations+0x6c>)
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	60d3      	str	r3, [r2, #12]
    dense_1_nl_output_array.data = AI_PTR(activations + 0);
 80074d6:	4a10      	ldr	r2, [pc, #64]	; (8007518 <digitclassification_configure_activations+0x70>)
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	6093      	str	r3, [r2, #8]
    dense_1_nl_output_array.data_start = AI_PTR(activations + 0);
 80074dc:	4a0e      	ldr	r2, [pc, #56]	; (8007518 <digitclassification_configure_activations+0x70>)
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	60d3      	str	r3, [r2, #12]
    dense_2_output_array.data = AI_PTR(activations + 512);
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80074e8:	4a0c      	ldr	r2, [pc, #48]	; (800751c <digitclassification_configure_activations+0x74>)
 80074ea:	6093      	str	r3, [r2, #8]
    dense_2_output_array.data_start = AI_PTR(activations + 512);
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80074f2:	4a0a      	ldr	r2, [pc, #40]	; (800751c <digitclassification_configure_activations+0x74>)
 80074f4:	60d3      	str	r3, [r2, #12]
    dense_2_nl_output_array.data = AI_PTR(NULL);
 80074f6:	4b0a      	ldr	r3, [pc, #40]	; (8007520 <digitclassification_configure_activations+0x78>)
 80074f8:	2200      	movs	r2, #0
 80074fa:	609a      	str	r2, [r3, #8]
    dense_2_nl_output_array.data_start = AI_PTR(NULL);
 80074fc:	4b08      	ldr	r3, [pc, #32]	; (8007520 <digitclassification_configure_activations+0x78>)
 80074fe:	2200      	movs	r2, #0
 8007500:	60da      	str	r2, [r3, #12]
    
  }
  return true;
 8007502:	2301      	movs	r3, #1
}
 8007504:	4618      	mov	r0, r3
 8007506:	3714      	adds	r7, #20
 8007508:	46bd      	mov	sp, r7
 800750a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750e:	4770      	bx	lr
 8007510:	200000e8 	.word	0x200000e8
 8007514:	200000f8 	.word	0x200000f8
 8007518:	20000108 	.word	0x20000108
 800751c:	20000118 	.word	0x20000118
 8007520:	20000128 	.word	0x20000128

08007524 <digitclassification_configure_weights>:


AI_DECLARE_STATIC
ai_bool digitclassification_configure_weights(
  ai_network* net_ctx, const ai_buffer* weights_buffer)
{
 8007524:	b480      	push	{r7}
 8007526:	b085      	sub	sp, #20
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
 800752c:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  weights_buffer && weights_buffer->data)

  ai_ptr weights = AI_PTR(weights_buffer->data);
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	691b      	ldr	r3, [r3, #16]
 8007532:	60fb      	str	r3, [r7, #12]
  AI_ASSERT( weights )

  {
    /* Updating weights (byte) offsets */
    dense_2_bias_array.format |= AI_FMT_FLAG_CONST;
 8007534:	4b25      	ldr	r3, [pc, #148]	; (80075cc <digitclassification_configure_weights+0xa8>)
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800753c:	4a23      	ldr	r2, [pc, #140]	; (80075cc <digitclassification_configure_weights+0xa8>)
 800753e:	6013      	str	r3, [r2, #0]
    dense_2_bias_array.data = AI_PTR(weights + 407040);
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	f503 23c6 	add.w	r3, r3, #405504	; 0x63000
 8007546:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 800754a:	4a20      	ldr	r2, [pc, #128]	; (80075cc <digitclassification_configure_weights+0xa8>)
 800754c:	6093      	str	r3, [r2, #8]
    dense_2_bias_array.data_start = AI_PTR(weights + 407040);
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	f503 23c6 	add.w	r3, r3, #405504	; 0x63000
 8007554:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8007558:	4a1c      	ldr	r2, [pc, #112]	; (80075cc <digitclassification_configure_weights+0xa8>)
 800755a:	60d3      	str	r3, [r2, #12]
  dense_2_weights_array.format |= AI_FMT_FLAG_CONST;
 800755c:	4b1c      	ldr	r3, [pc, #112]	; (80075d0 <digitclassification_configure_weights+0xac>)
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007564:	4a1a      	ldr	r2, [pc, #104]	; (80075d0 <digitclassification_configure_weights+0xac>)
 8007566:	6013      	str	r3, [r2, #0]
    dense_2_weights_array.data = AI_PTR(weights + 401920);
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	f503 23c4 	add.w	r3, r3, #401408	; 0x62000
 800756e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8007572:	4a17      	ldr	r2, [pc, #92]	; (80075d0 <digitclassification_configure_weights+0xac>)
 8007574:	6093      	str	r3, [r2, #8]
    dense_2_weights_array.data_start = AI_PTR(weights + 401920);
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	f503 23c4 	add.w	r3, r3, #401408	; 0x62000
 800757c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8007580:	4a13      	ldr	r2, [pc, #76]	; (80075d0 <digitclassification_configure_weights+0xac>)
 8007582:	60d3      	str	r3, [r2, #12]
  dense_1_bias_array.format |= AI_FMT_FLAG_CONST;
 8007584:	4b13      	ldr	r3, [pc, #76]	; (80075d4 <digitclassification_configure_weights+0xb0>)
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800758c:	4a11      	ldr	r2, [pc, #68]	; (80075d4 <digitclassification_configure_weights+0xb0>)
 800758e:	6013      	str	r3, [r2, #0]
    dense_1_bias_array.data = AI_PTR(weights + 401408);
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	f503 23c4 	add.w	r3, r3, #401408	; 0x62000
 8007596:	4a0f      	ldr	r2, [pc, #60]	; (80075d4 <digitclassification_configure_weights+0xb0>)
 8007598:	6093      	str	r3, [r2, #8]
    dense_1_bias_array.data_start = AI_PTR(weights + 401408);
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	f503 23c4 	add.w	r3, r3, #401408	; 0x62000
 80075a0:	4a0c      	ldr	r2, [pc, #48]	; (80075d4 <digitclassification_configure_weights+0xb0>)
 80075a2:	60d3      	str	r3, [r2, #12]
  dense_1_weights_array.format |= AI_FMT_FLAG_CONST;
 80075a4:	4b0c      	ldr	r3, [pc, #48]	; (80075d8 <digitclassification_configure_weights+0xb4>)
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80075ac:	4a0a      	ldr	r2, [pc, #40]	; (80075d8 <digitclassification_configure_weights+0xb4>)
 80075ae:	6013      	str	r3, [r2, #0]
    dense_1_weights_array.data = AI_PTR(weights + 0);
 80075b0:	4a09      	ldr	r2, [pc, #36]	; (80075d8 <digitclassification_configure_weights+0xb4>)
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	6093      	str	r3, [r2, #8]
    dense_1_weights_array.data_start = AI_PTR(weights + 0);
 80075b6:	4a08      	ldr	r2, [pc, #32]	; (80075d8 <digitclassification_configure_weights+0xb4>)
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	60d3      	str	r3, [r2, #12]
  
  }

  return true;
 80075bc:	2301      	movs	r3, #1
}
 80075be:	4618      	mov	r0, r3
 80075c0:	3714      	adds	r7, #20
 80075c2:	46bd      	mov	sp, r7
 80075c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c8:	4770      	bx	lr
 80075ca:	bf00      	nop
 80075cc:	200000a8 	.word	0x200000a8
 80075d0:	200000b8 	.word	0x200000b8
 80075d4:	200000c8 	.word	0x200000c8
 80075d8:	200000d8 	.word	0x200000d8

080075dc <ai_digitclassification_get_error>:
  return false;
}

AI_API_ENTRY
ai_error ai_digitclassification_get_error(ai_handle network)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b082      	sub	sp, #8
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 80075e4:	6878      	ldr	r0, [r7, #4]
 80075e6:	f7f9 f83b 	bl	8000660 <ai_platform_network_get_error>
 80075ea:	4603      	mov	r3, r0
}
 80075ec:	4618      	mov	r0, r3
 80075ee:	3708      	adds	r7, #8
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bd80      	pop	{r7, pc}

080075f4 <ai_digitclassification_create>:

AI_API_ENTRY
ai_error ai_digitclassification_create(
  ai_handle* network, const ai_buffer* network_config)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b084      	sub	sp, #16
 80075f8:	af02      	add	r7, sp, #8
 80075fa:	6078      	str	r0, [r7, #4]
 80075fc:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 80075fe:	2300      	movs	r3, #0
 8007600:	9301      	str	r3, [sp, #4]
 8007602:	2303      	movs	r3, #3
 8007604:	9300      	str	r3, [sp, #0]
 8007606:	2301      	movs	r3, #1
 8007608:	4a04      	ldr	r2, [pc, #16]	; (800761c <ai_digitclassification_create+0x28>)
 800760a:	6839      	ldr	r1, [r7, #0]
 800760c:	6878      	ldr	r0, [r7, #4]
 800760e:	f7f9 f90d 	bl	800082c <ai_platform_network_create>
 8007612:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8007614:	4618      	mov	r0, r3
 8007616:	3708      	adds	r7, #8
 8007618:	46bd      	mov	sp, r7
 800761a:	bd80      	pop	{r7, pc}
 800761c:	20000058 	.word	0x20000058

08007620 <ai_digitclassification_destroy>:

AI_API_ENTRY
ai_handle ai_digitclassification_destroy(ai_handle network)
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b082      	sub	sp, #8
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
  return ai_platform_network_destroy(network);
 8007628:	6878      	ldr	r0, [r7, #4]
 800762a:	f7f9 f93b 	bl	80008a4 <ai_platform_network_destroy>
 800762e:	4603      	mov	r3, r0
}
 8007630:	4618      	mov	r0, r3
 8007632:	3708      	adds	r7, #8
 8007634:	46bd      	mov	sp, r7
 8007636:	bd80      	pop	{r7, pc}

08007638 <ai_digitclassification_init>:

AI_API_ENTRY
ai_bool ai_digitclassification_init(
  ai_handle network, const ai_network_params* params)
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b084      	sub	sp, #16
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
 8007640:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8007642:	6839      	ldr	r1, [r7, #0]
 8007644:	6878      	ldr	r0, [r7, #4]
 8007646:	f7f9 f94c 	bl	80008e2 <ai_platform_network_init>
 800764a:	60f8      	str	r0, [r7, #12]
  if ( !net_ctx ) return false;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d101      	bne.n	8007656 <ai_digitclassification_init+0x1e>
 8007652:	2300      	movs	r3, #0
 8007654:	e01f      	b.n	8007696 <ai_digitclassification_init+0x5e>

  ai_bool ok = true;
 8007656:	2301      	movs	r3, #1
 8007658:	72fb      	strb	r3, [r7, #11]
  ok &= digitclassification_configure_weights(net_ctx, &params->params);
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	4619      	mov	r1, r3
 800765e:	68f8      	ldr	r0, [r7, #12]
 8007660:	f7ff ff60 	bl	8007524 <digitclassification_configure_weights>
 8007664:	4603      	mov	r3, r0
 8007666:	461a      	mov	r2, r3
 8007668:	7afb      	ldrb	r3, [r7, #11]
 800766a:	4013      	ands	r3, r2
 800766c:	2b00      	cmp	r3, #0
 800766e:	bf14      	ite	ne
 8007670:	2301      	movne	r3, #1
 8007672:	2300      	moveq	r3, #0
 8007674:	72fb      	strb	r3, [r7, #11]
  ok &= digitclassification_configure_activations(net_ctx, &params->activations);
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	3314      	adds	r3, #20
 800767a:	4619      	mov	r1, r3
 800767c:	68f8      	ldr	r0, [r7, #12]
 800767e:	f7ff ff13 	bl	80074a8 <digitclassification_configure_activations>
 8007682:	4603      	mov	r3, r0
 8007684:	461a      	mov	r2, r3
 8007686:	7afb      	ldrb	r3, [r7, #11]
 8007688:	4013      	ands	r3, r2
 800768a:	2b00      	cmp	r3, #0
 800768c:	bf14      	ite	ne
 800768e:	2301      	movne	r3, #1
 8007690:	2300      	moveq	r3, #0
 8007692:	72fb      	strb	r3, [r7, #11]

  return ok;
 8007694:	7afb      	ldrb	r3, [r7, #11]
}
 8007696:	4618      	mov	r0, r3
 8007698:	3710      	adds	r7, #16
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}

0800769e <ai_digitclassification_run>:


AI_API_ENTRY
ai_i32 ai_digitclassification_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 800769e:	b580      	push	{r7, lr}
 80076a0:	b084      	sub	sp, #16
 80076a2:	af00      	add	r7, sp, #0
 80076a4:	60f8      	str	r0, [r7, #12]
 80076a6:	60b9      	str	r1, [r7, #8]
 80076a8:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 80076aa:	687a      	ldr	r2, [r7, #4]
 80076ac:	68b9      	ldr	r1, [r7, #8]
 80076ae:	68f8      	ldr	r0, [r7, #12]
 80076b0:	f7f9 f96d 	bl	800098e <ai_platform_network_process>
 80076b4:	4603      	mov	r3, r0
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	3710      	adds	r7, #16
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd80      	pop	{r7, pc}
	...

080076c0 <ai_digitclassification_data_weights_get>:
#include "digitclassification_data.h"

ai_handle ai_digitclassification_data_weights_get(void)
{
 80076c0:	b480      	push	{r7}
 80076c2:	af00      	add	r7, sp, #0
    0x9f, 0xbc, 0x27, 0x29, 0xcc, 0xbd, 0x35, 0x9d, 0x5c, 0x3d,
    0xb0, 0x06, 0x9f, 0x3d, 0x25, 0xf6, 0xe6, 0xbb, 0xf6, 0x5a,
    0x58, 0xbd, 0x37, 0x27, 0x38, 0x3e, 0x2e, 0xa3, 0xc3, 0xbc
  };

  return AI_HANDLE_PTR(s_digitclassification_weights);
 80076c4:	4b02      	ldr	r3, [pc, #8]	; (80076d0 <ai_digitclassification_data_weights_get+0x10>)
}
 80076c6:	4618      	mov	r0, r3
 80076c8:	46bd      	mov	sp, r7
 80076ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ce:	4770      	bx	lr
 80076d0:	0800c174 	.word	0x0800c174

080076d4 <LCD_IO_Init>:
/**
  * @brief  Configures the LCD_SPI interface.
  * @retval None
  */
void LCD_IO_Init(void)
{
 80076d4:	b480      	push	{r7}
 80076d6:	af00      	add	r7, sp, #0
//  HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_RESET);
//  HAL_Delay(100);
//  HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_SET);
//  HAL_Delay(300);

}
 80076d8:	bf00      	nop
 80076da:	46bd      	mov	sp, r7
 80076dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e0:	4770      	bx	lr
	...

080076e4 <LCD_IO_WriteMultipleData>:
  * @param  pData Pointer on the register value
  * @param  Size Size of byte to transmit to the register
  * @retval None
  */
void LCD_IO_WriteMultipleData(uint8_t *pData, uint32_t Size)
{
 80076e4:	b480      	push	{r7}
 80076e6:	b085      	sub	sp, #20
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
 80076ec:	6039      	str	r1, [r7, #0]
  uint32_t counter = 0;
 80076ee:	2300      	movs	r3, #0
 80076f0:	60fb      	str	r3, [r7, #12]

  for (counter = Size; counter != 0; counter--)
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	60fb      	str	r3, [r7, #12]
 80076f6:	e00c      	b.n	8007712 <LCD_IO_WriteMultipleData+0x2e>
  {
    /* Write 16-bit Data */
    LCD_RAM = *(uint16_t *)pData;
 80076f8:	4a0a      	ldr	r2, [pc, #40]	; (8007724 <LCD_IO_WriteMultipleData+0x40>)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	881b      	ldrh	r3, [r3, #0]
 80076fe:	8013      	strh	r3, [r2, #0]
    counter--;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	3b01      	subs	r3, #1
 8007704:	60fb      	str	r3, [r7, #12]
    pData += 2;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	3302      	adds	r3, #2
 800770a:	607b      	str	r3, [r7, #4]
  for (counter = Size; counter != 0; counter--)
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	3b01      	subs	r3, #1
 8007710:	60fb      	str	r3, [r7, #12]
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d1ef      	bne.n	80076f8 <LCD_IO_WriteMultipleData+0x14>
  }
}
 8007718:	bf00      	nop
 800771a:	3714      	adds	r7, #20
 800771c:	46bd      	mov	sp, r7
 800771e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007722:	4770      	bx	lr
 8007724:	60010000 	.word	0x60010000

08007728 <LCD_IO_WriteReg>:
  * @brief  register address.
  * @param  Reg
  * @retval None
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8007728:	b480      	push	{r7}
 800772a:	b083      	sub	sp, #12
 800772c:	af00      	add	r7, sp, #0
 800772e:	4603      	mov	r3, r0
 8007730:	71fb      	strb	r3, [r7, #7]
  /* Write 16-bit Data */
  LCD_REG  = (uint16_t)Reg;
 8007732:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8007736:	79fa      	ldrb	r2, [r7, #7]
 8007738:	b292      	uxth	r2, r2
 800773a:	801a      	strh	r2, [r3, #0]

}
 800773c:	bf00      	nop
 800773e:	370c      	adds	r7, #12
 8007740:	46bd      	mov	sp, r7
 8007742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007746:	4770      	bx	lr

08007748 <LCD_IO_ReadData>:
  * @brief  Read register value.
  * @param  Reg
  * @retval None
  */
uint16_t LCD_IO_ReadData(void) 
{
 8007748:	b480      	push	{r7}
 800774a:	af00      	add	r7, sp, #0
  /* Read 16-bit Reg */
  return (uint16_t)LCD_RAM;
 800774c:	4b03      	ldr	r3, [pc, #12]	; (800775c <LCD_IO_ReadData+0x14>)
 800774e:	881b      	ldrh	r3, [r3, #0]
 8007750:	b29b      	uxth	r3, r3
  
}
 8007752:	4618      	mov	r0, r3
 8007754:	46bd      	mov	sp, r7
 8007756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775a:	4770      	bx	lr
 800775c:	60010000 	.word	0x60010000

08007760 <ili9325_Init>:
  * @brief  Initialize the ILI9325 LCD Component.
  * @param  None
  * @retval None
  */
void ili9325_Init(void)
{  
 8007760:	b580      	push	{r7, lr}
 8007762:	af00      	add	r7, sp, #0
  /* Initialize ILI9325 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8007764:	f7ff ffb6 	bl	80076d4 <LCD_IO_Init>
  
  /* Start Initial Sequence --------------------------------------------------*/
  ili9325_WriteReg(LCD_REG_0, 0x0001); /* Start internal OSC. */
 8007768:	2101      	movs	r1, #1
 800776a:	2000      	movs	r0, #0
 800776c:	f000 f9a7 	bl	8007abe <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_1, 0x0100); /* Set SS and SM bit */
 8007770:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007774:	2001      	movs	r0, #1
 8007776:	f000 f9a2 	bl	8007abe <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_2, 0x0700); /* Set 1 line inversion */
 800777a:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 800777e:	2002      	movs	r0, #2
 8007780:	f000 f99d 	bl	8007abe <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_3, 0x1018); /* Set GRAM write direction and BGR=1. */
 8007784:	f241 0118 	movw	r1, #4120	; 0x1018
 8007788:	2003      	movs	r0, #3
 800778a:	f000 f998 	bl	8007abe <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_4, 0x0000); /* Resize register */
 800778e:	2100      	movs	r1, #0
 8007790:	2004      	movs	r0, #4
 8007792:	f000 f994 	bl	8007abe <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_8, 0x0202); /* Set the back porch and front porch */
 8007796:	f240 2102 	movw	r1, #514	; 0x202
 800779a:	2008      	movs	r0, #8
 800779c:	f000 f98f 	bl	8007abe <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_9, 0x0000); /* Set non-display area refresh cycle ISC[3:0] */
 80077a0:	2100      	movs	r1, #0
 80077a2:	2009      	movs	r0, #9
 80077a4:	f000 f98b 	bl	8007abe <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_10, 0x0000); /* FMARK function */
 80077a8:	2100      	movs	r1, #0
 80077aa:	200a      	movs	r0, #10
 80077ac:	f000 f987 	bl	8007abe <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_12, 0x0000); /* RGB interface setting */
 80077b0:	2100      	movs	r1, #0
 80077b2:	200c      	movs	r0, #12
 80077b4:	f000 f983 	bl	8007abe <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_13, 0x0000); /* Frame marker Position */
 80077b8:	2100      	movs	r1, #0
 80077ba:	200d      	movs	r0, #13
 80077bc:	f000 f97f 	bl	8007abe <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_15, 0x0000); /* RGB interface polarity */
 80077c0:	2100      	movs	r1, #0
 80077c2:	200f      	movs	r0, #15
 80077c4:	f000 f97b 	bl	8007abe <ili9325_WriteReg>
  
  /* Power On sequence -------------------------------------------------------*/
  ili9325_WriteReg(LCD_REG_16, 0x0000); /* SAP, BT[3:0], AP, DSTB, SLP, STB */
 80077c8:	2100      	movs	r1, #0
 80077ca:	2010      	movs	r0, #16
 80077cc:	f000 f977 	bl	8007abe <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_17, 0x0000); /* DC1[2:0], DC0[2:0], VC[2:0] */
 80077d0:	2100      	movs	r1, #0
 80077d2:	2011      	movs	r0, #17
 80077d4:	f000 f973 	bl	8007abe <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_18, 0x0000); /* VREG1OUT voltage */
 80077d8:	2100      	movs	r1, #0
 80077da:	2012      	movs	r0, #18
 80077dc:	f000 f96f 	bl	8007abe <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_19, 0x0000); /* VDV[4:0] for VCOM amplitude */
 80077e0:	2100      	movs	r1, #0
 80077e2:	2013      	movs	r0, #19
 80077e4:	f000 f96b 	bl	8007abe <ili9325_WriteReg>

  ili9325_WriteReg(LCD_REG_16, 0x17B0); /* SAP, BT[3:0], AP, DSTB, SLP, STB */
 80077e8:	f241 71b0 	movw	r1, #6064	; 0x17b0
 80077ec:	2010      	movs	r0, #16
 80077ee:	f000 f966 	bl	8007abe <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_17, 0x0137); /* DC1[2:0], DC0[2:0], VC[2:0] */
 80077f2:	f240 1137 	movw	r1, #311	; 0x137
 80077f6:	2011      	movs	r0, #17
 80077f8:	f000 f961 	bl	8007abe <ili9325_WriteReg>

  ili9325_WriteReg(LCD_REG_18, 0x0139); /* VREG1OUT voltage */
 80077fc:	f240 1139 	movw	r1, #313	; 0x139
 8007800:	2012      	movs	r0, #18
 8007802:	f000 f95c 	bl	8007abe <ili9325_WriteReg>

  ili9325_WriteReg(LCD_REG_19, 0x1d00); /* VDV[4:0] for VCOM amplitude */
 8007806:	f44f 51e8 	mov.w	r1, #7424	; 0x1d00
 800780a:	2013      	movs	r0, #19
 800780c:	f000 f957 	bl	8007abe <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_41, 0x0013); /* VCM[4:0] for VCOMH */
 8007810:	2113      	movs	r1, #19
 8007812:	2029      	movs	r0, #41	; 0x29
 8007814:	f000 f953 	bl	8007abe <ili9325_WriteReg>

  ili9325_WriteReg(LCD_REG_32, 0x0000); /* GRAM horizontal Address */
 8007818:	2100      	movs	r1, #0
 800781a:	2020      	movs	r0, #32
 800781c:	f000 f94f 	bl	8007abe <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_33, 0x0000); /* GRAM Vertical Address */
 8007820:	2100      	movs	r1, #0
 8007822:	2021      	movs	r0, #33	; 0x21
 8007824:	f000 f94b 	bl	8007abe <ili9325_WriteReg>

  /* Adjust the Gamma Curve (ILI9325) ----------------------------------------*/
  ili9325_WriteReg(LCD_REG_48, 0x0007);
 8007828:	2107      	movs	r1, #7
 800782a:	2030      	movs	r0, #48	; 0x30
 800782c:	f000 f947 	bl	8007abe <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_49, 0x0302);
 8007830:	f240 3102 	movw	r1, #770	; 0x302
 8007834:	2031      	movs	r0, #49	; 0x31
 8007836:	f000 f942 	bl	8007abe <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_50, 0x0105);
 800783a:	f240 1105 	movw	r1, #261	; 0x105
 800783e:	2032      	movs	r0, #50	; 0x32
 8007840:	f000 f93d 	bl	8007abe <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_53, 0x0206);
 8007844:	f240 2106 	movw	r1, #518	; 0x206
 8007848:	2035      	movs	r0, #53	; 0x35
 800784a:	f000 f938 	bl	8007abe <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_54, 0x0808);
 800784e:	f640 0108 	movw	r1, #2056	; 0x808
 8007852:	2036      	movs	r0, #54	; 0x36
 8007854:	f000 f933 	bl	8007abe <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_55, 0x0206);
 8007858:	f240 2106 	movw	r1, #518	; 0x206
 800785c:	2037      	movs	r0, #55	; 0x37
 800785e:	f000 f92e 	bl	8007abe <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_56, 0x0504);
 8007862:	f240 5104 	movw	r1, #1284	; 0x504
 8007866:	2038      	movs	r0, #56	; 0x38
 8007868:	f000 f929 	bl	8007abe <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_57, 0x0007);
 800786c:	2107      	movs	r1, #7
 800786e:	2039      	movs	r0, #57	; 0x39
 8007870:	f000 f925 	bl	8007abe <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_60, 0x0105);
 8007874:	f240 1105 	movw	r1, #261	; 0x105
 8007878:	203c      	movs	r0, #60	; 0x3c
 800787a:	f000 f920 	bl	8007abe <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_61, 0x0808);
 800787e:	f640 0108 	movw	r1, #2056	; 0x808
 8007882:	203d      	movs	r0, #61	; 0x3d
 8007884:	f000 f91b 	bl	8007abe <ili9325_WriteReg>
  HAL_Delay(50); 
 8007888:	2032      	movs	r0, #50	; 0x32
 800788a:	f7fd f903 	bl	8004a94 <HAL_Delay>
  /* Set GRAM area -----------------------------------------------------------*/
  ili9325_WriteReg(LCD_REG_80, 0x0000); /* Horizontal GRAM Start Address */
 800788e:	2100      	movs	r1, #0
 8007890:	2050      	movs	r0, #80	; 0x50
 8007892:	f000 f914 	bl	8007abe <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_81, 0x00EF); /* Horizontal GRAM End Address */
 8007896:	21ef      	movs	r1, #239	; 0xef
 8007898:	2051      	movs	r0, #81	; 0x51
 800789a:	f000 f910 	bl	8007abe <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_82, 0x0000); /* Vertical GRAM Start Address */
 800789e:	2100      	movs	r1, #0
 80078a0:	2052      	movs	r0, #82	; 0x52
 80078a2:	f000 f90c 	bl	8007abe <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_83, 0x013F); /* Vertical GRAM End Address */
 80078a6:	f240 113f 	movw	r1, #319	; 0x13f
 80078aa:	2053      	movs	r0, #83	; 0x53
 80078ac:	f000 f907 	bl	8007abe <ili9325_WriteReg>
  
  ili9325_WriteReg(LCD_REG_96,  0xA700); /* Gate Scan Line(GS=1, scan direction is G320~G1) */
 80078b0:	f44f 4127 	mov.w	r1, #42752	; 0xa700
 80078b4:	2060      	movs	r0, #96	; 0x60
 80078b6:	f000 f902 	bl	8007abe <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_97,  0x0001); /* NDL,VLE, REV */
 80078ba:	2101      	movs	r1, #1
 80078bc:	2061      	movs	r0, #97	; 0x61
 80078be:	f000 f8fe 	bl	8007abe <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_106, 0x0000); /* set scrolling line */
 80078c2:	2100      	movs	r1, #0
 80078c4:	206a      	movs	r0, #106	; 0x6a
 80078c6:	f000 f8fa 	bl	8007abe <ili9325_WriteReg>
  
  /* Partial Display Control -------------------------------------------------*/
  ili9325_WriteReg(LCD_REG_128, 0x0000);
 80078ca:	2100      	movs	r1, #0
 80078cc:	2080      	movs	r0, #128	; 0x80
 80078ce:	f000 f8f6 	bl	8007abe <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_129, 0x0000);
 80078d2:	2100      	movs	r1, #0
 80078d4:	2081      	movs	r0, #129	; 0x81
 80078d6:	f000 f8f2 	bl	8007abe <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_130, 0x0000);
 80078da:	2100      	movs	r1, #0
 80078dc:	2082      	movs	r0, #130	; 0x82
 80078de:	f000 f8ee 	bl	8007abe <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_131, 0x0000);
 80078e2:	2100      	movs	r1, #0
 80078e4:	2083      	movs	r0, #131	; 0x83
 80078e6:	f000 f8ea 	bl	8007abe <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_132, 0x0000);
 80078ea:	2100      	movs	r1, #0
 80078ec:	2084      	movs	r0, #132	; 0x84
 80078ee:	f000 f8e6 	bl	8007abe <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_133, 0x0000);
 80078f2:	2100      	movs	r1, #0
 80078f4:	2085      	movs	r0, #133	; 0x85
 80078f6:	f000 f8e2 	bl	8007abe <ili9325_WriteReg>
  
  /* Panel Control -----------------------------------------------------------*/
  ili9325_WriteReg(LCD_REG_144, 0x0010);
 80078fa:	2110      	movs	r1, #16
 80078fc:	2090      	movs	r0, #144	; 0x90
 80078fe:	f000 f8de 	bl	8007abe <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_146, 0x0000);
 8007902:	2100      	movs	r1, #0
 8007904:	2092      	movs	r0, #146	; 0x92
 8007906:	f000 f8da 	bl	8007abe <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_147, 0x0003);
 800790a:	2103      	movs	r1, #3
 800790c:	2093      	movs	r0, #147	; 0x93
 800790e:	f000 f8d6 	bl	8007abe <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_149, 0x0110);
 8007912:	f44f 7188 	mov.w	r1, #272	; 0x110
 8007916:	2095      	movs	r0, #149	; 0x95
 8007918:	f000 f8d1 	bl	8007abe <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_151, 0x0000);
 800791c:	2100      	movs	r1, #0
 800791e:	2097      	movs	r0, #151	; 0x97
 8007920:	f000 f8cd 	bl	8007abe <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_152, 0x0000);
 8007924:	2100      	movs	r1, #0
 8007926:	2098      	movs	r0, #152	; 0x98
 8007928:	f000 f8c9 	bl	8007abe <ili9325_WriteReg>
  
  /* set GRAM write direction and BGR = 1 */
  /* I/D=00 (Horizontal : increment, Vertical : decrement) */
  /* AM=1 (address is updated in vertical writing direction) */
  ili9325_WriteReg(LCD_REG_3, 0x1028);
 800792c:	f241 0128 	movw	r1, #4136	; 0x1028
 8007930:	2003      	movs	r0, #3
 8007932:	f000 f8c4 	bl	8007abe <ili9325_WriteReg>
  
  /* 262K color and display ON */ 
  ili9325_WriteReg(LCD_REG_7, 0x0173);    
 8007936:	f240 1173 	movw	r1, #371	; 0x173
 800793a:	2007      	movs	r0, #7
 800793c:	f000 f8bf 	bl	8007abe <ili9325_WriteReg>
  
  /* Set the Cursor */ 
  ili9325_SetCursor(0, 0);
 8007940:	2100      	movs	r1, #0
 8007942:	2000      	movs	r0, #0
 8007944:	f000 f86d 	bl	8007a22 <ili9325_SetCursor>
  
  /* Prepare to write GRAM */
  LCD_IO_WriteReg(LCD_REG_34);
 8007948:	2022      	movs	r0, #34	; 0x22
 800794a:	f7ff feed 	bl	8007728 <LCD_IO_WriteReg>
}
 800794e:	bf00      	nop
 8007950:	bd80      	pop	{r7, pc}

08007952 <ili9325_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9325_DisplayOn(void)
{
 8007952:	b580      	push	{r7, lr}
 8007954:	af00      	add	r7, sp, #0
  /* Power On sequence -------------------------------------------------------*/
  ili9325_WriteReg(LCD_REG_16, 0x0000); /* SAP, BT[3:0], AP, DSTB, SLP, STB */
 8007956:	2100      	movs	r1, #0
 8007958:	2010      	movs	r0, #16
 800795a:	f000 f8b0 	bl	8007abe <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_17, 0x0000); /* DC1[2:0], DC0[2:0], VC[2:0] */
 800795e:	2100      	movs	r1, #0
 8007960:	2011      	movs	r0, #17
 8007962:	f000 f8ac 	bl	8007abe <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_18, 0x0000); /* VREG1OUT voltage */
 8007966:	2100      	movs	r1, #0
 8007968:	2012      	movs	r0, #18
 800796a:	f000 f8a8 	bl	8007abe <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_19, 0x0000); /* VDV[4:0] for VCOM amplitude*/
 800796e:	2100      	movs	r1, #0
 8007970:	2013      	movs	r0, #19
 8007972:	f000 f8a4 	bl	8007abe <ili9325_WriteReg>

  ili9325_WriteReg(LCD_REG_16, 0x17B0); /* SAP, BT[3:0], AP, DSTB, SLP, STB */
 8007976:	f241 71b0 	movw	r1, #6064	; 0x17b0
 800797a:	2010      	movs	r0, #16
 800797c:	f000 f89f 	bl	8007abe <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_17, 0x0137); /* DC1[2:0], DC0[2:0], VC[2:0] */
 8007980:	f240 1137 	movw	r1, #311	; 0x137
 8007984:	2011      	movs	r0, #17
 8007986:	f000 f89a 	bl	8007abe <ili9325_WriteReg>

  ili9325_WriteReg(LCD_REG_18, 0x0139); /* VREG1OUT voltage */
 800798a:	f240 1139 	movw	r1, #313	; 0x139
 800798e:	2012      	movs	r0, #18
 8007990:	f000 f895 	bl	8007abe <ili9325_WriteReg>

  ili9325_WriteReg(LCD_REG_19, 0x1d00); /* VDV[4:0] for VCOM amplitude */
 8007994:	f44f 51e8 	mov.w	r1, #7424	; 0x1d00
 8007998:	2013      	movs	r0, #19
 800799a:	f000 f890 	bl	8007abe <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_41, 0x0013); /* VCM[4:0] for VCOMH */
 800799e:	2113      	movs	r1, #19
 80079a0:	2029      	movs	r0, #41	; 0x29
 80079a2:	f000 f88c 	bl	8007abe <ili9325_WriteReg>
 
  /* Display On */
  ili9325_WriteReg(LCD_REG_7, 0x0173); /* 262K color and display ON */
 80079a6:	f240 1173 	movw	r1, #371	; 0x173
 80079aa:	2007      	movs	r0, #7
 80079ac:	f000 f887 	bl	8007abe <ili9325_WriteReg>
}
 80079b0:	bf00      	nop
 80079b2:	bd80      	pop	{r7, pc}

080079b4 <ili9325_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9325_DisplayOff(void)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	af00      	add	r7, sp, #0
  /* Power Off sequence ------------------------------------------------------*/
  ili9325_WriteReg(LCD_REG_16, 0x0000); /* SAP, BT[3:0], AP, DSTB, SLP, STB */
 80079b8:	2100      	movs	r1, #0
 80079ba:	2010      	movs	r0, #16
 80079bc:	f000 f87f 	bl	8007abe <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_17, 0x0000); /* DC1[2:0], DC0[2:0], VC[2:0] */
 80079c0:	2100      	movs	r1, #0
 80079c2:	2011      	movs	r0, #17
 80079c4:	f000 f87b 	bl	8007abe <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_18, 0x0000); /* VREG1OUT voltage */
 80079c8:	2100      	movs	r1, #0
 80079ca:	2012      	movs	r0, #18
 80079cc:	f000 f877 	bl	8007abe <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_19, 0x0000); /* VDV[4:0] for VCOM amplitude*/
 80079d0:	2100      	movs	r1, #0
 80079d2:	2013      	movs	r0, #19
 80079d4:	f000 f873 	bl	8007abe <ili9325_WriteReg>
  
  ili9325_WriteReg(LCD_REG_41, 0x0000); /* VCM[4:0] for VCOMH */
 80079d8:	2100      	movs	r1, #0
 80079da:	2029      	movs	r0, #41	; 0x29
 80079dc:	f000 f86f 	bl	8007abe <ili9325_WriteReg>
  
  /* Display Off */
  ili9325_WriteReg(LCD_REG_7, 0x0); 
 80079e0:	2100      	movs	r1, #0
 80079e2:	2007      	movs	r0, #7
 80079e4:	f000 f86b 	bl	8007abe <ili9325_WriteReg>
}
 80079e8:	bf00      	nop
 80079ea:	bd80      	pop	{r7, pc}

080079ec <ili9325_GetLcdPixelWidth>:
  * @brief  Get the LCD pixel Width.
  * @param  None
  * @retval The Lcd Pixel Width
  */
uint16_t ili9325_GetLcdPixelWidth(void)
{
 80079ec:	b480      	push	{r7}
 80079ee:	af00      	add	r7, sp, #0
 return (uint16_t)320;
 80079f0:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 80079f4:	4618      	mov	r0, r3
 80079f6:	46bd      	mov	sp, r7
 80079f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fc:	4770      	bx	lr

080079fe <ili9325_GetLcdPixelHeight>:
  * @brief  Get the LCD pixel Height.
  * @param  None
  * @retval The Lcd Pixel Height
  */
uint16_t ili9325_GetLcdPixelHeight(void)
{
 80079fe:	b480      	push	{r7}
 8007a00:	af00      	add	r7, sp, #0
 return (uint16_t)240;
 8007a02:	23f0      	movs	r3, #240	; 0xf0
}
 8007a04:	4618      	mov	r0, r3
 8007a06:	46bd      	mov	sp, r7
 8007a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0c:	4770      	bx	lr

08007a0e <ili9325_ReadID>:
  * @brief  Get the ILI9325 ID.
  * @param  None
  * @retval The ILI9325 ID 
  */
uint16_t ili9325_ReadID(void)
{
 8007a0e:	b580      	push	{r7, lr}
 8007a10:	af00      	add	r7, sp, #0
  LCD_IO_Init(); 
 8007a12:	f7ff fe5f 	bl	80076d4 <LCD_IO_Init>
  return (ili9325_ReadReg(0x00));
 8007a16:	2000      	movs	r0, #0
 8007a18:	f000 f866 	bl	8007ae8 <ili9325_ReadReg>
 8007a1c:	4603      	mov	r3, r0
}
 8007a1e:	4618      	mov	r0, r3
 8007a20:	bd80      	pop	{r7, pc}

08007a22 <ili9325_SetCursor>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval None
  */
void ili9325_SetCursor(uint16_t Xpos, uint16_t Ypos)
{
 8007a22:	b580      	push	{r7, lr}
 8007a24:	b082      	sub	sp, #8
 8007a26:	af00      	add	r7, sp, #0
 8007a28:	4603      	mov	r3, r0
 8007a2a:	460a      	mov	r2, r1
 8007a2c:	80fb      	strh	r3, [r7, #6]
 8007a2e:	4613      	mov	r3, r2
 8007a30:	80bb      	strh	r3, [r7, #4]
//  ili9325_WriteReg(LCD_REG_32, Ypos);
//  ili9325_WriteReg(LCD_REG_33, (ILI9325_LCD_PIXEL_WIDTH - 1 - Xpos));

  ili9325_WriteReg(LCD_REG_32, (ILI9325_LCD_PIXEL_HEIGHT- 1 - Ypos));
 8007a32:	88bb      	ldrh	r3, [r7, #4]
 8007a34:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 8007a38:	b29b      	uxth	r3, r3
 8007a3a:	4619      	mov	r1, r3
 8007a3c:	2020      	movs	r0, #32
 8007a3e:	f000 f83e 	bl	8007abe <ili9325_WriteReg>
  ili9325_WriteReg(LCD_REG_33, Xpos);
 8007a42:	88fb      	ldrh	r3, [r7, #6]
 8007a44:	4619      	mov	r1, r3
 8007a46:	2021      	movs	r0, #33	; 0x21
 8007a48:	f000 f839 	bl	8007abe <ili9325_WriteReg>

}
 8007a4c:	bf00      	nop
 8007a4e:	3708      	adds	r7, #8
 8007a50:	46bd      	mov	sp, r7
 8007a52:	bd80      	pop	{r7, pc}

08007a54 <ili9325_WritePixel>:
  * @param  Ypos: specifies the Y position.
  * @param  RGBCode: the RGB pixel color
  * @retval None
  */
void ili9325_WritePixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGBCode)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b082      	sub	sp, #8
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	4603      	mov	r3, r0
 8007a5c:	80fb      	strh	r3, [r7, #6]
 8007a5e:	460b      	mov	r3, r1
 8007a60:	80bb      	strh	r3, [r7, #4]
 8007a62:	4613      	mov	r3, r2
 8007a64:	807b      	strh	r3, [r7, #2]
  /* Set Cursor */
  ili9325_SetCursor(Xpos, Ypos);
 8007a66:	88ba      	ldrh	r2, [r7, #4]
 8007a68:	88fb      	ldrh	r3, [r7, #6]
 8007a6a:	4611      	mov	r1, r2
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	f7ff ffd8 	bl	8007a22 <ili9325_SetCursor>
  
  /* Prepare to write GRAM */
  LCD_IO_WriteReg(LCD_REG_34);
 8007a72:	2022      	movs	r0, #34	; 0x22
 8007a74:	f7ff fe58 	bl	8007728 <LCD_IO_WriteReg>

  /* Write 16-bit GRAM Reg */
  LCD_IO_WriteMultipleData((uint8_t*)&RGBCode, 2);
 8007a78:	1cbb      	adds	r3, r7, #2
 8007a7a:	2102      	movs	r1, #2
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	f7ff fe31 	bl	80076e4 <LCD_IO_WriteMultipleData>
}
 8007a82:	bf00      	nop
 8007a84:	3708      	adds	r7, #8
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bd80      	pop	{r7, pc}

08007a8a <ili9325_ReadPixel>:
  * @brief  Read pixel.
  * @param  None
  * @retval The RGB pixel color
  */
uint16_t ili9325_ReadPixel(uint16_t Xpos, uint16_t Ypos)
{
 8007a8a:	b580      	push	{r7, lr}
 8007a8c:	b082      	sub	sp, #8
 8007a8e:	af00      	add	r7, sp, #0
 8007a90:	4603      	mov	r3, r0
 8007a92:	460a      	mov	r2, r1
 8007a94:	80fb      	strh	r3, [r7, #6]
 8007a96:	4613      	mov	r3, r2
 8007a98:	80bb      	strh	r3, [r7, #4]
  /* Set Cursor */
  ili9325_SetCursor(Xpos, Ypos);
 8007a9a:	88ba      	ldrh	r2, [r7, #4]
 8007a9c:	88fb      	ldrh	r3, [r7, #6]
 8007a9e:	4611      	mov	r1, r2
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	f7ff ffbe 	bl	8007a22 <ili9325_SetCursor>
  
  /* Prepare to write GRAM */
  LCD_IO_WriteReg(LCD_REG_34);
 8007aa6:	2022      	movs	r0, #34	; 0x22
 8007aa8:	f7ff fe3e 	bl	8007728 <LCD_IO_WriteReg>
  
  /* Dummy read */
  LCD_IO_ReadData();
 8007aac:	f7ff fe4c 	bl	8007748 <LCD_IO_ReadData>
  
  /* Read 16-bit Reg */
  return (LCD_IO_ReadData());
 8007ab0:	f7ff fe4a 	bl	8007748 <LCD_IO_ReadData>
 8007ab4:	4603      	mov	r3, r0
}
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	3708      	adds	r7, #8
 8007aba:	46bd      	mov	sp, r7
 8007abc:	bd80      	pop	{r7, pc}

08007abe <ili9325_WriteReg>:
  * @param  LCDReg: Address of the selected register.
  * @param  LCDRegValue: Value to write to the selected register.
  * @retval None
  */
void ili9325_WriteReg(uint8_t LCDReg, uint16_t LCDRegValue)
{
 8007abe:	b580      	push	{r7, lr}
 8007ac0:	b082      	sub	sp, #8
 8007ac2:	af00      	add	r7, sp, #0
 8007ac4:	4603      	mov	r3, r0
 8007ac6:	460a      	mov	r2, r1
 8007ac8:	71fb      	strb	r3, [r7, #7]
 8007aca:	4613      	mov	r3, r2
 8007acc:	80bb      	strh	r3, [r7, #4]
  LCD_IO_WriteReg(LCDReg);
 8007ace:	79fb      	ldrb	r3, [r7, #7]
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	f7ff fe29 	bl	8007728 <LCD_IO_WriteReg>
  
  /* Write 16-bit GRAM Reg */
  LCD_IO_WriteMultipleData((uint8_t*)&LCDRegValue, 2);
 8007ad6:	1d3b      	adds	r3, r7, #4
 8007ad8:	2102      	movs	r1, #2
 8007ada:	4618      	mov	r0, r3
 8007adc:	f7ff fe02 	bl	80076e4 <LCD_IO_WriteMultipleData>
}
 8007ae0:	bf00      	nop
 8007ae2:	3708      	adds	r7, #8
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	bd80      	pop	{r7, pc}

08007ae8 <ili9325_ReadReg>:
  * @brief  Reads the selected LCD Register.
  * @param  LCDReg: address of the selected register.
  * @retval LCD Register Value.
  */
uint16_t ili9325_ReadReg(uint8_t LCDReg)
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b082      	sub	sp, #8
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	4603      	mov	r3, r0
 8007af0:	71fb      	strb	r3, [r7, #7]
  /* Write 16-bit Index (then Read Reg) */
  LCD_IO_WriteReg(LCDReg);
 8007af2:	79fb      	ldrb	r3, [r7, #7]
 8007af4:	4618      	mov	r0, r3
 8007af6:	f7ff fe17 	bl	8007728 <LCD_IO_WriteReg>

  /* Read 16-bit Reg */
  return (LCD_IO_ReadData());
 8007afa:	f7ff fe25 	bl	8007748 <LCD_IO_ReadData>
 8007afe:	4603      	mov	r3, r0
}
 8007b00:	4618      	mov	r0, r3
 8007b02:	3708      	adds	r7, #8
 8007b04:	46bd      	mov	sp, r7
 8007b06:	bd80      	pop	{r7, pc}

08007b08 <ili9325_SetDisplayWindow>:
  * @param  Height: display window height.
  * @param  Width:  display window width.
  * @retval None
  */
void ili9325_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8007b08:	b590      	push	{r4, r7, lr}
 8007b0a:	b083      	sub	sp, #12
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	4604      	mov	r4, r0
 8007b10:	4608      	mov	r0, r1
 8007b12:	4611      	mov	r1, r2
 8007b14:	461a      	mov	r2, r3
 8007b16:	4623      	mov	r3, r4
 8007b18:	80fb      	strh	r3, [r7, #6]
 8007b1a:	4603      	mov	r3, r0
 8007b1c:	80bb      	strh	r3, [r7, #4]
 8007b1e:	460b      	mov	r3, r1
 8007b20:	807b      	strh	r3, [r7, #2]
 8007b22:	4613      	mov	r3, r2
 8007b24:	803b      	strh	r3, [r7, #0]
//  ili9325_WriteReg(LCD_REG_82, ILI9325_LCD_PIXEL_WIDTH - Xpos - Width);
//  /* Vertical GRAM End Address */
//  ili9325_WriteReg(LCD_REG_83, ILI9325_LCD_PIXEL_WIDTH - Xpos - 1);   
  
  /* Horizontal GRAM Start Address */
  ili9325_WriteReg(LCD_REG_80, (ILI9325_LCD_PIXEL_HEIGHT - Ypos - Height));
 8007b26:	88bb      	ldrh	r3, [r7, #4]
 8007b28:	425b      	negs	r3, r3
 8007b2a:	b29a      	uxth	r2, r3
 8007b2c:	883b      	ldrh	r3, [r7, #0]
 8007b2e:	1ad3      	subs	r3, r2, r3
 8007b30:	b29b      	uxth	r3, r3
 8007b32:	33f0      	adds	r3, #240	; 0xf0
 8007b34:	b29b      	uxth	r3, r3
 8007b36:	4619      	mov	r1, r3
 8007b38:	2050      	movs	r0, #80	; 0x50
 8007b3a:	f7ff ffc0 	bl	8007abe <ili9325_WriteReg>
  /* Horizontal GRAM End Address */
  ili9325_WriteReg(LCD_REG_81, (ILI9325_LCD_PIXEL_HEIGHT - Ypos - 1));
 8007b3e:	88bb      	ldrh	r3, [r7, #4]
 8007b40:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 8007b44:	b29b      	uxth	r3, r3
 8007b46:	4619      	mov	r1, r3
 8007b48:	2051      	movs	r0, #81	; 0x51
 8007b4a:	f7ff ffb8 	bl	8007abe <ili9325_WriteReg>
  
  /* Vertical GRAM Start Address */
  ili9325_WriteReg(LCD_REG_82,  Xpos);
 8007b4e:	88fb      	ldrh	r3, [r7, #6]
 8007b50:	4619      	mov	r1, r3
 8007b52:	2052      	movs	r0, #82	; 0x52
 8007b54:	f7ff ffb3 	bl	8007abe <ili9325_WriteReg>
  /* Vertical GRAM End Address */
  ili9325_WriteReg(LCD_REG_83, (Xpos + Width - 1));
 8007b58:	88fa      	ldrh	r2, [r7, #6]
 8007b5a:	887b      	ldrh	r3, [r7, #2]
 8007b5c:	4413      	add	r3, r2
 8007b5e:	b29b      	uxth	r3, r3
 8007b60:	3b01      	subs	r3, #1
 8007b62:	b29b      	uxth	r3, r3
 8007b64:	4619      	mov	r1, r3
 8007b66:	2053      	movs	r0, #83	; 0x53
 8007b68:	f7ff ffa9 	bl	8007abe <ili9325_WriteReg>
  
}
 8007b6c:	bf00      	nop
 8007b6e:	370c      	adds	r7, #12
 8007b70:	46bd      	mov	sp, r7
 8007b72:	bd90      	pop	{r4, r7, pc}

08007b74 <ili9325_DrawHLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.  
  * @retval None
  */
void ili9325_DrawHLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8007b74:	b590      	push	{r4, r7, lr}
 8007b76:	b085      	sub	sp, #20
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	4604      	mov	r4, r0
 8007b7c:	4608      	mov	r0, r1
 8007b7e:	4611      	mov	r1, r2
 8007b80:	461a      	mov	r2, r3
 8007b82:	4623      	mov	r3, r4
 8007b84:	80fb      	strh	r3, [r7, #6]
 8007b86:	4603      	mov	r3, r0
 8007b88:	80bb      	strh	r3, [r7, #4]
 8007b8a:	460b      	mov	r3, r1
 8007b8c:	807b      	strh	r3, [r7, #2]
 8007b8e:	4613      	mov	r3, r2
 8007b90:	803b      	strh	r3, [r7, #0]
  uint16_t counter = 0;
 8007b92:	2300      	movs	r3, #0
 8007b94:	81fb      	strh	r3, [r7, #14]
  
  /* Set Cursor */
  ili9325_SetCursor(Xpos, Ypos); 
 8007b96:	887a      	ldrh	r2, [r7, #2]
 8007b98:	88bb      	ldrh	r3, [r7, #4]
 8007b9a:	4611      	mov	r1, r2
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	f7ff ff40 	bl	8007a22 <ili9325_SetCursor>
  
  /* Prepare to write GRAM */
  LCD_IO_WriteReg(LCD_REG_34);
 8007ba2:	2022      	movs	r0, #34	; 0x22
 8007ba4:	f7ff fdc0 	bl	8007728 <LCD_IO_WriteReg>

  /* Sent a complete line */
  for(counter = 0; counter < Length; counter++)
 8007ba8:	2300      	movs	r3, #0
 8007baa:	81fb      	strh	r3, [r7, #14]
 8007bac:	e007      	b.n	8007bbe <ili9325_DrawHLine+0x4a>
  {
    ArrayRGB[counter] = RGBCode;
 8007bae:	89fb      	ldrh	r3, [r7, #14]
 8007bb0:	490a      	ldr	r1, [pc, #40]	; (8007bdc <ili9325_DrawHLine+0x68>)
 8007bb2:	88fa      	ldrh	r2, [r7, #6]
 8007bb4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
  for(counter = 0; counter < Length; counter++)
 8007bb8:	89fb      	ldrh	r3, [r7, #14]
 8007bba:	3301      	adds	r3, #1
 8007bbc:	81fb      	strh	r3, [r7, #14]
 8007bbe:	89fa      	ldrh	r2, [r7, #14]
 8007bc0:	883b      	ldrh	r3, [r7, #0]
 8007bc2:	429a      	cmp	r2, r3
 8007bc4:	d3f3      	bcc.n	8007bae <ili9325_DrawHLine+0x3a>
  }  

  LCD_IO_WriteMultipleData((uint8_t*)&ArrayRGB[0], Length * 2);
 8007bc6:	883b      	ldrh	r3, [r7, #0]
 8007bc8:	005b      	lsls	r3, r3, #1
 8007bca:	4619      	mov	r1, r3
 8007bcc:	4803      	ldr	r0, [pc, #12]	; (8007bdc <ili9325_DrawHLine+0x68>)
 8007bce:	f7ff fd89 	bl	80076e4 <LCD_IO_WriteMultipleData>
}
 8007bd2:	bf00      	nop
 8007bd4:	3714      	adds	r7, #20
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bd90      	pop	{r4, r7, pc}
 8007bda:	bf00      	nop
 8007bdc:	20001400 	.word	0x20001400

08007be0 <ili9325_DrawVLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.  
  * @retval None
  */
void ili9325_DrawVLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8007be0:	b590      	push	{r4, r7, lr}
 8007be2:	b085      	sub	sp, #20
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	4604      	mov	r4, r0
 8007be8:	4608      	mov	r0, r1
 8007bea:	4611      	mov	r1, r2
 8007bec:	461a      	mov	r2, r3
 8007bee:	4623      	mov	r3, r4
 8007bf0:	80fb      	strh	r3, [r7, #6]
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	80bb      	strh	r3, [r7, #4]
 8007bf6:	460b      	mov	r3, r1
 8007bf8:	807b      	strh	r3, [r7, #2]
 8007bfa:	4613      	mov	r3, r2
 8007bfc:	803b      	strh	r3, [r7, #0]
  uint16_t counter = 0;
 8007bfe:	2300      	movs	r3, #0
 8007c00:	81fb      	strh	r3, [r7, #14]

  /* set GRAM write direction and BGR = 1 */
  /* I/D=00 (Horizontal : increment, Vertical : decrement) */
  /* AM=1 (address is updated in vertical writing direction) */
  ili9325_WriteReg(LCD_REG_3, 0x1020);
 8007c02:	f44f 5181 	mov.w	r1, #4128	; 0x1020
 8007c06:	2003      	movs	r0, #3
 8007c08:	f7ff ff59 	bl	8007abe <ili9325_WriteReg>
  
  /* Set Cursor */
  ili9325_SetCursor(Xpos, Ypos);
 8007c0c:	887a      	ldrh	r2, [r7, #2]
 8007c0e:	88bb      	ldrh	r3, [r7, #4]
 8007c10:	4611      	mov	r1, r2
 8007c12:	4618      	mov	r0, r3
 8007c14:	f7ff ff05 	bl	8007a22 <ili9325_SetCursor>
  
  /* Prepare to write GRAM */
  LCD_IO_WriteReg(LCD_REG_34);
 8007c18:	2022      	movs	r0, #34	; 0x22
 8007c1a:	f7ff fd85 	bl	8007728 <LCD_IO_WriteReg>

  /* Fill a complete vertical line */
  for(counter = 0; counter < Length; counter++)
 8007c1e:	2300      	movs	r3, #0
 8007c20:	81fb      	strh	r3, [r7, #14]
 8007c22:	e007      	b.n	8007c34 <ili9325_DrawVLine+0x54>
  {
    ArrayRGB[counter] = RGBCode;
 8007c24:	89fb      	ldrh	r3, [r7, #14]
 8007c26:	490d      	ldr	r1, [pc, #52]	; (8007c5c <ili9325_DrawVLine+0x7c>)
 8007c28:	88fa      	ldrh	r2, [r7, #6]
 8007c2a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
  for(counter = 0; counter < Length; counter++)
 8007c2e:	89fb      	ldrh	r3, [r7, #14]
 8007c30:	3301      	adds	r3, #1
 8007c32:	81fb      	strh	r3, [r7, #14]
 8007c34:	89fa      	ldrh	r2, [r7, #14]
 8007c36:	883b      	ldrh	r3, [r7, #0]
 8007c38:	429a      	cmp	r2, r3
 8007c3a:	d3f3      	bcc.n	8007c24 <ili9325_DrawVLine+0x44>
  }
  
  /* Write 16-bit GRAM Reg */
  LCD_IO_WriteMultipleData((uint8_t*)&ArrayRGB[0], Length * 2);
 8007c3c:	883b      	ldrh	r3, [r7, #0]
 8007c3e:	005b      	lsls	r3, r3, #1
 8007c40:	4619      	mov	r1, r3
 8007c42:	4806      	ldr	r0, [pc, #24]	; (8007c5c <ili9325_DrawVLine+0x7c>)
 8007c44:	f7ff fd4e 	bl	80076e4 <LCD_IO_WriteMultipleData>
  
  /* set GRAM write direction and BGR = 1 */
  /* I/D=00 (Horizontal : increment, Vertical : decrement) */
  /* AM=1 (address is updated in vertical writing direction) */
  ili9325_WriteReg(LCD_REG_3, 0x1028);  
 8007c48:	f241 0128 	movw	r1, #4136	; 0x1028
 8007c4c:	2003      	movs	r0, #3
 8007c4e:	f7ff ff36 	bl	8007abe <ili9325_WriteReg>
}
 8007c52:	bf00      	nop
 8007c54:	3714      	adds	r7, #20
 8007c56:	46bd      	mov	sp, r7
 8007c58:	bd90      	pop	{r4, r7, pc}
 8007c5a:	bf00      	nop
 8007c5c:	20001400 	.word	0x20001400

08007c60 <ili9325_DrawBitmap>:
  * @param  Xpos: Bmp X position in the LCD
  * @param  Ypos: Bmp Y position in the LCD    
  * @retval None
  */
void ili9325_DrawBitmap(uint16_t Xpos, uint16_t Ypos, uint8_t *pbmp)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b084      	sub	sp, #16
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	4603      	mov	r3, r0
 8007c68:	603a      	str	r2, [r7, #0]
 8007c6a:	80fb      	strh	r3, [r7, #6]
 8007c6c:	460b      	mov	r3, r1
 8007c6e:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, size = 0;
 8007c70:	2300      	movs	r3, #0
 8007c72:	60fb      	str	r3, [r7, #12]
 8007c74:	2300      	movs	r3, #0
 8007c76:	60bb      	str	r3, [r7, #8]
  /* Read bitmap size */
  size = *(volatile uint16_t *) (pbmp + 2);
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	3302      	adds	r3, #2
 8007c7c:	881b      	ldrh	r3, [r3, #0]
 8007c7e:	b29b      	uxth	r3, r3
 8007c80:	60bb      	str	r3, [r7, #8]
  size |= (*(volatile uint16_t *) (pbmp + 4)) << 16;
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	3304      	adds	r3, #4
 8007c86:	881b      	ldrh	r3, [r3, #0]
 8007c88:	b29b      	uxth	r3, r3
 8007c8a:	041b      	lsls	r3, r3, #16
 8007c8c:	461a      	mov	r2, r3
 8007c8e:	68bb      	ldr	r3, [r7, #8]
 8007c90:	4313      	orrs	r3, r2
 8007c92:	60bb      	str	r3, [r7, #8]
  /* Get bitmap data address offset */
  index = *(volatile uint16_t *) (pbmp + 10);
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	330a      	adds	r3, #10
 8007c98:	881b      	ldrh	r3, [r3, #0]
 8007c9a:	b29b      	uxth	r3, r3
 8007c9c:	60fb      	str	r3, [r7, #12]
  index |= (*(volatile uint16_t *) (pbmp + 12)) << 16;
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	330c      	adds	r3, #12
 8007ca2:	881b      	ldrh	r3, [r3, #0]
 8007ca4:	b29b      	uxth	r3, r3
 8007ca6:	041b      	lsls	r3, r3, #16
 8007ca8:	461a      	mov	r2, r3
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	4313      	orrs	r3, r2
 8007cae:	60fb      	str	r3, [r7, #12]
  size = (size - index)/2;
 8007cb0:	68ba      	ldr	r2, [r7, #8]
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	1ad3      	subs	r3, r2, r3
 8007cb6:	085b      	lsrs	r3, r3, #1
 8007cb8:	60bb      	str	r3, [r7, #8]
  pbmp += index;
 8007cba:	683a      	ldr	r2, [r7, #0]
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	4413      	add	r3, r2
 8007cc0:	603b      	str	r3, [r7, #0]
  /* Set GRAM write direction and BGR = 1 */
  /* I/D=00 (Horizontal : decrement, Vertical : decrement) */
  /* AM=1 (address is updated in vertical writing direction) */
  ili9325_WriteReg(LCD_REG_3, 0x1038);
 8007cc2:	f241 0138 	movw	r1, #4152	; 0x1038
 8007cc6:	2003      	movs	r0, #3
 8007cc8:	f7ff fef9 	bl	8007abe <ili9325_WriteReg>

  /* Set Cursor */
  ili9325_SetCursor(Xpos, Ypos);  
 8007ccc:	88ba      	ldrh	r2, [r7, #4]
 8007cce:	88fb      	ldrh	r3, [r7, #6]
 8007cd0:	4611      	mov	r1, r2
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	f7ff fea5 	bl	8007a22 <ili9325_SetCursor>
  
  /* Prepare to write GRAM */
  LCD_IO_WriteReg(LCD_REG_34);
 8007cd8:	2022      	movs	r0, #34	; 0x22
 8007cda:	f7ff fd25 	bl	8007728 <LCD_IO_WriteReg>
 
  LCD_IO_WriteMultipleData((uint8_t*)pbmp, size*2);
 8007cde:	68bb      	ldr	r3, [r7, #8]
 8007ce0:	005b      	lsls	r3, r3, #1
 8007ce2:	4619      	mov	r1, r3
 8007ce4:	6838      	ldr	r0, [r7, #0]
 8007ce6:	f7ff fcfd 	bl	80076e4 <LCD_IO_WriteMultipleData>
 
  /* Set GRAM write direction and BGR = 1 */
  /* I/D = 01 (Horizontal : increment, Vertical : decrement) */
  /* AM = 1 (address is updated in vertical writing direction) */
  ili9325_WriteReg(LCD_REG_3, 0x1028);
 8007cea:	f241 0128 	movw	r1, #4136	; 0x1028
 8007cee:	2003      	movs	r0, #3
 8007cf0:	f7ff fee5 	bl	8007abe <ili9325_WriteReg>
}
 8007cf4:	bf00      	nop
 8007cf6:	3710      	adds	r7, #16
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	bd80      	pop	{r7, pc}

08007cfc <ili9325_DrawRGBImage>:
  * @param  Xsize: Image X size in the LCD
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  */
void ili9325_DrawRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint8_t *pdata)
{
 8007cfc:	b590      	push	{r4, r7, lr}
 8007cfe:	b085      	sub	sp, #20
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	4604      	mov	r4, r0
 8007d04:	4608      	mov	r0, r1
 8007d06:	4611      	mov	r1, r2
 8007d08:	461a      	mov	r2, r3
 8007d0a:	4623      	mov	r3, r4
 8007d0c:	80fb      	strh	r3, [r7, #6]
 8007d0e:	4603      	mov	r3, r0
 8007d10:	80bb      	strh	r3, [r7, #4]
 8007d12:	460b      	mov	r3, r1
 8007d14:	807b      	strh	r3, [r7, #2]
 8007d16:	4613      	mov	r3, r2
 8007d18:	803b      	strh	r3, [r7, #0]
  uint32_t size = 0;
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	60fb      	str	r3, [r7, #12]

  size = (Xsize * Ysize);
 8007d1e:	887b      	ldrh	r3, [r7, #2]
 8007d20:	883a      	ldrh	r2, [r7, #0]
 8007d22:	fb02 f303 	mul.w	r3, r2, r3
 8007d26:	60fb      	str	r3, [r7, #12]

  /* Set Cursor */
  ili9325_SetCursor(Xpos, Ypos);  
 8007d28:	88ba      	ldrh	r2, [r7, #4]
 8007d2a:	88fb      	ldrh	r3, [r7, #6]
 8007d2c:	4611      	mov	r1, r2
 8007d2e:	4618      	mov	r0, r3
 8007d30:	f7ff fe77 	bl	8007a22 <ili9325_SetCursor>
  
  /* Prepare to write GRAM */
  LCD_IO_WriteReg(LCD_REG_34);
 8007d34:	2022      	movs	r0, #34	; 0x22
 8007d36:	f7ff fcf7 	bl	8007728 <LCD_IO_WriteReg>
 
  LCD_IO_WriteMultipleData((uint8_t*)pdata, size*2);
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	005b      	lsls	r3, r3, #1
 8007d3e:	4619      	mov	r1, r3
 8007d40:	6a38      	ldr	r0, [r7, #32]
 8007d42:	f7ff fccf 	bl	80076e4 <LCD_IO_WriteMultipleData>
}
 8007d46:	bf00      	nop
 8007d48:	3714      	adds	r7, #20
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	bd90      	pop	{r4, r7, pc}
	...

08007d50 <ili9325_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void ili9325_Clear(uint16_t Color)
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b084      	sub	sp, #16
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	4603      	mov	r3, r0
 8007d58:	80fb      	strh	r3, [r7, #6]
  uint32_t size = ILI9325_LCD_PIXEL_HEIGHT * ILI9325_LCD_PIXEL_WIDTH;
 8007d5a:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8007d5e:	60fb      	str	r3, [r7, #12]
  
  /* Set Cursor */
  ili9325_SetCursor(0, 0);  
 8007d60:	2100      	movs	r1, #0
 8007d62:	2000      	movs	r0, #0
 8007d64:	f7ff fe5d 	bl	8007a22 <ili9325_SetCursor>
  
  /* Prepare to write GRAM */
  LCD_IO_WriteReg(LCD_REG_34);
 8007d68:	2022      	movs	r0, #34	; 0x22
 8007d6a:	f7ff fcdd 	bl	8007728 <LCD_IO_WriteReg>
  
  while((size--) != 0)
 8007d6e:	e002      	b.n	8007d76 <ili9325_Clear+0x26>
  {
    /* Write 16-bit Data */
    LCD_RAM = Color;
 8007d70:	4a05      	ldr	r2, [pc, #20]	; (8007d88 <ili9325_Clear+0x38>)
 8007d72:	88fb      	ldrh	r3, [r7, #6]
 8007d74:	8013      	strh	r3, [r2, #0]
  while((size--) != 0)
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	1e5a      	subs	r2, r3, #1
 8007d7a:	60fa      	str	r2, [r7, #12]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d1f7      	bne.n	8007d70 <ili9325_Clear+0x20>
  }
}
 8007d80:	bf00      	nop
 8007d82:	3710      	adds	r7, #16
 8007d84:	46bd      	mov	sp, r7
 8007d86:	bd80      	pop	{r7, pc}
 8007d88:	60010000 	.word	0x60010000

08007d8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b08a      	sub	sp, #40	; 0x28
 8007d90:	af08      	add	r7, sp, #32
  /* USER CODE BEGIN 1 */
	uint16_t linenum = 0;
 8007d92:	2300      	movs	r3, #0
 8007d94:	80fb      	strh	r3, [r7, #6]
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007d96:	f7fc fe0b 	bl	80049b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007d9a:	f000 f86d 	bl	8007e78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007d9e:	f000 f94f 	bl	8008040 <MX_GPIO_Init>
  MX_CRC_Init();
 8007da2:	f000 f8d9 	bl	8007f58 <MX_CRC_Init>
  MX_FSMC_Init();
 8007da6:	f000 fa31 	bl	800820c <MX_FSMC_Init>
  MX_SPI3_Init();
 8007daa:	f000 f8e9 	bl	8007f80 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8007dae:	f000 f91d 	bl	8007fec <MX_USART1_UART_Init>
  MX_X_CUBE_AI_Init();
 8007db2:	f7ff fa23 	bl	80071fc <MX_X_CUBE_AI_Init>
  /* USER CODE BEGIN 2 */
  /* Initialize the LCD */
  BSP_LCD_Init();
 8007db6:	f000 fcf3 	bl	80087a0 <BSP_LCD_Init>
    /* Enable the LCD */
  BSP_LCD_DisplayOn();
 8007dba:	f001 f87d 	bl	8008eb8 <BSP_LCD_DisplayOn>
    /* Touch Panel configuration */
  printf("LCD is on");
 8007dbe:	4827      	ldr	r0, [pc, #156]	; (8007e5c <main+0xd0>)
 8007dc0:	f002 f8f8 	bl	8009fb4 <iprintf>
  TouchPanel_Calibrate();
 8007dc4:	f002 f81e 	bl	8009e04 <TouchPanel_Calibrate>
  drawMenu();
 8007dc8:	f000 fc88 	bl	80086dc <drawMenu>
  printf("touch calibrated");
 8007dcc:	4824      	ldr	r0, [pc, #144]	; (8007e60 <main+0xd4>)
 8007dce:	f002 f8f1 	bl	8009fb4 <iprintf>
  while (1)
  {
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */

	  	  	getDisplayPoint(&display, Read_Ads7846(), &matrix );
 8007dd2:	f001 fc9d 	bl	8009710 <Read_Ads7846>
 8007dd6:	4603      	mov	r3, r0
 8007dd8:	4a22      	ldr	r2, [pc, #136]	; (8007e64 <main+0xd8>)
 8007dda:	4619      	mov	r1, r3
 8007ddc:	4822      	ldr	r0, [pc, #136]	; (8007e68 <main+0xdc>)
 8007dde:	f001 ff62 	bl	8009ca6 <getDisplayPoint>
	  	    if(((display.y < 190) && (display.y >= 2)))
 8007de2:	4b21      	ldr	r3, [pc, #132]	; (8007e68 <main+0xdc>)
 8007de4:	885b      	ldrh	r3, [r3, #2]
 8007de6:	2bbd      	cmp	r3, #189	; 0xbd
 8007de8:	d814      	bhi.n	8007e14 <main+0x88>
 8007dea:	4b1f      	ldr	r3, [pc, #124]	; (8007e68 <main+0xdc>)
 8007dec:	885b      	ldrh	r3, [r3, #2]
 8007dee:	2b01      	cmp	r3, #1
 8007df0:	d910      	bls.n	8007e14 <main+0x88>
	  	    {
	  	      if((display.x >= 318) || (display.x < 2))
 8007df2:	4b1d      	ldr	r3, [pc, #116]	; (8007e68 <main+0xdc>)
 8007df4:	881b      	ldrh	r3, [r3, #0]
 8007df6:	f5b3 7f9f 	cmp.w	r3, #318	; 0x13e
 8007dfa:	d20b      	bcs.n	8007e14 <main+0x88>
 8007dfc:	4b1a      	ldr	r3, [pc, #104]	; (8007e68 <main+0xdc>)
 8007dfe:	881b      	ldrh	r3, [r3, #0]
 8007e00:	2b01      	cmp	r3, #1
 8007e02:	d907      	bls.n	8007e14 <main+0x88>
	  	      {}
	  	      else
	  	      {
	  	        BSP_LCD_FillCircle(display.x, display.y, 2);
 8007e04:	4b18      	ldr	r3, [pc, #96]	; (8007e68 <main+0xdc>)
 8007e06:	8818      	ldrh	r0, [r3, #0]
 8007e08:	4b17      	ldr	r3, [pc, #92]	; (8007e68 <main+0xdc>)
 8007e0a:	885b      	ldrh	r3, [r3, #2]
 8007e0c:	2202      	movs	r2, #2
 8007e0e:	4619      	mov	r1, r3
 8007e10:	f000 ffc0 	bl	8008d94 <BSP_LCD_FillCircle>
	  	      }
	  	    }

	  	    if((HAL_GPIO_ReadPin(Push_button_GPIO_Port, Push_button_Pin))==GPIO_PIN_RESET)
 8007e14:	2101      	movs	r1, #1
 8007e16:	4815      	ldr	r0, [pc, #84]	; (8007e6c <main+0xe0>)
 8007e18:	f7fd f93c 	bl	8005094 <HAL_GPIO_ReadPin>
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d1d7      	bne.n	8007dd2 <main+0x46>
	  	    {
	  	    	loadImageIntoMemory();
 8007e22:	f000 fc7f 	bl	8008724 <loadImageIntoMemory>
	  	    	ImageResize((uint8_t*)original_image, 168, 168, 2, 0, 0, 0, 0,(uint8_t*)resized_image, 28, 28);
 8007e26:	231c      	movs	r3, #28
 8007e28:	9306      	str	r3, [sp, #24]
 8007e2a:	231c      	movs	r3, #28
 8007e2c:	9305      	str	r3, [sp, #20]
 8007e2e:	4b10      	ldr	r3, [pc, #64]	; (8007e70 <main+0xe4>)
 8007e30:	9304      	str	r3, [sp, #16]
 8007e32:	2300      	movs	r3, #0
 8007e34:	9303      	str	r3, [sp, #12]
 8007e36:	2300      	movs	r3, #0
 8007e38:	9302      	str	r3, [sp, #8]
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	9301      	str	r3, [sp, #4]
 8007e3e:	2300      	movs	r3, #0
 8007e40:	9300      	str	r3, [sp, #0]
 8007e42:	2302      	movs	r3, #2
 8007e44:	22a8      	movs	r2, #168	; 0xa8
 8007e46:	21a8      	movs	r1, #168	; 0xa8
 8007e48:	480a      	ldr	r0, [pc, #40]	; (8007e74 <main+0xe8>)
 8007e4a:	f000 fa47 	bl	80082dc <ImageResize>
	  	    	convert_8Bit_Grayscale((uint16_t*)resized_image);
 8007e4e:	4808      	ldr	r0, [pc, #32]	; (8007e70 <main+0xe4>)
 8007e50:	f000 fbaa 	bl	80085a8 <convert_8Bit_Grayscale>
	  	    	MX_X_CUBE_AI_Process();
 8007e54:	f7ff f9dc 	bl	8007210 <MX_X_CUBE_AI_Process>
	  	  	getDisplayPoint(&display, Read_Ads7846(), &matrix );
 8007e58:	e7bb      	b.n	8007dd2 <main+0x46>
 8007e5a:	bf00      	nop
 8007e5c:	0800c058 	.word	0x0800c058
 8007e60:	0800c064 	.word	0x0800c064
 8007e64:	200100c0 	.word	0x200100c0
 8007e68:	200100b0 	.word	0x200100b0
 8007e6c:	40020000 	.word	0x40020000
 8007e70:	2000f99c 	.word	0x2000f99c
 8007e74:	20001a0c 	.word	0x20001a0c

08007e78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b094      	sub	sp, #80	; 0x50
 8007e7c:	af00      	add	r7, sp, #0
	 RCC_OscInitTypeDef RCC_OscInitStruct;
	  RCC_ClkInitTypeDef RCC_ClkInitStruct;

	    /**Configure the main internal regulator output voltage
	    */
	  __HAL_RCC_PWR_CLK_ENABLE();
 8007e7e:	2300      	movs	r3, #0
 8007e80:	60bb      	str	r3, [r7, #8]
 8007e82:	4b32      	ldr	r3, [pc, #200]	; (8007f4c <SystemClock_Config+0xd4>)
 8007e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e86:	4a31      	ldr	r2, [pc, #196]	; (8007f4c <SystemClock_Config+0xd4>)
 8007e88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e8c:	6413      	str	r3, [r2, #64]	; 0x40
 8007e8e:	4b2f      	ldr	r3, [pc, #188]	; (8007f4c <SystemClock_Config+0xd4>)
 8007e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e96:	60bb      	str	r3, [r7, #8]
 8007e98:	68bb      	ldr	r3, [r7, #8]

	  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	607b      	str	r3, [r7, #4]
 8007e9e:	4b2c      	ldr	r3, [pc, #176]	; (8007f50 <SystemClock_Config+0xd8>)
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	4a2b      	ldr	r2, [pc, #172]	; (8007f50 <SystemClock_Config+0xd8>)
 8007ea4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007ea8:	6013      	str	r3, [r2, #0]
 8007eaa:	4b29      	ldr	r3, [pc, #164]	; (8007f50 <SystemClock_Config+0xd8>)
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007eb2:	607b      	str	r3, [r7, #4]
 8007eb4:	687b      	ldr	r3, [r7, #4]

	    /**Initializes the CPU, AHB and APB busses clocks
	    */
	  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8007eb6:	2302      	movs	r3, #2
 8007eb8:	623b      	str	r3, [r7, #32]
	  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007eba:	2301      	movs	r3, #1
 8007ebc:	62fb      	str	r3, [r7, #44]	; 0x2c
	  RCC_OscInitStruct.HSICalibrationValue = 16;
 8007ebe:	2310      	movs	r3, #16
 8007ec0:	633b      	str	r3, [r7, #48]	; 0x30
	  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007ec2:	2302      	movs	r3, #2
 8007ec4:	63bb      	str	r3, [r7, #56]	; 0x38
	  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	63fb      	str	r3, [r7, #60]	; 0x3c
	  RCC_OscInitStruct.PLL.PLLM = 8;
 8007eca:	2308      	movs	r3, #8
 8007ecc:	643b      	str	r3, [r7, #64]	; 0x40
	  RCC_OscInitStruct.PLL.PLLN = 168;
 8007ece:	23a8      	movs	r3, #168	; 0xa8
 8007ed0:	647b      	str	r3, [r7, #68]	; 0x44
	  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8007ed2:	2302      	movs	r3, #2
 8007ed4:	64bb      	str	r3, [r7, #72]	; 0x48
	  RCC_OscInitStruct.PLL.PLLQ = 4;
 8007ed6:	2304      	movs	r3, #4
 8007ed8:	64fb      	str	r3, [r7, #76]	; 0x4c
	  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007eda:	f107 0320 	add.w	r3, r7, #32
 8007ede:	4618      	mov	r0, r3
 8007ee0:	f7fd f90a 	bl	80050f8 <HAL_RCC_OscConfig>
 8007ee4:	4603      	mov	r3, r0
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d001      	beq.n	8007eee <SystemClock_Config+0x76>
	  {
	    Error_Handler();
 8007eea:	f000 fc51 	bl	8008790 <Error_Handler>
	  }

	    /**Initializes the CPU, AHB and APB busses clocks
	    */
	  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007eee:	230f      	movs	r3, #15
 8007ef0:	60fb      	str	r3, [r7, #12]
	                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007ef2:	2302      	movs	r3, #2
 8007ef4:	613b      	str	r3, [r7, #16]
	  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	617b      	str	r3, [r7, #20]
	  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8007efa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8007efe:	61bb      	str	r3, [r7, #24]
	  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8007f00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007f04:	61fb      	str	r3, [r7, #28]

	  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8007f06:	f107 030c 	add.w	r3, r7, #12
 8007f0a:	2105      	movs	r1, #5
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	f7fd fb35 	bl	800557c <HAL_RCC_ClockConfig>
 8007f12:	4603      	mov	r3, r0
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d001      	beq.n	8007f1c <SystemClock_Config+0xa4>
	  {
	    Error_Handler();
 8007f18:	f000 fc3a 	bl	8008790 <Error_Handler>
	  }

	    /**Configure the Systick interrupt time
	    */
	  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8007f1c:	f7fd fcc2 	bl	80058a4 <HAL_RCC_GetHCLKFreq>
 8007f20:	4602      	mov	r2, r0
 8007f22:	4b0c      	ldr	r3, [pc, #48]	; (8007f54 <SystemClock_Config+0xdc>)
 8007f24:	fba3 2302 	umull	r2, r3, r3, r2
 8007f28:	099b      	lsrs	r3, r3, #6
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	f7fc fead 	bl	8004c8a <HAL_SYSTICK_Config>

	    /**Configure the Systick
	    */
	  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8007f30:	2004      	movs	r0, #4
 8007f32:	f7fc feb7 	bl	8004ca4 <HAL_SYSTICK_CLKSourceConfig>

	  /* SysTick_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8007f36:	2200      	movs	r2, #0
 8007f38:	2100      	movs	r1, #0
 8007f3a:	f04f 30ff 	mov.w	r0, #4294967295
 8007f3e:	f7fc fe88 	bl	8004c52 <HAL_NVIC_SetPriority>
}
 8007f42:	bf00      	nop
 8007f44:	3750      	adds	r7, #80	; 0x50
 8007f46:	46bd      	mov	sp, r7
 8007f48:	bd80      	pop	{r7, pc}
 8007f4a:	bf00      	nop
 8007f4c:	40023800 	.word	0x40023800
 8007f50:	40007000 	.word	0x40007000
 8007f54:	10624dd3 	.word	0x10624dd3

08007f58 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8007f5c:	4b06      	ldr	r3, [pc, #24]	; (8007f78 <MX_CRC_Init+0x20>)
 8007f5e:	4a07      	ldr	r2, [pc, #28]	; (8007f7c <MX_CRC_Init+0x24>)
 8007f60:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8007f62:	4805      	ldr	r0, [pc, #20]	; (8007f78 <MX_CRC_Init+0x20>)
 8007f64:	f7fc feba 	bl	8004cdc <HAL_CRC_Init>
 8007f68:	4603      	mov	r3, r0
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d001      	beq.n	8007f72 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8007f6e:	f000 fc0f 	bl	8008790 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8007f72:	bf00      	nop
 8007f74:	bd80      	pop	{r7, pc}
 8007f76:	bf00      	nop
 8007f78:	20001a04 	.word	0x20001a04
 8007f7c:	40023000 	.word	0x40023000

08007f80 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
	 hspi3.Instance = SPI3;
 8007f84:	4b17      	ldr	r3, [pc, #92]	; (8007fe4 <MX_SPI3_Init+0x64>)
 8007f86:	4a18      	ldr	r2, [pc, #96]	; (8007fe8 <MX_SPI3_Init+0x68>)
 8007f88:	601a      	str	r2, [r3, #0]
	  hspi3.Init.Mode = SPI_MODE_MASTER;
 8007f8a:	4b16      	ldr	r3, [pc, #88]	; (8007fe4 <MX_SPI3_Init+0x64>)
 8007f8c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8007f90:	605a      	str	r2, [r3, #4]
	  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8007f92:	4b14      	ldr	r3, [pc, #80]	; (8007fe4 <MX_SPI3_Init+0x64>)
 8007f94:	2200      	movs	r2, #0
 8007f96:	609a      	str	r2, [r3, #8]
	  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8007f98:	4b12      	ldr	r3, [pc, #72]	; (8007fe4 <MX_SPI3_Init+0x64>)
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	60da      	str	r2, [r3, #12]
	  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8007f9e:	4b11      	ldr	r3, [pc, #68]	; (8007fe4 <MX_SPI3_Init+0x64>)
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	611a      	str	r2, [r3, #16]
	  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007fa4:	4b0f      	ldr	r3, [pc, #60]	; (8007fe4 <MX_SPI3_Init+0x64>)
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	615a      	str	r2, [r3, #20]
	  hspi3.Init.NSS = SPI_NSS_SOFT;
 8007faa:	4b0e      	ldr	r3, [pc, #56]	; (8007fe4 <MX_SPI3_Init+0x64>)
 8007fac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007fb0:	619a      	str	r2, [r3, #24]
	  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8007fb2:	4b0c      	ldr	r3, [pc, #48]	; (8007fe4 <MX_SPI3_Init+0x64>)
 8007fb4:	2220      	movs	r2, #32
 8007fb6:	61da      	str	r2, [r3, #28]
	  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007fb8:	4b0a      	ldr	r3, [pc, #40]	; (8007fe4 <MX_SPI3_Init+0x64>)
 8007fba:	2200      	movs	r2, #0
 8007fbc:	621a      	str	r2, [r3, #32]
	  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8007fbe:	4b09      	ldr	r3, [pc, #36]	; (8007fe4 <MX_SPI3_Init+0x64>)
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	625a      	str	r2, [r3, #36]	; 0x24
	  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007fc4:	4b07      	ldr	r3, [pc, #28]	; (8007fe4 <MX_SPI3_Init+0x64>)
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	629a      	str	r2, [r3, #40]	; 0x28
	  hspi3.Init.CRCPolynomial = 10;
 8007fca:	4b06      	ldr	r3, [pc, #24]	; (8007fe4 <MX_SPI3_Init+0x64>)
 8007fcc:	220a      	movs	r2, #10
 8007fce:	62da      	str	r2, [r3, #44]	; 0x2c
	  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8007fd0:	4804      	ldr	r0, [pc, #16]	; (8007fe4 <MX_SPI3_Init+0x64>)
 8007fd2:	f7fd fc9b 	bl	800590c <HAL_SPI_Init>
 8007fd6:	4603      	mov	r3, r0
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d001      	beq.n	8007fe0 <MX_SPI3_Init+0x60>
	  {
	    Error_Handler();
 8007fdc:	f000 fbd8 	bl	8008790 <Error_Handler>
	  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8007fe0:	bf00      	nop
 8007fe2:	bd80      	pop	{r7, pc}
 8007fe4:	2001000c 	.word	0x2001000c
 8007fe8:	40003c00 	.word	0x40003c00

08007fec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	af00      	add	r7, sp, #0

	  huart1.Instance = USART1;
 8007ff0:	4b11      	ldr	r3, [pc, #68]	; (8008038 <MX_USART1_UART_Init+0x4c>)
 8007ff2:	4a12      	ldr	r2, [pc, #72]	; (800803c <MX_USART1_UART_Init+0x50>)
 8007ff4:	601a      	str	r2, [r3, #0]
	  huart1.Init.BaudRate = 115200;
 8007ff6:	4b10      	ldr	r3, [pc, #64]	; (8008038 <MX_USART1_UART_Init+0x4c>)
 8007ff8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007ffc:	605a      	str	r2, [r3, #4]
	  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8007ffe:	4b0e      	ldr	r3, [pc, #56]	; (8008038 <MX_USART1_UART_Init+0x4c>)
 8008000:	2200      	movs	r2, #0
 8008002:	609a      	str	r2, [r3, #8]
	  huart1.Init.StopBits = UART_STOPBITS_1;
 8008004:	4b0c      	ldr	r3, [pc, #48]	; (8008038 <MX_USART1_UART_Init+0x4c>)
 8008006:	2200      	movs	r2, #0
 8008008:	60da      	str	r2, [r3, #12]
	  huart1.Init.Parity = UART_PARITY_NONE;
 800800a:	4b0b      	ldr	r3, [pc, #44]	; (8008038 <MX_USART1_UART_Init+0x4c>)
 800800c:	2200      	movs	r2, #0
 800800e:	611a      	str	r2, [r3, #16]
	  huart1.Init.Mode = UART_MODE_TX_RX;
 8008010:	4b09      	ldr	r3, [pc, #36]	; (8008038 <MX_USART1_UART_Init+0x4c>)
 8008012:	220c      	movs	r2, #12
 8008014:	615a      	str	r2, [r3, #20]
	  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008016:	4b08      	ldr	r3, [pc, #32]	; (8008038 <MX_USART1_UART_Init+0x4c>)
 8008018:	2200      	movs	r2, #0
 800801a:	619a      	str	r2, [r3, #24]
	  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800801c:	4b06      	ldr	r3, [pc, #24]	; (8008038 <MX_USART1_UART_Init+0x4c>)
 800801e:	2200      	movs	r2, #0
 8008020:	61da      	str	r2, [r3, #28]
	  if (HAL_UART_Init(&huart1) != HAL_OK)
 8008022:	4805      	ldr	r0, [pc, #20]	; (8008038 <MX_USART1_UART_Init+0x4c>)
 8008024:	f7fe fa0a 	bl	800643c <HAL_UART_Init>
 8008028:	4603      	mov	r3, r0
 800802a:	2b00      	cmp	r3, #0
 800802c:	d001      	beq.n	8008032 <MX_USART1_UART_Init+0x46>
	  {
	    Error_Handler();
 800802e:	f000 fbaf 	bl	8008790 <Error_Handler>
	  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8008032:	bf00      	nop
 8008034:	bd80      	pop	{r7, pc}
 8008036:	bf00      	nop
 8008038:	20010064 	.word	0x20010064
 800803c:	40011000 	.word	0x40011000

08008040 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b08e      	sub	sp, #56	; 0x38
 8008044:	af00      	add	r7, sp, #0
	 GPIO_InitTypeDef GPIO_InitStruct;

	  /* GPIO Ports Clock Enable */
	  __HAL_RCC_GPIOE_CLK_ENABLE();
 8008046:	2300      	movs	r3, #0
 8008048:	623b      	str	r3, [r7, #32]
 800804a:	4b6a      	ldr	r3, [pc, #424]	; (80081f4 <MX_GPIO_Init+0x1b4>)
 800804c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800804e:	4a69      	ldr	r2, [pc, #420]	; (80081f4 <MX_GPIO_Init+0x1b4>)
 8008050:	f043 0310 	orr.w	r3, r3, #16
 8008054:	6313      	str	r3, [r2, #48]	; 0x30
 8008056:	4b67      	ldr	r3, [pc, #412]	; (80081f4 <MX_GPIO_Init+0x1b4>)
 8008058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800805a:	f003 0310 	and.w	r3, r3, #16
 800805e:	623b      	str	r3, [r7, #32]
 8008060:	6a3b      	ldr	r3, [r7, #32]
	  __HAL_RCC_GPIOF_CLK_ENABLE();
 8008062:	2300      	movs	r3, #0
 8008064:	61fb      	str	r3, [r7, #28]
 8008066:	4b63      	ldr	r3, [pc, #396]	; (80081f4 <MX_GPIO_Init+0x1b4>)
 8008068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800806a:	4a62      	ldr	r2, [pc, #392]	; (80081f4 <MX_GPIO_Init+0x1b4>)
 800806c:	f043 0320 	orr.w	r3, r3, #32
 8008070:	6313      	str	r3, [r2, #48]	; 0x30
 8008072:	4b60      	ldr	r3, [pc, #384]	; (80081f4 <MX_GPIO_Init+0x1b4>)
 8008074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008076:	f003 0320 	and.w	r3, r3, #32
 800807a:	61fb      	str	r3, [r7, #28]
 800807c:	69fb      	ldr	r3, [r7, #28]
	  __HAL_RCC_GPIOH_CLK_ENABLE();
 800807e:	2300      	movs	r3, #0
 8008080:	61bb      	str	r3, [r7, #24]
 8008082:	4b5c      	ldr	r3, [pc, #368]	; (80081f4 <MX_GPIO_Init+0x1b4>)
 8008084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008086:	4a5b      	ldr	r2, [pc, #364]	; (80081f4 <MX_GPIO_Init+0x1b4>)
 8008088:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800808c:	6313      	str	r3, [r2, #48]	; 0x30
 800808e:	4b59      	ldr	r3, [pc, #356]	; (80081f4 <MX_GPIO_Init+0x1b4>)
 8008090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008092:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008096:	61bb      	str	r3, [r7, #24]
 8008098:	69bb      	ldr	r3, [r7, #24]
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 800809a:	2300      	movs	r3, #0
 800809c:	617b      	str	r3, [r7, #20]
 800809e:	4b55      	ldr	r3, [pc, #340]	; (80081f4 <MX_GPIO_Init+0x1b4>)
 80080a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080a2:	4a54      	ldr	r2, [pc, #336]	; (80081f4 <MX_GPIO_Init+0x1b4>)
 80080a4:	f043 0304 	orr.w	r3, r3, #4
 80080a8:	6313      	str	r3, [r2, #48]	; 0x30
 80080aa:	4b52      	ldr	r3, [pc, #328]	; (80081f4 <MX_GPIO_Init+0x1b4>)
 80080ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080ae:	f003 0304 	and.w	r3, r3, #4
 80080b2:	617b      	str	r3, [r7, #20]
 80080b4:	697b      	ldr	r3, [r7, #20]
	  __HAL_RCC_GPIOD_CLK_ENABLE();
 80080b6:	2300      	movs	r3, #0
 80080b8:	613b      	str	r3, [r7, #16]
 80080ba:	4b4e      	ldr	r3, [pc, #312]	; (80081f4 <MX_GPIO_Init+0x1b4>)
 80080bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080be:	4a4d      	ldr	r2, [pc, #308]	; (80081f4 <MX_GPIO_Init+0x1b4>)
 80080c0:	f043 0308 	orr.w	r3, r3, #8
 80080c4:	6313      	str	r3, [r2, #48]	; 0x30
 80080c6:	4b4b      	ldr	r3, [pc, #300]	; (80081f4 <MX_GPIO_Init+0x1b4>)
 80080c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080ca:	f003 0308 	and.w	r3, r3, #8
 80080ce:	613b      	str	r3, [r7, #16]
 80080d0:	693b      	ldr	r3, [r7, #16]
	  __HAL_RCC_GPIOG_CLK_ENABLE();
 80080d2:	2300      	movs	r3, #0
 80080d4:	60fb      	str	r3, [r7, #12]
 80080d6:	4b47      	ldr	r3, [pc, #284]	; (80081f4 <MX_GPIO_Init+0x1b4>)
 80080d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080da:	4a46      	ldr	r2, [pc, #280]	; (80081f4 <MX_GPIO_Init+0x1b4>)
 80080dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80080e0:	6313      	str	r3, [r2, #48]	; 0x30
 80080e2:	4b44      	ldr	r3, [pc, #272]	; (80081f4 <MX_GPIO_Init+0x1b4>)
 80080e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080ea:	60fb      	str	r3, [r7, #12]
 80080ec:	68fb      	ldr	r3, [r7, #12]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 80080ee:	2300      	movs	r3, #0
 80080f0:	60bb      	str	r3, [r7, #8]
 80080f2:	4b40      	ldr	r3, [pc, #256]	; (80081f4 <MX_GPIO_Init+0x1b4>)
 80080f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080f6:	4a3f      	ldr	r2, [pc, #252]	; (80081f4 <MX_GPIO_Init+0x1b4>)
 80080f8:	f043 0301 	orr.w	r3, r3, #1
 80080fc:	6313      	str	r3, [r2, #48]	; 0x30
 80080fe:	4b3d      	ldr	r3, [pc, #244]	; (80081f4 <MX_GPIO_Init+0x1b4>)
 8008100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008102:	f003 0301 	and.w	r3, r3, #1
 8008106:	60bb      	str	r3, [r7, #8]
 8008108:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 800810a:	2300      	movs	r3, #0
 800810c:	607b      	str	r3, [r7, #4]
 800810e:	4b39      	ldr	r3, [pc, #228]	; (80081f4 <MX_GPIO_Init+0x1b4>)
 8008110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008112:	4a38      	ldr	r2, [pc, #224]	; (80081f4 <MX_GPIO_Init+0x1b4>)
 8008114:	f043 0302 	orr.w	r3, r3, #2
 8008118:	6313      	str	r3, [r2, #48]	; 0x30
 800811a:	4b36      	ldr	r3, [pc, #216]	; (80081f4 <MX_GPIO_Init+0x1b4>)
 800811c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800811e:	f003 0302 	and.w	r3, r3, #2
 8008122:	607b      	str	r3, [r7, #4]
 8008124:	687b      	ldr	r3, [r7, #4]

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(A23_GPIO_Port, A23_Pin, GPIO_PIN_SET);
 8008126:	2201      	movs	r2, #1
 8008128:	2104      	movs	r1, #4
 800812a:	4833      	ldr	r0, [pc, #204]	; (80081f8 <MX_GPIO_Init+0x1b8>)
 800812c:	f7fc ffca 	bl	80050c4 <HAL_GPIO_WritePin>

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(BL_PWM_GPIO_Port, BL_PWM_Pin, GPIO_PIN_SET);
 8008130:	2201      	movs	r2, #1
 8008132:	2180      	movs	r1, #128	; 0x80
 8008134:	4831      	ldr	r0, [pc, #196]	; (80081fc <MX_GPIO_Init+0x1bc>)
 8008136:	f7fc ffc5 	bl	80050c4 <HAL_GPIO_WritePin>

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(LCDTP_CS_GPIO_Port, LCDTP_CS_Pin, GPIO_PIN_RESET);
 800813a:	2200      	movs	r2, #0
 800813c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008140:	482f      	ldr	r0, [pc, #188]	; (8008200 <MX_GPIO_Init+0x1c0>)
 8008142:	f7fc ffbf 	bl	80050c4 <HAL_GPIO_WritePin>

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8008146:	2200      	movs	r2, #0
 8008148:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800814c:	482d      	ldr	r0, [pc, #180]	; (8008204 <MX_GPIO_Init+0x1c4>)
 800814e:	f7fc ffb9 	bl	80050c4 <HAL_GPIO_WritePin>

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(A24_GPIO_Port, A24_Pin, GPIO_PIN_SET);
 8008152:	2201      	movs	r2, #1
 8008154:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008158:	482a      	ldr	r0, [pc, #168]	; (8008204 <MX_GPIO_Init+0x1c4>)
 800815a:	f7fc ffb3 	bl	80050c4 <HAL_GPIO_WritePin>

	  /*Configure GPIO pin : PtPin */
	  GPIO_InitStruct.Pin = A23_Pin;
 800815e:	2304      	movs	r3, #4
 8008160:	627b      	str	r3, [r7, #36]	; 0x24
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008162:	2301      	movs	r3, #1
 8008164:	62bb      	str	r3, [r7, #40]	; 0x28
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008166:	2300      	movs	r3, #0
 8008168:	62fb      	str	r3, [r7, #44]	; 0x2c
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800816a:	2300      	movs	r3, #0
 800816c:	633b      	str	r3, [r7, #48]	; 0x30
	  HAL_GPIO_Init(A23_GPIO_Port, &GPIO_InitStruct);
 800816e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008172:	4619      	mov	r1, r3
 8008174:	4820      	ldr	r0, [pc, #128]	; (80081f8 <MX_GPIO_Init+0x1b8>)
 8008176:	f7fc fdf3 	bl	8004d60 <HAL_GPIO_Init>

	  /*Configure GPIO pin : PtPin */
	  GPIO_InitStruct.Pin = BL_PWM_Pin;
 800817a:	2380      	movs	r3, #128	; 0x80
 800817c:	627b      	str	r3, [r7, #36]	; 0x24
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800817e:	2301      	movs	r3, #1
 8008180:	62bb      	str	r3, [r7, #40]	; 0x28
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008182:	2300      	movs	r3, #0
 8008184:	62fb      	str	r3, [r7, #44]	; 0x2c
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008186:	2300      	movs	r3, #0
 8008188:	633b      	str	r3, [r7, #48]	; 0x30
	  HAL_GPIO_Init(BL_PWM_GPIO_Port, &GPIO_InitStruct);
 800818a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800818e:	4619      	mov	r1, r3
 8008190:	481a      	ldr	r0, [pc, #104]	; (80081fc <MX_GPIO_Init+0x1bc>)
 8008192:	f7fc fde5 	bl	8004d60 <HAL_GPIO_Init>

	  /*Configure GPIO pin : PtPin */
	  GPIO_InitStruct.Pin = LCDTP_IRQ_Pin;
 8008196:	2320      	movs	r3, #32
 8008198:	627b      	str	r3, [r7, #36]	; 0x24
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800819a:	2300      	movs	r3, #0
 800819c:	62bb      	str	r3, [r7, #40]	; 0x28
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800819e:	2300      	movs	r3, #0
 80081a0:	62fb      	str	r3, [r7, #44]	; 0x2c
	  HAL_GPIO_Init(LCDTP_IRQ_GPIO_Port, &GPIO_InitStruct);
 80081a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80081a6:	4619      	mov	r1, r3
 80081a8:	4817      	ldr	r0, [pc, #92]	; (8008208 <MX_GPIO_Init+0x1c8>)
 80081aa:	f7fc fdd9 	bl	8004d60 <HAL_GPIO_Init>

	  /*Configure GPIO pin : PtPin */
	  GPIO_InitStruct.Pin = LCDTP_CS_Pin;
 80081ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80081b2:	627b      	str	r3, [r7, #36]	; 0x24
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80081b4:	2301      	movs	r3, #1
 80081b6:	62bb      	str	r3, [r7, #40]	; 0x28
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80081b8:	2300      	movs	r3, #0
 80081ba:	62fb      	str	r3, [r7, #44]	; 0x2c
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80081bc:	2300      	movs	r3, #0
 80081be:	633b      	str	r3, [r7, #48]	; 0x30
	  HAL_GPIO_Init(LCDTP_CS_GPIO_Port, &GPIO_InitStruct);
 80081c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80081c4:	4619      	mov	r1, r3
 80081c6:	480e      	ldr	r0, [pc, #56]	; (8008200 <MX_GPIO_Init+0x1c0>)
 80081c8:	f7fc fdca 	bl	8004d60 <HAL_GPIO_Init>

	  /*Configure GPIO pins : PGPin PGPin */
	  GPIO_InitStruct.Pin = LCD_CS_Pin|A24_Pin;
 80081cc:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80081d0:	627b      	str	r3, [r7, #36]	; 0x24
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80081d2:	2301      	movs	r3, #1
 80081d4:	62bb      	str	r3, [r7, #40]	; 0x28
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80081d6:	2300      	movs	r3, #0
 80081d8:	62fb      	str	r3, [r7, #44]	; 0x2c
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80081da:	2300      	movs	r3, #0
 80081dc:	633b      	str	r3, [r7, #48]	; 0x30
	  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80081de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80081e2:	4619      	mov	r1, r3
 80081e4:	4807      	ldr	r0, [pc, #28]	; (8008204 <MX_GPIO_Init+0x1c4>)
 80081e6:	f7fc fdbb 	bl	8004d60 <HAL_GPIO_Init>

}
 80081ea:	bf00      	nop
 80081ec:	3738      	adds	r7, #56	; 0x38
 80081ee:	46bd      	mov	sp, r7
 80081f0:	bd80      	pop	{r7, pc}
 80081f2:	bf00      	nop
 80081f4:	40023800 	.word	0x40023800
 80081f8:	40021000 	.word	0x40021000
 80081fc:	40021400 	.word	0x40021400
 8008200:	40020000 	.word	0x40020000
 8008204:	40021800 	.word	0x40021800
 8008208:	40020800 	.word	0x40020800

0800820c <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b088      	sub	sp, #32
 8008210:	af00      	add	r7, sp, #0

	  FSMC_NORSRAM_TimingTypeDef Timing;

	  /** Perform the SRAM1 memory initialization sequence
	  */
	  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8008212:	4b27      	ldr	r3, [pc, #156]	; (80082b0 <MX_FSMC_Init+0xa4>)
 8008214:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8008218:	601a      	str	r2, [r3, #0]
	  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 800821a:	4b25      	ldr	r3, [pc, #148]	; (80082b0 <MX_FSMC_Init+0xa4>)
 800821c:	4a25      	ldr	r2, [pc, #148]	; (80082b4 <MX_FSMC_Init+0xa8>)
 800821e:	605a      	str	r2, [r3, #4]
	  /* hsram1.Init */
	  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8008220:	4b23      	ldr	r3, [pc, #140]	; (80082b0 <MX_FSMC_Init+0xa4>)
 8008222:	2200      	movs	r2, #0
 8008224:	609a      	str	r2, [r3, #8]
	  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8008226:	4b22      	ldr	r3, [pc, #136]	; (80082b0 <MX_FSMC_Init+0xa4>)
 8008228:	2200      	movs	r2, #0
 800822a:	60da      	str	r2, [r3, #12]
	  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800822c:	4b20      	ldr	r3, [pc, #128]	; (80082b0 <MX_FSMC_Init+0xa4>)
 800822e:	2200      	movs	r2, #0
 8008230:	611a      	str	r2, [r3, #16]
	  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8008232:	4b1f      	ldr	r3, [pc, #124]	; (80082b0 <MX_FSMC_Init+0xa4>)
 8008234:	2210      	movs	r2, #16
 8008236:	615a      	str	r2, [r3, #20]
	  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8008238:	4b1d      	ldr	r3, [pc, #116]	; (80082b0 <MX_FSMC_Init+0xa4>)
 800823a:	2200      	movs	r2, #0
 800823c:	619a      	str	r2, [r3, #24]
	  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 800823e:	4b1c      	ldr	r3, [pc, #112]	; (80082b0 <MX_FSMC_Init+0xa4>)
 8008240:	2200      	movs	r2, #0
 8008242:	61da      	str	r2, [r3, #28]
	  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8008244:	4b1a      	ldr	r3, [pc, #104]	; (80082b0 <MX_FSMC_Init+0xa4>)
 8008246:	2200      	movs	r2, #0
 8008248:	621a      	str	r2, [r3, #32]
	  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 800824a:	4b19      	ldr	r3, [pc, #100]	; (80082b0 <MX_FSMC_Init+0xa4>)
 800824c:	2200      	movs	r2, #0
 800824e:	625a      	str	r2, [r3, #36]	; 0x24
	  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8008250:	4b17      	ldr	r3, [pc, #92]	; (80082b0 <MX_FSMC_Init+0xa4>)
 8008252:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008256:	629a      	str	r2, [r3, #40]	; 0x28
	  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8008258:	4b15      	ldr	r3, [pc, #84]	; (80082b0 <MX_FSMC_Init+0xa4>)
 800825a:	2200      	movs	r2, #0
 800825c:	62da      	str	r2, [r3, #44]	; 0x2c
	  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 800825e:	4b14      	ldr	r3, [pc, #80]	; (80082b0 <MX_FSMC_Init+0xa4>)
 8008260:	2200      	movs	r2, #0
 8008262:	631a      	str	r2, [r3, #48]	; 0x30
	  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8008264:	4b12      	ldr	r3, [pc, #72]	; (80082b0 <MX_FSMC_Init+0xa4>)
 8008266:	2200      	movs	r2, #0
 8008268:	635a      	str	r2, [r3, #52]	; 0x34
	  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 800826a:	4b11      	ldr	r3, [pc, #68]	; (80082b0 <MX_FSMC_Init+0xa4>)
 800826c:	2200      	movs	r2, #0
 800826e:	639a      	str	r2, [r3, #56]	; 0x38
	  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8008270:	4b0f      	ldr	r3, [pc, #60]	; (80082b0 <MX_FSMC_Init+0xa4>)
 8008272:	2200      	movs	r2, #0
 8008274:	645a      	str	r2, [r3, #68]	; 0x44
	  /* Timing */
	  Timing.AddressSetupTime = 4;
 8008276:	2304      	movs	r3, #4
 8008278:	607b      	str	r3, [r7, #4]
	  Timing.AddressHoldTime = 15;
 800827a:	230f      	movs	r3, #15
 800827c:	60bb      	str	r3, [r7, #8]
	  Timing.DataSetupTime = 40;
 800827e:	2328      	movs	r3, #40	; 0x28
 8008280:	60fb      	str	r3, [r7, #12]
	  Timing.BusTurnAroundDuration = 0;
 8008282:	2300      	movs	r3, #0
 8008284:	613b      	str	r3, [r7, #16]
	  Timing.CLKDivision = 16;
 8008286:	2310      	movs	r3, #16
 8008288:	617b      	str	r3, [r7, #20]
	  Timing.DataLatency = 17;
 800828a:	2311      	movs	r3, #17
 800828c:	61bb      	str	r3, [r7, #24]
	  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 800828e:	2300      	movs	r3, #0
 8008290:	61fb      	str	r3, [r7, #28]
	  /* ExtTiming */

	  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8008292:	1d3b      	adds	r3, r7, #4
 8008294:	2200      	movs	r2, #0
 8008296:	4619      	mov	r1, r3
 8008298:	4805      	ldr	r0, [pc, #20]	; (80082b0 <MX_FSMC_Init+0xa4>)
 800829a:	f7fe f88b 	bl	80063b4 <HAL_SRAM_Init>
 800829e:	4603      	mov	r3, r0
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d001      	beq.n	80082a8 <MX_FSMC_Init+0x9c>
	  {
	    Error_Handler();
 80082a4:	f000 fa74 	bl	8008790 <Error_Handler>
	  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80082a8:	bf00      	nop
 80082aa:	3720      	adds	r7, #32
 80082ac:	46bd      	mov	sp, r7
 80082ae:	bd80      	pop	{r7, pc}
 80082b0:	2000ffbc 	.word	0x2000ffbc
 80082b4:	a0000104 	.word	0xa0000104

080082b8 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b082      	sub	sp, #8
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
  /* write a character to the uart1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 80082c0:	1d39      	adds	r1, r7, #4
 80082c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80082c6:	2201      	movs	r2, #1
 80082c8:	4803      	ldr	r0, [pc, #12]	; (80082d8 <__io_putchar+0x20>)
 80082ca:	f7fe f904 	bl	80064d6 <HAL_UART_Transmit>

  return ch;
 80082ce:	687b      	ldr	r3, [r7, #4]
}
 80082d0:	4618      	mov	r0, r3
 80082d2:	3708      	adds	r7, #8
 80082d4:	46bd      	mov	sp, r7
 80082d6:	bd80      	pop	{r7, pc}
 80082d8:	20010064 	.word	0x20010064

080082dc <ImageResize>:
  */
void ImageResize(uint8_t *srcImage, uint32_t srcW, uint32_t srcH,
                 uint32_t pixelSize, uint32_t roiX, uint32_t roiY,
                 uint32_t roiW, uint32_t roiH,  uint8_t *dstImage,
                 uint32_t dstW, uint32_t dstH)
{
 80082dc:	b480      	push	{r7}
 80082de:	b0a1      	sub	sp, #132	; 0x84
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6178      	str	r0, [r7, #20]
 80082e4:	6139      	str	r1, [r7, #16]
 80082e6:	60fa      	str	r2, [r7, #12]
 80082e8:	60bb      	str	r3, [r7, #8]
  uint8_t *p1, *p2, *p3, *p4;

  int32_t offset1;
  int32_t offset2;

  srcStride = pixelSize * srcW;
 80082ea:	68bb      	ldr	r3, [r7, #8]
 80082ec:	693a      	ldr	r2, [r7, #16]
 80082ee:	fb02 f303 	mul.w	r3, r2, r3
 80082f2:	663b      	str	r3, [r7, #96]	; 0x60

  widthRatio = ((roiW ? roiW : srcW) / (float) dstW);
 80082f4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d006      	beq.n	800830a <ImageResize+0x2e>
 80082fc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008300:	ee07 3a90 	vmov	s15, r3
 8008304:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008308:	e004      	b.n	8008314 <ImageResize+0x38>
 800830a:	693b      	ldr	r3, [r7, #16]
 800830c:	ee07 3a90 	vmov	s15, r3
 8008310:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008314:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008318:	ee07 3a10 	vmov	s14, r3
 800831c:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8008320:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8008324:	ed87 7a17 	vstr	s14, [r7, #92]	; 0x5c
  heightRatio = ((roiH ? roiH : srcH) / (float) dstH);
 8008328:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800832c:	2b00      	cmp	r3, #0
 800832e:	d006      	beq.n	800833e <ImageResize+0x62>
 8008330:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008334:	ee07 3a90 	vmov	s15, r3
 8008338:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800833c:	e004      	b.n	8008348 <ImageResize+0x6c>
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	ee07 3a90 	vmov	s15, r3
 8008344:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008348:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800834c:	ee07 3a10 	vmov	s14, r3
 8008350:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8008354:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8008358:	ed87 7a16 	vstr	s14, [r7, #88]	; 0x58

  /* Get horizontal and vertical limits. */
  maxWidth = (roiW ? roiW : srcW) - 1;
 800835c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008360:	2b00      	cmp	r3, #0
 8008362:	d003      	beq.n	800836c <ImageResize+0x90>
 8008364:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008368:	3b01      	subs	r3, #1
 800836a:	e001      	b.n	8008370 <ImageResize+0x94>
 800836c:	693b      	ldr	r3, [r7, #16]
 800836e:	3b01      	subs	r3, #1
 8008370:	657b      	str	r3, [r7, #84]	; 0x54
  maxHeight = (roiH ? roiH : srcH) - 1;
 8008372:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008376:	2b00      	cmp	r3, #0
 8008378:	d003      	beq.n	8008382 <ImageResize+0xa6>
 800837a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800837e:	3b01      	subs	r3, #1
 8008380:	e001      	b.n	8008386 <ImageResize+0xaa>
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	3b01      	subs	r3, #1
 8008386:	653b      	str	r3, [r7, #80]	; 0x50

  for (int32_t y = 0; y < dstH; y++)
 8008388:	2300      	movs	r3, #0
 800838a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800838c:	e0fe      	b.n	800858c <ImageResize+0x2b0>
  {
    /* Get Y from source. */
    srcY = ((float) y * heightRatio) + roiY;
 800838e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008390:	ee07 3a90 	vmov	s15, r3
 8008394:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008398:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800839c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80083a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80083a4:	ee07 3a90 	vmov	s15, r3
 80083a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80083b0:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    srcY1 = (int32_t) srcY;
 80083b4:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80083b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80083bc:	ee17 3a90 	vmov	r3, s15
 80083c0:	64bb      	str	r3, [r7, #72]	; 0x48
    srcY2 = (srcY1 == maxHeight) ? srcY1 : srcY1 + 1;
 80083c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80083c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80083c6:	429a      	cmp	r2, r3
 80083c8:	d002      	beq.n	80083d0 <ImageResize+0xf4>
 80083ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80083cc:	3301      	adds	r3, #1
 80083ce:	e000      	b.n	80083d2 <ImageResize+0xf6>
 80083d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80083d2:	647b      	str	r3, [r7, #68]	; 0x44
    dY1 = srcY - (float) srcY1;
 80083d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80083d6:	ee07 3a90 	vmov	s15, r3
 80083da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80083de:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80083e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80083e6:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    dY2 = 1.0f - dY1;
 80083ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80083ee:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80083f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80083f6:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    /* Calculates the pointers to the two needed lines of the source. */
    tmp1 = srcImage + srcY1 * srcStride;
 80083fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80083fc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80083fe:	fb02 f303 	mul.w	r3, r2, r3
 8008402:	461a      	mov	r2, r3
 8008404:	697b      	ldr	r3, [r7, #20]
 8008406:	4413      	add	r3, r2
 8008408:	63bb      	str	r3, [r7, #56]	; 0x38
    tmp2 = srcImage + srcY2 * srcStride;
 800840a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800840c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800840e:	fb02 f303 	mul.w	r3, r2, r3
 8008412:	461a      	mov	r2, r3
 8008414:	697b      	ldr	r3, [r7, #20]
 8008416:	4413      	add	r3, r2
 8008418:	637b      	str	r3, [r7, #52]	; 0x34

    for (int32_t x = 0; x < dstW; x++)
 800841a:	2300      	movs	r3, #0
 800841c:	66bb      	str	r3, [r7, #104]	; 0x68
 800841e:	e0ac      	b.n	800857a <ImageResize+0x29e>
    {
      /* Get X from source. */
      srcX = x * widthRatio + roiX;
 8008420:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008422:	ee07 3a90 	vmov	s15, r3
 8008426:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800842a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800842e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008432:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008436:	ee07 3a90 	vmov	s15, r3
 800843a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800843e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008442:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
      dstX1 = (int32_t) srcX;
 8008446:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800844a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800844e:	ee17 3a90 	vmov	r3, s15
 8008452:	62fb      	str	r3, [r7, #44]	; 0x2c
      dstX2 = (dstX1 == maxWidth) ? dstX1 : dstX1 + 1;
 8008454:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008456:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008458:	429a      	cmp	r2, r3
 800845a:	d002      	beq.n	8008462 <ImageResize+0x186>
 800845c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800845e:	3301      	adds	r3, #1
 8008460:	e000      	b.n	8008464 <ImageResize+0x188>
 8008462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008464:	62bb      	str	r3, [r7, #40]	; 0x28
      dX1 = srcX - /*(float32)*/dstX1;
 8008466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008468:	ee07 3a90 	vmov	s15, r3
 800846c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008470:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8008474:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008478:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      dX2 = 1.0f - dX1;
 800847c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008480:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008484:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008488:	edc7 7a08 	vstr	s15, [r7, #32]

      /* Calculates the four points (p1,p2, p3, p4) of the source. */
      offset1 = dstX1 * pixelSize;
 800848c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800848e:	68ba      	ldr	r2, [r7, #8]
 8008490:	fb02 f303 	mul.w	r3, r2, r3
 8008494:	61fb      	str	r3, [r7, #28]
      offset2 = dstX2 * pixelSize;
 8008496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008498:	68ba      	ldr	r2, [r7, #8]
 800849a:	fb02 f303 	mul.w	r3, r2, r3
 800849e:	61bb      	str	r3, [r7, #24]
      p1 = tmp1 + offset1;
 80084a0:	69fb      	ldr	r3, [r7, #28]
 80084a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80084a4:	4413      	add	r3, r2
 80084a6:	67fb      	str	r3, [r7, #124]	; 0x7c
      p2 = tmp1 + offset2;
 80084a8:	69bb      	ldr	r3, [r7, #24]
 80084aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80084ac:	4413      	add	r3, r2
 80084ae:	67bb      	str	r3, [r7, #120]	; 0x78
      p3 = tmp2 + offset1;
 80084b0:	69fb      	ldr	r3, [r7, #28]
 80084b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80084b4:	4413      	add	r3, r2
 80084b6:	677b      	str	r3, [r7, #116]	; 0x74
      p4 = tmp2 + offset2;
 80084b8:	69bb      	ldr	r3, [r7, #24]
 80084ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80084bc:	4413      	add	r3, r2
 80084be:	673b      	str	r3, [r7, #112]	; 0x70
      /* For each channel, interpolate the four points. */
      for (int32_t ch = 0; ch < pixelSize; ch++, dstImage++, p1++, p2++, p3++, p4++)
 80084c0:	2300      	movs	r3, #0
 80084c2:	667b      	str	r3, [r7, #100]	; 0x64
 80084c4:	e052      	b.n	800856c <ImageResize+0x290>
      {
        *dstImage = (uint8_t)(dY2 * (dX2 * (*p1) + dX1 * (*p2)) + dY1 * (dX2 * (*p3) + dX1 * (*p4)));
 80084c6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80084c8:	781b      	ldrb	r3, [r3, #0]
 80084ca:	ee07 3a90 	vmov	s15, r3
 80084ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80084d2:	edd7 7a08 	vldr	s15, [r7, #32]
 80084d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80084da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80084dc:	781b      	ldrb	r3, [r3, #0]
 80084de:	ee07 3a90 	vmov	s15, r3
 80084e2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80084e6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80084ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80084ee:	ee37 7a27 	vadd.f32	s14, s14, s15
 80084f2:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80084f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80084fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80084fc:	781b      	ldrb	r3, [r3, #0]
 80084fe:	ee07 3a90 	vmov	s15, r3
 8008502:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8008506:	edd7 7a08 	vldr	s15, [r7, #32]
 800850a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800850e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008510:	781b      	ldrb	r3, [r3, #0]
 8008512:	ee07 3a90 	vmov	s15, r3
 8008516:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800851a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800851e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8008522:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8008526:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800852a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800852e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008532:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008536:	edc7 7a01 	vstr	s15, [r7, #4]
 800853a:	793b      	ldrb	r3, [r7, #4]
 800853c:	b2da      	uxtb	r2, r3
 800853e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008542:	701a      	strb	r2, [r3, #0]
      for (int32_t ch = 0; ch < pixelSize; ch++, dstImage++, p1++, p2++, p3++, p4++)
 8008544:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008546:	3301      	adds	r3, #1
 8008548:	667b      	str	r3, [r7, #100]	; 0x64
 800854a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800854e:	3301      	adds	r3, #1
 8008550:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008554:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008556:	3301      	adds	r3, #1
 8008558:	67fb      	str	r3, [r7, #124]	; 0x7c
 800855a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800855c:	3301      	adds	r3, #1
 800855e:	67bb      	str	r3, [r7, #120]	; 0x78
 8008560:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008562:	3301      	adds	r3, #1
 8008564:	677b      	str	r3, [r7, #116]	; 0x74
 8008566:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008568:	3301      	adds	r3, #1
 800856a:	673b      	str	r3, [r7, #112]	; 0x70
 800856c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800856e:	68ba      	ldr	r2, [r7, #8]
 8008570:	429a      	cmp	r2, r3
 8008572:	d8a8      	bhi.n	80084c6 <ImageResize+0x1ea>
    for (int32_t x = 0; x < dstW; x++)
 8008574:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008576:	3301      	adds	r3, #1
 8008578:	66bb      	str	r3, [r7, #104]	; 0x68
 800857a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800857c:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8008580:	429a      	cmp	r2, r3
 8008582:	f63f af4d 	bhi.w	8008420 <ImageResize+0x144>
  for (int32_t y = 0; y < dstH; y++)
 8008586:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008588:	3301      	adds	r3, #1
 800858a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800858c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800858e:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8008592:	429a      	cmp	r2, r3
 8008594:	f63f aefb 	bhi.w	800838e <ImageResize+0xb2>
      }
    }
  }
}
 8008598:	bf00      	nop
 800859a:	3784      	adds	r7, #132	; 0x84
 800859c:	46bd      	mov	sp, r7
 800859e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a2:	4770      	bx	lr
 80085a4:	0000      	movs	r0, r0
	...

080085a8 <convert_8Bit_Grayscale>:

// Convert to 8 bit grayscale
void convert_8Bit_Grayscale(uint16_t* buffer)
{
 80085a8:	b5b0      	push	{r4, r5, r7, lr}
 80085aa:	b084      	sub	sp, #16
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
	for(int16_t i=0; i< 784; i++)
 80085b0:	2300      	movs	r3, #0
 80085b2:	81fb      	strh	r3, [r7, #14]
 80085b4:	e078      	b.n	80086a8 <convert_8Bit_Grayscale+0x100>
		      {
		   	   uint16_t pixel = *buffer;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	881b      	ldrh	r3, [r3, #0]
 80085ba:	81bb      	strh	r3, [r7, #12]
		   	   uint8_t red = ((pixel & 0xF800)>>11);
 80085bc:	89bb      	ldrh	r3, [r7, #12]
 80085be:	0adb      	lsrs	r3, r3, #11
 80085c0:	b29b      	uxth	r3, r3
 80085c2:	72fb      	strb	r3, [r7, #11]
		   	   uint8_t green = ((pixel & 0x07E0)>>5);
 80085c4:	89bb      	ldrh	r3, [r7, #12]
 80085c6:	115b      	asrs	r3, r3, #5
 80085c8:	b2db      	uxtb	r3, r3
 80085ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80085ce:	72bb      	strb	r3, [r7, #10]
		   	   uint8_t blue = (pixel & 0x001F);
 80085d0:	89bb      	ldrh	r3, [r7, #12]
 80085d2:	b2db      	uxtb	r3, r3
 80085d4:	f003 031f 	and.w	r3, r3, #31
 80085d8:	727b      	strb	r3, [r7, #9]
		   	   grayscale_image[i] = (0.2126 * red) + (0.7152 * green / 2.0) + (0.0722 * blue);
 80085da:	7afb      	ldrb	r3, [r7, #11]
 80085dc:	4618      	mov	r0, r3
 80085de:	f7fb fc59 	bl	8003e94 <__aeabi_i2d>
 80085e2:	a338      	add	r3, pc, #224	; (adr r3, 80086c4 <convert_8Bit_Grayscale+0x11c>)
 80085e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085e8:	f7fb fcbe 	bl	8003f68 <__aeabi_dmul>
 80085ec:	4603      	mov	r3, r0
 80085ee:	460c      	mov	r4, r1
 80085f0:	4625      	mov	r5, r4
 80085f2:	461c      	mov	r4, r3
 80085f4:	7abb      	ldrb	r3, [r7, #10]
 80085f6:	4618      	mov	r0, r3
 80085f8:	f7fb fc4c 	bl	8003e94 <__aeabi_i2d>
 80085fc:	a333      	add	r3, pc, #204	; (adr r3, 80086cc <convert_8Bit_Grayscale+0x124>)
 80085fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008602:	f7fb fcb1 	bl	8003f68 <__aeabi_dmul>
 8008606:	4602      	mov	r2, r0
 8008608:	460b      	mov	r3, r1
 800860a:	4610      	mov	r0, r2
 800860c:	4619      	mov	r1, r3
 800860e:	f04f 0200 	mov.w	r2, #0
 8008612:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008616:	f7fb fdd1 	bl	80041bc <__aeabi_ddiv>
 800861a:	4602      	mov	r2, r0
 800861c:	460b      	mov	r3, r1
 800861e:	4620      	mov	r0, r4
 8008620:	4629      	mov	r1, r5
 8008622:	f7fb faeb 	bl	8003bfc <__adddf3>
 8008626:	4603      	mov	r3, r0
 8008628:	460c      	mov	r4, r1
 800862a:	4625      	mov	r5, r4
 800862c:	461c      	mov	r4, r3
 800862e:	7a7b      	ldrb	r3, [r7, #9]
 8008630:	4618      	mov	r0, r3
 8008632:	f7fb fc2f 	bl	8003e94 <__aeabi_i2d>
 8008636:	a327      	add	r3, pc, #156	; (adr r3, 80086d4 <convert_8Bit_Grayscale+0x12c>)
 8008638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800863c:	f7fb fc94 	bl	8003f68 <__aeabi_dmul>
 8008640:	4602      	mov	r2, r0
 8008642:	460b      	mov	r3, r1
 8008644:	4620      	mov	r0, r4
 8008646:	4629      	mov	r1, r5
 8008648:	f7fb fad8 	bl	8003bfc <__adddf3>
 800864c:	4603      	mov	r3, r0
 800864e:	460c      	mov	r4, r1
 8008650:	461a      	mov	r2, r3
 8008652:	4623      	mov	r3, r4
 8008654:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 8008658:	4610      	mov	r0, r2
 800865a:	4619      	mov	r1, r3
 800865c:	f7fb ff1e 	bl	800449c <__aeabi_d2uiz>
 8008660:	4603      	mov	r3, r0
 8008662:	b2da      	uxtb	r2, r3
 8008664:	4b16      	ldr	r3, [pc, #88]	; (80086c0 <convert_8Bit_Grayscale+0x118>)
 8008666:	551a      	strb	r2, [r3, r4]
		   	   if(grayscale_image[i] == 0x00)
 8008668:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800866c:	4a14      	ldr	r2, [pc, #80]	; (80086c0 <convert_8Bit_Grayscale+0x118>)
 800866e:	5cd3      	ldrb	r3, [r2, r3]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d105      	bne.n	8008680 <convert_8Bit_Grayscale+0xd8>
		   		   grayscale_image[i] = 0XFF;
 8008674:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008678:	4a11      	ldr	r2, [pc, #68]	; (80086c0 <convert_8Bit_Grayscale+0x118>)
 800867a:	21ff      	movs	r1, #255	; 0xff
 800867c:	54d1      	strb	r1, [r2, r3]
 800867e:	e00a      	b.n	8008696 <convert_8Bit_Grayscale+0xee>
		   	   else if(grayscale_image[i]==0x1F)
 8008680:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008684:	4a0e      	ldr	r2, [pc, #56]	; (80086c0 <convert_8Bit_Grayscale+0x118>)
 8008686:	5cd3      	ldrb	r3, [r2, r3]
 8008688:	2b1f      	cmp	r3, #31
 800868a:	d104      	bne.n	8008696 <convert_8Bit_Grayscale+0xee>
		   		   grayscale_image[i]=0X00;
 800868c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008690:	4a0b      	ldr	r2, [pc, #44]	; (80086c0 <convert_8Bit_Grayscale+0x118>)
 8008692:	2100      	movs	r1, #0
 8008694:	54d1      	strb	r1, [r2, r3]
		   	   buffer++;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	3302      	adds	r3, #2
 800869a:	607b      	str	r3, [r7, #4]
	for(int16_t i=0; i< 784; i++)
 800869c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80086a0:	b29b      	uxth	r3, r3
 80086a2:	3301      	adds	r3, #1
 80086a4:	b29b      	uxth	r3, r3
 80086a6:	81fb      	strh	r3, [r7, #14]
 80086a8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80086ac:	f5b3 7f44 	cmp.w	r3, #784	; 0x310
 80086b0:	db81      	blt.n	80085b6 <convert_8Bit_Grayscale+0xe>
		      }
}
 80086b2:	bf00      	nop
 80086b4:	3710      	adds	r7, #16
 80086b6:	46bd      	mov	sp, r7
 80086b8:	bdb0      	pop	{r4, r5, r7, pc}
 80086ba:	bf00      	nop
 80086bc:	f3af 8000 	nop.w
 80086c0:	2000f68c 	.word	0x2000f68c
 80086c4:	0f9096bc 	.word	0x0f9096bc
 80086c8:	3fcb367a 	.word	0x3fcb367a
 80086cc:	1c432ca5 	.word	0x1c432ca5
 80086d0:	3fe6e2eb 	.word	0x3fe6e2eb
 80086d4:	fec56d5d 	.word	0xfec56d5d
 80086d8:	3fb27bb2 	.word	0x3fb27bb2

080086dc <drawMenu>:

// Draw the Menu screen
void drawMenu()
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	af00      	add	r7, sp, #0
	  BSP_LCD_Clear(LCD_COLOR_WHITE);
 80086e0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80086e4:	f000 f8da 	bl	800889c <BSP_LCD_Clear>
	  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80086e8:	2000      	movs	r0, #0
 80086ea:	f000 f8ab 	bl	8008844 <BSP_LCD_SetTextColor>
	  BSP_LCD_DrawHLine(50,30,170);
 80086ee:	22aa      	movs	r2, #170	; 0xaa
 80086f0:	211e      	movs	r1, #30
 80086f2:	2032      	movs	r0, #50	; 0x32
 80086f4:	f000 f9d2 	bl	8008a9c <BSP_LCD_DrawHLine>
	  BSP_LCD_DrawHLine(50,200,170);
 80086f8:	22aa      	movs	r2, #170	; 0xaa
 80086fa:	21c8      	movs	r1, #200	; 0xc8
 80086fc:	2032      	movs	r0, #50	; 0x32
 80086fe:	f000 f9cd 	bl	8008a9c <BSP_LCD_DrawHLine>
	  BSP_LCD_DrawVLine(50, 30, 170);
 8008702:	22aa      	movs	r2, #170	; 0xaa
 8008704:	211e      	movs	r1, #30
 8008706:	2032      	movs	r0, #50	; 0x32
 8008708:	f000 fa02 	bl	8008b10 <BSP_LCD_DrawVLine>
	  BSP_LCD_DrawVLine(220, 30, 170);
 800870c:	22aa      	movs	r2, #170	; 0xaa
 800870e:	211e      	movs	r1, #30
 8008710:	20dc      	movs	r0, #220	; 0xdc
 8008712:	f000 f9fd 	bl	8008b10 <BSP_LCD_DrawVLine>
	  BSP_LCD_SetFont(&Font24);
 8008716:	4802      	ldr	r0, [pc, #8]	; (8008720 <drawMenu+0x44>)
 8008718:	f000 f8a4 	bl	8008864 <BSP_LCD_SetFont>
}
 800871c:	bf00      	nop
 800871e:	bd80      	pop	{r7, pc}
 8008720:	20000468 	.word	0x20000468

08008724 <loadImageIntoMemory>:

// Load LCD Pixel values to Memory
void loadImageIntoMemory()
{
 8008724:	b590      	push	{r4, r7, lr}
 8008726:	b083      	sub	sp, #12
 8008728:	af00      	add	r7, sp, #0
	for(uint16_t i=31; i<199; i++)
 800872a:	231f      	movs	r3, #31
 800872c:	80fb      	strh	r3, [r7, #6]
 800872e:	e01a      	b.n	8008766 <loadImageIntoMemory+0x42>
	{
		for(uint16_t j=51;j<219;j++)
 8008730:	2333      	movs	r3, #51	; 0x33
 8008732:	80bb      	strh	r3, [r7, #4]
 8008734:	e011      	b.n	800875a <loadImageIntoMemory+0x36>
		{
			*ptToImage = ili9325_ReadPixel(j, i);
 8008736:	4b14      	ldr	r3, [pc, #80]	; (8008788 <loadImageIntoMemory+0x64>)
 8008738:	681c      	ldr	r4, [r3, #0]
 800873a:	88fa      	ldrh	r2, [r7, #6]
 800873c:	88bb      	ldrh	r3, [r7, #4]
 800873e:	4611      	mov	r1, r2
 8008740:	4618      	mov	r0, r3
 8008742:	f7ff f9a2 	bl	8007a8a <ili9325_ReadPixel>
 8008746:	4603      	mov	r3, r0
 8008748:	8023      	strh	r3, [r4, #0]
			ptToImage++;
 800874a:	4b0f      	ldr	r3, [pc, #60]	; (8008788 <loadImageIntoMemory+0x64>)
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	3302      	adds	r3, #2
 8008750:	4a0d      	ldr	r2, [pc, #52]	; (8008788 <loadImageIntoMemory+0x64>)
 8008752:	6013      	str	r3, [r2, #0]
		for(uint16_t j=51;j<219;j++)
 8008754:	88bb      	ldrh	r3, [r7, #4]
 8008756:	3301      	adds	r3, #1
 8008758:	80bb      	strh	r3, [r7, #4]
 800875a:	88bb      	ldrh	r3, [r7, #4]
 800875c:	2bda      	cmp	r3, #218	; 0xda
 800875e:	d9ea      	bls.n	8008736 <loadImageIntoMemory+0x12>
	for(uint16_t i=31; i<199; i++)
 8008760:	88fb      	ldrh	r3, [r7, #6]
 8008762:	3301      	adds	r3, #1
 8008764:	80fb      	strh	r3, [r7, #6]
 8008766:	88fb      	ldrh	r3, [r7, #6]
 8008768:	2bc6      	cmp	r3, #198	; 0xc6
 800876a:	d9e1      	bls.n	8008730 <loadImageIntoMemory+0xc>
		}
	}
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800876c:	2000      	movs	r0, #0
 800876e:	f000 f869 	bl	8008844 <BSP_LCD_SetTextColor>
	BSP_LCD_SetFont(&Font24);
 8008772:	4806      	ldr	r0, [pc, #24]	; (800878c <loadImageIntoMemory+0x68>)
 8008774:	f000 f876 	bl	8008864 <BSP_LCD_SetFont>
	ili9325_SetCursor(0, 0);
 8008778:	2100      	movs	r1, #0
 800877a:	2000      	movs	r0, #0
 800877c:	f7ff f951 	bl	8007a22 <ili9325_SetCursor>
}
 8008780:	bf00      	nop
 8008782:	370c      	adds	r7, #12
 8008784:	46bd      	mov	sp, r7
 8008786:	bd90      	pop	{r4, r7, pc}
 8008788:	20000464 	.word	0x20000464
 800878c:	20000468 	.word	0x20000468

08008790 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008790:	b480      	push	{r7}
 8008792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8008794:	bf00      	nop
 8008796:	46bd      	mov	sp, r7
 8008798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879c:	4770      	bx	lr
	...

080087a0 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b082      	sub	sp, #8
 80087a4:	af00      	add	r7, sp, #0
  uint8_t ret = LCD_ERROR;
 80087a6:	2301      	movs	r3, #1
 80087a8:	71fb      	strb	r3, [r7, #7]
  
  /* Default value for draw propriety */
  DrawProp.BackColor = 0xFFFF;
 80087aa:	4b16      	ldr	r3, [pc, #88]	; (8008804 <BSP_LCD_Init+0x64>)
 80087ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80087b0:	605a      	str	r2, [r3, #4]
  DrawProp.pFont     = &Font24;
 80087b2:	4b14      	ldr	r3, [pc, #80]	; (8008804 <BSP_LCD_Init+0x64>)
 80087b4:	4a14      	ldr	r2, [pc, #80]	; (8008808 <BSP_LCD_Init+0x68>)
 80087b6:	609a      	str	r2, [r3, #8]
  DrawProp.TextColor = 0x0000;
 80087b8:	4b12      	ldr	r3, [pc, #72]	; (8008804 <BSP_LCD_Init+0x64>)
 80087ba:	2200      	movs	r2, #0
 80087bc:	601a      	str	r2, [r3, #0]
  if(ili9325_drv.ReadID() == ILI9325_ID || ili9325_drv.ReadID() == ILI9328_ID)
 80087be:	4b13      	ldr	r3, [pc, #76]	; (800880c <BSP_LCD_Init+0x6c>)
 80087c0:	685b      	ldr	r3, [r3, #4]
 80087c2:	4798      	blx	r3
 80087c4:	4603      	mov	r3, r0
 80087c6:	461a      	mov	r2, r3
 80087c8:	f249 3325 	movw	r3, #37669	; 0x9325
 80087cc:	429a      	cmp	r2, r3
 80087ce:	d008      	beq.n	80087e2 <BSP_LCD_Init+0x42>
 80087d0:	4b0e      	ldr	r3, [pc, #56]	; (800880c <BSP_LCD_Init+0x6c>)
 80087d2:	685b      	ldr	r3, [r3, #4]
 80087d4:	4798      	blx	r3
 80087d6:	4603      	mov	r3, r0
 80087d8:	461a      	mov	r2, r3
 80087da:	f249 3328 	movw	r3, #37672	; 0x9328
 80087de:	429a      	cmp	r2, r3
 80087e0:	d10b      	bne.n	80087fa <BSP_LCD_Init+0x5a>
  {
    lcd_drv = &ili9325_drv;
 80087e2:	4b0b      	ldr	r3, [pc, #44]	; (8008810 <BSP_LCD_Init+0x70>)
 80087e4:	4a09      	ldr	r2, [pc, #36]	; (800880c <BSP_LCD_Init+0x6c>)
 80087e6:	601a      	str	r2, [r3, #0]

    /* LCD Init */   
    lcd_drv->Init();
 80087e8:	4b09      	ldr	r3, [pc, #36]	; (8008810 <BSP_LCD_Init+0x70>)
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	4798      	blx	r3
    
    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80087f0:	4805      	ldr	r0, [pc, #20]	; (8008808 <BSP_LCD_Init+0x68>)
 80087f2:	f000 f837 	bl	8008864 <BSP_LCD_SetFont>

    ret = LCD_OK;
 80087f6:	2300      	movs	r3, #0
 80087f8:	71fb      	strb	r3, [r7, #7]
  }
  
  return ret;
 80087fa:	79fb      	ldrb	r3, [r7, #7]
}
 80087fc:	4618      	mov	r0, r3
 80087fe:	3708      	adds	r7, #8
 8008800:	46bd      	mov	sp, r7
 8008802:	bd80      	pop	{r7, pc}
 8008804:	200100a4 	.word	0x200100a4
 8008808:	20000468 	.word	0x20000468
 800880c:	20000428 	.word	0x20000428
 8008810:	20001680 	.word	0x20001680

08008814 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8008814:	b580      	push	{r7, lr}
 8008816:	af00      	add	r7, sp, #0
  return(lcd_drv->GetLcdPixelWidth());
 8008818:	4b03      	ldr	r3, [pc, #12]	; (8008828 <BSP_LCD_GetXSize+0x14>)
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800881e:	4798      	blx	r3
 8008820:	4603      	mov	r3, r0
}
 8008822:	4618      	mov	r0, r3
 8008824:	bd80      	pop	{r7, pc}
 8008826:	bf00      	nop
 8008828:	20001680 	.word	0x20001680

0800882c <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 800882c:	b580      	push	{r7, lr}
 800882e:	af00      	add	r7, sp, #0
  return(lcd_drv->GetLcdPixelHeight());
 8008830:	4b03      	ldr	r3, [pc, #12]	; (8008840 <BSP_LCD_GetYSize+0x14>)
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008836:	4798      	blx	r3
 8008838:	4603      	mov	r3, r0
}
 800883a:	4618      	mov	r0, r3
 800883c:	bd80      	pop	{r7, pc}
 800883e:	bf00      	nop
 8008840:	20001680 	.word	0x20001680

08008844 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code RGB(5-6-5)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint16_t Color)
{
 8008844:	b480      	push	{r7}
 8008846:	b083      	sub	sp, #12
 8008848:	af00      	add	r7, sp, #0
 800884a:	4603      	mov	r3, r0
 800884c:	80fb      	strh	r3, [r7, #6]
  DrawProp.TextColor = Color;
 800884e:	88fb      	ldrh	r3, [r7, #6]
 8008850:	4a03      	ldr	r2, [pc, #12]	; (8008860 <BSP_LCD_SetTextColor+0x1c>)
 8008852:	6013      	str	r3, [r2, #0]
}
 8008854:	bf00      	nop
 8008856:	370c      	adds	r7, #12
 8008858:	46bd      	mov	sp, r7
 800885a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885e:	4770      	bx	lr
 8008860:	200100a4 	.word	0x200100a4

08008864 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  pFonts: Font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 8008864:	b480      	push	{r7}
 8008866:	b083      	sub	sp, #12
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
  DrawProp.pFont = pFonts;
 800886c:	4a04      	ldr	r2, [pc, #16]	; (8008880 <BSP_LCD_SetFont+0x1c>)
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	6093      	str	r3, [r2, #8]
}
 8008872:	bf00      	nop
 8008874:	370c      	adds	r7, #12
 8008876:	46bd      	mov	sp, r7
 8008878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887c:	4770      	bx	lr
 800887e:	bf00      	nop
 8008880:	200100a4 	.word	0x200100a4

08008884 <BSP_LCD_GetFont>:
/**
  * @brief  Gets the LCD text font.
  * @retval Used font
  */
sFONT *BSP_LCD_GetFont(void)
{
 8008884:	b480      	push	{r7}
 8008886:	af00      	add	r7, sp, #0
  return DrawProp.pFont;
 8008888:	4b03      	ldr	r3, [pc, #12]	; (8008898 <BSP_LCD_GetFont+0x14>)
 800888a:	689b      	ldr	r3, [r3, #8]
}
 800888c:	4618      	mov	r0, r3
 800888e:	46bd      	mov	sp, r7
 8008890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008894:	4770      	bx	lr
 8008896:	bf00      	nop
 8008898:	200100a4 	.word	0x200100a4

0800889c <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint16_t Color)
{ 
 800889c:	b590      	push	{r4, r7, lr}
 800889e:	b085      	sub	sp, #20
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	4603      	mov	r3, r0
 80088a4:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 80088a6:	2300      	movs	r3, #0
 80088a8:	60fb      	str	r3, [r7, #12]
  
  uint32_t color_backup = DrawProp.TextColor; 
 80088aa:	4b15      	ldr	r3, [pc, #84]	; (8008900 <BSP_LCD_Clear+0x64>)
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	60bb      	str	r3, [r7, #8]
  DrawProp.TextColor = Color;
 80088b0:	88fb      	ldrh	r3, [r7, #6]
 80088b2:	4a13      	ldr	r2, [pc, #76]	; (8008900 <BSP_LCD_Clear+0x64>)
 80088b4:	6013      	str	r3, [r2, #0]
  
  for(counter = 0; counter < BSP_LCD_GetYSize(); counter++)
 80088b6:	2300      	movs	r3, #0
 80088b8:	60fb      	str	r3, [r7, #12]
 80088ba:	e00d      	b.n	80088d8 <BSP_LCD_Clear+0x3c>
  {
    BSP_LCD_DrawHLine(0, counter, BSP_LCD_GetXSize());
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	b29c      	uxth	r4, r3
 80088c0:	f7ff ffa8 	bl	8008814 <BSP_LCD_GetXSize>
 80088c4:	4603      	mov	r3, r0
 80088c6:	b29b      	uxth	r3, r3
 80088c8:	461a      	mov	r2, r3
 80088ca:	4621      	mov	r1, r4
 80088cc:	2000      	movs	r0, #0
 80088ce:	f000 f8e5 	bl	8008a9c <BSP_LCD_DrawHLine>
  for(counter = 0; counter < BSP_LCD_GetYSize(); counter++)
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	3301      	adds	r3, #1
 80088d6:	60fb      	str	r3, [r7, #12]
 80088d8:	f7ff ffa8 	bl	800882c <BSP_LCD_GetYSize>
 80088dc:	4602      	mov	r2, r0
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	4293      	cmp	r3, r2
 80088e2:	d3eb      	bcc.n	80088bc <BSP_LCD_Clear+0x20>
  }

  DrawProp.TextColor = color_backup; 
 80088e4:	4a06      	ldr	r2, [pc, #24]	; (8008900 <BSP_LCD_Clear+0x64>)
 80088e6:	68bb      	ldr	r3, [r7, #8]
 80088e8:	6013      	str	r3, [r2, #0]
  BSP_LCD_SetTextColor(DrawProp.TextColor);
 80088ea:	4b05      	ldr	r3, [pc, #20]	; (8008900 <BSP_LCD_Clear+0x64>)
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	b29b      	uxth	r3, r3
 80088f0:	4618      	mov	r0, r3
 80088f2:	f7ff ffa7 	bl	8008844 <BSP_LCD_SetTextColor>
}
 80088f6:	bf00      	nop
 80088f8:	3714      	adds	r7, #20
 80088fa:	46bd      	mov	sp, r7
 80088fc:	bd90      	pop	{r4, r7, pc}
 80088fe:	bf00      	nop
 8008900:	200100a4 	.word	0x200100a4

08008904 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8008904:	b580      	push	{r7, lr}
 8008906:	b082      	sub	sp, #8
 8008908:	af00      	add	r7, sp, #0
 800890a:	4603      	mov	r3, r0
 800890c:	80fb      	strh	r3, [r7, #6]
 800890e:	460b      	mov	r3, r1
 8008910:	80bb      	strh	r3, [r7, #4]
 8008912:	4613      	mov	r3, r2
 8008914:	70fb      	strb	r3, [r7, #3]
  LCD_DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 8008916:	4b0f      	ldr	r3, [pc, #60]	; (8008954 <BSP_LCD_DisplayChar+0x50>)
 8008918:	689b      	ldr	r3, [r3, #8]
 800891a:	681a      	ldr	r2, [r3, #0]
 800891c:	78fb      	ldrb	r3, [r7, #3]
 800891e:	3b20      	subs	r3, #32
    DrawProp.pFont->Height * ((DrawProp.pFont->Width + 7) / 8)]);
 8008920:	490c      	ldr	r1, [pc, #48]	; (8008954 <BSP_LCD_DisplayChar+0x50>)
 8008922:	6889      	ldr	r1, [r1, #8]
 8008924:	88c9      	ldrh	r1, [r1, #6]
  LCD_DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 8008926:	fb01 f103 	mul.w	r1, r1, r3
    DrawProp.pFont->Height * ((DrawProp.pFont->Width + 7) / 8)]);
 800892a:	4b0a      	ldr	r3, [pc, #40]	; (8008954 <BSP_LCD_DisplayChar+0x50>)
 800892c:	689b      	ldr	r3, [r3, #8]
 800892e:	889b      	ldrh	r3, [r3, #4]
 8008930:	3307      	adds	r3, #7
 8008932:	2b00      	cmp	r3, #0
 8008934:	da00      	bge.n	8008938 <BSP_LCD_DisplayChar+0x34>
 8008936:	3307      	adds	r3, #7
 8008938:	10db      	asrs	r3, r3, #3
 800893a:	fb03 f301 	mul.w	r3, r3, r1
  LCD_DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 800893e:	441a      	add	r2, r3
 8008940:	88b9      	ldrh	r1, [r7, #4]
 8008942:	88fb      	ldrh	r3, [r7, #6]
 8008944:	4618      	mov	r0, r3
 8008946:	f000 fadd 	bl	8008f04 <LCD_DrawChar>
}
 800894a:	bf00      	nop
 800894c:	3708      	adds	r7, #8
 800894e:	46bd      	mov	sp, r7
 8008950:	bd80      	pop	{r7, pc}
 8008952:	bf00      	nop
 8008954:	200100a4 	.word	0x200100a4

08008958 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *pText, Line_ModeTypdef Mode)
{
 8008958:	b590      	push	{r4, r7, lr}
 800895a:	b089      	sub	sp, #36	; 0x24
 800895c:	af00      	add	r7, sp, #0
 800895e:	60ba      	str	r2, [r7, #8]
 8008960:	461a      	mov	r2, r3
 8008962:	4603      	mov	r3, r0
 8008964:	81fb      	strh	r3, [r7, #14]
 8008966:	460b      	mov	r3, r1
 8008968:	81bb      	strh	r3, [r7, #12]
 800896a:	4613      	mov	r3, r2
 800896c:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, counter = 0;
 800896e:	2301      	movs	r3, #1
 8008970:	83fb      	strh	r3, [r7, #30]
 8008972:	2300      	movs	r3, #0
 8008974:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8008976:	2300      	movs	r3, #0
 8008978:	61bb      	str	r3, [r7, #24]
 800897a:	2300      	movs	r3, #0
 800897c:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 800897e:	68bb      	ldr	r3, [r7, #8]
 8008980:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8008982:	e002      	b.n	800898a <BSP_LCD_DisplayStringAt+0x32>
 8008984:	69bb      	ldr	r3, [r7, #24]
 8008986:	3301      	adds	r3, #1
 8008988:	61bb      	str	r3, [r7, #24]
 800898a:	697b      	ldr	r3, [r7, #20]
 800898c:	1c5a      	adds	r2, r3, #1
 800898e:	617a      	str	r2, [r7, #20]
 8008990:	781b      	ldrb	r3, [r3, #0]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d1f6      	bne.n	8008984 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp.pFont->Width);
 8008996:	f7ff ff3d 	bl	8008814 <BSP_LCD_GetXSize>
 800899a:	4602      	mov	r2, r0
 800899c:	4b32      	ldr	r3, [pc, #200]	; (8008a68 <BSP_LCD_DisplayStringAt+0x110>)
 800899e:	689b      	ldr	r3, [r3, #8]
 80089a0:	889b      	ldrh	r3, [r3, #4]
 80089a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80089a6:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 80089a8:	79fb      	ldrb	r3, [r7, #7]
 80089aa:	2b02      	cmp	r3, #2
 80089ac:	d014      	beq.n	80089d8 <BSP_LCD_DisplayStringAt+0x80>
 80089ae:	2b03      	cmp	r3, #3
 80089b0:	d00f      	beq.n	80089d2 <BSP_LCD_DisplayStringAt+0x7a>
 80089b2:	2b01      	cmp	r3, #1
 80089b4:	d11e      	bne.n	80089f4 <BSP_LCD_DisplayStringAt+0x9c>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp.pFont->Width) / 2;
 80089b6:	693a      	ldr	r2, [r7, #16]
 80089b8:	69bb      	ldr	r3, [r7, #24]
 80089ba:	1ad3      	subs	r3, r2, r3
 80089bc:	4a2a      	ldr	r2, [pc, #168]	; (8008a68 <BSP_LCD_DisplayStringAt+0x110>)
 80089be:	6892      	ldr	r2, [r2, #8]
 80089c0:	8892      	ldrh	r2, [r2, #4]
 80089c2:	fb02 f303 	mul.w	r3, r2, r3
 80089c6:	085b      	lsrs	r3, r3, #1
 80089c8:	b29a      	uxth	r2, r3
 80089ca:	89fb      	ldrh	r3, [r7, #14]
 80089cc:	4413      	add	r3, r2
 80089ce:	83fb      	strh	r3, [r7, #30]
      break;
 80089d0:	e013      	b.n	80089fa <BSP_LCD_DisplayStringAt+0xa2>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
 80089d2:	89fb      	ldrh	r3, [r7, #14]
 80089d4:	83fb      	strh	r3, [r7, #30]
      break;
 80089d6:	e010      	b.n	80089fa <BSP_LCD_DisplayStringAt+0xa2>
    }
  case RIGHT_MODE:
    {
      refcolumn =  - Xpos + ((xsize - size)*DrawProp.pFont->Width);
 80089d8:	693a      	ldr	r2, [r7, #16]
 80089da:	69bb      	ldr	r3, [r7, #24]
 80089dc:	1ad3      	subs	r3, r2, r3
 80089de:	b29a      	uxth	r2, r3
 80089e0:	4b21      	ldr	r3, [pc, #132]	; (8008a68 <BSP_LCD_DisplayStringAt+0x110>)
 80089e2:	689b      	ldr	r3, [r3, #8]
 80089e4:	889b      	ldrh	r3, [r3, #4]
 80089e6:	fb12 f303 	smulbb	r3, r2, r3
 80089ea:	b29a      	uxth	r2, r3
 80089ec:	89fb      	ldrh	r3, [r7, #14]
 80089ee:	1ad3      	subs	r3, r2, r3
 80089f0:	83fb      	strh	r3, [r7, #30]
      break;
 80089f2:	e002      	b.n	80089fa <BSP_LCD_DisplayStringAt+0xa2>
    }    
  default:
    {
      refcolumn = Xpos;
 80089f4:	89fb      	ldrh	r3, [r7, #14]
 80089f6:	83fb      	strh	r3, [r7, #30]
      break;
 80089f8:	bf00      	nop
    }
  }
  
  /* Send the string character by character on lCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (counter*DrawProp.pFont->Width)) & 0xFFFF) >= DrawProp.pFont->Width))
 80089fa:	e012      	b.n	8008a22 <BSP_LCD_DisplayStringAt+0xca>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Ypos, *pText);
 80089fc:	68bb      	ldr	r3, [r7, #8]
 80089fe:	781a      	ldrb	r2, [r3, #0]
 8008a00:	89b9      	ldrh	r1, [r7, #12]
 8008a02:	8bfb      	ldrh	r3, [r7, #30]
 8008a04:	4618      	mov	r0, r3
 8008a06:	f7ff ff7d 	bl	8008904 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp.pFont->Width;
 8008a0a:	4b17      	ldr	r3, [pc, #92]	; (8008a68 <BSP_LCD_DisplayStringAt+0x110>)
 8008a0c:	689b      	ldr	r3, [r3, #8]
 8008a0e:	889a      	ldrh	r2, [r3, #4]
 8008a10:	8bfb      	ldrh	r3, [r7, #30]
 8008a12:	4413      	add	r3, r2
 8008a14:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 8008a16:	68bb      	ldr	r3, [r7, #8]
 8008a18:	3301      	adds	r3, #1
 8008a1a:	60bb      	str	r3, [r7, #8]
    counter++;
 8008a1c:	8bbb      	ldrh	r3, [r7, #28]
 8008a1e:	3301      	adds	r3, #1
 8008a20:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (counter*DrawProp.pFont->Width)) & 0xFFFF) >= DrawProp.pFont->Width))
 8008a22:	68bb      	ldr	r3, [r7, #8]
 8008a24:	781b      	ldrb	r3, [r3, #0]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	bf14      	ite	ne
 8008a2a:	2301      	movne	r3, #1
 8008a2c:	2300      	moveq	r3, #0
 8008a2e:	b2dc      	uxtb	r4, r3
 8008a30:	f7ff fef0 	bl	8008814 <BSP_LCD_GetXSize>
 8008a34:	4601      	mov	r1, r0
 8008a36:	8bbb      	ldrh	r3, [r7, #28]
 8008a38:	4a0b      	ldr	r2, [pc, #44]	; (8008a68 <BSP_LCD_DisplayStringAt+0x110>)
 8008a3a:	6892      	ldr	r2, [r2, #8]
 8008a3c:	8892      	ldrh	r2, [r2, #4]
 8008a3e:	fb02 f303 	mul.w	r3, r2, r3
 8008a42:	1acb      	subs	r3, r1, r3
 8008a44:	b29b      	uxth	r3, r3
 8008a46:	4a08      	ldr	r2, [pc, #32]	; (8008a68 <BSP_LCD_DisplayStringAt+0x110>)
 8008a48:	6892      	ldr	r2, [r2, #8]
 8008a4a:	8892      	ldrh	r2, [r2, #4]
 8008a4c:	4293      	cmp	r3, r2
 8008a4e:	bf2c      	ite	cs
 8008a50:	2301      	movcs	r3, #1
 8008a52:	2300      	movcc	r3, #0
 8008a54:	b2db      	uxtb	r3, r3
 8008a56:	4023      	ands	r3, r4
 8008a58:	b2db      	uxtb	r3, r3
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d1ce      	bne.n	80089fc <BSP_LCD_DisplayStringAt+0xa4>
  }
}
 8008a5e:	bf00      	nop
 8008a60:	3724      	adds	r7, #36	; 0x24
 8008a62:	46bd      	mov	sp, r7
 8008a64:	bd90      	pop	{r4, r7, pc}
 8008a66:	bf00      	nop
 8008a68:	200100a4 	.word	0x200100a4

08008a6c <BSP_LCD_DisplayStringAtLine>:
  *            @arg  0..29: if the Current fonts is Font8x8
  * @param  pText: Pointer to string to display on LCD
  * @retval None
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *pText)
{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b082      	sub	sp, #8
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	4603      	mov	r3, r0
 8008a74:	6039      	str	r1, [r7, #0]
 8008a76:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line),pText, LEFT_MODE);
 8008a78:	f7ff ff04 	bl	8008884 <BSP_LCD_GetFont>
 8008a7c:	4603      	mov	r3, r0
 8008a7e:	88db      	ldrh	r3, [r3, #6]
 8008a80:	88fa      	ldrh	r2, [r7, #6]
 8008a82:	fb12 f303 	smulbb	r3, r2, r3
 8008a86:	b299      	uxth	r1, r3
 8008a88:	2303      	movs	r3, #3
 8008a8a:	683a      	ldr	r2, [r7, #0]
 8008a8c:	2000      	movs	r0, #0
 8008a8e:	f7ff ff63 	bl	8008958 <BSP_LCD_DisplayStringAt>
}
 8008a92:	bf00      	nop
 8008a94:	3708      	adds	r7, #8
 8008a96:	46bd      	mov	sp, r7
 8008a98:	bd80      	pop	{r7, pc}
	...

08008a9c <BSP_LCD_DrawHLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8008a9c:	b590      	push	{r4, r7, lr}
 8008a9e:	b085      	sub	sp, #20
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	4603      	mov	r3, r0
 8008aa4:	80fb      	strh	r3, [r7, #6]
 8008aa6:	460b      	mov	r3, r1
 8008aa8:	80bb      	strh	r3, [r7, #4]
 8008aaa:	4613      	mov	r3, r2
 8008aac:	807b      	strh	r3, [r7, #2]
  uint32_t index = 0;
 8008aae:	2300      	movs	r3, #0
 8008ab0:	60fb      	str	r3, [r7, #12]
  
  if(lcd_drv->DrawHLine != NULL)
 8008ab2:	4b15      	ldr	r3, [pc, #84]	; (8008b08 <BSP_LCD_DrawHLine+0x6c>)
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	6a1b      	ldr	r3, [r3, #32]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d00a      	beq.n	8008ad2 <BSP_LCD_DrawHLine+0x36>
  {
    lcd_drv->DrawHLine(DrawProp.TextColor, Xpos, Ypos, Length);
 8008abc:	4b12      	ldr	r3, [pc, #72]	; (8008b08 <BSP_LCD_DrawHLine+0x6c>)
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	6a1c      	ldr	r4, [r3, #32]
 8008ac2:	4b12      	ldr	r3, [pc, #72]	; (8008b0c <BSP_LCD_DrawHLine+0x70>)
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	b298      	uxth	r0, r3
 8008ac8:	887b      	ldrh	r3, [r7, #2]
 8008aca:	88ba      	ldrh	r2, [r7, #4]
 8008acc:	88f9      	ldrh	r1, [r7, #6]
 8008ace:	47a0      	blx	r4
    for(index = 0; index < Length; index++)
    {
      LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
    }
  }
}
 8008ad0:	e015      	b.n	8008afe <BSP_LCD_DrawHLine+0x62>
    for(index = 0; index < Length; index++)
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	60fb      	str	r3, [r7, #12]
 8008ad6:	e00e      	b.n	8008af6 <BSP_LCD_DrawHLine+0x5a>
      LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	b29a      	uxth	r2, r3
 8008adc:	88fb      	ldrh	r3, [r7, #6]
 8008ade:	4413      	add	r3, r2
 8008ae0:	b298      	uxth	r0, r3
 8008ae2:	4b0a      	ldr	r3, [pc, #40]	; (8008b0c <BSP_LCD_DrawHLine+0x70>)
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	b29a      	uxth	r2, r3
 8008ae8:	88bb      	ldrh	r3, [r7, #4]
 8008aea:	4619      	mov	r1, r3
 8008aec:	f000 f9ee 	bl	8008ecc <LCD_DrawPixel>
    for(index = 0; index < Length; index++)
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	3301      	adds	r3, #1
 8008af4:	60fb      	str	r3, [r7, #12]
 8008af6:	887b      	ldrh	r3, [r7, #2]
 8008af8:	68fa      	ldr	r2, [r7, #12]
 8008afa:	429a      	cmp	r2, r3
 8008afc:	d3ec      	bcc.n	8008ad8 <BSP_LCD_DrawHLine+0x3c>
}
 8008afe:	bf00      	nop
 8008b00:	3714      	adds	r7, #20
 8008b02:	46bd      	mov	sp, r7
 8008b04:	bd90      	pop	{r4, r7, pc}
 8008b06:	bf00      	nop
 8008b08:	20001680 	.word	0x20001680
 8008b0c:	200100a4 	.word	0x200100a4

08008b10 <BSP_LCD_DrawVLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawVLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8008b10:	b590      	push	{r4, r7, lr}
 8008b12:	b085      	sub	sp, #20
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	4603      	mov	r3, r0
 8008b18:	80fb      	strh	r3, [r7, #6]
 8008b1a:	460b      	mov	r3, r1
 8008b1c:	80bb      	strh	r3, [r7, #4]
 8008b1e:	4613      	mov	r3, r2
 8008b20:	807b      	strh	r3, [r7, #2]
  uint32_t index = 0;
 8008b22:	2300      	movs	r3, #0
 8008b24:	60fb      	str	r3, [r7, #12]
  
  if(lcd_drv->DrawVLine != NULL)
 8008b26:	4b15      	ldr	r3, [pc, #84]	; (8008b7c <BSP_LCD_DrawVLine+0x6c>)
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d00a      	beq.n	8008b46 <BSP_LCD_DrawVLine+0x36>
  {
    lcd_drv->DrawVLine(DrawProp.TextColor, Xpos, Ypos, Length);
 8008b30:	4b12      	ldr	r3, [pc, #72]	; (8008b7c <BSP_LCD_DrawVLine+0x6c>)
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8008b36:	4b12      	ldr	r3, [pc, #72]	; (8008b80 <BSP_LCD_DrawVLine+0x70>)
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	b298      	uxth	r0, r3
 8008b3c:	887b      	ldrh	r3, [r7, #2]
 8008b3e:	88ba      	ldrh	r2, [r7, #4]
 8008b40:	88f9      	ldrh	r1, [r7, #6]
 8008b42:	47a0      	blx	r4
    for(index = 0; index < Length; index++)
    {
      LCD_DrawPixel(Xpos, Ypos + index, DrawProp.TextColor);
    }
  }
}
 8008b44:	e015      	b.n	8008b72 <BSP_LCD_DrawVLine+0x62>
    for(index = 0; index < Length; index++)
 8008b46:	2300      	movs	r3, #0
 8008b48:	60fb      	str	r3, [r7, #12]
 8008b4a:	e00e      	b.n	8008b6a <BSP_LCD_DrawVLine+0x5a>
      LCD_DrawPixel(Xpos, Ypos + index, DrawProp.TextColor);
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	b29a      	uxth	r2, r3
 8008b50:	88bb      	ldrh	r3, [r7, #4]
 8008b52:	4413      	add	r3, r2
 8008b54:	b299      	uxth	r1, r3
 8008b56:	4b0a      	ldr	r3, [pc, #40]	; (8008b80 <BSP_LCD_DrawVLine+0x70>)
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	b29a      	uxth	r2, r3
 8008b5c:	88fb      	ldrh	r3, [r7, #6]
 8008b5e:	4618      	mov	r0, r3
 8008b60:	f000 f9b4 	bl	8008ecc <LCD_DrawPixel>
    for(index = 0; index < Length; index++)
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	3301      	adds	r3, #1
 8008b68:	60fb      	str	r3, [r7, #12]
 8008b6a:	887b      	ldrh	r3, [r7, #2]
 8008b6c:	68fa      	ldr	r2, [r7, #12]
 8008b6e:	429a      	cmp	r2, r3
 8008b70:	d3ec      	bcc.n	8008b4c <BSP_LCD_DrawVLine+0x3c>
}
 8008b72:	bf00      	nop
 8008b74:	3714      	adds	r7, #20
 8008b76:	46bd      	mov	sp, r7
 8008b78:	bd90      	pop	{r4, r7, pc}
 8008b7a:	bf00      	nop
 8008b7c:	20001680 	.word	0x20001680
 8008b80:	200100a4 	.word	0x200100a4

08008b84 <BSP_LCD_DrawCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b086      	sub	sp, #24
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	4603      	mov	r3, r0
 8008b8c:	80fb      	strh	r3, [r7, #6]
 8008b8e:	460b      	mov	r3, r1
 8008b90:	80bb      	strh	r3, [r7, #4]
 8008b92:	4613      	mov	r3, r2
 8008b94:	807b      	strh	r3, [r7, #2]
  int32_t  D;       /* Decision Variable */ 
  uint32_t  CurX;   /* Current X Value */
  uint32_t  CurY;   /* Current Y Value */ 
  
  D = 3 - (Radius << 1);
 8008b96:	887b      	ldrh	r3, [r7, #2]
 8008b98:	005b      	lsls	r3, r3, #1
 8008b9a:	f1c3 0303 	rsb	r3, r3, #3
 8008b9e:	617b      	str	r3, [r7, #20]
  CurX = 0;
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	613b      	str	r3, [r7, #16]
  CurY = Radius;
 8008ba4:	887b      	ldrh	r3, [r7, #2]
 8008ba6:	60fb      	str	r3, [r7, #12]
  
  while (CurX <= CurY)
 8008ba8:	e09a      	b.n	8008ce0 <BSP_LCD_DrawCircle+0x15c>
  {
    LCD_DrawPixel((Xpos + CurX), (Ypos - CurY), DrawProp.TextColor);
 8008baa:	693b      	ldr	r3, [r7, #16]
 8008bac:	b29a      	uxth	r2, r3
 8008bae:	88fb      	ldrh	r3, [r7, #6]
 8008bb0:	4413      	add	r3, r2
 8008bb2:	b298      	uxth	r0, r3
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	b29b      	uxth	r3, r3
 8008bb8:	88ba      	ldrh	r2, [r7, #4]
 8008bba:	1ad3      	subs	r3, r2, r3
 8008bbc:	b299      	uxth	r1, r3
 8008bbe:	4b4d      	ldr	r3, [pc, #308]	; (8008cf4 <BSP_LCD_DrawCircle+0x170>)
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	b29b      	uxth	r3, r3
 8008bc4:	461a      	mov	r2, r3
 8008bc6:	f000 f981 	bl	8008ecc <LCD_DrawPixel>

    LCD_DrawPixel((Xpos - CurX), (Ypos - CurY), DrawProp.TextColor);
 8008bca:	693b      	ldr	r3, [r7, #16]
 8008bcc:	b29b      	uxth	r3, r3
 8008bce:	88fa      	ldrh	r2, [r7, #6]
 8008bd0:	1ad3      	subs	r3, r2, r3
 8008bd2:	b298      	uxth	r0, r3
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	b29b      	uxth	r3, r3
 8008bd8:	88ba      	ldrh	r2, [r7, #4]
 8008bda:	1ad3      	subs	r3, r2, r3
 8008bdc:	b299      	uxth	r1, r3
 8008bde:	4b45      	ldr	r3, [pc, #276]	; (8008cf4 <BSP_LCD_DrawCircle+0x170>)
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	b29b      	uxth	r3, r3
 8008be4:	461a      	mov	r2, r3
 8008be6:	f000 f971 	bl	8008ecc <LCD_DrawPixel>

    LCD_DrawPixel((Xpos + CurY), (Ypos - CurX), DrawProp.TextColor);
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	b29a      	uxth	r2, r3
 8008bee:	88fb      	ldrh	r3, [r7, #6]
 8008bf0:	4413      	add	r3, r2
 8008bf2:	b298      	uxth	r0, r3
 8008bf4:	693b      	ldr	r3, [r7, #16]
 8008bf6:	b29b      	uxth	r3, r3
 8008bf8:	88ba      	ldrh	r2, [r7, #4]
 8008bfa:	1ad3      	subs	r3, r2, r3
 8008bfc:	b299      	uxth	r1, r3
 8008bfe:	4b3d      	ldr	r3, [pc, #244]	; (8008cf4 <BSP_LCD_DrawCircle+0x170>)
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	b29b      	uxth	r3, r3
 8008c04:	461a      	mov	r2, r3
 8008c06:	f000 f961 	bl	8008ecc <LCD_DrawPixel>

    LCD_DrawPixel((Xpos - CurY), (Ypos - CurX), DrawProp.TextColor);
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	b29b      	uxth	r3, r3
 8008c0e:	88fa      	ldrh	r2, [r7, #6]
 8008c10:	1ad3      	subs	r3, r2, r3
 8008c12:	b298      	uxth	r0, r3
 8008c14:	693b      	ldr	r3, [r7, #16]
 8008c16:	b29b      	uxth	r3, r3
 8008c18:	88ba      	ldrh	r2, [r7, #4]
 8008c1a:	1ad3      	subs	r3, r2, r3
 8008c1c:	b299      	uxth	r1, r3
 8008c1e:	4b35      	ldr	r3, [pc, #212]	; (8008cf4 <BSP_LCD_DrawCircle+0x170>)
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	b29b      	uxth	r3, r3
 8008c24:	461a      	mov	r2, r3
 8008c26:	f000 f951 	bl	8008ecc <LCD_DrawPixel>

    LCD_DrawPixel((Xpos + CurX), (Ypos + CurY), DrawProp.TextColor);
 8008c2a:	693b      	ldr	r3, [r7, #16]
 8008c2c:	b29a      	uxth	r2, r3
 8008c2e:	88fb      	ldrh	r3, [r7, #6]
 8008c30:	4413      	add	r3, r2
 8008c32:	b298      	uxth	r0, r3
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	b29a      	uxth	r2, r3
 8008c38:	88bb      	ldrh	r3, [r7, #4]
 8008c3a:	4413      	add	r3, r2
 8008c3c:	b299      	uxth	r1, r3
 8008c3e:	4b2d      	ldr	r3, [pc, #180]	; (8008cf4 <BSP_LCD_DrawCircle+0x170>)
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	b29b      	uxth	r3, r3
 8008c44:	461a      	mov	r2, r3
 8008c46:	f000 f941 	bl	8008ecc <LCD_DrawPixel>

    LCD_DrawPixel((Xpos - CurX), (Ypos + CurY), DrawProp.TextColor);
 8008c4a:	693b      	ldr	r3, [r7, #16]
 8008c4c:	b29b      	uxth	r3, r3
 8008c4e:	88fa      	ldrh	r2, [r7, #6]
 8008c50:	1ad3      	subs	r3, r2, r3
 8008c52:	b298      	uxth	r0, r3
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	b29a      	uxth	r2, r3
 8008c58:	88bb      	ldrh	r3, [r7, #4]
 8008c5a:	4413      	add	r3, r2
 8008c5c:	b299      	uxth	r1, r3
 8008c5e:	4b25      	ldr	r3, [pc, #148]	; (8008cf4 <BSP_LCD_DrawCircle+0x170>)
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	b29b      	uxth	r3, r3
 8008c64:	461a      	mov	r2, r3
 8008c66:	f000 f931 	bl	8008ecc <LCD_DrawPixel>

    LCD_DrawPixel((Xpos + CurY), (Ypos + CurX), DrawProp.TextColor);
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	b29a      	uxth	r2, r3
 8008c6e:	88fb      	ldrh	r3, [r7, #6]
 8008c70:	4413      	add	r3, r2
 8008c72:	b298      	uxth	r0, r3
 8008c74:	693b      	ldr	r3, [r7, #16]
 8008c76:	b29a      	uxth	r2, r3
 8008c78:	88bb      	ldrh	r3, [r7, #4]
 8008c7a:	4413      	add	r3, r2
 8008c7c:	b299      	uxth	r1, r3
 8008c7e:	4b1d      	ldr	r3, [pc, #116]	; (8008cf4 <BSP_LCD_DrawCircle+0x170>)
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	b29b      	uxth	r3, r3
 8008c84:	461a      	mov	r2, r3
 8008c86:	f000 f921 	bl	8008ecc <LCD_DrawPixel>

    LCD_DrawPixel((Xpos - CurY), (Ypos + CurX), DrawProp.TextColor);   
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	b29b      	uxth	r3, r3
 8008c8e:	88fa      	ldrh	r2, [r7, #6]
 8008c90:	1ad3      	subs	r3, r2, r3
 8008c92:	b298      	uxth	r0, r3
 8008c94:	693b      	ldr	r3, [r7, #16]
 8008c96:	b29a      	uxth	r2, r3
 8008c98:	88bb      	ldrh	r3, [r7, #4]
 8008c9a:	4413      	add	r3, r2
 8008c9c:	b299      	uxth	r1, r3
 8008c9e:	4b15      	ldr	r3, [pc, #84]	; (8008cf4 <BSP_LCD_DrawCircle+0x170>)
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	b29b      	uxth	r3, r3
 8008ca4:	461a      	mov	r2, r3
 8008ca6:	f000 f911 	bl	8008ecc <LCD_DrawPixel>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8008caa:	4813      	ldr	r0, [pc, #76]	; (8008cf8 <BSP_LCD_DrawCircle+0x174>)
 8008cac:	f7ff fdda 	bl	8008864 <BSP_LCD_SetFont>

    if (D < 0)
 8008cb0:	697b      	ldr	r3, [r7, #20]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	da06      	bge.n	8008cc4 <BSP_LCD_DrawCircle+0x140>
    { 
      D += (CurX << 2) + 6;
 8008cb6:	693b      	ldr	r3, [r7, #16]
 8008cb8:	009a      	lsls	r2, r3, #2
 8008cba:	697b      	ldr	r3, [r7, #20]
 8008cbc:	4413      	add	r3, r2
 8008cbe:	3306      	adds	r3, #6
 8008cc0:	617b      	str	r3, [r7, #20]
 8008cc2:	e00a      	b.n	8008cda <BSP_LCD_DrawCircle+0x156>
    }
    else
    {
      D += ((CurX - CurY) << 2) + 10;
 8008cc4:	693a      	ldr	r2, [r7, #16]
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	1ad3      	subs	r3, r2, r3
 8008cca:	009a      	lsls	r2, r3, #2
 8008ccc:	697b      	ldr	r3, [r7, #20]
 8008cce:	4413      	add	r3, r2
 8008cd0:	330a      	adds	r3, #10
 8008cd2:	617b      	str	r3, [r7, #20]
      CurY--;
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	3b01      	subs	r3, #1
 8008cd8:	60fb      	str	r3, [r7, #12]
    }
    CurX++;
 8008cda:	693b      	ldr	r3, [r7, #16]
 8008cdc:	3301      	adds	r3, #1
 8008cde:	613b      	str	r3, [r7, #16]
  while (CurX <= CurY)
 8008ce0:	693a      	ldr	r2, [r7, #16]
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	429a      	cmp	r2, r3
 8008ce6:	f67f af60 	bls.w	8008baa <BSP_LCD_DrawCircle+0x26>
  } 
}
 8008cea:	bf00      	nop
 8008cec:	3718      	adds	r7, #24
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	bd80      	pop	{r7, pc}
 8008cf2:	bf00      	nop
 8008cf4:	200100a4 	.word	0x200100a4
 8008cf8:	20000468 	.word	0x20000468

08008cfc <BSP_LCD_DrawBitmap>:
  * @param  Ypos: Bmp Y position in the LCD
  * @param  pbmp: Pointer to Bmp picture address.
  * @retval None
  */
void BSP_LCD_DrawBitmap(uint16_t Xpos, uint16_t Ypos, uint8_t *pbmp)
{
 8008cfc:	b590      	push	{r4, r7, lr}
 8008cfe:	b085      	sub	sp, #20
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	4603      	mov	r3, r0
 8008d04:	603a      	str	r2, [r7, #0]
 8008d06:	80fb      	strh	r3, [r7, #6]
 8008d08:	460b      	mov	r3, r1
 8008d0a:	80bb      	strh	r3, [r7, #4]
  uint32_t height = 0;
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	60fb      	str	r3, [r7, #12]
  uint32_t width  = 0;
 8008d10:	2300      	movs	r3, #0
 8008d12:	60bb      	str	r3, [r7, #8]
  
  
  /* Read bitmap width */
  width = *(uint16_t *) (pbmp + 18);
 8008d14:	683b      	ldr	r3, [r7, #0]
 8008d16:	3312      	adds	r3, #18
 8008d18:	881b      	ldrh	r3, [r3, #0]
 8008d1a:	60bb      	str	r3, [r7, #8]
  width |= (*(uint16_t *) (pbmp + 20)) << 16;
 8008d1c:	683b      	ldr	r3, [r7, #0]
 8008d1e:	3314      	adds	r3, #20
 8008d20:	881b      	ldrh	r3, [r3, #0]
 8008d22:	041b      	lsls	r3, r3, #16
 8008d24:	461a      	mov	r2, r3
 8008d26:	68bb      	ldr	r3, [r7, #8]
 8008d28:	4313      	orrs	r3, r2
 8008d2a:	60bb      	str	r3, [r7, #8]
  
  /* Read bitmap height */
  height = *(uint16_t *) (pbmp + 22);
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	3316      	adds	r3, #22
 8008d30:	881b      	ldrh	r3, [r3, #0]
 8008d32:	60fb      	str	r3, [r7, #12]
  height |= (*(uint16_t *) (pbmp + 24)) << 16; 
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	3318      	adds	r3, #24
 8008d38:	881b      	ldrh	r3, [r3, #0]
 8008d3a:	041b      	lsls	r3, r3, #16
 8008d3c:	461a      	mov	r2, r3
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	4313      	orrs	r3, r2
 8008d42:	60fb      	str	r3, [r7, #12]
  
  LCD_SetDisplayWindow(Xpos, Ypos, width, height);
 8008d44:	68bb      	ldr	r3, [r7, #8]
 8008d46:	b29a      	uxth	r2, r3
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	b29b      	uxth	r3, r3
 8008d4c:	88b9      	ldrh	r1, [r7, #4]
 8008d4e:	88f8      	ldrh	r0, [r7, #6]
 8008d50:	f000 f9ca 	bl	80090e8 <LCD_SetDisplayWindow>
  
  if(lcd_drv->DrawBitmap != NULL)
 8008d54:	4b0e      	ldr	r3, [pc, #56]	; (8008d90 <BSP_LCD_DrawBitmap+0x94>)
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d006      	beq.n	8008d6c <BSP_LCD_DrawBitmap+0x70>
  {
    lcd_drv->DrawBitmap(Xpos, Ypos, pbmp);
 8008d5e:	4b0c      	ldr	r3, [pc, #48]	; (8008d90 <BSP_LCD_DrawBitmap+0x94>)
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d64:	88b9      	ldrh	r1, [r7, #4]
 8008d66:	88f8      	ldrh	r0, [r7, #6]
 8008d68:	683a      	ldr	r2, [r7, #0]
 8008d6a:	4798      	blx	r3
  } 
  LCD_SetDisplayWindow(0, 0, BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 8008d6c:	f7ff fd52 	bl	8008814 <BSP_LCD_GetXSize>
 8008d70:	4603      	mov	r3, r0
 8008d72:	b29c      	uxth	r4, r3
 8008d74:	f7ff fd5a 	bl	800882c <BSP_LCD_GetYSize>
 8008d78:	4603      	mov	r3, r0
 8008d7a:	b29b      	uxth	r3, r3
 8008d7c:	4622      	mov	r2, r4
 8008d7e:	2100      	movs	r1, #0
 8008d80:	2000      	movs	r0, #0
 8008d82:	f000 f9b1 	bl	80090e8 <LCD_SetDisplayWindow>
}
 8008d86:	bf00      	nop
 8008d88:	3714      	adds	r7, #20
 8008d8a:	46bd      	mov	sp, r7
 8008d8c:	bd90      	pop	{r4, r7, pc}
 8008d8e:	bf00      	nop
 8008d90:	20001680 	.word	0x20001680

08008d94 <BSP_LCD_FillCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b086      	sub	sp, #24
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	4603      	mov	r3, r0
 8008d9c:	80fb      	strh	r3, [r7, #6]
 8008d9e:	460b      	mov	r3, r1
 8008da0:	80bb      	strh	r3, [r7, #4]
 8008da2:	4613      	mov	r3, r2
 8008da4:	807b      	strh	r3, [r7, #2]
  int32_t  D;        /* Decision Variable */ 
  uint32_t  CurX;    /* Current X Value */
  uint32_t  CurY;    /* Current Y Value */ 
  
  D = 3 - (Radius << 1);
 8008da6:	887b      	ldrh	r3, [r7, #2]
 8008da8:	005b      	lsls	r3, r3, #1
 8008daa:	f1c3 0303 	rsb	r3, r3, #3
 8008dae:	617b      	str	r3, [r7, #20]

  CurX = 0;
 8008db0:	2300      	movs	r3, #0
 8008db2:	613b      	str	r3, [r7, #16]
  CurY = Radius;
 8008db4:	887b      	ldrh	r3, [r7, #2]
 8008db6:	60fb      	str	r3, [r7, #12]
  
  BSP_LCD_SetTextColor(DrawProp.TextColor);
 8008db8:	4b3e      	ldr	r3, [pc, #248]	; (8008eb4 <BSP_LCD_FillCircle+0x120>)
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	b29b      	uxth	r3, r3
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	f7ff fd40 	bl	8008844 <BSP_LCD_SetTextColor>

  while (CurX <= CurY)
 8008dc4:	e061      	b.n	8008e8a <BSP_LCD_FillCircle+0xf6>
  {
    if(CurY > 0) 
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d021      	beq.n	8008e10 <BSP_LCD_FillCircle+0x7c>
    {
      BSP_LCD_DrawHLine(Xpos - CurY, Ypos + CurX, 2*CurY);
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	b29b      	uxth	r3, r3
 8008dd0:	88fa      	ldrh	r2, [r7, #6]
 8008dd2:	1ad3      	subs	r3, r2, r3
 8008dd4:	b298      	uxth	r0, r3
 8008dd6:	693b      	ldr	r3, [r7, #16]
 8008dd8:	b29a      	uxth	r2, r3
 8008dda:	88bb      	ldrh	r3, [r7, #4]
 8008ddc:	4413      	add	r3, r2
 8008dde:	b299      	uxth	r1, r3
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	b29b      	uxth	r3, r3
 8008de4:	005b      	lsls	r3, r3, #1
 8008de6:	b29b      	uxth	r3, r3
 8008de8:	461a      	mov	r2, r3
 8008dea:	f7ff fe57 	bl	8008a9c <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - CurY, Ypos - CurX, 2*CurY);
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	b29b      	uxth	r3, r3
 8008df2:	88fa      	ldrh	r2, [r7, #6]
 8008df4:	1ad3      	subs	r3, r2, r3
 8008df6:	b298      	uxth	r0, r3
 8008df8:	693b      	ldr	r3, [r7, #16]
 8008dfa:	b29b      	uxth	r3, r3
 8008dfc:	88ba      	ldrh	r2, [r7, #4]
 8008dfe:	1ad3      	subs	r3, r2, r3
 8008e00:	b299      	uxth	r1, r3
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	b29b      	uxth	r3, r3
 8008e06:	005b      	lsls	r3, r3, #1
 8008e08:	b29b      	uxth	r3, r3
 8008e0a:	461a      	mov	r2, r3
 8008e0c:	f7ff fe46 	bl	8008a9c <BSP_LCD_DrawHLine>
    }

    if(CurX > 0) 
 8008e10:	693b      	ldr	r3, [r7, #16]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d021      	beq.n	8008e5a <BSP_LCD_FillCircle+0xc6>
    {
      BSP_LCD_DrawHLine(Xpos - CurX, Ypos - CurY, 2*CurX);
 8008e16:	693b      	ldr	r3, [r7, #16]
 8008e18:	b29b      	uxth	r3, r3
 8008e1a:	88fa      	ldrh	r2, [r7, #6]
 8008e1c:	1ad3      	subs	r3, r2, r3
 8008e1e:	b298      	uxth	r0, r3
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	b29b      	uxth	r3, r3
 8008e24:	88ba      	ldrh	r2, [r7, #4]
 8008e26:	1ad3      	subs	r3, r2, r3
 8008e28:	b299      	uxth	r1, r3
 8008e2a:	693b      	ldr	r3, [r7, #16]
 8008e2c:	b29b      	uxth	r3, r3
 8008e2e:	005b      	lsls	r3, r3, #1
 8008e30:	b29b      	uxth	r3, r3
 8008e32:	461a      	mov	r2, r3
 8008e34:	f7ff fe32 	bl	8008a9c <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - CurX, Ypos + CurY, 2*CurX);
 8008e38:	693b      	ldr	r3, [r7, #16]
 8008e3a:	b29b      	uxth	r3, r3
 8008e3c:	88fa      	ldrh	r2, [r7, #6]
 8008e3e:	1ad3      	subs	r3, r2, r3
 8008e40:	b298      	uxth	r0, r3
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	b29a      	uxth	r2, r3
 8008e46:	88bb      	ldrh	r3, [r7, #4]
 8008e48:	4413      	add	r3, r2
 8008e4a:	b299      	uxth	r1, r3
 8008e4c:	693b      	ldr	r3, [r7, #16]
 8008e4e:	b29b      	uxth	r3, r3
 8008e50:	005b      	lsls	r3, r3, #1
 8008e52:	b29b      	uxth	r3, r3
 8008e54:	461a      	mov	r2, r3
 8008e56:	f7ff fe21 	bl	8008a9c <BSP_LCD_DrawHLine>
    }
    if (D < 0)
 8008e5a:	697b      	ldr	r3, [r7, #20]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	da06      	bge.n	8008e6e <BSP_LCD_FillCircle+0xda>
    { 
      D += (CurX << 2) + 6;
 8008e60:	693b      	ldr	r3, [r7, #16]
 8008e62:	009a      	lsls	r2, r3, #2
 8008e64:	697b      	ldr	r3, [r7, #20]
 8008e66:	4413      	add	r3, r2
 8008e68:	3306      	adds	r3, #6
 8008e6a:	617b      	str	r3, [r7, #20]
 8008e6c:	e00a      	b.n	8008e84 <BSP_LCD_FillCircle+0xf0>
    }
    else
    {
      D += ((CurX - CurY) << 2) + 10;
 8008e6e:	693a      	ldr	r2, [r7, #16]
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	1ad3      	subs	r3, r2, r3
 8008e74:	009a      	lsls	r2, r3, #2
 8008e76:	697b      	ldr	r3, [r7, #20]
 8008e78:	4413      	add	r3, r2
 8008e7a:	330a      	adds	r3, #10
 8008e7c:	617b      	str	r3, [r7, #20]
      CurY--;
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	3b01      	subs	r3, #1
 8008e82:	60fb      	str	r3, [r7, #12]
    }
    CurX++;
 8008e84:	693b      	ldr	r3, [r7, #16]
 8008e86:	3301      	adds	r3, #1
 8008e88:	613b      	str	r3, [r7, #16]
  while (CurX <= CurY)
 8008e8a:	693a      	ldr	r2, [r7, #16]
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	429a      	cmp	r2, r3
 8008e90:	d999      	bls.n	8008dc6 <BSP_LCD_FillCircle+0x32>
  }

  BSP_LCD_SetTextColor(DrawProp.TextColor);
 8008e92:	4b08      	ldr	r3, [pc, #32]	; (8008eb4 <BSP_LCD_FillCircle+0x120>)
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	b29b      	uxth	r3, r3
 8008e98:	4618      	mov	r0, r3
 8008e9a:	f7ff fcd3 	bl	8008844 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 8008e9e:	887a      	ldrh	r2, [r7, #2]
 8008ea0:	88b9      	ldrh	r1, [r7, #4]
 8008ea2:	88fb      	ldrh	r3, [r7, #6]
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	f7ff fe6d 	bl	8008b84 <BSP_LCD_DrawCircle>
}
 8008eaa:	bf00      	nop
 8008eac:	3718      	adds	r7, #24
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	bd80      	pop	{r7, pc}
 8008eb2:	bf00      	nop
 8008eb4:	200100a4 	.word	0x200100a4

08008eb8 <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	af00      	add	r7, sp, #0
  lcd_drv->DisplayOn();
 8008ebc:	4b02      	ldr	r3, [pc, #8]	; (8008ec8 <BSP_LCD_DisplayOn+0x10>)
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	689b      	ldr	r3, [r3, #8]
 8008ec2:	4798      	blx	r3
}
 8008ec4:	bf00      	nop
 8008ec6:	bd80      	pop	{r7, pc}
 8008ec8:	20001680 	.word	0x20001680

08008ecc <LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGBCode: Pixel color in RGB mode (5-6-5)  
  * @retval None
  */
static void LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGBCode)
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b082      	sub	sp, #8
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	4603      	mov	r3, r0
 8008ed4:	80fb      	strh	r3, [r7, #6]
 8008ed6:	460b      	mov	r3, r1
 8008ed8:	80bb      	strh	r3, [r7, #4]
 8008eda:	4613      	mov	r3, r2
 8008edc:	807b      	strh	r3, [r7, #2]
  if(lcd_drv->WritePixel != NULL)
 8008ede:	4b08      	ldr	r3, [pc, #32]	; (8008f00 <LCD_DrawPixel+0x34>)
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	695b      	ldr	r3, [r3, #20]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d006      	beq.n	8008ef6 <LCD_DrawPixel+0x2a>
  {
    lcd_drv->WritePixel(Xpos, Ypos, RGBCode);
 8008ee8:	4b05      	ldr	r3, [pc, #20]	; (8008f00 <LCD_DrawPixel+0x34>)
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	695b      	ldr	r3, [r3, #20]
 8008eee:	887a      	ldrh	r2, [r7, #2]
 8008ef0:	88b9      	ldrh	r1, [r7, #4]
 8008ef2:	88f8      	ldrh	r0, [r7, #6]
 8008ef4:	4798      	blx	r3
  }
}
 8008ef6:	bf00      	nop
 8008ef8:	3708      	adds	r7, #8
 8008efa:	46bd      	mov	sp, r7
 8008efc:	bd80      	pop	{r7, pc}
 8008efe:	bf00      	nop
 8008f00:	20001680 	.word	0x20001680

08008f04 <LCD_DrawChar>:
  * @param  Ypos: Start column address
  * @param  pChar: Pointer to the character data
  * @retval None
  */
static void LCD_DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *pChar)
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b08a      	sub	sp, #40	; 0x28
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	4603      	mov	r3, r0
 8008f0c:	603a      	str	r2, [r7, #0]
 8008f0e:	80fb      	strh	r3, [r7, #6]
 8008f10:	460b      	mov	r3, r1
 8008f12:	80bb      	strh	r3, [r7, #4]
  uint32_t counterh = 0, counterw = 0, index = 0;
 8008f14:	2300      	movs	r3, #0
 8008f16:	627b      	str	r3, [r7, #36]	; 0x24
 8008f18:	2300      	movs	r3, #0
 8008f1a:	623b      	str	r3, [r7, #32]
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	61bb      	str	r3, [r7, #24]
  uint16_t height = 0, width = 0;
 8008f20:	2300      	movs	r3, #0
 8008f22:	82fb      	strh	r3, [r7, #22]
 8008f24:	2300      	movs	r3, #0
 8008f26:	82bb      	strh	r3, [r7, #20]
  uint8_t offset = 0;
 8008f28:	2300      	movs	r3, #0
 8008f2a:	74fb      	strb	r3, [r7, #19]
  uint8_t *pchar = NULL;
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	60fb      	str	r3, [r7, #12]
  uint32_t line = 0;
 8008f30:	2300      	movs	r3, #0
 8008f32:	61fb      	str	r3, [r7, #28]
  
 
  height = DrawProp.pFont->Height;
 8008f34:	4b63      	ldr	r3, [pc, #396]	; (80090c4 <LCD_DrawChar+0x1c0>)
 8008f36:	689b      	ldr	r3, [r3, #8]
 8008f38:	88db      	ldrh	r3, [r3, #6]
 8008f3a:	82fb      	strh	r3, [r7, #22]
  width  = DrawProp.pFont->Width;
 8008f3c:	4b61      	ldr	r3, [pc, #388]	; (80090c4 <LCD_DrawChar+0x1c0>)
 8008f3e:	689b      	ldr	r3, [r3, #8]
 8008f40:	889b      	ldrh	r3, [r3, #4]
 8008f42:	82bb      	strh	r3, [r7, #20]
  
  /* Fill bitmap header*/
  *(uint16_t *) (bitmap + 2) = (uint16_t)(height*width*2+OFFSET_BITMAP);
 8008f44:	8afa      	ldrh	r2, [r7, #22]
 8008f46:	8abb      	ldrh	r3, [r7, #20]
 8008f48:	fb12 f303 	smulbb	r3, r2, r3
 8008f4c:	b29b      	uxth	r3, r3
 8008f4e:	331b      	adds	r3, #27
 8008f50:	b29b      	uxth	r3, r3
 8008f52:	4a5d      	ldr	r2, [pc, #372]	; (80090c8 <LCD_DrawChar+0x1c4>)
 8008f54:	005b      	lsls	r3, r3, #1
 8008f56:	b29b      	uxth	r3, r3
 8008f58:	8013      	strh	r3, [r2, #0]
  *(uint16_t *) (bitmap + 4) = (uint16_t)((height*width*2+OFFSET_BITMAP)>>16);
 8008f5a:	8afb      	ldrh	r3, [r7, #22]
 8008f5c:	8aba      	ldrh	r2, [r7, #20]
 8008f5e:	fb02 f303 	mul.w	r3, r2, r3
 8008f62:	331b      	adds	r3, #27
 8008f64:	005b      	lsls	r3, r3, #1
 8008f66:	141a      	asrs	r2, r3, #16
 8008f68:	4b58      	ldr	r3, [pc, #352]	; (80090cc <LCD_DrawChar+0x1c8>)
 8008f6a:	b292      	uxth	r2, r2
 8008f6c:	801a      	strh	r2, [r3, #0]
  *(uint16_t *) (bitmap + 10) = OFFSET_BITMAP;
 8008f6e:	4b58      	ldr	r3, [pc, #352]	; (80090d0 <LCD_DrawChar+0x1cc>)
 8008f70:	2236      	movs	r2, #54	; 0x36
 8008f72:	801a      	strh	r2, [r3, #0]
  *(uint16_t *) (bitmap + 18) = (uint16_t)(width);
 8008f74:	4a57      	ldr	r2, [pc, #348]	; (80090d4 <LCD_DrawChar+0x1d0>)
 8008f76:	8abb      	ldrh	r3, [r7, #20]
 8008f78:	8013      	strh	r3, [r2, #0]
  *(uint16_t *) (bitmap + 20) = (uint16_t)((width)>>16);
 8008f7a:	8abb      	ldrh	r3, [r7, #20]
 8008f7c:	141a      	asrs	r2, r3, #16
 8008f7e:	4b56      	ldr	r3, [pc, #344]	; (80090d8 <LCD_DrawChar+0x1d4>)
 8008f80:	b292      	uxth	r2, r2
 8008f82:	801a      	strh	r2, [r3, #0]
  *(uint16_t *) (bitmap + 22) = (uint16_t)(height);
 8008f84:	4a55      	ldr	r2, [pc, #340]	; (80090dc <LCD_DrawChar+0x1d8>)
 8008f86:	8afb      	ldrh	r3, [r7, #22]
 8008f88:	8013      	strh	r3, [r2, #0]
  *(uint16_t *) (bitmap + 24) = (uint16_t)((height)>>16);
 8008f8a:	8afb      	ldrh	r3, [r7, #22]
 8008f8c:	141a      	asrs	r2, r3, #16
 8008f8e:	4b54      	ldr	r3, [pc, #336]	; (80090e0 <LCD_DrawChar+0x1dc>)
 8008f90:	b292      	uxth	r2, r2
 8008f92:	801a      	strh	r2, [r3, #0]

  offset =  8 *((width + 7)/8) -  width ;
 8008f94:	8abb      	ldrh	r3, [r7, #20]
 8008f96:	3307      	adds	r3, #7
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	da00      	bge.n	8008f9e <LCD_DrawChar+0x9a>
 8008f9c:	3307      	adds	r3, #7
 8008f9e:	10db      	asrs	r3, r3, #3
 8008fa0:	b2db      	uxtb	r3, r3
 8008fa2:	00db      	lsls	r3, r3, #3
 8008fa4:	b2da      	uxtb	r2, r3
 8008fa6:	8abb      	ldrh	r3, [r7, #20]
 8008fa8:	b2db      	uxtb	r3, r3
 8008faa:	1ad3      	subs	r3, r2, r3
 8008fac:	74fb      	strb	r3, [r7, #19]
  
  for(counterh = 0; counterh < height; counterh++)
 8008fae:	2300      	movs	r3, #0
 8008fb0:	627b      	str	r3, [r7, #36]	; 0x24
 8008fb2:	e078      	b.n	80090a6 <LCD_DrawChar+0x1a2>
  {
    pchar = ((uint8_t *)pChar + (width + 7)/8 * counterh);
 8008fb4:	8abb      	ldrh	r3, [r7, #20]
 8008fb6:	3307      	adds	r3, #7
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	da00      	bge.n	8008fbe <LCD_DrawChar+0xba>
 8008fbc:	3307      	adds	r3, #7
 8008fbe:	10db      	asrs	r3, r3, #3
 8008fc0:	461a      	mov	r2, r3
 8008fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fc4:	fb03 f302 	mul.w	r3, r3, r2
 8008fc8:	683a      	ldr	r2, [r7, #0]
 8008fca:	4413      	add	r3, r2
 8008fcc:	60fb      	str	r3, [r7, #12]
    
    if(((width + 7)/8) == 3)
 8008fce:	8abb      	ldrh	r3, [r7, #20]
 8008fd0:	3b11      	subs	r3, #17
 8008fd2:	2b07      	cmp	r3, #7
 8008fd4:	d80c      	bhi.n	8008ff0 <LCD_DrawChar+0xec>
    {
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	781b      	ldrb	r3, [r3, #0]
 8008fda:	041a      	lsls	r2, r3, #16
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	3301      	adds	r3, #1
 8008fe0:	781b      	ldrb	r3, [r3, #0]
 8008fe2:	021b      	lsls	r3, r3, #8
 8008fe4:	4313      	orrs	r3, r2
 8008fe6:	68fa      	ldr	r2, [r7, #12]
 8008fe8:	3202      	adds	r2, #2
 8008fea:	7812      	ldrb	r2, [r2, #0]
 8008fec:	4313      	orrs	r3, r2
 8008fee:	61fb      	str	r3, [r7, #28]
    }

    if(((width + 7)/8) == 2)
 8008ff0:	8abb      	ldrh	r3, [r7, #20]
 8008ff2:	3b09      	subs	r3, #9
 8008ff4:	2b07      	cmp	r3, #7
 8008ff6:	d807      	bhi.n	8009008 <LCD_DrawChar+0x104>
    {
      line =  (pchar[0]<< 8) | pchar[1];
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	781b      	ldrb	r3, [r3, #0]
 8008ffc:	021b      	lsls	r3, r3, #8
 8008ffe:	68fa      	ldr	r2, [r7, #12]
 8009000:	3201      	adds	r2, #1
 8009002:	7812      	ldrb	r2, [r2, #0]
 8009004:	4313      	orrs	r3, r2
 8009006:	61fb      	str	r3, [r7, #28]
    }
      
    if(((width + 7)/8) == 1)
 8009008:	8abb      	ldrh	r3, [r7, #20]
 800900a:	3b01      	subs	r3, #1
 800900c:	2b07      	cmp	r3, #7
 800900e:	d802      	bhi.n	8009016 <LCD_DrawChar+0x112>
    {
      line =  pchar[0];
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	781b      	ldrb	r3, [r3, #0]
 8009014:	61fb      	str	r3, [r7, #28]
    }  
    
    for (counterw = 0; counterw < width; counterw++)
 8009016:	2300      	movs	r3, #0
 8009018:	623b      	str	r3, [r7, #32]
 800901a:	e03d      	b.n	8009098 <LCD_DrawChar+0x194>
    {
      /* Image in the bitmap is written from the bottom to the top */
      /* Need to invert image in the bitmap */
      index = (((height-counterh-1)*width)+(counterw))*2+OFFSET_BITMAP;
 800901c:	8afa      	ldrh	r2, [r7, #22]
 800901e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009020:	1ad3      	subs	r3, r2, r3
 8009022:	3b01      	subs	r3, #1
 8009024:	8aba      	ldrh	r2, [r7, #20]
 8009026:	fb02 f203 	mul.w	r2, r2, r3
 800902a:	6a3b      	ldr	r3, [r7, #32]
 800902c:	4413      	add	r3, r2
 800902e:	331b      	adds	r3, #27
 8009030:	005b      	lsls	r3, r3, #1
 8009032:	61bb      	str	r3, [r7, #24]
      if(line & (1 << (width- counterw + offset- 1))) 
 8009034:	8aba      	ldrh	r2, [r7, #20]
 8009036:	6a3b      	ldr	r3, [r7, #32]
 8009038:	1ad2      	subs	r2, r2, r3
 800903a:	7cfb      	ldrb	r3, [r7, #19]
 800903c:	4413      	add	r3, r2
 800903e:	3b01      	subs	r3, #1
 8009040:	2201      	movs	r2, #1
 8009042:	fa02 f303 	lsl.w	r3, r2, r3
 8009046:	461a      	mov	r2, r3
 8009048:	69fb      	ldr	r3, [r7, #28]
 800904a:	4013      	ands	r3, r2
 800904c:	2b00      	cmp	r3, #0
 800904e:	d010      	beq.n	8009072 <LCD_DrawChar+0x16e>
      {
        bitmap[index] = (uint8_t)DrawProp.TextColor;
 8009050:	4b1c      	ldr	r3, [pc, #112]	; (80090c4 <LCD_DrawChar+0x1c0>)
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	b2d9      	uxtb	r1, r3
 8009056:	4a23      	ldr	r2, [pc, #140]	; (80090e4 <LCD_DrawChar+0x1e0>)
 8009058:	69bb      	ldr	r3, [r7, #24]
 800905a:	4413      	add	r3, r2
 800905c:	460a      	mov	r2, r1
 800905e:	701a      	strb	r2, [r3, #0]
        bitmap[index+1] = (uint8_t)(DrawProp.TextColor >> 8);
 8009060:	4b18      	ldr	r3, [pc, #96]	; (80090c4 <LCD_DrawChar+0x1c0>)
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	0a1a      	lsrs	r2, r3, #8
 8009066:	69bb      	ldr	r3, [r7, #24]
 8009068:	3301      	adds	r3, #1
 800906a:	b2d1      	uxtb	r1, r2
 800906c:	4a1d      	ldr	r2, [pc, #116]	; (80090e4 <LCD_DrawChar+0x1e0>)
 800906e:	54d1      	strb	r1, [r2, r3]
 8009070:	e00f      	b.n	8009092 <LCD_DrawChar+0x18e>
      }
      else
      {
        bitmap[index] = (uint8_t)DrawProp.BackColor;
 8009072:	4b14      	ldr	r3, [pc, #80]	; (80090c4 <LCD_DrawChar+0x1c0>)
 8009074:	685b      	ldr	r3, [r3, #4]
 8009076:	b2d9      	uxtb	r1, r3
 8009078:	4a1a      	ldr	r2, [pc, #104]	; (80090e4 <LCD_DrawChar+0x1e0>)
 800907a:	69bb      	ldr	r3, [r7, #24]
 800907c:	4413      	add	r3, r2
 800907e:	460a      	mov	r2, r1
 8009080:	701a      	strb	r2, [r3, #0]
        bitmap[index+1] = (uint8_t)(DrawProp.BackColor >> 8);
 8009082:	4b10      	ldr	r3, [pc, #64]	; (80090c4 <LCD_DrawChar+0x1c0>)
 8009084:	685b      	ldr	r3, [r3, #4]
 8009086:	0a1a      	lsrs	r2, r3, #8
 8009088:	69bb      	ldr	r3, [r7, #24]
 800908a:	3301      	adds	r3, #1
 800908c:	b2d1      	uxtb	r1, r2
 800908e:	4a15      	ldr	r2, [pc, #84]	; (80090e4 <LCD_DrawChar+0x1e0>)
 8009090:	54d1      	strb	r1, [r2, r3]
    for (counterw = 0; counterw < width; counterw++)
 8009092:	6a3b      	ldr	r3, [r7, #32]
 8009094:	3301      	adds	r3, #1
 8009096:	623b      	str	r3, [r7, #32]
 8009098:	8abb      	ldrh	r3, [r7, #20]
 800909a:	6a3a      	ldr	r2, [r7, #32]
 800909c:	429a      	cmp	r2, r3
 800909e:	d3bd      	bcc.n	800901c <LCD_DrawChar+0x118>
  for(counterh = 0; counterh < height; counterh++)
 80090a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090a2:	3301      	adds	r3, #1
 80090a4:	627b      	str	r3, [r7, #36]	; 0x24
 80090a6:	8afb      	ldrh	r3, [r7, #22]
 80090a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090aa:	429a      	cmp	r2, r3
 80090ac:	d382      	bcc.n	8008fb4 <LCD_DrawChar+0xb0>
      } 
    }
  }

  BSP_LCD_DrawBitmap(Xpos, Ypos, bitmap);
 80090ae:	88b9      	ldrh	r1, [r7, #4]
 80090b0:	88fb      	ldrh	r3, [r7, #6]
 80090b2:	4a0c      	ldr	r2, [pc, #48]	; (80090e4 <LCD_DrawChar+0x1e0>)
 80090b4:	4618      	mov	r0, r3
 80090b6:	f7ff fe21 	bl	8008cfc <BSP_LCD_DrawBitmap>
}
 80090ba:	bf00      	nop
 80090bc:	3728      	adds	r7, #40	; 0x28
 80090be:	46bd      	mov	sp, r7
 80090c0:	bd80      	pop	{r7, pc}
 80090c2:	bf00      	nop
 80090c4:	200100a4 	.word	0x200100a4
 80090c8:	20001686 	.word	0x20001686
 80090cc:	20001688 	.word	0x20001688
 80090d0:	2000168e 	.word	0x2000168e
 80090d4:	20001696 	.word	0x20001696
 80090d8:	20001698 	.word	0x20001698
 80090dc:	2000169a 	.word	0x2000169a
 80090e0:	2000169c 	.word	0x2000169c
 80090e4:	20001684 	.word	0x20001684

080090e8 <LCD_SetDisplayWindow>:
  * @param  Width: LCD window width
  * @param  Height: LCD window height  
  * @retval None
  */
static void LCD_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 80090e8:	b590      	push	{r4, r7, lr}
 80090ea:	b083      	sub	sp, #12
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	4604      	mov	r4, r0
 80090f0:	4608      	mov	r0, r1
 80090f2:	4611      	mov	r1, r2
 80090f4:	461a      	mov	r2, r3
 80090f6:	4623      	mov	r3, r4
 80090f8:	80fb      	strh	r3, [r7, #6]
 80090fa:	4603      	mov	r3, r0
 80090fc:	80bb      	strh	r3, [r7, #4]
 80090fe:	460b      	mov	r3, r1
 8009100:	807b      	strh	r3, [r7, #2]
 8009102:	4613      	mov	r3, r2
 8009104:	803b      	strh	r3, [r7, #0]
  if(lcd_drv->SetDisplayWindow != NULL)
 8009106:	4b08      	ldr	r3, [pc, #32]	; (8009128 <LCD_SetDisplayWindow+0x40>)
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	69db      	ldr	r3, [r3, #28]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d007      	beq.n	8009120 <LCD_SetDisplayWindow+0x38>
  {
    lcd_drv->SetDisplayWindow(Xpos, Ypos, Width, Height);
 8009110:	4b05      	ldr	r3, [pc, #20]	; (8009128 <LCD_SetDisplayWindow+0x40>)
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	69dc      	ldr	r4, [r3, #28]
 8009116:	883b      	ldrh	r3, [r7, #0]
 8009118:	887a      	ldrh	r2, [r7, #2]
 800911a:	88b9      	ldrh	r1, [r7, #4]
 800911c:	88f8      	ldrh	r0, [r7, #6]
 800911e:	47a0      	blx	r4
  }  
}
 8009120:	bf00      	nop
 8009122:	370c      	adds	r7, #12
 8009124:	46bd      	mov	sp, r7
 8009126:	bd90      	pop	{r4, r7, pc}
 8009128:	20001680 	.word	0x20001680

0800912c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800912c:	b480      	push	{r7}
 800912e:	b083      	sub	sp, #12
 8009130:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009132:	2300      	movs	r3, #0
 8009134:	607b      	str	r3, [r7, #4]
 8009136:	4b10      	ldr	r3, [pc, #64]	; (8009178 <HAL_MspInit+0x4c>)
 8009138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800913a:	4a0f      	ldr	r2, [pc, #60]	; (8009178 <HAL_MspInit+0x4c>)
 800913c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009140:	6453      	str	r3, [r2, #68]	; 0x44
 8009142:	4b0d      	ldr	r3, [pc, #52]	; (8009178 <HAL_MspInit+0x4c>)
 8009144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009146:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800914a:	607b      	str	r3, [r7, #4]
 800914c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800914e:	2300      	movs	r3, #0
 8009150:	603b      	str	r3, [r7, #0]
 8009152:	4b09      	ldr	r3, [pc, #36]	; (8009178 <HAL_MspInit+0x4c>)
 8009154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009156:	4a08      	ldr	r2, [pc, #32]	; (8009178 <HAL_MspInit+0x4c>)
 8009158:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800915c:	6413      	str	r3, [r2, #64]	; 0x40
 800915e:	4b06      	ldr	r3, [pc, #24]	; (8009178 <HAL_MspInit+0x4c>)
 8009160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009162:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009166:	603b      	str	r3, [r7, #0]
 8009168:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800916a:	bf00      	nop
 800916c:	370c      	adds	r7, #12
 800916e:	46bd      	mov	sp, r7
 8009170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009174:	4770      	bx	lr
 8009176:	bf00      	nop
 8009178:	40023800 	.word	0x40023800

0800917c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800917c:	b480      	push	{r7}
 800917e:	b085      	sub	sp, #20
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	4a0b      	ldr	r2, [pc, #44]	; (80091b8 <HAL_CRC_MspInit+0x3c>)
 800918a:	4293      	cmp	r3, r2
 800918c:	d10d      	bne.n	80091aa <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800918e:	2300      	movs	r3, #0
 8009190:	60fb      	str	r3, [r7, #12]
 8009192:	4b0a      	ldr	r3, [pc, #40]	; (80091bc <HAL_CRC_MspInit+0x40>)
 8009194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009196:	4a09      	ldr	r2, [pc, #36]	; (80091bc <HAL_CRC_MspInit+0x40>)
 8009198:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800919c:	6313      	str	r3, [r2, #48]	; 0x30
 800919e:	4b07      	ldr	r3, [pc, #28]	; (80091bc <HAL_CRC_MspInit+0x40>)
 80091a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80091a6:	60fb      	str	r3, [r7, #12]
 80091a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80091aa:	bf00      	nop
 80091ac:	3714      	adds	r7, #20
 80091ae:	46bd      	mov	sp, r7
 80091b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b4:	4770      	bx	lr
 80091b6:	bf00      	nop
 80091b8:	40023000 	.word	0x40023000
 80091bc:	40023800 	.word	0x40023800

080091c0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b088      	sub	sp, #32
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
	  GPIO_InitTypeDef GPIO_InitStruct;
	  if(hspi->Instance==SPI3)
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	4a1a      	ldr	r2, [pc, #104]	; (8009238 <HAL_SPI_MspInit+0x78>)
 80091ce:	4293      	cmp	r3, r2
 80091d0:	d12e      	bne.n	8009230 <HAL_SPI_MspInit+0x70>
	  {
	  /* USER CODE BEGIN SPI3_MspInit 0 */

	  /* USER CODE END SPI3_MspInit 0 */
	    /* Peripheral clock enable */
	    __HAL_RCC_SPI3_CLK_ENABLE();
 80091d2:	2300      	movs	r3, #0
 80091d4:	60bb      	str	r3, [r7, #8]
 80091d6:	4b19      	ldr	r3, [pc, #100]	; (800923c <HAL_SPI_MspInit+0x7c>)
 80091d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091da:	4a18      	ldr	r2, [pc, #96]	; (800923c <HAL_SPI_MspInit+0x7c>)
 80091dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80091e0:	6413      	str	r3, [r2, #64]	; 0x40
 80091e2:	4b16      	ldr	r3, [pc, #88]	; (800923c <HAL_SPI_MspInit+0x7c>)
 80091e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80091ea:	60bb      	str	r3, [r7, #8]
 80091ec:	68bb      	ldr	r3, [r7, #8]
	    /**SPI3 GPIO Configuration
	    PC12     ------> SPI3_MOSI
	    PB3     ------> SPI3_SCK
	    PB4     ------> SPI3_MISO
	    */
	    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80091ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80091f2:	60fb      	str	r3, [r7, #12]
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80091f4:	2302      	movs	r3, #2
 80091f6:	613b      	str	r3, [r7, #16]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80091f8:	2300      	movs	r3, #0
 80091fa:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80091fc:	2303      	movs	r3, #3
 80091fe:	61bb      	str	r3, [r7, #24]
	    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8009200:	2306      	movs	r3, #6
 8009202:	61fb      	str	r3, [r7, #28]
	    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009204:	f107 030c 	add.w	r3, r7, #12
 8009208:	4619      	mov	r1, r3
 800920a:	480d      	ldr	r0, [pc, #52]	; (8009240 <HAL_SPI_MspInit+0x80>)
 800920c:	f7fb fda8 	bl	8004d60 <HAL_GPIO_Init>

	    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8009210:	2318      	movs	r3, #24
 8009212:	60fb      	str	r3, [r7, #12]
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009214:	2302      	movs	r3, #2
 8009216:	613b      	str	r3, [r7, #16]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009218:	2300      	movs	r3, #0
 800921a:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800921c:	2303      	movs	r3, #3
 800921e:	61bb      	str	r3, [r7, #24]
	    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8009220:	2306      	movs	r3, #6
 8009222:	61fb      	str	r3, [r7, #28]
	    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009224:	f107 030c 	add.w	r3, r7, #12
 8009228:	4619      	mov	r1, r3
 800922a:	4806      	ldr	r0, [pc, #24]	; (8009244 <HAL_SPI_MspInit+0x84>)
 800922c:	f7fb fd98 	bl	8004d60 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8009230:	bf00      	nop
 8009232:	3720      	adds	r7, #32
 8009234:	46bd      	mov	sp, r7
 8009236:	bd80      	pop	{r7, pc}
 8009238:	40003c00 	.word	0x40003c00
 800923c:	40023800 	.word	0x40023800
 8009240:	40020800 	.word	0x40020800
 8009244:	40020400 	.word	0x40020400

08009248 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8009248:	b580      	push	{r7, lr}
 800924a:	b088      	sub	sp, #32
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
	 GPIO_InitTypeDef GPIO_InitStruct;
	  if(huart->Instance==USART1)
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	4a12      	ldr	r2, [pc, #72]	; (80092a0 <HAL_UART_MspInit+0x58>)
 8009256:	4293      	cmp	r3, r2
 8009258:	d11e      	bne.n	8009298 <HAL_UART_MspInit+0x50>
	  {
	  /* USER CODE BEGIN USART1_MspInit 0 */

	  /* USER CODE END USART1_MspInit 0 */
	    /* Peripheral clock enable */
	    __HAL_RCC_USART1_CLK_ENABLE();
 800925a:	2300      	movs	r3, #0
 800925c:	60bb      	str	r3, [r7, #8]
 800925e:	4b11      	ldr	r3, [pc, #68]	; (80092a4 <HAL_UART_MspInit+0x5c>)
 8009260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009262:	4a10      	ldr	r2, [pc, #64]	; (80092a4 <HAL_UART_MspInit+0x5c>)
 8009264:	f043 0310 	orr.w	r3, r3, #16
 8009268:	6453      	str	r3, [r2, #68]	; 0x44
 800926a:	4b0e      	ldr	r3, [pc, #56]	; (80092a4 <HAL_UART_MspInit+0x5c>)
 800926c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800926e:	f003 0310 	and.w	r3, r3, #16
 8009272:	60bb      	str	r3, [r7, #8]
 8009274:	68bb      	ldr	r3, [r7, #8]

	    /**USART1 GPIO Configuration
	    PA9     ------> USART1_TX
	    PA10     ------> USART1_RX
	    */
	    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8009276:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800927a:	60fb      	str	r3, [r7, #12]
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800927c:	2302      	movs	r3, #2
 800927e:	613b      	str	r3, [r7, #16]
	    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009280:	2301      	movs	r3, #1
 8009282:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009284:	2303      	movs	r3, #3
 8009286:	61bb      	str	r3, [r7, #24]
	    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8009288:	2307      	movs	r3, #7
 800928a:	61fb      	str	r3, [r7, #28]
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800928c:	f107 030c 	add.w	r3, r7, #12
 8009290:	4619      	mov	r1, r3
 8009292:	4805      	ldr	r0, [pc, #20]	; (80092a8 <HAL_UART_MspInit+0x60>)
 8009294:	f7fb fd64 	bl	8004d60 <HAL_GPIO_Init>
	  /* USER CODE BEGIN USART1_MspInit 1 */

	  /* USER CODE END USART1_MspInit 1 */
	  }

}
 8009298:	bf00      	nop
 800929a:	3720      	adds	r7, #32
 800929c:	46bd      	mov	sp, r7
 800929e:	bd80      	pop	{r7, pc}
 80092a0:	40011000 	.word	0x40011000
 80092a4:	40023800 	.word	0x40023800
 80092a8:	40020000 	.word	0x40020000

080092ac <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b086      	sub	sp, #24
 80092b0:	af00      	add	r7, sp, #0
	 GPIO_InitTypeDef GPIO_InitStruct;
	  if (FSMC_Initialized) {
 80092b2:	4b24      	ldr	r3, [pc, #144]	; (8009344 <HAL_FSMC_MspInit+0x98>)
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d140      	bne.n	800933c <HAL_FSMC_MspInit+0x90>
	    return;
	  }
	  FSMC_Initialized = 1;
 80092ba:	4b22      	ldr	r3, [pc, #136]	; (8009344 <HAL_FSMC_MspInit+0x98>)
 80092bc:	2201      	movs	r2, #1
 80092be:	601a      	str	r2, [r3, #0]
	  /* Peripheral clock enable */
	  __HAL_RCC_FSMC_CLK_ENABLE();
 80092c0:	2300      	movs	r3, #0
 80092c2:	603b      	str	r3, [r7, #0]
 80092c4:	4b20      	ldr	r3, [pc, #128]	; (8009348 <HAL_FSMC_MspInit+0x9c>)
 80092c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092c8:	4a1f      	ldr	r2, [pc, #124]	; (8009348 <HAL_FSMC_MspInit+0x9c>)
 80092ca:	f043 0301 	orr.w	r3, r3, #1
 80092ce:	6393      	str	r3, [r2, #56]	; 0x38
 80092d0:	4b1d      	ldr	r3, [pc, #116]	; (8009348 <HAL_FSMC_MspInit+0x9c>)
 80092d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092d4:	f003 0301 	and.w	r3, r3, #1
 80092d8:	603b      	str	r3, [r7, #0]
 80092da:	683b      	ldr	r3, [r7, #0]
	  PD4   ------> FSMC_NOE
	  PD5   ------> FSMC_NWE
	  PD7   ------> FSMC_NE1
	  */
	  /* GPIO_InitStruct */
	  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80092dc:	f64f 7380 	movw	r3, #65408	; 0xff80
 80092e0:	607b      	str	r3, [r7, #4]
	                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
	                          |GPIO_PIN_15;
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80092e2:	2302      	movs	r3, #2
 80092e4:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80092e6:	2300      	movs	r3, #0
 80092e8:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80092ea:	2303      	movs	r3, #3
 80092ec:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80092ee:	230c      	movs	r3, #12
 80092f0:	617b      	str	r3, [r7, #20]

	  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80092f2:	1d3b      	adds	r3, r7, #4
 80092f4:	4619      	mov	r1, r3
 80092f6:	4815      	ldr	r0, [pc, #84]	; (800934c <HAL_FSMC_MspInit+0xa0>)
 80092f8:	f7fb fd32 	bl	8004d60 <HAL_GPIO_Init>

	  /* GPIO_InitStruct */
	  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 80092fc:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8009300:	607b      	str	r3, [r7, #4]
	                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
	                          |GPIO_PIN_5|GPIO_PIN_7;
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009302:	2302      	movs	r3, #2
 8009304:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009306:	2300      	movs	r3, #0
 8009308:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800930a:	2303      	movs	r3, #3
 800930c:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 800930e:	230c      	movs	r3, #12
 8009310:	617b      	str	r3, [r7, #20]

	  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8009312:	1d3b      	adds	r3, r7, #4
 8009314:	4619      	mov	r1, r3
 8009316:	480e      	ldr	r0, [pc, #56]	; (8009350 <HAL_FSMC_MspInit+0xa4>)
 8009318:	f7fb fd22 	bl	8004d60 <HAL_GPIO_Init>

	  /* GPIO_InitStruct */
	  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800931c:	2320      	movs	r3, #32
 800931e:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009320:	2302      	movs	r3, #2
 8009322:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009324:	2300      	movs	r3, #0
 8009326:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009328:	2303      	movs	r3, #3
 800932a:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 800932c:	230c      	movs	r3, #12
 800932e:	617b      	str	r3, [r7, #20]

	  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8009330:	1d3b      	adds	r3, r7, #4
 8009332:	4619      	mov	r1, r3
 8009334:	4807      	ldr	r0, [pc, #28]	; (8009354 <HAL_FSMC_MspInit+0xa8>)
 8009336:	f7fb fd13 	bl	8004d60 <HAL_GPIO_Init>
 800933a:	e000      	b.n	800933e <HAL_FSMC_MspInit+0x92>
	    return;
 800933c:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 800933e:	3718      	adds	r7, #24
 8009340:	46bd      	mov	sp, r7
 8009342:	bd80      	pop	{r7, pc}
 8009344:	200019ec 	.word	0x200019ec
 8009348:	40023800 	.word	0x40023800
 800934c:	40021000 	.word	0x40021000
 8009350:	40020c00 	.word	0x40020c00
 8009354:	40021800 	.word	0x40021800

08009358 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8009358:	b580      	push	{r7, lr}
 800935a:	b082      	sub	sp, #8
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8009360:	f7ff ffa4 	bl	80092ac <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8009364:	bf00      	nop
 8009366:	3708      	adds	r7, #8
 8009368:	46bd      	mov	sp, r7
 800936a:	bd80      	pop	{r7, pc}

0800936c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800936c:	b480      	push	{r7}
 800936e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8009370:	bf00      	nop
 8009372:	46bd      	mov	sp, r7
 8009374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009378:	4770      	bx	lr

0800937a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800937a:	b480      	push	{r7}
 800937c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800937e:	e7fe      	b.n	800937e <HardFault_Handler+0x4>

08009380 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009380:	b480      	push	{r7}
 8009382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8009384:	e7fe      	b.n	8009384 <MemManage_Handler+0x4>

08009386 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8009386:	b480      	push	{r7}
 8009388:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800938a:	e7fe      	b.n	800938a <BusFault_Handler+0x4>

0800938c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800938c:	b480      	push	{r7}
 800938e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8009390:	e7fe      	b.n	8009390 <UsageFault_Handler+0x4>

08009392 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8009392:	b480      	push	{r7}
 8009394:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8009396:	bf00      	nop
 8009398:	46bd      	mov	sp, r7
 800939a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939e:	4770      	bx	lr

080093a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80093a0:	b480      	push	{r7}
 80093a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80093a4:	bf00      	nop
 80093a6:	46bd      	mov	sp, r7
 80093a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ac:	4770      	bx	lr

080093ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80093ae:	b480      	push	{r7}
 80093b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80093b2:	bf00      	nop
 80093b4:	46bd      	mov	sp, r7
 80093b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ba:	4770      	bx	lr

080093bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80093c0:	f7fb fb48 	bl	8004a54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80093c4:	bf00      	nop
 80093c6:	bd80      	pop	{r7, pc}

080093c8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80093c8:	b580      	push	{r7, lr}
 80093ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80093cc:	4802      	ldr	r0, [pc, #8]	; (80093d8 <USART1_IRQHandler+0x10>)
 80093ce:	f7fd f91b 	bl	8006608 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80093d2:	bf00      	nop
 80093d4:	bd80      	pop	{r7, pc}
 80093d6:	bf00      	nop
 80093d8:	20010064 	.word	0x20010064

080093dc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b086      	sub	sp, #24
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	60f8      	str	r0, [r7, #12]
 80093e4:	60b9      	str	r1, [r7, #8]
 80093e6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80093e8:	2300      	movs	r3, #0
 80093ea:	617b      	str	r3, [r7, #20]
 80093ec:	e00a      	b.n	8009404 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80093ee:	f3af 8000 	nop.w
 80093f2:	4601      	mov	r1, r0
 80093f4:	68bb      	ldr	r3, [r7, #8]
 80093f6:	1c5a      	adds	r2, r3, #1
 80093f8:	60ba      	str	r2, [r7, #8]
 80093fa:	b2ca      	uxtb	r2, r1
 80093fc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80093fe:	697b      	ldr	r3, [r7, #20]
 8009400:	3301      	adds	r3, #1
 8009402:	617b      	str	r3, [r7, #20]
 8009404:	697a      	ldr	r2, [r7, #20]
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	429a      	cmp	r2, r3
 800940a:	dbf0      	blt.n	80093ee <_read+0x12>
	}

return len;
 800940c:	687b      	ldr	r3, [r7, #4]
}
 800940e:	4618      	mov	r0, r3
 8009410:	3718      	adds	r7, #24
 8009412:	46bd      	mov	sp, r7
 8009414:	bd80      	pop	{r7, pc}

08009416 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8009416:	b580      	push	{r7, lr}
 8009418:	b086      	sub	sp, #24
 800941a:	af00      	add	r7, sp, #0
 800941c:	60f8      	str	r0, [r7, #12]
 800941e:	60b9      	str	r1, [r7, #8]
 8009420:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009422:	2300      	movs	r3, #0
 8009424:	617b      	str	r3, [r7, #20]
 8009426:	e009      	b.n	800943c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8009428:	68bb      	ldr	r3, [r7, #8]
 800942a:	1c5a      	adds	r2, r3, #1
 800942c:	60ba      	str	r2, [r7, #8]
 800942e:	781b      	ldrb	r3, [r3, #0]
 8009430:	4618      	mov	r0, r3
 8009432:	f7fe ff41 	bl	80082b8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009436:	697b      	ldr	r3, [r7, #20]
 8009438:	3301      	adds	r3, #1
 800943a:	617b      	str	r3, [r7, #20]
 800943c:	697a      	ldr	r2, [r7, #20]
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	429a      	cmp	r2, r3
 8009442:	dbf1      	blt.n	8009428 <_write+0x12>
	}
	return len;
 8009444:	687b      	ldr	r3, [r7, #4]
}
 8009446:	4618      	mov	r0, r3
 8009448:	3718      	adds	r7, #24
 800944a:	46bd      	mov	sp, r7
 800944c:	bd80      	pop	{r7, pc}

0800944e <_close>:

int _close(int file)
{
 800944e:	b480      	push	{r7}
 8009450:	b083      	sub	sp, #12
 8009452:	af00      	add	r7, sp, #0
 8009454:	6078      	str	r0, [r7, #4]
	return -1;
 8009456:	f04f 33ff 	mov.w	r3, #4294967295
}
 800945a:	4618      	mov	r0, r3
 800945c:	370c      	adds	r7, #12
 800945e:	46bd      	mov	sp, r7
 8009460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009464:	4770      	bx	lr

08009466 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8009466:	b480      	push	{r7}
 8009468:	b083      	sub	sp, #12
 800946a:	af00      	add	r7, sp, #0
 800946c:	6078      	str	r0, [r7, #4]
 800946e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8009470:	683b      	ldr	r3, [r7, #0]
 8009472:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8009476:	605a      	str	r2, [r3, #4]
	return 0;
 8009478:	2300      	movs	r3, #0
}
 800947a:	4618      	mov	r0, r3
 800947c:	370c      	adds	r7, #12
 800947e:	46bd      	mov	sp, r7
 8009480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009484:	4770      	bx	lr

08009486 <_isatty>:

int _isatty(int file)
{
 8009486:	b480      	push	{r7}
 8009488:	b083      	sub	sp, #12
 800948a:	af00      	add	r7, sp, #0
 800948c:	6078      	str	r0, [r7, #4]
	return 1;
 800948e:	2301      	movs	r3, #1
}
 8009490:	4618      	mov	r0, r3
 8009492:	370c      	adds	r7, #12
 8009494:	46bd      	mov	sp, r7
 8009496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949a:	4770      	bx	lr

0800949c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800949c:	b480      	push	{r7}
 800949e:	b085      	sub	sp, #20
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	60f8      	str	r0, [r7, #12]
 80094a4:	60b9      	str	r1, [r7, #8]
 80094a6:	607a      	str	r2, [r7, #4]
	return 0;
 80094a8:	2300      	movs	r3, #0
}
 80094aa:	4618      	mov	r0, r3
 80094ac:	3714      	adds	r7, #20
 80094ae:	46bd      	mov	sp, r7
 80094b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b4:	4770      	bx	lr
	...

080094b8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b084      	sub	sp, #16
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80094c0:	4b11      	ldr	r3, [pc, #68]	; (8009508 <_sbrk+0x50>)
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d102      	bne.n	80094ce <_sbrk+0x16>
		heap_end = &end;
 80094c8:	4b0f      	ldr	r3, [pc, #60]	; (8009508 <_sbrk+0x50>)
 80094ca:	4a10      	ldr	r2, [pc, #64]	; (800950c <_sbrk+0x54>)
 80094cc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80094ce:	4b0e      	ldr	r3, [pc, #56]	; (8009508 <_sbrk+0x50>)
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80094d4:	4b0c      	ldr	r3, [pc, #48]	; (8009508 <_sbrk+0x50>)
 80094d6:	681a      	ldr	r2, [r3, #0]
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	4413      	add	r3, r2
 80094dc:	466a      	mov	r2, sp
 80094de:	4293      	cmp	r3, r2
 80094e0:	d907      	bls.n	80094f2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80094e2:	f000 fd1b 	bl	8009f1c <__errno>
 80094e6:	4602      	mov	r2, r0
 80094e8:	230c      	movs	r3, #12
 80094ea:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80094ec:	f04f 33ff 	mov.w	r3, #4294967295
 80094f0:	e006      	b.n	8009500 <_sbrk+0x48>
	}

	heap_end += incr;
 80094f2:	4b05      	ldr	r3, [pc, #20]	; (8009508 <_sbrk+0x50>)
 80094f4:	681a      	ldr	r2, [r3, #0]
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	4413      	add	r3, r2
 80094fa:	4a03      	ldr	r2, [pc, #12]	; (8009508 <_sbrk+0x50>)
 80094fc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80094fe:	68fb      	ldr	r3, [r7, #12]
}
 8009500:	4618      	mov	r0, r3
 8009502:	3710      	adds	r7, #16
 8009504:	46bd      	mov	sp, r7
 8009506:	bd80      	pop	{r7, pc}
 8009508:	200019f0 	.word	0x200019f0
 800950c:	20010100 	.word	0x20010100

08009510 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8009510:	b480      	push	{r7}
 8009512:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8009514:	4b16      	ldr	r3, [pc, #88]	; (8009570 <SystemInit+0x60>)
 8009516:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800951a:	4a15      	ldr	r2, [pc, #84]	; (8009570 <SystemInit+0x60>)
 800951c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009520:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8009524:	4b13      	ldr	r3, [pc, #76]	; (8009574 <SystemInit+0x64>)
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	4a12      	ldr	r2, [pc, #72]	; (8009574 <SystemInit+0x64>)
 800952a:	f043 0301 	orr.w	r3, r3, #1
 800952e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8009530:	4b10      	ldr	r3, [pc, #64]	; (8009574 <SystemInit+0x64>)
 8009532:	2200      	movs	r2, #0
 8009534:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8009536:	4b0f      	ldr	r3, [pc, #60]	; (8009574 <SystemInit+0x64>)
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	4a0e      	ldr	r2, [pc, #56]	; (8009574 <SystemInit+0x64>)
 800953c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8009540:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009544:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8009546:	4b0b      	ldr	r3, [pc, #44]	; (8009574 <SystemInit+0x64>)
 8009548:	4a0b      	ldr	r2, [pc, #44]	; (8009578 <SystemInit+0x68>)
 800954a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800954c:	4b09      	ldr	r3, [pc, #36]	; (8009574 <SystemInit+0x64>)
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	4a08      	ldr	r2, [pc, #32]	; (8009574 <SystemInit+0x64>)
 8009552:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009556:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8009558:	4b06      	ldr	r3, [pc, #24]	; (8009574 <SystemInit+0x64>)
 800955a:	2200      	movs	r2, #0
 800955c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800955e:	4b04      	ldr	r3, [pc, #16]	; (8009570 <SystemInit+0x60>)
 8009560:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8009564:	609a      	str	r2, [r3, #8]
#endif
}
 8009566:	bf00      	nop
 8009568:	46bd      	mov	sp, r7
 800956a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956e:	4770      	bx	lr
 8009570:	e000ed00 	.word	0xe000ed00
 8009574:	40023800 	.word	0x40023800
 8009578:	24003010 	.word	0x24003010

0800957c <DelayUS>:
* Output         : None
* Return         : None
* Attention      : None
*******************************************************************************/
void DelayUS(uint32_t cnt)
{
 800957c:	b480      	push	{r7}
 800957e:	b085      	sub	sp, #20
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
  uint32_t i;
  i = cnt * 4;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	009b      	lsls	r3, r3, #2
 8009588:	60fb      	str	r3, [r7, #12]
  while(i--);
 800958a:	bf00      	nop
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	1e5a      	subs	r2, r3, #1
 8009590:	60fa      	str	r2, [r7, #12]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d1fa      	bne.n	800958c <DelayUS+0x10>
}
 8009596:	bf00      	nop
 8009598:	3714      	adds	r7, #20
 800959a:	46bd      	mov	sp, r7
 800959c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a0:	4770      	bx	lr
	...

080095a4 <WR_CMD>:
* Output         : None
* Return         : None
* Attention      : None
*******************************************************************************/
static void WR_CMD (uint8_t cmd)  
{ 
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b082      	sub	sp, #8
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	4603      	mov	r3, r0
 80095ac:	71fb      	strb	r3, [r7, #7]
  HAL_SPI_Transmit(&TP_hspi,&cmd,1,1000);
 80095ae:	1df9      	adds	r1, r7, #7
 80095b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80095b4:	2201      	movs	r2, #1
 80095b6:	4803      	ldr	r0, [pc, #12]	; (80095c4 <WR_CMD+0x20>)
 80095b8:	f7fc fa0c 	bl	80059d4 <HAL_SPI_Transmit>
} 
 80095bc:	bf00      	nop
 80095be:	3708      	adds	r7, #8
 80095c0:	46bd      	mov	sp, r7
 80095c2:	bd80      	pop	{r7, pc}
 80095c4:	2001000c 	.word	0x2001000c

080095c8 <RD_AD>:
* Output         : None
* Return         : 
* Attention      : None
*******************************************************************************/
static int RD_AD(void)  
{ 
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b082      	sub	sp, #8
 80095cc:	af00      	add	r7, sp, #0
  uint8_t buf[2];
  int value;
  HAL_SPI_Receive(&TP_hspi,buf,2,1000);
 80095ce:	4639      	mov	r1, r7
 80095d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80095d4:	2202      	movs	r2, #2
 80095d6:	4809      	ldr	r0, [pc, #36]	; (80095fc <RD_AD+0x34>)
 80095d8:	f7fc fb30 	bl	8005c3c <HAL_SPI_Receive>
  value = (uint16_t)((buf[0] << 8) + buf[1]) >> 3;
 80095dc:	783b      	ldrb	r3, [r7, #0]
 80095de:	b29b      	uxth	r3, r3
 80095e0:	021b      	lsls	r3, r3, #8
 80095e2:	b29a      	uxth	r2, r3
 80095e4:	787b      	ldrb	r3, [r7, #1]
 80095e6:	b29b      	uxth	r3, r3
 80095e8:	4413      	add	r3, r2
 80095ea:	b29b      	uxth	r3, r3
 80095ec:	08db      	lsrs	r3, r3, #3
 80095ee:	b29b      	uxth	r3, r3
 80095f0:	607b      	str	r3, [r7, #4]
  return value;
 80095f2:	687b      	ldr	r3, [r7, #4]
} 
 80095f4:	4618      	mov	r0, r3
 80095f6:	3708      	adds	r7, #8
 80095f8:	46bd      	mov	sp, r7
 80095fa:	bd80      	pop	{r7, pc}
 80095fc:	2001000c 	.word	0x2001000c

08009600 <Read_X>:
* Output         : None
* Return         : 
* Attention      : None
*******************************************************************************/
int Read_X(void)  
{  
 8009600:	b580      	push	{r7, lr}
 8009602:	b082      	sub	sp, #8
 8009604:	af00      	add	r7, sp, #0
  int i; 
  TP_CS(0); 
 8009606:	2200      	movs	r2, #0
 8009608:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800960c:	480c      	ldr	r0, [pc, #48]	; (8009640 <Read_X+0x40>)
 800960e:	f7fb fd59 	bl	80050c4 <HAL_GPIO_WritePin>
  DelayUS(1); 
 8009612:	2001      	movs	r0, #1
 8009614:	f7ff ffb2 	bl	800957c <DelayUS>
  WR_CMD(CHX); 
 8009618:	2090      	movs	r0, #144	; 0x90
 800961a:	f7ff ffc3 	bl	80095a4 <WR_CMD>
  DelayUS(1); 
 800961e:	2001      	movs	r0, #1
 8009620:	f7ff ffac 	bl	800957c <DelayUS>
  i=RD_AD(); 
 8009624:	f7ff ffd0 	bl	80095c8 <RD_AD>
 8009628:	6078      	str	r0, [r7, #4]
  TP_CS(1); 
 800962a:	2201      	movs	r2, #1
 800962c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009630:	4803      	ldr	r0, [pc, #12]	; (8009640 <Read_X+0x40>)
 8009632:	f7fb fd47 	bl	80050c4 <HAL_GPIO_WritePin>
  return i;    
 8009636:	687b      	ldr	r3, [r7, #4]
} 
 8009638:	4618      	mov	r0, r3
 800963a:	3708      	adds	r7, #8
 800963c:	46bd      	mov	sp, r7
 800963e:	bd80      	pop	{r7, pc}
 8009640:	40020000 	.word	0x40020000

08009644 <Read_Y>:
* Output         : None
* Return         : 
* Attention      : None
*******************************************************************************/
int Read_Y(void)  
{  
 8009644:	b580      	push	{r7, lr}
 8009646:	b082      	sub	sp, #8
 8009648:	af00      	add	r7, sp, #0
  int i; 
  TP_CS(0); 
 800964a:	2200      	movs	r2, #0
 800964c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009650:	480c      	ldr	r0, [pc, #48]	; (8009684 <Read_Y+0x40>)
 8009652:	f7fb fd37 	bl	80050c4 <HAL_GPIO_WritePin>
  DelayUS(1); 
 8009656:	2001      	movs	r0, #1
 8009658:	f7ff ff90 	bl	800957c <DelayUS>
  WR_CMD(CHY); 
 800965c:	20d0      	movs	r0, #208	; 0xd0
 800965e:	f7ff ffa1 	bl	80095a4 <WR_CMD>
  DelayUS(1); 
 8009662:	2001      	movs	r0, #1
 8009664:	f7ff ff8a 	bl	800957c <DelayUS>
  i=RD_AD(); 
 8009668:	f7ff ffae 	bl	80095c8 <RD_AD>
 800966c:	6078      	str	r0, [r7, #4]
  TP_CS(1); 
 800966e:	2201      	movs	r2, #1
 8009670:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009674:	4803      	ldr	r0, [pc, #12]	; (8009684 <Read_Y+0x40>)
 8009676:	f7fb fd25 	bl	80050c4 <HAL_GPIO_WritePin>
  return i;     
 800967a:	687b      	ldr	r3, [r7, #4]
} 
 800967c:	4618      	mov	r0, r3
 800967e:	3708      	adds	r7, #8
 8009680:	46bd      	mov	sp, r7
 8009682:	bd80      	pop	{r7, pc}
 8009684:	40020000 	.word	0x40020000

08009688 <TP_GetAdXY>:
* Output         : None
* Return         : 
* Attention      : None
*******************************************************************************/
void TP_GetAdXY(int *x,int *y)  
{ 
 8009688:	b580      	push	{r7, lr}
 800968a:	b084      	sub	sp, #16
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
 8009690:	6039      	str	r1, [r7, #0]
  int adx,ady; 
  adx=Read_X(); 
 8009692:	f7ff ffb5 	bl	8009600 <Read_X>
 8009696:	60f8      	str	r0, [r7, #12]
  DelayUS(1); 
 8009698:	2001      	movs	r0, #1
 800969a:	f7ff ff6f 	bl	800957c <DelayUS>
  ady=Read_Y(); 
 800969e:	f7ff ffd1 	bl	8009644 <Read_Y>
 80096a2:	60b8      	str	r0, [r7, #8]
  *x=adx; 
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	68fa      	ldr	r2, [r7, #12]
 80096a8:	601a      	str	r2, [r3, #0]
  *y=ady; 
 80096aa:	683b      	ldr	r3, [r7, #0]
 80096ac:	68ba      	ldr	r2, [r7, #8]
 80096ae:	601a      	str	r2, [r3, #0]
} 
 80096b0:	bf00      	nop
 80096b2:	3710      	adds	r7, #16
 80096b4:	46bd      	mov	sp, r7
 80096b6:	bd80      	pop	{r7, pc}

080096b8 <DrawCross>:
* Output         : None
* Return         : None
* Attention      : None
*******************************************************************************/
void DrawCross(uint16_t Xpos,uint16_t Ypos)
{
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b082      	sub	sp, #8
 80096bc:	af00      	add	r7, sp, #0
 80096be:	4603      	mov	r3, r0
 80096c0:	460a      	mov	r2, r1
 80096c2:	80fb      	strh	r3, [r7, #6]
 80096c4:	4613      	mov	r3, r2
 80096c6:	80bb      	strh	r3, [r7, #4]
  BSP_LCD_DrawHLine(Xpos-13, Ypos, 10);
 80096c8:	88fb      	ldrh	r3, [r7, #6]
 80096ca:	3b0d      	subs	r3, #13
 80096cc:	b29b      	uxth	r3, r3
 80096ce:	88b9      	ldrh	r1, [r7, #4]
 80096d0:	220a      	movs	r2, #10
 80096d2:	4618      	mov	r0, r3
 80096d4:	f7ff f9e2 	bl	8008a9c <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(Xpos+4, Ypos, 10);
 80096d8:	88fb      	ldrh	r3, [r7, #6]
 80096da:	3304      	adds	r3, #4
 80096dc:	b29b      	uxth	r3, r3
 80096de:	88b9      	ldrh	r1, [r7, #4]
 80096e0:	220a      	movs	r2, #10
 80096e2:	4618      	mov	r0, r3
 80096e4:	f7ff f9da 	bl	8008a9c <BSP_LCD_DrawHLine>
  BSP_LCD_DrawVLine(Xpos, Ypos-13, 10);
 80096e8:	88bb      	ldrh	r3, [r7, #4]
 80096ea:	3b0d      	subs	r3, #13
 80096ec:	b299      	uxth	r1, r3
 80096ee:	88fb      	ldrh	r3, [r7, #6]
 80096f0:	220a      	movs	r2, #10
 80096f2:	4618      	mov	r0, r3
 80096f4:	f7ff fa0c 	bl	8008b10 <BSP_LCD_DrawVLine>
  BSP_LCD_DrawVLine(Xpos, Ypos+4, 10);  
 80096f8:	88bb      	ldrh	r3, [r7, #4]
 80096fa:	3304      	adds	r3, #4
 80096fc:	b299      	uxth	r1, r3
 80096fe:	88fb      	ldrh	r3, [r7, #6]
 8009700:	220a      	movs	r2, #10
 8009702:	4618      	mov	r0, r3
 8009704:	f7ff fa04 	bl	8008b10 <BSP_LCD_DrawVLine>

}  
 8009708:	bf00      	nop
 800970a:	3708      	adds	r7, #8
 800970c:	46bd      	mov	sp, r7
 800970e:	bd80      	pop	{r7, pc}

08009710 <Read_Ads7846>:
* Output         : None
* Return         : Coordinate *
* Attention      : None
*******************************************************************************/
Coordinate *Read_Ads7846(void)
{
 8009710:	b580      	push	{r7, lr}
 8009712:	b09c      	sub	sp, #112	; 0x70
 8009714:	af00      	add	r7, sp, #0
  static Coordinate  screen;
  int m0,m1,m2,TP_X[1],TP_Y[1],temp[3];
  uint8_t count=0;
 8009716:	2300      	movs	r3, #0
 8009718:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  int buffer[2][9]={{0},{0}};
 800971c:	1d3b      	adds	r3, r7, #4
 800971e:	2248      	movs	r2, #72	; 0x48
 8009720:	2100      	movs	r1, #0
 8009722:	4618      	mov	r0, r3
 8009724:	f000 fc3e 	bl	8009fa4 <memset>
  
  do
  {       
    TP_GetAdXY(TP_X,TP_Y);  
 8009728:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800972c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8009730:	4611      	mov	r1, r2
 8009732:	4618      	mov	r0, r3
 8009734:	f7ff ffa8 	bl	8009688 <TP_GetAdXY>
    buffer[0][count]=TP_X[0];  
 8009738:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800973c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800973e:	009b      	lsls	r3, r3, #2
 8009740:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8009744:	440b      	add	r3, r1
 8009746:	f843 2c6c 	str.w	r2, [r3, #-108]
    buffer[1][count]=TP_Y[0];
 800974a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800974e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009750:	3309      	adds	r3, #9
 8009752:	009b      	lsls	r3, r3, #2
 8009754:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8009758:	440b      	add	r3, r1
 800975a:	f843 2c6c 	str.w	r2, [r3, #-108]
    count++;  
 800975e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8009762:	3301      	adds	r3, #1
 8009764:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  }
  while(!TP_INT_IN&& count<9);  /* TP_INT_IN  */
 8009768:	2120      	movs	r1, #32
 800976a:	4885      	ldr	r0, [pc, #532]	; (8009980 <Read_Ads7846+0x270>)
 800976c:	f7fb fc92 	bl	8005094 <HAL_GPIO_ReadPin>
 8009770:	4603      	mov	r3, r0
 8009772:	2b00      	cmp	r3, #0
 8009774:	d103      	bne.n	800977e <Read_Ads7846+0x6e>
 8009776:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800977a:	2b08      	cmp	r3, #8
 800977c:	d9d4      	bls.n	8009728 <Read_Ads7846+0x18>
  if(count==9)   /* Average X Y  */ 
 800977e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8009782:	2b09      	cmp	r3, #9
 8009784:	f040 80f6 	bne.w	8009974 <Read_Ads7846+0x264>
  {
    /* Average X  */
    temp[0]=(buffer[0][0]+buffer[0][1]+buffer[0][2])/3;
 8009788:	687a      	ldr	r2, [r7, #4]
 800978a:	68bb      	ldr	r3, [r7, #8]
 800978c:	441a      	add	r2, r3
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	4413      	add	r3, r2
 8009792:	4a7c      	ldr	r2, [pc, #496]	; (8009984 <Read_Ads7846+0x274>)
 8009794:	fb82 1203 	smull	r1, r2, r2, r3
 8009798:	17db      	asrs	r3, r3, #31
 800979a:	1ad3      	subs	r3, r2, r3
 800979c:	64fb      	str	r3, [r7, #76]	; 0x4c
    temp[1]=(buffer[0][3]+buffer[0][4]+buffer[0][5])/3;
 800979e:	693a      	ldr	r2, [r7, #16]
 80097a0:	697b      	ldr	r3, [r7, #20]
 80097a2:	441a      	add	r2, r3
 80097a4:	69bb      	ldr	r3, [r7, #24]
 80097a6:	4413      	add	r3, r2
 80097a8:	4a76      	ldr	r2, [pc, #472]	; (8009984 <Read_Ads7846+0x274>)
 80097aa:	fb82 1203 	smull	r1, r2, r2, r3
 80097ae:	17db      	asrs	r3, r3, #31
 80097b0:	1ad3      	subs	r3, r2, r3
 80097b2:	653b      	str	r3, [r7, #80]	; 0x50
    temp[2]=(buffer[0][6]+buffer[0][7]+buffer[0][8])/3;
 80097b4:	69fa      	ldr	r2, [r7, #28]
 80097b6:	6a3b      	ldr	r3, [r7, #32]
 80097b8:	441a      	add	r2, r3
 80097ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097bc:	4413      	add	r3, r2
 80097be:	4a71      	ldr	r2, [pc, #452]	; (8009984 <Read_Ads7846+0x274>)
 80097c0:	fb82 1203 	smull	r1, r2, r2, r3
 80097c4:	17db      	asrs	r3, r3, #31
 80097c6:	1ad3      	subs	r3, r2, r3
 80097c8:	657b      	str	r3, [r7, #84]	; 0x54
   
    m0=temp[0]-temp[1];
 80097ca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80097cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80097ce:	1ad3      	subs	r3, r2, r3
 80097d0:	66bb      	str	r3, [r7, #104]	; 0x68
    m1=temp[1]-temp[2];
 80097d2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80097d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80097d6:	1ad3      	subs	r3, r2, r3
 80097d8:	667b      	str	r3, [r7, #100]	; 0x64
    m2=temp[2]-temp[0];
 80097da:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80097dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80097de:	1ad3      	subs	r3, r2, r3
 80097e0:	663b      	str	r3, [r7, #96]	; 0x60
   
    m0=m0>0?m0:(-m0);
 80097e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	bfb8      	it	lt
 80097e8:	425b      	neglt	r3, r3
 80097ea:	66bb      	str	r3, [r7, #104]	; 0x68
    m1=m1>0?m1:(-m1);
 80097ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	bfb8      	it	lt
 80097f2:	425b      	neglt	r3, r3
 80097f4:	667b      	str	r3, [r7, #100]	; 0x64
    m2=m2>0?m2:(-m2);
 80097f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	bfb8      	it	lt
 80097fc:	425b      	neglt	r3, r3
 80097fe:	663b      	str	r3, [r7, #96]	; 0x60
   
    if( m0>THRESHOLD  &&  m1>THRESHOLD  &&  m2>THRESHOLD ) return 0;
 8009800:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009802:	2b02      	cmp	r3, #2
 8009804:	dd07      	ble.n	8009816 <Read_Ads7846+0x106>
 8009806:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009808:	2b02      	cmp	r3, #2
 800980a:	dd04      	ble.n	8009816 <Read_Ads7846+0x106>
 800980c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800980e:	2b02      	cmp	r3, #2
 8009810:	dd01      	ble.n	8009816 <Read_Ads7846+0x106>
 8009812:	2300      	movs	r3, #0
 8009814:	e0af      	b.n	8009976 <Read_Ads7846+0x266>
   
    if(m0<m1)
 8009816:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009818:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800981a:	429a      	cmp	r2, r3
 800981c:	da17      	bge.n	800984e <Read_Ads7846+0x13e>
    {
      if(m2<m0) 
 800981e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009820:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009822:	429a      	cmp	r2, r3
 8009824:	da09      	bge.n	800983a <Read_Ads7846+0x12a>
        screen.x=(temp[0]+temp[2])/2;
 8009826:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009828:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800982a:	4413      	add	r3, r2
 800982c:	0fda      	lsrs	r2, r3, #31
 800982e:	4413      	add	r3, r2
 8009830:	105b      	asrs	r3, r3, #1
 8009832:	b29a      	uxth	r2, r3
 8009834:	4b54      	ldr	r3, [pc, #336]	; (8009988 <Read_Ads7846+0x278>)
 8009836:	801a      	strh	r2, [r3, #0]
 8009838:	e020      	b.n	800987c <Read_Ads7846+0x16c>
      else 
        screen.x=(temp[0]+temp[1])/2;  
 800983a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800983c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800983e:	4413      	add	r3, r2
 8009840:	0fda      	lsrs	r2, r3, #31
 8009842:	4413      	add	r3, r2
 8009844:	105b      	asrs	r3, r3, #1
 8009846:	b29a      	uxth	r2, r3
 8009848:	4b4f      	ldr	r3, [pc, #316]	; (8009988 <Read_Ads7846+0x278>)
 800984a:	801a      	strh	r2, [r3, #0]
 800984c:	e016      	b.n	800987c <Read_Ads7846+0x16c>
    }
    else if(m2<m1) 
 800984e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009850:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009852:	429a      	cmp	r2, r3
 8009854:	da09      	bge.n	800986a <Read_Ads7846+0x15a>
      screen.x=(temp[0]+temp[2])/2;
 8009856:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009858:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800985a:	4413      	add	r3, r2
 800985c:	0fda      	lsrs	r2, r3, #31
 800985e:	4413      	add	r3, r2
 8009860:	105b      	asrs	r3, r3, #1
 8009862:	b29a      	uxth	r2, r3
 8009864:	4b48      	ldr	r3, [pc, #288]	; (8009988 <Read_Ads7846+0x278>)
 8009866:	801a      	strh	r2, [r3, #0]
 8009868:	e008      	b.n	800987c <Read_Ads7846+0x16c>
    else 
      screen.x=(temp[1]+temp[2])/2;
 800986a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800986c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800986e:	4413      	add	r3, r2
 8009870:	0fda      	lsrs	r2, r3, #31
 8009872:	4413      	add	r3, r2
 8009874:	105b      	asrs	r3, r3, #1
 8009876:	b29a      	uxth	r2, r3
 8009878:	4b43      	ldr	r3, [pc, #268]	; (8009988 <Read_Ads7846+0x278>)
 800987a:	801a      	strh	r2, [r3, #0]
   
    /* Average Y  */
    temp[0]=(buffer[1][0]+buffer[1][1]+buffer[1][2])/3;
 800987c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800987e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009880:	441a      	add	r2, r3
 8009882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009884:	4413      	add	r3, r2
 8009886:	4a3f      	ldr	r2, [pc, #252]	; (8009984 <Read_Ads7846+0x274>)
 8009888:	fb82 1203 	smull	r1, r2, r2, r3
 800988c:	17db      	asrs	r3, r3, #31
 800988e:	1ad3      	subs	r3, r2, r3
 8009890:	64fb      	str	r3, [r7, #76]	; 0x4c
    temp[1]=(buffer[1][3]+buffer[1][4]+buffer[1][5])/3;
 8009892:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009896:	441a      	add	r2, r3
 8009898:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800989a:	4413      	add	r3, r2
 800989c:	4a39      	ldr	r2, [pc, #228]	; (8009984 <Read_Ads7846+0x274>)
 800989e:	fb82 1203 	smull	r1, r2, r2, r3
 80098a2:	17db      	asrs	r3, r3, #31
 80098a4:	1ad3      	subs	r3, r2, r3
 80098a6:	653b      	str	r3, [r7, #80]	; 0x50
    temp[2]=(buffer[1][6]+buffer[1][7]+buffer[1][8])/3;
 80098a8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80098aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80098ac:	441a      	add	r2, r3
 80098ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80098b0:	4413      	add	r3, r2
 80098b2:	4a34      	ldr	r2, [pc, #208]	; (8009984 <Read_Ads7846+0x274>)
 80098b4:	fb82 1203 	smull	r1, r2, r2, r3
 80098b8:	17db      	asrs	r3, r3, #31
 80098ba:	1ad3      	subs	r3, r2, r3
 80098bc:	657b      	str	r3, [r7, #84]	; 0x54
    m0=temp[0]-temp[1];
 80098be:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80098c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80098c2:	1ad3      	subs	r3, r2, r3
 80098c4:	66bb      	str	r3, [r7, #104]	; 0x68
    m1=temp[1]-temp[2];
 80098c6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80098c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80098ca:	1ad3      	subs	r3, r2, r3
 80098cc:	667b      	str	r3, [r7, #100]	; 0x64
    m2=temp[2]-temp[0];
 80098ce:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80098d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80098d2:	1ad3      	subs	r3, r2, r3
 80098d4:	663b      	str	r3, [r7, #96]	; 0x60
    m0=m0>0?m0:(-m0);
 80098d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80098d8:	2b00      	cmp	r3, #0
 80098da:	bfb8      	it	lt
 80098dc:	425b      	neglt	r3, r3
 80098de:	66bb      	str	r3, [r7, #104]	; 0x68
    m1=m1>0?m1:(-m1);
 80098e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	bfb8      	it	lt
 80098e6:	425b      	neglt	r3, r3
 80098e8:	667b      	str	r3, [r7, #100]	; 0x64
    m2=m2>0?m2:(-m2);
 80098ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	bfb8      	it	lt
 80098f0:	425b      	neglt	r3, r3
 80098f2:	663b      	str	r3, [r7, #96]	; 0x60
    if(m0>THRESHOLD&&m1>THRESHOLD&&m2>THRESHOLD) return 0;
 80098f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80098f6:	2b02      	cmp	r3, #2
 80098f8:	dd07      	ble.n	800990a <Read_Ads7846+0x1fa>
 80098fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80098fc:	2b02      	cmp	r3, #2
 80098fe:	dd04      	ble.n	800990a <Read_Ads7846+0x1fa>
 8009900:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009902:	2b02      	cmp	r3, #2
 8009904:	dd01      	ble.n	800990a <Read_Ads7846+0x1fa>
 8009906:	2300      	movs	r3, #0
 8009908:	e035      	b.n	8009976 <Read_Ads7846+0x266>
   
    if(m0<m1)
 800990a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800990c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800990e:	429a      	cmp	r2, r3
 8009910:	da17      	bge.n	8009942 <Read_Ads7846+0x232>
    {
      if(m2<m0) 
 8009912:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009914:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009916:	429a      	cmp	r2, r3
 8009918:	da09      	bge.n	800992e <Read_Ads7846+0x21e>
        screen.y=(temp[0]+temp[2])/2;
 800991a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800991c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800991e:	4413      	add	r3, r2
 8009920:	0fda      	lsrs	r2, r3, #31
 8009922:	4413      	add	r3, r2
 8009924:	105b      	asrs	r3, r3, #1
 8009926:	b29a      	uxth	r2, r3
 8009928:	4b17      	ldr	r3, [pc, #92]	; (8009988 <Read_Ads7846+0x278>)
 800992a:	805a      	strh	r2, [r3, #2]
 800992c:	e020      	b.n	8009970 <Read_Ads7846+0x260>
      else 
        screen.y=(temp[0]+temp[1])/2;  
 800992e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009930:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009932:	4413      	add	r3, r2
 8009934:	0fda      	lsrs	r2, r3, #31
 8009936:	4413      	add	r3, r2
 8009938:	105b      	asrs	r3, r3, #1
 800993a:	b29a      	uxth	r2, r3
 800993c:	4b12      	ldr	r3, [pc, #72]	; (8009988 <Read_Ads7846+0x278>)
 800993e:	805a      	strh	r2, [r3, #2]
 8009940:	e016      	b.n	8009970 <Read_Ads7846+0x260>
      }
    else if(m2<m1) 
 8009942:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009944:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009946:	429a      	cmp	r2, r3
 8009948:	da09      	bge.n	800995e <Read_Ads7846+0x24e>
       screen.y=(temp[0]+temp[2])/2;
 800994a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800994c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800994e:	4413      	add	r3, r2
 8009950:	0fda      	lsrs	r2, r3, #31
 8009952:	4413      	add	r3, r2
 8009954:	105b      	asrs	r3, r3, #1
 8009956:	b29a      	uxth	r2, r3
 8009958:	4b0b      	ldr	r3, [pc, #44]	; (8009988 <Read_Ads7846+0x278>)
 800995a:	805a      	strh	r2, [r3, #2]
 800995c:	e008      	b.n	8009970 <Read_Ads7846+0x260>
    else
       screen.y=(temp[1]+temp[2])/2;
 800995e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009960:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009962:	4413      	add	r3, r2
 8009964:	0fda      	lsrs	r2, r3, #31
 8009966:	4413      	add	r3, r2
 8009968:	105b      	asrs	r3, r3, #1
 800996a:	b29a      	uxth	r2, r3
 800996c:	4b06      	ldr	r3, [pc, #24]	; (8009988 <Read_Ads7846+0x278>)
 800996e:	805a      	strh	r2, [r3, #2]
   
    return &screen;
 8009970:	4b05      	ldr	r3, [pc, #20]	; (8009988 <Read_Ads7846+0x278>)
 8009972:	e000      	b.n	8009976 <Read_Ads7846+0x266>
  }
  return 0; 
 8009974:	2300      	movs	r3, #0
}
 8009976:	4618      	mov	r0, r3
 8009978:	3770      	adds	r7, #112	; 0x70
 800997a:	46bd      	mov	sp, r7
 800997c:	bd80      	pop	{r7, pc}
 800997e:	bf00      	nop
 8009980:	40020800 	.word	0x40020800
 8009984:	55555556 	.word	0x55555556
 8009988:	200019f4 	.word	0x200019f4

0800998c <setCalibrationMatrix>:
* Attention      : None
*******************************************************************************/
FunctionalState setCalibrationMatrix( Coordinate * displayPtr,
                          Coordinate * screenPtr,
                          Matrix * matrixPtr)
{
 800998c:	b590      	push	{r4, r7, lr}
 800998e:	b087      	sub	sp, #28
 8009990:	af00      	add	r7, sp, #0
 8009992:	60f8      	str	r0, [r7, #12]
 8009994:	60b9      	str	r1, [r7, #8]
 8009996:	607a      	str	r2, [r7, #4]

  FunctionalState retTHRESHOLD = ENABLE ;
 8009998:	2301      	movs	r3, #1
 800999a:	75fb      	strb	r3, [r7, #23]
  /* K=(X0-X2) (Y1-Y2)-(X1-X2) (Y0-Y2) */
  matrixPtr->Divider = ((screenPtr[0].x - screenPtr[2].x) * (screenPtr[1].y - screenPtr[2].y)) - 
 800999c:	68bb      	ldr	r3, [r7, #8]
 800999e:	881b      	ldrh	r3, [r3, #0]
 80099a0:	461a      	mov	r2, r3
 80099a2:	68bb      	ldr	r3, [r7, #8]
 80099a4:	3308      	adds	r3, #8
 80099a6:	881b      	ldrh	r3, [r3, #0]
 80099a8:	1ad3      	subs	r3, r2, r3
 80099aa:	68ba      	ldr	r2, [r7, #8]
 80099ac:	3204      	adds	r2, #4
 80099ae:	8852      	ldrh	r2, [r2, #2]
 80099b0:	4611      	mov	r1, r2
 80099b2:	68ba      	ldr	r2, [r7, #8]
 80099b4:	3208      	adds	r2, #8
 80099b6:	8852      	ldrh	r2, [r2, #2]
 80099b8:	1a8a      	subs	r2, r1, r2
 80099ba:	fb02 f203 	mul.w	r2, r2, r3
                       ((screenPtr[1].x - screenPtr[2].x) * (screenPtr[0].y - screenPtr[2].y)) ;
 80099be:	68bb      	ldr	r3, [r7, #8]
 80099c0:	3304      	adds	r3, #4
 80099c2:	881b      	ldrh	r3, [r3, #0]
 80099c4:	4619      	mov	r1, r3
 80099c6:	68bb      	ldr	r3, [r7, #8]
 80099c8:	3308      	adds	r3, #8
 80099ca:	881b      	ldrh	r3, [r3, #0]
 80099cc:	1acb      	subs	r3, r1, r3
 80099ce:	68b9      	ldr	r1, [r7, #8]
 80099d0:	8849      	ldrh	r1, [r1, #2]
 80099d2:	4608      	mov	r0, r1
 80099d4:	68b9      	ldr	r1, [r7, #8]
 80099d6:	3108      	adds	r1, #8
 80099d8:	8849      	ldrh	r1, [r1, #2]
 80099da:	1a41      	subs	r1, r0, r1
 80099dc:	fb01 f303 	mul.w	r3, r1, r3
  matrixPtr->Divider = ((screenPtr[0].x - screenPtr[2].x) * (screenPtr[1].y - screenPtr[2].y)) - 
 80099e0:	1ad3      	subs	r3, r2, r3
 80099e2:	4618      	mov	r0, r3
 80099e4:	f7fa fa56 	bl	8003e94 <__aeabi_i2d>
 80099e8:	4603      	mov	r3, r0
 80099ea:	460c      	mov	r4, r1
 80099ec:	687a      	ldr	r2, [r7, #4]
 80099ee:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
  if( matrixPtr->Divider == 0 )
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 80099f8:	f04f 0200 	mov.w	r2, #0
 80099fc:	f04f 0300 	mov.w	r3, #0
 8009a00:	f7fa fd1a 	bl	8004438 <__aeabi_dcmpeq>
 8009a04:	4603      	mov	r3, r0
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d002      	beq.n	8009a10 <setCalibrationMatrix+0x84>
  {
    retTHRESHOLD = DISABLE;
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	75fb      	strb	r3, [r7, #23]
 8009a0e:	e145      	b.n	8009c9c <setCalibrationMatrix+0x310>
  }
  else
  {
    /* A=((XD0-XD2) (Y1-Y2)-(XD1-XD2) (Y0-Y2))/K  */
    matrixPtr->An = ((displayPtr[0].x - displayPtr[2].x) * (screenPtr[1].y - screenPtr[2].y)) - 
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	881b      	ldrh	r3, [r3, #0]
 8009a14:	461a      	mov	r2, r3
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	3308      	adds	r3, #8
 8009a1a:	881b      	ldrh	r3, [r3, #0]
 8009a1c:	1ad3      	subs	r3, r2, r3
 8009a1e:	68ba      	ldr	r2, [r7, #8]
 8009a20:	3204      	adds	r2, #4
 8009a22:	8852      	ldrh	r2, [r2, #2]
 8009a24:	4611      	mov	r1, r2
 8009a26:	68ba      	ldr	r2, [r7, #8]
 8009a28:	3208      	adds	r2, #8
 8009a2a:	8852      	ldrh	r2, [r2, #2]
 8009a2c:	1a8a      	subs	r2, r1, r2
 8009a2e:	fb02 f203 	mul.w	r2, r2, r3
                    ((displayPtr[1].x - displayPtr[2].x) * (screenPtr[0].y - screenPtr[2].y)) ;
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	3304      	adds	r3, #4
 8009a36:	881b      	ldrh	r3, [r3, #0]
 8009a38:	4619      	mov	r1, r3
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	3308      	adds	r3, #8
 8009a3e:	881b      	ldrh	r3, [r3, #0]
 8009a40:	1acb      	subs	r3, r1, r3
 8009a42:	68b9      	ldr	r1, [r7, #8]
 8009a44:	8849      	ldrh	r1, [r1, #2]
 8009a46:	4608      	mov	r0, r1
 8009a48:	68b9      	ldr	r1, [r7, #8]
 8009a4a:	3108      	adds	r1, #8
 8009a4c:	8849      	ldrh	r1, [r1, #2]
 8009a4e:	1a41      	subs	r1, r0, r1
 8009a50:	fb01 f303 	mul.w	r3, r1, r3
    matrixPtr->An = ((displayPtr[0].x - displayPtr[2].x) * (screenPtr[1].y - screenPtr[2].y)) - 
 8009a54:	1ad3      	subs	r3, r2, r3
 8009a56:	4618      	mov	r0, r3
 8009a58:	f7fa fa1c 	bl	8003e94 <__aeabi_i2d>
 8009a5c:	4603      	mov	r3, r0
 8009a5e:	460c      	mov	r4, r1
 8009a60:	687a      	ldr	r2, [r7, #4]
 8009a62:	e9c2 3400 	strd	r3, r4, [r2]
  /* B=((X0-X2) (XD1-XD2)-(XD0-XD2) (X1-X2))/K  */
    matrixPtr->Bn = ((screenPtr[0].x - screenPtr[2].x) * (displayPtr[1].x - displayPtr[2].x)) - 
 8009a66:	68bb      	ldr	r3, [r7, #8]
 8009a68:	881b      	ldrh	r3, [r3, #0]
 8009a6a:	461a      	mov	r2, r3
 8009a6c:	68bb      	ldr	r3, [r7, #8]
 8009a6e:	3308      	adds	r3, #8
 8009a70:	881b      	ldrh	r3, [r3, #0]
 8009a72:	1ad3      	subs	r3, r2, r3
 8009a74:	68fa      	ldr	r2, [r7, #12]
 8009a76:	3204      	adds	r2, #4
 8009a78:	8812      	ldrh	r2, [r2, #0]
 8009a7a:	4611      	mov	r1, r2
 8009a7c:	68fa      	ldr	r2, [r7, #12]
 8009a7e:	3208      	adds	r2, #8
 8009a80:	8812      	ldrh	r2, [r2, #0]
 8009a82:	1a8a      	subs	r2, r1, r2
 8009a84:	fb02 f203 	mul.w	r2, r2, r3
                    ((displayPtr[0].x - displayPtr[2].x) * (screenPtr[1].x - screenPtr[2].x)) ;
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	881b      	ldrh	r3, [r3, #0]
 8009a8c:	4619      	mov	r1, r3
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	3308      	adds	r3, #8
 8009a92:	881b      	ldrh	r3, [r3, #0]
 8009a94:	1acb      	subs	r3, r1, r3
 8009a96:	68b9      	ldr	r1, [r7, #8]
 8009a98:	3104      	adds	r1, #4
 8009a9a:	8809      	ldrh	r1, [r1, #0]
 8009a9c:	4608      	mov	r0, r1
 8009a9e:	68b9      	ldr	r1, [r7, #8]
 8009aa0:	3108      	adds	r1, #8
 8009aa2:	8809      	ldrh	r1, [r1, #0]
 8009aa4:	1a41      	subs	r1, r0, r1
 8009aa6:	fb01 f303 	mul.w	r3, r1, r3
    matrixPtr->Bn = ((screenPtr[0].x - screenPtr[2].x) * (displayPtr[1].x - displayPtr[2].x)) - 
 8009aaa:	1ad3      	subs	r3, r2, r3
 8009aac:	4618      	mov	r0, r3
 8009aae:	f7fa f9f1 	bl	8003e94 <__aeabi_i2d>
 8009ab2:	4603      	mov	r3, r0
 8009ab4:	460c      	mov	r4, r1
 8009ab6:	687a      	ldr	r2, [r7, #4]
 8009ab8:	e9c2 3402 	strd	r3, r4, [r2, #8]
    /* C=(Y0(X2XD1-X1XD2)+Y1(X0XD2-X2XD0)+Y2(X1XD0-X0XD1))/K */
    matrixPtr->Cn = (screenPtr[2].x * displayPtr[1].x - screenPtr[1].x * displayPtr[2].x) * screenPtr[0].y +
 8009abc:	68bb      	ldr	r3, [r7, #8]
 8009abe:	3308      	adds	r3, #8
 8009ac0:	881b      	ldrh	r3, [r3, #0]
 8009ac2:	461a      	mov	r2, r3
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	3304      	adds	r3, #4
 8009ac8:	881b      	ldrh	r3, [r3, #0]
 8009aca:	fb03 f202 	mul.w	r2, r3, r2
 8009ace:	68bb      	ldr	r3, [r7, #8]
 8009ad0:	3304      	adds	r3, #4
 8009ad2:	881b      	ldrh	r3, [r3, #0]
 8009ad4:	4619      	mov	r1, r3
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	3308      	adds	r3, #8
 8009ada:	881b      	ldrh	r3, [r3, #0]
 8009adc:	fb03 f301 	mul.w	r3, r3, r1
 8009ae0:	1ad3      	subs	r3, r2, r3
 8009ae2:	68ba      	ldr	r2, [r7, #8]
 8009ae4:	8852      	ldrh	r2, [r2, #2]
 8009ae6:	fb02 f203 	mul.w	r2, r2, r3
                    (screenPtr[0].x * displayPtr[2].x - screenPtr[2].x * displayPtr[0].x) * screenPtr[1].y +
 8009aea:	68bb      	ldr	r3, [r7, #8]
 8009aec:	881b      	ldrh	r3, [r3, #0]
 8009aee:	4619      	mov	r1, r3
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	3308      	adds	r3, #8
 8009af4:	881b      	ldrh	r3, [r3, #0]
 8009af6:	fb03 f101 	mul.w	r1, r3, r1
 8009afa:	68bb      	ldr	r3, [r7, #8]
 8009afc:	3308      	adds	r3, #8
 8009afe:	881b      	ldrh	r3, [r3, #0]
 8009b00:	4618      	mov	r0, r3
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	881b      	ldrh	r3, [r3, #0]
 8009b06:	fb03 f300 	mul.w	r3, r3, r0
 8009b0a:	1acb      	subs	r3, r1, r3
 8009b0c:	68b9      	ldr	r1, [r7, #8]
 8009b0e:	3104      	adds	r1, #4
 8009b10:	8849      	ldrh	r1, [r1, #2]
 8009b12:	fb01 f303 	mul.w	r3, r1, r3
    matrixPtr->Cn = (screenPtr[2].x * displayPtr[1].x - screenPtr[1].x * displayPtr[2].x) * screenPtr[0].y +
 8009b16:	441a      	add	r2, r3
                    (screenPtr[1].x * displayPtr[0].x - screenPtr[0].x * displayPtr[1].x) * screenPtr[2].y ;
 8009b18:	68bb      	ldr	r3, [r7, #8]
 8009b1a:	3304      	adds	r3, #4
 8009b1c:	881b      	ldrh	r3, [r3, #0]
 8009b1e:	4619      	mov	r1, r3
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	881b      	ldrh	r3, [r3, #0]
 8009b24:	fb03 f101 	mul.w	r1, r3, r1
 8009b28:	68bb      	ldr	r3, [r7, #8]
 8009b2a:	881b      	ldrh	r3, [r3, #0]
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	3304      	adds	r3, #4
 8009b32:	881b      	ldrh	r3, [r3, #0]
 8009b34:	fb03 f300 	mul.w	r3, r3, r0
 8009b38:	1acb      	subs	r3, r1, r3
 8009b3a:	68b9      	ldr	r1, [r7, #8]
 8009b3c:	3108      	adds	r1, #8
 8009b3e:	8849      	ldrh	r1, [r1, #2]
 8009b40:	fb01 f303 	mul.w	r3, r1, r3
                    (screenPtr[0].x * displayPtr[2].x - screenPtr[2].x * displayPtr[0].x) * screenPtr[1].y +
 8009b44:	4413      	add	r3, r2
    matrixPtr->Cn = (screenPtr[2].x * displayPtr[1].x - screenPtr[1].x * displayPtr[2].x) * screenPtr[0].y +
 8009b46:	4618      	mov	r0, r3
 8009b48:	f7fa f9a4 	bl	8003e94 <__aeabi_i2d>
 8009b4c:	4603      	mov	r3, r0
 8009b4e:	460c      	mov	r4, r1
 8009b50:	687a      	ldr	r2, [r7, #4]
 8009b52:	e9c2 3404 	strd	r3, r4, [r2, #16]
    /* D=((YD0-YD2) (Y1-Y2)-(YD1-YD2) (Y0-Y2))/K  */
    matrixPtr->Dn = ((displayPtr[0].y - displayPtr[2].y) * (screenPtr[1].y - screenPtr[2].y)) - 
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	885b      	ldrh	r3, [r3, #2]
 8009b5a:	461a      	mov	r2, r3
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	3308      	adds	r3, #8
 8009b60:	885b      	ldrh	r3, [r3, #2]
 8009b62:	1ad3      	subs	r3, r2, r3
 8009b64:	68ba      	ldr	r2, [r7, #8]
 8009b66:	3204      	adds	r2, #4
 8009b68:	8852      	ldrh	r2, [r2, #2]
 8009b6a:	4611      	mov	r1, r2
 8009b6c:	68ba      	ldr	r2, [r7, #8]
 8009b6e:	3208      	adds	r2, #8
 8009b70:	8852      	ldrh	r2, [r2, #2]
 8009b72:	1a8a      	subs	r2, r1, r2
 8009b74:	fb02 f203 	mul.w	r2, r2, r3
                    ((displayPtr[1].y - displayPtr[2].y) * (screenPtr[0].y - screenPtr[2].y)) ;
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	3304      	adds	r3, #4
 8009b7c:	885b      	ldrh	r3, [r3, #2]
 8009b7e:	4619      	mov	r1, r3
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	3308      	adds	r3, #8
 8009b84:	885b      	ldrh	r3, [r3, #2]
 8009b86:	1acb      	subs	r3, r1, r3
 8009b88:	68b9      	ldr	r1, [r7, #8]
 8009b8a:	8849      	ldrh	r1, [r1, #2]
 8009b8c:	4608      	mov	r0, r1
 8009b8e:	68b9      	ldr	r1, [r7, #8]
 8009b90:	3108      	adds	r1, #8
 8009b92:	8849      	ldrh	r1, [r1, #2]
 8009b94:	1a41      	subs	r1, r0, r1
 8009b96:	fb01 f303 	mul.w	r3, r1, r3
    matrixPtr->Dn = ((displayPtr[0].y - displayPtr[2].y) * (screenPtr[1].y - screenPtr[2].y)) - 
 8009b9a:	1ad3      	subs	r3, r2, r3
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	f7fa f979 	bl	8003e94 <__aeabi_i2d>
 8009ba2:	4603      	mov	r3, r0
 8009ba4:	460c      	mov	r4, r1
 8009ba6:	687a      	ldr	r2, [r7, #4]
 8009ba8:	e9c2 3406 	strd	r3, r4, [r2, #24]
    /* E=((X0-X2) (YD1-YD2)-(YD0-YD2) (X1-X2))/K  */
    matrixPtr->En = ((screenPtr[0].x - screenPtr[2].x) * (displayPtr[1].y - displayPtr[2].y)) - 
 8009bac:	68bb      	ldr	r3, [r7, #8]
 8009bae:	881b      	ldrh	r3, [r3, #0]
 8009bb0:	461a      	mov	r2, r3
 8009bb2:	68bb      	ldr	r3, [r7, #8]
 8009bb4:	3308      	adds	r3, #8
 8009bb6:	881b      	ldrh	r3, [r3, #0]
 8009bb8:	1ad3      	subs	r3, r2, r3
 8009bba:	68fa      	ldr	r2, [r7, #12]
 8009bbc:	3204      	adds	r2, #4
 8009bbe:	8852      	ldrh	r2, [r2, #2]
 8009bc0:	4611      	mov	r1, r2
 8009bc2:	68fa      	ldr	r2, [r7, #12]
 8009bc4:	3208      	adds	r2, #8
 8009bc6:	8852      	ldrh	r2, [r2, #2]
 8009bc8:	1a8a      	subs	r2, r1, r2
 8009bca:	fb02 f203 	mul.w	r2, r2, r3
                    ((displayPtr[0].y - displayPtr[2].y) * (screenPtr[1].x - screenPtr[2].x)) ;
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	885b      	ldrh	r3, [r3, #2]
 8009bd2:	4619      	mov	r1, r3
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	3308      	adds	r3, #8
 8009bd8:	885b      	ldrh	r3, [r3, #2]
 8009bda:	1acb      	subs	r3, r1, r3
 8009bdc:	68b9      	ldr	r1, [r7, #8]
 8009bde:	3104      	adds	r1, #4
 8009be0:	8809      	ldrh	r1, [r1, #0]
 8009be2:	4608      	mov	r0, r1
 8009be4:	68b9      	ldr	r1, [r7, #8]
 8009be6:	3108      	adds	r1, #8
 8009be8:	8809      	ldrh	r1, [r1, #0]
 8009bea:	1a41      	subs	r1, r0, r1
 8009bec:	fb01 f303 	mul.w	r3, r1, r3
    matrixPtr->En = ((screenPtr[0].x - screenPtr[2].x) * (displayPtr[1].y - displayPtr[2].y)) - 
 8009bf0:	1ad3      	subs	r3, r2, r3
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	f7fa f94e 	bl	8003e94 <__aeabi_i2d>
 8009bf8:	4603      	mov	r3, r0
 8009bfa:	460c      	mov	r4, r1
 8009bfc:	687a      	ldr	r2, [r7, #4]
 8009bfe:	e9c2 3408 	strd	r3, r4, [r2, #32]
    /* F=(Y0(X2YD1-X1YD2)+Y1(X0YD2-X2YD0)+Y2(X1YD0-X0YD1))/K */
    matrixPtr->Fn = (screenPtr[2].x * displayPtr[1].y - screenPtr[1].x * displayPtr[2].y) * screenPtr[0].y +
 8009c02:	68bb      	ldr	r3, [r7, #8]
 8009c04:	3308      	adds	r3, #8
 8009c06:	881b      	ldrh	r3, [r3, #0]
 8009c08:	461a      	mov	r2, r3
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	3304      	adds	r3, #4
 8009c0e:	885b      	ldrh	r3, [r3, #2]
 8009c10:	fb03 f202 	mul.w	r2, r3, r2
 8009c14:	68bb      	ldr	r3, [r7, #8]
 8009c16:	3304      	adds	r3, #4
 8009c18:	881b      	ldrh	r3, [r3, #0]
 8009c1a:	4619      	mov	r1, r3
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	3308      	adds	r3, #8
 8009c20:	885b      	ldrh	r3, [r3, #2]
 8009c22:	fb03 f301 	mul.w	r3, r3, r1
 8009c26:	1ad3      	subs	r3, r2, r3
 8009c28:	68ba      	ldr	r2, [r7, #8]
 8009c2a:	8852      	ldrh	r2, [r2, #2]
 8009c2c:	fb02 f203 	mul.w	r2, r2, r3
                    (screenPtr[0].x * displayPtr[2].y - screenPtr[2].x * displayPtr[0].y) * screenPtr[1].y +
 8009c30:	68bb      	ldr	r3, [r7, #8]
 8009c32:	881b      	ldrh	r3, [r3, #0]
 8009c34:	4619      	mov	r1, r3
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	3308      	adds	r3, #8
 8009c3a:	885b      	ldrh	r3, [r3, #2]
 8009c3c:	fb03 f101 	mul.w	r1, r3, r1
 8009c40:	68bb      	ldr	r3, [r7, #8]
 8009c42:	3308      	adds	r3, #8
 8009c44:	881b      	ldrh	r3, [r3, #0]
 8009c46:	4618      	mov	r0, r3
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	885b      	ldrh	r3, [r3, #2]
 8009c4c:	fb03 f300 	mul.w	r3, r3, r0
 8009c50:	1acb      	subs	r3, r1, r3
 8009c52:	68b9      	ldr	r1, [r7, #8]
 8009c54:	3104      	adds	r1, #4
 8009c56:	8849      	ldrh	r1, [r1, #2]
 8009c58:	fb01 f303 	mul.w	r3, r1, r3
    matrixPtr->Fn = (screenPtr[2].x * displayPtr[1].y - screenPtr[1].x * displayPtr[2].y) * screenPtr[0].y +
 8009c5c:	441a      	add	r2, r3
                    (screenPtr[1].x * displayPtr[0].y - screenPtr[0].x * displayPtr[1].y) * screenPtr[2].y ;
 8009c5e:	68bb      	ldr	r3, [r7, #8]
 8009c60:	3304      	adds	r3, #4
 8009c62:	881b      	ldrh	r3, [r3, #0]
 8009c64:	4619      	mov	r1, r3
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	885b      	ldrh	r3, [r3, #2]
 8009c6a:	fb03 f101 	mul.w	r1, r3, r1
 8009c6e:	68bb      	ldr	r3, [r7, #8]
 8009c70:	881b      	ldrh	r3, [r3, #0]
 8009c72:	4618      	mov	r0, r3
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	3304      	adds	r3, #4
 8009c78:	885b      	ldrh	r3, [r3, #2]
 8009c7a:	fb03 f300 	mul.w	r3, r3, r0
 8009c7e:	1acb      	subs	r3, r1, r3
 8009c80:	68b9      	ldr	r1, [r7, #8]
 8009c82:	3108      	adds	r1, #8
 8009c84:	8849      	ldrh	r1, [r1, #2]
 8009c86:	fb01 f303 	mul.w	r3, r1, r3
                    (screenPtr[0].x * displayPtr[2].y - screenPtr[2].x * displayPtr[0].y) * screenPtr[1].y +
 8009c8a:	4413      	add	r3, r2
    matrixPtr->Fn = (screenPtr[2].x * displayPtr[1].y - screenPtr[1].x * displayPtr[2].y) * screenPtr[0].y +
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	f7fa f901 	bl	8003e94 <__aeabi_i2d>
 8009c92:	4603      	mov	r3, r0
 8009c94:	460c      	mov	r4, r1
 8009c96:	687a      	ldr	r2, [r7, #4]
 8009c98:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
  }
  return( retTHRESHOLD ) ;
 8009c9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c9e:	4618      	mov	r0, r3
 8009ca0:	371c      	adds	r7, #28
 8009ca2:	46bd      	mov	sp, r7
 8009ca4:	bd90      	pop	{r4, r7, pc}

08009ca6 <getDisplayPoint>:
* Attention      : None
*******************************************************************************/
FunctionalState getDisplayPoint(Coordinate * displayPtr,
                     Coordinate * screenPtr,
                     Matrix * matrixPtr )
{
 8009ca6:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8009caa:	b086      	sub	sp, #24
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	60f8      	str	r0, [r7, #12]
 8009cb0:	60b9      	str	r1, [r7, #8]
 8009cb2:	607a      	str	r2, [r7, #4]
  FunctionalState retTHRESHOLD =ENABLE ;
 8009cb4:	2301      	movs	r3, #1
 8009cb6:	75fb      	strb	r3, [r7, #23]
  /*
  An=168
  */
  if( matrixPtr->Divider != 0 )
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8009cbe:	f04f 0200 	mov.w	r2, #0
 8009cc2:	f04f 0300 	mov.w	r3, #0
 8009cc6:	f7fa fbb7 	bl	8004438 <__aeabi_dcmpeq>
 8009cca:	4603      	mov	r3, r0
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	f040 8091 	bne.w	8009df4 <getDisplayPoint+0x14e>
  {
    /* XD = AX+BY+C */        
    displayPtr->x = ( (matrixPtr->An * screenPtr->x) + 
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	e9d3 4500 	ldrd	r4, r5, [r3]
 8009cd8:	68bb      	ldr	r3, [r7, #8]
 8009cda:	881b      	ldrh	r3, [r3, #0]
 8009cdc:	4618      	mov	r0, r3
 8009cde:	f7fa f8d9 	bl	8003e94 <__aeabi_i2d>
 8009ce2:	4602      	mov	r2, r0
 8009ce4:	460b      	mov	r3, r1
 8009ce6:	4620      	mov	r0, r4
 8009ce8:	4629      	mov	r1, r5
 8009cea:	f7fa f93d 	bl	8003f68 <__aeabi_dmul>
 8009cee:	4603      	mov	r3, r0
 8009cf0:	460c      	mov	r4, r1
 8009cf2:	4698      	mov	r8, r3
 8009cf4:	46a1      	mov	r9, r4
                      (matrixPtr->Bn * screenPtr->y) + 
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8009cfc:	68bb      	ldr	r3, [r7, #8]
 8009cfe:	885b      	ldrh	r3, [r3, #2]
 8009d00:	4618      	mov	r0, r3
 8009d02:	f7fa f8c7 	bl	8003e94 <__aeabi_i2d>
 8009d06:	4602      	mov	r2, r0
 8009d08:	460b      	mov	r3, r1
 8009d0a:	4620      	mov	r0, r4
 8009d0c:	4629      	mov	r1, r5
 8009d0e:	f7fa f92b 	bl	8003f68 <__aeabi_dmul>
 8009d12:	4603      	mov	r3, r0
 8009d14:	460c      	mov	r4, r1
    displayPtr->x = ( (matrixPtr->An * screenPtr->x) + 
 8009d16:	461a      	mov	r2, r3
 8009d18:	4623      	mov	r3, r4
 8009d1a:	4640      	mov	r0, r8
 8009d1c:	4649      	mov	r1, r9
 8009d1e:	f7f9 ff6d 	bl	8003bfc <__adddf3>
 8009d22:	4603      	mov	r3, r0
 8009d24:	460c      	mov	r4, r1
 8009d26:	4618      	mov	r0, r3
 8009d28:	4621      	mov	r1, r4
                       matrixPtr->Cn 
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
                      (matrixPtr->Bn * screenPtr->y) + 
 8009d30:	461a      	mov	r2, r3
 8009d32:	4623      	mov	r3, r4
 8009d34:	f7f9 ff62 	bl	8003bfc <__adddf3>
 8009d38:	4603      	mov	r3, r0
 8009d3a:	460c      	mov	r4, r1
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	4621      	mov	r1, r4
                    ) / matrixPtr->Divider ;
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 8009d46:	461a      	mov	r2, r3
 8009d48:	4623      	mov	r3, r4
 8009d4a:	f7fa fa37 	bl	80041bc <__aeabi_ddiv>
 8009d4e:	4603      	mov	r3, r0
 8009d50:	460c      	mov	r4, r1
    displayPtr->x = ( (matrixPtr->An * screenPtr->x) + 
 8009d52:	4618      	mov	r0, r3
 8009d54:	4621      	mov	r1, r4
 8009d56:	f7fa fba1 	bl	800449c <__aeabi_d2uiz>
 8009d5a:	4603      	mov	r3, r0
 8009d5c:	b29a      	uxth	r2, r3
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	801a      	strh	r2, [r3, #0]
    /* YD = DX+EY+F */        
    displayPtr->y = ( (matrixPtr->Dn * screenPtr->x) + 
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8009d68:	68bb      	ldr	r3, [r7, #8]
 8009d6a:	881b      	ldrh	r3, [r3, #0]
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	f7fa f891 	bl	8003e94 <__aeabi_i2d>
 8009d72:	4602      	mov	r2, r0
 8009d74:	460b      	mov	r3, r1
 8009d76:	4620      	mov	r0, r4
 8009d78:	4629      	mov	r1, r5
 8009d7a:	f7fa f8f5 	bl	8003f68 <__aeabi_dmul>
 8009d7e:	4603      	mov	r3, r0
 8009d80:	460c      	mov	r4, r1
 8009d82:	4698      	mov	r8, r3
 8009d84:	46a1      	mov	r9, r4
                      (matrixPtr->En * screenPtr->y) + 
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8009d8c:	68bb      	ldr	r3, [r7, #8]
 8009d8e:	885b      	ldrh	r3, [r3, #2]
 8009d90:	4618      	mov	r0, r3
 8009d92:	f7fa f87f 	bl	8003e94 <__aeabi_i2d>
 8009d96:	4602      	mov	r2, r0
 8009d98:	460b      	mov	r3, r1
 8009d9a:	4620      	mov	r0, r4
 8009d9c:	4629      	mov	r1, r5
 8009d9e:	f7fa f8e3 	bl	8003f68 <__aeabi_dmul>
 8009da2:	4603      	mov	r3, r0
 8009da4:	460c      	mov	r4, r1
    displayPtr->y = ( (matrixPtr->Dn * screenPtr->x) + 
 8009da6:	461a      	mov	r2, r3
 8009da8:	4623      	mov	r3, r4
 8009daa:	4640      	mov	r0, r8
 8009dac:	4649      	mov	r1, r9
 8009dae:	f7f9 ff25 	bl	8003bfc <__adddf3>
 8009db2:	4603      	mov	r3, r0
 8009db4:	460c      	mov	r4, r1
 8009db6:	4618      	mov	r0, r3
 8009db8:	4621      	mov	r1, r4
                       matrixPtr->Fn 
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
                      (matrixPtr->En * screenPtr->y) + 
 8009dc0:	461a      	mov	r2, r3
 8009dc2:	4623      	mov	r3, r4
 8009dc4:	f7f9 ff1a 	bl	8003bfc <__adddf3>
 8009dc8:	4603      	mov	r3, r0
 8009dca:	460c      	mov	r4, r1
 8009dcc:	4618      	mov	r0, r3
 8009dce:	4621      	mov	r1, r4
                    ) / matrixPtr->Divider ;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 8009dd6:	461a      	mov	r2, r3
 8009dd8:	4623      	mov	r3, r4
 8009dda:	f7fa f9ef 	bl	80041bc <__aeabi_ddiv>
 8009dde:	4603      	mov	r3, r0
 8009de0:	460c      	mov	r4, r1
    displayPtr->y = ( (matrixPtr->Dn * screenPtr->x) + 
 8009de2:	4618      	mov	r0, r3
 8009de4:	4621      	mov	r1, r4
 8009de6:	f7fa fb59 	bl	800449c <__aeabi_d2uiz>
 8009dea:	4603      	mov	r3, r0
 8009dec:	b29a      	uxth	r2, r3
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	805a      	strh	r2, [r3, #2]
 8009df2:	e001      	b.n	8009df8 <getDisplayPoint+0x152>
  }
  else
  {
    retTHRESHOLD = DISABLE;
 8009df4:	2300      	movs	r3, #0
 8009df6:	75fb      	strb	r3, [r7, #23]
  }
  return(retTHRESHOLD);
 8009df8:	7dfb      	ldrb	r3, [r7, #23]
} 
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	3718      	adds	r7, #24
 8009dfe:	46bd      	mov	sp, r7
 8009e00:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08009e04 <TouchPanel_Calibrate>:
* Output         : None
* Return         : None
* Attention      : None
*******************************************************************************/
void TouchPanel_Calibrate(void)
{
 8009e04:	b580      	push	{r7, lr}
 8009e06:	b082      	sub	sp, #8
 8009e08:	af00      	add	r7, sp, #0
  uint8_t i;
  Coordinate * Ptr;

  for(i=0;i<3;i++)
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	71fb      	strb	r3, [r7, #7]
 8009e0e:	e03a      	b.n	8009e86 <TouchPanel_Calibrate+0x82>
  {
    BSP_LCD_SetFont(&Font12);
 8009e10:	4824      	ldr	r0, [pc, #144]	; (8009ea4 <TouchPanel_Calibrate+0xa0>)
 8009e12:	f7fe fd27 	bl	8008864 <BSP_LCD_SetFont>
    BSP_LCD_Clear(LCD_COLOR_WHITE);
 8009e16:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8009e1a:	f7fe fd3f 	bl	800889c <BSP_LCD_Clear>
    BSP_LCD_SetTextColor(LCD_COLOR_BLUE); 
 8009e1e:	201f      	movs	r0, #31
 8009e20:	f7fe fd10 	bl	8008844 <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAtLine(1, (uint8_t*)"        Touch crosshair to calibrate");
 8009e24:	4920      	ldr	r1, [pc, #128]	; (8009ea8 <TouchPanel_Calibrate+0xa4>)
 8009e26:	2001      	movs	r0, #1
 8009e28:	f7fe fe20 	bl	8008a6c <BSP_LCD_DisplayStringAtLine>
    BSP_LCD_SetFont(&Font24);
 8009e2c:	481f      	ldr	r0, [pc, #124]	; (8009eac <TouchPanel_Calibrate+0xa8>)
 8009e2e:	f7fe fd19 	bl	8008864 <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAtLine(5, (uint8_t*)"   Waveshare LCD");
 8009e32:	491f      	ldr	r1, [pc, #124]	; (8009eb0 <TouchPanel_Calibrate+0xac>)
 8009e34:	2005      	movs	r0, #5
 8009e36:	f7fe fe19 	bl	8008a6c <BSP_LCD_DisplayStringAtLine>
    HAL_Delay(200);
 8009e3a:	20c8      	movs	r0, #200	; 0xc8
 8009e3c:	f7fa fe2a 	bl	8004a94 <HAL_Delay>
    DrawCross(DisplaySample[i].x,DisplaySample[i].y);
 8009e40:	79fb      	ldrb	r3, [r7, #7]
 8009e42:	4a1c      	ldr	r2, [pc, #112]	; (8009eb4 <TouchPanel_Calibrate+0xb0>)
 8009e44:	f832 0023 	ldrh.w	r0, [r2, r3, lsl #2]
 8009e48:	79fb      	ldrb	r3, [r7, #7]
 8009e4a:	4a1a      	ldr	r2, [pc, #104]	; (8009eb4 <TouchPanel_Calibrate+0xb0>)
 8009e4c:	009b      	lsls	r3, r3, #2
 8009e4e:	4413      	add	r3, r2
 8009e50:	885b      	ldrh	r3, [r3, #2]
 8009e52:	4619      	mov	r1, r3
 8009e54:	f7ff fc30 	bl	80096b8 <DrawCross>
    do
    {
      Ptr=Read_Ads7846();
 8009e58:	f7ff fc5a 	bl	8009710 <Read_Ads7846>
 8009e5c:	6038      	str	r0, [r7, #0]
    }
    while( Ptr == (void*)0 );
 8009e5e:	683b      	ldr	r3, [r7, #0]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d0f9      	beq.n	8009e58 <TouchPanel_Calibrate+0x54>
    ScreenSample[i].x= Ptr->x; ScreenSample[i].y= Ptr->y;
 8009e64:	79fb      	ldrb	r3, [r7, #7]
 8009e66:	683a      	ldr	r2, [r7, #0]
 8009e68:	8811      	ldrh	r1, [r2, #0]
 8009e6a:	4a13      	ldr	r2, [pc, #76]	; (8009eb8 <TouchPanel_Calibrate+0xb4>)
 8009e6c:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
 8009e70:	79fb      	ldrb	r3, [r7, #7]
 8009e72:	683a      	ldr	r2, [r7, #0]
 8009e74:	8851      	ldrh	r1, [r2, #2]
 8009e76:	4a10      	ldr	r2, [pc, #64]	; (8009eb8 <TouchPanel_Calibrate+0xb4>)
 8009e78:	009b      	lsls	r3, r3, #2
 8009e7a:	4413      	add	r3, r2
 8009e7c:	460a      	mov	r2, r1
 8009e7e:	805a      	strh	r2, [r3, #2]
  for(i=0;i<3;i++)
 8009e80:	79fb      	ldrb	r3, [r7, #7]
 8009e82:	3301      	adds	r3, #1
 8009e84:	71fb      	strb	r3, [r7, #7]
 8009e86:	79fb      	ldrb	r3, [r7, #7]
 8009e88:	2b02      	cmp	r3, #2
 8009e8a:	d9c1      	bls.n	8009e10 <TouchPanel_Calibrate+0xc>
  }
  setCalibrationMatrix( &DisplaySample[0],&ScreenSample[0],&matrix );
 8009e8c:	4a0b      	ldr	r2, [pc, #44]	; (8009ebc <TouchPanel_Calibrate+0xb8>)
 8009e8e:	490a      	ldr	r1, [pc, #40]	; (8009eb8 <TouchPanel_Calibrate+0xb4>)
 8009e90:	4808      	ldr	r0, [pc, #32]	; (8009eb4 <TouchPanel_Calibrate+0xb0>)
 8009e92:	f7ff fd7b 	bl	800998c <setCalibrationMatrix>
  BSP_LCD_Clear(LCD_COLOR_BLACK);
 8009e96:	2000      	movs	r0, #0
 8009e98:	f7fe fd00 	bl	800889c <BSP_LCD_Clear>
} 
 8009e9c:	bf00      	nop
 8009e9e:	3708      	adds	r7, #8
 8009ea0:	46bd      	mov	sp, r7
 8009ea2:	bd80      	pop	{r7, pc}
 8009ea4:	20000470 	.word	0x20000470
 8009ea8:	0800c078 	.word	0x0800c078
 8009eac:	20000468 	.word	0x20000468
 8009eb0:	0800c0a0 	.word	0x0800c0a0
 8009eb4:	2000047c 	.word	0x2000047c
 8009eb8:	200100b4 	.word	0x200100b4
 8009ebc:	200100c0 	.word	0x200100c0

08009ec0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8009ec0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009ef8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8009ec4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8009ec6:	e003      	b.n	8009ed0 <LoopCopyDataInit>

08009ec8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8009ec8:	4b0c      	ldr	r3, [pc, #48]	; (8009efc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8009eca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8009ecc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8009ece:	3104      	adds	r1, #4

08009ed0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8009ed0:	480b      	ldr	r0, [pc, #44]	; (8009f00 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8009ed2:	4b0c      	ldr	r3, [pc, #48]	; (8009f04 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8009ed4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8009ed6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8009ed8:	d3f6      	bcc.n	8009ec8 <CopyDataInit>
  ldr  r2, =_sbss
 8009eda:	4a0b      	ldr	r2, [pc, #44]	; (8009f08 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8009edc:	e002      	b.n	8009ee4 <LoopFillZerobss>

08009ede <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8009ede:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8009ee0:	f842 3b04 	str.w	r3, [r2], #4

08009ee4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8009ee4:	4b09      	ldr	r3, [pc, #36]	; (8009f0c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8009ee6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8009ee8:	d3f9      	bcc.n	8009ede <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8009eea:	f7ff fb11 	bl	8009510 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8009eee:	f000 f81b 	bl	8009f28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8009ef2:	f7fd ff4b 	bl	8007d8c <main>
  bx  lr    
 8009ef6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8009ef8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8009efc:	080717d0 	.word	0x080717d0
  ldr  r0, =_sdata
 8009f00:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8009f04:	200004f0 	.word	0x200004f0
  ldr  r2, =_sbss
 8009f08:	200004f0 	.word	0x200004f0
  ldr  r3, = _ebss
 8009f0c:	200100fc 	.word	0x200100fc

08009f10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009f10:	e7fe      	b.n	8009f10 <ADC_IRQHandler>

08009f12 <__aeabi_memclr>:
 8009f12:	2200      	movs	r2, #0
 8009f14:	f7f9 bdcc 	b.w	8003ab0 <__aeabi_memset>

08009f18 <__aeabi_memcpy>:
 8009f18:	f000 b839 	b.w	8009f8e <memcpy>

08009f1c <__errno>:
 8009f1c:	4b01      	ldr	r3, [pc, #4]	; (8009f24 <__errno+0x8>)
 8009f1e:	6818      	ldr	r0, [r3, #0]
 8009f20:	4770      	bx	lr
 8009f22:	bf00      	nop
 8009f24:	20000488 	.word	0x20000488

08009f28 <__libc_init_array>:
 8009f28:	b570      	push	{r4, r5, r6, lr}
 8009f2a:	4e0d      	ldr	r6, [pc, #52]	; (8009f60 <__libc_init_array+0x38>)
 8009f2c:	4c0d      	ldr	r4, [pc, #52]	; (8009f64 <__libc_init_array+0x3c>)
 8009f2e:	1ba4      	subs	r4, r4, r6
 8009f30:	10a4      	asrs	r4, r4, #2
 8009f32:	2500      	movs	r5, #0
 8009f34:	42a5      	cmp	r5, r4
 8009f36:	d109      	bne.n	8009f4c <__libc_init_array+0x24>
 8009f38:	4e0b      	ldr	r6, [pc, #44]	; (8009f68 <__libc_init_array+0x40>)
 8009f3a:	4c0c      	ldr	r4, [pc, #48]	; (8009f6c <__libc_init_array+0x44>)
 8009f3c:	f002 f85e 	bl	800bffc <_init>
 8009f40:	1ba4      	subs	r4, r4, r6
 8009f42:	10a4      	asrs	r4, r4, #2
 8009f44:	2500      	movs	r5, #0
 8009f46:	42a5      	cmp	r5, r4
 8009f48:	d105      	bne.n	8009f56 <__libc_init_array+0x2e>
 8009f4a:	bd70      	pop	{r4, r5, r6, pc}
 8009f4c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009f50:	4798      	blx	r3
 8009f52:	3501      	adds	r5, #1
 8009f54:	e7ee      	b.n	8009f34 <__libc_init_array+0xc>
 8009f56:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009f5a:	4798      	blx	r3
 8009f5c:	3501      	adds	r5, #1
 8009f5e:	e7f2      	b.n	8009f46 <__libc_init_array+0x1e>
 8009f60:	080717c8 	.word	0x080717c8
 8009f64:	080717c8 	.word	0x080717c8
 8009f68:	080717c8 	.word	0x080717c8
 8009f6c:	080717cc 	.word	0x080717cc

08009f70 <memcmp>:
 8009f70:	b530      	push	{r4, r5, lr}
 8009f72:	2400      	movs	r4, #0
 8009f74:	42a2      	cmp	r2, r4
 8009f76:	d101      	bne.n	8009f7c <memcmp+0xc>
 8009f78:	2000      	movs	r0, #0
 8009f7a:	e007      	b.n	8009f8c <memcmp+0x1c>
 8009f7c:	5d03      	ldrb	r3, [r0, r4]
 8009f7e:	3401      	adds	r4, #1
 8009f80:	190d      	adds	r5, r1, r4
 8009f82:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8009f86:	42ab      	cmp	r3, r5
 8009f88:	d0f4      	beq.n	8009f74 <memcmp+0x4>
 8009f8a:	1b58      	subs	r0, r3, r5
 8009f8c:	bd30      	pop	{r4, r5, pc}

08009f8e <memcpy>:
 8009f8e:	b510      	push	{r4, lr}
 8009f90:	1e43      	subs	r3, r0, #1
 8009f92:	440a      	add	r2, r1
 8009f94:	4291      	cmp	r1, r2
 8009f96:	d100      	bne.n	8009f9a <memcpy+0xc>
 8009f98:	bd10      	pop	{r4, pc}
 8009f9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009f9e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009fa2:	e7f7      	b.n	8009f94 <memcpy+0x6>

08009fa4 <memset>:
 8009fa4:	4402      	add	r2, r0
 8009fa6:	4603      	mov	r3, r0
 8009fa8:	4293      	cmp	r3, r2
 8009faa:	d100      	bne.n	8009fae <memset+0xa>
 8009fac:	4770      	bx	lr
 8009fae:	f803 1b01 	strb.w	r1, [r3], #1
 8009fb2:	e7f9      	b.n	8009fa8 <memset+0x4>

08009fb4 <iprintf>:
 8009fb4:	b40f      	push	{r0, r1, r2, r3}
 8009fb6:	4b0a      	ldr	r3, [pc, #40]	; (8009fe0 <iprintf+0x2c>)
 8009fb8:	b513      	push	{r0, r1, r4, lr}
 8009fba:	681c      	ldr	r4, [r3, #0]
 8009fbc:	b124      	cbz	r4, 8009fc8 <iprintf+0x14>
 8009fbe:	69a3      	ldr	r3, [r4, #24]
 8009fc0:	b913      	cbnz	r3, 8009fc8 <iprintf+0x14>
 8009fc2:	4620      	mov	r0, r4
 8009fc4:	f000 f84e 	bl	800a064 <__sinit>
 8009fc8:	ab05      	add	r3, sp, #20
 8009fca:	9a04      	ldr	r2, [sp, #16]
 8009fcc:	68a1      	ldr	r1, [r4, #8]
 8009fce:	9301      	str	r3, [sp, #4]
 8009fd0:	4620      	mov	r0, r4
 8009fd2:	f000 f955 	bl	800a280 <_vfiprintf_r>
 8009fd6:	b002      	add	sp, #8
 8009fd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009fdc:	b004      	add	sp, #16
 8009fde:	4770      	bx	lr
 8009fe0:	20000488 	.word	0x20000488

08009fe4 <std>:
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	b510      	push	{r4, lr}
 8009fe8:	4604      	mov	r4, r0
 8009fea:	e9c0 3300 	strd	r3, r3, [r0]
 8009fee:	6083      	str	r3, [r0, #8]
 8009ff0:	8181      	strh	r1, [r0, #12]
 8009ff2:	6643      	str	r3, [r0, #100]	; 0x64
 8009ff4:	81c2      	strh	r2, [r0, #14]
 8009ff6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009ffa:	6183      	str	r3, [r0, #24]
 8009ffc:	4619      	mov	r1, r3
 8009ffe:	2208      	movs	r2, #8
 800a000:	305c      	adds	r0, #92	; 0x5c
 800a002:	f7ff ffcf 	bl	8009fa4 <memset>
 800a006:	4b05      	ldr	r3, [pc, #20]	; (800a01c <std+0x38>)
 800a008:	6263      	str	r3, [r4, #36]	; 0x24
 800a00a:	4b05      	ldr	r3, [pc, #20]	; (800a020 <std+0x3c>)
 800a00c:	62a3      	str	r3, [r4, #40]	; 0x28
 800a00e:	4b05      	ldr	r3, [pc, #20]	; (800a024 <std+0x40>)
 800a010:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a012:	4b05      	ldr	r3, [pc, #20]	; (800a028 <std+0x44>)
 800a014:	6224      	str	r4, [r4, #32]
 800a016:	6323      	str	r3, [r4, #48]	; 0x30
 800a018:	bd10      	pop	{r4, pc}
 800a01a:	bf00      	nop
 800a01c:	0800a7dd 	.word	0x0800a7dd
 800a020:	0800a7ff 	.word	0x0800a7ff
 800a024:	0800a837 	.word	0x0800a837
 800a028:	0800a85b 	.word	0x0800a85b

0800a02c <_cleanup_r>:
 800a02c:	4901      	ldr	r1, [pc, #4]	; (800a034 <_cleanup_r+0x8>)
 800a02e:	f000 b885 	b.w	800a13c <_fwalk_reent>
 800a032:	bf00      	nop
 800a034:	0800ab35 	.word	0x0800ab35

0800a038 <__sfmoreglue>:
 800a038:	b570      	push	{r4, r5, r6, lr}
 800a03a:	1e4a      	subs	r2, r1, #1
 800a03c:	2568      	movs	r5, #104	; 0x68
 800a03e:	4355      	muls	r5, r2
 800a040:	460e      	mov	r6, r1
 800a042:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a046:	f000 f897 	bl	800a178 <_malloc_r>
 800a04a:	4604      	mov	r4, r0
 800a04c:	b140      	cbz	r0, 800a060 <__sfmoreglue+0x28>
 800a04e:	2100      	movs	r1, #0
 800a050:	e9c0 1600 	strd	r1, r6, [r0]
 800a054:	300c      	adds	r0, #12
 800a056:	60a0      	str	r0, [r4, #8]
 800a058:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a05c:	f7ff ffa2 	bl	8009fa4 <memset>
 800a060:	4620      	mov	r0, r4
 800a062:	bd70      	pop	{r4, r5, r6, pc}

0800a064 <__sinit>:
 800a064:	6983      	ldr	r3, [r0, #24]
 800a066:	b510      	push	{r4, lr}
 800a068:	4604      	mov	r4, r0
 800a06a:	bb33      	cbnz	r3, 800a0ba <__sinit+0x56>
 800a06c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800a070:	6503      	str	r3, [r0, #80]	; 0x50
 800a072:	4b12      	ldr	r3, [pc, #72]	; (800a0bc <__sinit+0x58>)
 800a074:	4a12      	ldr	r2, [pc, #72]	; (800a0c0 <__sinit+0x5c>)
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	6282      	str	r2, [r0, #40]	; 0x28
 800a07a:	4298      	cmp	r0, r3
 800a07c:	bf04      	itt	eq
 800a07e:	2301      	moveq	r3, #1
 800a080:	6183      	streq	r3, [r0, #24]
 800a082:	f000 f81f 	bl	800a0c4 <__sfp>
 800a086:	6060      	str	r0, [r4, #4]
 800a088:	4620      	mov	r0, r4
 800a08a:	f000 f81b 	bl	800a0c4 <__sfp>
 800a08e:	60a0      	str	r0, [r4, #8]
 800a090:	4620      	mov	r0, r4
 800a092:	f000 f817 	bl	800a0c4 <__sfp>
 800a096:	2200      	movs	r2, #0
 800a098:	60e0      	str	r0, [r4, #12]
 800a09a:	2104      	movs	r1, #4
 800a09c:	6860      	ldr	r0, [r4, #4]
 800a09e:	f7ff ffa1 	bl	8009fe4 <std>
 800a0a2:	2201      	movs	r2, #1
 800a0a4:	2109      	movs	r1, #9
 800a0a6:	68a0      	ldr	r0, [r4, #8]
 800a0a8:	f7ff ff9c 	bl	8009fe4 <std>
 800a0ac:	2202      	movs	r2, #2
 800a0ae:	2112      	movs	r1, #18
 800a0b0:	68e0      	ldr	r0, [r4, #12]
 800a0b2:	f7ff ff97 	bl	8009fe4 <std>
 800a0b6:	2301      	movs	r3, #1
 800a0b8:	61a3      	str	r3, [r4, #24]
 800a0ba:	bd10      	pop	{r4, pc}
 800a0bc:	080716e0 	.word	0x080716e0
 800a0c0:	0800a02d 	.word	0x0800a02d

0800a0c4 <__sfp>:
 800a0c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0c6:	4b1b      	ldr	r3, [pc, #108]	; (800a134 <__sfp+0x70>)
 800a0c8:	681e      	ldr	r6, [r3, #0]
 800a0ca:	69b3      	ldr	r3, [r6, #24]
 800a0cc:	4607      	mov	r7, r0
 800a0ce:	b913      	cbnz	r3, 800a0d6 <__sfp+0x12>
 800a0d0:	4630      	mov	r0, r6
 800a0d2:	f7ff ffc7 	bl	800a064 <__sinit>
 800a0d6:	3648      	adds	r6, #72	; 0x48
 800a0d8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a0dc:	3b01      	subs	r3, #1
 800a0de:	d503      	bpl.n	800a0e8 <__sfp+0x24>
 800a0e0:	6833      	ldr	r3, [r6, #0]
 800a0e2:	b133      	cbz	r3, 800a0f2 <__sfp+0x2e>
 800a0e4:	6836      	ldr	r6, [r6, #0]
 800a0e6:	e7f7      	b.n	800a0d8 <__sfp+0x14>
 800a0e8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a0ec:	b16d      	cbz	r5, 800a10a <__sfp+0x46>
 800a0ee:	3468      	adds	r4, #104	; 0x68
 800a0f0:	e7f4      	b.n	800a0dc <__sfp+0x18>
 800a0f2:	2104      	movs	r1, #4
 800a0f4:	4638      	mov	r0, r7
 800a0f6:	f7ff ff9f 	bl	800a038 <__sfmoreglue>
 800a0fa:	6030      	str	r0, [r6, #0]
 800a0fc:	2800      	cmp	r0, #0
 800a0fe:	d1f1      	bne.n	800a0e4 <__sfp+0x20>
 800a100:	230c      	movs	r3, #12
 800a102:	603b      	str	r3, [r7, #0]
 800a104:	4604      	mov	r4, r0
 800a106:	4620      	mov	r0, r4
 800a108:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a10a:	4b0b      	ldr	r3, [pc, #44]	; (800a138 <__sfp+0x74>)
 800a10c:	6665      	str	r5, [r4, #100]	; 0x64
 800a10e:	e9c4 5500 	strd	r5, r5, [r4]
 800a112:	60a5      	str	r5, [r4, #8]
 800a114:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800a118:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800a11c:	2208      	movs	r2, #8
 800a11e:	4629      	mov	r1, r5
 800a120:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a124:	f7ff ff3e 	bl	8009fa4 <memset>
 800a128:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a12c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a130:	e7e9      	b.n	800a106 <__sfp+0x42>
 800a132:	bf00      	nop
 800a134:	080716e0 	.word	0x080716e0
 800a138:	ffff0001 	.word	0xffff0001

0800a13c <_fwalk_reent>:
 800a13c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a140:	4680      	mov	r8, r0
 800a142:	4689      	mov	r9, r1
 800a144:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a148:	2600      	movs	r6, #0
 800a14a:	b914      	cbnz	r4, 800a152 <_fwalk_reent+0x16>
 800a14c:	4630      	mov	r0, r6
 800a14e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a152:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800a156:	3f01      	subs	r7, #1
 800a158:	d501      	bpl.n	800a15e <_fwalk_reent+0x22>
 800a15a:	6824      	ldr	r4, [r4, #0]
 800a15c:	e7f5      	b.n	800a14a <_fwalk_reent+0xe>
 800a15e:	89ab      	ldrh	r3, [r5, #12]
 800a160:	2b01      	cmp	r3, #1
 800a162:	d907      	bls.n	800a174 <_fwalk_reent+0x38>
 800a164:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a168:	3301      	adds	r3, #1
 800a16a:	d003      	beq.n	800a174 <_fwalk_reent+0x38>
 800a16c:	4629      	mov	r1, r5
 800a16e:	4640      	mov	r0, r8
 800a170:	47c8      	blx	r9
 800a172:	4306      	orrs	r6, r0
 800a174:	3568      	adds	r5, #104	; 0x68
 800a176:	e7ee      	b.n	800a156 <_fwalk_reent+0x1a>

0800a178 <_malloc_r>:
 800a178:	b570      	push	{r4, r5, r6, lr}
 800a17a:	1ccd      	adds	r5, r1, #3
 800a17c:	f025 0503 	bic.w	r5, r5, #3
 800a180:	3508      	adds	r5, #8
 800a182:	2d0c      	cmp	r5, #12
 800a184:	bf38      	it	cc
 800a186:	250c      	movcc	r5, #12
 800a188:	2d00      	cmp	r5, #0
 800a18a:	4606      	mov	r6, r0
 800a18c:	db01      	blt.n	800a192 <_malloc_r+0x1a>
 800a18e:	42a9      	cmp	r1, r5
 800a190:	d903      	bls.n	800a19a <_malloc_r+0x22>
 800a192:	230c      	movs	r3, #12
 800a194:	6033      	str	r3, [r6, #0]
 800a196:	2000      	movs	r0, #0
 800a198:	bd70      	pop	{r4, r5, r6, pc}
 800a19a:	f000 fd6b 	bl	800ac74 <__malloc_lock>
 800a19e:	4a21      	ldr	r2, [pc, #132]	; (800a224 <_malloc_r+0xac>)
 800a1a0:	6814      	ldr	r4, [r2, #0]
 800a1a2:	4621      	mov	r1, r4
 800a1a4:	b991      	cbnz	r1, 800a1cc <_malloc_r+0x54>
 800a1a6:	4c20      	ldr	r4, [pc, #128]	; (800a228 <_malloc_r+0xb0>)
 800a1a8:	6823      	ldr	r3, [r4, #0]
 800a1aa:	b91b      	cbnz	r3, 800a1b4 <_malloc_r+0x3c>
 800a1ac:	4630      	mov	r0, r6
 800a1ae:	f000 fb05 	bl	800a7bc <_sbrk_r>
 800a1b2:	6020      	str	r0, [r4, #0]
 800a1b4:	4629      	mov	r1, r5
 800a1b6:	4630      	mov	r0, r6
 800a1b8:	f000 fb00 	bl	800a7bc <_sbrk_r>
 800a1bc:	1c43      	adds	r3, r0, #1
 800a1be:	d124      	bne.n	800a20a <_malloc_r+0x92>
 800a1c0:	230c      	movs	r3, #12
 800a1c2:	6033      	str	r3, [r6, #0]
 800a1c4:	4630      	mov	r0, r6
 800a1c6:	f000 fd56 	bl	800ac76 <__malloc_unlock>
 800a1ca:	e7e4      	b.n	800a196 <_malloc_r+0x1e>
 800a1cc:	680b      	ldr	r3, [r1, #0]
 800a1ce:	1b5b      	subs	r3, r3, r5
 800a1d0:	d418      	bmi.n	800a204 <_malloc_r+0x8c>
 800a1d2:	2b0b      	cmp	r3, #11
 800a1d4:	d90f      	bls.n	800a1f6 <_malloc_r+0x7e>
 800a1d6:	600b      	str	r3, [r1, #0]
 800a1d8:	50cd      	str	r5, [r1, r3]
 800a1da:	18cc      	adds	r4, r1, r3
 800a1dc:	4630      	mov	r0, r6
 800a1de:	f000 fd4a 	bl	800ac76 <__malloc_unlock>
 800a1e2:	f104 000b 	add.w	r0, r4, #11
 800a1e6:	1d23      	adds	r3, r4, #4
 800a1e8:	f020 0007 	bic.w	r0, r0, #7
 800a1ec:	1ac3      	subs	r3, r0, r3
 800a1ee:	d0d3      	beq.n	800a198 <_malloc_r+0x20>
 800a1f0:	425a      	negs	r2, r3
 800a1f2:	50e2      	str	r2, [r4, r3]
 800a1f4:	e7d0      	b.n	800a198 <_malloc_r+0x20>
 800a1f6:	428c      	cmp	r4, r1
 800a1f8:	684b      	ldr	r3, [r1, #4]
 800a1fa:	bf16      	itet	ne
 800a1fc:	6063      	strne	r3, [r4, #4]
 800a1fe:	6013      	streq	r3, [r2, #0]
 800a200:	460c      	movne	r4, r1
 800a202:	e7eb      	b.n	800a1dc <_malloc_r+0x64>
 800a204:	460c      	mov	r4, r1
 800a206:	6849      	ldr	r1, [r1, #4]
 800a208:	e7cc      	b.n	800a1a4 <_malloc_r+0x2c>
 800a20a:	1cc4      	adds	r4, r0, #3
 800a20c:	f024 0403 	bic.w	r4, r4, #3
 800a210:	42a0      	cmp	r0, r4
 800a212:	d005      	beq.n	800a220 <_malloc_r+0xa8>
 800a214:	1a21      	subs	r1, r4, r0
 800a216:	4630      	mov	r0, r6
 800a218:	f000 fad0 	bl	800a7bc <_sbrk_r>
 800a21c:	3001      	adds	r0, #1
 800a21e:	d0cf      	beq.n	800a1c0 <_malloc_r+0x48>
 800a220:	6025      	str	r5, [r4, #0]
 800a222:	e7db      	b.n	800a1dc <_malloc_r+0x64>
 800a224:	200019f8 	.word	0x200019f8
 800a228:	200019fc 	.word	0x200019fc

0800a22c <__sfputc_r>:
 800a22c:	6893      	ldr	r3, [r2, #8]
 800a22e:	3b01      	subs	r3, #1
 800a230:	2b00      	cmp	r3, #0
 800a232:	b410      	push	{r4}
 800a234:	6093      	str	r3, [r2, #8]
 800a236:	da08      	bge.n	800a24a <__sfputc_r+0x1e>
 800a238:	6994      	ldr	r4, [r2, #24]
 800a23a:	42a3      	cmp	r3, r4
 800a23c:	db01      	blt.n	800a242 <__sfputc_r+0x16>
 800a23e:	290a      	cmp	r1, #10
 800a240:	d103      	bne.n	800a24a <__sfputc_r+0x1e>
 800a242:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a246:	f000 bb0d 	b.w	800a864 <__swbuf_r>
 800a24a:	6813      	ldr	r3, [r2, #0]
 800a24c:	1c58      	adds	r0, r3, #1
 800a24e:	6010      	str	r0, [r2, #0]
 800a250:	7019      	strb	r1, [r3, #0]
 800a252:	4608      	mov	r0, r1
 800a254:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a258:	4770      	bx	lr

0800a25a <__sfputs_r>:
 800a25a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a25c:	4606      	mov	r6, r0
 800a25e:	460f      	mov	r7, r1
 800a260:	4614      	mov	r4, r2
 800a262:	18d5      	adds	r5, r2, r3
 800a264:	42ac      	cmp	r4, r5
 800a266:	d101      	bne.n	800a26c <__sfputs_r+0x12>
 800a268:	2000      	movs	r0, #0
 800a26a:	e007      	b.n	800a27c <__sfputs_r+0x22>
 800a26c:	463a      	mov	r2, r7
 800a26e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a272:	4630      	mov	r0, r6
 800a274:	f7ff ffda 	bl	800a22c <__sfputc_r>
 800a278:	1c43      	adds	r3, r0, #1
 800a27a:	d1f3      	bne.n	800a264 <__sfputs_r+0xa>
 800a27c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a280 <_vfiprintf_r>:
 800a280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a284:	460c      	mov	r4, r1
 800a286:	b09d      	sub	sp, #116	; 0x74
 800a288:	4617      	mov	r7, r2
 800a28a:	461d      	mov	r5, r3
 800a28c:	4606      	mov	r6, r0
 800a28e:	b118      	cbz	r0, 800a298 <_vfiprintf_r+0x18>
 800a290:	6983      	ldr	r3, [r0, #24]
 800a292:	b90b      	cbnz	r3, 800a298 <_vfiprintf_r+0x18>
 800a294:	f7ff fee6 	bl	800a064 <__sinit>
 800a298:	4b7c      	ldr	r3, [pc, #496]	; (800a48c <_vfiprintf_r+0x20c>)
 800a29a:	429c      	cmp	r4, r3
 800a29c:	d158      	bne.n	800a350 <_vfiprintf_r+0xd0>
 800a29e:	6874      	ldr	r4, [r6, #4]
 800a2a0:	89a3      	ldrh	r3, [r4, #12]
 800a2a2:	0718      	lsls	r0, r3, #28
 800a2a4:	d55e      	bpl.n	800a364 <_vfiprintf_r+0xe4>
 800a2a6:	6923      	ldr	r3, [r4, #16]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d05b      	beq.n	800a364 <_vfiprintf_r+0xe4>
 800a2ac:	2300      	movs	r3, #0
 800a2ae:	9309      	str	r3, [sp, #36]	; 0x24
 800a2b0:	2320      	movs	r3, #32
 800a2b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a2b6:	2330      	movs	r3, #48	; 0x30
 800a2b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a2bc:	9503      	str	r5, [sp, #12]
 800a2be:	f04f 0b01 	mov.w	fp, #1
 800a2c2:	46b8      	mov	r8, r7
 800a2c4:	4645      	mov	r5, r8
 800a2c6:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a2ca:	b10b      	cbz	r3, 800a2d0 <_vfiprintf_r+0x50>
 800a2cc:	2b25      	cmp	r3, #37	; 0x25
 800a2ce:	d154      	bne.n	800a37a <_vfiprintf_r+0xfa>
 800a2d0:	ebb8 0a07 	subs.w	sl, r8, r7
 800a2d4:	d00b      	beq.n	800a2ee <_vfiprintf_r+0x6e>
 800a2d6:	4653      	mov	r3, sl
 800a2d8:	463a      	mov	r2, r7
 800a2da:	4621      	mov	r1, r4
 800a2dc:	4630      	mov	r0, r6
 800a2de:	f7ff ffbc 	bl	800a25a <__sfputs_r>
 800a2e2:	3001      	adds	r0, #1
 800a2e4:	f000 80c2 	beq.w	800a46c <_vfiprintf_r+0x1ec>
 800a2e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2ea:	4453      	add	r3, sl
 800a2ec:	9309      	str	r3, [sp, #36]	; 0x24
 800a2ee:	f898 3000 	ldrb.w	r3, [r8]
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	f000 80ba 	beq.w	800a46c <_vfiprintf_r+0x1ec>
 800a2f8:	2300      	movs	r3, #0
 800a2fa:	f04f 32ff 	mov.w	r2, #4294967295
 800a2fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a302:	9304      	str	r3, [sp, #16]
 800a304:	9307      	str	r3, [sp, #28]
 800a306:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a30a:	931a      	str	r3, [sp, #104]	; 0x68
 800a30c:	46a8      	mov	r8, r5
 800a30e:	2205      	movs	r2, #5
 800a310:	f818 1b01 	ldrb.w	r1, [r8], #1
 800a314:	485e      	ldr	r0, [pc, #376]	; (800a490 <_vfiprintf_r+0x210>)
 800a316:	f7f9 fc1b 	bl	8003b50 <memchr>
 800a31a:	9b04      	ldr	r3, [sp, #16]
 800a31c:	bb78      	cbnz	r0, 800a37e <_vfiprintf_r+0xfe>
 800a31e:	06d9      	lsls	r1, r3, #27
 800a320:	bf44      	itt	mi
 800a322:	2220      	movmi	r2, #32
 800a324:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a328:	071a      	lsls	r2, r3, #28
 800a32a:	bf44      	itt	mi
 800a32c:	222b      	movmi	r2, #43	; 0x2b
 800a32e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a332:	782a      	ldrb	r2, [r5, #0]
 800a334:	2a2a      	cmp	r2, #42	; 0x2a
 800a336:	d02a      	beq.n	800a38e <_vfiprintf_r+0x10e>
 800a338:	9a07      	ldr	r2, [sp, #28]
 800a33a:	46a8      	mov	r8, r5
 800a33c:	2000      	movs	r0, #0
 800a33e:	250a      	movs	r5, #10
 800a340:	4641      	mov	r1, r8
 800a342:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a346:	3b30      	subs	r3, #48	; 0x30
 800a348:	2b09      	cmp	r3, #9
 800a34a:	d969      	bls.n	800a420 <_vfiprintf_r+0x1a0>
 800a34c:	b360      	cbz	r0, 800a3a8 <_vfiprintf_r+0x128>
 800a34e:	e024      	b.n	800a39a <_vfiprintf_r+0x11a>
 800a350:	4b50      	ldr	r3, [pc, #320]	; (800a494 <_vfiprintf_r+0x214>)
 800a352:	429c      	cmp	r4, r3
 800a354:	d101      	bne.n	800a35a <_vfiprintf_r+0xda>
 800a356:	68b4      	ldr	r4, [r6, #8]
 800a358:	e7a2      	b.n	800a2a0 <_vfiprintf_r+0x20>
 800a35a:	4b4f      	ldr	r3, [pc, #316]	; (800a498 <_vfiprintf_r+0x218>)
 800a35c:	429c      	cmp	r4, r3
 800a35e:	bf08      	it	eq
 800a360:	68f4      	ldreq	r4, [r6, #12]
 800a362:	e79d      	b.n	800a2a0 <_vfiprintf_r+0x20>
 800a364:	4621      	mov	r1, r4
 800a366:	4630      	mov	r0, r6
 800a368:	f000 fae0 	bl	800a92c <__swsetup_r>
 800a36c:	2800      	cmp	r0, #0
 800a36e:	d09d      	beq.n	800a2ac <_vfiprintf_r+0x2c>
 800a370:	f04f 30ff 	mov.w	r0, #4294967295
 800a374:	b01d      	add	sp, #116	; 0x74
 800a376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a37a:	46a8      	mov	r8, r5
 800a37c:	e7a2      	b.n	800a2c4 <_vfiprintf_r+0x44>
 800a37e:	4a44      	ldr	r2, [pc, #272]	; (800a490 <_vfiprintf_r+0x210>)
 800a380:	1a80      	subs	r0, r0, r2
 800a382:	fa0b f000 	lsl.w	r0, fp, r0
 800a386:	4318      	orrs	r0, r3
 800a388:	9004      	str	r0, [sp, #16]
 800a38a:	4645      	mov	r5, r8
 800a38c:	e7be      	b.n	800a30c <_vfiprintf_r+0x8c>
 800a38e:	9a03      	ldr	r2, [sp, #12]
 800a390:	1d11      	adds	r1, r2, #4
 800a392:	6812      	ldr	r2, [r2, #0]
 800a394:	9103      	str	r1, [sp, #12]
 800a396:	2a00      	cmp	r2, #0
 800a398:	db01      	blt.n	800a39e <_vfiprintf_r+0x11e>
 800a39a:	9207      	str	r2, [sp, #28]
 800a39c:	e004      	b.n	800a3a8 <_vfiprintf_r+0x128>
 800a39e:	4252      	negs	r2, r2
 800a3a0:	f043 0302 	orr.w	r3, r3, #2
 800a3a4:	9207      	str	r2, [sp, #28]
 800a3a6:	9304      	str	r3, [sp, #16]
 800a3a8:	f898 3000 	ldrb.w	r3, [r8]
 800a3ac:	2b2e      	cmp	r3, #46	; 0x2e
 800a3ae:	d10e      	bne.n	800a3ce <_vfiprintf_r+0x14e>
 800a3b0:	f898 3001 	ldrb.w	r3, [r8, #1]
 800a3b4:	2b2a      	cmp	r3, #42	; 0x2a
 800a3b6:	d138      	bne.n	800a42a <_vfiprintf_r+0x1aa>
 800a3b8:	9b03      	ldr	r3, [sp, #12]
 800a3ba:	1d1a      	adds	r2, r3, #4
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	9203      	str	r2, [sp, #12]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	bfb8      	it	lt
 800a3c4:	f04f 33ff 	movlt.w	r3, #4294967295
 800a3c8:	f108 0802 	add.w	r8, r8, #2
 800a3cc:	9305      	str	r3, [sp, #20]
 800a3ce:	4d33      	ldr	r5, [pc, #204]	; (800a49c <_vfiprintf_r+0x21c>)
 800a3d0:	f898 1000 	ldrb.w	r1, [r8]
 800a3d4:	2203      	movs	r2, #3
 800a3d6:	4628      	mov	r0, r5
 800a3d8:	f7f9 fbba 	bl	8003b50 <memchr>
 800a3dc:	b140      	cbz	r0, 800a3f0 <_vfiprintf_r+0x170>
 800a3de:	2340      	movs	r3, #64	; 0x40
 800a3e0:	1b40      	subs	r0, r0, r5
 800a3e2:	fa03 f000 	lsl.w	r0, r3, r0
 800a3e6:	9b04      	ldr	r3, [sp, #16]
 800a3e8:	4303      	orrs	r3, r0
 800a3ea:	f108 0801 	add.w	r8, r8, #1
 800a3ee:	9304      	str	r3, [sp, #16]
 800a3f0:	f898 1000 	ldrb.w	r1, [r8]
 800a3f4:	482a      	ldr	r0, [pc, #168]	; (800a4a0 <_vfiprintf_r+0x220>)
 800a3f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a3fa:	2206      	movs	r2, #6
 800a3fc:	f108 0701 	add.w	r7, r8, #1
 800a400:	f7f9 fba6 	bl	8003b50 <memchr>
 800a404:	2800      	cmp	r0, #0
 800a406:	d037      	beq.n	800a478 <_vfiprintf_r+0x1f8>
 800a408:	4b26      	ldr	r3, [pc, #152]	; (800a4a4 <_vfiprintf_r+0x224>)
 800a40a:	bb1b      	cbnz	r3, 800a454 <_vfiprintf_r+0x1d4>
 800a40c:	9b03      	ldr	r3, [sp, #12]
 800a40e:	3307      	adds	r3, #7
 800a410:	f023 0307 	bic.w	r3, r3, #7
 800a414:	3308      	adds	r3, #8
 800a416:	9303      	str	r3, [sp, #12]
 800a418:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a41a:	444b      	add	r3, r9
 800a41c:	9309      	str	r3, [sp, #36]	; 0x24
 800a41e:	e750      	b.n	800a2c2 <_vfiprintf_r+0x42>
 800a420:	fb05 3202 	mla	r2, r5, r2, r3
 800a424:	2001      	movs	r0, #1
 800a426:	4688      	mov	r8, r1
 800a428:	e78a      	b.n	800a340 <_vfiprintf_r+0xc0>
 800a42a:	2300      	movs	r3, #0
 800a42c:	f108 0801 	add.w	r8, r8, #1
 800a430:	9305      	str	r3, [sp, #20]
 800a432:	4619      	mov	r1, r3
 800a434:	250a      	movs	r5, #10
 800a436:	4640      	mov	r0, r8
 800a438:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a43c:	3a30      	subs	r2, #48	; 0x30
 800a43e:	2a09      	cmp	r2, #9
 800a440:	d903      	bls.n	800a44a <_vfiprintf_r+0x1ca>
 800a442:	2b00      	cmp	r3, #0
 800a444:	d0c3      	beq.n	800a3ce <_vfiprintf_r+0x14e>
 800a446:	9105      	str	r1, [sp, #20]
 800a448:	e7c1      	b.n	800a3ce <_vfiprintf_r+0x14e>
 800a44a:	fb05 2101 	mla	r1, r5, r1, r2
 800a44e:	2301      	movs	r3, #1
 800a450:	4680      	mov	r8, r0
 800a452:	e7f0      	b.n	800a436 <_vfiprintf_r+0x1b6>
 800a454:	ab03      	add	r3, sp, #12
 800a456:	9300      	str	r3, [sp, #0]
 800a458:	4622      	mov	r2, r4
 800a45a:	4b13      	ldr	r3, [pc, #76]	; (800a4a8 <_vfiprintf_r+0x228>)
 800a45c:	a904      	add	r1, sp, #16
 800a45e:	4630      	mov	r0, r6
 800a460:	f3af 8000 	nop.w
 800a464:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a468:	4681      	mov	r9, r0
 800a46a:	d1d5      	bne.n	800a418 <_vfiprintf_r+0x198>
 800a46c:	89a3      	ldrh	r3, [r4, #12]
 800a46e:	065b      	lsls	r3, r3, #25
 800a470:	f53f af7e 	bmi.w	800a370 <_vfiprintf_r+0xf0>
 800a474:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a476:	e77d      	b.n	800a374 <_vfiprintf_r+0xf4>
 800a478:	ab03      	add	r3, sp, #12
 800a47a:	9300      	str	r3, [sp, #0]
 800a47c:	4622      	mov	r2, r4
 800a47e:	4b0a      	ldr	r3, [pc, #40]	; (800a4a8 <_vfiprintf_r+0x228>)
 800a480:	a904      	add	r1, sp, #16
 800a482:	4630      	mov	r0, r6
 800a484:	f000 f888 	bl	800a598 <_printf_i>
 800a488:	e7ec      	b.n	800a464 <_vfiprintf_r+0x1e4>
 800a48a:	bf00      	nop
 800a48c:	08071704 	.word	0x08071704
 800a490:	08071744 	.word	0x08071744
 800a494:	08071724 	.word	0x08071724
 800a498:	080716e4 	.word	0x080716e4
 800a49c:	0807174a 	.word	0x0807174a
 800a4a0:	0807174e 	.word	0x0807174e
 800a4a4:	00000000 	.word	0x00000000
 800a4a8:	0800a25b 	.word	0x0800a25b

0800a4ac <_printf_common>:
 800a4ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a4b0:	4691      	mov	r9, r2
 800a4b2:	461f      	mov	r7, r3
 800a4b4:	688a      	ldr	r2, [r1, #8]
 800a4b6:	690b      	ldr	r3, [r1, #16]
 800a4b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a4bc:	4293      	cmp	r3, r2
 800a4be:	bfb8      	it	lt
 800a4c0:	4613      	movlt	r3, r2
 800a4c2:	f8c9 3000 	str.w	r3, [r9]
 800a4c6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a4ca:	4606      	mov	r6, r0
 800a4cc:	460c      	mov	r4, r1
 800a4ce:	b112      	cbz	r2, 800a4d6 <_printf_common+0x2a>
 800a4d0:	3301      	adds	r3, #1
 800a4d2:	f8c9 3000 	str.w	r3, [r9]
 800a4d6:	6823      	ldr	r3, [r4, #0]
 800a4d8:	0699      	lsls	r1, r3, #26
 800a4da:	bf42      	ittt	mi
 800a4dc:	f8d9 3000 	ldrmi.w	r3, [r9]
 800a4e0:	3302      	addmi	r3, #2
 800a4e2:	f8c9 3000 	strmi.w	r3, [r9]
 800a4e6:	6825      	ldr	r5, [r4, #0]
 800a4e8:	f015 0506 	ands.w	r5, r5, #6
 800a4ec:	d107      	bne.n	800a4fe <_printf_common+0x52>
 800a4ee:	f104 0a19 	add.w	sl, r4, #25
 800a4f2:	68e3      	ldr	r3, [r4, #12]
 800a4f4:	f8d9 2000 	ldr.w	r2, [r9]
 800a4f8:	1a9b      	subs	r3, r3, r2
 800a4fa:	42ab      	cmp	r3, r5
 800a4fc:	dc28      	bgt.n	800a550 <_printf_common+0xa4>
 800a4fe:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800a502:	6822      	ldr	r2, [r4, #0]
 800a504:	3300      	adds	r3, #0
 800a506:	bf18      	it	ne
 800a508:	2301      	movne	r3, #1
 800a50a:	0692      	lsls	r2, r2, #26
 800a50c:	d42d      	bmi.n	800a56a <_printf_common+0xbe>
 800a50e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a512:	4639      	mov	r1, r7
 800a514:	4630      	mov	r0, r6
 800a516:	47c0      	blx	r8
 800a518:	3001      	adds	r0, #1
 800a51a:	d020      	beq.n	800a55e <_printf_common+0xb2>
 800a51c:	6823      	ldr	r3, [r4, #0]
 800a51e:	68e5      	ldr	r5, [r4, #12]
 800a520:	f8d9 2000 	ldr.w	r2, [r9]
 800a524:	f003 0306 	and.w	r3, r3, #6
 800a528:	2b04      	cmp	r3, #4
 800a52a:	bf08      	it	eq
 800a52c:	1aad      	subeq	r5, r5, r2
 800a52e:	68a3      	ldr	r3, [r4, #8]
 800a530:	6922      	ldr	r2, [r4, #16]
 800a532:	bf0c      	ite	eq
 800a534:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a538:	2500      	movne	r5, #0
 800a53a:	4293      	cmp	r3, r2
 800a53c:	bfc4      	itt	gt
 800a53e:	1a9b      	subgt	r3, r3, r2
 800a540:	18ed      	addgt	r5, r5, r3
 800a542:	f04f 0900 	mov.w	r9, #0
 800a546:	341a      	adds	r4, #26
 800a548:	454d      	cmp	r5, r9
 800a54a:	d11a      	bne.n	800a582 <_printf_common+0xd6>
 800a54c:	2000      	movs	r0, #0
 800a54e:	e008      	b.n	800a562 <_printf_common+0xb6>
 800a550:	2301      	movs	r3, #1
 800a552:	4652      	mov	r2, sl
 800a554:	4639      	mov	r1, r7
 800a556:	4630      	mov	r0, r6
 800a558:	47c0      	blx	r8
 800a55a:	3001      	adds	r0, #1
 800a55c:	d103      	bne.n	800a566 <_printf_common+0xba>
 800a55e:	f04f 30ff 	mov.w	r0, #4294967295
 800a562:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a566:	3501      	adds	r5, #1
 800a568:	e7c3      	b.n	800a4f2 <_printf_common+0x46>
 800a56a:	18e1      	adds	r1, r4, r3
 800a56c:	1c5a      	adds	r2, r3, #1
 800a56e:	2030      	movs	r0, #48	; 0x30
 800a570:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a574:	4422      	add	r2, r4
 800a576:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a57a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a57e:	3302      	adds	r3, #2
 800a580:	e7c5      	b.n	800a50e <_printf_common+0x62>
 800a582:	2301      	movs	r3, #1
 800a584:	4622      	mov	r2, r4
 800a586:	4639      	mov	r1, r7
 800a588:	4630      	mov	r0, r6
 800a58a:	47c0      	blx	r8
 800a58c:	3001      	adds	r0, #1
 800a58e:	d0e6      	beq.n	800a55e <_printf_common+0xb2>
 800a590:	f109 0901 	add.w	r9, r9, #1
 800a594:	e7d8      	b.n	800a548 <_printf_common+0x9c>
	...

0800a598 <_printf_i>:
 800a598:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a59c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800a5a0:	460c      	mov	r4, r1
 800a5a2:	7e09      	ldrb	r1, [r1, #24]
 800a5a4:	b085      	sub	sp, #20
 800a5a6:	296e      	cmp	r1, #110	; 0x6e
 800a5a8:	4617      	mov	r7, r2
 800a5aa:	4606      	mov	r6, r0
 800a5ac:	4698      	mov	r8, r3
 800a5ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a5b0:	f000 80b3 	beq.w	800a71a <_printf_i+0x182>
 800a5b4:	d822      	bhi.n	800a5fc <_printf_i+0x64>
 800a5b6:	2963      	cmp	r1, #99	; 0x63
 800a5b8:	d036      	beq.n	800a628 <_printf_i+0x90>
 800a5ba:	d80a      	bhi.n	800a5d2 <_printf_i+0x3a>
 800a5bc:	2900      	cmp	r1, #0
 800a5be:	f000 80b9 	beq.w	800a734 <_printf_i+0x19c>
 800a5c2:	2958      	cmp	r1, #88	; 0x58
 800a5c4:	f000 8083 	beq.w	800a6ce <_printf_i+0x136>
 800a5c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a5cc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800a5d0:	e032      	b.n	800a638 <_printf_i+0xa0>
 800a5d2:	2964      	cmp	r1, #100	; 0x64
 800a5d4:	d001      	beq.n	800a5da <_printf_i+0x42>
 800a5d6:	2969      	cmp	r1, #105	; 0x69
 800a5d8:	d1f6      	bne.n	800a5c8 <_printf_i+0x30>
 800a5da:	6820      	ldr	r0, [r4, #0]
 800a5dc:	6813      	ldr	r3, [r2, #0]
 800a5de:	0605      	lsls	r5, r0, #24
 800a5e0:	f103 0104 	add.w	r1, r3, #4
 800a5e4:	d52a      	bpl.n	800a63c <_printf_i+0xa4>
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	6011      	str	r1, [r2, #0]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	da03      	bge.n	800a5f6 <_printf_i+0x5e>
 800a5ee:	222d      	movs	r2, #45	; 0x2d
 800a5f0:	425b      	negs	r3, r3
 800a5f2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800a5f6:	486f      	ldr	r0, [pc, #444]	; (800a7b4 <_printf_i+0x21c>)
 800a5f8:	220a      	movs	r2, #10
 800a5fa:	e039      	b.n	800a670 <_printf_i+0xd8>
 800a5fc:	2973      	cmp	r1, #115	; 0x73
 800a5fe:	f000 809d 	beq.w	800a73c <_printf_i+0x1a4>
 800a602:	d808      	bhi.n	800a616 <_printf_i+0x7e>
 800a604:	296f      	cmp	r1, #111	; 0x6f
 800a606:	d020      	beq.n	800a64a <_printf_i+0xb2>
 800a608:	2970      	cmp	r1, #112	; 0x70
 800a60a:	d1dd      	bne.n	800a5c8 <_printf_i+0x30>
 800a60c:	6823      	ldr	r3, [r4, #0]
 800a60e:	f043 0320 	orr.w	r3, r3, #32
 800a612:	6023      	str	r3, [r4, #0]
 800a614:	e003      	b.n	800a61e <_printf_i+0x86>
 800a616:	2975      	cmp	r1, #117	; 0x75
 800a618:	d017      	beq.n	800a64a <_printf_i+0xb2>
 800a61a:	2978      	cmp	r1, #120	; 0x78
 800a61c:	d1d4      	bne.n	800a5c8 <_printf_i+0x30>
 800a61e:	2378      	movs	r3, #120	; 0x78
 800a620:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a624:	4864      	ldr	r0, [pc, #400]	; (800a7b8 <_printf_i+0x220>)
 800a626:	e055      	b.n	800a6d4 <_printf_i+0x13c>
 800a628:	6813      	ldr	r3, [r2, #0]
 800a62a:	1d19      	adds	r1, r3, #4
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	6011      	str	r1, [r2, #0]
 800a630:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a634:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a638:	2301      	movs	r3, #1
 800a63a:	e08c      	b.n	800a756 <_printf_i+0x1be>
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	6011      	str	r1, [r2, #0]
 800a640:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a644:	bf18      	it	ne
 800a646:	b21b      	sxthne	r3, r3
 800a648:	e7cf      	b.n	800a5ea <_printf_i+0x52>
 800a64a:	6813      	ldr	r3, [r2, #0]
 800a64c:	6825      	ldr	r5, [r4, #0]
 800a64e:	1d18      	adds	r0, r3, #4
 800a650:	6010      	str	r0, [r2, #0]
 800a652:	0628      	lsls	r0, r5, #24
 800a654:	d501      	bpl.n	800a65a <_printf_i+0xc2>
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	e002      	b.n	800a660 <_printf_i+0xc8>
 800a65a:	0668      	lsls	r0, r5, #25
 800a65c:	d5fb      	bpl.n	800a656 <_printf_i+0xbe>
 800a65e:	881b      	ldrh	r3, [r3, #0]
 800a660:	4854      	ldr	r0, [pc, #336]	; (800a7b4 <_printf_i+0x21c>)
 800a662:	296f      	cmp	r1, #111	; 0x6f
 800a664:	bf14      	ite	ne
 800a666:	220a      	movne	r2, #10
 800a668:	2208      	moveq	r2, #8
 800a66a:	2100      	movs	r1, #0
 800a66c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a670:	6865      	ldr	r5, [r4, #4]
 800a672:	60a5      	str	r5, [r4, #8]
 800a674:	2d00      	cmp	r5, #0
 800a676:	f2c0 8095 	blt.w	800a7a4 <_printf_i+0x20c>
 800a67a:	6821      	ldr	r1, [r4, #0]
 800a67c:	f021 0104 	bic.w	r1, r1, #4
 800a680:	6021      	str	r1, [r4, #0]
 800a682:	2b00      	cmp	r3, #0
 800a684:	d13d      	bne.n	800a702 <_printf_i+0x16a>
 800a686:	2d00      	cmp	r5, #0
 800a688:	f040 808e 	bne.w	800a7a8 <_printf_i+0x210>
 800a68c:	4665      	mov	r5, ip
 800a68e:	2a08      	cmp	r2, #8
 800a690:	d10b      	bne.n	800a6aa <_printf_i+0x112>
 800a692:	6823      	ldr	r3, [r4, #0]
 800a694:	07db      	lsls	r3, r3, #31
 800a696:	d508      	bpl.n	800a6aa <_printf_i+0x112>
 800a698:	6923      	ldr	r3, [r4, #16]
 800a69a:	6862      	ldr	r2, [r4, #4]
 800a69c:	429a      	cmp	r2, r3
 800a69e:	bfde      	ittt	le
 800a6a0:	2330      	movle	r3, #48	; 0x30
 800a6a2:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a6a6:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a6aa:	ebac 0305 	sub.w	r3, ip, r5
 800a6ae:	6123      	str	r3, [r4, #16]
 800a6b0:	f8cd 8000 	str.w	r8, [sp]
 800a6b4:	463b      	mov	r3, r7
 800a6b6:	aa03      	add	r2, sp, #12
 800a6b8:	4621      	mov	r1, r4
 800a6ba:	4630      	mov	r0, r6
 800a6bc:	f7ff fef6 	bl	800a4ac <_printf_common>
 800a6c0:	3001      	adds	r0, #1
 800a6c2:	d14d      	bne.n	800a760 <_printf_i+0x1c8>
 800a6c4:	f04f 30ff 	mov.w	r0, #4294967295
 800a6c8:	b005      	add	sp, #20
 800a6ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a6ce:	4839      	ldr	r0, [pc, #228]	; (800a7b4 <_printf_i+0x21c>)
 800a6d0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800a6d4:	6813      	ldr	r3, [r2, #0]
 800a6d6:	6821      	ldr	r1, [r4, #0]
 800a6d8:	1d1d      	adds	r5, r3, #4
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	6015      	str	r5, [r2, #0]
 800a6de:	060a      	lsls	r2, r1, #24
 800a6e0:	d50b      	bpl.n	800a6fa <_printf_i+0x162>
 800a6e2:	07ca      	lsls	r2, r1, #31
 800a6e4:	bf44      	itt	mi
 800a6e6:	f041 0120 	orrmi.w	r1, r1, #32
 800a6ea:	6021      	strmi	r1, [r4, #0]
 800a6ec:	b91b      	cbnz	r3, 800a6f6 <_printf_i+0x15e>
 800a6ee:	6822      	ldr	r2, [r4, #0]
 800a6f0:	f022 0220 	bic.w	r2, r2, #32
 800a6f4:	6022      	str	r2, [r4, #0]
 800a6f6:	2210      	movs	r2, #16
 800a6f8:	e7b7      	b.n	800a66a <_printf_i+0xd2>
 800a6fa:	064d      	lsls	r5, r1, #25
 800a6fc:	bf48      	it	mi
 800a6fe:	b29b      	uxthmi	r3, r3
 800a700:	e7ef      	b.n	800a6e2 <_printf_i+0x14a>
 800a702:	4665      	mov	r5, ip
 800a704:	fbb3 f1f2 	udiv	r1, r3, r2
 800a708:	fb02 3311 	mls	r3, r2, r1, r3
 800a70c:	5cc3      	ldrb	r3, [r0, r3]
 800a70e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a712:	460b      	mov	r3, r1
 800a714:	2900      	cmp	r1, #0
 800a716:	d1f5      	bne.n	800a704 <_printf_i+0x16c>
 800a718:	e7b9      	b.n	800a68e <_printf_i+0xf6>
 800a71a:	6813      	ldr	r3, [r2, #0]
 800a71c:	6825      	ldr	r5, [r4, #0]
 800a71e:	6961      	ldr	r1, [r4, #20]
 800a720:	1d18      	adds	r0, r3, #4
 800a722:	6010      	str	r0, [r2, #0]
 800a724:	0628      	lsls	r0, r5, #24
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	d501      	bpl.n	800a72e <_printf_i+0x196>
 800a72a:	6019      	str	r1, [r3, #0]
 800a72c:	e002      	b.n	800a734 <_printf_i+0x19c>
 800a72e:	066a      	lsls	r2, r5, #25
 800a730:	d5fb      	bpl.n	800a72a <_printf_i+0x192>
 800a732:	8019      	strh	r1, [r3, #0]
 800a734:	2300      	movs	r3, #0
 800a736:	6123      	str	r3, [r4, #16]
 800a738:	4665      	mov	r5, ip
 800a73a:	e7b9      	b.n	800a6b0 <_printf_i+0x118>
 800a73c:	6813      	ldr	r3, [r2, #0]
 800a73e:	1d19      	adds	r1, r3, #4
 800a740:	6011      	str	r1, [r2, #0]
 800a742:	681d      	ldr	r5, [r3, #0]
 800a744:	6862      	ldr	r2, [r4, #4]
 800a746:	2100      	movs	r1, #0
 800a748:	4628      	mov	r0, r5
 800a74a:	f7f9 fa01 	bl	8003b50 <memchr>
 800a74e:	b108      	cbz	r0, 800a754 <_printf_i+0x1bc>
 800a750:	1b40      	subs	r0, r0, r5
 800a752:	6060      	str	r0, [r4, #4]
 800a754:	6863      	ldr	r3, [r4, #4]
 800a756:	6123      	str	r3, [r4, #16]
 800a758:	2300      	movs	r3, #0
 800a75a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a75e:	e7a7      	b.n	800a6b0 <_printf_i+0x118>
 800a760:	6923      	ldr	r3, [r4, #16]
 800a762:	462a      	mov	r2, r5
 800a764:	4639      	mov	r1, r7
 800a766:	4630      	mov	r0, r6
 800a768:	47c0      	blx	r8
 800a76a:	3001      	adds	r0, #1
 800a76c:	d0aa      	beq.n	800a6c4 <_printf_i+0x12c>
 800a76e:	6823      	ldr	r3, [r4, #0]
 800a770:	079b      	lsls	r3, r3, #30
 800a772:	d413      	bmi.n	800a79c <_printf_i+0x204>
 800a774:	68e0      	ldr	r0, [r4, #12]
 800a776:	9b03      	ldr	r3, [sp, #12]
 800a778:	4298      	cmp	r0, r3
 800a77a:	bfb8      	it	lt
 800a77c:	4618      	movlt	r0, r3
 800a77e:	e7a3      	b.n	800a6c8 <_printf_i+0x130>
 800a780:	2301      	movs	r3, #1
 800a782:	464a      	mov	r2, r9
 800a784:	4639      	mov	r1, r7
 800a786:	4630      	mov	r0, r6
 800a788:	47c0      	blx	r8
 800a78a:	3001      	adds	r0, #1
 800a78c:	d09a      	beq.n	800a6c4 <_printf_i+0x12c>
 800a78e:	3501      	adds	r5, #1
 800a790:	68e3      	ldr	r3, [r4, #12]
 800a792:	9a03      	ldr	r2, [sp, #12]
 800a794:	1a9b      	subs	r3, r3, r2
 800a796:	42ab      	cmp	r3, r5
 800a798:	dcf2      	bgt.n	800a780 <_printf_i+0x1e8>
 800a79a:	e7eb      	b.n	800a774 <_printf_i+0x1dc>
 800a79c:	2500      	movs	r5, #0
 800a79e:	f104 0919 	add.w	r9, r4, #25
 800a7a2:	e7f5      	b.n	800a790 <_printf_i+0x1f8>
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d1ac      	bne.n	800a702 <_printf_i+0x16a>
 800a7a8:	7803      	ldrb	r3, [r0, #0]
 800a7aa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a7ae:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a7b2:	e76c      	b.n	800a68e <_printf_i+0xf6>
 800a7b4:	08071755 	.word	0x08071755
 800a7b8:	08071766 	.word	0x08071766

0800a7bc <_sbrk_r>:
 800a7bc:	b538      	push	{r3, r4, r5, lr}
 800a7be:	4c06      	ldr	r4, [pc, #24]	; (800a7d8 <_sbrk_r+0x1c>)
 800a7c0:	2300      	movs	r3, #0
 800a7c2:	4605      	mov	r5, r0
 800a7c4:	4608      	mov	r0, r1
 800a7c6:	6023      	str	r3, [r4, #0]
 800a7c8:	f7fe fe76 	bl	80094b8 <_sbrk>
 800a7cc:	1c43      	adds	r3, r0, #1
 800a7ce:	d102      	bne.n	800a7d6 <_sbrk_r+0x1a>
 800a7d0:	6823      	ldr	r3, [r4, #0]
 800a7d2:	b103      	cbz	r3, 800a7d6 <_sbrk_r+0x1a>
 800a7d4:	602b      	str	r3, [r5, #0]
 800a7d6:	bd38      	pop	{r3, r4, r5, pc}
 800a7d8:	200100f8 	.word	0x200100f8

0800a7dc <__sread>:
 800a7dc:	b510      	push	{r4, lr}
 800a7de:	460c      	mov	r4, r1
 800a7e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7e4:	f000 fa96 	bl	800ad14 <_read_r>
 800a7e8:	2800      	cmp	r0, #0
 800a7ea:	bfab      	itete	ge
 800a7ec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a7ee:	89a3      	ldrhlt	r3, [r4, #12]
 800a7f0:	181b      	addge	r3, r3, r0
 800a7f2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a7f6:	bfac      	ite	ge
 800a7f8:	6563      	strge	r3, [r4, #84]	; 0x54
 800a7fa:	81a3      	strhlt	r3, [r4, #12]
 800a7fc:	bd10      	pop	{r4, pc}

0800a7fe <__swrite>:
 800a7fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a802:	461f      	mov	r7, r3
 800a804:	898b      	ldrh	r3, [r1, #12]
 800a806:	05db      	lsls	r3, r3, #23
 800a808:	4605      	mov	r5, r0
 800a80a:	460c      	mov	r4, r1
 800a80c:	4616      	mov	r6, r2
 800a80e:	d505      	bpl.n	800a81c <__swrite+0x1e>
 800a810:	2302      	movs	r3, #2
 800a812:	2200      	movs	r2, #0
 800a814:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a818:	f000 f9b6 	bl	800ab88 <_lseek_r>
 800a81c:	89a3      	ldrh	r3, [r4, #12]
 800a81e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a822:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a826:	81a3      	strh	r3, [r4, #12]
 800a828:	4632      	mov	r2, r6
 800a82a:	463b      	mov	r3, r7
 800a82c:	4628      	mov	r0, r5
 800a82e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a832:	f000 b869 	b.w	800a908 <_write_r>

0800a836 <__sseek>:
 800a836:	b510      	push	{r4, lr}
 800a838:	460c      	mov	r4, r1
 800a83a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a83e:	f000 f9a3 	bl	800ab88 <_lseek_r>
 800a842:	1c43      	adds	r3, r0, #1
 800a844:	89a3      	ldrh	r3, [r4, #12]
 800a846:	bf15      	itete	ne
 800a848:	6560      	strne	r0, [r4, #84]	; 0x54
 800a84a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a84e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a852:	81a3      	strheq	r3, [r4, #12]
 800a854:	bf18      	it	ne
 800a856:	81a3      	strhne	r3, [r4, #12]
 800a858:	bd10      	pop	{r4, pc}

0800a85a <__sclose>:
 800a85a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a85e:	f000 b8d3 	b.w	800aa08 <_close_r>
	...

0800a864 <__swbuf_r>:
 800a864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a866:	460e      	mov	r6, r1
 800a868:	4614      	mov	r4, r2
 800a86a:	4605      	mov	r5, r0
 800a86c:	b118      	cbz	r0, 800a876 <__swbuf_r+0x12>
 800a86e:	6983      	ldr	r3, [r0, #24]
 800a870:	b90b      	cbnz	r3, 800a876 <__swbuf_r+0x12>
 800a872:	f7ff fbf7 	bl	800a064 <__sinit>
 800a876:	4b21      	ldr	r3, [pc, #132]	; (800a8fc <__swbuf_r+0x98>)
 800a878:	429c      	cmp	r4, r3
 800a87a:	d12a      	bne.n	800a8d2 <__swbuf_r+0x6e>
 800a87c:	686c      	ldr	r4, [r5, #4]
 800a87e:	69a3      	ldr	r3, [r4, #24]
 800a880:	60a3      	str	r3, [r4, #8]
 800a882:	89a3      	ldrh	r3, [r4, #12]
 800a884:	071a      	lsls	r2, r3, #28
 800a886:	d52e      	bpl.n	800a8e6 <__swbuf_r+0x82>
 800a888:	6923      	ldr	r3, [r4, #16]
 800a88a:	b363      	cbz	r3, 800a8e6 <__swbuf_r+0x82>
 800a88c:	6923      	ldr	r3, [r4, #16]
 800a88e:	6820      	ldr	r0, [r4, #0]
 800a890:	1ac0      	subs	r0, r0, r3
 800a892:	6963      	ldr	r3, [r4, #20]
 800a894:	b2f6      	uxtb	r6, r6
 800a896:	4283      	cmp	r3, r0
 800a898:	4637      	mov	r7, r6
 800a89a:	dc04      	bgt.n	800a8a6 <__swbuf_r+0x42>
 800a89c:	4621      	mov	r1, r4
 800a89e:	4628      	mov	r0, r5
 800a8a0:	f000 f948 	bl	800ab34 <_fflush_r>
 800a8a4:	bb28      	cbnz	r0, 800a8f2 <__swbuf_r+0x8e>
 800a8a6:	68a3      	ldr	r3, [r4, #8]
 800a8a8:	3b01      	subs	r3, #1
 800a8aa:	60a3      	str	r3, [r4, #8]
 800a8ac:	6823      	ldr	r3, [r4, #0]
 800a8ae:	1c5a      	adds	r2, r3, #1
 800a8b0:	6022      	str	r2, [r4, #0]
 800a8b2:	701e      	strb	r6, [r3, #0]
 800a8b4:	6963      	ldr	r3, [r4, #20]
 800a8b6:	3001      	adds	r0, #1
 800a8b8:	4283      	cmp	r3, r0
 800a8ba:	d004      	beq.n	800a8c6 <__swbuf_r+0x62>
 800a8bc:	89a3      	ldrh	r3, [r4, #12]
 800a8be:	07db      	lsls	r3, r3, #31
 800a8c0:	d519      	bpl.n	800a8f6 <__swbuf_r+0x92>
 800a8c2:	2e0a      	cmp	r6, #10
 800a8c4:	d117      	bne.n	800a8f6 <__swbuf_r+0x92>
 800a8c6:	4621      	mov	r1, r4
 800a8c8:	4628      	mov	r0, r5
 800a8ca:	f000 f933 	bl	800ab34 <_fflush_r>
 800a8ce:	b190      	cbz	r0, 800a8f6 <__swbuf_r+0x92>
 800a8d0:	e00f      	b.n	800a8f2 <__swbuf_r+0x8e>
 800a8d2:	4b0b      	ldr	r3, [pc, #44]	; (800a900 <__swbuf_r+0x9c>)
 800a8d4:	429c      	cmp	r4, r3
 800a8d6:	d101      	bne.n	800a8dc <__swbuf_r+0x78>
 800a8d8:	68ac      	ldr	r4, [r5, #8]
 800a8da:	e7d0      	b.n	800a87e <__swbuf_r+0x1a>
 800a8dc:	4b09      	ldr	r3, [pc, #36]	; (800a904 <__swbuf_r+0xa0>)
 800a8de:	429c      	cmp	r4, r3
 800a8e0:	bf08      	it	eq
 800a8e2:	68ec      	ldreq	r4, [r5, #12]
 800a8e4:	e7cb      	b.n	800a87e <__swbuf_r+0x1a>
 800a8e6:	4621      	mov	r1, r4
 800a8e8:	4628      	mov	r0, r5
 800a8ea:	f000 f81f 	bl	800a92c <__swsetup_r>
 800a8ee:	2800      	cmp	r0, #0
 800a8f0:	d0cc      	beq.n	800a88c <__swbuf_r+0x28>
 800a8f2:	f04f 37ff 	mov.w	r7, #4294967295
 800a8f6:	4638      	mov	r0, r7
 800a8f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a8fa:	bf00      	nop
 800a8fc:	08071704 	.word	0x08071704
 800a900:	08071724 	.word	0x08071724
 800a904:	080716e4 	.word	0x080716e4

0800a908 <_write_r>:
 800a908:	b538      	push	{r3, r4, r5, lr}
 800a90a:	4c07      	ldr	r4, [pc, #28]	; (800a928 <_write_r+0x20>)
 800a90c:	4605      	mov	r5, r0
 800a90e:	4608      	mov	r0, r1
 800a910:	4611      	mov	r1, r2
 800a912:	2200      	movs	r2, #0
 800a914:	6022      	str	r2, [r4, #0]
 800a916:	461a      	mov	r2, r3
 800a918:	f7fe fd7d 	bl	8009416 <_write>
 800a91c:	1c43      	adds	r3, r0, #1
 800a91e:	d102      	bne.n	800a926 <_write_r+0x1e>
 800a920:	6823      	ldr	r3, [r4, #0]
 800a922:	b103      	cbz	r3, 800a926 <_write_r+0x1e>
 800a924:	602b      	str	r3, [r5, #0]
 800a926:	bd38      	pop	{r3, r4, r5, pc}
 800a928:	200100f8 	.word	0x200100f8

0800a92c <__swsetup_r>:
 800a92c:	4b32      	ldr	r3, [pc, #200]	; (800a9f8 <__swsetup_r+0xcc>)
 800a92e:	b570      	push	{r4, r5, r6, lr}
 800a930:	681d      	ldr	r5, [r3, #0]
 800a932:	4606      	mov	r6, r0
 800a934:	460c      	mov	r4, r1
 800a936:	b125      	cbz	r5, 800a942 <__swsetup_r+0x16>
 800a938:	69ab      	ldr	r3, [r5, #24]
 800a93a:	b913      	cbnz	r3, 800a942 <__swsetup_r+0x16>
 800a93c:	4628      	mov	r0, r5
 800a93e:	f7ff fb91 	bl	800a064 <__sinit>
 800a942:	4b2e      	ldr	r3, [pc, #184]	; (800a9fc <__swsetup_r+0xd0>)
 800a944:	429c      	cmp	r4, r3
 800a946:	d10f      	bne.n	800a968 <__swsetup_r+0x3c>
 800a948:	686c      	ldr	r4, [r5, #4]
 800a94a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a94e:	b29a      	uxth	r2, r3
 800a950:	0715      	lsls	r5, r2, #28
 800a952:	d42c      	bmi.n	800a9ae <__swsetup_r+0x82>
 800a954:	06d0      	lsls	r0, r2, #27
 800a956:	d411      	bmi.n	800a97c <__swsetup_r+0x50>
 800a958:	2209      	movs	r2, #9
 800a95a:	6032      	str	r2, [r6, #0]
 800a95c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a960:	81a3      	strh	r3, [r4, #12]
 800a962:	f04f 30ff 	mov.w	r0, #4294967295
 800a966:	e03e      	b.n	800a9e6 <__swsetup_r+0xba>
 800a968:	4b25      	ldr	r3, [pc, #148]	; (800aa00 <__swsetup_r+0xd4>)
 800a96a:	429c      	cmp	r4, r3
 800a96c:	d101      	bne.n	800a972 <__swsetup_r+0x46>
 800a96e:	68ac      	ldr	r4, [r5, #8]
 800a970:	e7eb      	b.n	800a94a <__swsetup_r+0x1e>
 800a972:	4b24      	ldr	r3, [pc, #144]	; (800aa04 <__swsetup_r+0xd8>)
 800a974:	429c      	cmp	r4, r3
 800a976:	bf08      	it	eq
 800a978:	68ec      	ldreq	r4, [r5, #12]
 800a97a:	e7e6      	b.n	800a94a <__swsetup_r+0x1e>
 800a97c:	0751      	lsls	r1, r2, #29
 800a97e:	d512      	bpl.n	800a9a6 <__swsetup_r+0x7a>
 800a980:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a982:	b141      	cbz	r1, 800a996 <__swsetup_r+0x6a>
 800a984:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a988:	4299      	cmp	r1, r3
 800a98a:	d002      	beq.n	800a992 <__swsetup_r+0x66>
 800a98c:	4630      	mov	r0, r6
 800a98e:	f000 f973 	bl	800ac78 <_free_r>
 800a992:	2300      	movs	r3, #0
 800a994:	6363      	str	r3, [r4, #52]	; 0x34
 800a996:	89a3      	ldrh	r3, [r4, #12]
 800a998:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a99c:	81a3      	strh	r3, [r4, #12]
 800a99e:	2300      	movs	r3, #0
 800a9a0:	6063      	str	r3, [r4, #4]
 800a9a2:	6923      	ldr	r3, [r4, #16]
 800a9a4:	6023      	str	r3, [r4, #0]
 800a9a6:	89a3      	ldrh	r3, [r4, #12]
 800a9a8:	f043 0308 	orr.w	r3, r3, #8
 800a9ac:	81a3      	strh	r3, [r4, #12]
 800a9ae:	6923      	ldr	r3, [r4, #16]
 800a9b0:	b94b      	cbnz	r3, 800a9c6 <__swsetup_r+0x9a>
 800a9b2:	89a3      	ldrh	r3, [r4, #12]
 800a9b4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a9b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a9bc:	d003      	beq.n	800a9c6 <__swsetup_r+0x9a>
 800a9be:	4621      	mov	r1, r4
 800a9c0:	4630      	mov	r0, r6
 800a9c2:	f000 f917 	bl	800abf4 <__smakebuf_r>
 800a9c6:	89a2      	ldrh	r2, [r4, #12]
 800a9c8:	f012 0301 	ands.w	r3, r2, #1
 800a9cc:	d00c      	beq.n	800a9e8 <__swsetup_r+0xbc>
 800a9ce:	2300      	movs	r3, #0
 800a9d0:	60a3      	str	r3, [r4, #8]
 800a9d2:	6963      	ldr	r3, [r4, #20]
 800a9d4:	425b      	negs	r3, r3
 800a9d6:	61a3      	str	r3, [r4, #24]
 800a9d8:	6923      	ldr	r3, [r4, #16]
 800a9da:	b953      	cbnz	r3, 800a9f2 <__swsetup_r+0xc6>
 800a9dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a9e0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800a9e4:	d1ba      	bne.n	800a95c <__swsetup_r+0x30>
 800a9e6:	bd70      	pop	{r4, r5, r6, pc}
 800a9e8:	0792      	lsls	r2, r2, #30
 800a9ea:	bf58      	it	pl
 800a9ec:	6963      	ldrpl	r3, [r4, #20]
 800a9ee:	60a3      	str	r3, [r4, #8]
 800a9f0:	e7f2      	b.n	800a9d8 <__swsetup_r+0xac>
 800a9f2:	2000      	movs	r0, #0
 800a9f4:	e7f7      	b.n	800a9e6 <__swsetup_r+0xba>
 800a9f6:	bf00      	nop
 800a9f8:	20000488 	.word	0x20000488
 800a9fc:	08071704 	.word	0x08071704
 800aa00:	08071724 	.word	0x08071724
 800aa04:	080716e4 	.word	0x080716e4

0800aa08 <_close_r>:
 800aa08:	b538      	push	{r3, r4, r5, lr}
 800aa0a:	4c06      	ldr	r4, [pc, #24]	; (800aa24 <_close_r+0x1c>)
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	4605      	mov	r5, r0
 800aa10:	4608      	mov	r0, r1
 800aa12:	6023      	str	r3, [r4, #0]
 800aa14:	f7fe fd1b 	bl	800944e <_close>
 800aa18:	1c43      	adds	r3, r0, #1
 800aa1a:	d102      	bne.n	800aa22 <_close_r+0x1a>
 800aa1c:	6823      	ldr	r3, [r4, #0]
 800aa1e:	b103      	cbz	r3, 800aa22 <_close_r+0x1a>
 800aa20:	602b      	str	r3, [r5, #0]
 800aa22:	bd38      	pop	{r3, r4, r5, pc}
 800aa24:	200100f8 	.word	0x200100f8

0800aa28 <__sflush_r>:
 800aa28:	898a      	ldrh	r2, [r1, #12]
 800aa2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa2e:	4605      	mov	r5, r0
 800aa30:	0710      	lsls	r0, r2, #28
 800aa32:	460c      	mov	r4, r1
 800aa34:	d458      	bmi.n	800aae8 <__sflush_r+0xc0>
 800aa36:	684b      	ldr	r3, [r1, #4]
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	dc05      	bgt.n	800aa48 <__sflush_r+0x20>
 800aa3c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	dc02      	bgt.n	800aa48 <__sflush_r+0x20>
 800aa42:	2000      	movs	r0, #0
 800aa44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aa4a:	2e00      	cmp	r6, #0
 800aa4c:	d0f9      	beq.n	800aa42 <__sflush_r+0x1a>
 800aa4e:	2300      	movs	r3, #0
 800aa50:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800aa54:	682f      	ldr	r7, [r5, #0]
 800aa56:	6a21      	ldr	r1, [r4, #32]
 800aa58:	602b      	str	r3, [r5, #0]
 800aa5a:	d032      	beq.n	800aac2 <__sflush_r+0x9a>
 800aa5c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800aa5e:	89a3      	ldrh	r3, [r4, #12]
 800aa60:	075a      	lsls	r2, r3, #29
 800aa62:	d505      	bpl.n	800aa70 <__sflush_r+0x48>
 800aa64:	6863      	ldr	r3, [r4, #4]
 800aa66:	1ac0      	subs	r0, r0, r3
 800aa68:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800aa6a:	b10b      	cbz	r3, 800aa70 <__sflush_r+0x48>
 800aa6c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800aa6e:	1ac0      	subs	r0, r0, r3
 800aa70:	2300      	movs	r3, #0
 800aa72:	4602      	mov	r2, r0
 800aa74:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aa76:	6a21      	ldr	r1, [r4, #32]
 800aa78:	4628      	mov	r0, r5
 800aa7a:	47b0      	blx	r6
 800aa7c:	1c43      	adds	r3, r0, #1
 800aa7e:	89a3      	ldrh	r3, [r4, #12]
 800aa80:	d106      	bne.n	800aa90 <__sflush_r+0x68>
 800aa82:	6829      	ldr	r1, [r5, #0]
 800aa84:	291d      	cmp	r1, #29
 800aa86:	d848      	bhi.n	800ab1a <__sflush_r+0xf2>
 800aa88:	4a29      	ldr	r2, [pc, #164]	; (800ab30 <__sflush_r+0x108>)
 800aa8a:	40ca      	lsrs	r2, r1
 800aa8c:	07d6      	lsls	r6, r2, #31
 800aa8e:	d544      	bpl.n	800ab1a <__sflush_r+0xf2>
 800aa90:	2200      	movs	r2, #0
 800aa92:	6062      	str	r2, [r4, #4]
 800aa94:	04d9      	lsls	r1, r3, #19
 800aa96:	6922      	ldr	r2, [r4, #16]
 800aa98:	6022      	str	r2, [r4, #0]
 800aa9a:	d504      	bpl.n	800aaa6 <__sflush_r+0x7e>
 800aa9c:	1c42      	adds	r2, r0, #1
 800aa9e:	d101      	bne.n	800aaa4 <__sflush_r+0x7c>
 800aaa0:	682b      	ldr	r3, [r5, #0]
 800aaa2:	b903      	cbnz	r3, 800aaa6 <__sflush_r+0x7e>
 800aaa4:	6560      	str	r0, [r4, #84]	; 0x54
 800aaa6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aaa8:	602f      	str	r7, [r5, #0]
 800aaaa:	2900      	cmp	r1, #0
 800aaac:	d0c9      	beq.n	800aa42 <__sflush_r+0x1a>
 800aaae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aab2:	4299      	cmp	r1, r3
 800aab4:	d002      	beq.n	800aabc <__sflush_r+0x94>
 800aab6:	4628      	mov	r0, r5
 800aab8:	f000 f8de 	bl	800ac78 <_free_r>
 800aabc:	2000      	movs	r0, #0
 800aabe:	6360      	str	r0, [r4, #52]	; 0x34
 800aac0:	e7c0      	b.n	800aa44 <__sflush_r+0x1c>
 800aac2:	2301      	movs	r3, #1
 800aac4:	4628      	mov	r0, r5
 800aac6:	47b0      	blx	r6
 800aac8:	1c41      	adds	r1, r0, #1
 800aaca:	d1c8      	bne.n	800aa5e <__sflush_r+0x36>
 800aacc:	682b      	ldr	r3, [r5, #0]
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d0c5      	beq.n	800aa5e <__sflush_r+0x36>
 800aad2:	2b1d      	cmp	r3, #29
 800aad4:	d001      	beq.n	800aada <__sflush_r+0xb2>
 800aad6:	2b16      	cmp	r3, #22
 800aad8:	d101      	bne.n	800aade <__sflush_r+0xb6>
 800aada:	602f      	str	r7, [r5, #0]
 800aadc:	e7b1      	b.n	800aa42 <__sflush_r+0x1a>
 800aade:	89a3      	ldrh	r3, [r4, #12]
 800aae0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aae4:	81a3      	strh	r3, [r4, #12]
 800aae6:	e7ad      	b.n	800aa44 <__sflush_r+0x1c>
 800aae8:	690f      	ldr	r7, [r1, #16]
 800aaea:	2f00      	cmp	r7, #0
 800aaec:	d0a9      	beq.n	800aa42 <__sflush_r+0x1a>
 800aaee:	0793      	lsls	r3, r2, #30
 800aaf0:	680e      	ldr	r6, [r1, #0]
 800aaf2:	bf08      	it	eq
 800aaf4:	694b      	ldreq	r3, [r1, #20]
 800aaf6:	600f      	str	r7, [r1, #0]
 800aaf8:	bf18      	it	ne
 800aafa:	2300      	movne	r3, #0
 800aafc:	eba6 0807 	sub.w	r8, r6, r7
 800ab00:	608b      	str	r3, [r1, #8]
 800ab02:	f1b8 0f00 	cmp.w	r8, #0
 800ab06:	dd9c      	ble.n	800aa42 <__sflush_r+0x1a>
 800ab08:	4643      	mov	r3, r8
 800ab0a:	463a      	mov	r2, r7
 800ab0c:	6a21      	ldr	r1, [r4, #32]
 800ab0e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ab10:	4628      	mov	r0, r5
 800ab12:	47b0      	blx	r6
 800ab14:	2800      	cmp	r0, #0
 800ab16:	dc06      	bgt.n	800ab26 <__sflush_r+0xfe>
 800ab18:	89a3      	ldrh	r3, [r4, #12]
 800ab1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab1e:	81a3      	strh	r3, [r4, #12]
 800ab20:	f04f 30ff 	mov.w	r0, #4294967295
 800ab24:	e78e      	b.n	800aa44 <__sflush_r+0x1c>
 800ab26:	4407      	add	r7, r0
 800ab28:	eba8 0800 	sub.w	r8, r8, r0
 800ab2c:	e7e9      	b.n	800ab02 <__sflush_r+0xda>
 800ab2e:	bf00      	nop
 800ab30:	20400001 	.word	0x20400001

0800ab34 <_fflush_r>:
 800ab34:	b538      	push	{r3, r4, r5, lr}
 800ab36:	690b      	ldr	r3, [r1, #16]
 800ab38:	4605      	mov	r5, r0
 800ab3a:	460c      	mov	r4, r1
 800ab3c:	b1db      	cbz	r3, 800ab76 <_fflush_r+0x42>
 800ab3e:	b118      	cbz	r0, 800ab48 <_fflush_r+0x14>
 800ab40:	6983      	ldr	r3, [r0, #24]
 800ab42:	b90b      	cbnz	r3, 800ab48 <_fflush_r+0x14>
 800ab44:	f7ff fa8e 	bl	800a064 <__sinit>
 800ab48:	4b0c      	ldr	r3, [pc, #48]	; (800ab7c <_fflush_r+0x48>)
 800ab4a:	429c      	cmp	r4, r3
 800ab4c:	d109      	bne.n	800ab62 <_fflush_r+0x2e>
 800ab4e:	686c      	ldr	r4, [r5, #4]
 800ab50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab54:	b17b      	cbz	r3, 800ab76 <_fflush_r+0x42>
 800ab56:	4621      	mov	r1, r4
 800ab58:	4628      	mov	r0, r5
 800ab5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ab5e:	f7ff bf63 	b.w	800aa28 <__sflush_r>
 800ab62:	4b07      	ldr	r3, [pc, #28]	; (800ab80 <_fflush_r+0x4c>)
 800ab64:	429c      	cmp	r4, r3
 800ab66:	d101      	bne.n	800ab6c <_fflush_r+0x38>
 800ab68:	68ac      	ldr	r4, [r5, #8]
 800ab6a:	e7f1      	b.n	800ab50 <_fflush_r+0x1c>
 800ab6c:	4b05      	ldr	r3, [pc, #20]	; (800ab84 <_fflush_r+0x50>)
 800ab6e:	429c      	cmp	r4, r3
 800ab70:	bf08      	it	eq
 800ab72:	68ec      	ldreq	r4, [r5, #12]
 800ab74:	e7ec      	b.n	800ab50 <_fflush_r+0x1c>
 800ab76:	2000      	movs	r0, #0
 800ab78:	bd38      	pop	{r3, r4, r5, pc}
 800ab7a:	bf00      	nop
 800ab7c:	08071704 	.word	0x08071704
 800ab80:	08071724 	.word	0x08071724
 800ab84:	080716e4 	.word	0x080716e4

0800ab88 <_lseek_r>:
 800ab88:	b538      	push	{r3, r4, r5, lr}
 800ab8a:	4c07      	ldr	r4, [pc, #28]	; (800aba8 <_lseek_r+0x20>)
 800ab8c:	4605      	mov	r5, r0
 800ab8e:	4608      	mov	r0, r1
 800ab90:	4611      	mov	r1, r2
 800ab92:	2200      	movs	r2, #0
 800ab94:	6022      	str	r2, [r4, #0]
 800ab96:	461a      	mov	r2, r3
 800ab98:	f7fe fc80 	bl	800949c <_lseek>
 800ab9c:	1c43      	adds	r3, r0, #1
 800ab9e:	d102      	bne.n	800aba6 <_lseek_r+0x1e>
 800aba0:	6823      	ldr	r3, [r4, #0]
 800aba2:	b103      	cbz	r3, 800aba6 <_lseek_r+0x1e>
 800aba4:	602b      	str	r3, [r5, #0]
 800aba6:	bd38      	pop	{r3, r4, r5, pc}
 800aba8:	200100f8 	.word	0x200100f8

0800abac <__swhatbuf_r>:
 800abac:	b570      	push	{r4, r5, r6, lr}
 800abae:	460e      	mov	r6, r1
 800abb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800abb4:	2900      	cmp	r1, #0
 800abb6:	b096      	sub	sp, #88	; 0x58
 800abb8:	4614      	mov	r4, r2
 800abba:	461d      	mov	r5, r3
 800abbc:	da07      	bge.n	800abce <__swhatbuf_r+0x22>
 800abbe:	2300      	movs	r3, #0
 800abc0:	602b      	str	r3, [r5, #0]
 800abc2:	89b3      	ldrh	r3, [r6, #12]
 800abc4:	061a      	lsls	r2, r3, #24
 800abc6:	d410      	bmi.n	800abea <__swhatbuf_r+0x3e>
 800abc8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800abcc:	e00e      	b.n	800abec <__swhatbuf_r+0x40>
 800abce:	466a      	mov	r2, sp
 800abd0:	f000 f8b2 	bl	800ad38 <_fstat_r>
 800abd4:	2800      	cmp	r0, #0
 800abd6:	dbf2      	blt.n	800abbe <__swhatbuf_r+0x12>
 800abd8:	9a01      	ldr	r2, [sp, #4]
 800abda:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800abde:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800abe2:	425a      	negs	r2, r3
 800abe4:	415a      	adcs	r2, r3
 800abe6:	602a      	str	r2, [r5, #0]
 800abe8:	e7ee      	b.n	800abc8 <__swhatbuf_r+0x1c>
 800abea:	2340      	movs	r3, #64	; 0x40
 800abec:	2000      	movs	r0, #0
 800abee:	6023      	str	r3, [r4, #0]
 800abf0:	b016      	add	sp, #88	; 0x58
 800abf2:	bd70      	pop	{r4, r5, r6, pc}

0800abf4 <__smakebuf_r>:
 800abf4:	898b      	ldrh	r3, [r1, #12]
 800abf6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800abf8:	079d      	lsls	r5, r3, #30
 800abfa:	4606      	mov	r6, r0
 800abfc:	460c      	mov	r4, r1
 800abfe:	d507      	bpl.n	800ac10 <__smakebuf_r+0x1c>
 800ac00:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ac04:	6023      	str	r3, [r4, #0]
 800ac06:	6123      	str	r3, [r4, #16]
 800ac08:	2301      	movs	r3, #1
 800ac0a:	6163      	str	r3, [r4, #20]
 800ac0c:	b002      	add	sp, #8
 800ac0e:	bd70      	pop	{r4, r5, r6, pc}
 800ac10:	ab01      	add	r3, sp, #4
 800ac12:	466a      	mov	r2, sp
 800ac14:	f7ff ffca 	bl	800abac <__swhatbuf_r>
 800ac18:	9900      	ldr	r1, [sp, #0]
 800ac1a:	4605      	mov	r5, r0
 800ac1c:	4630      	mov	r0, r6
 800ac1e:	f7ff faab 	bl	800a178 <_malloc_r>
 800ac22:	b948      	cbnz	r0, 800ac38 <__smakebuf_r+0x44>
 800ac24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac28:	059a      	lsls	r2, r3, #22
 800ac2a:	d4ef      	bmi.n	800ac0c <__smakebuf_r+0x18>
 800ac2c:	f023 0303 	bic.w	r3, r3, #3
 800ac30:	f043 0302 	orr.w	r3, r3, #2
 800ac34:	81a3      	strh	r3, [r4, #12]
 800ac36:	e7e3      	b.n	800ac00 <__smakebuf_r+0xc>
 800ac38:	4b0d      	ldr	r3, [pc, #52]	; (800ac70 <__smakebuf_r+0x7c>)
 800ac3a:	62b3      	str	r3, [r6, #40]	; 0x28
 800ac3c:	89a3      	ldrh	r3, [r4, #12]
 800ac3e:	6020      	str	r0, [r4, #0]
 800ac40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac44:	81a3      	strh	r3, [r4, #12]
 800ac46:	9b00      	ldr	r3, [sp, #0]
 800ac48:	6163      	str	r3, [r4, #20]
 800ac4a:	9b01      	ldr	r3, [sp, #4]
 800ac4c:	6120      	str	r0, [r4, #16]
 800ac4e:	b15b      	cbz	r3, 800ac68 <__smakebuf_r+0x74>
 800ac50:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ac54:	4630      	mov	r0, r6
 800ac56:	f000 f881 	bl	800ad5c <_isatty_r>
 800ac5a:	b128      	cbz	r0, 800ac68 <__smakebuf_r+0x74>
 800ac5c:	89a3      	ldrh	r3, [r4, #12]
 800ac5e:	f023 0303 	bic.w	r3, r3, #3
 800ac62:	f043 0301 	orr.w	r3, r3, #1
 800ac66:	81a3      	strh	r3, [r4, #12]
 800ac68:	89a3      	ldrh	r3, [r4, #12]
 800ac6a:	431d      	orrs	r5, r3
 800ac6c:	81a5      	strh	r5, [r4, #12]
 800ac6e:	e7cd      	b.n	800ac0c <__smakebuf_r+0x18>
 800ac70:	0800a02d 	.word	0x0800a02d

0800ac74 <__malloc_lock>:
 800ac74:	4770      	bx	lr

0800ac76 <__malloc_unlock>:
 800ac76:	4770      	bx	lr

0800ac78 <_free_r>:
 800ac78:	b538      	push	{r3, r4, r5, lr}
 800ac7a:	4605      	mov	r5, r0
 800ac7c:	2900      	cmp	r1, #0
 800ac7e:	d045      	beq.n	800ad0c <_free_r+0x94>
 800ac80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ac84:	1f0c      	subs	r4, r1, #4
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	bfb8      	it	lt
 800ac8a:	18e4      	addlt	r4, r4, r3
 800ac8c:	f7ff fff2 	bl	800ac74 <__malloc_lock>
 800ac90:	4a1f      	ldr	r2, [pc, #124]	; (800ad10 <_free_r+0x98>)
 800ac92:	6813      	ldr	r3, [r2, #0]
 800ac94:	4610      	mov	r0, r2
 800ac96:	b933      	cbnz	r3, 800aca6 <_free_r+0x2e>
 800ac98:	6063      	str	r3, [r4, #4]
 800ac9a:	6014      	str	r4, [r2, #0]
 800ac9c:	4628      	mov	r0, r5
 800ac9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aca2:	f7ff bfe8 	b.w	800ac76 <__malloc_unlock>
 800aca6:	42a3      	cmp	r3, r4
 800aca8:	d90c      	bls.n	800acc4 <_free_r+0x4c>
 800acaa:	6821      	ldr	r1, [r4, #0]
 800acac:	1862      	adds	r2, r4, r1
 800acae:	4293      	cmp	r3, r2
 800acb0:	bf04      	itt	eq
 800acb2:	681a      	ldreq	r2, [r3, #0]
 800acb4:	685b      	ldreq	r3, [r3, #4]
 800acb6:	6063      	str	r3, [r4, #4]
 800acb8:	bf04      	itt	eq
 800acba:	1852      	addeq	r2, r2, r1
 800acbc:	6022      	streq	r2, [r4, #0]
 800acbe:	6004      	str	r4, [r0, #0]
 800acc0:	e7ec      	b.n	800ac9c <_free_r+0x24>
 800acc2:	4613      	mov	r3, r2
 800acc4:	685a      	ldr	r2, [r3, #4]
 800acc6:	b10a      	cbz	r2, 800accc <_free_r+0x54>
 800acc8:	42a2      	cmp	r2, r4
 800acca:	d9fa      	bls.n	800acc2 <_free_r+0x4a>
 800accc:	6819      	ldr	r1, [r3, #0]
 800acce:	1858      	adds	r0, r3, r1
 800acd0:	42a0      	cmp	r0, r4
 800acd2:	d10b      	bne.n	800acec <_free_r+0x74>
 800acd4:	6820      	ldr	r0, [r4, #0]
 800acd6:	4401      	add	r1, r0
 800acd8:	1858      	adds	r0, r3, r1
 800acda:	4282      	cmp	r2, r0
 800acdc:	6019      	str	r1, [r3, #0]
 800acde:	d1dd      	bne.n	800ac9c <_free_r+0x24>
 800ace0:	6810      	ldr	r0, [r2, #0]
 800ace2:	6852      	ldr	r2, [r2, #4]
 800ace4:	605a      	str	r2, [r3, #4]
 800ace6:	4401      	add	r1, r0
 800ace8:	6019      	str	r1, [r3, #0]
 800acea:	e7d7      	b.n	800ac9c <_free_r+0x24>
 800acec:	d902      	bls.n	800acf4 <_free_r+0x7c>
 800acee:	230c      	movs	r3, #12
 800acf0:	602b      	str	r3, [r5, #0]
 800acf2:	e7d3      	b.n	800ac9c <_free_r+0x24>
 800acf4:	6820      	ldr	r0, [r4, #0]
 800acf6:	1821      	adds	r1, r4, r0
 800acf8:	428a      	cmp	r2, r1
 800acfa:	bf04      	itt	eq
 800acfc:	6811      	ldreq	r1, [r2, #0]
 800acfe:	6852      	ldreq	r2, [r2, #4]
 800ad00:	6062      	str	r2, [r4, #4]
 800ad02:	bf04      	itt	eq
 800ad04:	1809      	addeq	r1, r1, r0
 800ad06:	6021      	streq	r1, [r4, #0]
 800ad08:	605c      	str	r4, [r3, #4]
 800ad0a:	e7c7      	b.n	800ac9c <_free_r+0x24>
 800ad0c:	bd38      	pop	{r3, r4, r5, pc}
 800ad0e:	bf00      	nop
 800ad10:	200019f8 	.word	0x200019f8

0800ad14 <_read_r>:
 800ad14:	b538      	push	{r3, r4, r5, lr}
 800ad16:	4c07      	ldr	r4, [pc, #28]	; (800ad34 <_read_r+0x20>)
 800ad18:	4605      	mov	r5, r0
 800ad1a:	4608      	mov	r0, r1
 800ad1c:	4611      	mov	r1, r2
 800ad1e:	2200      	movs	r2, #0
 800ad20:	6022      	str	r2, [r4, #0]
 800ad22:	461a      	mov	r2, r3
 800ad24:	f7fe fb5a 	bl	80093dc <_read>
 800ad28:	1c43      	adds	r3, r0, #1
 800ad2a:	d102      	bne.n	800ad32 <_read_r+0x1e>
 800ad2c:	6823      	ldr	r3, [r4, #0]
 800ad2e:	b103      	cbz	r3, 800ad32 <_read_r+0x1e>
 800ad30:	602b      	str	r3, [r5, #0]
 800ad32:	bd38      	pop	{r3, r4, r5, pc}
 800ad34:	200100f8 	.word	0x200100f8

0800ad38 <_fstat_r>:
 800ad38:	b538      	push	{r3, r4, r5, lr}
 800ad3a:	4c07      	ldr	r4, [pc, #28]	; (800ad58 <_fstat_r+0x20>)
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	4605      	mov	r5, r0
 800ad40:	4608      	mov	r0, r1
 800ad42:	4611      	mov	r1, r2
 800ad44:	6023      	str	r3, [r4, #0]
 800ad46:	f7fe fb8e 	bl	8009466 <_fstat>
 800ad4a:	1c43      	adds	r3, r0, #1
 800ad4c:	d102      	bne.n	800ad54 <_fstat_r+0x1c>
 800ad4e:	6823      	ldr	r3, [r4, #0]
 800ad50:	b103      	cbz	r3, 800ad54 <_fstat_r+0x1c>
 800ad52:	602b      	str	r3, [r5, #0]
 800ad54:	bd38      	pop	{r3, r4, r5, pc}
 800ad56:	bf00      	nop
 800ad58:	200100f8 	.word	0x200100f8

0800ad5c <_isatty_r>:
 800ad5c:	b538      	push	{r3, r4, r5, lr}
 800ad5e:	4c06      	ldr	r4, [pc, #24]	; (800ad78 <_isatty_r+0x1c>)
 800ad60:	2300      	movs	r3, #0
 800ad62:	4605      	mov	r5, r0
 800ad64:	4608      	mov	r0, r1
 800ad66:	6023      	str	r3, [r4, #0]
 800ad68:	f7fe fb8d 	bl	8009486 <_isatty>
 800ad6c:	1c43      	adds	r3, r0, #1
 800ad6e:	d102      	bne.n	800ad76 <_isatty_r+0x1a>
 800ad70:	6823      	ldr	r3, [r4, #0]
 800ad72:	b103      	cbz	r3, 800ad76 <_isatty_r+0x1a>
 800ad74:	602b      	str	r3, [r5, #0]
 800ad76:	bd38      	pop	{r3, r4, r5, pc}
 800ad78:	200100f8 	.word	0x200100f8

0800ad7c <tanhf>:
 800ad7c:	b510      	push	{r4, lr}
 800ad7e:	ee10 4a10 	vmov	r4, s0
 800ad82:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800ad86:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800ad8a:	ed2d 8b02 	vpush	{d8}
 800ad8e:	eef0 7a40 	vmov.f32	s15, s0
 800ad92:	db0c      	blt.n	800adae <tanhf+0x32>
 800ad94:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ad98:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800ad9c:	2c00      	cmp	r4, #0
 800ad9e:	bfac      	ite	ge
 800ada0:	ee30 0a07 	vaddge.f32	s0, s0, s14
 800ada4:	ee30 0a47 	vsublt.f32	s0, s0, s14
 800ada8:	ecbd 8b02 	vpop	{d8}
 800adac:	bd10      	pop	{r4, pc}
 800adae:	4a1b      	ldr	r2, [pc, #108]	; (800ae1c <tanhf+0xa0>)
 800adb0:	4293      	cmp	r3, r2
 800adb2:	dc30      	bgt.n	800ae16 <tanhf+0x9a>
 800adb4:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
 800adb8:	da06      	bge.n	800adc8 <tanhf+0x4c>
 800adba:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800adbe:	ee37 0a80 	vadd.f32	s0, s15, s0
 800adc2:	ee20 0a27 	vmul.f32	s0, s0, s15
 800adc6:	e7ef      	b.n	800ada8 <tanhf+0x2c>
 800adc8:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800adcc:	eeb0 8a00 	vmov.f32	s16, #0	; 0x40000000  2.0
 800add0:	db12      	blt.n	800adf8 <tanhf+0x7c>
 800add2:	f001 f835 	bl	800be40 <fabsf>
 800add6:	ee30 0a00 	vadd.f32	s0, s0, s0
 800adda:	f000 ff05 	bl	800bbe8 <expm1f>
 800adde:	ee30 0a08 	vadd.f32	s0, s0, s16
 800ade2:	eec8 7a00 	vdiv.f32	s15, s16, s0
 800ade6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800adea:	ee30 0a67 	vsub.f32	s0, s0, s15
 800adee:	2c00      	cmp	r4, #0
 800adf0:	bfb8      	it	lt
 800adf2:	eeb1 0a40 	vneglt.f32	s0, s0
 800adf6:	e7d7      	b.n	800ada8 <tanhf+0x2c>
 800adf8:	f001 f822 	bl	800be40 <fabsf>
 800adfc:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
 800ae00:	ee20 0a27 	vmul.f32	s0, s0, s15
 800ae04:	f000 fef0 	bl	800bbe8 <expm1f>
 800ae08:	ee70 7a08 	vadd.f32	s15, s0, s16
 800ae0c:	eeb1 7a40 	vneg.f32	s14, s0
 800ae10:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800ae14:	e7eb      	b.n	800adee <tanhf+0x72>
 800ae16:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800ae1a:	e7e8      	b.n	800adee <tanhf+0x72>
 800ae1c:	41afffff 	.word	0x41afffff

0800ae20 <expf>:
 800ae20:	b530      	push	{r4, r5, lr}
 800ae22:	ed2d 8b02 	vpush	{d8}
 800ae26:	4d35      	ldr	r5, [pc, #212]	; (800aefc <expf+0xdc>)
 800ae28:	b08b      	sub	sp, #44	; 0x2c
 800ae2a:	eeb0 8a40 	vmov.f32	s16, s0
 800ae2e:	f000 fa4b 	bl	800b2c8 <__ieee754_expf>
 800ae32:	f995 3000 	ldrsb.w	r3, [r5]
 800ae36:	3301      	adds	r3, #1
 800ae38:	ee10 4a10 	vmov	r4, s0
 800ae3c:	d030      	beq.n	800aea0 <expf+0x80>
 800ae3e:	eeb0 0a48 	vmov.f32	s0, s16
 800ae42:	f001 f804 	bl	800be4e <finitef>
 800ae46:	b358      	cbz	r0, 800aea0 <expf+0x80>
 800ae48:	eddf 7a2d 	vldr	s15, [pc, #180]	; 800af00 <expf+0xe0>
 800ae4c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800ae50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae54:	dd35      	ble.n	800aec2 <expf+0xa2>
 800ae56:	2303      	movs	r3, #3
 800ae58:	9300      	str	r3, [sp, #0]
 800ae5a:	4b2a      	ldr	r3, [pc, #168]	; (800af04 <expf+0xe4>)
 800ae5c:	9301      	str	r3, [sp, #4]
 800ae5e:	ee18 0a10 	vmov	r0, s16
 800ae62:	2300      	movs	r3, #0
 800ae64:	9308      	str	r3, [sp, #32]
 800ae66:	f7f9 f827 	bl	8003eb8 <__aeabi_f2d>
 800ae6a:	f995 3000 	ldrsb.w	r3, [r5]
 800ae6e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ae72:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ae76:	b9cb      	cbnz	r3, 800aeac <expf+0x8c>
 800ae78:	4b23      	ldr	r3, [pc, #140]	; (800af08 <expf+0xe8>)
 800ae7a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800ae7e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ae82:	4668      	mov	r0, sp
 800ae84:	f000 fea5 	bl	800bbd2 <matherr>
 800ae88:	b1b0      	cbz	r0, 800aeb8 <expf+0x98>
 800ae8a:	9b08      	ldr	r3, [sp, #32]
 800ae8c:	b11b      	cbz	r3, 800ae96 <expf+0x76>
 800ae8e:	f7ff f845 	bl	8009f1c <__errno>
 800ae92:	9b08      	ldr	r3, [sp, #32]
 800ae94:	6003      	str	r3, [r0, #0]
 800ae96:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ae9a:	f7f9 fb1f 	bl	80044dc <__aeabi_d2f>
 800ae9e:	4604      	mov	r4, r0
 800aea0:	ee00 4a10 	vmov	s0, r4
 800aea4:	b00b      	add	sp, #44	; 0x2c
 800aea6:	ecbd 8b02 	vpop	{d8}
 800aeaa:	bd30      	pop	{r4, r5, pc}
 800aeac:	4917      	ldr	r1, [pc, #92]	; (800af0c <expf+0xec>)
 800aeae:	2000      	movs	r0, #0
 800aeb0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800aeb4:	2b02      	cmp	r3, #2
 800aeb6:	d1e4      	bne.n	800ae82 <expf+0x62>
 800aeb8:	f7ff f830 	bl	8009f1c <__errno>
 800aebc:	2322      	movs	r3, #34	; 0x22
 800aebe:	6003      	str	r3, [r0, #0]
 800aec0:	e7e3      	b.n	800ae8a <expf+0x6a>
 800aec2:	eddf 7a13 	vldr	s15, [pc, #76]	; 800af10 <expf+0xf0>
 800aec6:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800aeca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aece:	d5e7      	bpl.n	800aea0 <expf+0x80>
 800aed0:	2304      	movs	r3, #4
 800aed2:	9300      	str	r3, [sp, #0]
 800aed4:	4b0b      	ldr	r3, [pc, #44]	; (800af04 <expf+0xe4>)
 800aed6:	9301      	str	r3, [sp, #4]
 800aed8:	ee18 0a10 	vmov	r0, s16
 800aedc:	2300      	movs	r3, #0
 800aede:	9308      	str	r3, [sp, #32]
 800aee0:	f7f8 ffea 	bl	8003eb8 <__aeabi_f2d>
 800aee4:	2300      	movs	r3, #0
 800aee6:	2200      	movs	r2, #0
 800aee8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800aeec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800aef0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aef4:	f995 3000 	ldrsb.w	r3, [r5]
 800aef8:	e7dc      	b.n	800aeb4 <expf+0x94>
 800aefa:	bf00      	nop
 800aefc:	200004ec 	.word	0x200004ec
 800af00:	42b17180 	.word	0x42b17180
 800af04:	08071777 	.word	0x08071777
 800af08:	47efffff 	.word	0x47efffff
 800af0c:	7ff00000 	.word	0x7ff00000
 800af10:	c2cff1b5 	.word	0xc2cff1b5

0800af14 <logf>:
 800af14:	b510      	push	{r4, lr}
 800af16:	ed2d 8b02 	vpush	{d8}
 800af1a:	b08a      	sub	sp, #40	; 0x28
 800af1c:	eeb0 8a40 	vmov.f32	s16, s0
 800af20:	f000 faa6 	bl	800b470 <__ieee754_logf>
 800af24:	4b31      	ldr	r3, [pc, #196]	; (800afec <logf+0xd8>)
 800af26:	f993 4000 	ldrsb.w	r4, [r3]
 800af2a:	1c63      	adds	r3, r4, #1
 800af2c:	d059      	beq.n	800afe2 <logf+0xce>
 800af2e:	eeb4 8a48 	vcmp.f32	s16, s16
 800af32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af36:	d654      	bvs.n	800afe2 <logf+0xce>
 800af38:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800af3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af40:	dc4f      	bgt.n	800afe2 <logf+0xce>
 800af42:	4b2b      	ldr	r3, [pc, #172]	; (800aff0 <logf+0xdc>)
 800af44:	9301      	str	r3, [sp, #4]
 800af46:	ee18 0a10 	vmov	r0, s16
 800af4a:	2300      	movs	r3, #0
 800af4c:	9308      	str	r3, [sp, #32]
 800af4e:	f7f8 ffb3 	bl	8003eb8 <__aeabi_f2d>
 800af52:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800af56:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800af5a:	b994      	cbnz	r4, 800af82 <logf+0x6e>
 800af5c:	4b25      	ldr	r3, [pc, #148]	; (800aff4 <logf+0xe0>)
 800af5e:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800af62:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800af66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af6a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800af6e:	d025      	beq.n	800afbc <logf+0xa8>
 800af70:	2301      	movs	r3, #1
 800af72:	2c02      	cmp	r4, #2
 800af74:	9300      	str	r3, [sp, #0]
 800af76:	d116      	bne.n	800afa6 <logf+0x92>
 800af78:	f7fe ffd0 	bl	8009f1c <__errno>
 800af7c:	2321      	movs	r3, #33	; 0x21
 800af7e:	6003      	str	r3, [r0, #0]
 800af80:	e016      	b.n	800afb0 <logf+0x9c>
 800af82:	4b1d      	ldr	r3, [pc, #116]	; (800aff8 <logf+0xe4>)
 800af84:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800af88:	2200      	movs	r2, #0
 800af8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af8e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800af92:	d1ed      	bne.n	800af70 <logf+0x5c>
 800af94:	2302      	movs	r3, #2
 800af96:	429c      	cmp	r4, r3
 800af98:	9300      	str	r3, [sp, #0]
 800af9a:	d111      	bne.n	800afc0 <logf+0xac>
 800af9c:	f7fe ffbe 	bl	8009f1c <__errno>
 800afa0:	2322      	movs	r3, #34	; 0x22
 800afa2:	6003      	str	r3, [r0, #0]
 800afa4:	e011      	b.n	800afca <logf+0xb6>
 800afa6:	4668      	mov	r0, sp
 800afa8:	f000 fe13 	bl	800bbd2 <matherr>
 800afac:	2800      	cmp	r0, #0
 800afae:	d0e3      	beq.n	800af78 <logf+0x64>
 800afb0:	4812      	ldr	r0, [pc, #72]	; (800affc <logf+0xe8>)
 800afb2:	f000 fe11 	bl	800bbd8 <nan>
 800afb6:	ed8d 0b06 	vstr	d0, [sp, #24]
 800afba:	e006      	b.n	800afca <logf+0xb6>
 800afbc:	2302      	movs	r3, #2
 800afbe:	9300      	str	r3, [sp, #0]
 800afc0:	4668      	mov	r0, sp
 800afc2:	f000 fe06 	bl	800bbd2 <matherr>
 800afc6:	2800      	cmp	r0, #0
 800afc8:	d0e8      	beq.n	800af9c <logf+0x88>
 800afca:	9b08      	ldr	r3, [sp, #32]
 800afcc:	b11b      	cbz	r3, 800afd6 <logf+0xc2>
 800afce:	f7fe ffa5 	bl	8009f1c <__errno>
 800afd2:	9b08      	ldr	r3, [sp, #32]
 800afd4:	6003      	str	r3, [r0, #0]
 800afd6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800afda:	f7f9 fa7f 	bl	80044dc <__aeabi_d2f>
 800afde:	ee00 0a10 	vmov	s0, r0
 800afe2:	b00a      	add	sp, #40	; 0x28
 800afe4:	ecbd 8b02 	vpop	{d8}
 800afe8:	bd10      	pop	{r4, pc}
 800afea:	bf00      	nop
 800afec:	200004ec 	.word	0x200004ec
 800aff0:	0807177c 	.word	0x0807177c
 800aff4:	c7efffff 	.word	0xc7efffff
 800aff8:	fff00000 	.word	0xfff00000
 800affc:	08071749 	.word	0x08071749

0800b000 <powf>:
 800b000:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 800b004:	ed2d 8b04 	vpush	{d8-d9}
 800b008:	4ca7      	ldr	r4, [pc, #668]	; (800b2a8 <powf+0x2a8>)
 800b00a:	b08a      	sub	sp, #40	; 0x28
 800b00c:	eef0 8a40 	vmov.f32	s17, s0
 800b010:	eeb0 8a60 	vmov.f32	s16, s1
 800b014:	f000 fb1a 	bl	800b64c <__ieee754_powf>
 800b018:	f994 5000 	ldrsb.w	r5, [r4]
 800b01c:	1c6b      	adds	r3, r5, #1
 800b01e:	eeb0 9a40 	vmov.f32	s18, s0
 800b022:	4626      	mov	r6, r4
 800b024:	d05f      	beq.n	800b0e6 <powf+0xe6>
 800b026:	eeb4 8a48 	vcmp.f32	s16, s16
 800b02a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b02e:	d65a      	bvs.n	800b0e6 <powf+0xe6>
 800b030:	eef4 8a68 	vcmp.f32	s17, s17
 800b034:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b038:	d721      	bvc.n	800b07e <powf+0x7e>
 800b03a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800b03e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b042:	d150      	bne.n	800b0e6 <powf+0xe6>
 800b044:	2301      	movs	r3, #1
 800b046:	9300      	str	r3, [sp, #0]
 800b048:	4b98      	ldr	r3, [pc, #608]	; (800b2ac <powf+0x2ac>)
 800b04a:	9301      	str	r3, [sp, #4]
 800b04c:	ee18 0a90 	vmov	r0, s17
 800b050:	2300      	movs	r3, #0
 800b052:	9308      	str	r3, [sp, #32]
 800b054:	f7f8 ff30 	bl	8003eb8 <__aeabi_f2d>
 800b058:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b05c:	ee18 0a10 	vmov	r0, s16
 800b060:	f7f8 ff2a 	bl	8003eb8 <__aeabi_f2d>
 800b064:	4b92      	ldr	r3, [pc, #584]	; (800b2b0 <powf+0x2b0>)
 800b066:	2200      	movs	r2, #0
 800b068:	2d02      	cmp	r5, #2
 800b06a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b06e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b072:	d032      	beq.n	800b0da <powf+0xda>
 800b074:	4668      	mov	r0, sp
 800b076:	f000 fdac 	bl	800bbd2 <matherr>
 800b07a:	bb40      	cbnz	r0, 800b0ce <powf+0xce>
 800b07c:	e065      	b.n	800b14a <powf+0x14a>
 800b07e:	eddf 9a8d 	vldr	s19, [pc, #564]	; 800b2b4 <powf+0x2b4>
 800b082:	eef4 8a69 	vcmp.f32	s17, s19
 800b086:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b08a:	d163      	bne.n	800b154 <powf+0x154>
 800b08c:	eeb4 8a69 	vcmp.f32	s16, s19
 800b090:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b094:	d12e      	bne.n	800b0f4 <powf+0xf4>
 800b096:	2301      	movs	r3, #1
 800b098:	9300      	str	r3, [sp, #0]
 800b09a:	4b84      	ldr	r3, [pc, #528]	; (800b2ac <powf+0x2ac>)
 800b09c:	9301      	str	r3, [sp, #4]
 800b09e:	ee18 0a90 	vmov	r0, s17
 800b0a2:	2300      	movs	r3, #0
 800b0a4:	9308      	str	r3, [sp, #32]
 800b0a6:	f7f8 ff07 	bl	8003eb8 <__aeabi_f2d>
 800b0aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b0ae:	ee18 0a10 	vmov	r0, s16
 800b0b2:	f7f8 ff01 	bl	8003eb8 <__aeabi_f2d>
 800b0b6:	2200      	movs	r2, #0
 800b0b8:	2300      	movs	r3, #0
 800b0ba:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b0be:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b0c2:	2d00      	cmp	r5, #0
 800b0c4:	d0d6      	beq.n	800b074 <powf+0x74>
 800b0c6:	4b7a      	ldr	r3, [pc, #488]	; (800b2b0 <powf+0x2b0>)
 800b0c8:	2200      	movs	r2, #0
 800b0ca:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b0ce:	9b08      	ldr	r3, [sp, #32]
 800b0d0:	b11b      	cbz	r3, 800b0da <powf+0xda>
 800b0d2:	f7fe ff23 	bl	8009f1c <__errno>
 800b0d6:	9b08      	ldr	r3, [sp, #32]
 800b0d8:	6003      	str	r3, [r0, #0]
 800b0da:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b0de:	f7f9 f9fd 	bl	80044dc <__aeabi_d2f>
 800b0e2:	ee09 0a10 	vmov	s18, r0
 800b0e6:	eeb0 0a49 	vmov.f32	s0, s18
 800b0ea:	b00a      	add	sp, #40	; 0x28
 800b0ec:	ecbd 8b04 	vpop	{d8-d9}
 800b0f0:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800b0f4:	eeb0 0a48 	vmov.f32	s0, s16
 800b0f8:	f000 fea9 	bl	800be4e <finitef>
 800b0fc:	2800      	cmp	r0, #0
 800b0fe:	d0f2      	beq.n	800b0e6 <powf+0xe6>
 800b100:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800b104:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b108:	d5ed      	bpl.n	800b0e6 <powf+0xe6>
 800b10a:	2301      	movs	r3, #1
 800b10c:	9300      	str	r3, [sp, #0]
 800b10e:	4b67      	ldr	r3, [pc, #412]	; (800b2ac <powf+0x2ac>)
 800b110:	9301      	str	r3, [sp, #4]
 800b112:	ee18 0a90 	vmov	r0, s17
 800b116:	2300      	movs	r3, #0
 800b118:	9308      	str	r3, [sp, #32]
 800b11a:	f7f8 fecd 	bl	8003eb8 <__aeabi_f2d>
 800b11e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b122:	ee18 0a10 	vmov	r0, s16
 800b126:	f7f8 fec7 	bl	8003eb8 <__aeabi_f2d>
 800b12a:	f994 3000 	ldrsb.w	r3, [r4]
 800b12e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b132:	b923      	cbnz	r3, 800b13e <powf+0x13e>
 800b134:	2200      	movs	r2, #0
 800b136:	2300      	movs	r3, #0
 800b138:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b13c:	e79a      	b.n	800b074 <powf+0x74>
 800b13e:	495e      	ldr	r1, [pc, #376]	; (800b2b8 <powf+0x2b8>)
 800b140:	2000      	movs	r0, #0
 800b142:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b146:	2b02      	cmp	r3, #2
 800b148:	d194      	bne.n	800b074 <powf+0x74>
 800b14a:	f7fe fee7 	bl	8009f1c <__errno>
 800b14e:	2321      	movs	r3, #33	; 0x21
 800b150:	6003      	str	r3, [r0, #0]
 800b152:	e7bc      	b.n	800b0ce <powf+0xce>
 800b154:	f000 fe7b 	bl	800be4e <finitef>
 800b158:	4605      	mov	r5, r0
 800b15a:	2800      	cmp	r0, #0
 800b15c:	d173      	bne.n	800b246 <powf+0x246>
 800b15e:	eeb0 0a68 	vmov.f32	s0, s17
 800b162:	f000 fe74 	bl	800be4e <finitef>
 800b166:	2800      	cmp	r0, #0
 800b168:	d06d      	beq.n	800b246 <powf+0x246>
 800b16a:	eeb0 0a48 	vmov.f32	s0, s16
 800b16e:	f000 fe6e 	bl	800be4e <finitef>
 800b172:	2800      	cmp	r0, #0
 800b174:	d067      	beq.n	800b246 <powf+0x246>
 800b176:	ee18 0a90 	vmov	r0, s17
 800b17a:	f7f8 fe9d 	bl	8003eb8 <__aeabi_f2d>
 800b17e:	4680      	mov	r8, r0
 800b180:	ee18 0a10 	vmov	r0, s16
 800b184:	4689      	mov	r9, r1
 800b186:	f7f8 fe97 	bl	8003eb8 <__aeabi_f2d>
 800b18a:	eeb4 9a49 	vcmp.f32	s18, s18
 800b18e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b192:	f994 4000 	ldrsb.w	r4, [r4]
 800b196:	4b45      	ldr	r3, [pc, #276]	; (800b2ac <powf+0x2ac>)
 800b198:	d713      	bvc.n	800b1c2 <powf+0x1c2>
 800b19a:	2201      	movs	r2, #1
 800b19c:	e9cd 2300 	strd	r2, r3, [sp]
 800b1a0:	9508      	str	r5, [sp, #32]
 800b1a2:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800b1a6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b1aa:	2c00      	cmp	r4, #0
 800b1ac:	d0c2      	beq.n	800b134 <powf+0x134>
 800b1ae:	eec9 7aa9 	vdiv.f32	s15, s19, s19
 800b1b2:	ee17 0a90 	vmov	r0, s15
 800b1b6:	f7f8 fe7f 	bl	8003eb8 <__aeabi_f2d>
 800b1ba:	2c02      	cmp	r4, #2
 800b1bc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b1c0:	e7c2      	b.n	800b148 <powf+0x148>
 800b1c2:	2203      	movs	r2, #3
 800b1c4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800b1c8:	e9cd 2300 	strd	r2, r3, [sp]
 800b1cc:	9508      	str	r5, [sp, #32]
 800b1ce:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800b1d2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b1d6:	ee28 8a27 	vmul.f32	s16, s16, s15
 800b1da:	b9fc      	cbnz	r4, 800b21c <powf+0x21c>
 800b1dc:	4b37      	ldr	r3, [pc, #220]	; (800b2bc <powf+0x2bc>)
 800b1de:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 800b1e2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800b1e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1ea:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b1ee:	d553      	bpl.n	800b298 <powf+0x298>
 800b1f0:	eeb0 0a48 	vmov.f32	s0, s16
 800b1f4:	f000 fe3c 	bl	800be70 <rintf>
 800b1f8:	eeb4 0a48 	vcmp.f32	s0, s16
 800b1fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b200:	d004      	beq.n	800b20c <powf+0x20c>
 800b202:	4b2f      	ldr	r3, [pc, #188]	; (800b2c0 <powf+0x2c0>)
 800b204:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800b208:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b20c:	f996 3000 	ldrsb.w	r3, [r6]
 800b210:	2b02      	cmp	r3, #2
 800b212:	d141      	bne.n	800b298 <powf+0x298>
 800b214:	f7fe fe82 	bl	8009f1c <__errno>
 800b218:	2322      	movs	r3, #34	; 0x22
 800b21a:	e799      	b.n	800b150 <powf+0x150>
 800b21c:	4b29      	ldr	r3, [pc, #164]	; (800b2c4 <powf+0x2c4>)
 800b21e:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 800b222:	2200      	movs	r2, #0
 800b224:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b228:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b22c:	d5ee      	bpl.n	800b20c <powf+0x20c>
 800b22e:	eeb0 0a48 	vmov.f32	s0, s16
 800b232:	f000 fe1d 	bl	800be70 <rintf>
 800b236:	eeb4 0a48 	vcmp.f32	s0, s16
 800b23a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b23e:	d0e5      	beq.n	800b20c <powf+0x20c>
 800b240:	2200      	movs	r2, #0
 800b242:	4b1d      	ldr	r3, [pc, #116]	; (800b2b8 <powf+0x2b8>)
 800b244:	e7e0      	b.n	800b208 <powf+0x208>
 800b246:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800b24a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b24e:	f47f af4a 	bne.w	800b0e6 <powf+0xe6>
 800b252:	eeb0 0a68 	vmov.f32	s0, s17
 800b256:	f000 fdfa 	bl	800be4e <finitef>
 800b25a:	2800      	cmp	r0, #0
 800b25c:	f43f af43 	beq.w	800b0e6 <powf+0xe6>
 800b260:	eeb0 0a48 	vmov.f32	s0, s16
 800b264:	f000 fdf3 	bl	800be4e <finitef>
 800b268:	2800      	cmp	r0, #0
 800b26a:	f43f af3c 	beq.w	800b0e6 <powf+0xe6>
 800b26e:	2304      	movs	r3, #4
 800b270:	9300      	str	r3, [sp, #0]
 800b272:	4b0e      	ldr	r3, [pc, #56]	; (800b2ac <powf+0x2ac>)
 800b274:	9301      	str	r3, [sp, #4]
 800b276:	ee18 0a90 	vmov	r0, s17
 800b27a:	2300      	movs	r3, #0
 800b27c:	9308      	str	r3, [sp, #32]
 800b27e:	f7f8 fe1b 	bl	8003eb8 <__aeabi_f2d>
 800b282:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b286:	ee18 0a10 	vmov	r0, s16
 800b28a:	f7f8 fe15 	bl	8003eb8 <__aeabi_f2d>
 800b28e:	2200      	movs	r2, #0
 800b290:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b294:	2300      	movs	r3, #0
 800b296:	e7b7      	b.n	800b208 <powf+0x208>
 800b298:	4668      	mov	r0, sp
 800b29a:	f000 fc9a 	bl	800bbd2 <matherr>
 800b29e:	2800      	cmp	r0, #0
 800b2a0:	f47f af15 	bne.w	800b0ce <powf+0xce>
 800b2a4:	e7b6      	b.n	800b214 <powf+0x214>
 800b2a6:	bf00      	nop
 800b2a8:	200004ec 	.word	0x200004ec
 800b2ac:	08071781 	.word	0x08071781
 800b2b0:	3ff00000 	.word	0x3ff00000
 800b2b4:	00000000 	.word	0x00000000
 800b2b8:	fff00000 	.word	0xfff00000
 800b2bc:	47efffff 	.word	0x47efffff
 800b2c0:	c7efffff 	.word	0xc7efffff
 800b2c4:	7ff00000 	.word	0x7ff00000

0800b2c8 <__ieee754_expf>:
 800b2c8:	ee10 2a10 	vmov	r2, s0
 800b2cc:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800b2d0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800b2d4:	d902      	bls.n	800b2dc <__ieee754_expf+0x14>
 800b2d6:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b2da:	4770      	bx	lr
 800b2dc:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 800b2e0:	d106      	bne.n	800b2f0 <__ieee754_expf+0x28>
 800b2e2:	eddf 7a51 	vldr	s15, [pc, #324]	; 800b428 <__ieee754_expf+0x160>
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	bf18      	it	ne
 800b2ea:	eeb0 0a67 	vmovne.f32	s0, s15
 800b2ee:	4770      	bx	lr
 800b2f0:	484e      	ldr	r0, [pc, #312]	; (800b42c <__ieee754_expf+0x164>)
 800b2f2:	4282      	cmp	r2, r0
 800b2f4:	dd04      	ble.n	800b300 <__ieee754_expf+0x38>
 800b2f6:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 800b430 <__ieee754_expf+0x168>
 800b2fa:	ee20 0a00 	vmul.f32	s0, s0, s0
 800b2fe:	4770      	bx	lr
 800b300:	2a00      	cmp	r2, #0
 800b302:	da03      	bge.n	800b30c <__ieee754_expf+0x44>
 800b304:	4a4b      	ldr	r2, [pc, #300]	; (800b434 <__ieee754_expf+0x16c>)
 800b306:	4291      	cmp	r1, r2
 800b308:	f200 808a 	bhi.w	800b420 <__ieee754_expf+0x158>
 800b30c:	4a4a      	ldr	r2, [pc, #296]	; (800b438 <__ieee754_expf+0x170>)
 800b30e:	4291      	cmp	r1, r2
 800b310:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800b314:	d954      	bls.n	800b3c0 <__ieee754_expf+0xf8>
 800b316:	4a49      	ldr	r2, [pc, #292]	; (800b43c <__ieee754_expf+0x174>)
 800b318:	4291      	cmp	r1, r2
 800b31a:	ea4f 0283 	mov.w	r2, r3, lsl #2
 800b31e:	d836      	bhi.n	800b38e <__ieee754_expf+0xc6>
 800b320:	4947      	ldr	r1, [pc, #284]	; (800b440 <__ieee754_expf+0x178>)
 800b322:	4411      	add	r1, r2
 800b324:	ed91 7a00 	vldr	s14, [r1]
 800b328:	4946      	ldr	r1, [pc, #280]	; (800b444 <__ieee754_expf+0x17c>)
 800b32a:	440a      	add	r2, r1
 800b32c:	edd2 7a00 	vldr	s15, [r2]
 800b330:	ee30 7a47 	vsub.f32	s14, s0, s14
 800b334:	f1c3 0201 	rsb	r2, r3, #1
 800b338:	1ad2      	subs	r2, r2, r3
 800b33a:	ee37 0a67 	vsub.f32	s0, s14, s15
 800b33e:	ee60 6a00 	vmul.f32	s13, s0, s0
 800b342:	eddf 5a41 	vldr	s11, [pc, #260]	; 800b448 <__ieee754_expf+0x180>
 800b346:	ed9f 5a41 	vldr	s10, [pc, #260]	; 800b44c <__ieee754_expf+0x184>
 800b34a:	eea6 5aa5 	vfma.f32	s10, s13, s11
 800b34e:	eddf 5a40 	vldr	s11, [pc, #256]	; 800b450 <__ieee754_expf+0x188>
 800b352:	eee5 5a26 	vfma.f32	s11, s10, s13
 800b356:	ed9f 5a3f 	vldr	s10, [pc, #252]	; 800b454 <__ieee754_expf+0x18c>
 800b35a:	eea5 5aa6 	vfma.f32	s10, s11, s13
 800b35e:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800b458 <__ieee754_expf+0x190>
 800b362:	eee5 5a26 	vfma.f32	s11, s10, s13
 800b366:	eeb0 5a40 	vmov.f32	s10, s0
 800b36a:	eea5 5ae6 	vfms.f32	s10, s11, s13
 800b36e:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800b372:	eef0 6a45 	vmov.f32	s13, s10
 800b376:	ee20 5a05 	vmul.f32	s10, s0, s10
 800b37a:	bb92      	cbnz	r2, 800b3e2 <__ieee754_expf+0x11a>
 800b37c:	ee76 6ae5 	vsub.f32	s13, s13, s11
 800b380:	eec5 7a26 	vdiv.f32	s15, s10, s13
 800b384:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800b388:	ee36 0a40 	vsub.f32	s0, s12, s0
 800b38c:	4770      	bx	lr
 800b38e:	4b33      	ldr	r3, [pc, #204]	; (800b45c <__ieee754_expf+0x194>)
 800b390:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800b460 <__ieee754_expf+0x198>
 800b394:	4413      	add	r3, r2
 800b396:	edd3 7a00 	vldr	s15, [r3]
 800b39a:	eee0 7a07 	vfma.f32	s15, s0, s14
 800b39e:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800b464 <__ieee754_expf+0x19c>
 800b3a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b3a6:	ee17 2a90 	vmov	r2, s15
 800b3aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b3ae:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800b3b2:	eeb0 7a40 	vmov.f32	s14, s0
 800b3b6:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 800b468 <__ieee754_expf+0x1a0>
 800b3ba:	ee67 7a80 	vmul.f32	s15, s15, s0
 800b3be:	e7bc      	b.n	800b33a <__ieee754_expf+0x72>
 800b3c0:	f1b1 5f46 	cmp.w	r1, #830472192	; 0x31800000
 800b3c4:	d20b      	bcs.n	800b3de <__ieee754_expf+0x116>
 800b3c6:	eddf 6a1a 	vldr	s13, [pc, #104]	; 800b430 <__ieee754_expf+0x168>
 800b3ca:	ee70 6a26 	vadd.f32	s13, s0, s13
 800b3ce:	eef4 6ac6 	vcmpe.f32	s13, s12
 800b3d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3d6:	dd02      	ble.n	800b3de <__ieee754_expf+0x116>
 800b3d8:	ee30 0a06 	vadd.f32	s0, s0, s12
 800b3dc:	4770      	bx	lr
 800b3de:	2200      	movs	r2, #0
 800b3e0:	e7ad      	b.n	800b33e <__ieee754_expf+0x76>
 800b3e2:	ee75 6ae6 	vsub.f32	s13, s11, s13
 800b3e6:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 800b3ea:	ee85 0a26 	vdiv.f32	s0, s10, s13
 800b3ee:	bfb8      	it	lt
 800b3f0:	3264      	addlt	r2, #100	; 0x64
 800b3f2:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800b3f6:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800b3fa:	ee76 7a40 	vsub.f32	s15, s12, s0
 800b3fe:	ee17 3a90 	vmov	r3, s15
 800b402:	bfab      	itete	ge
 800b404:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 800b408:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 800b40c:	ee00 3a10 	vmovge	s0, r3
 800b410:	eddf 7a16 	vldrlt	s15, [pc, #88]	; 800b46c <__ieee754_expf+0x1a4>
 800b414:	bfbc      	itt	lt
 800b416:	ee00 3a10 	vmovlt	s0, r3
 800b41a:	ee20 0a27 	vmullt.f32	s0, s0, s15
 800b41e:	4770      	bx	lr
 800b420:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800b428 <__ieee754_expf+0x160>
 800b424:	4770      	bx	lr
 800b426:	bf00      	nop
 800b428:	00000000 	.word	0x00000000
 800b42c:	42b17217 	.word	0x42b17217
 800b430:	7149f2ca 	.word	0x7149f2ca
 800b434:	42cff1b5 	.word	0x42cff1b5
 800b438:	3eb17218 	.word	0x3eb17218
 800b43c:	3f851591 	.word	0x3f851591
 800b440:	08071790 	.word	0x08071790
 800b444:	08071798 	.word	0x08071798
 800b448:	3331bb4c 	.word	0x3331bb4c
 800b44c:	b5ddea0e 	.word	0xb5ddea0e
 800b450:	388ab355 	.word	0x388ab355
 800b454:	bb360b61 	.word	0xbb360b61
 800b458:	3e2aaaab 	.word	0x3e2aaaab
 800b45c:	08071788 	.word	0x08071788
 800b460:	3fb8aa3b 	.word	0x3fb8aa3b
 800b464:	3f317180 	.word	0x3f317180
 800b468:	3717f7d1 	.word	0x3717f7d1
 800b46c:	0d800000 	.word	0x0d800000

0800b470 <__ieee754_logf>:
 800b470:	ee10 3a10 	vmov	r3, s0
 800b474:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800b478:	d106      	bne.n	800b488 <__ieee754_logf+0x18>
 800b47a:	ed9f 7a65 	vldr	s14, [pc, #404]	; 800b610 <__ieee754_logf+0x1a0>
 800b47e:	eddf 7a65 	vldr	s15, [pc, #404]	; 800b614 <__ieee754_logf+0x1a4>
 800b482:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800b486:	4770      	bx	lr
 800b488:	2b00      	cmp	r3, #0
 800b48a:	da02      	bge.n	800b492 <__ieee754_logf+0x22>
 800b48c:	ee30 7a40 	vsub.f32	s14, s0, s0
 800b490:	e7f5      	b.n	800b47e <__ieee754_logf+0xe>
 800b492:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800b496:	db02      	blt.n	800b49e <__ieee754_logf+0x2e>
 800b498:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b49c:	4770      	bx	lr
 800b49e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b4a2:	bfbf      	itttt	lt
 800b4a4:	eddf 7a5c 	vldrlt	s15, [pc, #368]	; 800b618 <__ieee754_logf+0x1a8>
 800b4a8:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800b4ac:	f06f 0118 	mvnlt.w	r1, #24
 800b4b0:	ee17 3a90 	vmovlt	r3, s15
 800b4b4:	ea4f 52e3 	mov.w	r2, r3, asr #23
 800b4b8:	bfa8      	it	ge
 800b4ba:	2100      	movge	r1, #0
 800b4bc:	3a7f      	subs	r2, #127	; 0x7f
 800b4be:	440a      	add	r2, r1
 800b4c0:	4956      	ldr	r1, [pc, #344]	; (800b61c <__ieee754_logf+0x1ac>)
 800b4c2:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800b4c6:	4419      	add	r1, r3
 800b4c8:	f401 0100 	and.w	r1, r1, #8388608	; 0x800000
 800b4cc:	eb02 52d1 	add.w	r2, r2, r1, lsr #23
 800b4d0:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 800b4d4:	4319      	orrs	r1, r3
 800b4d6:	ee07 1a90 	vmov	s15, r1
 800b4da:	f103 010f 	add.w	r1, r3, #15
 800b4de:	f3c1 0116 	ubfx	r1, r1, #0, #23
 800b4e2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800b4e6:	290f      	cmp	r1, #15
 800b4e8:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800b4ec:	dc31      	bgt.n	800b552 <__ieee754_logf+0xe2>
 800b4ee:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800b4f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4f6:	d10f      	bne.n	800b518 <__ieee754_logf+0xa8>
 800b4f8:	2a00      	cmp	r2, #0
 800b4fa:	f000 8085 	beq.w	800b608 <__ieee754_logf+0x198>
 800b4fe:	ee07 2a90 	vmov	s15, r2
 800b502:	ed9f 0a47 	vldr	s0, [pc, #284]	; 800b620 <__ieee754_logf+0x1b0>
 800b506:	ed9f 7a47 	vldr	s14, [pc, #284]	; 800b624 <__ieee754_logf+0x1b4>
 800b50a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b50e:	ee27 0a80 	vmul.f32	s0, s15, s0
 800b512:	eea7 0a87 	vfma.f32	s0, s15, s14
 800b516:	4770      	bx	lr
 800b518:	eddf 7a43 	vldr	s15, [pc, #268]	; 800b628 <__ieee754_logf+0x1b8>
 800b51c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800b520:	eea0 7a67 	vfms.f32	s14, s0, s15
 800b524:	ee60 7a00 	vmul.f32	s15, s0, s0
 800b528:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b52c:	b912      	cbnz	r2, 800b534 <__ieee754_logf+0xc4>
 800b52e:	ee30 0a47 	vsub.f32	s0, s0, s14
 800b532:	4770      	bx	lr
 800b534:	ee07 2a90 	vmov	s15, r2
 800b538:	eddf 6a39 	vldr	s13, [pc, #228]	; 800b620 <__ieee754_logf+0x1b0>
 800b53c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b540:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800b544:	ee37 0a40 	vsub.f32	s0, s14, s0
 800b548:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800b624 <__ieee754_logf+0x1b4>
 800b54c:	ee97 0a87 	vfnms.f32	s0, s15, s14
 800b550:	4770      	bx	lr
 800b552:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800b556:	ee70 7a27 	vadd.f32	s15, s0, s15
 800b55a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b62c <__ieee754_logf+0x1bc>
 800b55e:	eddf 4a34 	vldr	s9, [pc, #208]	; 800b630 <__ieee754_logf+0x1c0>
 800b562:	4934      	ldr	r1, [pc, #208]	; (800b634 <__ieee754_logf+0x1c4>)
 800b564:	ee80 6a27 	vdiv.f32	s12, s0, s15
 800b568:	4419      	add	r1, r3
 800b56a:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 800b56e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800b572:	430b      	orrs	r3, r1
 800b574:	2b00      	cmp	r3, #0
 800b576:	ee07 2a90 	vmov	s15, r2
 800b57a:	ee26 5a06 	vmul.f32	s10, s12, s12
 800b57e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800b582:	ee25 7a05 	vmul.f32	s14, s10, s10
 800b586:	eddf 7a2c 	vldr	s15, [pc, #176]	; 800b638 <__ieee754_logf+0x1c8>
 800b58a:	eee7 7a25 	vfma.f32	s15, s14, s11
 800b58e:	eddf 5a2b 	vldr	s11, [pc, #172]	; 800b63c <__ieee754_logf+0x1cc>
 800b592:	eee7 5a87 	vfma.f32	s11, s15, s14
 800b596:	eddf 7a2a 	vldr	s15, [pc, #168]	; 800b640 <__ieee754_logf+0x1d0>
 800b59a:	eee7 7a24 	vfma.f32	s15, s14, s9
 800b59e:	eddf 4a29 	vldr	s9, [pc, #164]	; 800b644 <__ieee754_logf+0x1d4>
 800b5a2:	eee7 4a87 	vfma.f32	s9, s15, s14
 800b5a6:	eddf 7a28 	vldr	s15, [pc, #160]	; 800b648 <__ieee754_logf+0x1d8>
 800b5aa:	eee4 7a87 	vfma.f32	s15, s9, s14
 800b5ae:	ee67 7a85 	vmul.f32	s15, s15, s10
 800b5b2:	eee5 7a87 	vfma.f32	s15, s11, s14
 800b5b6:	dd1c      	ble.n	800b5f2 <__ieee754_logf+0x182>
 800b5b8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800b5bc:	ee20 7a07 	vmul.f32	s14, s0, s14
 800b5c0:	ee27 7a00 	vmul.f32	s14, s14, s0
 800b5c4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b5c8:	ee67 7a86 	vmul.f32	s15, s15, s12
 800b5cc:	b922      	cbnz	r2, 800b5d8 <__ieee754_logf+0x168>
 800b5ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b5d2:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b5d6:	4770      	bx	lr
 800b5d8:	ed9f 6a11 	vldr	s12, [pc, #68]	; 800b620 <__ieee754_logf+0x1b0>
 800b5dc:	eee6 7a86 	vfma.f32	s15, s13, s12
 800b5e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b5e4:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800b5e8:	eddf 7a0e 	vldr	s15, [pc, #56]	; 800b624 <__ieee754_logf+0x1b4>
 800b5ec:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 800b5f0:	4770      	bx	lr
 800b5f2:	ee70 7a67 	vsub.f32	s15, s0, s15
 800b5f6:	ee67 7a86 	vmul.f32	s15, s15, s12
 800b5fa:	2a00      	cmp	r2, #0
 800b5fc:	d0e9      	beq.n	800b5d2 <__ieee754_logf+0x162>
 800b5fe:	ed9f 7a08 	vldr	s14, [pc, #32]	; 800b620 <__ieee754_logf+0x1b0>
 800b602:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800b606:	e7ed      	b.n	800b5e4 <__ieee754_logf+0x174>
 800b608:	ed9f 0a02 	vldr	s0, [pc, #8]	; 800b614 <__ieee754_logf+0x1a4>
 800b60c:	4770      	bx	lr
 800b60e:	bf00      	nop
 800b610:	cc000000 	.word	0xcc000000
 800b614:	00000000 	.word	0x00000000
 800b618:	4c000000 	.word	0x4c000000
 800b61c:	004afb20 	.word	0x004afb20
 800b620:	3717f7d1 	.word	0x3717f7d1
 800b624:	3f317180 	.word	0x3f317180
 800b628:	3eaaaaab 	.word	0x3eaaaaab
 800b62c:	3e1cd04f 	.word	0x3e1cd04f
 800b630:	3e178897 	.word	0x3e178897
 800b634:	ffcf5c30 	.word	0xffcf5c30
 800b638:	3e638e29 	.word	0x3e638e29
 800b63c:	3ecccccd 	.word	0x3ecccccd
 800b640:	3e3a3325 	.word	0x3e3a3325
 800b644:	3e924925 	.word	0x3e924925
 800b648:	3f2aaaab 	.word	0x3f2aaaab

0800b64c <__ieee754_powf>:
 800b64c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b650:	ee10 5a90 	vmov	r5, s1
 800b654:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 800b658:	ed2d 8b02 	vpush	{d8}
 800b65c:	eeb0 8a40 	vmov.f32	s16, s0
 800b660:	eef0 8a60 	vmov.f32	s17, s1
 800b664:	f000 8293 	beq.w	800bb8e <__ieee754_powf+0x542>
 800b668:	ee10 8a10 	vmov	r8, s0
 800b66c:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 800b670:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800b674:	dc06      	bgt.n	800b684 <__ieee754_powf+0x38>
 800b676:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 800b67a:	dd0a      	ble.n	800b692 <__ieee754_powf+0x46>
 800b67c:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800b680:	f000 8285 	beq.w	800bb8e <__ieee754_powf+0x542>
 800b684:	ecbd 8b02 	vpop	{d8}
 800b688:	48d9      	ldr	r0, [pc, #868]	; (800b9f0 <__ieee754_powf+0x3a4>)
 800b68a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b68e:	f000 bbe9 	b.w	800be64 <nanf>
 800b692:	f1b8 0f00 	cmp.w	r8, #0
 800b696:	da1d      	bge.n	800b6d4 <__ieee754_powf+0x88>
 800b698:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 800b69c:	da2c      	bge.n	800b6f8 <__ieee754_powf+0xac>
 800b69e:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800b6a2:	db30      	blt.n	800b706 <__ieee754_powf+0xba>
 800b6a4:	15fb      	asrs	r3, r7, #23
 800b6a6:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800b6aa:	fa47 f603 	asr.w	r6, r7, r3
 800b6ae:	fa06 f303 	lsl.w	r3, r6, r3
 800b6b2:	42bb      	cmp	r3, r7
 800b6b4:	d127      	bne.n	800b706 <__ieee754_powf+0xba>
 800b6b6:	f006 0601 	and.w	r6, r6, #1
 800b6ba:	f1c6 0602 	rsb	r6, r6, #2
 800b6be:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800b6c2:	d122      	bne.n	800b70a <__ieee754_powf+0xbe>
 800b6c4:	2d00      	cmp	r5, #0
 800b6c6:	f280 8268 	bge.w	800bb9a <__ieee754_powf+0x54e>
 800b6ca:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800b6ce:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800b6d2:	e00d      	b.n	800b6f0 <__ieee754_powf+0xa4>
 800b6d4:	2600      	movs	r6, #0
 800b6d6:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 800b6da:	d1f0      	bne.n	800b6be <__ieee754_powf+0x72>
 800b6dc:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800b6e0:	f000 8255 	beq.w	800bb8e <__ieee754_powf+0x542>
 800b6e4:	dd0a      	ble.n	800b6fc <__ieee754_powf+0xb0>
 800b6e6:	2d00      	cmp	r5, #0
 800b6e8:	f280 8254 	bge.w	800bb94 <__ieee754_powf+0x548>
 800b6ec:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 800b9f4 <__ieee754_powf+0x3a8>
 800b6f0:	ecbd 8b02 	vpop	{d8}
 800b6f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6f8:	2602      	movs	r6, #2
 800b6fa:	e7ec      	b.n	800b6d6 <__ieee754_powf+0x8a>
 800b6fc:	2d00      	cmp	r5, #0
 800b6fe:	daf5      	bge.n	800b6ec <__ieee754_powf+0xa0>
 800b700:	eeb1 0a68 	vneg.f32	s0, s17
 800b704:	e7f4      	b.n	800b6f0 <__ieee754_powf+0xa4>
 800b706:	2600      	movs	r6, #0
 800b708:	e7d9      	b.n	800b6be <__ieee754_powf+0x72>
 800b70a:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 800b70e:	d102      	bne.n	800b716 <__ieee754_powf+0xca>
 800b710:	ee28 0a08 	vmul.f32	s0, s16, s16
 800b714:	e7ec      	b.n	800b6f0 <__ieee754_powf+0xa4>
 800b716:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 800b71a:	eeb0 0a48 	vmov.f32	s0, s16
 800b71e:	d108      	bne.n	800b732 <__ieee754_powf+0xe6>
 800b720:	f1b8 0f00 	cmp.w	r8, #0
 800b724:	db05      	blt.n	800b732 <__ieee754_powf+0xe6>
 800b726:	ecbd 8b02 	vpop	{d8}
 800b72a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b72e:	f000 ba4d 	b.w	800bbcc <__ieee754_sqrtf>
 800b732:	f000 fb85 	bl	800be40 <fabsf>
 800b736:	b124      	cbz	r4, 800b742 <__ieee754_powf+0xf6>
 800b738:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 800b73c:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800b740:	d117      	bne.n	800b772 <__ieee754_powf+0x126>
 800b742:	2d00      	cmp	r5, #0
 800b744:	bfbc      	itt	lt
 800b746:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 800b74a:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800b74e:	f1b8 0f00 	cmp.w	r8, #0
 800b752:	dacd      	bge.n	800b6f0 <__ieee754_powf+0xa4>
 800b754:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 800b758:	ea54 0306 	orrs.w	r3, r4, r6
 800b75c:	d104      	bne.n	800b768 <__ieee754_powf+0x11c>
 800b75e:	ee70 7a40 	vsub.f32	s15, s0, s0
 800b762:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800b766:	e7c3      	b.n	800b6f0 <__ieee754_powf+0xa4>
 800b768:	2e01      	cmp	r6, #1
 800b76a:	d1c1      	bne.n	800b6f0 <__ieee754_powf+0xa4>
 800b76c:	eeb1 0a40 	vneg.f32	s0, s0
 800b770:	e7be      	b.n	800b6f0 <__ieee754_powf+0xa4>
 800b772:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 800b776:	3801      	subs	r0, #1
 800b778:	ea56 0300 	orrs.w	r3, r6, r0
 800b77c:	d104      	bne.n	800b788 <__ieee754_powf+0x13c>
 800b77e:	ee38 8a48 	vsub.f32	s16, s16, s16
 800b782:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800b786:	e7b3      	b.n	800b6f0 <__ieee754_powf+0xa4>
 800b788:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 800b78c:	dd6d      	ble.n	800b86a <__ieee754_powf+0x21e>
 800b78e:	4b9a      	ldr	r3, [pc, #616]	; (800b9f8 <__ieee754_powf+0x3ac>)
 800b790:	429c      	cmp	r4, r3
 800b792:	dc06      	bgt.n	800b7a2 <__ieee754_powf+0x156>
 800b794:	2d00      	cmp	r5, #0
 800b796:	daa9      	bge.n	800b6ec <__ieee754_powf+0xa0>
 800b798:	ed9f 0a98 	vldr	s0, [pc, #608]	; 800b9fc <__ieee754_powf+0x3b0>
 800b79c:	ee20 0a00 	vmul.f32	s0, s0, s0
 800b7a0:	e7a6      	b.n	800b6f0 <__ieee754_powf+0xa4>
 800b7a2:	4b97      	ldr	r3, [pc, #604]	; (800ba00 <__ieee754_powf+0x3b4>)
 800b7a4:	429c      	cmp	r4, r3
 800b7a6:	dd02      	ble.n	800b7ae <__ieee754_powf+0x162>
 800b7a8:	2d00      	cmp	r5, #0
 800b7aa:	dcf5      	bgt.n	800b798 <__ieee754_powf+0x14c>
 800b7ac:	e79e      	b.n	800b6ec <__ieee754_powf+0xa0>
 800b7ae:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800b7b2:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b7b6:	ed9f 7a93 	vldr	s14, [pc, #588]	; 800ba04 <__ieee754_powf+0x3b8>
 800b7ba:	eef1 6a40 	vneg.f32	s13, s0
 800b7be:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800b7c2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b7c6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800b7ca:	eee7 7a40 	vfms.f32	s15, s14, s0
 800b7ce:	ee60 0a00 	vmul.f32	s1, s0, s0
 800b7d2:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 800ba08 <__ieee754_powf+0x3bc>
 800b7d6:	ee67 0aa0 	vmul.f32	s1, s15, s1
 800b7da:	eddf 7a8c 	vldr	s15, [pc, #560]	; 800ba0c <__ieee754_powf+0x3c0>
 800b7de:	ee67 7ae0 	vnmul.f32	s15, s15, s1
 800b7e2:	eee0 7a07 	vfma.f32	s15, s0, s14
 800b7e6:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 800ba10 <__ieee754_powf+0x3c4>
 800b7ea:	eeb0 6a67 	vmov.f32	s12, s15
 800b7ee:	eea0 6a07 	vfma.f32	s12, s0, s14
 800b7f2:	ee16 3a10 	vmov	r3, s12
 800b7f6:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800b7fa:	f023 030f 	bic.w	r3, r3, #15
 800b7fe:	ee00 3a90 	vmov	s1, r3
 800b802:	eee6 0a87 	vfma.f32	s1, s13, s14
 800b806:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800b80a:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 800b80e:	f025 050f 	bic.w	r5, r5, #15
 800b812:	ee07 5a10 	vmov	s14, r5
 800b816:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800b81a:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800b81e:	ee07 3a90 	vmov	s15, r3
 800b822:	eee7 0a27 	vfma.f32	s1, s14, s15
 800b826:	3e01      	subs	r6, #1
 800b828:	ea56 0200 	orrs.w	r2, r6, r0
 800b82c:	ee07 5a10 	vmov	s14, r5
 800b830:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b834:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800b838:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800b83c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800b840:	ee17 4a10 	vmov	r4, s14
 800b844:	bf08      	it	eq
 800b846:	eeb0 8a40 	vmoveq.f32	s16, s0
 800b84a:	2c00      	cmp	r4, #0
 800b84c:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800b850:	f340 8184 	ble.w	800bb5c <__ieee754_powf+0x510>
 800b854:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 800b858:	f340 80fc 	ble.w	800ba54 <__ieee754_powf+0x408>
 800b85c:	eddf 7a67 	vldr	s15, [pc, #412]	; 800b9fc <__ieee754_powf+0x3b0>
 800b860:	ee28 0a27 	vmul.f32	s0, s16, s15
 800b864:	ee20 0a27 	vmul.f32	s0, s0, s15
 800b868:	e742      	b.n	800b6f0 <__ieee754_powf+0xa4>
 800b86a:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
 800b86e:	bfbf      	itttt	lt
 800b870:	eddf 7a68 	vldrlt	s15, [pc, #416]	; 800ba14 <__ieee754_powf+0x3c8>
 800b874:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800b878:	f06f 0217 	mvnlt.w	r2, #23
 800b87c:	ee17 4a90 	vmovlt	r4, s15
 800b880:	ea4f 53e4 	mov.w	r3, r4, asr #23
 800b884:	bfa8      	it	ge
 800b886:	2200      	movge	r2, #0
 800b888:	3b7f      	subs	r3, #127	; 0x7f
 800b88a:	4413      	add	r3, r2
 800b88c:	4a62      	ldr	r2, [pc, #392]	; (800ba18 <__ieee754_powf+0x3cc>)
 800b88e:	f3c4 0416 	ubfx	r4, r4, #0, #23
 800b892:	4294      	cmp	r4, r2
 800b894:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 800b898:	dd06      	ble.n	800b8a8 <__ieee754_powf+0x25c>
 800b89a:	4a60      	ldr	r2, [pc, #384]	; (800ba1c <__ieee754_powf+0x3d0>)
 800b89c:	4294      	cmp	r4, r2
 800b89e:	f340 80a5 	ble.w	800b9ec <__ieee754_powf+0x3a0>
 800b8a2:	3301      	adds	r3, #1
 800b8a4:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800b8a8:	2400      	movs	r4, #0
 800b8aa:	4a5d      	ldr	r2, [pc, #372]	; (800ba20 <__ieee754_powf+0x3d4>)
 800b8ac:	00a7      	lsls	r7, r4, #2
 800b8ae:	443a      	add	r2, r7
 800b8b0:	ee07 1a90 	vmov	s15, r1
 800b8b4:	ed92 7a00 	vldr	s14, [r2]
 800b8b8:	4a5a      	ldr	r2, [pc, #360]	; (800ba24 <__ieee754_powf+0x3d8>)
 800b8ba:	ee37 6a27 	vadd.f32	s12, s14, s15
 800b8be:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 800b8c2:	eec5 6a06 	vdiv.f32	s13, s10, s12
 800b8c6:	1049      	asrs	r1, r1, #1
 800b8c8:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 800b8cc:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 800b8d0:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 800b8d4:	ee77 5ac7 	vsub.f32	s11, s15, s14
 800b8d8:	ee06 1a10 	vmov	s12, r1
 800b8dc:	ee65 4aa6 	vmul.f32	s9, s11, s13
 800b8e0:	ee14 ca90 	vmov	ip, s9
 800b8e4:	ea02 0c0c 	and.w	ip, r2, ip
 800b8e8:	ee05 ca10 	vmov	s10, ip
 800b8ec:	eeb1 4a45 	vneg.f32	s8, s10
 800b8f0:	eee4 5a06 	vfma.f32	s11, s8, s12
 800b8f4:	ee36 6a47 	vsub.f32	s12, s12, s14
 800b8f8:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 800ba28 <__ieee754_powf+0x3dc>
 800b8fc:	ee37 6ac6 	vsub.f32	s12, s15, s12
 800b900:	ee64 7aa4 	vmul.f32	s15, s9, s9
 800b904:	eee4 5a06 	vfma.f32	s11, s8, s12
 800b908:	ee67 3aa7 	vmul.f32	s7, s15, s15
 800b90c:	ee25 6aa6 	vmul.f32	s12, s11, s13
 800b910:	eddf 5a46 	vldr	s11, [pc, #280]	; 800ba2c <__ieee754_powf+0x3e0>
 800b914:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800b918:	eddf 5a45 	vldr	s11, [pc, #276]	; 800ba30 <__ieee754_powf+0x3e4>
 800b91c:	eee7 5a27 	vfma.f32	s11, s14, s15
 800b920:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800ba04 <__ieee754_powf+0x3b8>
 800b924:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800b928:	eddf 5a42 	vldr	s11, [pc, #264]	; 800ba34 <__ieee754_powf+0x3e8>
 800b92c:	eee7 5a27 	vfma.f32	s11, s14, s15
 800b930:	ed9f 7a41 	vldr	s14, [pc, #260]	; 800ba38 <__ieee754_powf+0x3ec>
 800b934:	ee75 6a24 	vadd.f32	s13, s10, s9
 800b938:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800b93c:	ee66 6a86 	vmul.f32	s13, s13, s12
 800b940:	eef0 5a08 	vmov.f32	s11, #8	; 0x40400000  3.0
 800b944:	eef0 7a65 	vmov.f32	s15, s11
 800b948:	eee3 6a87 	vfma.f32	s13, s7, s14
 800b94c:	eee5 7a05 	vfma.f32	s15, s10, s10
 800b950:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b954:	ee17 1a90 	vmov	r1, s15
 800b958:	4011      	ands	r1, r2
 800b95a:	ee07 1a90 	vmov	s15, r1
 800b95e:	ee37 7ae5 	vsub.f32	s14, s15, s11
 800b962:	eddf 5a36 	vldr	s11, [pc, #216]	; 800ba3c <__ieee754_powf+0x3f0>
 800b966:	eea4 7a05 	vfma.f32	s14, s8, s10
 800b96a:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800b96e:	ee27 7a24 	vmul.f32	s14, s14, s9
 800b972:	eea7 7a86 	vfma.f32	s14, s15, s12
 800b976:	eeb0 6a47 	vmov.f32	s12, s14
 800b97a:	eea5 6a27 	vfma.f32	s12, s10, s15
 800b97e:	ee16 1a10 	vmov	r1, s12
 800b982:	4011      	ands	r1, r2
 800b984:	ee06 1a90 	vmov	s13, r1
 800b988:	eee4 6a27 	vfma.f32	s13, s8, s15
 800b98c:	eddf 7a2c 	vldr	s15, [pc, #176]	; 800ba40 <__ieee754_powf+0x3f4>
 800b990:	ee37 7a66 	vsub.f32	s14, s14, s13
 800b994:	ee06 1a10 	vmov	s12, r1
 800b998:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b99c:	eddf 7a29 	vldr	s15, [pc, #164]	; 800ba44 <__ieee754_powf+0x3f8>
 800b9a0:	4929      	ldr	r1, [pc, #164]	; (800ba48 <__ieee754_powf+0x3fc>)
 800b9a2:	eea6 7a27 	vfma.f32	s14, s12, s15
 800b9a6:	4439      	add	r1, r7
 800b9a8:	edd1 7a00 	vldr	s15, [r1]
 800b9ac:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b9b0:	ee07 3a90 	vmov	s15, r3
 800b9b4:	eef0 0a47 	vmov.f32	s1, s14
 800b9b8:	4b24      	ldr	r3, [pc, #144]	; (800ba4c <__ieee754_powf+0x400>)
 800b9ba:	eee6 0a25 	vfma.f32	s1, s12, s11
 800b9be:	443b      	add	r3, r7
 800b9c0:	ed93 5a00 	vldr	s10, [r3]
 800b9c4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800b9c8:	ee70 0a85 	vadd.f32	s1, s1, s10
 800b9cc:	ee70 7aa6 	vadd.f32	s15, s1, s13
 800b9d0:	ee17 3a90 	vmov	r3, s15
 800b9d4:	4013      	ands	r3, r2
 800b9d6:	ee07 3a90 	vmov	s15, r3
 800b9da:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b9de:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800b9e2:	eee6 7a65 	vfms.f32	s15, s12, s11
 800b9e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b9ea:	e70e      	b.n	800b80a <__ieee754_powf+0x1be>
 800b9ec:	2401      	movs	r4, #1
 800b9ee:	e75c      	b.n	800b8aa <__ieee754_powf+0x25e>
 800b9f0:	08071749 	.word	0x08071749
 800b9f4:	00000000 	.word	0x00000000
 800b9f8:	3f7ffff7 	.word	0x3f7ffff7
 800b9fc:	7149f2ca 	.word	0x7149f2ca
 800ba00:	3f800007 	.word	0x3f800007
 800ba04:	3eaaaaab 	.word	0x3eaaaaab
 800ba08:	36eca570 	.word	0x36eca570
 800ba0c:	3fb8aa3b 	.word	0x3fb8aa3b
 800ba10:	3fb8aa00 	.word	0x3fb8aa00
 800ba14:	4b800000 	.word	0x4b800000
 800ba18:	001cc471 	.word	0x001cc471
 800ba1c:	005db3d6 	.word	0x005db3d6
 800ba20:	080717a0 	.word	0x080717a0
 800ba24:	fffff000 	.word	0xfffff000
 800ba28:	3e6c3255 	.word	0x3e6c3255
 800ba2c:	3e53f142 	.word	0x3e53f142
 800ba30:	3e8ba305 	.word	0x3e8ba305
 800ba34:	3edb6db7 	.word	0x3edb6db7
 800ba38:	3f19999a 	.word	0x3f19999a
 800ba3c:	3f763800 	.word	0x3f763800
 800ba40:	3f76384f 	.word	0x3f76384f
 800ba44:	369dc3a0 	.word	0x369dc3a0
 800ba48:	080717b0 	.word	0x080717b0
 800ba4c:	080717a8 	.word	0x080717a8
 800ba50:	3338aa3c 	.word	0x3338aa3c
 800ba54:	f040 8092 	bne.w	800bb7c <__ieee754_powf+0x530>
 800ba58:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 800ba50 <__ieee754_powf+0x404>
 800ba5c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ba60:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800ba64:	eef4 6ac7 	vcmpe.f32	s13, s14
 800ba68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba6c:	f73f aef6 	bgt.w	800b85c <__ieee754_powf+0x210>
 800ba70:	15db      	asrs	r3, r3, #23
 800ba72:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 800ba76:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800ba7a:	4103      	asrs	r3, r0
 800ba7c:	4423      	add	r3, r4
 800ba7e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800ba82:	4947      	ldr	r1, [pc, #284]	; (800bba0 <__ieee754_powf+0x554>)
 800ba84:	3a7f      	subs	r2, #127	; 0x7f
 800ba86:	4111      	asrs	r1, r2
 800ba88:	ea23 0101 	bic.w	r1, r3, r1
 800ba8c:	f3c3 0016 	ubfx	r0, r3, #0, #23
 800ba90:	ee07 1a10 	vmov	s14, r1
 800ba94:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800ba98:	f1c2 0217 	rsb	r2, r2, #23
 800ba9c:	4110      	asrs	r0, r2
 800ba9e:	2c00      	cmp	r4, #0
 800baa0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800baa4:	bfb8      	it	lt
 800baa6:	4240      	neglt	r0, r0
 800baa8:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800baac:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800bba4 <__ieee754_powf+0x558>
 800bab0:	ee17 3a10 	vmov	r3, s14
 800bab4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800bab8:	f023 030f 	bic.w	r3, r3, #15
 800babc:	ee07 3a10 	vmov	s14, r3
 800bac0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bac4:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800bac8:	eddf 7a37 	vldr	s15, [pc, #220]	; 800bba8 <__ieee754_powf+0x55c>
 800bacc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bad0:	eee0 7aa6 	vfma.f32	s15, s1, s13
 800bad4:	eddf 6a35 	vldr	s13, [pc, #212]	; 800bbac <__ieee754_powf+0x560>
 800bad8:	eeb0 0a67 	vmov.f32	s0, s15
 800badc:	eea7 0a26 	vfma.f32	s0, s14, s13
 800bae0:	eeb0 6a40 	vmov.f32	s12, s0
 800bae4:	eea7 6a66 	vfms.f32	s12, s14, s13
 800bae8:	ee20 7a00 	vmul.f32	s14, s0, s0
 800baec:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800baf0:	eddf 6a2f 	vldr	s13, [pc, #188]	; 800bbb0 <__ieee754_powf+0x564>
 800baf4:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 800bbb4 <__ieee754_powf+0x568>
 800baf8:	eea7 6a26 	vfma.f32	s12, s14, s13
 800bafc:	eddf 6a2e 	vldr	s13, [pc, #184]	; 800bbb8 <__ieee754_powf+0x56c>
 800bb00:	eee6 6a07 	vfma.f32	s13, s12, s14
 800bb04:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 800bbbc <__ieee754_powf+0x570>
 800bb08:	eea6 6a87 	vfma.f32	s12, s13, s14
 800bb0c:	eddf 6a2c 	vldr	s13, [pc, #176]	; 800bbc0 <__ieee754_powf+0x574>
 800bb10:	eee6 6a07 	vfma.f32	s13, s12, s14
 800bb14:	eeb0 6a40 	vmov.f32	s12, s0
 800bb18:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800bb1c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800bb20:	eeb0 7a46 	vmov.f32	s14, s12
 800bb24:	ee77 6a66 	vsub.f32	s13, s14, s13
 800bb28:	ee20 6a06 	vmul.f32	s12, s0, s12
 800bb2c:	eee0 7a27 	vfma.f32	s15, s0, s15
 800bb30:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800bb34:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bb38:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800bb3c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800bb40:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800bb44:	ee10 3a10 	vmov	r3, s0
 800bb48:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800bb4c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bb50:	da1a      	bge.n	800bb88 <__ieee754_powf+0x53c>
 800bb52:	f000 f9e7 	bl	800bf24 <scalbnf>
 800bb56:	ee20 0a08 	vmul.f32	s0, s0, s16
 800bb5a:	e5c9      	b.n	800b6f0 <__ieee754_powf+0xa4>
 800bb5c:	4a19      	ldr	r2, [pc, #100]	; (800bbc4 <__ieee754_powf+0x578>)
 800bb5e:	4293      	cmp	r3, r2
 800bb60:	dd02      	ble.n	800bb68 <__ieee754_powf+0x51c>
 800bb62:	eddf 7a19 	vldr	s15, [pc, #100]	; 800bbc8 <__ieee754_powf+0x57c>
 800bb66:	e67b      	b.n	800b860 <__ieee754_powf+0x214>
 800bb68:	d108      	bne.n	800bb7c <__ieee754_powf+0x530>
 800bb6a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800bb6e:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800bb72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb76:	f6ff af7b 	blt.w	800ba70 <__ieee754_powf+0x424>
 800bb7a:	e7f2      	b.n	800bb62 <__ieee754_powf+0x516>
 800bb7c:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 800bb80:	f73f af76 	bgt.w	800ba70 <__ieee754_powf+0x424>
 800bb84:	2000      	movs	r0, #0
 800bb86:	e78f      	b.n	800baa8 <__ieee754_powf+0x45c>
 800bb88:	ee00 3a10 	vmov	s0, r3
 800bb8c:	e7e3      	b.n	800bb56 <__ieee754_powf+0x50a>
 800bb8e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800bb92:	e5ad      	b.n	800b6f0 <__ieee754_powf+0xa4>
 800bb94:	eeb0 0a68 	vmov.f32	s0, s17
 800bb98:	e5aa      	b.n	800b6f0 <__ieee754_powf+0xa4>
 800bb9a:	eeb0 0a48 	vmov.f32	s0, s16
 800bb9e:	e5a7      	b.n	800b6f0 <__ieee754_powf+0xa4>
 800bba0:	007fffff 	.word	0x007fffff
 800bba4:	3f317218 	.word	0x3f317218
 800bba8:	35bfbe8c 	.word	0x35bfbe8c
 800bbac:	3f317200 	.word	0x3f317200
 800bbb0:	3331bb4c 	.word	0x3331bb4c
 800bbb4:	b5ddea0e 	.word	0xb5ddea0e
 800bbb8:	388ab355 	.word	0x388ab355
 800bbbc:	bb360b61 	.word	0xbb360b61
 800bbc0:	3e2aaaab 	.word	0x3e2aaaab
 800bbc4:	43160000 	.word	0x43160000
 800bbc8:	0da24260 	.word	0x0da24260

0800bbcc <__ieee754_sqrtf>:
 800bbcc:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800bbd0:	4770      	bx	lr

0800bbd2 <matherr>:
 800bbd2:	2000      	movs	r0, #0
 800bbd4:	4770      	bx	lr
	...

0800bbd8 <nan>:
 800bbd8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800bbe0 <nan+0x8>
 800bbdc:	4770      	bx	lr
 800bbde:	bf00      	nop
 800bbe0:	00000000 	.word	0x00000000
 800bbe4:	7ff80000 	.word	0x7ff80000

0800bbe8 <expm1f>:
 800bbe8:	ee10 2a10 	vmov	r2, s0
 800bbec:	4985      	ldr	r1, [pc, #532]	; (800be04 <expm1f+0x21c>)
 800bbee:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800bbf2:	428b      	cmp	r3, r1
 800bbf4:	d924      	bls.n	800bc40 <expm1f+0x58>
 800bbf6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800bbfa:	d902      	bls.n	800bc02 <expm1f+0x1a>
 800bbfc:	ee30 0a00 	vadd.f32	s0, s0, s0
 800bc00:	4770      	bx	lr
 800bc02:	d106      	bne.n	800bc12 <expm1f+0x2a>
 800bc04:	2a00      	cmp	r2, #0
 800bc06:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800bc0a:	bfb8      	it	lt
 800bc0c:	eeb0 0a67 	vmovlt.f32	s0, s15
 800bc10:	4770      	bx	lr
 800bc12:	2a00      	cmp	r2, #0
 800bc14:	db08      	blt.n	800bc28 <expm1f+0x40>
 800bc16:	4a7c      	ldr	r2, [pc, #496]	; (800be08 <expm1f+0x220>)
 800bc18:	4293      	cmp	r3, r2
 800bc1a:	f240 80eb 	bls.w	800bdf4 <expm1f+0x20c>
 800bc1e:	ed9f 0a7b 	vldr	s0, [pc, #492]	; 800be0c <expm1f+0x224>
 800bc22:	ee20 0a00 	vmul.f32	s0, s0, s0
 800bc26:	4770      	bx	lr
 800bc28:	eddf 7a79 	vldr	s15, [pc, #484]	; 800be10 <expm1f+0x228>
 800bc2c:	ee70 7a27 	vadd.f32	s15, s0, s15
 800bc30:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800bc34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc38:	d554      	bpl.n	800bce4 <expm1f+0xfc>
 800bc3a:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800bc3e:	4770      	bx	lr
 800bc40:	4974      	ldr	r1, [pc, #464]	; (800be14 <expm1f+0x22c>)
 800bc42:	428b      	cmp	r3, r1
 800bc44:	d96d      	bls.n	800bd22 <expm1f+0x13a>
 800bc46:	4974      	ldr	r1, [pc, #464]	; (800be18 <expm1f+0x230>)
 800bc48:	428b      	cmp	r3, r1
 800bc4a:	d84b      	bhi.n	800bce4 <expm1f+0xfc>
 800bc4c:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800be1c <expm1f+0x234>
 800bc50:	2a00      	cmp	r2, #0
 800bc52:	bfa7      	ittee	ge
 800bc54:	ee30 7a47 	vsubge.f32	s14, s0, s14
 800bc58:	eddf 7a71 	vldrge	s15, [pc, #452]	; 800be20 <expm1f+0x238>
 800bc5c:	eddf 7a71 	vldrlt	s15, [pc, #452]	; 800be24 <expm1f+0x23c>
 800bc60:	ee30 7a07 	vaddlt.f32	s14, s0, s14
 800bc64:	bfac      	ite	ge
 800bc66:	2301      	movge	r3, #1
 800bc68:	f04f 33ff 	movlt.w	r3, #4294967295
 800bc6c:	ee37 0a67 	vsub.f32	s0, s14, s15
 800bc70:	ee37 7a40 	vsub.f32	s14, s14, s0
 800bc74:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bc78:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 800bc7c:	ee20 5a25 	vmul.f32	s10, s0, s11
 800bc80:	eddf 6a69 	vldr	s13, [pc, #420]	; 800be28 <expm1f+0x240>
 800bc84:	ed9f 6a69 	vldr	s12, [pc, #420]	; 800be2c <expm1f+0x244>
 800bc88:	ee20 7a05 	vmul.f32	s14, s0, s10
 800bc8c:	eea7 6a26 	vfma.f32	s12, s14, s13
 800bc90:	eddf 6a67 	vldr	s13, [pc, #412]	; 800be30 <expm1f+0x248>
 800bc94:	eee6 6a07 	vfma.f32	s13, s12, s14
 800bc98:	ed9f 6a66 	vldr	s12, [pc, #408]	; 800be34 <expm1f+0x24c>
 800bc9c:	eea6 6a87 	vfma.f32	s12, s13, s14
 800bca0:	eddf 6a65 	vldr	s13, [pc, #404]	; 800be38 <expm1f+0x250>
 800bca4:	eee6 6a07 	vfma.f32	s13, s12, s14
 800bca8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800bcac:	eef0 4a46 	vmov.f32	s9, s12
 800bcb0:	eee6 4a87 	vfma.f32	s9, s13, s14
 800bcb4:	eef0 6a64 	vmov.f32	s13, s9
 800bcb8:	eef0 4a08 	vmov.f32	s9, #8	; 0x40400000  3.0
 800bcbc:	eee5 4a66 	vfms.f32	s9, s10, s13
 800bcc0:	ee36 5ae4 	vsub.f32	s10, s13, s9
 800bcc4:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 800bcc8:	eee0 6a64 	vfms.f32	s13, s0, s9
 800bccc:	eef0 4a66 	vmov.f32	s9, s13
 800bcd0:	eec5 6a24 	vdiv.f32	s13, s10, s9
 800bcd4:	ee66 6a87 	vmul.f32	s13, s13, s14
 800bcd8:	bb8b      	cbnz	r3, 800bd3e <expm1f+0x156>
 800bcda:	eef0 7a47 	vmov.f32	s15, s14
 800bcde:	eed0 7a26 	vfnms.f32	s15, s0, s13
 800bce2:	e027      	b.n	800bd34 <expm1f+0x14c>
 800bce4:	eddf 7a55 	vldr	s15, [pc, #340]	; 800be3c <expm1f+0x254>
 800bce8:	2a00      	cmp	r2, #0
 800bcea:	ee20 7a27 	vmul.f32	s14, s0, s15
 800bcee:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800bcf2:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 800bcf6:	bfa8      	it	ge
 800bcf8:	eef0 7a66 	vmovge.f32	s15, s13
 800bcfc:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bd00:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800be1c <expm1f+0x234>
 800bd04:	eddf 6a46 	vldr	s13, [pc, #280]	; 800be20 <expm1f+0x238>
 800bd08:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bd0c:	ee17 3a90 	vmov	r3, s15
 800bd10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bd14:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800bd18:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800bd1c:	eeb0 7a40 	vmov.f32	s14, s0
 800bd20:	e7a4      	b.n	800bc6c <expm1f+0x84>
 800bd22:	f1b3 5f4c 	cmp.w	r3, #855638016	; 0x33000000
 800bd26:	d208      	bcs.n	800bd3a <expm1f+0x152>
 800bd28:	eddf 7a38 	vldr	s15, [pc, #224]	; 800be0c <expm1f+0x224>
 800bd2c:	ee70 7a27 	vadd.f32	s15, s0, s15
 800bd30:	ee77 7ae7 	vsub.f32	s15, s15, s15
 800bd34:	ee30 0a67 	vsub.f32	s0, s0, s15
 800bd38:	4770      	bx	lr
 800bd3a:	2300      	movs	r3, #0
 800bd3c:	e79c      	b.n	800bc78 <expm1f+0x90>
 800bd3e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800bd42:	1c5a      	adds	r2, r3, #1
 800bd44:	eed6 7a80 	vfnms.f32	s15, s13, s0
 800bd48:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bd4c:	d106      	bne.n	800bd5c <expm1f+0x174>
 800bd4e:	ee70 7a67 	vsub.f32	s15, s0, s15
 800bd52:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 800bd56:	eea7 0aa5 	vfma.f32	s0, s15, s11
 800bd5a:	4770      	bx	lr
 800bd5c:	2b01      	cmp	r3, #1
 800bd5e:	d118      	bne.n	800bd92 <expm1f+0x1aa>
 800bd60:	eebd 7a00 	vmov.f32	s14, #208	; 0xbe800000 -0.250
 800bd64:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800bd68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd6c:	bf41      	itttt	mi
 800bd6e:	ee30 0a25 	vaddmi.f32	s0, s0, s11
 800bd72:	ee37 0ac0 	vsubmi.f32	s0, s15, s0
 800bd76:	eef8 7a00 	vmovmi.f32	s15, #128	; 0xc0000000 -2.0
 800bd7a:	ee20 0a27 	vmulmi.f32	s0, s0, s15
 800bd7e:	bf5f      	itttt	pl
 800bd80:	ee30 0a67 	vsubpl.f32	s0, s0, s15
 800bd84:	eef0 7a00 	vmovpl.f32	s15, #0	; 0x40000000  2.0
 800bd88:	eea0 6a27 	vfmapl.f32	s12, s0, s15
 800bd8c:	eeb0 0a46 	vmovpl.f32	s0, s12
 800bd90:	4770      	bx	lr
 800bd92:	1c5a      	adds	r2, r3, #1
 800bd94:	2a39      	cmp	r2, #57	; 0x39
 800bd96:	ea4f 51c3 	mov.w	r1, r3, lsl #23
 800bd9a:	d90b      	bls.n	800bdb4 <expm1f+0x1cc>
 800bd9c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800bda0:	ee36 0a40 	vsub.f32	s0, s12, s0
 800bda4:	ee10 3a10 	vmov	r3, s0
 800bda8:	440b      	add	r3, r1
 800bdaa:	ee00 3a10 	vmov	s0, r3
 800bdae:	ee30 0a46 	vsub.f32	s0, s0, s12
 800bdb2:	4770      	bx	lr
 800bdb4:	2b16      	cmp	r3, #22
 800bdb6:	dc11      	bgt.n	800bddc <expm1f+0x1f4>
 800bdb8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800bdbc:	fa42 f303 	asr.w	r3, r2, r3
 800bdc0:	f1c3 537e 	rsb	r3, r3, #1065353216	; 0x3f800000
 800bdc4:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800bdc8:	ee07 3a90 	vmov	s15, r3
 800bdcc:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800bdd0:	ee10 3a10 	vmov	r3, s0
 800bdd4:	440b      	add	r3, r1
 800bdd6:	ee00 3a10 	vmov	s0, r3
 800bdda:	4770      	bx	lr
 800bddc:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 800bde0:	05db      	lsls	r3, r3, #23
 800bde2:	ee07 3a10 	vmov	s14, r3
 800bde6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bdea:	ee30 0a67 	vsub.f32	s0, s0, s15
 800bdee:	ee30 0a06 	vadd.f32	s0, s0, s12
 800bdf2:	e7ed      	b.n	800bdd0 <expm1f+0x1e8>
 800bdf4:	eddf 7a11 	vldr	s15, [pc, #68]	; 800be3c <expm1f+0x254>
 800bdf8:	ee20 7a27 	vmul.f32	s14, s0, s15
 800bdfc:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800be00:	e77c      	b.n	800bcfc <expm1f+0x114>
 800be02:	bf00      	nop
 800be04:	4195b843 	.word	0x4195b843
 800be08:	42b17217 	.word	0x42b17217
 800be0c:	7149f2ca 	.word	0x7149f2ca
 800be10:	0da24260 	.word	0x0da24260
 800be14:	3eb17218 	.word	0x3eb17218
 800be18:	3f851591 	.word	0x3f851591
 800be1c:	3f317180 	.word	0x3f317180
 800be20:	3717f7d1 	.word	0x3717f7d1
 800be24:	b717f7d1 	.word	0xb717f7d1
 800be28:	b457edbb 	.word	0xb457edbb
 800be2c:	36867e54 	.word	0x36867e54
 800be30:	b8a670cd 	.word	0xb8a670cd
 800be34:	3ad00d01 	.word	0x3ad00d01
 800be38:	bd088889 	.word	0xbd088889
 800be3c:	3fb8aa3b 	.word	0x3fb8aa3b

0800be40 <fabsf>:
 800be40:	ee10 3a10 	vmov	r3, s0
 800be44:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800be48:	ee00 3a10 	vmov	s0, r3
 800be4c:	4770      	bx	lr

0800be4e <finitef>:
 800be4e:	ee10 3a10 	vmov	r3, s0
 800be52:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 800be56:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800be5a:	bfac      	ite	ge
 800be5c:	2000      	movge	r0, #0
 800be5e:	2001      	movlt	r0, #1
 800be60:	4770      	bx	lr
	...

0800be64 <nanf>:
 800be64:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800be6c <nanf+0x8>
 800be68:	4770      	bx	lr
 800be6a:	bf00      	nop
 800be6c:	7fc00000 	.word	0x7fc00000

0800be70 <rintf>:
 800be70:	b513      	push	{r0, r1, r4, lr}
 800be72:	ee10 1a10 	vmov	r1, s0
 800be76:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800be7a:	0ddc      	lsrs	r4, r3, #23
 800be7c:	3c7f      	subs	r4, #127	; 0x7f
 800be7e:	2c16      	cmp	r4, #22
 800be80:	dc46      	bgt.n	800bf10 <rintf+0xa0>
 800be82:	b32b      	cbz	r3, 800bed0 <rintf+0x60>
 800be84:	2c00      	cmp	r4, #0
 800be86:	ee10 2a10 	vmov	r2, s0
 800be8a:	ea4f 70d1 	mov.w	r0, r1, lsr #31
 800be8e:	da21      	bge.n	800bed4 <rintf+0x64>
 800be90:	f3c1 0316 	ubfx	r3, r1, #0, #23
 800be94:	425b      	negs	r3, r3
 800be96:	4a21      	ldr	r2, [pc, #132]	; (800bf1c <rintf+0xac>)
 800be98:	0a5b      	lsrs	r3, r3, #9
 800be9a:	0d09      	lsrs	r1, r1, #20
 800be9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bea0:	0509      	lsls	r1, r1, #20
 800bea2:	430b      	orrs	r3, r1
 800bea4:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 800bea8:	ee07 3a90 	vmov	s15, r3
 800beac:	edd2 6a00 	vldr	s13, [r2]
 800beb0:	ee36 7aa7 	vadd.f32	s14, s13, s15
 800beb4:	ed8d 7a01 	vstr	s14, [sp, #4]
 800beb8:	eddd 7a01 	vldr	s15, [sp, #4]
 800bebc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800bec0:	ee17 3a90 	vmov	r3, s15
 800bec4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bec8:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 800becc:	ee00 3a10 	vmov	s0, r3
 800bed0:	b002      	add	sp, #8
 800bed2:	bd10      	pop	{r4, pc}
 800bed4:	4b12      	ldr	r3, [pc, #72]	; (800bf20 <rintf+0xb0>)
 800bed6:	4123      	asrs	r3, r4
 800bed8:	4219      	tst	r1, r3
 800beda:	d0f9      	beq.n	800bed0 <rintf+0x60>
 800bedc:	085b      	lsrs	r3, r3, #1
 800bede:	4219      	tst	r1, r3
 800bee0:	d006      	beq.n	800bef0 <rintf+0x80>
 800bee2:	ea21 0203 	bic.w	r2, r1, r3
 800bee6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800beea:	fa43 f404 	asr.w	r4, r3, r4
 800beee:	4322      	orrs	r2, r4
 800bef0:	4b0a      	ldr	r3, [pc, #40]	; (800bf1c <rintf+0xac>)
 800bef2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800bef6:	ed90 7a00 	vldr	s14, [r0]
 800befa:	ee07 2a90 	vmov	s15, r2
 800befe:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bf02:	edcd 7a01 	vstr	s15, [sp, #4]
 800bf06:	ed9d 0a01 	vldr	s0, [sp, #4]
 800bf0a:	ee30 0a47 	vsub.f32	s0, s0, s14
 800bf0e:	e7df      	b.n	800bed0 <rintf+0x60>
 800bf10:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800bf14:	d3dc      	bcc.n	800bed0 <rintf+0x60>
 800bf16:	ee30 0a00 	vadd.f32	s0, s0, s0
 800bf1a:	e7d9      	b.n	800bed0 <rintf+0x60>
 800bf1c:	080717b8 	.word	0x080717b8
 800bf20:	007fffff 	.word	0x007fffff

0800bf24 <scalbnf>:
 800bf24:	b508      	push	{r3, lr}
 800bf26:	ee10 2a10 	vmov	r2, s0
 800bf2a:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 800bf2e:	ed2d 8b02 	vpush	{d8}
 800bf32:	eef0 0a40 	vmov.f32	s1, s0
 800bf36:	d004      	beq.n	800bf42 <scalbnf+0x1e>
 800bf38:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800bf3c:	d306      	bcc.n	800bf4c <scalbnf+0x28>
 800bf3e:	ee70 0a00 	vadd.f32	s1, s0, s0
 800bf42:	ecbd 8b02 	vpop	{d8}
 800bf46:	eeb0 0a60 	vmov.f32	s0, s1
 800bf4a:	bd08      	pop	{r3, pc}
 800bf4c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bf50:	d21c      	bcs.n	800bf8c <scalbnf+0x68>
 800bf52:	4b1f      	ldr	r3, [pc, #124]	; (800bfd0 <scalbnf+0xac>)
 800bf54:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800bfd4 <scalbnf+0xb0>
 800bf58:	4298      	cmp	r0, r3
 800bf5a:	ee60 0a27 	vmul.f32	s1, s0, s15
 800bf5e:	db10      	blt.n	800bf82 <scalbnf+0x5e>
 800bf60:	ee10 2a90 	vmov	r2, s1
 800bf64:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 800bf68:	3b19      	subs	r3, #25
 800bf6a:	4403      	add	r3, r0
 800bf6c:	2bfe      	cmp	r3, #254	; 0xfe
 800bf6e:	dd0f      	ble.n	800bf90 <scalbnf+0x6c>
 800bf70:	ed9f 8a19 	vldr	s16, [pc, #100]	; 800bfd8 <scalbnf+0xb4>
 800bf74:	eeb0 0a48 	vmov.f32	s0, s16
 800bf78:	f000 f834 	bl	800bfe4 <copysignf>
 800bf7c:	ee60 0a08 	vmul.f32	s1, s0, s16
 800bf80:	e7df      	b.n	800bf42 <scalbnf+0x1e>
 800bf82:	eddf 7a16 	vldr	s15, [pc, #88]	; 800bfdc <scalbnf+0xb8>
 800bf86:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800bf8a:	e7da      	b.n	800bf42 <scalbnf+0x1e>
 800bf8c:	0ddb      	lsrs	r3, r3, #23
 800bf8e:	e7ec      	b.n	800bf6a <scalbnf+0x46>
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	dd06      	ble.n	800bfa2 <scalbnf+0x7e>
 800bf94:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800bf98:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800bf9c:	ee00 3a90 	vmov	s1, r3
 800bfa0:	e7cf      	b.n	800bf42 <scalbnf+0x1e>
 800bfa2:	f113 0f16 	cmn.w	r3, #22
 800bfa6:	da06      	bge.n	800bfb6 <scalbnf+0x92>
 800bfa8:	f24c 3350 	movw	r3, #50000	; 0xc350
 800bfac:	4298      	cmp	r0, r3
 800bfae:	dcdf      	bgt.n	800bf70 <scalbnf+0x4c>
 800bfb0:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 800bfdc <scalbnf+0xb8>
 800bfb4:	e7de      	b.n	800bf74 <scalbnf+0x50>
 800bfb6:	3319      	adds	r3, #25
 800bfb8:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800bfbc:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800bfc0:	eddf 7a07 	vldr	s15, [pc, #28]	; 800bfe0 <scalbnf+0xbc>
 800bfc4:	ee07 3a10 	vmov	s14, r3
 800bfc8:	ee67 0a27 	vmul.f32	s1, s14, s15
 800bfcc:	e7b9      	b.n	800bf42 <scalbnf+0x1e>
 800bfce:	bf00      	nop
 800bfd0:	ffff3cb0 	.word	0xffff3cb0
 800bfd4:	4c000000 	.word	0x4c000000
 800bfd8:	7149f2ca 	.word	0x7149f2ca
 800bfdc:	0da24260 	.word	0x0da24260
 800bfe0:	33000000 	.word	0x33000000

0800bfe4 <copysignf>:
 800bfe4:	ee10 3a10 	vmov	r3, s0
 800bfe8:	ee10 2a90 	vmov	r2, s1
 800bfec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bff0:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800bff4:	4313      	orrs	r3, r2
 800bff6:	ee00 3a10 	vmov	s0, r3
 800bffa:	4770      	bx	lr

0800bffc <_init>:
 800bffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bffe:	bf00      	nop
 800c000:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c002:	bc08      	pop	{r3}
 800c004:	469e      	mov	lr, r3
 800c006:	4770      	bx	lr

0800c008 <_fini>:
 800c008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c00a:	bf00      	nop
 800c00c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c00e:	bc08      	pop	{r3}
 800c010:	469e      	mov	lr, r3
 800c012:	4770      	bx	lr
